{"sha": "7993ddd89d8d2e0754bf9b12756573f56b76e254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OTNkZGQ4OWQ4ZDJlMDc1NGJmOWIxMjc1NjU3M2Y1NmI3NmUyNTQ=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T13:28:32Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T14:22:49Z"}, "message": "Add find_map_relevant_impl", "tree": {"sha": "b4662c0ad41cf954eb4a76db9ea86bd796d1749f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4662c0ad41cf954eb4a76db9ea86bd796d1749f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7993ddd89d8d2e0754bf9b12756573f56b76e254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7993ddd89d8d2e0754bf9b12756573f56b76e254", "html_url": "https://github.com/rust-lang/rust/commit/7993ddd89d8d2e0754bf9b12756573f56b76e254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7993ddd89d8d2e0754bf9b12756573f56b76e254/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2359ecc71fc912e84d37913b854030157fac3046", "url": "https://api.github.com/repos/rust-lang/rust/commits/2359ecc71fc912e84d37913b854030157fac3046", "html_url": "https://github.com/rust-lang/rust/commit/2359ecc71fc912e84d37913b854030157fac3046"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "05b8dad3097e413f52c37020e56525c65c06ceec", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -94,7 +94,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n         let _ = cdata;\n-        tcx.calculate_dtor(def_id, &mut |_,_| Ok(()))\n+        tcx.calculate_dtor(def_id, |_,_| Ok(()))\n     }\n     variances_of => { tcx.arena.alloc_from_iter(cdata.get_item_variances(def_id.index)) }\n     associated_item_def_ids => {"}, {"sha": "5599216c316dac62a5885c87ccb276db11035fca", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -167,6 +167,41 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n+    /// the first non-none value.\n+    pub fn find_map_relevant_impl<T, F: Fn(DefId) -> Option<T>>(\n+        self,\n+        def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        f: F,\n+    ) -> Option<T> {\n+        let impls = self.trait_impls_of(def_id);\n+\n+        for &impl_def_id in impls.blanket_impls.iter() {\n+            if let result @ Some(_) = f(impl_def_id) {\n+                return result;\n+            }\n+        }\n+\n+        if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n+            if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n+                for &impl_def_id in impls {\n+                    if let result @ Some(_) = f(impl_def_id) {\n+                        return result;\n+                    }\n+                }\n+            }\n+        } else {\n+            for &impl_def_id in impls.non_blanket_impls.values().flatten() {\n+                if let result @ Some(_) = f(impl_def_id) {\n+                    return result;\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+\n     /// Returns an iterator containing all impls\n     pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);"}, {"sha": "5ac12dfa993661dea69f2be093b6cc07f98f5961", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -341,19 +341,19 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn calculate_dtor(\n         self,\n         adt_did: DefId,\n-        validate: &mut dyn FnMut(Self, DefId) -> Result<(), ErrorReported>,\n+        validate: impl Fn(Self, DefId) -> Result<(), ErrorReported>,\n     ) -> Option<ty::Destructor> {\n         let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n-        let mut dtor_did = None;\n         let ty = self.type_of(adt_did);\n-        self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n+        let dtor_did = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n                 if validate(self, impl_did).is_ok() {\n-                    dtor_did = Some(item.def_id);\n+                    return Some(item.def_id);\n                 }\n             }\n+            None\n         });\n \n         Some(ty::Destructor { did: dtor_did? })"}, {"sha": "fb89b36060a28ace819f2ffa1748cbc471a597a0", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -34,7 +34,6 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n \n     fn is_const_item_without_destructor(&self, local: Local) -> Option<DefId> {\n         let def_id = self.is_const_item(local)?;\n-        let mut any_dtor = |_tcx, _def_id| Ok(());\n \n         // We avoid linting mutation of a const item if the const's type has a\n         // Drop impl. The Drop logic observes the mutation which was performed.\n@@ -54,7 +53,7 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n         //\n         //     #[const_mutation_allowed]\n         //     pub const LOG: Log = Log { msg: \"\" };\n-        match self.tcx.calculate_dtor(def_id, &mut any_dtor) {\n+        match self.tcx.calculate_dtor(def_id, |_, _| Ok(())) {\n             Some(_) => None,\n             None => Some(def_id),\n         }"}, {"sha": "05e3ed343511338af7fc5ef3b06ef4912a6379b3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -1384,17 +1384,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     ) {\n         let get_trait_impl = |trait_def_id| {\n-            let mut trait_impl = None;\n-            self.tcx.for_each_relevant_impl(\n+            self.tcx.find_map_relevant_impl(\n                 trait_def_id,\n                 trait_ref.skip_binder().self_ty(),\n-                |impl_def_id| {\n-                    if trait_impl.is_none() {\n-                        trait_impl = Some(impl_def_id);\n-                    }\n-                },\n-            );\n-            trait_impl\n+                |impl_def_id| Some(impl_def_id),\n+            )\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n         let all_traits = self.tcx.all_traits(LOCAL_CRATE);"}, {"sha": "1cb6ae21a47bbba05072f23fc61d156e1f409922", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -264,7 +264,7 @@ pub fn provide(providers: &mut Providers) {\n }\n \n fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n-    tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n+    tcx.calculate_dtor(def_id, dropck::check_drop_impl)\n }\n \n /// If this `DefId` is a \"primary tables entry\", returns"}, {"sha": "ab39910766164eb9e0261a89adb720d3cc2544be", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7993ddd89d8d2e0754bf9b12756573f56b76e254/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7993ddd89d8d2e0754bf9b12756573f56b76e254/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7993ddd89d8d2e0754bf9b12756573f56b76e254", "patch": "@@ -650,14 +650,9 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n     let ty = cx.tcx.type_of(type_);\n     let iter = in_scope_traits.iter().flat_map(|&trait_| {\n         trace!(\"considering explicit impl for trait {:?}\", trait_);\n-        let mut saw_impl = false;\n-        // Look at each trait implementation to see if it's an impl for `did`\n-        cx.tcx.for_each_relevant_impl(trait_, ty, |impl_| {\n-            // FIXME: this is inefficient, find a way to short-circuit for_each_* so this doesn't take as long\n-            if saw_impl {\n-                return;\n-            }\n \n+        // Look at each trait implementation to see if it's an impl for `did`\n+        cx.tcx.find_map_relevant_impl(trait_, ty, |impl_| {\n             let trait_ref = cx.tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n             let impl_type = trait_ref.self_ty();\n@@ -668,7 +663,7 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n                 type_\n             );\n             // Fast path: if this is a primitive simple `==` will work\n-            saw_impl = impl_type == ty\n+            let saw_impl = impl_type == ty\n                 || match impl_type.kind() {\n                     // Check if these are the same def_id\n                     ty::Adt(def, _) => {\n@@ -678,8 +673,9 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n                     ty::Foreign(def_id) => *def_id == type_,\n                     _ => false,\n                 };\n-        });\n-        if saw_impl { Some(trait_) } else { None }\n+\n+            if saw_impl { Some(trait_) } else { None }\n+        })\n     });\n     iter.collect()\n }"}]}