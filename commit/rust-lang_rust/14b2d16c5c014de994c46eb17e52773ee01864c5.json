{"sha": "14b2d16c5c014de994c46eb17e52773ee01864c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjJkMTZjNWMwMTRkZTk5NGM0NmViMTdlNTI3NzNlZTAxODY0YzU=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-09-24T02:43:32Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-10-15T14:22:39Z"}, "message": "ensure arguments are included in count mismatch span", "tree": {"sha": "317b8e3021e51704ff35a59db097770b4a431e07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/317b8e3021e51704ff35a59db097770b4a431e07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b2d16c5c014de994c46eb17e52773ee01864c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl+IWzMWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdPP/B/9gm4kDgYdz4au8GFOM94zXUj3y\nLBGrVnGhzjQf2EyOo0hLkWKffnsTBUBC1XFZPEszuBsVlAgc7nqacPcOqGNTtzI7\neYFYLzvbZB3oXUN/N3wKu7AglAWIsVqD09Onh9J/tqnsp5RGsRRJsWJNhbd5gg9z\nVAMQf+RN582IS4AoJEVIhB2cHd4tsJQexfjNNtzzHVzzzqP57K9t7FT1L6i9hD1Q\nP3p/9QUwiJdXUxofsna3a2CYVhQF69vqLC3v6ThQRtWgajUkc/aW/WNs8a3Q0nQE\n3iY61+J2mbqkyskdBfXZ644XnwOmhWiCUU9SKyGxNI6BlG/m9HPU2BAn81C4\n=s+ZR\n-----END PGP SIGNATURE-----", "payload": "tree 317b8e3021e51704ff35a59db097770b4a431e07\nparent 95daa068f10ac01482cc654bb211e93ab7b56445\nauthor Andy Russell <arussell123@gmail.com> 1600915412 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1602771759 -0400\n\nensure arguments are included in count mismatch span\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b2d16c5c014de994c46eb17e52773ee01864c5", "html_url": "https://github.com/rust-lang/rust/commit/14b2d16c5c014de994c46eb17e52773ee01864c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b2d16c5c014de994c46eb17e52773ee01864c5/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95daa068f10ac01482cc654bb211e93ab7b56445", "url": "https://api.github.com/repos/rust-lang/rust/commits/95daa068f10ac01482cc654bb211e93ab7b56445", "html_url": "https://github.com/rust-lang/rust/commit/95daa068f10ac01482cc654bb211e93ab7b56445"}], "stats": {"total": 327, "additions": 239, "deletions": 88}, "files": [{"sha": "52727e3a619494dadbadcc8ddafd1df5b967a03e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -2742,4 +2742,32 @@ impl<'hir> Node<'hir> {\n             _ => None,\n         }\n     }\n+\n+    pub fn hir_id(&self) -> Option<HirId> {\n+        match self {\n+            Node::Item(Item { hir_id, .. })\n+            | Node::ForeignItem(ForeignItem { hir_id, .. })\n+            | Node::TraitItem(TraitItem { hir_id, .. })\n+            | Node::ImplItem(ImplItem { hir_id, .. })\n+            | Node::Field(StructField { hir_id, .. })\n+            | Node::AnonConst(AnonConst { hir_id, .. })\n+            | Node::Expr(Expr { hir_id, .. })\n+            | Node::Stmt(Stmt { hir_id, .. })\n+            | Node::Ty(Ty { hir_id, .. })\n+            | Node::Binding(Pat { hir_id, .. })\n+            | Node::Pat(Pat { hir_id, .. })\n+            | Node::Arm(Arm { hir_id, .. })\n+            | Node::Block(Block { hir_id, .. })\n+            | Node::Local(Local { hir_id, .. })\n+            | Node::MacroDef(MacroDef { hir_id, .. })\n+            | Node::Lifetime(Lifetime { hir_id, .. })\n+            | Node::Param(Param { hir_id, .. })\n+            | Node::GenericParam(GenericParam { hir_id, .. }) => Some(*hir_id),\n+            Node::TraitRef(TraitRef { hir_ref_id, .. }) => Some(*hir_ref_id),\n+            Node::PathSegment(PathSegment { hir_id, .. }) => *hir_id,\n+            Node::Variant(Variant { id, .. }) => Some(*id),\n+            Node::Ctor(variant) => variant.ctor_hir_id(),\n+            Node::Crate(_) | Node::Visibility(_) => None,\n+        }\n+    }\n }"}, {"sha": "a38fb9642b92e0c323c46465a1011102dd5d7126", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -285,10 +285,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        let (fn_sig, def_span) = match *callee_ty.kind() {\n-            ty::FnDef(def_id, _) => {\n-                (callee_ty.fn_sig(self.tcx), self.tcx.hir().span_if_local(def_id))\n-            }\n+        let (fn_sig, def_id) = match *callee_ty.kind() {\n+            ty::FnDef(def_id, _) => (callee_ty.fn_sig(self.tcx), Some(def_id)),\n             ty::FnPtr(sig) => (sig, None),\n             ref t => {\n                 let mut unit_variant = None;\n@@ -427,7 +425,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             arg_exprs,\n             fn_sig.c_variadic,\n             TupleArgumentsFlag::DontTupleArguments,\n-            def_span,\n+            def_id,\n         );\n \n         fn_sig.output()"}, {"sha": "fd2f5eb5018d45fb8df64a4d14e4fe11b1983767", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n-use rustc_span::{self, Span};\n+use rustc_span::{self, MultiSpan, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n use std::mem::replace;\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             args_no_rcvr,\n             method.sig.c_variadic,\n             tuple_arguments,\n-            self.tcx.hir().span_if_local(method.def_id),\n+            Some(method.def_id),\n         );\n         method.sig.output()\n     }\n@@ -99,7 +99,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         args: &'tcx [hir::Expr<'tcx>],\n         c_variadic: bool,\n         tuple_arguments: TupleArgumentsFlag,\n-        def_span: Option<Span>,\n+        def_id: Option<DefId>,\n     ) {\n         let tcx = self.tcx;\n         // Grab the argument types, supplying fresh type variables\n@@ -172,9 +172,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             }\n \n-            if let Some(def_s) = def_span.map(|sp| tcx.sess.source_map().guess_head_span(sp)) {\n-                err.span_label(def_s, \"defined here\");\n+            if let Some(def_id) = def_id {\n+                if let Some(node) = tcx.hir().get_if_local(def_id) {\n+                    let mut spans: MultiSpan = node\n+                        .ident()\n+                        .map(|ident| ident.span)\n+                        .unwrap_or_else(|| tcx.hir().span(node.hir_id().unwrap()))\n+                        .into();\n+\n+                    if let Some(id) = node.body_id() {\n+                        let body = tcx.hir().body(id);\n+                        for param in body.params {\n+                            spans.push_span_label(param.span, String::new());\n+                        }\n+                    }\n+\n+                    let def_kind = tcx.def_kind(def_id);\n+                    err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+                }\n             }\n+\n             if sugg_unit {\n                 let sugg_span = tcx.sess.source_map().end_point(expr.span);\n                 // remove closing `)` from the span"}, {"sha": "d0577e4864a78bb238eca750617de5665d2901dc", "filename": "src/test/ui/arg-count-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,13 +1,16 @@\n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/arg-count-mismatch.rs:5:28\n    |\n-LL | fn f(x: isize) { }\n-   | -------------- defined here\n-LL | \n LL | fn main() { let i: (); i = f(); }\n    |                            ^-- supplied 0 arguments\n    |                            |\n    |                            expected 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/arg-count-mismatch.rs:3:4\n+   |\n+LL | fn f(x: isize) { }\n+   |    ^ --------\n \n error: aborting due to previous error\n "}, {"sha": "6f2a6c359b537720954fca49d289cde8ba828b49", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -7,24 +7,30 @@ LL |     fn printf(_: *const u8, ...);\n error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n   --> $DIR/variadic-ffi-1.rs:17:9\n    |\n-LL |     fn foo(f: isize, x: u8, ...);\n-   |     ----------------------------- defined here\n-...\n LL |         foo();\n    |         ^^^-- supplied 0 arguments\n    |         |\n    |         expected at least 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/variadic-ffi-1.rs:10:8\n+   |\n+LL |     fn foo(f: isize, x: u8, ...);\n+   |        ^^^\n \n error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n   --> $DIR/variadic-ffi-1.rs:18:9\n    |\n-LL |     fn foo(f: isize, x: u8, ...);\n-   |     ----------------------------- defined here\n-...\n LL |         foo(1);\n    |         ^^^ - supplied 1 argument\n    |         |\n    |         expected at least 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/variadic-ffi-1.rs:10:8\n+   |\n+LL |     fn foo(f: isize, x: u8, ...);\n+   |        ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:56"}, {"sha": "c80014d14763bb420e8397e42545acbe2a8654ce", "filename": "src/test/ui/error-codes/E0060.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,13 +1,16 @@\n error[E0060]: this function takes at least 1 argument but 0 arguments were supplied\n   --> $DIR/E0060.rs:6:14\n    |\n-LL |     fn printf(_: *const u8, ...) -> u32;\n-   |     ------------------------------------ defined here\n-...\n LL |     unsafe { printf(); }\n    |              ^^^^^^-- supplied 0 arguments\n    |              |\n    |              expected at least 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/E0060.rs:2:8\n+   |\n+LL |     fn printf(_: *const u8, ...) -> u32;\n+   |        ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "98488a2d298b90182d861a9ddabd6ad3caeee7c9", "filename": "src/test/ui/error-codes/E0061.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,24 +1,30 @@\n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/E0061.rs:6:5\n    |\n-LL | fn f(a: u16, b: &str) {}\n-   | --------------------- defined here\n-...\n LL |     f(0);\n    |     ^ - supplied 1 argument\n    |     |\n    |     expected 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/E0061.rs:1:4\n+   |\n+LL | fn f(a: u16, b: &str) {}\n+   |    ^ ------  -------\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0061.rs:10:5\n    |\n-LL | fn f2(a: u16) {}\n-   | ------------- defined here\n-...\n LL |     f2();\n    |     ^^-- supplied 0 arguments\n    |     |\n    |     expected 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/E0061.rs:3:4\n+   |\n+LL | fn f2(a: u16) {}\n+   |    ^^ ------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2cc1c7a2e7269bec6d6ceb6d1570e6b17e1c2019", "filename": "src/test/ui/hrtb/issue-58451.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,16 +1,16 @@\n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/issue-58451.rs:12:9\n    |\n-LL | / fn f<I>(i: I)\n-LL | | where\n-LL | |     I: IntoIterator,\n-LL | |     I::Item: for<'a> Into<&'a ()>,\n-   | |__________________________________- defined here\n-...\n-LL |       f(&[f()]);\n-   |           ^-- supplied 0 arguments\n-   |           |\n-   |           expected 1 argument\n+LL |     f(&[f()]);\n+   |         ^-- supplied 0 arguments\n+   |         |\n+   |         expected 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/issue-58451.rs:5:4\n+   |\n+LL | fn f<I>(i: I)\n+   |    ^    ----\n \n error: aborting due to previous error\n "}, {"sha": "b10d26abe348584260c9a3c2052d1dcbbe2685e9", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,13 +1,16 @@\n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n-LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n-   | ----------------------------------------------- defined here\n-...\n LL |     print_x(X);\n    |     ^^^^^^^ - supplied 1 argument\n    |     |\n    |     expected 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/issue-18819.rs:11:4\n+   |\n+LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n+   |    ^^^^^^^ ----------------------  -----------\n \n error: aborting due to previous error\n "}, {"sha": "a6f1ac9286cdac1d343358bb4a1f19df10ae198a", "filename": "src/test/ui/issues/issue-26094.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -4,11 +4,14 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n LL |         $other(None)\n    |                ---- supplied 1 argument\n ...\n-LL | fn some_function() {}\n-   | ------------------ defined here\n-...\n LL |     some_macro!(some_function);\n    |                 ^^^^^^^^^^^^^ expected 0 arguments\n+   |\n+note: function defined here\n+  --> $DIR/issue-26094.rs:7:4\n+   |\n+LL | fn some_function() {}\n+   |    ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "03b9b91edefb2e61a582ebb2db3bf37fa03ab491", "filename": "src/test/ui/issues/issue-4935.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,13 +1,16 @@\n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/issue-4935.rs:5:13\n    |\n-LL | fn foo(a: usize) {}\n-   | ---------------- defined here\n-LL |\n LL | fn main() { foo(5, 6) }\n    |             ^^^ -  - supplied 2 arguments\n    |             |\n    |             expected 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/issue-4935.rs:3:4\n+   |\n+LL | fn foo(a: usize) {}\n+   |    ^^^ --------\n \n error: aborting due to previous error\n "}, {"sha": "60f9eeeca27fe6f12449b447f7037debb832193d", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,35 +1,44 @@\n error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:13:7\n    |\n-LL |     fn zero(self) -> Foo { self }\n-   |     -------------------- defined here\n-...\n LL |     x.zero(0)\n    |       ^^^^ - supplied 1 argument\n    |       |\n    |       expected 0 arguments\n+   |\n+note: associated function defined here\n+  --> $DIR/method-call-err-msg.rs:5:8\n+   |\n+LL |     fn zero(self) -> Foo { self }\n+   |        ^^^^ ----\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7\n    |\n-LL |     fn one(self, _: isize) -> Foo { self }\n-   |     ----------------------------- defined here\n-...\n LL |      .one()\n    |       ^^^- supplied 0 arguments\n    |       |\n    |       expected 1 argument\n+   |\n+note: associated function defined here\n+  --> $DIR/method-call-err-msg.rs:6:8\n+   |\n+LL |     fn one(self, _: isize) -> Foo { self }\n+   |        ^^^ ----  --------\n \n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:15:7\n    |\n-LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n-   |     --------------------------------------- defined here\n-...\n LL |      .two(0);\n    |       ^^^ - supplied 1 argument\n    |       |\n    |       expected 2 arguments\n+   |\n+note: associated function defined here\n+  --> $DIR/method-call-err-msg.rs:7:8\n+   |\n+LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n+   |        ^^^ ----  --------  --------\n \n error[E0599]: no method named `take` found for struct `Foo` in the current scope\n   --> $DIR/method-call-err-msg.rs:19:7\n@@ -53,13 +62,16 @@ LL |      .take()\n error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:21:7\n    |\n-LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n-   |     ------------------------------------------ defined here\n-...\n LL |     y.three::<usize>();\n    |       ^^^^^--------- supplied 0 arguments\n    |       |\n    |       expected 3 arguments\n+   |\n+note: associated function defined here\n+  --> $DIR/method-call-err-msg.rs:8:8\n+   |\n+LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n+   |        ^^^^^    ----  ----  ----  ----\n \n error: aborting due to 5 previous errors\n "}, {"sha": "424762551887138ec0e8dd4a8af250b5c7bcc3ed", "filename": "src/test/ui/not-enough-arguments.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.rs?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -6,7 +6,26 @@ fn foo(a: isize, b: isize, c: isize, d:isize) {\n   panic!();\n }\n \n+// Check that all arguments are shown in the error message, even if they're across multiple lines.\n+fn bar(\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+) {\n+    println!(\"{}\", a);\n+    println!(\"{}\", b);\n+    println!(\"{}\", c);\n+    println!(\"{}\", d);\n+    println!(\"{}\", e);\n+    println!(\"{}\", f);\n+}\n+\n fn main() {\n   foo(1, 2, 3);\n   //~^ ERROR this function takes 4 arguments but 3\n+  bar(1, 2, 3);\n+  //~^ ERROR this function takes 6 arguments but 3\n }"}, {"sha": "df957837241489ce4d36a2356c85b1b9bc674d1e", "filename": "src/test/ui/not-enough-arguments.stderr", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,14 +1,43 @@\n error[E0061]: this function takes 4 arguments but 3 arguments were supplied\n-  --> $DIR/not-enough-arguments.rs:10:3\n+  --> $DIR/not-enough-arguments.rs:27:3\n    |\n-LL | fn foo(a: isize, b: isize, c: isize, d:isize) {\n-   | --------------------------------------------- defined here\n-...\n LL |   foo(1, 2, 3);\n    |   ^^^ -  -  - supplied 3 arguments\n    |   |\n    |   expected 4 arguments\n+   |\n+note: function defined here\n+  --> $DIR/not-enough-arguments.rs:5:4\n+   |\n+LL | fn foo(a: isize, b: isize, c: isize, d:isize) {\n+   |    ^^^ --------  --------  --------  -------\n+\n+error[E0061]: this function takes 6 arguments but 3 arguments were supplied\n+  --> $DIR/not-enough-arguments.rs:29:3\n+   |\n+LL |   bar(1, 2, 3);\n+   |   ^^^ -  -  - supplied 3 arguments\n+   |   |\n+   |   expected 6 arguments\n+   |\n+note: function defined here\n+  --> $DIR/not-enough-arguments.rs:10:4\n+   |\n+LL | fn bar(\n+   |    ^^^\n+LL |     a: i32,\n+   |     ------\n+LL |     b: i32,\n+   |     ------\n+LL |     c: i32,\n+   |     ------\n+LL |     d: i32,\n+   |     ------\n+LL |     e: i32,\n+   |     ------\n+LL |     f: i32,\n+   |     ------\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0061`."}, {"sha": "5cda17fd6a1fc31b491db066d4d59b964cffff77", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -53,13 +53,16 @@ LL | fn bar(_: x, y: usize) {}\n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5\n    |\n-LL | fn foo(Option<i32>, String) {}\n-   | --------------------------- defined here\n-...\n LL |     foo(Some(42), 2, \"\");\n    |     ^^^ --------  -  -- supplied 3 arguments\n    |     |\n    |     expected 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/issue-34264.rs:1:4\n+   |\n+LL | fn foo(Option<i32>, String) {}\n+   |    ^^^ -----------  ------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n@@ -70,13 +73,16 @@ LL |     bar(\"\", \"\");\n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5\n    |\n-LL | fn bar(x, y: usize) {}\n-   | ------------------- defined here\n-...\n LL |     bar(1, 2, 3);\n    |     ^^^ -  -  - supplied 3 arguments\n    |     |\n    |     expected 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/issue-34264.rs:3:4\n+   |\n+LL | fn bar(x, y: usize) {}\n+   |    ^^^ -  --------\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b15da2cb47955c27462ad3945abc8c4126a1beb9", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -12,34 +12,42 @@ LL |     let _: Result<(), String> = Ok(());\n error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:12:5\n    |\n-LL | fn foo(():(), ():()) {}\n-   | -------------------- defined here\n-...\n LL |     foo();\n    |     ^^^-- supplied 0 arguments\n    |     |\n    |     expected 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/missing-unit-argument.rs:1:4\n+   |\n+LL | fn foo(():(), ():()) {}\n+   |    ^^^ -----  -----\n \n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/missing-unit-argument.rs:13:5\n    |\n-LL | fn foo(():(), ():()) {}\n-   | -------------------- defined here\n-...\n LL |     foo(());\n    |     ^^^ -- supplied 1 argument\n    |     |\n    |     expected 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/missing-unit-argument.rs:1:4\n+   |\n+LL | fn foo(():(), ():()) {}\n+   |    ^^^ -----  -----\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:14:5\n    |\n-LL | fn bar(():()) {}\n-   | ------------- defined here\n-...\n LL |     bar();\n    |     ^^^-- supplied 0 arguments\n    |\n+note: function defined here\n+  --> $DIR/missing-unit-argument.rs:2:4\n+   |\n+LL | fn bar(():()) {}\n+   |    ^^^ -----\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     bar(());\n@@ -48,12 +56,14 @@ LL |     bar(());\n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:15:7\n    |\n-LL |     fn baz(self, (): ()) { }\n-   |     -------------------- defined here\n-...\n LL |     S.baz();\n    |       ^^^- supplied 0 arguments\n    |\n+note: associated function defined here\n+  --> $DIR/missing-unit-argument.rs:6:8\n+   |\n+LL |     fn baz(self, (): ()) { }\n+   |        ^^^ ----  ------\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     S.baz(());\n@@ -62,12 +72,14 @@ LL |     S.baz(());\n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:16:7\n    |\n-LL |     fn generic<T>(self, _: T) { }\n-   |     ------------------------- defined here\n-...\n LL |     S.generic::<()>();\n    |       ^^^^^^^------ supplied 0 arguments\n    |\n+note: associated function defined here\n+  --> $DIR/missing-unit-argument.rs:7:8\n+   |\n+LL |     fn generic<T>(self, _: T) { }\n+   |        ^^^^^^^    ----  ----\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     S.generic::<()>(());"}, {"sha": "20e260584513a0385c323012fb36f1805183e9b0", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b2d16c5c014de994c46eb17e52773ee01864c5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=14b2d16c5c014de994c46eb17e52773ee01864c5", "patch": "@@ -1,13 +1,16 @@\n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n    |\n-LL |     V(u8)\n-   |     ----- defined here\n-...\n LL |     <E>::V();\n    |     ^^^^^^-- supplied 0 arguments\n    |     |\n    |     expected 1 argument\n+   |\n+note: tuple variant defined here\n+  --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:5:5\n+   |\n+LL |     V(u8)\n+   |     ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17"}]}