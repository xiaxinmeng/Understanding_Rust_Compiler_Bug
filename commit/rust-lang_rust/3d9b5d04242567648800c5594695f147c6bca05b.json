{"sha": "3d9b5d04242567648800c5594695f147c6bca05b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWI1ZDA0MjQyNTY3NjQ4ODAwYzU1OTQ2OTVmMTQ3YzZiY2EwNWI=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-03-21T21:06:28Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-04-24T03:02:27Z"}, "message": "Fix a number of bugs that interfered with cross-crate usage of associated consts.", "tree": {"sha": "4e4f40739c99071ab7a6b89b156d845fe49cdd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4f40739c99071ab7a6b89b156d845fe49cdd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9b5d04242567648800c5594695f147c6bca05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9b5d04242567648800c5594695f147c6bca05b", "html_url": "https://github.com/rust-lang/rust/commit/3d9b5d04242567648800c5594695f147c6bca05b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9b5d04242567648800c5594695f147c6bca05b/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7129e8815e3203ceae5bb85b0faa8e8753e520e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7129e8815e3203ceae5bb85b0faa8e8753e520e3", "html_url": "https://github.com/rust-lang/rust/commit/7129e8815e3203ceae5bb85b0faa8e8753e520e3"}], "stats": {"total": 191, "additions": 167, "deletions": 24}, "files": [{"sha": "f03a2d342d7be0d567562ab380070d4f4d3ffc48", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -1002,21 +1002,23 @@ pub fn get_associated_consts<'tcx>(intr: Rc<IdentInterner>,\n     let item = lookup_item(id, data);\n     let mut result = Vec::new();\n \n-    reader::tagged_docs(item, tag_item_trait_item, |ac_id| {\n-        let did = item_def_id(ac_id, cdata);\n-        let ac_doc = lookup_item(did.node, data);\n-\n-        if item_sort(ac_doc) == Some('C') {\n-            let trait_item = get_impl_or_trait_item(intr.clone(),\n-                                                    cdata,\n-                                                    did.node,\n-                                                    tcx);\n-            if let ty::ConstTraitItem(ref ac) = trait_item {\n-                result.push((*ac).clone())\n+    for &tag in &[tag_item_trait_item, tag_item_impl_item] {\n+        reader::tagged_docs(item, tag, |ac_id| {\n+            let did = item_def_id(ac_id, cdata);\n+            let ac_doc = lookup_item(did.node, data);\n+\n+            if item_sort(ac_doc) == Some('C') {\n+                let trait_item = get_impl_or_trait_item(intr.clone(),\n+                                                        cdata,\n+                                                        did.node,\n+                                                        tcx);\n+                if let ty::ConstTraitItem(ref ac) = trait_item {\n+                    result.push((*ac).clone())\n+                }\n             }\n-        }\n-        true\n-    });\n+            true\n+        });\n+    }\n \n     return result;\n }"}, {"sha": "916874f1c51a8ec2eeb24e79ed30e60c89f1b367", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -117,15 +117,25 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 _ => None\n             },\n             Some(ast_map::NodeTraitItem(ti)) => match ti.node {\n-                ast::ConstTraitItem(_, ref default) => {\n+                ast::ConstTraitItem(_, _) => {\n                     match maybe_ref_id {\n+                        // If we have a trait item, and we know the expression\n+                        // that's the source of the obligation to resolve it,\n+                        // `resolve_trait_associated_const` will select an impl\n+                        // or the default.\n                         Some(ref_id) => {\n                             let trait_id = ty::trait_of_item(tcx, def_id)\n                                               .unwrap();\n                             resolve_trait_associated_const(tcx, ti, trait_id,\n                                                            ref_id)\n                         }\n-                        None => default.as_ref().map(|expr| &**expr),\n+                        // Technically, without knowing anything about the\n+                        // expression that generates the obligation, we could\n+                        // still return the default if there is one. However,\n+                        // it's safer to return `None` than to return some value\n+                        // that may differ from what you would get from\n+                        // correctly selecting an impl.\n+                        None => None\n                     }\n                 }\n                 _ => None\n@@ -153,17 +163,19 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None\n             },\n-            csearch::FoundAst::Found(&ast::IITraitItem(_, ref ti)) => match ti.node {\n-                ast::ConstTraitItem(_, ref default) => {\n+            csearch::FoundAst::Found(&ast::IITraitItem(trait_id, ref ti)) => match ti.node {\n+                ast::ConstTraitItem(_, _) => {\n                     used_ref_id = true;\n                     match maybe_ref_id {\n+                        // As mentioned in the comments above for in-crate\n+                        // constants, we only try to find the expression for\n+                        // a trait-associated const if the caller gives us\n+                        // the expression that refers to it.\n                         Some(ref_id) => {\n-                            let trait_id = ty::trait_of_item(tcx, def_id)\n-                                              .unwrap();\n                             resolve_trait_associated_const(tcx, ti, trait_id,\n                                                            ref_id).map(|e| e.id)\n                         }\n-                        None => default.as_ref().map(|expr| expr.id),\n+                        None => None\n                     }\n                 }\n                 _ => None\n@@ -177,7 +189,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n         // If we used the reference expression, particularly to choose an impl\n         // of a trait-associated const, don't cache that, because the next\n         // lookup with the same def_id may yield a different result.\n-        if used_ref_id {\n+        if !used_ref_id {\n             tcx.extern_const_statics\n                .borrow_mut().insert(def_id,\n                                     expr_id.unwrap_or(ast::DUMMY_NODE_ID));"}, {"sha": "41745c6384b38a2f134f92a2b51b00442b91ce84", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -5167,8 +5167,7 @@ pub fn associated_consts<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n             }\n         }\n     } else {\n-        let acs = csearch::get_associated_consts(cx, id);\n-        acs.iter().map(|ac| (*ac).clone()).collect()\n+        csearch::get_associated_consts(cx, id)\n     }\n }\n "}, {"sha": "3f44bc40f356b7f51362525272d4123adade4c39", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -134,6 +134,14 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n \n             ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n \n+            // Associated consts already have to be evaluated in `typeck`, so\n+            // the logic to do that already exists in `middle`. In order to\n+            // reuse that code, it needs to be able to look up the traits for\n+            // inlined items.\n+            let ty_trait_item = ty::impl_or_trait_item(ccx.tcx(), fn_id).clone();\n+            ccx.tcx().impl_or_trait_items.borrow_mut()\n+                     .insert(local_def(trait_item.id), ty_trait_item);\n+\n             // If this is a default method, we can't look up the\n             // impl type. But we aren't going to translate anyways, so\n             // don't."}, {"sha": "9735c6cb54d2bcc93b8cc0cc4501bc2839ffd608", "filename": "src/test/auxiliary/associated-const-cc-lib.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+use std::marker::MarkerTrait;\n+\n+// These items are for testing that associated consts work cross-crate.\n+pub trait Foo: MarkerTrait {\n+    const BAR: usize;\n+}\n+\n+pub struct FooNoDefault;\n+\n+impl Foo for FooNoDefault {\n+    const BAR: usize = 0;\n+}\n+\n+// These test that defaults and default resolution work cross-crate.\n+pub trait FooDefault: MarkerTrait {\n+    const BAR: usize = 1;\n+}\n+\n+pub struct FooOverwriteDefault;\n+\n+impl FooDefault for FooOverwriteDefault {\n+    const BAR: usize = 2;\n+}\n+\n+pub struct FooUseDefault;\n+\n+impl FooDefault for FooUseDefault {}\n+\n+// Test inherent impls.\n+pub struct InherentBar;\n+\n+impl InherentBar {\n+    pub const BAR: usize = 3;\n+}"}, {"sha": "944466f359da014b5b887c9bac00b0523be73ca1", "filename": "src/test/run-pass/associated-const-cross-crate-defaults.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-defaults.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:associated-const-cc-lib.rs\n+\n+extern crate associated_const_cc_lib as foolib;\n+\n+pub struct LocalFooUseDefault;\n+\n+impl foolib::FooDefault for LocalFooUseDefault {}\n+\n+pub struct LocalFooOverwriteDefault;\n+\n+impl foolib::FooDefault for LocalFooOverwriteDefault {\n+    const BAR: usize = 4;\n+}\n+\n+fn main() {\n+    assert_eq!(1, <foolib::FooUseDefault as foolib::FooDefault>::BAR);\n+    assert_eq!(2, <foolib::FooOverwriteDefault as foolib::FooDefault>::BAR);\n+    assert_eq!(1, <LocalFooUseDefault as foolib::FooDefault>::BAR);\n+    assert_eq!(4, <LocalFooOverwriteDefault as foolib::FooDefault>::BAR);\n+}"}, {"sha": "c18cda018d87a0ec6d3166b59e4a5b10530120f1", "filename": "src/test/run-pass/associated-const-cross-crate.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:associated-const-cc-lib.rs\n+\n+extern crate associated_const_cc_lib as foolib;\n+\n+pub struct LocalFoo;\n+\n+impl foolib::Foo for LocalFoo {\n+    const BAR: usize = 1;\n+}\n+\n+fn main() {\n+    assert_eq!(0, <foolib::FooNoDefault as foolib::Foo>::BAR);\n+    assert_eq!(1, <LocalFoo as foolib::Foo>::BAR);\n+    assert_eq!(3, foolib::InherentBar::BAR);\n+}"}, {"sha": "b9fb067d4fa87e11e4eed7ec5d180692ec4ea801", "filename": "src/test/run-pass/associated-const-in-global-const.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Frun-pass%2Fassociated-const-in-global-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9b5d04242567648800c5594695f147c6bca05b/src%2Ftest%2Frun-pass%2Fassociated-const-in-global-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-in-global-const.rs?ref=3d9b5d04242567648800c5594695f147c6bca05b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+impl Foo {\n+    const BAR: f32 = 1.5;\n+}\n+\n+const FOOBAR: f32 = <Foo>::BAR;\n+\n+fn main() {\n+    assert_eq!(1.5f32, FOOBAR);\n+}"}]}