{"sha": "2257ba92db333277c957b3934cdebc2a0a2c2604", "node_id": "C_kwDOAAsO6NoAKDIyNTdiYTkyZGIzMzMyNzdjOTU3YjM5MzRjZGViYzJhMGEyYzI2MDQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-30T05:37:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-05T18:05:44Z"}, "message": "Adjust diagnostics, bless tests", "tree": {"sha": "98895d7f019e83680db664de0d01380fe9872d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98895d7f019e83680db664de0d01380fe9872d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2257ba92db333277c957b3934cdebc2a0a2c2604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2257ba92db333277c957b3934cdebc2a0a2c2604", "html_url": "https://github.com/rust-lang/rust/commit/2257ba92db333277c957b3934cdebc2a0a2c2604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2257ba92db333277c957b3934cdebc2a0a2c2604/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b3454d374235f83f8706ddf11caf5a9a837817", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b3454d374235f83f8706ddf11caf5a9a837817", "html_url": "https://github.com/rust-lang/rust/commit/99b3454d374235f83f8706ddf11caf5a9a837817"}], "stats": {"total": 436, "additions": 279, "deletions": 157}, "files": [{"sha": "416b555db5c5e2e9bb4e8b5b8d6d27825f099e2c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1557,11 +1557,17 @@ fn check_fn_or_method<'tcx>(\n                 tcx.require_lang_item(hir::LangItem::Tuple, Some(span)),\n             );\n         } else {\n-            tcx.sess.span_err(span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\");\n+            tcx.sess.span_err(\n+                hir_decl.inputs.last().map_or(span, |input| input.span),\n+                \"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\",\n+            );\n         }\n         // No more inputs other than the `self` type and the tuple type\n         if inputs.next().is_some() {\n-            tcx.sess.span_err(span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\");\n+            tcx.sess.span_err(\n+                hir_decl.inputs.last().map_or(span, |input| input.span),\n+                \"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\",\n+            );\n         }\n     }\n }"}, {"sha": "4066cca8a4bd4aa46c61821c85c437670bd48eeb", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"cannot use call notation; the first type parameter \\\n                          for the function trait is neither a tuple nor unit\"\n                     )\n-                    .emit();\n+                    .delay_as_bug();\n                     (self.err_args(provided_args.len()), None)\n                 }\n             }"}, {"sha": "46c03757e600ae4df7bac2af5b0bb097d3152730", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -700,6 +700,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             }\n                         }\n \n+                        if Some(trait_ref.def_id()) == tcx.lang_items().tuple_trait() {\n+                            match obligation.cause.code().peel_derives() {\n+                                ObligationCauseCode::RustCall => {\n+                                    err.set_primary_message(\"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\");\n+                                }\n+                                ObligationCauseCode::BindingObligation(def_id, _)\n+                                | ObligationCauseCode::ItemObligation(def_id)\n+                                    if ty::ClosureKind::from_def_id(tcx, *def_id).is_some() =>\n+                                {\n+                                    err.code(rustc_errors::error_code!(E0059));\n+                                    err.set_primary_message(format!(\n+                                        \"type parameter to bare `{}` trait must be a tuple\",\n+                                        tcx.def_path_str(*def_id)\n+                                    ));\n+                                }\n+                                _ => {}\n+                            }\n+                        }\n+\n                         if Some(trait_ref.def_id()) == tcx.lang_items().drop_trait()\n                             && predicate_is_const\n                         {\n@@ -848,12 +867,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n-                        let is_fn_trait = [\n-                            self.tcx.lang_items().fn_trait(),\n-                            self.tcx.lang_items().fn_mut_trait(),\n-                            self.tcx.lang_items().fn_once_trait(),\n-                        ]\n-                        .contains(&Some(trait_ref.def_id()));\n+                        let is_fn_trait = ty::ClosureKind::from_def_id(tcx, trait_ref.def_id()).is_some();\n                         let is_target_feature_fn = if let ty::FnDef(def_id, _) =\n                             *trait_ref.skip_binder().self_ty().kind()\n                         {"}, {"sha": "a572666c8887f6512b441681c0bd32cde8bbd842", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,32 +1,31 @@\n #![feature(unboxed_closures)]\n \n extern \"rust-call\" fn b(_i: i32) {}\n-//~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+//~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n \n trait Tr {\n     extern \"rust-call\" fn a();\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n \n     extern \"rust-call\" fn b() {}\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n }\n \n struct Foo;\n \n impl Foo {\n     extern \"rust-call\" fn bar() {}\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n }\n \n impl Tr for Foo {\n     extern \"rust-call\" fn a() {}\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n }\n \n-fn main () {\n+fn main() {\n     b(10);\n-\n     Foo::bar();\n-\n     <Foo as Tr>::a();\n     <Foo as Tr>::b();\n }"}, {"sha": "9d205b444fad4f619f9198b4408853a9f307debe", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.stderr", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,26 +1,33 @@\n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n   --> $DIR/issue-22565-rust-call.rs:3:1\n    |\n LL | extern \"rust-call\" fn b(_i: i32) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `i32`\n \n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/issue-22565-rust-call.rs:9:5\n-   |\n-LL |     extern \"rust-call\" fn b() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/issue-22565-rust-call.rs:16:5\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:17:5\n    |\n LL |     extern \"rust-call\" fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/issue-22565-rust-call.rs:21:5\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:22:5\n    |\n LL |     extern \"rust-call\" fn a() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:7:5\n+   |\n+LL |     extern \"rust-call\" fn a();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:10:5\n+   |\n+LL |     extern \"rust-call\" fn b() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6eaccc436b699b036b4e2c4021c1d7b9d400a5ed", "filename": "src/test/ui/abi/rustcall-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -2,9 +2,9 @@\n // check-pass\n //[opt] compile-flags: -Zmir-opt-level=3\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-extern \"rust-call\" fn foo<T>(_: T) {}\n+extern \"rust-call\" fn foo<T: std::marker::Tuple>(_: T) {}\n \n fn main() {\n     foo(());"}, {"sha": "a3350024e75678b7422f0ab4e6b95f6ed1005b9e", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n // Tests that we can't assign to or mutably borrow upvars from `Fn`\n // closures (issue #17780)\n@@ -7,10 +7,10 @@ fn set(x: &mut usize) {\n     *x = 5;\n }\n \n-fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n     f\n }\n-fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F {\n+fn to_fn_mut<A: std::marker::Tuple, F: FnMut<A>>(f: F) -> F {\n     f\n }\n "}, {"sha": "a0eaf1f163b02f110872b0802bf2b4edb80476e7", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,8 +1,8 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:27\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _f = to_fn(|| x = 42);\n    |                  ----- -- ^^^^^^ cannot assign\n@@ -13,8 +13,8 @@ LL |         let _f = to_fn(|| x = 42);\n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:24:31\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _g = to_fn(|| set(&mut y));\n    |                  ----- --     ^^^^^^ cannot borrow as mutable\n@@ -25,8 +25,8 @@ LL |         let _g = to_fn(|| set(&mut y));\n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:29:22\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |             to_fn(|| z = 42);\n    |             ----- -- ^^^^^^ cannot assign\n@@ -37,8 +37,8 @@ LL |             to_fn(|| z = 42);\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:36:32\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _f = to_fn(move || x = 42);\n    |                  ----- ------- ^^^^^^ cannot assign\n@@ -49,8 +49,8 @@ LL |         let _f = to_fn(move || x = 42);\n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:39:36\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _g = to_fn(move || set(&mut y));\n    |                  ----- -------     ^^^^^^ cannot borrow as mutable\n@@ -61,8 +61,8 @@ LL |         let _g = to_fn(move || set(&mut y));\n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:44:27\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |             to_fn(move || z = 42);\n    |             ----- ------- ^^^^^^ cannot assign"}, {"sha": "6f0eb1870f32775687936c8fcb06eb894e985145", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,7 +1,7 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n pub fn main() {\n     let bar: Box<_> = Box::new(3);"}, {"sha": "075bd1fc488e6b50d6782335b526417cb728a3e2", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -66,8 +66,8 @@ LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n    |\n help: a trait with a similar name exists\n    |"}, {"sha": "952dab25bf9dcbfd2fc5dd2e4943732eafb2c48e", "filename": "src/test/ui/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,8 +1,8 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n use std::io::Read;\n \n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let x = 1;"}, {"sha": "ca62ad834bc7fab0fadd2b5c853b8bf37c9ac8b5", "filename": "src/test/ui/chalkify/closure.stderr", "status": "modified", "additions": 73, "deletions": 15, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,22 +1,80 @@\n-error[E0382]: borrow of moved value: `b`\n-  --> $DIR/closure.rs:28:5\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:6:5\n+   |\n+LL |     t();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:12:5\n+   |\n+LL |     b();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:16:5\n+   |\n+LL |     c();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:17:5\n    |\n-LL |     let mut c = b;\n-   |                 - value moved here\n-...\n LL |     b();\n-   |     ^ value borrowed here after move\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n    |\n-note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment\n-  --> $DIR/closure.rs:21:9\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:23:5\n+   |\n+LL |     b();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:27:5\n+   |\n+LL |     c();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:28:5\n+   |\n+LL |     b();\n+   |     ^^^ `()` is not a tuple\n    |\n-LL |         a = 1;\n-   |         ^\n-help: consider mutably borrowing `b`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL |     let mut c = &mut b;\n-   |                 ++++\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "da3f539a0071d27a651c8ab8d34c839dc69963cc", "filename": "src/test/ui/closures/issue-78720.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -12,8 +12,8 @@ LL |     _func: F,\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n    |\n help: a trait with a similar name exists\n    |"}, {"sha": "f331d0142260e92c0d3447521274bb856d68117b", "filename": "src/test/ui/error-codes/E0059.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,8 +1,14 @@\n-error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n-  --> $DIR/E0059.rs:3:41\n+error[E0059]: type parameter to bare `Fn` trait must be a tuple\n+  --> $DIR/E0059.rs:3:11\n    |\n LL | fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }\n-   |                                         ^^^^\n+   |           ^^^^^^^ the trait `Tuple` is not implemented for `i32`\n+   |\n+note: required by a bound in `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   |                    ^^^^^ required by this bound in `Fn`\n \n error: aborting due to previous error\n "}, {"sha": "15b674c62e44de41f9c542be888de940be6fe75a", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -9,6 +9,9 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n+#[lang=\"tuple_trait\"]\n+trait Tuple { }\n+\n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n                                    //~^ ERROR intrinsic must be in"}, {"sha": "33ec250f09067353345c89ebf7b917bece05588b", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:13:8\n+  --> $DIR/feature-gate-abi.rs:16:8\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:15:8\n+  --> $DIR/feature-gate-abi.rs:18:8\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -16,7 +16,7 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:17:8\n+  --> $DIR/feature-gate-abi.rs:20:8\n    |\n LL | extern \"rust-call\" fn f4(_: ()) {}\n    |        ^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL | extern \"rust-call\" fn f4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:8\n+  --> $DIR/feature-gate-abi.rs:21:8\n    |\n LL | extern \"efiapi\" fn f10() {}\n    |        ^^^^^^^^\n@@ -34,15 +34,15 @@ LL | extern \"efiapi\" fn f10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:22:12\n+  --> $DIR/feature-gate-abi.rs:25:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:24:12\n+  --> $DIR/feature-gate-abi.rs:27:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:26:12\n+  --> $DIR/feature-gate-abi.rs:29:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     extern \"rust-call\" fn m4(_: ());\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:27:12\n+  --> $DIR/feature-gate-abi.rs:30:12\n    |\n LL |     extern \"efiapi\" fn m10();\n    |            ^^^^^^^^\n@@ -69,7 +69,7 @@ LL |     extern \"efiapi\" fn m10();\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:29:12\n+  --> $DIR/feature-gate-abi.rs:32:12\n    |\n LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -78,7 +78,7 @@ LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:12\n+  --> $DIR/feature-gate-abi.rs:33:12\n    |\n LL |     extern \"efiapi\" fn dm10() {}\n    |            ^^^^^^^^\n@@ -87,15 +87,15 @@ LL |     extern \"efiapi\" fn dm10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:37:12\n+  --> $DIR/feature-gate-abi.rs:40:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:39:12\n+  --> $DIR/feature-gate-abi.rs:42:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -104,7 +104,7 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:41:12\n+  --> $DIR/feature-gate-abi.rs:44:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -113,7 +113,7 @@ LL |     extern \"rust-call\" fn m4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:12\n+  --> $DIR/feature-gate-abi.rs:45:12\n    |\n LL |     extern \"efiapi\" fn m10() {}\n    |            ^^^^^^^^\n@@ -122,15 +122,15 @@ LL |     extern \"efiapi\" fn m10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:47:12\n+  --> $DIR/feature-gate-abi.rs:50:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:49:12\n+  --> $DIR/feature-gate-abi.rs:52:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -139,7 +139,7 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:51:12\n+  --> $DIR/feature-gate-abi.rs:54:12\n    |\n LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -148,7 +148,7 @@ LL |     extern \"rust-call\" fn im4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:52:12\n+  --> $DIR/feature-gate-abi.rs:55:12\n    |\n LL |     extern \"efiapi\" fn im10() {}\n    |            ^^^^^^^^\n@@ -157,15 +157,15 @@ LL |     extern \"efiapi\" fn im10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:56:18\n+  --> $DIR/feature-gate-abi.rs:59:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:57:18\n+  --> $DIR/feature-gate-abi.rs:60:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^^^\n@@ -174,7 +174,7 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:58:18\n+  --> $DIR/feature-gate-abi.rs:61:18\n    |\n LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n@@ -183,7 +183,7 @@ LL | type A4 = extern \"rust-call\" fn(_: ());\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:19\n+  --> $DIR/feature-gate-abi.rs:62:19\n    |\n LL | type A10 = extern \"efiapi\" fn();\n    |                   ^^^^^^^^\n@@ -192,15 +192,15 @@ LL | type A10 = extern \"efiapi\" fn();\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:62:8\n+  --> $DIR/feature-gate-abi.rs:65:8\n    |\n LL | extern \"rust-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:63:8\n+  --> $DIR/feature-gate-abi.rs:66:8\n    |\n LL | extern \"platform-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -209,7 +209,7 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:64:8\n+  --> $DIR/feature-gate-abi.rs:67:8\n    |\n LL | extern \"rust-call\" {}\n    |        ^^^^^^^^^^^\n@@ -218,7 +218,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:65:8\n+  --> $DIR/feature-gate-abi.rs:68:8\n    |\n LL | extern \"efiapi\" {}\n    |        ^^^^^^^^\n@@ -227,49 +227,49 @@ LL | extern \"efiapi\" {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:22:32\n+  --> $DIR/feature-gate-abi.rs:25:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:24:36\n+  --> $DIR/feature-gate-abi.rs:27:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:13:33\n+  --> $DIR/feature-gate-abi.rs:16:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:15:37\n+  --> $DIR/feature-gate-abi.rs:18:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:37:37\n+  --> $DIR/feature-gate-abi.rs:40:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:39:41\n+  --> $DIR/feature-gate-abi.rs:42:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:47:38\n+  --> $DIR/feature-gate-abi.rs:50:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:49:42\n+  --> $DIR/feature-gate-abi.rs:52:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^"}, {"sha": "199d542e816f4d89f04e529f9600c628a1ec1681", "filename": "src/test/ui/issues/issue-12127.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n fn do_it(x: &isize) { }\n \n fn main() {"}, {"sha": "dc8b34a70c3241de9f930c078e6670aa0b0a41a7", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -16,7 +16,7 @@ LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n note: trait defined here, with 1 generic parameter: `Args`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n    |           ^^ ----\n help: add missing generic argument\n    |"}, {"sha": "f1ab0ad26d7084353d96d0dd5421ce21f666fa42", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -6,8 +6,8 @@ LL | impl Fo {\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error: aborting due to previous error\n "}, {"sha": "9b9aff38e524ee3ba6ac99920b2bd04dd10105fa", "filename": "src/test/ui/lang-items/lang-item-missing-generator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,12 +1,14 @@\n // error-pattern: requires `generator` lang_item\n-#![feature(no_core, lang_items, unboxed_closures)]\n+#![feature(no_core, lang_items, unboxed_closures, tuple_trait)]\n #![no_core]\n \n #[lang = \"sized\"] pub trait Sized { }\n \n+#[lang = \"tuple_trait\"] pub trait Tuple { }\n+\n #[lang = \"fn_once\"]\n #[rustc_paren_sugar]\n-pub trait FnOnce<Args> {\n+pub trait FnOnce<Args: Tuple> {\n     type Output;\n \n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;"}, {"sha": "a24fdb5fb6506402239d1a2feaad67d0f70ccf70", "filename": "src/test/ui/lang-items/lang-item-missing-generator.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,8 +1,15 @@\n+error[E0635]: unknown feature `tuple_trait`\n+  --> $DIR/lang-item-missing-generator.rs:2:51\n+   |\n+LL | #![feature(no_core, lang_items, unboxed_closures, tuple_trait)]\n+   |                                                   ^^^^^^^^^^^\n+\n error: requires `generator` lang_item\n-  --> $DIR/lang-item-missing-generator.rs:15:17\n+  --> $DIR/lang-item-missing-generator.rs:17:17\n    |\n LL | pub fn abc() -> impl FnOnce(f32) {\n    |                 ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "307104e47a18689f2bc791a2c68dac7b46b7ea34", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,8 +1,8 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures,tuple_trait)]\n \n use std::ops::FnMut;\n \n-fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple, F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F: FnMut(isize, isize) -> isize>(y: isize, mut f: F) -> isize {\n     //~^ NOTE required by this bound in `call_it`"}, {"sha": "490d91ac118cb923ae3d1393d099cfe5ca973fa7", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n \n fn test(_x: Box<usize>) {}\n "}, {"sha": "32a3b93e0a1e5629e2d836e2f91968db0de52c45", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -8,22 +8,23 @@ struct S {\n }\n \n impl FnMut<isize> for S {\n+    //~^ ERROR type parameter to bare `FnMut` trait must be a tuple\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n+        //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n         self.x + self.y + z\n     }\n-    //~^^^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n impl FnOnce<isize> for S {\n+    //~^ ERROR type parameter to bare `FnOnce` trait must be a tuple\n     type Output = isize;\n-    extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    extern \"rust-call\" fn call_once(mut self, z: isize) -> isize {\n+        //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+        self.call_mut(z)\n+    }\n }\n \n fn main() {\n-    let mut s = S {\n-        x: 1,\n-        y: 2,\n-    };\n-    drop(s(3))  //~ ERROR cannot use call notation\n+    let mut s = S { x: 1, y: 2 };\n+    drop(s(3))\n }"}, {"sha": "794535aeb11052adbc69329dfb59cb4727791172", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,21 +1,40 @@\n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:11:5\n+error[E0059]: type parameter to bare `FnMut` trait must be a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:10:6\n    |\n-LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl FnMut<isize> for S {\n+   |      ^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n+   |\n+note: required by a bound in `FnMut`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n+   |                       ^^^^^ required by this bound in `FnMut`\n+\n+error[E0059]: type parameter to bare `FnOnce` trait must be a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:18:6\n+   |\n+LL | impl FnOnce<isize> for S {\n+   |      ^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n+   |\n+note: required by a bound in `FnOnce`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait FnOnce<Args: Tuple> {\n+   |                        ^^^^^ required by this bound in `FnOnce`\n \n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:19:5\n+error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/overloaded-calls-nontuple.rs:12:5\n    |\n-LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n \n-error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n-  --> $DIR/overloaded-calls-nontuple.rs:28:10\n+error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/overloaded-calls-nontuple.rs:21:5\n    |\n-LL |     drop(s(3))\n-   |          ^^^^\n+LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0059`.\n+Some errors have detailed explanations: E0059, E0277.\n+For more information about an error, try `rustc --explain E0059`."}, {"sha": "cac9fd5bfb68da851aed9e9785d270915aba7c80", "filename": "src/test/ui/span/issue-11925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let r = {"}, {"sha": "1e45c2d35dfdc13cbd0d769b66e350232a713adb", "filename": "src/test/ui/typeck/issue-83693.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -6,8 +6,8 @@ LL | impl F {\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0412]: cannot find type `TestResult` in this scope\n   --> $DIR/issue-83693.rs:9:22"}, {"sha": "7377359b6b0c6b4d8dcdae2d38bcdb9cbe42d9bd", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,12 +1,12 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n // Tests that we can't move out of an unboxed closure environment\n // if the upvar is captured by ref or the closure takes self by\n // reference.\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     // By-ref cases"}, {"sha": "c57312b4387498402df2ab19a79cbd59dfe30603", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -2,12 +2,12 @@\n // as `mut` through a closure. Also test that we CAN mutate a moved copy,\n // unless this is a `Fn` closure. Issue #16749.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n use std::mem;\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n \n fn a() {\n     let n = 0;"}, {"sha": "26f97b51913df7b849e2a5b5f715d792d6548e94", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -28,8 +28,8 @@ LL |         n += 1;\n error[E0594]: cannot assign to `n`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutate-upvar.rs:53:9\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n+   |                                           - change this to accept `FnMut` instead of `Fn`\n ...\n LL |     let mut f = to_fn(move || {\n    |                 ----- ------- in this closure"}, {"sha": "7289d9322d0505daa32b65d570c6f696f58a662b", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257ba92db333277c957b3934cdebc2a0a2c2604/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.rs?ref=2257ba92db333277c957b3934cdebc2a0a2c2604", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n \n fn main() {\n     let mut_ = to_fn_mut(|x| x);"}]}