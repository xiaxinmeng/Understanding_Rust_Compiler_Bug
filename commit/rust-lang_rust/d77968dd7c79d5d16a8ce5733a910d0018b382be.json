{"sha": "d77968dd7c79d5d16a8ce5733a910d0018b382be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Nzk2OGRkN2M3OWQ1ZDE2YThjZTU3MzNhOTEwZDAwMThiMzgyYmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-10T23:54:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:16:40Z"}, "message": "finish up the shim approach", "tree": {"sha": "26329e43b5d4ee24a8a2c727d75aeb80b185e98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26329e43b5d4ee24a8a2c727d75aeb80b185e98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77968dd7c79d5d16a8ce5733a910d0018b382be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77968dd7c79d5d16a8ce5733a910d0018b382be", "html_url": "https://github.com/rust-lang/rust/commit/d77968dd7c79d5d16a8ce5733a910d0018b382be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77968dd7c79d5d16a8ce5733a910d0018b382be/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f28419d0c5af1302848da98e592726816cb4df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f28419d0c5af1302848da98e592726816cb4df5", "html_url": "https://github.com/rust-lang/rust/commit/4f28419d0c5af1302848da98e592726816cb4df5"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "6314fecdc11b6ff4525cd50521abc3a77588fc57", "filename": "configure", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d77968dd7c79d5d16a8ce5733a910d0018b382be/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d77968dd7c79d5d16a8ce5733a910d0018b382be/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d77968dd7c79d5d16a8ce5733a910d0018b382be", "patch": "@@ -253,6 +253,7 @@ opt docs     1 \"build documentation\"\n opt optimize 1 \"build optimized rust code\"\n opt mingw-cross 0 \"cross-compile for win32 using mingw\"\n opt clang 0 \"prefer gcc to clang for building the runtime\"\n+opt debug-llvm \"build LLVM in debug mode\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt llvm-root \"\" \"set LLVM root\"\n valopt target-triples \"\" \"LLVM target triples (defaults to host if unset)\"\n@@ -433,15 +434,22 @@ do\n \tstep_msg \"configuring LLVM for $t\"\n \n \tLLVM_BUILD_DIR=$CFG_BUILD_DIR/llvm/$t\n-        # Just use LLVM straight from its build directory to\n-        # avoid 'make install' time\n-\tLLVM_INST_DIR=$LLVM_BUILD_DIR/Release+Asserts\n \n \tLLVM_TARGETS=\"--enable-targets=x86,x86_64\"\n \tLLVM_BUILD=\"--build=$t\"\n \tLLVM_HOST=\"--host=$t\"\n \tLLVM_TARGET=\"--target=$t\"\n-\tLLVM_OPTS=\"--enable-optimized --disable-docs\"\n+    if [ -z \"$CFG_ENABLE_DEBUG_LLVM\" ]\n+    then\n+        LLVM_DBG_OPTS=\"\"\n+        # Just use LLVM straight from its build directory to\n+        # avoid 'make install' time\n+\t    LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug+Asserts\n+    else\n+        LLVM_DBG_OPTS=\"--enabled-optimized\"\n+\t    LLVM_INST_DIR=$LLVM_BUILD_DIR/Release+Asserts\n+    fi\n+\tLLVM_OPTS=\"$LLVM_DBG_OPTS --disable-docs\"\n \n \tLLVM_CXX_32=\"g++ -m32\"\n \tLLVM_CC_32=\"gcc -m32\""}, {"sha": "efef85337fcf0de773d5856694642405e3147aef", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d77968dd7c79d5d16a8ce5733a910d0018b382be/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77968dd7c79d5d16a8ce5733a910d0018b382be/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d77968dd7c79d5d16a8ce5733a910d0018b382be", "patch": "@@ -3851,23 +3851,31 @@ fn trans_c_stack_native_call(bcx: @block_ctxt, f: @ast::expr,\n     check type_has_static_size(ccx, ret_ty);\n     let llretty = type_of(ccx, f.span, ret_ty);\n \n-    // Allocate the argument bundle.\n-    let llargbundlety = T_struct(llargtys + [llretty]);\n-    let llargbundlesz = llsize_of(ccx, llargbundlety);\n-    let llrawargbundle = Call(bcx, ccx.upcalls.alloc_c_stack,\n-                              [llargbundlesz]);\n-    let llargbundle = PointerCast(bcx, llrawargbundle, T_ptr(llargbundlety));\n-\n-    // Translate arguments and store into bundle.\n+    // Translate arguments.\n+    // n.b.: We must do this before allocating the argument\n+    // bundle in order to avoid problems with nested function calls.\n     let (to_zero, to_revoke) = ([], []);\n     let i = 0u, n = vec::len(args);\n+    let llargs = [];\n     while i < n {\n         let ty_arg = fn_arg_tys[i];\n         let arg = args[i];\n         let llargty = llargtys[i];\n         let r = trans_arg_expr(bcx, ty_arg, llargty, to_zero, to_revoke, arg);\n         bcx = r.bcx;\n-        store_inbounds(bcx, r.val, llargbundle, [0, i as int]);\n+        llargs += [r.val];\n+        i += 1u;\n+    }\n+\n+    // Allocate the argument bundle and store arguments.\n+    let llargbundlety = T_struct(llargtys + [llretty]);\n+    let llargbundlesz = llsize_of(ccx, llargbundlety);\n+    let llrawargbundle = Call(bcx, ccx.upcalls.alloc_c_stack,\n+                              [llargbundlesz]);\n+    let llargbundle = PointerCast(bcx, llrawargbundle, T_ptr(llargbundlety));\n+    i = 0u;\n+    while i < n {\n+        store_inbounds(bcx, llargs[i], llargbundle, [0, i as int]);\n         i += 1u;\n     }\n "}]}