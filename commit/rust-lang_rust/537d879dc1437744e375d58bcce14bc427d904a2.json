{"sha": "537d879dc1437744e375d58bcce14bc427d904a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzN2Q4NzlkYzE0Mzc3NDRlMzc1ZDU4YmNjZTE0YmM0MjdkOTA0YTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-09T12:19:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-09T12:19:13Z"}, "message": "Properly handle lifetime of aliases in nested blocks\n\nThere was a bug that would cause the alias analyser to allow you to\ninvalidate an alias that was no longer directly referred to, even if\nanother alias was rooted in it. It now properly tracks dependencies\nbetween live aliases.\n\nRequired another case of copying values in map.rs.", "tree": {"sha": "7f8187e252bb2c8597aeee2d4293367a989441f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f8187e252bb2c8597aeee2d4293367a989441f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537d879dc1437744e375d58bcce14bc427d904a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537d879dc1437744e375d58bcce14bc427d904a2", "html_url": "https://github.com/rust-lang/rust/commit/537d879dc1437744e375d58bcce14bc427d904a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537d879dc1437744e375d58bcce14bc427d904a2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beda82ddf1f482f286a8d9af3402626dc56d6fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/beda82ddf1f482f286a8d9af3402626dc56d6fea", "html_url": "https://github.com/rust-lang/rust/commit/beda82ddf1f482f286a8d9af3402626dc56d6fea"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "bad328e028c0e633696e80424eecc8115ca5f796", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/537d879dc1437744e375d58bcce14bc427d904a2/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537d879dc1437744e375d58bcce14bc427d904a2/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=537d879dc1437744e375d58bcce14bc427d904a2", "patch": "@@ -20,6 +20,7 @@ type restrict = @rec(vec[def_num] root_vars,\n                      def_num block_defnum,\n                      vec[def_num] bindings,\n                      vec[ty::t] tys,\n+                     vec[uint] depends_on,\n                      mutable valid ok);\n \n type scope = vec[restrict];\n@@ -182,6 +183,7 @@ fn check_alt(&ctx cx, &@ast::expr input, &vec[ast::arm] arms,\n                                    block_defnum=dnums.(0),\n                                    bindings=dnums,\n                                    tys=forbidden_tp,\n+                                   depends_on=deps(sc, roots),\n                                    mutable ok=valid));\n         }\n         visit::visit_arm(a, new_sc, v);\n@@ -221,6 +223,7 @@ fn check_for_each(&ctx cx, &@ast::decl decl, &@ast::expr call,\n                                block_defnum=defnum,\n                                bindings=[defnum],\n                                tys=data.unsafe_ts,\n+                               depends_on=deps(sc, data.root_vars),\n                                mutable ok=valid);\n             visit::visit_block(block, sc + [new_sc], v);\n         }\n@@ -256,6 +259,7 @@ fn check_for(&ctx cx, &@ast::decl decl, &@ast::expr seq,\n                        block_defnum=defnum,\n                        bindings=[defnum],\n                        tys=unsafe,\n+                       depends_on=deps(sc, root_def),\n                        mutable ok=valid);\n     visit::visit_block(block, sc + [new_sc], v);\n }\n@@ -274,24 +278,8 @@ fn check_var(&ctx cx, &@ast::expr ex, &ast::path p, ast::ann ann, bool assign,\n                     r.ok = val_taken(ex.span, p);\n                 }\n             }\n-        } else if (r.ok != valid && vec::member(my_defnum, r.bindings)) {\n-            fail_alias(cx, r.ok, p);\n-        }\n-    }\n-}\n-\n-fn fail_alias(&ctx cx, valid issue, &ast::path pt) {\n-    auto base = \" will invalidate alias \" + ast::path_name(pt) +\n-        \", which is still used\";\n-    alt (issue) {\n-        case (overwritten(?sp, ?wpt)) {\n-            cx.tcx.sess.span_err\n-                (sp, \"overwriting \" + ast::path_name(wpt) + base);\n-        }\n-        case (val_taken(?sp, ?vpt)) {\n-            cx.tcx.sess.span_err\n-                (sp, \"taking the value of \" + ast::path_name(vpt) +\n-                 base);\n+        } else if (vec::member(my_defnum, r.bindings)) {\n+            test_scope(cx, sc, r, p);\n         }\n     }\n }\n@@ -316,6 +304,41 @@ fn check_assign(&@ctx cx, &@ast::expr dest, &@ast::expr src,\n     }\n }\n \n+fn test_scope(&ctx cx, &scope sc, &restrict r, &ast::path p) {\n+    auto prob = r.ok;\n+    for (uint dep in r.depends_on) {\n+        if (prob != valid) { break; }\n+        prob = sc.(dep).ok;\n+    }\n+    if (prob != valid) {\n+        auto msg = alt (prob) {\n+            case (overwritten(?sp, ?wpt)) {\n+                tup(sp, \"overwriting \" + ast::path_name(wpt))\n+            }\n+            case (val_taken(?sp, ?vpt)) {\n+                tup(sp, \"taking the value of \" + ast::path_name(vpt))\n+            }\n+        };\n+        cx.tcx.sess.span_err\n+            (msg._0, msg._1 + \" will invalidate alias \" +\n+             ast::path_name(p) + \", which is still used\");\n+    }\n+}\n+\n+fn deps(&scope sc, vec[def_num] roots) -> vec[uint] {\n+    auto i = 0u;\n+    auto result = [];\n+    for (restrict r in sc) {\n+        for (def_num dn in roots) {\n+            if (vec::member(dn, r.bindings)) {\n+                vec::push(result, i);\n+            }\n+        }\n+        i += 1u;\n+    }\n+    ret result;\n+}\n+\n fn expr_root(&ctx cx, @ast::expr ex, bool autoderef)\n     -> rec(@ast::expr ex, option::t[ty::t] inner_mut, bool mut_in_box) {\n     let option::t[ty::t] mut = none;"}, {"sha": "854ab74df9a81c69e8831d14cc5f8b7215a968b9", "filename": "src/lib/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/537d879dc1437744e375d58bcce14bc427d904a2/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537d879dc1437744e375d58bcce14bc427d904a2/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=537d879dc1437744e375d58bcce14bc427d904a2", "patch": "@@ -131,7 +131,8 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n         {\n             for (bucket[K, V] b in oldbkts) {\n                 alt (b) {\n-                    case (some(?k, ?v)) {\n+                    case (some(?k_, ?v_)) {\n+                        auto k = k_; auto v = v_;\n                         insert_common[K, V](hasher, eqer, newbkts,\n                                             nnewbkts, k, v);\n                     }"}]}