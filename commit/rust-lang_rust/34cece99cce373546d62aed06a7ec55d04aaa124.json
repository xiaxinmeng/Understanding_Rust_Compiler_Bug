{"sha": "34cece99cce373546d62aed06a7ec55d04aaa124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Y2VjZTk5Y2NlMzczNTQ2ZDYyYWVkMDZhN2VjNTVkMDRhYWExMjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-14T22:19:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-14T22:22:15Z"}, "message": "replace with_find_ref() with find_ref(), which is just nicer to use", "tree": {"sha": "561d0767ce8a8254e523c7c198e0adc5d09c606f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/561d0767ce8a8254e523c7c198e0adc5d09c606f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34cece99cce373546d62aed06a7ec55d04aaa124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34cece99cce373546d62aed06a7ec55d04aaa124", "html_url": "https://github.com/rust-lang/rust/commit/34cece99cce373546d62aed06a7ec55d04aaa124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34cece99cce373546d62aed06a7ec55d04aaa124/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3756b0ba3dbab0c1957a7c829e09e9505c7574", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3756b0ba3dbab0c1957a7c829e09e9505c7574", "html_url": "https://github.com/rust-lang/rust/commit/6a3756b0ba3dbab0c1957a7c829e09e9505c7574"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "a2808b66b59f64db13fdc9306e6a0d0b6248084a", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/34cece99cce373546d62aed06a7ec55d04aaa124/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cece99cce373546d62aed06a7ec55d04aaa124/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=34cece99cce373546d62aed06a7ec55d04aaa124", "patch": "@@ -275,40 +275,31 @@ mod linear {\n             }\n         }\n \n-        /*\n-        FIXME(#3148)--region inference fails to capture needed deps\n-\n-        fn find_ref(&self, k: &K) -> option<&self/V> {\n-            match self.bucket_for_key(self.buckets, k) {\n-              FoundEntry(idx) => {\n-                match check self.buckets[idx] {\n-                  some(ref bkt) => some(&bkt.value)\n-                }\n-              }\n-              TableFull | FoundHole(_) => {\n-                none\n-              }\n-            }\n-        }\n-        */\n-\n-        fn with_find_ref<T>(&self, k: &K, blk: fn(Option<&V>) -> T) -> T {\n+        fn find_ref(&self, k: &K) -> Option<&self/V> {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(idx) => {\n                     match self.buckets[idx] {\n-                        Some(bkt) => blk(Some(&bkt.value)),\n-                        None => fail ~\"LinearMap::find: internal logic error\"\n+                        Some(ref bkt) => {\n+                            let ptr = unsafe {\n+                                // FIXME(#3148)--region inference\n+                                // fails to capture needed deps.\n+                                // Here, the bucket value is known to\n+                                // live as long as self, because self\n+                                // is immutable.  But the region\n+                                // inference stupidly infers a\n+                                // lifetime for `ref bkt` that is\n+                                // shorter than it needs to be.\n+                                unsafe::copy_lifetime(self, &bkt.value)\n+                            };\n+                            Some(ptr)\n+                        }\n+                        None => {\n+                            fail ~\"LinearMap::find: internal logic error\"\n+                        }\n                     }\n                 }\n-                TableFull | FoundHole(_) => blk(None),\n-            }\n-        }\n-\n-        fn with_get_ref<T>(&self, k: &K, blk: fn(v: &V) -> T) -> T {\n-            do self.with_find_ref(k) |v| {\n-                match v {\n-                    Some(v) => blk(v),\n-                    None => fail fmt!(\"No entry found for key: %?\", k),\n+                TableFull | FoundHole(_) => {\n+                    None\n                 }\n             }\n         }\n@@ -451,10 +442,13 @@ mod test {\n     }\n \n     #[test]\n-    fn with_find_ref() {\n+    fn find_ref() {\n         let mut m = ~LinearMap();\n-        m.with_find_ref(&1, |v| assert v.is_none());\n+        assert m.find_ref(&1).is_none();\n         m.insert(1, 2);\n-        m.with_find_ref(&1, |v| assert *v.get() == 2);\n+        match m.find_ref(&1) {\n+            None => fail,\n+            Some(v) => assert *v == 2\n+        }\n     }\n }"}]}