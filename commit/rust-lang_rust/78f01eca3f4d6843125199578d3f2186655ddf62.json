{"sha": "78f01eca3f4d6843125199578d3f2186655ddf62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjAxZWNhM2Y0ZDY4NDMxMjUxOTk1NzhkM2YyMTg2NjU1ZGRmNjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-14T16:44:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-15T09:35:48Z"}, "message": "resolve: Prevent fresh bindings from shadowing ambiguity items\n\nCorrectly treat const generic parameters in fresh binding disambiguation", "tree": {"sha": "0a26afec452b899d4cea9872ce168b786afc2fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a26afec452b899d4cea9872ce168b786afc2fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f01eca3f4d6843125199578d3f2186655ddf62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f01eca3f4d6843125199578d3f2186655ddf62", "html_url": "https://github.com/rust-lang/rust/commit/78f01eca3f4d6843125199578d3f2186655ddf62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f01eca3f4d6843125199578d3f2186655ddf62/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cdbc87a49b0b705a41a004a6d486b0952521ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdbc87a49b0b705a41a004a6d486b0952521ae7", "html_url": "https://github.com/rust-lang/rust/commit/7cdbc87a49b0b705a41a004a6d486b0952521ae7"}], "stats": {"total": 147, "additions": 123, "deletions": 24}, "files": [{"sha": "b817470b4c30f9e0cdfa8a4c55b7170ee6fb460b", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -87,6 +87,9 @@ impl PatCtxt<'_, '_> {\n                 PatternError::AssocConstInPattern(span) => {\n                     self.span_e0158(span, \"associated consts cannot be referenced in patterns\")\n                 }\n+                PatternError::ConstParamInPattern(span) => {\n+                    self.span_e0158(span, \"const parameters cannot be referenced in patterns\")\n+                }\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n                     ::rustc::mir::interpret::struct_error("}, {"sha": "6786c3562930840d5411ce940d0e90393ec96439", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -31,6 +31,7 @@ use std::fmt;\n #[derive(Clone, Debug)]\n crate enum PatternError {\n     AssocConstInPattern(Span),\n+    ConstParamInPattern(Span),\n     StaticInPattern(Span),\n     FloatBug,\n     NonConstPath(Span),\n@@ -727,7 +728,11 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             | Res::SelfCtor(..) => PatKind::Leaf { subpatterns },\n \n             _ => {\n-                self.errors.push(PatternError::NonConstPath(span));\n+                let pattern_error = match res {\n+                    Res::Def(DefKind::ConstParam, _) => PatternError::ConstParamInPattern(span),\n+                    _ => PatternError::NonConstPath(span),\n+                };\n+                self.errors.push(pattern_error);\n                 PatKind::Wild\n             }\n         };"}, {"sha": "30ba48f797007efcc981fa7a7bd3e47674b43ee8", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -1517,21 +1517,33 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ident: Ident,\n         has_sub: bool,\n     ) -> Option<Res> {\n-        let binding =\n-            self.resolve_ident_in_lexical_scope(ident, ValueNS, None, pat.span)?.item()?;\n-        let res = binding.res();\n+        let ls_binding = self.resolve_ident_in_lexical_scope(ident, ValueNS, None, pat.span)?;\n+        let (res, binding) = match ls_binding {\n+            LexicalScopeBinding::Item(binding) if binding.is_ambiguity() => {\n+                // For ambiguous bindings we don't know all their definitions and cannot check\n+                // whether they can be shadowed by fresh bindings or not, so force an error.\n+                self.r.record_use(ident, ValueNS, binding, false);\n+                return None;\n+            }\n+            LexicalScopeBinding::Item(binding) => (binding.res(), Some(binding)),\n+            LexicalScopeBinding::Res(res) => (res, None),\n+        };\n \n         // An immutable (no `mut`) by-value (no `ref`) binding pattern without\n         // a sub pattern (no `@ $pat`) is syntactically ambiguous as it could\n         // also be interpreted as a path to e.g. a constant, variant, etc.\n         let is_syntactic_ambiguity = !has_sub && bm == BindingMode::ByValue(Mutability::Not);\n \n         match res {\n-            Res::Def(DefKind::Ctor(_, CtorKind::Const), _) | Res::Def(DefKind::Const, _)\n+            Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n+            | Res::Def(DefKind::Const, _)\n+            | Res::Def(DefKind::ConstParam, _)\n                 if is_syntactic_ambiguity =>\n             {\n                 // Disambiguate in favor of a unit struct/variant or constant pattern.\n-                self.r.record_use(ident, ValueNS, binding, false);\n+                if let Some(binding) = binding {\n+                    self.r.record_use(ident, ValueNS, binding, false);\n+                }\n                 Some(res)\n             }\n             Res::Def(DefKind::Ctor(..), _)\n@@ -1547,23 +1559,20 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     ResolutionError::BindingShadowsSomethingUnacceptable(\n                         pat_src.descr(),\n                         ident.name,\n-                        binding,\n+                        binding.expect(\"no binding for a ctor or static\"),\n                     ),\n                 );\n                 None\n             }\n-            Res::Def(DefKind::Fn, _) | Res::Err => {\n+            Res::Def(DefKind::Fn, _) | Res::Local(..) | Res::Err => {\n                 // These entities are explicitly allowed to be shadowed by fresh bindings.\n                 None\n             }\n-            res => {\n-                span_bug!(\n-                    ident.span,\n-                    \"unexpected resolution for an \\\n-                                        identifier in pattern: {:?}\",\n-                    res\n-                );\n-            }\n+            _ => span_bug!(\n+                ident.span,\n+                \"unexpected resolution for an identifier in pattern: {:?}\",\n+                res\n+            ),\n         }\n     }\n "}, {"sha": "37a800a0b7bdb20a8c7a0c9db557777b4c26f5e9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -323,13 +323,6 @@ enum LexicalScopeBinding<'a> {\n }\n \n impl<'a> LexicalScopeBinding<'a> {\n-    fn item(self) -> Option<&'a NameBinding<'a>> {\n-        match self {\n-            LexicalScopeBinding::Item(binding) => Some(binding),\n-            _ => None,\n-        }\n-    }\n-\n     fn res(self) -> Res {\n         match self {\n             LexicalScopeBinding::Item(binding) => binding.res(),"}, {"sha": "fabf3dd1153b7db9c84390cf09a6c2008f43a18b", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -716,7 +716,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n             | Res::SelfCtor(..)\n             | Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::AssocConst, _) => {} // OK\n+            | Res::Def(DefKind::AssocConst, _)\n+            | Res::Def(DefKind::ConstParam, _) => {} // OK\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n         }\n "}, {"sha": "10613cc616413074db5211b2f1ec688621474104", "filename": "src/test/ui/binding/ambiguity-item.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -0,0 +1,18 @@\n+// Identifier pattern referring to an ambiguity item is an error (issue #46079).\n+\n+mod m {\n+    pub fn f() {}\n+}\n+use m::*;\n+\n+mod n {\n+    pub fn f() {}\n+}\n+use n::*; // OK, no conflict with `use m::*;`\n+\n+fn main() {\n+    let v = f; //~ ERROR `f` is ambiguous\n+    match v {\n+        f => {} //~ ERROR `f` is ambiguous\n+    }\n+}"}, {"sha": "615193c0d02db929e18188c2603fdca40a6d501a", "filename": "src/test/ui/binding/ambiguity-item.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.stderr?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -0,0 +1,41 @@\n+error[E0659]: `f` is ambiguous (glob import vs glob import in the same module)\n+  --> $DIR/ambiguity-item.rs:14:13\n+   |\n+LL |     let v = f;\n+   |             ^ ambiguous name\n+   |\n+note: `f` could refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:6:5\n+   |\n+LL | use m::*;\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+note: `f` could also refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:11:5\n+   |\n+LL | use n::*; // OK, no conflict with `use m::*;`\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+\n+error[E0659]: `f` is ambiguous (glob import vs glob import in the same module)\n+  --> $DIR/ambiguity-item.rs:16:9\n+   |\n+LL |         f => {}\n+   |         ^ ambiguous name\n+   |\n+note: `f` could refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:6:5\n+   |\n+LL | use m::*;\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+note: `f` could also refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:11:5\n+   |\n+LL | use n::*; // OK, no conflict with `use m::*;`\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "3c7f4d071f6945bec39a26998f92b697b0843c08", "filename": "src/test/ui/binding/const-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -0,0 +1,12 @@\n+// Identifier pattern referring to a const generic parameter is an error (issue #68853).\n+\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+fn check<const N: usize>() {\n+    match 1 {\n+        N => {} //~ ERROR const parameters cannot be referenced in patterns\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "25b1c75c9a0045e6f44b1f0496f32489420bbdc7", "filename": "src/test/ui/binding/const-param.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f01eca3f4d6843125199578d3f2186655ddf62/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr?ref=78f01eca3f4d6843125199578d3f2186655ddf62", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0158]: const parameters cannot be referenced in patterns\n+  --> $DIR/const-param.rs:7:9\n+   |\n+LL |         N => {}\n+   |         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0158`."}]}