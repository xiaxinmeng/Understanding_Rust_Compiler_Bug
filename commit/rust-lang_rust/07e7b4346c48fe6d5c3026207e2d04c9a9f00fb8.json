{"sha": "07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "node_id": "C_kwDOAAsO6NoAKDA3ZTdiNDM0NmM0OGZlNmQ1YzMwMjYyMDdlMmQwNGM5YTlmMDBmYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T21:45:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T21:45:42Z"}, "message": "Auto merge of #97258 - jackh726:nll-revisions, r=cjgillot\n\nMove remaining tests with NLL differences to revisions\n\nBased on #97206\n\nI've already filed issues for any important differences that I've spotted: #97252 #97253 #97256 #97267\n\nThere is a lot here, but each commit is self-contained as a separate directory. I can split into separate PRs as wanted or needed.", "tree": {"sha": "97f861d107102c16451d7b3ce8a7988670bdf599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97f861d107102c16451d7b3ce8a7988670bdf599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "html_url": "https://github.com/rust-lang/rust/commit/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "html_url": "https://github.com/rust-lang/rust/commit/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb"}, {"sha": "383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "html_url": "https://github.com/rust-lang/rust/commit/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df"}], "stats": {"total": 3353, "additions": 2273, "deletions": 1080}, "files": [{"sha": "b4437069cd745ae0449f8993af68a5b1cce2cb8d", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:17:64\n+  --> $DIR/implied-region-constraints.rs:21:64\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |                          ------------- this type is declared with multiple lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    |                                                                ^^^^^ ...but data with one lifetime flows into the other here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:38:72\n+  --> $DIR/implied-region-constraints.rs:43:72\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |                           -------------- this type is declared with multiple lifetimes...", "previous_filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr"}, {"sha": "bf9fecf06a478358e410506bb696984b03e49f6f", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:17:56\n+  --> $DIR/implied-region-constraints.rs:21:56\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |            --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:38:64\n+  --> $DIR/implied-region-constraints.rs:43:64\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |             --  -- lifetime `'b` defined here"}, {"sha": "a41c764343086bbbf198134e9702e5ed55b4a08c", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }\n@@ -15,7 +19,8 @@ where\n {\n     // This should fail because `T: 'b` is not implied from `WF(St<'a, 'b, T>)`.\n     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n-    //~^ ERROR lifetime mismatch [E0623]\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n enum En7<'a, 'b, T> // `<T::As1 as Tr2>::As2: 'a` is implied.\n@@ -36,7 +41,8 @@ where\n         En7::V0(x) => {\n             // Also fails for the same reason as above:\n             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n-            //~^ ERROR lifetime mismatch [E0623]\n+            //[base]~^ ERROR lifetime mismatch [E0623]\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         },\n         En7::V1(_) => {},\n     }"}, {"sha": "4313078064cc54e29f4c1bc6ecc95d211f3142b2", "filename": "src/test/ui/associated-types/associated-types-eq-hr.base.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,18 +1,18 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n note: expected this to be `&isize`\n-  --> $DIR/associated-types-eq-hr.rs:26:14\n+  --> $DIR/associated-types-eq-hr.rs:30:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n-  --> $DIR/associated-types-eq-hr.rs:45:36\n+  --> $DIR/associated-types-eq-hr.rs:49:36\n    |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n@@ -21,20 +21,20 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:95:5\n    |\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n note: expected this to be `&usize`\n-  --> $DIR/associated-types-eq-hr.rs:14:14\n+  --> $DIR/associated-types-eq-hr.rs:18:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`\n-  --> $DIR/associated-types-eq-hr.rs:52:36\n+  --> $DIR/associated-types-eq-hr.rs:56:36\n    |\n LL | fn bar<T>()\n    |    --- required by a bound in this\n@@ -43,7 +43,7 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `bar`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:96:5\n+  --> $DIR/associated-types-eq-hr.rs:100:5\n    |\n LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -52,7 +52,7 @@ LL |     tuple_one::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:96:5\n+  --> $DIR/associated-types-eq-hr.rs:100:5\n    |\n LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -61,7 +61,7 @@ LL |     tuple_one::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:102:5\n+  --> $DIR/associated-types-eq-hr.rs:106:5\n    |\n LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -70,7 +70,7 @@ LL |     tuple_two::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:102:5\n+  --> $DIR/associated-types-eq-hr.rs:106:5\n    |\n LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -79,7 +79,7 @@ LL |     tuple_two::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:112:5\n+  --> $DIR/associated-types-eq-hr.rs:116:5\n    |\n LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough", "previous_filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr"}, {"sha": "8d128821656f92063b8b520b46092d582ae5e074", "filename": "src/test/ui/associated-types/associated-types-eq-hr.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,18 +1,18 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n note: expected this to be `&isize`\n-  --> $DIR/associated-types-eq-hr.rs:26:14\n+  --> $DIR/associated-types-eq-hr.rs:30:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n-  --> $DIR/associated-types-eq-hr.rs:45:36\n+  --> $DIR/associated-types-eq-hr.rs:49:36\n    |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n@@ -21,20 +21,20 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:95:5\n    |\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n note: expected this to be `&usize`\n-  --> $DIR/associated-types-eq-hr.rs:14:14\n+  --> $DIR/associated-types-eq-hr.rs:18:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`\n-  --> $DIR/associated-types-eq-hr.rs:52:36\n+  --> $DIR/associated-types-eq-hr.rs:56:36\n    |\n LL | fn bar<T>()\n    |    --- required by a bound in this"}, {"sha": "deb3fd059f80105ebc355a72e1161610214753ef", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Check testing of equality constraints in a higher-ranked context.\n \n pub trait TheTrait<T> {\n@@ -94,14 +98,14 @@ pub fn call_bar() {\n \n pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //~^ ERROR implementation of `TheTrait` is not general enough\n-    //~| ERROR implementation of `TheTrait` is not general enough\n+    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n+    //[base]~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //~^ ERROR implementation of `TheTrait` is not general enough\n-    //~| ERROR implementation of `TheTrait` is not general enough\n+    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n+    //[base]~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_three() {\n@@ -110,7 +114,7 @@ pub fn call_tuple_three() {\n \n pub fn call_tuple_four() {\n     tuple_four::<Tuple>();\n-    //~^ ERROR implementation of `TheTrait` is not general enough\n+    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n }\n \n fn main() {}"}, {"sha": "fe238344263c30f2a741e259183dfe2ea5386930", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:40\n    |\n LL |     x: <I as Foo<&'a isize>>::A,\n    |                  --------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.stderr"}, {"sha": "ae6ccb8af5521c4125893684b846c7ed290ab0e9", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:29\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:29\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let z: I::A = if cond { x } else { y };\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:40\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here"}, {"sha": "7ad12f2a1f361cad49c8f1d60c910ab641780b35", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Check projection of an associated type out of a higher-ranked\n // trait-bound in the context of a function body.\n \n@@ -20,7 +24,9 @@ fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n {\n     // x and y here have two distinct lifetimes:\n     let z: I::A = if cond { x } else { y };\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR lifetime may not live long enough\n }\n \n pub fn main() {}"}, {"sha": "35b3a83ee43026287db247a33521591487ecaa19", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:26:38\n+  --> $DIR/associated-types-subtyping-1.rs:31:38\n    |\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _c: <T as Trait<'b>>::Type = a;\n    |                                      ^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:35:38\n+  --> $DIR/associated-types-subtyping-1.rs:41:38\n    |\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr"}, {"sha": "44f918e12ba154882aff394c8e9f7bfb89e3b951", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/associated-types-subtyping-1.rs:24:12\n+  --> $DIR/associated-types-subtyping-1.rs:28:12\n    |\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |            -- -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let a: <T as Trait<'a>>::Type = make_any();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/associated-types-subtyping-1.rs:35:13\n+  --> $DIR/associated-types-subtyping-1.rs:41:13\n    |\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |            -- -- lifetime `'b` defined here"}, {"sha": "5b75e023b85ceec4381e9d7c10f6d230fd15bb6d", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![allow(unused_variables)]\n \n fn make_any<T>() -> T {  loop {} }\n@@ -22,8 +26,10 @@ fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n {\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = make_any();\n+    //[nll]~^ ERROR lifetime may not live long enough\n     let b: <T as Trait<'b>>::Type = make_any();\n-    let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+    let _c: <T as Trait<'b>>::Type = a;\n+    //[base]~^ ERROR E0623\n }\n \n fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n@@ -32,7 +38,9 @@ fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = make_any();\n     let b: <T as Trait<'b>>::Type = make_any();\n-    let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n+    let _c: <T as Trait<'a>>::Type = b;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn method4<'a,'b,T>(x: &'a T, y: &'b T)"}, {"sha": "ed5518b628f6a42c1e4c9a1c59d905bdcb5d8f0f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.krisskross.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,25 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-contravariant-nll.rs:51:5\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |                        -------                 ------------------\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b)\n+   |     ^ ...but data from `y` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-contravariant-nll.rs:51:8\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |                                    -------     ------------------\n+   |                                    |\n+   |                                    this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b)\n+   |        ^ ...but data from `x` is returned here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "c3ac9949c214b285c7594f18e94f110327d48405", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,55 @@\n+#![feature(unboxed_closures)]\n+\n+// Test for projection cache. We should be able to project distinct\n+// lifetimes from `foo` as we reinstantiate it multiple times, but not\n+// if we do it just once. In this variant, the region `'a` is used in\n+// an contravariant position, which affects the results.\n+\n+// revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+//[oneuse] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should replace `project-fn-ret-contravariant.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn foo<'a>() -> &'a u32 { loop { } }\n+\n+fn bar<T>(t: T, x: T::Output) -> T::Output\n+    where T: FnOnce<()>\n+{\n+    t()\n+}\n+\n+#[cfg(ok)] // two instantiations: OK\n+fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    let a = bar(foo, x);\n+    let b = bar(foo, y);\n+    (a, b)\n+}\n+\n+#[cfg(oneuse)] // one instantiation: OK (surprisingly)\n+fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    let f /* : fn() -> &'static u32 */ = foo; // <-- inferred type annotated\n+    let a = bar(f, x); // this is considered ok because fn args are contravariant...\n+    let b = bar(f, y); // ...and hence we infer T to distinct values in each call.\n+    (a, b)\n+}\n+\n+#[cfg(transmute)] // one instantiations: BAD\n+fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   bar(foo, x) //[transmute]~ ERROR E0759\n+}\n+\n+#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n+fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   let a = bar(foo, y);\n+   let b = bar(foo, x);\n+   (a, b) //[krisskross]~ ERROR lifetime mismatch [E0623]\n+   //[krisskross]~^ ERROR lifetime mismatch [E0623]\n+}\n+\n+fn main() { }"}, {"sha": "ca57142ecee09fd7094db32207241d291aaaf197", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.transmute.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,11 @@\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/project-fn-ret-contravariant-nll.rs:44:8\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |                  ------- this data with lifetime `'a`...\n+LL |    bar(foo, x)\n+   |        ^^^  - ...is used and required to live as long as `'static` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "a5b6d6403914757359c3b3c270be747f07e0e38f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,30 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-contravariant.rs:45:4\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b)\n-   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-contravariant.rs:45:4\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b)\n-   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-help: `'a` and `'b` must be the same: replace one with the other\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "52824b3922e6942ded7ec1a785edf05542978306", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant.rs:45:5\n+  --> $DIR/project-fn-ret-contravariant.rs:52:5\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |                        -------                 ------------------\n@@ -10,7 +10,7 @@ LL |    (a, b)\n    |     ^ ...but data from `y` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant.rs:45:8\n+  --> $DIR/project-fn-ret-contravariant.rs:52:8\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |                                    -------     ------------------"}, {"sha": "ed900079cfc223970ce1e4f502b5b363cc05d45e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.ok.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-contravariant.rs:50:1\n-   |\n-LL | fn main() { }\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ed900079cfc223970ce1e4f502b5b363cc05d45e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.oneuse.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-contravariant.rs:50:1\n-   |\n-LL | fn main() { }\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7bd245d1c340ab4a63680a7fd322516839b5f1ba", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,12 +1,19 @@\n #![feature(unboxed_closures)]\n-#![feature(rustc_attrs)]\n \n // Test for projection cache. We should be able to project distinct\n // lifetimes from `foo` as we reinstantiate it multiple times, but not\n // if we do it just once. In this variant, the region `'a` is used in\n // an contravariant position, which affects the results.\n \n // revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+//[oneuse] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replaced with\n+// `project-fn-ret-contravariant-nll.rs` The two would normally be just\n+// revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n \n #![allow(dead_code, unused_variables)]\n \n@@ -46,5 +53,4 @@ fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    //[krisskross]~^ ERROR lifetime mismatch [E0623]\n }\n \n-#[rustc_error]\n-fn main() { } //[ok,oneuse]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() { }"}, {"sha": "f532c96ed2cc73ed21a190765b33a79a82eb24d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,10 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-contravariant.rs:38:4\n-   |\n-LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n-LL |    bar(foo, x)\n-   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3d7f36ca32ba9c6c15f3f15cbf18abae6967019d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-contravariant.rs:38:8\n+  --> $DIR/project-fn-ret-contravariant.rs:45:8\n    |\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |                  ------- this data with lifetime `'a`..."}, {"sha": "231e98cf841f2eb609cf93193c3c695ef3c1c449", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.krisskross.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:56:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:63:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              --  -- lifetime `'b` defined here\n@@ -15,7 +15,7 @@ LL |     (a, b)\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:56:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:63:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr"}, {"sha": "1dbfff6a8cdeb0ad809e911ac20375aed8f2a329", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.oneuse.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:39:13\n+  --> $DIR/project-fn-ret-invariant-nll.rs:46:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here\n@@ -15,7 +15,7 @@ LL |     let a = bar(f, x);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:40:13\n+  --> $DIR/project-fn-ret-invariant-nll.rs:47:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr"}, {"sha": "6cd5c6417a914502969496d104591671ee537856", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,68 @@\n+#![feature(unboxed_closures)]\n+// Test for projection cache. We should be able to project distinct\n+// lifetimes from `foo` as we reinstantiate it multiple times, but not\n+// if we do it just once. In this variant, the region `'a` is used in\n+// an invariant position, which affects the results.\n+\n+// revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+\n+// compile-flags: -Z borrowck=mir\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should replace with `project-fn-ret-invariant.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n+#![allow(dead_code, unused_variables)]\n+\n+use std::marker::PhantomData;\n+\n+struct Type<'a> {\n+    // Invariant\n+    data: PhantomData<fn(&'a u32) -> &'a u32>,\n+}\n+\n+fn foo<'a>() -> Type<'a> {\n+    loop {}\n+}\n+\n+fn bar<T>(t: T, x: T::Output) -> T::Output\n+where\n+    T: FnOnce<()>,\n+{\n+    t()\n+}\n+\n+#[cfg(ok)] // two instantiations: OK\n+fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let a = bar(foo, x);\n+    let b = bar(foo, y);\n+    (a, b)\n+}\n+\n+#[cfg(oneuse)] // one instantiation: BAD\n+fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+    let a = bar(f, x); //[oneuse]~ ERROR lifetime may not live long enough\n+    let b = bar(f, y); //[oneuse]~ ERROR lifetime may not live long enough\n+    (a, b)\n+}\n+\n+#[cfg(transmute)] // one instantiations: BAD\n+fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n+    // Cannot instantiate `foo` with any lifetime other than `'a`,\n+    // since it is provided as input.\n+\n+    bar(foo, x) //[transmute]~ ERROR lifetime may not live long enough\n+}\n+\n+#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n+fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let a = bar(foo, y);\n+    let b = bar(foo, x);\n+    (a, b)\n+    //[krisskross]~^ ERROR lifetime may not live long enough\n+    //[krisskross]~| ERROR lifetime may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "352914f020c2cdd03f5886d7a9010554db49febb", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.transmute.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:49:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:56:5\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |        -- lifetime `'a` defined here", "previous_filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr"}, {"sha": "fd1152dd80cc1fc72b0f884e849dfd8ae41fe35d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:54:22\n+  --> $DIR/project-fn-ret-invariant.rs:60:22\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                      --------     --------------------\n@@ -9,7 +9,7 @@ LL |     let a = bar(foo, y);\n    |                      ^ ...but data from `x` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:56:9\n+  --> $DIR/project-fn-ret-invariant.rs:62:9\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                      --------     --------------------"}, {"sha": "c340850094857f62b2aed2e42d2fa07b5dfa31f0", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.ok.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-invariant.rs:60:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1b10c6b990a6d202bf5fed1551d644554fa0927e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:40:20\n+  --> $DIR/project-fn-ret-invariant.rs:46:20\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                --------     --------------------"}, {"sha": "d42d99d778376f7fbb0e755f74208fa6245f0aab", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,17 @@\n #![feature(unboxed_closures)]\n-#![feature(rustc_attrs)]\n // Test for projection cache. We should be able to project distinct\n // lifetimes from `foo` as we reinstantiate it multiple times, but not\n // if we do it just once. In this variant, the region `'a` is used in\n // an invariant position, which affects the results.\n \n // revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replaced with `project-fn-ret-invariant-nll.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n #![allow(dead_code, unused_variables)]\n \n use std::marker::PhantomData;\n@@ -56,6 +62,4 @@ fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     (a, b) //[krisskross]~ ERROR E0623\n }\n \n-#[rustc_error]\n fn main() {}\n-//[ok]~^ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "8c1d9d1e28409336277c8a085763ff73fb94cefb", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-invariant.rs:49:9\n+  --> $DIR/project-fn-ret-invariant.rs:55:9\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                   -------- this data with lifetime `'a`...\n@@ -8,7 +8,7 @@ LL |     bar(foo, x)\n    |         ^^^  - ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/project-fn-ret-invariant.rs:45:37\n+  --> $DIR/project-fn-ret-invariant.rs:51:37\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                                     ^^^^^^^ `'static` requirement introduced here"}, {"sha": "732f5d9584bc85d2c13d472f962bc77cba4c0f19", "filename": "src/test/ui/associated-types/higher-ranked-projection.badbase.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/higher-ranked-projection.rs:25:5\n+   |\n+LL |     foo(());\n+   |     ^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&'a ()`\n+              found reference `&()`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/higher-ranked-projection.rs:16:33\n+   |\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8b2b87223a58a2d5d473d8bb0d3afeedde9a5857", "filename": "src/test/ui/associated-types/higher-ranked-projection.badnll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/higher-ranked-projection.rs:25:5\n+   |\n+LL |     foo(());\n+   |     ^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&'a ()`\n+              found reference `&()`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/higher-ranked-projection.rs:16:33\n+   |\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1dc41a2165fff9ce5a8d317bbcf2de779e1d721d", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/higher-ranked-projection.rs:24:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "8b1046b6bbc9ddfb90a0e4c7306bd9239a69b1d0", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,6 +1,7 @@\n-#![feature(rustc_attrs)]\n-\n-// revisions: good bad\n+// ignore-compare-mode-nll\n+// revisions: good badbase badnll\n+//[good] check-pass\n+// [badnll]compile-flags: -Zborrowck=mir\n \n trait Mirror {\n     type Image;\n@@ -10,7 +11,7 @@ impl<T> Mirror for T {\n     type Image = T;\n }\n \n-#[cfg(bad)]\n+#[cfg(any(badbase, badnll))]\n fn foo<U, T>(_t: T)\n     where for<'a> &'a T: Mirror<Image=U>\n {}\n@@ -20,8 +21,8 @@ fn foo<U, T>(_t: T)\n     where for<'a> &'a T: Mirror<Image=&'a U>\n {}\n \n-#[rustc_error]\n-fn main() { //[good]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() {\n     foo(());\n-    //[bad]~^ ERROR mismatched types\n+    //[badbase]~^ ERROR mismatched types\n+    //[badnll]~^^ ERROR mismatched types\n }"}, {"sha": "34705d4838e76ac979160f0b84c5e9dac894b0c1", "filename": "src/test/ui/async-await/issue-76547.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-76547.rs:20:13\n+  --> $DIR/issue-76547.rs:24:13\n    |\n LL | async fn fut(bufs: &mut [&mut [u8]]) {\n    |                    ---------------- these two types are declared with different lifetimes...\n LL |     ListFut(bufs).await\n    |             ^^^^ ...but data from `bufs` flows into `bufs` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-76547.rs:34:14\n+  --> $DIR/issue-76547.rs:39:14\n    |\n LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n    |                     ---------------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/async-await/issue-76547.stderr"}, {"sha": "bc30da1e389b3634b8f7d6202bb3d72aa5ed0d84", "filename": "src/test/ui/async-await/issue-76547.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-76547.rs:20:13\n+  --> $DIR/issue-76547.rs:24:13\n    |\n LL | async fn fut(bufs: &mut [&mut [u8]]) {\n    |                    -     - let's call the lifetime of this reference `'2`\n@@ -9,7 +9,7 @@ LL |     ListFut(bufs).await\n    |             ^^^^ this usage requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-76547.rs:34:14\n+  --> $DIR/issue-76547.rs:39:14\n    |\n LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n    |                     -     - let's call the lifetime of this reference `'2`"}, {"sha": "45c7ab63135b1d328223e586a52f6bd97a00b7db", "filename": "src/test/ui/async-await/issue-76547.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test for diagnostic improvement issue #76547\n // edition:2018\n \n@@ -18,7 +22,8 @@ impl<'a> Future for ListFut<'a> {\n \n async fn fut(bufs: &mut [&mut [u8]]) {\n     ListFut(bufs).await\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n pub struct ListFut2<'a>(&'a mut [&'a mut [u8]]);\n@@ -32,7 +37,8 @@ impl<'a> Future for ListFut2<'a> {\n \n async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n     ListFut2(bufs).await\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "7577b95fa2e2f94c0ececdb5519f81caf6565bfe", "filename": "src/test/ui/async-await/issues/issue-62097.base.stderr", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,14 @@\n error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-62097.rs:12:31\n+  --> $DIR/issue-62097.rs:16:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^ this data with an anonymous lifetime `'_`...\n+LL |\n LL |         foo(|| self.bar()).await;\n    |         --- ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by this bound\n-  --> $DIR/issue-62097.rs:4:19\n+  --> $DIR/issue-62097.rs:8:19\n    |\n LL |     F: FnOnce() + 'static\n    |                   ^^^^^^^", "previous_filename": "src/test/ui/async-await/issues/issue-62097.stderr"}, {"sha": "b2b7c46d3487884b5114f2b999ac0a99f289c56e", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error[E0373]: closure may outlive the current function, but it borrows `self`, which is owned by the current function\n-  --> $DIR/issue-62097.rs:13:13\n+  --> $DIR/issue-62097.rs:18:13\n    |\n LL |         foo(|| self.bar()).await;\n    |             ^^ ---- `self` is borrowed here\n    |             |\n    |             may outlive borrowed value `self`\n    |\n note: function requires argument type to outlive `'static`\n-  --> $DIR/issue-62097.rs:13:9\n+  --> $DIR/issue-62097.rs:18:9\n    |\n LL |         foo(|| self.bar()).await;\n    |         ^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,14 @@ LL |         foo(move || self.bar()).await;\n    |             ++++\n \n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-62097.rs:13:9\n+  --> $DIR/issue-62097.rs:18:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               -----\n    |                               |\n    |                               `self` is a reference that is only valid in the associated function body\n    |                               let's call the lifetime of this reference `'1`\n+LL |\n LL |         foo(|| self.bar()).await;\n    |         ^^^^^^^^^^^^^^^^^^\n    |         |"}, {"sha": "d2260cd68c1ad9f90ba3088b73cb160a66f0a412", "filename": "src/test/ui/async-await/issues/issue-62097.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // edition:2018\n async fn foo<F>(fun: F)\n where\n@@ -9,8 +13,11 @@ where\n struct Struct;\n \n impl Struct {\n-    pub async fn run_dummy_fn(&self) { //~ ERROR E0759\n+    pub async fn run_dummy_fn(&self) {\n+        //[base]~^ ERROR E0759\n         foo(|| self.bar()).await;\n+        //[nll]~^ ERROR closure may outlive the current function\n+        //[nll]~| ERROR borrowed data escapes outside of associated function\n     }\n \n     pub fn bar(&self) {}"}, {"sha": "2ff85a27a4645266ce804891dcbff92842a22049", "filename": "src/test/ui/async-await/issues/issue-63388-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,11 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-63388-1.rs:14:9\n+  --> $DIR/issue-63388-1.rs:19:9\n    |\n LL |         &'a self, foo: &dyn Foo\n    |                        -------- this parameter and the return type are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n    |          --------\n-LL |     {\n+...\n LL |         foo\n    |         ^^^ ...but data from `foo` is returned here\n ", "previous_filename": "src/test/ui/async-await/issues/issue-63388-1.stderr"}, {"sha": "eee0cee278b9ca857902f526cda783b67900b9b0", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,15 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-63388-1.rs:13:5\n+  --> $DIR/issue-63388-1.rs:17:5\n    |\n LL |       async fn do_sth<'a>(\n    |                       -- lifetime `'a` defined here\n LL |           &'a self, foo: &dyn Foo\n    |                          - let's call the lifetime of this reference `'1`\n LL |       ) -> &dyn Foo\n LL | /     {\n+LL | |\n LL | |         foo\n+LL | |\n LL | |     }\n    | |_____^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n "}, {"sha": "c45d2a42177cece425f85812021754f3fc18efdf", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // edition:2018\n \n struct Xyz {\n@@ -11,7 +15,9 @@ impl Xyz {\n         &'a self, foo: &dyn Foo\n     ) -> &dyn Foo\n     {\n-        foo  //~ ERROR lifetime mismatch\n+        //[nll]~^ ERROR lifetime may not live long enough\n+        foo\n+        //[base]~^ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "a4bdc447f65048fbb01d20c5f8069b3dd1ae48c3", "filename": "src/test/ui/async-await/issues/issue-72312.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-72312.rs:10:24\n+  --> $DIR/issue-72312.rs:14:24\n    |\n LL |     pub async fn start(&self) {\n    |                        ^^^^^ this data with an anonymous lifetime `'_`...\n@@ -8,12 +8,12 @@ LL |             &self;\n    |             ----- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/issue-72312.rs:13:9\n+  --> $DIR/issue-72312.rs:20:9\n    |\n LL |         require_static(async move {\n    |         ^^^^^^^^^^^^^^\n note: `'static` lifetime requirement introduced by this bound\n-  --> $DIR/issue-72312.rs:2:22\n+  --> $DIR/issue-72312.rs:6:22\n    |\n LL | fn require_static<T: 'static>(val: T) -> T {\n    |                      ^^^^^^^", "previous_filename": "src/test/ui/async-await/issues/issue-72312.stderr"}, {"sha": "53b2c931cceab253904caeea4821cc84900b8451", "filename": "src/test/ui/async-await/issues/issue-72312.nll.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-72312.rs:13:24\n+  --> $DIR/issue-72312.rs:20:24\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n@@ -9,6 +9,10 @@ LL |       pub async fn start(&self) {\n ...\n LL |           require_static(async move {\n    |  ________________________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | |             &self;\n LL | |         });\n    | |         ^"}, {"sha": "c1eceefd64377e92fcf07ecfd47ed5431f5cd61d", "filename": "src/test/ui/async-await/issues/issue-72312.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,17 +1,28 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // edition:2018\n fn require_static<T: 'static>(val: T) -> T {\n-    //~^ NOTE 'static` lifetime requirement introduced by this bound\n+    //[base]~^ NOTE 'static` lifetime requirement introduced by this bound\n     val\n }\n \n struct Problem;\n \n impl Problem {\n-    pub async fn start(&self) { //~ ERROR E0759\n-        //~^ NOTE this data with an anonymous lifetime `'_`\n-        //~| NOTE in this expansion of desugaring of `async` block or function\n-        require_static(async move { //~ NOTE ...and is required to live as long as `'static` here\n-            &self; //~ NOTE ...is used here...\n+    pub async fn start(&self) {\n+        //[base]~^ ERROR E0759\n+        //[base]~| NOTE this data with an anonymous lifetime `'_`\n+        //[base]~| NOTE in this expansion of desugaring of `async` block or function\n+        //[nll]~^^^^ NOTE let's call\n+        //[nll]~| NOTE `self` is a reference\n+        require_static(async move {\n+            //[base]~^ NOTE ...and is required to live as long as `'static` here\n+            //[nll]~^^ ERROR borrowed data escapes\n+            //[nll]~| NOTE `self` escapes\n+            //[nll]~| NOTE argument requires\n+            &self; //[base]~ NOTE ...is used here...\n         });\n     }\n }"}, {"sha": "907c1f6c4079fd4bdd078f24ba8bb75e6b61c182", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.base.stderr", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,17 +1,18 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ret-impl-trait-one.rs:10:85\n+  --> $DIR/ret-impl-trait-one.rs:14:85\n    |\n LL |   async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |  ______________________________________________________------_____-------------------_^\n    | |                                                      |\n    | |                                                      this parameter and the return type are declared with different lifetimes...\n LL | |\n+LL | |\n LL | |     (a, b)\n LL | | }\n    | |_^ ...but data from `a` is returned here\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:16:80\n+  --> $DIR/ret-impl-trait-one.rs:21:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |  ____________________________________--__________________________________________^", "previous_filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr"}, {"sha": "dbf7293a3890345e55732efee5b3de1c461d7e4f", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,20 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:10:85\n+  --> $DIR/ret-impl-trait-one.rs:14:85\n    |\n LL |   async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |  ________________________________--__--_______________________________________________^\n    | |                                |   |\n    | |                                |   lifetime `'b` defined here\n    | |                                lifetime `'a` defined here\n LL | |\n+LL | |\n LL | |     (a, b)\n LL | | }\n    | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:16:80\n+  --> $DIR/ret-impl-trait-one.rs:21:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |  ____________________________________--__________________________________________^"}, {"sha": "f4c309b4c10da192da86bf9481fd93705c2247e8", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // edition:2018\n \n // Test that a feature gate is needed to use `impl Trait` as the\n@@ -8,7 +12,8 @@ impl<T> Trait<'_> for T { }\n \n // Fails to recognize that both 'a and 'b are mentioned and should thus be accepted\n async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n     (a, b)\n }\n "}, {"sha": "3d6d00a0f958bfbad3a37c6437fefbed88266cdc", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:13:5\n    |\n LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                                -------------     -----", "previous_filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.stderr"}, {"sha": "7c4de57320e7834f230fd69874f2cd611402bee2", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:13:5\n    |\n LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                      -- -- lifetime `'b` defined here"}, {"sha": "60101d06820cc624254d092e6d08e76023be42d4", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test that assignments to an `&mut` pointer which is found in a\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n@@ -7,7 +11,8 @@ struct S<'a> {\n \n fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n     S { pointer: &mut *p.pointer }\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "3518a663e59b5f9a0fb6e0762d9919c9cd662ba1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.base.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,93 @@\n+error[E0499]: cannot borrow `*f` as mutable more than once at a time\n+  --> $DIR/two-phase-nonrecv-autoref.rs:51:11\n+   |\n+LL |         f(f(10));\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n+   |         first mutable borrow occurs here\n+   |         first borrow later used by call\n+\n+error[E0382]: use of moved value: `f`\n+  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n+   |\n+LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n+   |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n+LL |         f(f(10));\n+   |         - ^ value used here after move\n+   |         |\n+   |         value moved here\n+\n+error[E0499]: cannot borrow `*f` as mutable more than once at a time\n+  --> $DIR/two-phase-nonrecv-autoref.rs:63:11\n+   |\n+LL |         f(f(10));\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n+   |         first mutable borrow occurs here\n+   |         first borrow later used by call\n+\n+error[E0382]: use of moved value: `f`\n+  --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n+   |\n+LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n+   |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n+LL |         f(f(10));\n+   |         - ^ value used here after move\n+   |         |\n+   |         value moved here\n+\n+error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-nonrecv-autoref.rs:108:27\n+   |\n+LL |     double_access(&mut a, &a);\n+   |     ------------- ------  ^^ immutable borrow occurs here\n+   |     |             |\n+   |     |             mutable borrow occurs here\n+   |     mutable borrow later used by call\n+\n+error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n+   |\n+LL |     i[i[3]] = 4;\n+   |     --^----\n+   |     | |\n+   |     | immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n+   |\n+LL |     i[i[3]] = 4;\n+   |       ^^^^\n+help: ...and then using that local here\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:5\n+   |\n+LL |     i[i[3]] = 4;\n+   |     ^^^^^^^\n+\n+error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n+   |\n+LL |     i[i[3]] = i[4];\n+   |     --^----\n+   |     | |\n+   |     | immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n+   |\n+LL |     i[i[3]] = i[4];\n+   |       ^^^^\n+help: ...and then using that local here\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:5\n+   |\n+LL |     i[i[3]] = i[4];\n+   |     ^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0382, E0499, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "3518a663e59b5f9a0fb6e0762d9919c9cd662ba1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -8,7 +8,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:59:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n    |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n@@ -18,7 +18,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:65:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:63:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -27,7 +27,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:73:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n    |\n LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:112:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:108:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -46,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -56,18 +56,18 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n    |\n help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n    |\n LL |     i[i[3]] = 4;\n    |       ^^^^\n help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:138:5\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:5\n    |\n LL |     i[i[3]] = 4;\n    |     ^^^^^^^\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -77,12 +77,12 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow later used here\n    |\n help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n    |\n LL |     i[i[3]] = i[4];\n    |       ^^^^\n help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:143:5\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:5\n    |\n LL |     i[i[3]] = i[4];\n    |     ^^^^^^^"}, {"sha": "b6cc099a6145f9c5707bc14f98aec1a07dbf5da5", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,4 +1,4 @@\n-// revisions: nll\n+// revisions: base nll\n //[nll]compile-flags: -Z borrowck=mir\n \n //[g2p]compile-flags: -Z borrowck=mir -Z two-phase-beyond-autoref\n@@ -49,30 +49,26 @@ fn overloaded_call_traits() {\n \n     fn twice_ten_sm<F: FnMut(i32) -> i32>(f: &mut F) {\n         f(f(10));\n-        //[nll]~^   ERROR cannot borrow `*f` as mutable more than once at a time\n-        //[g2p]~^^ ERROR cannot borrow `*f` as mutable more than once at a time\n+        //~^ ERROR cannot borrow `*f` as mutable more than once at a time\n     }\n     fn twice_ten_si<F: Fn(i32) -> i32>(f: &mut F) {\n         f(f(10));\n     }\n     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n         f(f(10));\n-        //[nll]~^   ERROR use of moved value: `f`\n-        //[g2p]~^^  ERROR use of moved value: `f`\n+        //~^ ERROR use of moved value: `f`\n     }\n \n     fn twice_ten_om(f: &mut dyn FnMut(i32) -> i32) {\n         f(f(10));\n-        //[nll]~^   ERROR cannot borrow `*f` as mutable more than once at a time\n-        //[g2p]~^^  ERROR cannot borrow `*f` as mutable more than once at a time\n+        //~^ ERROR cannot borrow `*f` as mutable more than once at a time\n     }\n     fn twice_ten_oi(f: &mut dyn Fn(i32) -> i32) {\n         f(f(10));\n     }\n     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n         f(f(10));\n-        //[nll]~^   ERROR use of moved value: `f`\n-        //[g2p]~^^  ERROR use of moved value: `f`\n+        //~^ ERROR use of moved value: `f`\n     }\n \n     twice_ten_sm(&mut |x| x + 1);\n@@ -110,8 +106,7 @@ fn coerce_unsized() {\n \n     // This is not okay.\n     double_access(&mut a, &a);\n-    //[nll]~^   ERROR cannot borrow `a` as immutable because it is also borrowed as mutable [E0502]\n-    //[g2p]~^^  ERROR cannot borrow `a` as immutable because it is also borrowed as mutable [E0502]\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable [E0502]\n \n     // But this is okay.\n     a.m(a.i(10));\n@@ -136,12 +131,14 @@ impl IndexMut<i32> for I {\n fn coerce_index_op() {\n     let mut i = I(10);\n     i[i[3]] = 4;\n-    //[nll]~^  ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    //~^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    // Shoud be accepted with g2p\n \n     i[3] = i[4];\n \n     i[i[3]] = i[4];\n-    //[nll]~^  ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    //~^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    // Shoud be accepted with g2p\n }\n \n fn main() {"}, {"sha": "c3efe16e251baf06dc0569570012aa4fb9269711", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.base.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,43 +1,43 @@\n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:16:52\n+  --> $DIR/expect-fn-supply-fn.rs:20:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n note: the anonymous lifetime #1 defined here...\n-  --> $DIR/expect-fn-supply-fn.rs:16:48\n+  --> $DIR/expect-fn-supply-fn.rs:20:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'x` as defined here\n-  --> $DIR/expect-fn-supply-fn.rs:13:36\n+  --> $DIR/expect-fn-supply-fn.rs:17:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:16:52\n+  --> $DIR/expect-fn-supply-fn.rs:20:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/expect-fn-supply-fn.rs:13:36\n+  --> $DIR/expect-fn-supply-fn.rs:17:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/expect-fn-supply-fn.rs:16:48\n+  --> $DIR/expect-fn-supply-fn.rs:20:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:32:52\n+  --> $DIR/expect-fn-supply-fn.rs:38:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                    ^^^^^^^^ one type is more general than the other\n@@ -46,7 +46,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n               found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:39:53\n+  --> $DIR/expect-fn-supply-fn.rs:45:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                     ^^^^^^^^^^^ one type is more general than the other\n@@ -55,7 +55,7 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n               found fn pointer `fn(&'x u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:48:53\n+  --> $DIR/expect-fn-supply-fn.rs:54:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                     ^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr"}, {"sha": "52e2898d2bb1a7ed0b4876f2c33547f1edc0017c", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/expect-fn-supply-fn.rs:16:49\n+  --> $DIR/expect-fn-supply-fn.rs:20:49\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    -- lifetime `'x` defined here\n@@ -11,7 +11,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 requires that `'1` must outlive `'x`\n \n error: lifetime may not live long enough\n-  --> $DIR/expect-fn-supply-fn.rs:16:49\n+  --> $DIR/expect-fn-supply-fn.rs:20:49\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    -- lifetime `'x` defined here\n@@ -20,7 +20,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 ^ requires that `'x` must outlive `'static`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:32:49\n+  --> $DIR/expect-fn-supply-fn.rs:38:49\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                 ^ one type is more general than the other\n@@ -29,7 +29,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n               found fn pointer `fn(&u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:39:50\n+  --> $DIR/expect-fn-supply-fn.rs:45:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                  ^ one type is more general than the other\n@@ -38,7 +38,7 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n               found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:48:50\n+  --> $DIR/expect-fn-supply-fn.rs:54:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                  ^ one type is more general than the other"}, {"sha": "1715f56ff63ceac1587798db7cf72990f9ee2f2d", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn with_closure_expecting_fn_with_free_region<F>(_: F)\n where\n     F: for<'a> FnOnce(fn(&'a u32), &i32),\n@@ -14,8 +18,10 @@ fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, the type given for `'x` \"obscures\" a region from the\n     // expected signature that is bound at closure level.\n     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //[base]~^ ERROR mismatched types\n+    //[base]~| ERROR mismatched types\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR lifetime may not live long enough\n }\n \n fn expect_free_supply_free_from_closure() {"}, {"sha": "93ed51fa7e114cd9b5ab78237311c3a8aaf561d8", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.base.stderr", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,22 +1,24 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:9\n    |\n LL |   fn foo(x: &()) {\n    |             --- this data with an anonymous lifetime `'_`...\n LL |       bar(|| {\n    |  _________^\n LL | |\n+LL | |\n+LL | |\n LL | |         let _ = x;\n LL | |     })\n    | |_____^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:5\n    |\n LL |     bar(|| {\n    |     ^^^\n note: `'static` lifetime requirement introduced by this bound\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:1:39\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:39\n    |\n LL | fn bar<F>(blk: F) where F: FnOnce() + 'static {\n    |                                       ^^^^^^^", "previous_filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr"}, {"sha": "dc5188a86511ae50fa0a2cb10dad052fc8be5981", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,12 +1,14 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:5\n    |\n LL |   fn foo(x: &()) {\n    |          -  - let's call the lifetime of this reference `'1`\n    |          |\n    |          `x` is a reference that is only valid in the function body\n LL | /     bar(|| {\n LL | |\n+LL | |\n+LL | |\n LL | |         let _ = x;\n LL | |     })\n    | |      ^\n@@ -15,19 +17,21 @@ LL | |     })\n    |        argument requires that `'1` must outlive `'static`\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:9\n    |\n LL |     bar(|| {\n    |         ^^ may outlive borrowed value `x`\n-LL |\n+...\n LL |         let _ = x;\n    |                 - `x` is borrowed here\n    |\n note: function requires argument type to outlive `'static`\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:5\n    |\n LL | /     bar(|| {\n LL | |\n+LL | |\n+LL | |\n LL | |         let _ = x;\n LL | |     })\n    | |______^"}, {"sha": "6c49cd76b13f0f067acf1783e0c3c34ce3942571", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,9 +1,15 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n fn bar<F>(blk: F) where F: FnOnce() + 'static {\n }\n \n fn foo(x: &()) {\n     bar(|| {\n-        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+        //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+        //[nll]~^^ ERROR borrowed data escapes\n+        //[nll]~| ERROR closure may outlive\n         let _ = x;\n     })\n }"}, {"sha": "be81efd27c4ebba951ab7ecfe975884d036ce7de", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/expect-region-supply-region-2.rs:14:33\n+  --> $DIR/expect-region-supply-region-2.rs:18:33\n    |\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&u32`\n               found reference `&'x u32`\n note: the anonymous lifetime #1 defined here...\n-  --> $DIR/expect-region-supply-region-2.rs:14:29\n+  --> $DIR/expect-region-supply-region-2.rs:18:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n    |  _____________________________^\n@@ -19,26 +19,26 @@ LL | |         f = Some(x);\n LL | |     });\n    | |_____^\n note: ...does not necessarily outlive the lifetime `'x` as defined here\n-  --> $DIR/expect-region-supply-region-2.rs:9:30\n+  --> $DIR/expect-region-supply-region-2.rs:13:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-region-supply-region-2.rs:14:33\n+  --> $DIR/expect-region-supply-region-2.rs:18:33\n    |\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&u32`\n               found reference `&'x u32`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/expect-region-supply-region-2.rs:9:30\n+  --> $DIR/expect-region-supply-region-2.rs:13:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              ^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/expect-region-supply-region-2.rs:14:29\n+  --> $DIR/expect-region-supply-region-2.rs:18:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n    |  _____________________________^", "previous_filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.stderr"}, {"sha": "4a9a19422d7cd55562112e5f0b6552c39edb400f", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region-2.rs:14:30\n+  --> $DIR/expect-region-supply-region-2.rs:18:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              -- lifetime `'x` defined here\n@@ -10,7 +10,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |                              requires that `'1` must outlive `'x`\n \n error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region-2.rs:14:30\n+  --> $DIR/expect-region-supply-region-2.rs:18:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              -- lifetime `'x` defined here"}, {"sha": "072ba57c10bf48520ea9480cf3422b0e624aa7ed", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![allow(warnings)]\n \n fn closure_expecting_bound<F>(_: F)\n@@ -12,8 +16,10 @@ fn expect_bound_supply_named<'x>() {\n     // Here we give a type annotation that `x` should be free. We get\n     // an error because of that.\n     closure_expecting_bound(|x: &'x u32| {\n-        //~^ ERROR mismatched types\n-        //~| ERROR mismatched types\n+        //[base]~^ ERROR mismatched types\n+        //[base]~| ERROR mismatched types\n+        //[nll]~^^^ ERROR lifetime may not live long enough\n+        //[nll]~| ERROR lifetime may not live long enough\n \n         // Borrowck doesn't get a chance to run, but if it did it should error\n         // here."}, {"sha": "255900e19bb4b932bc182a4b8dd276ae1a3f6759", "filename": "src/test/ui/const-generics/invariant.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n-  --> $DIR/invariant.rs:14:1\n+  --> $DIR/invariant.rs:18:1\n    |\n LL | impl SadBee for for<'a> fn(&'a ()) {\n    | ---------------------------------- first implementation here\n@@ -13,7 +13,7 @@ LL | impl SadBee for fn(&'static ()) {\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:27:5\n+  --> $DIR/invariant.rs:31:5\n    |\n LL |     v\n    |     ^ one type is more general than the other", "previous_filename": "src/test/ui/const-generics/invariant.stderr"}, {"sha": "f684f7fddc8f51e15dffc30b31a7f30f476526de", "filename": "src/test/ui/const-generics/invariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n-  --> $DIR/invariant.rs:14:1\n+  --> $DIR/invariant.rs:18:1\n    |\n LL | impl SadBee for for<'a> fn(&'a ()) {\n    | ---------------------------------- first implementation here\n@@ -13,7 +13,7 @@ LL | impl SadBee for fn(&'static ()) {\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:27:5\n+  --> $DIR/invariant.rs:31:5\n    |\n LL |     v\n    |     ^ one type is more general than the other"}, {"sha": "65d1ee9420c3df832c67ffffc41d942c609b0d67", "filename": "src/test/ui/const-generics/invariant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n use std::marker::PhantomData;"}, {"sha": "5cb62e19ccf483e5826d082c7ea4162d63b9c2d1", "filename": "src/test/ui/error-codes/E0490.base.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,72 +1,72 @@\n error[E0490]: a value of type `&'b ()` is borrowed for too long\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n note: the type is valid for the lifetime `'a` as defined here\n-  --> $DIR/E0490.rs:1:6\n+  --> $DIR/E0490.rs:5:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n note: but the borrow lasts for the lifetime `'b` as defined here\n-  --> $DIR/E0490.rs:1:10\n+  --> $DIR/E0490.rs:5:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |          ^^\n \n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/E0490.rs:1:10\n+  --> $DIR/E0490.rs:5:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |          ^^\n note: ...so that the type `&'b ()` is not borrowed for too long\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/E0490.rs:1:6\n+  --> $DIR/E0490.rs:5:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/E0490.rs:1:10\n+  --> $DIR/E0490.rs:5:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |          ^^\n note: ...so that the expression is assignable\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    = note: expected `&'a &()`\n               found `&'a &'b ()`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/E0490.rs:1:6\n+  --> $DIR/E0490.rs:5:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n note: ...so that the reference type `&'a &()` does not outlive the data it points at\n-  --> $DIR/E0490.rs:2:12\n+  --> $DIR/E0490.rs:6:12\n    |\n LL |     let x: &'a _ = &y;\n    |            ^^^^^", "previous_filename": "src/test/ui/error-codes/E0490.stderr"}, {"sha": "80bf076e2bd6be182c41d1968487750e87acf04c", "filename": "src/test/ui/error-codes/E0490.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/E0490.rs:2:12\n+  --> $DIR/E0490.rs:6:12\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      --  -- lifetime `'b` defined here\n@@ -11,7 +11,7 @@ LL |     let x: &'a _ = &y;\n    = help: consider adding the following bound: `'b: 'a`\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      -- lifetime `'a` defined here"}, {"sha": "304548215dc25d0964e57435de7d2b242a6ebb00", "filename": "src/test/ui/error-codes/E0490.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,8 +1,14 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn f<'a, 'b>(y: &'b ()) {\n     let x: &'a _ = &y;\n-    //~^ E0490\n-    //~| E0495\n-    //~| E0495\n+    //[base]~^ E0490\n+    //[base]~| E0495\n+    //[base]~| E0495\n+    //[nll]~^^^^ lifetime may not live long enough\n+    //[nll]~| E0597\n }\n \n fn main() {}"}, {"sha": "6f0ea1af0579b5adfc5cd2a250f7fd6bfe4cb9f2", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:18:5\n    |\n LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |                 -------      ----------", "previous_filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.stderr"}, {"sha": "a7a91f3e685faa69bfd4eddcf0f22b8b84875883", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:18:5\n    |\n LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |      --  -- lifetime `'b` defined here"}, {"sha": "30bd042009b6e1147cc9ca3a61ed3ce003c1f0ed", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // check-fail\n // See issue #91068. Types in the substs of an associated type can't be implied\n // to be WF, since they don't actually have to be constructed.\n@@ -11,7 +15,9 @@ impl<T> Trait for T {\n }\n \n fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n-    s //~ ERROR lifetime mismatch [E0623]\n+    s\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "d44c8eb1b8233a458b5ad8a69dbc88ef3f506855", "filename": "src/test/ui/generator/auto-trait-regions.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:35:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:35:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -17,7 +17,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:50:5\n+  --> $DIR/auto-trait-regions.rs:56:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -26,7 +26,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:50:5\n+  --> $DIR/auto-trait-regions.rs:56:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/generator/auto-trait-regions.stderr"}, {"sha": "25456881fa0ef319f60eefe2a6647ac5172be680", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,31 +1,31 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:46:24\n+  --> $DIR/auto-trait-regions.rs:50:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n    |                        |\n    |                        creates a temporary which is freed while still in use\n-LL |         yield;\n+...\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:46:35\n+  --> $DIR/auto-trait-regions.rs:50:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n    |                                   |\n    |                                   creates a temporary which is freed while still in use\n-LL |         yield;\n+...\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:35:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -34,7 +34,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:50:5\n+  --> $DIR/auto-trait-regions.rs:56:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "98af4a39391630316c0f7d57283987b6371c6ea3", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generators)]\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n@@ -30,7 +34,7 @@ fn main() {\n     };\n     assert_foo(gen);\n     //~^ ERROR implementation of `Foo` is not general enough\n-    //~| ERROR implementation of `Foo` is not general enough\n+    //[base]~^^ ERROR implementation of `Foo` is not general enough\n \n     // Allow impls which matches any lifetime\n     let x = &OnlyFooIfRef(No);\n@@ -44,10 +48,12 @@ fn main() {\n     // Disallow impls which relates lifetimes in the generator interior\n     let gen = || {\n         let a = A(&mut true, &mut true, No);\n+        //[nll]~^ temporary value dropped while borrowed\n+        //[nll]~| temporary value dropped while borrowed\n         yield;\n         assert_foo(a);\n     };\n     assert_foo(gen);\n     //~^ ERROR not general enough\n-    //~| ERROR not general enough\n+    //[base]~^^ ERROR not general enough\n }"}, {"sha": "89f6a81ad3b04d0bf6a37f6a3e536da5d5faa952", "filename": "src/test/ui/generator/generator-region-requirements.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/generator-region-requirements.rs:8:9\n+  --> $DIR/generator-region-requirements.rs:12:9\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/generator/generator-region-requirements.stderr"}, {"sha": "9f54c6c9dc12d8ff3fd18e9f4a404857c059e824", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/generator-region-requirements.rs:13:51\n+  --> $DIR/generator-region-requirements.rs:17:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              - let's call the lifetime of this reference `'1`"}, {"sha": "ec718b174607e5cd05d32d40eeb06c86721f95ab", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generators, generator_trait)]\n use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n@@ -6,11 +10,12 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     let mut g = || {\n         yield;\n         x\n-        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+        //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n     };\n     loop {\n         match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n+            //[nll]~^ ERROR lifetime may not live long enough\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "8521951d0c999beba32cdde742a3d27c20cdccfc", "filename": "src/test/ui/generator/resume-arg-late-bound.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:15:5\n+  --> $DIR/resume-arg-late-bound.rs:19:5\n    |\n LL |     test(gen);\n    |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/resume-arg-late-bound.rs:11:15\n+  --> $DIR/resume-arg-late-bound.rs:15:15\n    |\n LL |       let gen = |arg: &mut bool| {\n    |  _______________^\n@@ -16,21 +16,21 @@ LL | |         *arg = true;\n LL | |     };\n    | |_____^\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:8:17\n+  --> $DIR/resume-arg-late-bound.rs:12:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:15:5\n+  --> $DIR/resume-arg-late-bound.rs:19:5\n    |\n LL |     test(gen);\n    |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/resume-arg-late-bound.rs:11:15\n+  --> $DIR/resume-arg-late-bound.rs:15:15\n    |\n LL |       let gen = |arg: &mut bool| {\n    |  _______________^\n@@ -39,7 +39,7 @@ LL | |         *arg = true;\n LL | |     };\n    | |_____^\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:8:17\n+  --> $DIR/resume-arg-late-bound.rs:12:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/generator/resume-arg-late-bound.stderr"}, {"sha": "868d1352f25029074148c6fb9738823fbbe2f980", "filename": "src/test/ui/generator/resume-arg-late-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:15:5\n+  --> $DIR/resume-arg-late-bound.rs:19:5\n    |\n LL |     test(gen);\n    |     ^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:8:17\n+  --> $DIR/resume-arg-late-bound.rs:12:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b973d8a300a5ed698262fbd1977ee5fd256ca980", "filename": "src/test/ui/generator/resume-arg-late-bound.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n //! Tests that we cannot produce a generator that accepts a resume argument\n //! with any lifetime and then stores it across a `yield`.\n \n@@ -14,5 +18,5 @@ fn main() {\n     };\n     test(gen);\n     //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //[base]~^^ ERROR mismatched types\n }"}, {"sha": "3da7794b3d2c0352f504612541e6dd3f52270351", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,12 +0,0 @@\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator.rs:14:45\n-   |\n-LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n-   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n-...\n-LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n-   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0276`."}, {"sha": "aa1e50014fe4ebbde99125c993cdcbac07ed5c23", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator.rs:14:45\n+  --> $DIR/lending_iterator.rs:16:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n@@ -8,15 +8,15 @@ LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) ->\n    |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n \n error[E0311]: the parameter type `Self` may not live long enough\n-  --> $DIR/lending_iterator.rs:35:9\n+  --> $DIR/lending_iterator.rs:37:9\n    |\n LL |         <B as FromLendingIterator<A>>::from_iter(self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/lending_iterator.rs:10:45\n+  --> $DIR/lending_iterator.rs:12:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |                                             ^^^^^^^^^^^^"}, {"sha": "6048e6e87c0ec6cfb5b1348541ecdaec22356b7b", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,5 @@\n+// FIXME(nll): this is experimental anyways, don't really care about the output\n+// ignore-compare-mode-nll\n // revisions: base extended\n //[base] check-fail\n //[extended] check-pass"}, {"sha": "341e2e05d1cd9163c4b590e5387423b8492c28ca", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:7\n+  --> $DIR/projection-type-lifetime-mismatch.rs:21:7\n    |\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         ------------------------------- this data with an anonymous lifetime `'_`...\n@@ -9,7 +9,7 @@ LL |     x.m()\n    |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:7\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       -- this data with an anonymous lifetime `'_`...\n@@ -19,7 +19,7 @@ LL |     x.m()\n    |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n+  --> $DIR/projection-type-lifetime-mismatch.rs:33:7\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         --- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr"}, {"sha": "00395af4889dd70bb548b3faf5c43e629fff47a9", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:21:5\n    |\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:33:5\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`"}, {"sha": "9f14c6f3dc03e5184e16151ef733ffaa60e906d1", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generic_associated_types)]\n \n pub trait X {\n@@ -15,17 +19,20 @@ impl X for () {\n \n fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n     x.m()\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n     x.m()\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn h(x: &()) -> &'static () {\n     x.m()\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "eed12f56be23a8c6d3468cf2fdac0bd6215956bf", "filename": "src/test/ui/generic-associated-types/trait-objects.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `StreamingIterator` cannot be made into an object\n-  --> $DIR/trait-objects.rs:14:21\n+  --> $DIR/trait-objects.rs:16:21\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-objects.rs:8:10\n+  --> $DIR/trait-objects.rs:10:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object..."}, {"sha": "52d48d57859f473749889611528d3c5713c18f60", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.nll.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,17 +0,0 @@\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/trait-objects.rs:16:5\n-   |\n-LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n-   |             -  - let's call the lifetime of this reference `'1`\n-   |             |\n-   |             `x` is a reference that is only valid in the function body\n-LL |\n-LL |     x.size_hint().0\n-   |     ^^^^^^^^^^^^^\n-   |     |\n-   |     `x` escapes the function body here\n-   |     argument requires that `'1` must outlive `'static`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "c7b072256addc588f2c89125dab751799364aa3e", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/trait-objects.rs:16:7\n+  --> $DIR/trait-objects.rs:18:7\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                ------------------------------------------------------ help: add explicit lifetime `'a` to the type of `x`: `&'a mut (dyn StreamingIterator<for<'a> Item = &'a i32> + 'a)`"}, {"sha": "d742d2051beccf2f7a716df30ef6044f25cded20", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,5 @@\n+// FIXME(nll): this is experimental anyways, don't really care about the output\n+// ignore-compare-mode-nll\n // revisions: base extended\n \n #![feature(generic_associated_types)]"}, {"sha": "ec576ee529a4d6d2496f635bcbe47beab3468b1a", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `&'a V` does not fulfill the required lifetime\n-  --> $DIR/issue-59311.rs:17:5\n+  --> $DIR/issue-59311.rs:21:5\n    |\n LL |     v.t(|| {});\n    |     ^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/issue-59311.rs:15:24\n+  --> $DIR/issue-59311.rs:19:24\n    |\n LL |     for<'a> &'a V: T + 'static,\n    |                        ^^^^^^^", "previous_filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.stderr"}, {"sha": "7f98cefdf019fa46efdab4b15e8676eb4c9e3431", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error: higher-ranked lifetime error\n-  --> $DIR/issue-59311.rs:17:5\n+  --> $DIR/issue-59311.rs:21:5\n    |\n LL |     v.t(|| {});\n    |     ^^^^^^^^^^\n    |\n-   = note: could not prove [closure@$DIR/issue-59311.rs:17:9: 17:14] well-formed\n+   = note: could not prove [closure@$DIR/issue-59311.rs:21:9: 21:14] well-formed\n \n error: higher-ranked lifetime error\n-  --> $DIR/issue-59311.rs:17:9\n+  --> $DIR/issue-59311.rs:21:9\n    |\n LL |     v.t(|| {});\n    |         ^^^^^"}, {"sha": "a63c5754f8f11c7d72a57b3dfda5fcf00afffb9d", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -6,6 +6,10 @@\n // an error, but the regression test is here to ensure\n // that it does not ICE. See discussion on #74889 for details.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub trait T {\n     fn t<F: Fn()>(&self, _: F) {}\n }\n@@ -14,7 +18,10 @@ pub fn crash<V>(v: &V)\n where\n     for<'a> &'a V: T + 'static,\n {\n-    v.t(|| {}); //~ ERROR: `&'a V` does not fulfill the required lifetime\n+    v.t(|| {});\n+    //[base]~^ ERROR: `&'a V` does not fulfill the required lifetime\n+    //[nll]~^^ ERROR: higher-ranked lifetime error\n+    //[nll]~| ERROR: higher-ranked lifetime error\n }\n \n fn main() {}"}, {"sha": "c24afdd418bf9172836271badcdddbe334efd8b3", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.base.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,20 @@\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:49:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:53:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9d3cd4dee531dd7f471e95ccc1be59955c4a5391", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,75 +1,75 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:54:5\n+  --> $DIR/issue-71955.rs:49:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r, 's> FnOnce<(&'r &'s str,)>`\n               found type `for<'r> FnOnce<(&'r &str,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:54:24\n+  --> $DIR/issue-71955.rs:49:24\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:34:9\n+  --> $DIR/issue-71955.rs:29:9\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:54:5\n+  --> $DIR/issue-71955.rs:49:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `FnOnce<(&&str,)>`\n               found type `for<'r> FnOnce<(&'r &str,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:54:24\n+  --> $DIR/issue-71955.rs:49:24\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:34:44\n+  --> $DIR/issue-71955.rs:29:44\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |                                            ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:53:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n               found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:58:24\n+  --> $DIR/issue-71955.rs:53:24\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:34:9\n+  --> $DIR/issue-71955.rs:29:9\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:53:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `FnOnce<(&Wrapper<'_>,)>`\n               found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:58:24\n+  --> $DIR/issue-71955.rs:53:24\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:34:44\n+  --> $DIR/issue-71955.rs:29:44\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |                                            ^^^^"}, {"sha": "8d283afd09d643dbc23f881396cdbbe4cd5eddeb", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,8 @@\n // ignore-compare-mode-nll\n-// revisions: migrate nll\n+// revisions: base nll\n // [nll]compile-flags: -Zborrowck=mir\n-// check-fail\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n \n+// check-fail\n #![feature(rustc_attrs)]\n \n trait Parser<'s> {\n@@ -52,11 +47,11 @@ fn main() {\n     }\n \n     foo(bar, \"string\", |s| s.len() == 5);\n-    //[migrate]~^ ERROR implementation of `Parser` is not general enough\n+    //[base]~^ ERROR implementation of `Parser` is not general enough\n     //[nll]~^^ ERROR mismatched types\n     //[nll]~| ERROR mismatched types\n     foo(baz, \"string\", |s| s.0.len() == 5);\n-    //[migrate]~^ ERROR implementation of `Parser` is not general enough\n+    //[base]~^ ERROR implementation of `Parser` is not general enough\n     //[nll]~^^ ERROR mismatched types\n     //[nll]~| ERROR mismatched types\n }"}, {"sha": "3edb1064e3e3e28a73c92527b743885e40e561c3", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr"}, {"sha": "f02eeea90bfd386111a7013eded67d342b2b5b90", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_a_vs_free_x.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.nll.stderr"}, {"sha": "bfc9793fe5d6d3023e74f81b7250c025ec06178c", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n@@ -13,7 +13,7 @@ LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr"}, {"sha": "ee0dc877fd1275e3711cc532dcda03431fda446f", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:39:13\n+  --> $DIR/hr-subtype-nll.rs:54:13\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n    |                      --  -- lifetime `'y` defined here\n@@ -19,7 +19,7 @@ LL | | fn(Inv<'y>)) }\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        --  -- lifetime `'y` defined here", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr"}, {"sha": "75904d6df997aefe85c4c12b1a1c8a37e018b57d", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.free_x_vs_free_y.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:45:13\n+  --> $DIR/hr-subtype-nll.rs:60:13\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        --  -- lifetime `'y` defined here", "previous_filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr"}, {"sha": "7fc1692b3506c416b89cf303d9b7ff42a33c2b1f", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,117 @@\n+// Targeted tests for the higher-ranked subtyping code.\n+\n+#![allow(dead_code)]\n+\n+// revisions: bound_a_vs_bound_a\n+// revisions: bound_a_vs_bound_b\n+// revisions: bound_inv_a_vs_bound_inv_b\n+// revisions: bound_co_a_vs_bound_co_b\n+// revisions: bound_a_vs_free_x\n+// revisions: free_x_vs_free_x\n+// revisions: free_x_vs_free_y\n+// revisions: free_inv_x_vs_free_inv_y\n+// revisions: bound_a_b_vs_bound_a\n+// revisions: bound_co_a_b_vs_bound_co_a\n+// revisions: bound_contra_a_contra_b_ret_co_a\n+// revisions: bound_co_a_co_b_ret_contra_a\n+// revisions: bound_inv_a_b_vs_bound_inv_a\n+// revisions: bound_a_b_ret_a_vs_bound_a_ret_a\n+\n+//[bound_a_vs_bound_a] check-pass\n+//[bound_a_vs_bound_b] check-pass\n+//[bound_inv_a_vs_bound_inv_b] check-pass\n+//[bound_co_a_vs_bound_co_b] check-pass\n+//[free_x_vs_free_x] check-pass\n+//[bound_co_a_b_vs_bound_co_a] check-pass\n+//[bound_co_a_co_b_ret_contra_a] check-pass\n+//[bound_a_b_vs_bound_a] check-pass\n+//[bound_contra_a_contra_b_ret_co_a] check-pass\n+\n+// compile-flags: -Z borrowck=mir\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replace with `hr-subtype.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n+fn gimme<T>(_: Option<T>) {}\n+\n+struct Inv<'a> {\n+    x: *mut &'a u32,\n+}\n+\n+struct Co<'a> {\n+    x: fn(&'a u32),\n+}\n+\n+struct Contra<'a> {\n+    x: &'a u32,\n+}\n+\n+macro_rules! check {\n+    ($rev:ident: ($t1:ty, $t2:ty)) => {\n+        #[cfg($rev)]\n+        fn subtype<'x, 'y: 'x, 'z: 'y>() {\n+            gimme::<$t2>(None::<$t1>);\n+            //[free_inv_x_vs_free_inv_y]~^ ERROR\n+        }\n+\n+        #[cfg($rev)]\n+        fn supertype<'x, 'y: 'x, 'z: 'y>() {\n+            gimme::<$t1>(None::<$t2>);\n+            //[bound_a_vs_free_x]~^ ERROR\n+            //[free_x_vs_free_y]~^^ ERROR\n+            //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n+            //[bound_inv_a_b_vs_bound_inv_a]~| ERROR\n+            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^^ ERROR\n+            //[free_inv_x_vs_free_inv_y]~^^^^^^ ERROR\n+        }\n+    };\n+}\n+\n+// If both have bound regions, they are equivalent, regardless of\n+// variant.\n+check! { bound_a_vs_bound_a: (for<'a> fn(&'a u32),\n+for<'a> fn(&'a u32)) }\n+check! { bound_a_vs_bound_b: (for<'a> fn(&'a u32),\n+for<'b> fn(&'b u32)) }\n+check! { bound_inv_a_vs_bound_inv_b: (for<'a> fn(Inv<'a>),\n+for<'b> fn(Inv<'b>)) }\n+check! { bound_co_a_vs_bound_co_b: (for<'a> fn(Co<'a>),\n+for<'b> fn(Co<'b>)) }\n+\n+// Bound is a subtype of free.\n+check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n+fn(&'x u32)) }\n+\n+// Two free regions are relatable if subtyping holds.\n+check! { free_x_vs_free_x: (fn(&'x u32),\n+fn(&'x u32)) }\n+check! { free_x_vs_free_y: (fn(&'x u32),\n+fn(&'y u32)) }\n+check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+fn(Inv<'y>)) }\n+\n+// Somewhat surprisingly, a fn taking two distinct bound lifetimes and\n+// a fn taking one bound lifetime can be interchangeable, but only if\n+// we are co- or contra-variant with respect to both lifetimes.\n+//\n+// The reason is:\n+// - if we are covariant, then 'a and 'b can be set to the call-site\n+//   intersection;\n+// - if we are contravariant, then 'a can be inferred to 'static.\n+check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n+for<'a>    fn(&'a u32, &'a u32)) }\n+check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n+for<'a>    fn(Co<'a>, Co<'a>)) }\n+check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n+for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n+check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n+for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n+\n+// If we make those lifetimes invariant, then the two types are not interchangeable.\n+check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n+for<'a>    fn(Inv<'a>, Inv<'a>)) }\n+check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n+for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n+\n+fn main() {}"}, {"sha": "13e9fa8a8944a75bd7b5c7213840795987fa21c8", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b66ff5a392eb66f540dcb9916e989a91dbc8acce", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "fa715fd354eaa3ecad3165c3d96868aa5b1b9882", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ one type is more general than the other"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "377689603aa6c9dbcdf4234df6a41743efb6717b", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+  --> $DIR/hr-subtype.rs:53:26\n    |\n LL |               gimme::<$t2>(None::<$t1>);\n    |                            ^^^^^^^^^^^ lifetime mismatch\n@@ -11,7 +11,7 @@ LL | | fn(Inv<'y>)) }\n    = note: expected enum `Option<fn(Inv<'y>)>`\n               found enum `Option<fn(Inv<'x>)>`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:38:20\n+  --> $DIR/hr-subtype.rs:52:20\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n    |                      ^^\n@@ -20,7 +20,7 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:38:24\n+  --> $DIR/hr-subtype.rs:52:24\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n    |                          ^^\n@@ -31,7 +31,7 @@ LL | | fn(Inv<'y>)) }\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ lifetime mismatch\n@@ -43,7 +43,7 @@ LL | | fn(Inv<'y>)) }\n    = note: expected enum `Option<fn(Inv<'x>)>`\n               found enum `Option<fn(Inv<'y>)>`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:44:22\n+  --> $DIR/hr-subtype.rs:58:22\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        ^^\n@@ -52,7 +52,7 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:44:26\n+  --> $DIR/hr-subtype.rs:58:26\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                            ^^"}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:102:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9e5eb972f476a1c5f62b649b238f350a9e2730ac", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:45:26\n+  --> $DIR/hr-subtype.rs:59:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n    |                            ^^^^^^^^^^^ lifetime mismatch\n@@ -11,7 +11,7 @@ LL | | fn(&'y u32)) }\n    = note: expected enum `Option<fn(&'x u32)>`\n               found enum `Option<fn(&'y u32)>`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:44:22\n+  --> $DIR/hr-subtype.rs:58:22\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                        ^^\n@@ -20,7 +20,7 @@ LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | | fn(&'y u32)) }\n    | |______________- in this macro invocation\n note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:44:26\n+  --> $DIR/hr-subtype.rs:58:26\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n    |                            ^^"}, {"sha": "33929cdb8683758e9f846a2e6bdffe5ddc9dae27", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,6 +1,5 @@\n // Targeted tests for the higher-ranked subtyping code.\n \n-#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n // revisions: bound_a_vs_bound_a\n@@ -18,6 +17,21 @@\n // revisions: bound_inv_a_b_vs_bound_inv_a\n // revisions: bound_a_b_ret_a_vs_bound_a_ret_a\n \n+//[bound_a_vs_bound_a] check-pass\n+//[bound_a_vs_bound_b] check-pass\n+//[bound_inv_a_vs_bound_inv_b] check-pass\n+//[bound_co_a_vs_bound_co_b] check-pass\n+//[free_x_vs_free_x] check-pass\n+//[bound_co_a_b_vs_bound_co_a] check-pass\n+//[bound_co_a_co_b_ret_contra_a] check-pass\n+//[bound_a_b_vs_bound_a] check-pass\n+//[bound_contra_a_contra_b_ret_co_a] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replaced with `hr-subtype-nll.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n fn gimme<T>(_: Option<T>) {}\n \n struct Inv<'a> {\n@@ -98,15 +112,4 @@ for<'a>    fn(Inv<'a>, Inv<'a>)) }\n check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n \n-#[rustc_error]\n-fn main() {\n-    //[bound_a_vs_bound_a]~^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_a_vs_bound_b]~^^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_co_a_vs_bound_co_b]~^^^^ ERROR fatal error triggered by #[rustc_error]\n-    //[free_x_vs_free_x]~^^^^^ ERROR fatal error triggered by #[rustc_error]\n-    //[bound_co_a_b_vs_bound_co_a]~^^^^^^ ERROR\n-    //[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR\n-    //[bound_a_b_vs_bound_a]~^^^^^^^^ ERROR\n-    //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR\n-}\n+fn main() {}"}, {"sha": "c6cb77d8d8db9f00efe4796e693a75c81d3887ad", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:9:47\n+  --> $DIR/placeholder-pattern-fail.rs:13:47\n    |\n LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n    |                                               ^^^ one type is more general than the other\n@@ -8,30 +8,30 @@ LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n               found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n \n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:14:31\n+  --> $DIR/placeholder-pattern-fail.rs:18:31\n    |\n LL |     let _x: (&'static i32,) = x;\n    |                               ^ lifetime mismatch\n    |\n    = note: expected tuple `(&'static i32,)`\n               found tuple `(&'c i32,)`\n note: the lifetime `'c` as defined here...\n-  --> $DIR/placeholder-pattern-fail.rs:13:12\n+  --> $DIR/placeholder-pattern-fail.rs:17:12\n    |\n LL | fn simple1<'c>(x: (&'c i32,)) {\n    |            ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:19:30\n+  --> $DIR/placeholder-pattern-fail.rs:23:30\n    |\n LL |     let _: (&'static i32,) = x;\n    |                              ^ lifetime mismatch\n    |\n    = note: expected tuple `(&'static i32,)`\n               found tuple `(&'c i32,)`\n note: the lifetime `'c` as defined here...\n-  --> $DIR/placeholder-pattern-fail.rs:18:12\n+  --> $DIR/placeholder-pattern-fail.rs:22:12\n    |\n LL | fn simple2<'c>(x: (&'c i32,)) {\n    |            ^^", "previous_filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.stderr"}, {"sha": "a1f713d8afb3be17a22726462844f9331790ac67", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:9:47\n+  --> $DIR/placeholder-pattern-fail.rs:13:47\n    |\n LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n    |                                               ^^^ one type is more general than the other"}, {"sha": "ac276a889824e8ddeb9d1b83768ebc6abab1e8a2", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Check that incorrect higher ranked subtyping\n // causes an error.\n struct Inv<'a>(fn(&'a ()) -> &'a ());\n@@ -12,12 +16,12 @@ fn hr_subtype<'c>(f: for<'a, 'b> fn(Inv<'a>, Inv<'a>)) {\n \n fn simple1<'c>(x: (&'c i32,)) {\n     let _x: (&'static i32,) = x;\n-    //~^ ERROR mismatched types\n+    //[base]~^ ERROR mismatched types\n }\n \n fn simple2<'c>(x: (&'c i32,)) {\n     let _: (&'static i32,) = x;\n-    //~^ ERROR mismatched types\n+    //[base]~^ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "e55e56f916bad2a549b4f73efab9eff7a8c615ac", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:31:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr"}, {"sha": "61b549b9cd7612dfd312a355fea4cee2df71322c", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:31:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL | fn b() { want_foo2::<SomeStruct>(); }\n    = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:31:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "11285d0757530e174e9fd21e9da0d1bae030297c", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test that an impl with only one bound region `'a` cannot be used to\n // satisfy a constraint where there are two bound regions.\n \n@@ -24,6 +28,9 @@ impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n }\n \n fn a() { want_foo1::<SomeStruct>(); } // OK -- foo wants just one region\n-fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n+fn b() { want_foo2::<SomeStruct>(); }\n+//[base]~^ ERROR\n+//[nll]~^^ ERROR implementation of\n+//[nll]~| ERROR implementation of\n \n fn main() { }"}, {"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed72a6fbf254e7d44942eaa121fcbed05d3fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr?ref=b2eed72a6fbf254e7d44942eaa121fcbed05d3fb", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-exists-forall-fn.rs:17:34\n-   |\n-LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |                                  ^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'b> fn(&'b u32)`\n-              found fn pointer `fn(&u32)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "006b6756b1eb5b1a4b9357f4c5eabae52e0451ca", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:38:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr"}, {"sha": "23b5072826418aaa509ac7ab46f439b898e258f0", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:38:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^^^ implementation of `Trait` is not general enough"}, {"sha": "4b33dcb2cab4cfc29d066e3249c7bc27ccb2427a", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test a case where variance and higher-ranked types interact in surprising ways.\n //\n // In particular, we test this pattern in trait solving, where it is not connected"}, {"sha": "05575b01834b78335a5359b69ef77738660d0f7e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:32:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr"}, {"sha": "58d59f60379f73aaf6a6ebcdec1e07ebef00690a", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:32:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^^^ implementation of `Trait` is not general enough"}, {"sha": "c779bc3f46c333968999662475b12bff7f9d7b23", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test an `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n //\n // In particular, we test this pattern in trait solving, where it is not connected"}, {"sha": "6e20b100664670d1757e8099457b9b85a1906f97", "filename": "src/test/ui/hrtb/hrtb-just-for-static.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:28:5\n    |\n LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     want_hrtb::<StaticInt>()\n    = note: ...but it actually implements `Foo<&'static isize>`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:34:5\n    |\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr"}, {"sha": "090bd9f68ad1bcbbe8fc1325d116d907dcde1439", "filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:28:5\n    |\n LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,15 +8,15 @@ LL |     want_hrtb::<StaticInt>()\n    = note: ...but it actually implements `Foo<&'static isize>`\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:34:5\n    |\n LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:34:5\n    |\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "dc70609c1684130bd78ec45f49f5c0c80ce57fee", "filename": "src/test/ui/hrtb/hrtb-just-for-static.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test a case where you have an impl of `Foo<X>` for all `X` that\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n@@ -27,7 +31,10 @@ fn give_static() {\n // AnyInt implements Foo<&'a isize> for any 'a, so it is a match.\n impl<'a> Foo<&'a isize> for &'a u32 { }\n fn give_some<'a>() {\n-    want_hrtb::<&'a u32>() //~ ERROR\n+    want_hrtb::<&'a u32>()\n+    //[base]~^ ERROR\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR implementation of `Foo` is not general enough\n }\n \n fn main() { }"}, {"sha": "678a1137cd678930cb5e82daa513a8214bb32251", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n@@ -8,7 +8,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = note: ...but it actually implements `Bar<&'b isize>`\n \n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr"}, {"sha": "3643ce62d40b74068afc42010301b4d767dedacc", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:16:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:20:1\n    |\n LL | / fn no_hrtb<'b, T>(mut t: T)\n LL | | where\n@@ -15,7 +15,7 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:25:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:29:1\n    |\n LL | / fn bar_hrtb<T>(mut t: T)\n LL | | where\n@@ -30,7 +30,7 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:35:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n    |\n LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n LL | | where\n@@ -39,15 +39,15 @@ LL | | {\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n    |                     -- lifetime `'b` defined here\n@@ -56,7 +56,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n@@ -65,7 +65,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:48:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:53:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n LL | | where"}, {"sha": "2db9f661cf41c52d29bc2d8f1bac75f5a1af808c", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test a case where you have an impl of `Foo<X>` for all `X` that\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n@@ -13,7 +17,7 @@ impl<'a, X, F> Foo<X> for &'a mut F where F: Foo<X> + Bar<X> {}\n \n impl<'a, X, F> Bar<X> for &'a mut F where F: Bar<X> {}\n \n-fn no_hrtb<'b, T>(mut t: T)\n+fn no_hrtb<'b, T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: Bar<&'b isize>,\n {\n@@ -22,7 +26,7 @@ where\n     no_hrtb(&mut t);\n }\n \n-fn bar_hrtb<T>(mut t: T)\n+fn bar_hrtb<T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: for<'b> Bar<&'b isize>,\n {\n@@ -32,7 +36,7 @@ where\n     bar_hrtb(&mut t);\n }\n \n-fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+fn foo_hrtb_bar_not<'b, T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n {\n@@ -42,10 +46,11 @@ where\n     // clause only specifies `T : Bar<&'b isize>`.\n     foo_hrtb_bar_not(&mut t);\n     //~^ ERROR implementation of `Bar` is not general enough\n-    //~| ERROR implementation of `Bar` is not general enough\n+    //[base]~^^ ERROR implementation of `Bar` is not general enough\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n }\n \n-fn foo_hrtb_bar_hrtb<T>(mut t: T)\n+fn foo_hrtb_bar_hrtb<T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n {"}, {"sha": "dba3911d99c17769ff4c588853bb7856ca3a73dd", "filename": "src/test/ui/hrtb/issue-30786.base.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:127:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:122:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,13 +8,13 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n@@ -23,8 +23,8 @@ help: one of the expressions' fields has a method of the same name\n LL |     let filter = map.stream.filterx(|x: &_| true);\n    |                      +++++++\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:140:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:134:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -33,13 +33,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here", "previous_filename": "src/test/ui/hrtb/issue-30786.migrate.stderr"}, {"sha": "dba3911d99c17769ff4c588853bb7856ca3a73dd", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:127:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:122:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,13 +8,13 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n@@ -23,8 +23,8 @@ help: one of the expressions' fields has a method of the same name\n LL |     let filter = map.stream.filterx(|x: &_| true);\n    |                      +++++++\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:140:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:134:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -33,13 +33,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here"}, {"sha": "c2e019098706ed91d1ee6b09f922007764fabe99", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // rust-lang/rust#30786: the use of `for<'b> &'b mut A: Stream<Item=T`\n // should act as assertion that item does not borrow from its stream;\n // but an earlier buggy rustc allowed `.map(|x: &_| x)` which does\n@@ -6,15 +10,6 @@\n // This tests double-checks that we do not allow such behavior to leak\n // through again.\n \n-// revisions: migrate nll\n-//[nll]compile-flags: -Z borrowck=mir\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n-\n pub trait Stream {\n     type Item;\n     fn next(self) -> Option<Self::Item>;\n@@ -125,8 +120,7 @@ fn variant1() {\n     // guess.\n     let map = source.mapx(|x: &_| x);\n     let filter = map.filterx(|x: &_| true);\n-    //[migrate]~^ ERROR the method\n-    //[nll]~^^ ERROR the method\n+    //~^ ERROR the method\n }\n \n fn variant2() {\n@@ -138,8 +132,7 @@ fn variant2() {\n     let map = source.mapx(identity);\n     let filter = map.filterx(|x: &_| true);\n     let count = filter.countx();\n-    //[migrate]~^ ERROR the method\n-    //[nll]~^^ ERROR the method\n+    //~^ ERROR the method\n }\n \n fn main() {}"}, {"sha": "d1f6fed10fdde9977c7280ebed7b2e1060c07098", "filename": "src/test/ui/hrtb/issue-46989.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:38:5\n+  --> $DIR/issue-46989.rs:42:5\n    |\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/issue-46989.stderr"}, {"sha": "e1ddd7235f57d3c6b502c1a27faba76c16a4e053", "filename": "src/test/ui/hrtb/issue-46989.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:38:5\n+  --> $DIR/issue-46989.rs:42:5\n    |\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "0bb6d7a18eb75e89a01f99d6286748e3beb65230", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Regression test for #46989:\n //\n // In the move to universes, this test started passing."}, {"sha": "a01560e70e311cae445050e5bb32a60adc28188e", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,13 @@\n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/dyn-trait.rs:20:16\n+  --> $DIR/dyn-trait.rs:24:16\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                                 ------------------- this data with lifetime `'a`...\n LL |     static_val(x);\n    |                ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/dyn-trait.rs:20:5\n+  --> $DIR/dyn-trait.rs:24:5\n    |\n LL |     static_val(x);\n    |     ^^^^^^^^^^", "previous_filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr"}, {"sha": "762698c4fc141b7753a41ff12635ba51b42b5409", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/dyn-trait.rs:20:5\n+  --> $DIR/dyn-trait.rs:24:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                          --  - `x` is a reference that is only valid in the function body"}, {"sha": "a103034a53765c2ad52eef8f53a1225b29c036d9", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n // 'b> MyTrait<'a> for &'b i32`.\n \n@@ -17,7 +21,9 @@ fn static_val<T: StaticTrait>(_: T) {\n }\n \n fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-    static_val(x); //~ ERROR E0759\n+    static_val(x);\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR borrowed data escapes outside of function\n }\n \n fn not_static_val<T: NotStaticTrait>(_: T) {"}, {"sha": "5251eeee8bb26e5f212e94e2653b8d5697b233b1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n // check-pass\n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}"}, {"sha": "45cc935b7ccd1e81cb6bc28b873a7beb47035832", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.base.stderr", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----                 ^\n@@ -12,7 +12,7 @@ LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n+  --> $DIR/must_outlive_least_region_or_bound.rs:10:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                             ^\n@@ -25,15 +25,15 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----                           ^ ...is used here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |                        ^^^^^^^^^^^^^^^^^^^\n@@ -47,15 +47,15 @@ LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------                           ^ ...is used here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:33\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:33\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                                 ^^^^^^^^^^^^^^^^^^^\n@@ -69,15 +69,15 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:21:24\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n+  --> $DIR/must_outlive_least_region_or_bound.rs:36:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               ---- this data with an anonymous lifetime `'_`... ^ ...is used and required to live as long as `'static` here\n@@ -92,13 +92,13 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ------- this data with lifetime `'a`...        ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:34\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:34\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,10 +112,10 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ~~~~~~~~~~~~\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:50:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:34:5: 34:31]` captures the lifetime `'b` as defined here\n+   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:50:5: 50:31]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -125,7 +125,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:38:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:54:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n@@ -136,15 +136,15 @@ LL | fn ty_param_wont_outlive_static<T:Debug + 'static>(x: T) -> impl Debug + 's\n    |                                         +++++++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               ----                               ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:28\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:28\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |                            ^^^^^^^^^    ----------- because of this returned expression\n@@ -156,15 +156,15 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:59\n+  --> $DIR/must_outlive_least_region_or_bound.rs:27:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     -------                               ^ ...is used and required to live as long as `'static` here\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:37\n+  --> $DIR/must_outlive_least_region_or_bound.rs:27:37\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                                     ^^^^^^^^^    ----------- because of this returned expression\n@@ -176,15 +176,15 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:20:60\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ----                                         ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:20:40\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:40\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                                        ^^^^^^^    ----------- because of this returned expression\n@@ -200,13 +200,13 @@ LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:49\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:49\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                                                 ^^^^^^^    ----------- because of this returned expression", "previous_filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr"}, {"sha": "0252e546fb0f2b42a7dfe3f62de82002af6ad9be", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----                 ^\n@@ -12,7 +12,7 @@ LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n+  --> $DIR/must_outlive_least_region_or_bound.rs:10:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                             ^\n@@ -25,7 +25,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               -                              ^ returning this value requires that `'1` must outlive `'static`\n@@ -42,7 +42,7 @@ LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ~~~~~~~~~~~~\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n@@ -57,15 +57,15 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:21:41\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----                      ^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:36:55\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               -                                       ^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n@@ -82,7 +82,7 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n@@ -97,10 +97,10 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ~~~~~~~~~~~~\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:50:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:34:5: 34:31]` captures the lifetime `'b` as defined here\n+   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:50:5: 50:31]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -110,7 +110,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:40:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:56:5\n    |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds"}, {"sha": "6bb3141b0125ab299f6a7bb7cfe385ece082b81e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n@@ -6,27 +10,39 @@ fn elided(x: &i32) -> impl Copy { x }\n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR: captures lifetime that does not appear in bounds\n \n-fn elided2(x: &i32) -> impl Copy + 'static { x } //~ ERROR E0759\n+fn elided2(x: &i32) -> impl Copy + 'static { x }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n-fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x } //~ ERROR E0759\n+fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n //~^ ERROR explicit lifetime required in the type of `x`\n \n-fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) } //~ ERROR E0759\n+fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) } //~ ERROR E0759\n+fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n+fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n+fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) } //~ ERROR E0759\n+fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n \n-fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x } //~ ERROR E0759\n+fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n // Tests that a closure type containing 'b cannot be returned from a type where\n // only 'a was expected.\n@@ -36,8 +52,9 @@ fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n }\n \n fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //[base]~^ ERROR the parameter type `T` may not live long enough\n     x\n+    //[nll]~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "cfa1d93d57143f78d4f4e78afaae52db18ccc562", "filename": "src/test/ui/impl-trait/type_parameters_captured.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:7:20\n+  --> $DIR/type_parameters_captured.rs:11:20\n    |\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n    |                    ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds", "previous_filename": "src/test/ui/impl-trait/type_parameters_captured.stderr"}, {"sha": "a07ba564490a9fde8b8ee724e9da08a6b68fa8ca", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:9:5\n+  --> $DIR/type_parameters_captured.rs:13:5\n    |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds"}, {"sha": "0618beeef976361cd22d9a95013f4ac35deb4482", "filename": "src/test/ui/impl-trait/type_parameters_captured.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,12 +1,17 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n use std::fmt::Debug;\n \n trait Any {}\n impl<T> Any for T {}\n \n // Check that type parameters are captured and not considered 'static\n fn foo<T>(x: T) -> impl Any + 'static {\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //[base]~^ ERROR the parameter type `T` may not live long enough\n     x\n+    //[nll]~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "cad22b2f3ea6e231a8ad7467f902f863bda263c2", "filename": "src/test/ui/issues/issue-10291.base.stderr", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-10291.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-10291.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,19 +1,21 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-10291.rs:3:9\n+  --> $DIR/issue-10291.rs:7:9\n    |\n LL |         x\n    |         ^\n    |\n note: ...the reference is valid for the anonymous lifetime #1 defined here...\n-  --> $DIR/issue-10291.rs:2:69\n+  --> $DIR/issue-10291.rs:6:69\n    |\n LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n    |  _____________________________________________________________________^\n LL | |         x\n+LL | |\n+LL | |\n LL | |     }));\n    | |_____^\n note: ...but the borrowed content is only valid for the lifetime `'x` as defined here\n-  --> $DIR/issue-10291.rs:1:9\n+  --> $DIR/issue-10291.rs:5:9\n    |\n LL | fn test<'x>(x: &'x isize) {\n    |         ^^", "previous_filename": "src/test/ui/issues/issue-10291.stderr"}, {"sha": "47c4d4945f3ed92be4d4229aa9fa4f6898f384ad", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-10291.rs:3:9\n+  --> $DIR/issue-10291.rs:7:9\n    |\n LL | fn test<'x>(x: &'x isize) {\n    |         -- lifetime `'x` defined here"}, {"sha": "8ee3ce44d3d9e78cae3ac1a543afdfb9c6a5ae17", "filename": "src/test/ui/issues/issue-10291.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,6 +1,12 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn test<'x>(x: &'x isize) {\n     drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-        x //~ ERROR E0312\n+        x\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }));\n }\n "}, {"sha": "2b9fff3f981055bda674e36614a05379a29cd9ec", "filename": "src/test/ui/issues/issue-13058.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-13058.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-13058.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `cont`\n-  --> $DIR/issue-13058.rs:14:26\n+  --> $DIR/issue-13058.rs:18:26\n    |\n LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n    |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`", "previous_filename": "src/test/ui/issues/issue-13058.stderr"}, {"sha": "ddefa8a62c98d7d2396b0930ec82778ce8d5047a", "filename": "src/test/ui/issues/issue-13058.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `cont`\n-  --> $DIR/issue-13058.rs:14:21\n+  --> $DIR/issue-13058.rs:18:21\n    |\n LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n    |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`"}, {"sha": "cbd52a802e8de75274234e72e7b24effc1603b9a", "filename": "src/test/ui/issues/issue-13058.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::ops::Range;\n \n trait Itble<'r, T, I: Iterator<Item=T>> { fn iter(&'r self) -> I; }"}, {"sha": "293692c1ddc6242a04a3bf0282476bf8eac4ef69", "filename": "src/test/ui/issues/issue-15034.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-15034.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-15034.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:17:25\n+  --> $DIR/issue-15034.rs:21:25\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n    |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`", "previous_filename": "src/test/ui/issues/issue-15034.stderr"}, {"sha": "54af22fb726ecef49a191521361c3faa5c6d15a2", "filename": "src/test/ui/issues/issue-15034.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:17:9\n+  --> $DIR/issue-15034.rs:21:9\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n    |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`"}, {"sha": "f95275e3a7b80f43ddc3e4d832e8f89b8657bc59", "filename": "src/test/ui/issues/issue-15034.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-15034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-15034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub struct Lexer<'a> {\n     input: &'a str,\n }"}, {"sha": "f684dd04a36cab8bacd8dd6dcd34b4cc61bde374", "filename": "src/test/ui/issues/issue-16683.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/issue-16683.rs:4:14\n+  --> $DIR/issue-16683.rs:8:14\n    |\n LL |         self.a();\n    |              ^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-16683.rs:3:10\n+  --> $DIR/issue-16683.rs:7:10\n    |\n LL |     fn b(&self) {\n    |          ^^^^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-16683.rs:4:9\n+  --> $DIR/issue-16683.rs:8:9\n    |\n LL |         self.a();\n    |         ^^^^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/issue-16683.rs:1:9\n+  --> $DIR/issue-16683.rs:5:9\n    |\n LL | trait T<'a> {\n    |         ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-16683.rs:4:14\n+  --> $DIR/issue-16683.rs:8:14\n    |\n LL |         self.a();\n    |              ^", "previous_filename": "src/test/ui/issues/issue-16683.stderr"}, {"sha": "308d6352602d28455d818afb6ca1b8a9e63132d3", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-16683.rs:4:9\n+  --> $DIR/issue-16683.rs:8:9\n    |\n LL | trait T<'a> {\n    |         -- lifetime `'a` defined here"}, {"sha": "05969bc7b9f13e8e59c3e0638c31192fa2bc3757", "filename": "src/test/ui/issues/issue-16683.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait T<'a> {\n     fn a(&'a self) -> &'a bool;\n     fn b(&self) {\n-        self.a(); //~ ERROR cannot infer\n+        self.a();\n+        //[base]~^ ERROR cannot infer\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "e139de2019d62240465f2ab303a9cc88a399b3aa", "filename": "src/test/ui/issues/issue-16922.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `value` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-16922.rs:4:14\n+  --> $DIR/issue-16922.rs:8:14\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/issues/issue-16922.stderr"}, {"sha": "00a42e6724250211b048f74b04db37c6bd801ed4", "filename": "src/test/ui/issues/issue-16922.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-16922.rs:4:5\n+  --> $DIR/issue-16922.rs:8:5\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       - let's call the lifetime of this reference `'1`"}, {"sha": "1767017eb3db5b3c04ef4a589c69e9c91278480b", "filename": "src/test/ui/issues/issue-16922.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::any::Any;\n \n fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-    Box::new(value) as Box<dyn Any> //~ ERROR E0759\n+    Box::new(value) as Box<dyn Any>\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "b52dc444593abad369369ad7fd9f883f8923c0f9", "filename": "src/test/ui/issues/issue-17728.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-17728.rs:15:28\n+  --> $DIR/issue-17728.rs:19:28\n    |\n LL |     fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&Room, &str> {\n    |                                     -----                         -------------------\n@@ -16,7 +16,7 @@ LL |     fn attemptTraverse<'a>(&'a self, room: &'a Room, directionStr: &str) ->\n    |                       ++++  ++              ++\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/issue-17728.rs:109:14\n+  --> $DIR/issue-17728.rs:113:14\n    |\n LL | /     match to_parse {\n LL | |         \"w\" | \"west\" => RoomDirection::West,", "previous_filename": "src/test/ui/issues/issue-17728.stderr"}, {"sha": "ddfb890eac36e35c061f3133148e4e0eb13ce688", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/issue-17728.rs:109:14\n+  --> $DIR/issue-17728.rs:113:14\n    |\n LL | /     match to_parse {\n LL | |         \"w\" | \"west\" => RoomDirection::West,"}, {"sha": "91b71ad6d0be2c5dce74e5035f2ae5e4a80b0890", "filename": "src/test/ui/issues/issue-17728.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::fmt::{Debug, Formatter, Error};\n use std::collections::HashMap;\n \n@@ -13,7 +17,7 @@ trait TraversesWorld {\n         let maybe_room = room.direction_to_room.get(&direction);\n         match maybe_room {\n             Some(entry) => Ok(entry),\n-            //~^ ERROR lifetime mismatch [E0623]\n+            //[base]~^ ERROR lifetime mismatch [E0623]\n             _ => Err(\"Direction does not exist in room.\")\n         }\n     }"}, {"sha": "202238a49cbf57d45ac11b272e4e6387377ac7c7", "filename": "src/test/ui/issues/issue-17758.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/issue-17758.rs:7:14\n+  --> $DIR/issue-17758.rs:11:14\n    |\n LL |         self.foo();\n    |              ^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-17758.rs:6:12\n+  --> $DIR/issue-17758.rs:10:12\n    |\n LL |     fn bar(&self) {\n    |            ^^^^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-17758.rs:7:9\n+  --> $DIR/issue-17758.rs:11:9\n    |\n LL |         self.foo();\n    |         ^^^^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/issue-17758.rs:4:11\n+  --> $DIR/issue-17758.rs:8:11\n    |\n LL | trait Foo<'a> {\n    |           ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-17758.rs:7:14\n+  --> $DIR/issue-17758.rs:11:14\n    |\n LL |         self.foo();\n    |              ^^^", "previous_filename": "src/test/ui/issues/issue-17758.stderr"}, {"sha": "32030540a84562dfd1ecd01c9e2f8defb92fe20f", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-17758.rs:7:9\n+  --> $DIR/issue-17758.rs:11:9\n    |\n LL | trait Foo<'a> {\n    |           -- lifetime `'a` defined here"}, {"sha": "8090022b6d07454be965bafe4f71a2b09ec18fd0", "filename": "src/test/ui/issues/issue-17758.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test that regionck suggestions in a provided method of a trait\n // don't ICE\n \n trait Foo<'a> {\n     fn foo(&'a self);\n     fn bar(&self) {\n         self.foo();\n-        //~^ ERROR cannot infer\n+        //[base]~^ ERROR cannot infer\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "8b1ef806abb4a0639ff760943b432d260d679dca", "filename": "src/test/ui/issues/issue-26217.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-26217.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-26217.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n-  --> $DIR/issue-26217.rs:4:5\n+  --> $DIR/issue-26217.rs:8:5\n    |\n LL |     foo::<&'a i32>();\n    |     ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/issues/issue-26217.stderr"}, {"sha": "c8b7d6205577d6b5f5d34106b88040a520922bea", "filename": "src/test/ui/issues/issue-26217.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-26217.rs:4:5\n+  --> $DIR/issue-26217.rs:8:5\n    |\n LL | fn bar<'a>() {\n    |        -- lifetime `'a` defined here"}, {"sha": "6cc60b05dc623b549b544a381dea68977b73bdc5", "filename": "src/test/ui/issues/issue-26217.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,8 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo<T>() where for<'a> T: 'a {}\n \n fn bar<'a>() {\n     foo::<&'a i32>();\n-    //~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n+    //[base]~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "a8518dde22e66b15d54e3de857740c305ed2e574", "filename": "src/test/ui/issues/issue-40000.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-40000.rs:6:9\n+  --> $DIR/issue-40000.rs:10:9\n    |\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other", "previous_filename": "src/test/ui/issues/issue-40000.stderr"}, {"sha": "81df9969a4f7988ca84a7884648c682d86811a90", "filename": "src/test/ui/issues/issue-40000.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-40000.rs:6:9\n+  --> $DIR/issue-40000.rs:10:9\n    |\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other\n@@ -8,7 +8,7 @@ LL |     foo(bar);\n               found trait object `dyn Fn(&i32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-40000.rs:6:9\n+  --> $DIR/issue-40000.rs:10:9\n    |\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other"}, {"sha": "3639413bfafc2a8194d4f1ec6043405fb7b9a831", "filename": "src/test/ui/issues/issue-40000.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn main() {\n     let bar: fn(&mut u32) = |_| {};\n \n     fn foo(x: Box<dyn Fn(&i32)>) {}\n     let bar = Box::new(|x: &i32| {}) as Box<dyn Fn(_)>;\n-    foo(bar); //~ ERROR E0308\n+    foo(bar);\n+    //~^ ERROR E0308\n+    //[nll]~^^ ERROR mismatched types\n }"}, {"sha": "97ed4d65093853b0efd552bfd407f49017861a48", "filename": "src/test/ui/issues/issue-46983.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-46983.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-46983.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-46983.rs:2:5\n+  --> $DIR/issue-46983.rs:6:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           ---- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/issues/issue-46983.stderr"}, {"sha": "1327ff80c80125b410d31698497da72cb0df96e7", "filename": "src/test/ui/issues/issue-46983.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-46983.rs:2:5\n+  --> $DIR/issue-46983.rs:6:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           - let's call the lifetime of this reference `'1`"}, {"sha": "e3ecdc8deac45dba6f469fabd552ab50fc1c42a6", "filename": "src/test/ui/issues/issue-46983.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,6 +1,11 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "6556a52de14f2c303a2fbe02feb269042e4ae6e3", "filename": "src/test/ui/issues/issue-52533.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-52533.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-52533.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-52533.rs:5:16\n+  --> $DIR/issue-52533.rs:9:16\n    |\n LL |     foo(|a, b| b)\n    |                ^\n    |\n note: ...the reference is valid for the anonymous lifetime #1 defined here...\n-  --> $DIR/issue-52533.rs:5:9\n+  --> $DIR/issue-52533.rs:9:9\n    |\n LL |     foo(|a, b| b)\n    |         ^^^^^^^^\n note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined here\n-  --> $DIR/issue-52533.rs:5:9\n+  --> $DIR/issue-52533.rs:9:9\n    |\n LL |     foo(|a, b| b)\n    |         ^^^^^^^^", "previous_filename": "src/test/ui/issues/issue-52533.stderr"}, {"sha": "75fe5a5b862bb4bfb86796d7c38a72a928bad274", "filename": "src/test/ui/issues/issue-52533.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52533.rs:5:16\n+  --> $DIR/issue-52533.rs:9:16\n    |\n LL |     foo(|a, b| b)\n    |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`"}, {"sha": "bc6264d0e2fc9a247e3355991c30c9c26488a23b", "filename": "src/test/ui/issues/issue-52533.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-52533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-52533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,12 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(_: impl for<'a> FnOnce(&'a u32, &u32) -> &'a u32) {\n }\n \n fn main() {\n     foo(|a, b| b)\n-    //~^ ERROR lifetime of reference outlives lifetime of borrowed content...\n+    //[base]~^ ERROR lifetime of reference outlives lifetime of borrowed content...\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }"}, {"sha": "db91edf51e33751c696cad40b9583a0ab82f4208", "filename": "src/test/ui/issues/issue-54302-cases.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:63:5\n+  --> $DIR/issue-54302-cases.rs:67:5\n    |\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:69:5\n+  --> $DIR/issue-54302-cases.rs:73:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -17,7 +17,7 @@ LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:75:5\n+  --> $DIR/issue-54302-cases.rs:79:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -26,7 +26,7 @@ LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:81:5\n+  --> $DIR/issue-54302-cases.rs:85:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/issues/issue-54302-cases.stderr"}, {"sha": "89725d3b03ac2f43410583995c484235326143d4", "filename": "src/test/ui/issues/issue-54302-cases.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:63:5\n+  --> $DIR/issue-54302-cases.rs:67:5\n    |\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:69:5\n+  --> $DIR/issue-54302-cases.rs:73:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -17,7 +17,7 @@ LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:75:5\n+  --> $DIR/issue-54302-cases.rs:79:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -26,7 +26,7 @@ LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:81:5\n+  --> $DIR/issue-54302-cases.rs:85:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "f712d9b7718c5c0a87dfd3fcbe9e296542dabc0c", "filename": "src/test/ui/issues/issue-54302-cases.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Mirror {\n     type Image;\n     fn coerce(self) -> Self::Image;"}, {"sha": "ebd679996d05299ff85565ff6cd4052c97e7ec17", "filename": "src/test/ui/issues/issue-54943.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54943.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54943.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `&'a u32` does not fulfill the required lifetime\n-  --> $DIR/issue-54943.rs:6:13\n+  --> $DIR/issue-54943.rs:10:13\n    |\n LL |     let x = foo::<&'a u32>();\n    |             ^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/issue-54943.rs:1:11\n+  --> $DIR/issue-54943.rs:5:11\n    |\n LL | fn foo<T: 'static>() { }\n    |           ^^^^^^^", "previous_filename": "src/test/ui/issues/issue-54943.stderr"}, {"sha": "2c86a5a3390cd5e8da8b2991cc4b209547d1120b", "filename": "src/test/ui/issues/issue-54943.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-54943.rs:6:13\n+  --> $DIR/issue-54943.rs:10:13\n    |\n LL | fn boo<'a>() {\n    |        -- lifetime `'a` defined here"}, {"sha": "ad463e7a466f24b8432bd359911eab79638d3f91", "filename": "src/test/ui/issues/issue-54943.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo<T: 'static>() { }\n \n fn boo<'a>() {"}, {"sha": "26b1c9ec4689a3f5aeaa1a13b9d9838e5c7c5a49", "filename": "src/test/ui/issues/issue-55731.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55731.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55731.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `DistributedIteratorMulti` is not general enough\n-  --> $DIR/issue-55731.rs:48:5\n+  --> $DIR/issue-55731.rs:52:5\n    |\n LL |     multi(Map {\n    |     ^^^^^ implementation of `DistributedIteratorMulti` is not general enough", "previous_filename": "src/test/ui/issues/issue-55731.stderr"}, {"sha": "168a2cbccd7cb37c4065b21f1ab14b4025fb1435", "filename": "src/test/ui/issues/issue-55731.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `DistributedIteratorMulti` is not general enough\n-  --> $DIR/issue-55731.rs:48:5\n+  --> $DIR/issue-55731.rs:52:5\n    |\n LL | /     multi(Map {\n LL | |         i: Cloned(PhantomData),"}, {"sha": "c6a0ee12589dfc981b5a5c4a28f6b62374ae2bca", "filename": "src/test/ui/issues/issue-55731.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::marker::PhantomData;\n \n trait DistributedIterator {"}, {"sha": "a4c5d68472dedc38181b01d6b860eac898850707", "filename": "src/test/ui/issues/issue-55796.base.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55796.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55796.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,47 +1,47 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:20:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:5:17\n+  --> $DIR/issue-55796.rs:9:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:16:40: 16:54]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:16:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:20:40: 20:54]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:20:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:20:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n               found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:26:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:5:17\n+  --> $DIR/issue-55796.rs:9:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:21:39: 21:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:21:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:26:39: 26:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:26:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:26:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/issues/issue-55796.stderr"}, {"sha": "2b7d231871a04be19d1f6c08db6b0af31b30bc6f", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:20:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:26:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here"}, {"sha": "a0bc63dd2a7313f3bb4a919a3d653082270fc3f6", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub trait EdgeTrait<N> {\n     fn target(&self) -> N;\n }\n@@ -14,12 +18,14 @@ pub trait Graph<'a> {\n \n     fn out_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.out_edges(u).map(|e| e.target()))\n-        //~^ ERROR cannot infer\n+        //[base]~^ ERROR cannot infer\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn in_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.in_edges(u).map(|e| e.target()))\n-        //~^ ERROR cannot infer\n+        //[base]~^ ERROR cannot infer\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "d2c6738cb590f0ced16e8234a9837cea66fe17af", "filename": "src/test/ui/issues/issue-75777.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-75777.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-75777.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,24 +1,24 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-75777.rs:11:14\n+  --> $DIR/issue-75777.rs:15:14\n    |\n LL |     Box::new(move |_| fut)\n    |              ^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-75777.rs:9:11\n+  --> $DIR/issue-75777.rs:13:11\n    |\n LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n    |           ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-75777.rs:11:14\n+  --> $DIR/issue-75777.rs:15:14\n    |\n LL |     Box::new(move |_| fut)\n    |              ^^^^^^^^^^^^\n    = note: expected `(Pin<Box<dyn Future<Output = A> + Send>>,)`\n               found `(Pin<Box<(dyn Future<Output = A> + Send + 'a)>>,)`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-75777.rs:11:5\n+  --> $DIR/issue-75777.rs:15:5\n    |\n LL |     Box::new(move |_| fut)\n    |     ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/issues/issue-75777.stderr"}, {"sha": "d1f8d3886763d39a0bc5d496076eeafe141c8193", "filename": "src/test/ui/issues/issue-75777.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-75777.rs:11:5\n+  --> $DIR/issue-75777.rs:15:5\n    |\n LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n    |           -- lifetime `'a` defined here"}, {"sha": "930cd7ad37ba248dd4efc4f4167dc039d7c53f91", "filename": "src/test/ui/issues/issue-75777.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Regression test for #75777.\n // Checks that a boxed future can be properly constructed.\n \n@@ -9,7 +13,8 @@ type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + 'a + Send>>;\n fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n     let fut: BoxFuture<'a, A> = Box::pin(future::ready(v));\n     Box::new(move |_| fut)\n-    //~^ ERROR: cannot infer an appropriate lifetime\n+    //[base]~^ ERROR: cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR: lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "2fa8993b71afec16baded1aec6c6b1a06363d216", "filename": "src/test/ui/kindck/kindck-impl-type-params.base.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -16,13 +16,13 @@ LL | fn f<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -33,13 +33,13 @@ LL | fn f<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -50,13 +50,13 @@ LL | fn g<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -67,36 +67,36 @@ LL | fn g<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/kindck-impl-type-params.rs:32:13\n+  --> $DIR/kindck-impl-type-params.rs:34:13\n    |\n LL |     let a = &t as &dyn Gettable<&'a isize>;\n    |             ^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:38:13\n+  --> $DIR/kindck-impl-type-params.rs:40:13\n    |\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:46:37\n+  --> $DIR/kindck-impl-type-params.rs:48:37\n    |\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^", "previous_filename": "src/test/ui/kindck/kindck-impl-type-params.stderr"}, {"sha": "c6f5e17fb6971df3d02987d2ae9daa6ec5354c49", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -16,13 +16,13 @@ LL | fn f<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -33,13 +33,13 @@ LL | fn f<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -50,13 +50,13 @@ LL | fn g<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -67,28 +67,28 @@ LL | fn g<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:38:13\n+  --> $DIR/kindck-impl-type-params.rs:40:13\n    |\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:46:37\n+  --> $DIR/kindck-impl-type-params.rs:48:37\n    |\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^"}, {"sha": "1a56387258579c78611aab4281672b6f8de7c9c9", "filename": "src/test/ui/kindck/kindck-impl-type-params.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,8 +1,10 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Issue #14061: tests the interaction between generic implementation\n // parameter bounds and trait objects.\n \n-\n-\n use std::marker;\n \n struct S<T>(marker::PhantomData<T>);\n@@ -30,7 +32,7 @@ fn g<T>(val: T) {\n fn foo<'a>() {\n     let t: S<&'a isize> = S(marker::PhantomData);\n     let a = &t as &dyn Gettable<&'a isize>;\n-    //~^ ERROR does not fulfill\n+    //[base]~^ ERROR does not fulfill\n }\n \n fn foo2<'a>() {"}, {"sha": "5976c7119c7e6f31dbe7f77b6958924e91206cc3", "filename": "src/test/ui/kindck/kindck-send-object1.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,31 +1,31 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:10:5\n+  --> $DIR/kindck-send-object1.rs:14:5\n    |\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0477]: the type `&'a (dyn Dummy + Sync + 'a)` does not fulfill the required lifetime\n-  --> $DIR/kindck-send-object1.rs:14:5\n+  --> $DIR/kindck-send-object1.rs:18:5\n    |\n LL |     assert_send::<&'a (dyn Dummy + Sync)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/kindck-send-object1.rs:5:23\n+  --> $DIR/kindck-send-object1.rs:9:23\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                       ^^^^^^^\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:29:5\n+  --> $DIR/kindck-send-object1.rs:33:5\n    |\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n@@ -34,7 +34,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`", "previous_filename": "src/test/ui/kindck/kindck-send-object1.stderr"}, {"sha": "f34374dcc542dca0f37d8fb30ac2f1fd5fc1781b", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:10:5\n+  --> $DIR/kindck-send-object1.rs:14:5\n    |\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:29:5\n+  --> $DIR/kindck-send-object1.rs:33:5\n    |\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n@@ -22,7 +22,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`"}, {"sha": "26894dc2ce4a624deb96ef68aa460f498280538e", "filename": "src/test/ui/kindck/kindck-send-object1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test which object types are considered sendable. This test\n // is broken into two parts because some errors occur in distinct\n // phases in the compiler. See kindck-send-object2.rs as well!\n@@ -12,7 +16,7 @@ fn test51<'a>() {\n }\n fn test52<'a>() {\n     assert_send::<&'a (dyn Dummy + Sync)>();\n-    //~^ ERROR does not fulfill the required lifetime\n+    //[base]~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded"}, {"sha": "95591412f7eab7df8512b48aa61ef007b710586d", "filename": "src/test/ui/lifetimes/issue-79187-2.base.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,56 +1,56 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:8:5\n+  --> $DIR/issue-79187-2.rs:12:5\n    |\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(&'r i32,)>`\n               found type `Fn<(&i32,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:8:14\n+  --> $DIR/issue-79187-2.rs:12:14\n    |\n LL |     take_foo(|a| a);\n    |              ^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:9:5\n+  --> $DIR/issue-79187-2.rs:16:5\n    |\n LL |     take_foo(|a: &i32| a);\n    |     ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:9:14\n+  --> $DIR/issue-79187-2.rs:16:14\n    |\n LL |     take_foo(|a: &i32| a);\n    |              ^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:10:5\n+  --> $DIR/issue-79187-2.rs:20:5\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |     ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:10:14\n+  --> $DIR/issue-79187-2.rs:20:14\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^", "previous_filename": "src/test/ui/lifetimes/issue-79187-2.stderr"}, {"sha": "3cbce7600f9563ea12ad06fc35078df1c746c866", "filename": "src/test/ui/lifetimes/issue-79187-2.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-79187-2.rs:9:24\n+  --> $DIR/issue-79187-2.rs:16:24\n    |\n LL |     take_foo(|a: &i32| a);\n    |                  -   - ^ returning this value requires that `'1` must outlive `'2`\n@@ -8,7 +8,7 @@ LL |     take_foo(|a: &i32| a);\n    |                  let's call the lifetime of this reference `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-79187-2.rs:10:34\n+  --> $DIR/issue-79187-2.rs:20:34\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |                  -        -      ^ returning this value requires that `'1` must outlive `'2`\n@@ -17,7 +17,7 @@ LL |     take_foo(|a: &i32| -> &i32 { a });\n    |                  let's call the lifetime of this reference `'1`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-79187-2.rs:8:5\n+  --> $DIR/issue-79187-2.rs:12:5\n    |\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n@@ -26,48 +26,48 @@ LL |     take_foo(|a| a);\n    = note: ...but it actually implements `FnOnce<(&'2 i32,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:8:5\n+  --> $DIR/issue-79187-2.rs:12:5\n    |\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r i32,)>`\n               found type `Fn<(&i32,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:8:14\n+  --> $DIR/issue-79187-2.rs:12:14\n    |\n LL |     take_foo(|a| a);\n    |              ^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:9:5\n+  --> $DIR/issue-79187-2.rs:16:5\n    |\n LL |     take_foo(|a: &i32| a);\n    |     ^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:10:5\n+  --> $DIR/issue-79187-2.rs:20:5\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^"}, {"sha": "d122b92f74b236acd0cf2e3b2bfd9ae0884062af", "filename": "src/test/ui/lifetimes/issue-79187-2.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,13 +1,26 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {}\n \n impl<F> Foo for F where F: Fn(&i32) -> &i32 {}\n \n fn take_foo(_: impl Foo) {}\n \n fn main() {\n-    take_foo(|a| a); //~ ERROR mismatched types\n-    take_foo(|a: &i32| a); //~ ERROR mismatched types\n-    take_foo(|a: &i32| -> &i32 { a }); //~ ERROR mismatched types\n+    take_foo(|a| a);\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR mismatched types\n+    take_foo(|a: &i32| a);\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR mismatched types\n+    take_foo(|a: &i32| -> &i32 { a });\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR mismatched types\n \n     // OK\n     take_foo(identity(|a| a));"}, {"sha": "c4654ca1517ed0d27b63860e519e4c790fa850f5", "filename": "src/test/ui/lifetimes/issue-79187.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-79187.rs:5:5\n+  --> $DIR/issue-79187.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/lifetimes/issue-79187.stderr"}, {"sha": "54dce9b4bacf067bb97ce47c5ef1a13820d47479", "filename": "src/test/ui/lifetimes/issue-79187.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,24 +1,24 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-79187.rs:5:5\n+  --> $DIR/issue-79187.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> FnOnce<(&'r u32,)>`\n               found type `FnOnce<(&u32,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187.rs:4:13\n+  --> $DIR/issue-79187.rs:8:13\n    |\n LL |     let f = |_| ();\n    |             ^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187.rs:1:18\n+  --> $DIR/issue-79187.rs:5:18\n    |\n LL | fn thing(x: impl FnOnce(&u32)) {}\n    |                  ^^^^^^^^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-79187.rs:5:5\n+  --> $DIR/issue-79187.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "b97890d94e97a75721862b9bfbf710c3c606783c", "filename": "src/test/ui/lifetimes/issue-79187.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,6 +1,12 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn thing(x: impl FnOnce(&u32)) {}\n \n fn main() {\n     let f = |_| ();\n-    thing(f); //~ERROR implementation of `FnOnce` is not general enough\n+    thing(f);\n+    //[nll]~^ ERROR mismatched types\n+    //~^^ ERROR implementation of `FnOnce` is not general enough\n }"}, {"sha": "4b417afb038368f26dfcfafe109e3d8f4f42848d", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch-nll.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.fixed?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,15 @@\n+// FIXME(nll): On NLL stabilization, this should be replace\n+// `issue-90170-elision-mismatch.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+// run-rustfix\n+\n+pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+fn main() {}"}, {"sha": "ec50e8e1d9ac5d46fcf27f9b3142db2f2889cf5b", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch-nll.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -0,0 +1,15 @@\n+// FIXME(nll): On NLL stabilization, this should be replace\n+// `issue-90170-elision-mismatch.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+// run-rustfix\n+\n+pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+fn main() {}"}, {"sha": "144fe3bf9dabf4f3e863df08f6e8c6ea1f0978ac", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch-nll.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-90170-elision-mismatch.rs:3:40\n+  --> $DIR/issue-90170-elision-mismatch-nll.rs:9:40\n    |\n LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                        -        -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n@@ -13,7 +13,7 @@ LL | pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |           ++++              ++          ++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-90170-elision-mismatch.rs:5:44\n+  --> $DIR/issue-90170-elision-mismatch-nll.rs:11:44\n    |\n LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n    |                         -           -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n@@ -27,7 +27,7 @@ LL | pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |            ++++              ~~          ++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-90170-elision-mismatch.rs:7:63\n+  --> $DIR/issue-90170-elision-mismatch-nll.rs:13:63\n    |\n LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                                               -        -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`", "previous_filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.nll.stderr"}, {"sha": "f05943284f7c83633092ebbcff15140b9f5b177a", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `issue-90170-elision-mismatch-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n \n pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime mismatch"}, {"sha": "fee2b461ef9aa52442065c4e7b0e9e2e8f68f428", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `issue-90170-elision-mismatch-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n \n pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime mismatch"}, {"sha": "28f3957041c1ec4270717b29426bbabe4a97eb6b", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-90170-elision-mismatch.rs:3:47\n+  --> $DIR/issue-90170-elision-mismatch.rs:8:47\n    |\n LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                        ---      ---           ^ ...but data from `y` flows into `x` here\n@@ -13,7 +13,7 @@ LL | pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |           ++++              ++          ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-90170-elision-mismatch.rs:5:51\n+  --> $DIR/issue-90170-elision-mismatch.rs:10:51\n    |\n LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n    |                         ------      ---           ^ ...but data from `y` flows into `x` here\n@@ -27,7 +27,7 @@ LL | pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |            ++++              ~~          ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-90170-elision-mismatch.rs:7:70\n+  --> $DIR/issue-90170-elision-mismatch.rs:12:70\n    |\n LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                                               ---      ---           ^ ...but data from `y` flows into `x` here"}, {"sha": "b20ce7b07ff327bcf81c761df1e962a2527876ee", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:11:32\n    |\n LL | fn inner(mut foo: &[u8]) {\n    |                   ----- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr"}, {"sha": "b35505ac8c54fa12f3fbef93d42e0cbcf7fd9003", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,17 +1,17 @@\n error[E0597]: `foo` does not live long enough\n-  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:11:32\n    |\n LL |     let refcell = RefCell::new(&mut foo);\n    |                                ^^^^^^^^ borrowed value does not live long enough\n-LL |\n+...\n LL |     let read = &refcell as &RefCell<dyn Read>;\n    |                -------- cast requires that `foo` is borrowed for `'static`\n ...\n LL | }\n    | - `foo` dropped here while still borrowed\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-90600-expected-return-static-indirect.rs:9:16\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:14:16\n    |\n LL | fn inner(mut foo: &[u8]) {\n    |                   - let's call the lifetime of this reference `'1`"}, {"sha": "fa44be9a912ad4797d77086a164c14f71e734d68", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,12 +1,18 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::RefCell;\n use std::io::Read;\n \n fn main() {}\n \n fn inner(mut foo: &[u8]) {\n     let refcell = RefCell::new(&mut foo);\n-    //~^ ERROR `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR `foo` does not live long enough\n     let read = &refcell as &RefCell<dyn Read>;\n+    //[nll]~^ ERROR lifetime may not live long enough\n \n     read_thing(read);\n }"}, {"sha": "54fa49b47f680824d2739565734272f4a6e064a8", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,28 +1,28 @@\n error[E0308]: mismatched types\n-  --> $DIR/lifetime-bound-will-change-warning.rs:34:13\n+  --> $DIR/lifetime-bound-will-change-warning.rs:38:13\n    |\n LL |     ref_obj(x)\n    |             ^ lifetime mismatch\n    |\n    = note: expected reference `&Box<(dyn Fn() + 'static)>`\n               found reference `&Box<(dyn Fn() + 'a)>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/lifetime-bound-will-change-warning.rs:32:10\n+  --> $DIR/lifetime-bound-will-change-warning.rs:36:10\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/lifetime-bound-will-change-warning.rs:39:18\n+  --> $DIR/lifetime-bound-will-change-warning.rs:45:18\n    |\n LL |     lib::ref_obj(x)\n    |                  ^ lifetime mismatch\n    |\n    = note: expected reference `&Box<(dyn Fn() + 'static)>`\n               found reference `&Box<(dyn Fn() + 'a)>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/lifetime-bound-will-change-warning.rs:37:12\n+  --> $DIR/lifetime-bound-will-change-warning.rs:43:12\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |            ^^", "previous_filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.stderr"}, {"sha": "10105c5ccecbb6b50742c200ffa72024a498e988", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n+  --> $DIR/lifetime-bound-will-change-warning.rs:38:5\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |          --  - `x` is a reference that is only valid in the function body\n@@ -13,7 +13,7 @@ LL |     ref_obj(x)\n    |     argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n+  --> $DIR/lifetime-bound-will-change-warning.rs:45:5\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |            --  - `x` is a reference that is only valid in the function body"}, {"sha": "0a082e1bae8bf705143816b4f2c336082188ab7e", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // aux-build:lifetime_bound_will_change_warning_lib.rs\n \n // Test that various corner cases cause an error. These are tests\n@@ -31,12 +35,16 @@ fn test1cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n \n fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // but ref_obj will not, so warn.\n-    ref_obj(x) //~ ERROR mismatched types\n+    ref_obj(x)\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR borrowed data escapes\n }\n \n fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // same as test2, but cross crate\n-    lib::ref_obj(x) //~ ERROR mismatched types\n+    lib::ref_obj(x)\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR borrowed data escapes\n }\n \n fn test3<'a>(x: &'a Box<dyn Fn() + 'static>) {"}, {"sha": "60cd34938750a3a552a6dd3f1296c1705ed862b2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:11:20\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:15:20\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |                   ----                 -------", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr"}, {"sha": "f8e275e9b14c86c41958fe7f9a775cf20b2998da", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:11:20\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:15:20\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            --     - let's call the lifetime of this reference `'1`"}, {"sha": "fbb523daa1f51d8225829e8af5f98e9767c5bd81", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n \n     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n@@ -8,7 +12,9 @@ impl Foo for () {\n \n     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n \n-        if x > y { x } else { y } //~ ERROR lifetime mismatch\n+        if x > y { x } else { y }\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n \n     }\n "}, {"sha": "697950a00fb249daa06883761c8fa08bf36841ec", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:8:5\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:12:5\n    |\n LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |                        -------     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr"}, {"sha": "97af4b58cbf651721753d82a85585c0661e922ad", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:8:5\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:12:5\n    |\n LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          --  - let's call the lifetime of this reference `'1`"}, {"sha": "704db7dc8b4054cd3d48cc1cfa087d8bdfd69d14", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n   field: i32\n }\n \n impl Foo {\n   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n \n-    x //~ ERROR lifetime mismatch\n+    x\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n \n   }\n "}, {"sha": "65644d03cdc1bda37d743f479a41f6f28aa9cc16", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:8:30\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:12:30\n    |\n LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |                -----                 -------", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr"}, {"sha": "00a348de4bc30146fddab3f3b0b190f4c2437e7b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:8:30\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:12:30\n    |\n LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            --  - let's call the lifetime of this reference `'1`"}, {"sha": "a846c115c063844736a1774f968a17fcdf1606ac", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n     field: i32,\n }\n \n impl Foo {\n     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n \n-        if true { x } else { self } //~ ERROR lifetime mismatch\n+        if true { x } else { self }\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n \n     }\n }"}, {"sha": "9203d6603bd7ae2682ac9256af3de1ba2fc51743", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex2a-push-one-existing-name-2.rs:6:12\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:10:12\n    |\n LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n    |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.stderr"}, {"sha": "5ab8b449816cc1e082e88125222a786a8df96bc0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex2a-push-one-existing-name-2.rs:6:5\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:10:5\n    |\n LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n    |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`"}, {"sha": "7e776baa6a91db77aedbd724a1e373f0843ae14e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }"}, {"sha": "ec1ab19d5a43c5ebe77a7c239110d3d6009e6b51", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:8:12\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:12:12\n    |\n LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n    |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.stderr"}, {"sha": "bd5864bae3202564d5a86e5e9159950b24087db9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:8:5\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:12:5\n    |\n LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n    |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`"}, {"sha": "73613a9bf35072a5c2de0def1a073b3bb7506a24", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {}\n impl<'a, T> Foo<'a> for T {}\n "}, {"sha": "ab0e202a32eff7b8b9d72375d8e5ea168616b31e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name.rs:6:12\n+  --> $DIR/ex2a-push-one-existing-name.rs:10:12\n    |\n LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n    |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.stderr"}, {"sha": "01b7f45d81b58b682eccef4c76d7996428f46e4f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name.rs:6:5\n+  --> $DIR/ex2a-push-one-existing-name.rs:10:5\n    |\n LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n    |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`"}, {"sha": "5773e13304c15217293319991935dbc10ebbf586", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }"}, {"sha": "58a2088df5e7715a1c2bd58dc6e65dee9317c8ed", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2b-push-no-existing-names.rs:6:12\n+  --> $DIR/ex2b-push-no-existing-names.rs:10:12\n    |\n LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n    |                    --------      -------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.stderr"}, {"sha": "afe413bcca5cce28c38fdf9446aa83b679d1cb23", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2b-push-no-existing-names.rs:6:5\n+  --> $DIR/ex2b-push-no-existing-names.rs:10:5\n    |\n LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n    |        -                      - has type `Ref<'1, i32>`"}, {"sha": "8d830343b08bef1ab01788f46737922ba2ed3f9c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "63033b8d16e8b027484de673b59cee762e03efd5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2c-push-inference-variable.rs:7:12\n+  --> $DIR/ex2c-push-inference-variable.rs:11:12\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.stderr"}, {"sha": "63a0f2409d9b4af647c649c8e371e51269d3d803", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2c-push-inference-variable.rs:7:5\n+  --> $DIR/ex2c-push-inference-variable.rs:11:5\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |            --  -- lifetime `'c` defined here"}, {"sha": "f676eb403a8aae3d15e12b5761863ef48c7f8e19", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n     let z = Ref { data: y.data };\n-    x.push(z); //~ ERROR lifetime mismatch\n+    x.push(z);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "a50985ca704c7d461a503c753c9114ac39fdd7bf", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2d-push-inference-variable-2.rs:6:33\n+  --> $DIR/ex2d-push-inference-variable-2.rs:10:33\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.stderr"}, {"sha": "0d7461fa68262f9cee4b8f84faa4c6a90422dfa9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2d-push-inference-variable-2.rs:8:5\n+  --> $DIR/ex2d-push-inference-variable-2.rs:13:5\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |            --  -- lifetime `'c` defined here"}, {"sha": "e65638fb0df13e7d32c77eb2b20a683732840500", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-    let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n+    let a: &mut Vec<Ref<i32>> = x;\n+    //[base]~^ ERROR lifetime mismatch\n     let b = Ref { data: y.data };\n     a.push(b);\n+    //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "dbe965a340c40c6dcfd171698dcd97b3104538b1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2e-push-inference-variable-3.rs:6:33\n+  --> $DIR/ex2e-push-inference-variable-3.rs:10:33\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.stderr"}, {"sha": "74b2739b2c3fb3f11571dac8f0792fe68b3c5e5c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2e-push-inference-variable-3.rs:8:5\n+  --> $DIR/ex2e-push-inference-variable-3.rs:13:5\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |            --  -- lifetime `'c` defined here"}, {"sha": "036afe09be6ef2e171ea55e2758b9badde6de5fe", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-    let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n+    let a: &mut Vec<Ref<i32>> = x;\n+    //[base]~^ ERROR lifetime mismatch\n     let b = Ref { data: y.data };\n     Vec::push(a, b);\n+    //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "459f18dcc3d77c6a2978a81884676aaa2814fa35", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-2.rs:2:10\n+  --> $DIR/ex3-both-anon-regions-2.rs:6:10\n    |\n LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   ---           --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.stderr"}, {"sha": "b072c12ea3bcb9e4e4e0b778081d276da6c64f29", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-2.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-2.rs:6:5\n    |\n LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   -             - let's call the lifetime of this reference `'1`"}, {"sha": "668cadd614b59368a83865a00a32d7668beda5bb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,11 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n-    *v = x; //~ ERROR lifetime mismatch\n+    *v = x;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "28df5f18369551f065e62e6029b253096212a329", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:13\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:13\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     ---                 --- these two types are declared with different lifetimes...\n@@ -13,7 +13,7 @@ LL | fn foo<'a>(z: &mut Vec<(&'a u8,&u8)>, (x, y): (&'a u8, &u8)) {\n    |       ++++               ++                     ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:15\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:15\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         ---                  --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.stderr"}, {"sha": "c1d809abad5b96db10001ac7dc561de94c62dc50", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:5\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     -                   - let's call the lifetime of this reference `'1`\n@@ -14,7 +14,7 @@ LL | fn foo<'a>(z: &mut Vec<(&'a u8,&u8)>, (x, y): (&'a u8, &u8)) {\n    |       ++++               ++                     ++\n \n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:5\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         -                    - let's call the lifetime of this reference `'3`"}, {"sha": "4d7fd63e5b9322e291cc025112fd5c002a5b9b55", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,6 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-    z.push((x,y)); //~ ERROR lifetime mismatch\n-    //~^ ERROR lifetime mismatch\n+    z.push((x,y));\n+    //[base]~^ ERROR lifetime mismatch\n+    //[base]~| ERROR lifetime mismatch\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "32263cd56ee7262f18c4c912169041d8c7d84f4b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:7:11\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:11:11\n    |\n LL | fn foo(mut x: Ref, y: Ref) {\n    |               ---     --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.stderr"}, {"sha": "bfde4025194ae3833cd88420930c461918d77f08", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:11:5\n    |\n LL | fn foo(mut x: Ref, y: Ref) {\n    |        -----       - has type `Ref<'_, '1>`"}, {"sha": "30764e2ad17c0cea6fe787a6eb371bf48dc6be33", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> {\n     a: &'a u32,\n     b: &'b u32,\n }\n \n fn foo(mut x: Ref, y: Ref) {\n-    x.b = y.b; //~ ERROR lifetime mismatch\n+    x.b = y.b;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "fb4a2f8f6fe5d331e542b4fcef22d81e47b002a5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:11\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:11:11\n    |\n LL | fn foo(mut x: Ref) {\n    |               --- this type is declared with multiple lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr"}, {"sha": "9ba2c38d6fecea50064ead263ce00372fdff9ca4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:11:5\n    |\n LL | fn foo(mut x: Ref) {\n    |        -----"}, {"sha": "665be2aa2c8d6d3bafda0f4139d89693aa6ade1b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> {\n     a: &'a u32,\n     b: &'b u32,\n }\n \n fn foo(mut x: Ref) {\n-    x.a = x.b; //~ ERROR lifetime mismatch\n+    x.a = x.b;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "66a993e0340445945f98fcd467dae499c66aeea9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:9:12\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:13:12\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n    |                           -------      ------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.stderr"}, {"sha": "ddf878ba9f914a75192370171ff6796362752c6c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:9:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:13:5\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n    |        --  -- lifetime `'b` defined here"}, {"sha": "6e151879f4df13fe9330b9c70843a310c493713e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a> {\n     x: &'a u32,\n }\n@@ -6,7 +10,9 @@ fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n     where &'a (): Sized,\n           &'b u32: Sized\n {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "5453dbb08f181d2460cd1ce557a4d0218af2136c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:6:12\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:10:12\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n    |                           -------      ------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.stderr"}, {"sha": "cfd3186c80982d71516314eace8bb44180c4fab8", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:6:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:10:5\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "ecc04fbc8adc1001f35e8a00a5190fc370762e4f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a> {\n     x: &'a u32,\n }\n \n fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "23e752e4a0e9d5765ff78b7ebc42eca46da51f07", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:6:12\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:10:12\n    |\n LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n    |                   ---      --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.stderr"}, {"sha": "fa906a90ccc6fc35e63b11de94a6b54f09f65078", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:6:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:10:5\n    |\n LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n    |        -----            - has type `Ref<'1>`"}, {"sha": "f002dfc208f111b15db3bf4760f5a1387cc3c22d", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a> {\n     x: &'a u32,\n }\n \n fn foo(mut x: Vec<Ref>, y: Ref) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "b5fbc091ebc51fb026b8ab87cf6d6973ca4c158e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:2:12\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:6:12\n    |\n LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n    |                           ------      ------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.stderr"}, {"sha": "d59bee087489d024752f3643ee06eab9e6919a13", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:6:5\n    |\n LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n    |        -- -- lifetime `'b` defined here"}, {"sha": "f0a81eba4123971ef00edbea253d35d29be04903", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,11 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "3d9138f02c67be6f9e9cd9f874bb6b8d38b38077", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:9\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:8:9\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |               ---     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.stderr"}, {"sha": "cac2a9470a8be6f914b063cf861a1c2073e77c5b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:8:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |        -----          - let's call the lifetime of this reference `'2`\n@@ -9,7 +9,7 @@ LL |     y = x.b;\n    |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error[E0384]: cannot assign to immutable argument `y`\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:8:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |                    - help: consider making this binding mutable: `mut y`"}, {"sha": "31ef28e726d2c7124ba9de5d40e36219a3d3f072", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,14 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut x: Ref, y: &u32) {\n-    y = x.b; //~ ERROR lifetime mismatch\n+    y = x.b;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR cannot assign to immutable argument\n }\n \n fn main() { }"}, {"sha": "77e035562a809ee1a35d01f5019756e6c9d39244", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:4:11\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:8:11\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.stderr"}, {"sha": "ba41cc3e908c524ac3320357445db61b2bcd50b5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:8:5\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |        -----          - let's call the lifetime of this reference `'1`"}, {"sha": "9a5ac0a97694644543e656dd85ac684c6fe204d9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut y: Ref, x: &u32) {\n-    y.b = x; //~ ERROR lifetime mismatch\n+    y.b = x;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "6cbbabb150a645d5976b3204b9dfd9e228766402", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:4:11\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:8:11\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.stderr"}, {"sha": "c9570aa720620b07dddd4c2a39346a9a4adc819b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:8:5\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |        -----          - let's call the lifetime of this reference `'1`"}, {"sha": "9a5ac0a97694644543e656dd85ac684c6fe204d9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut y: Ref, x: &u32) {\n-    y.b = x; //~ ERROR lifetime mismatch\n+    y.b = x;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "7caf19e89357c6991bc8bbc80b9ec0041d6b7e59", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:7:11\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:11:11\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.stderr"}, {"sha": "9b295248fc99e6f446c44f10f63516dc60a308a1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:11:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |        -----          - let's call the lifetime of this reference `'1`"}, {"sha": "0b4ee5adacc074f95d25a16fd5402b419f621d90", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> {\n     a: &'a u32,\n     b: &'b u32,\n }\n \n fn foo(mut x: Ref, y: &u32) {\n-    x.b = y; //~ ERROR lifetime mismatch\n+    x.b = y;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "add05a11193a3757d0f934b0af6b4c7ea2107e8a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:11:5\n    |\n LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |                        ----     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr"}, {"sha": "188ff4d77e025be1590bd19484ca7f354f2c4da5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:11:5\n    |\n LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              -         - let's call the lifetime of this reference `'1`"}, {"sha": "a4f838c0747490a4b0d199d14fff65dfd8add3bf", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n   field: i32\n }\n \n impl Foo {\n   fn foo<'a>(&self, x: &i32) -> &i32 {\n-    x //~ ERROR lifetime mismatch\n+    x\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n   }\n }\n "}, {"sha": "365a0ab3b102767f93902e5662d804d4c406bada", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:7:19\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:11:19\n    |\n LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                          ----     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr"}, {"sha": "ed9b81f7d019947c68cc5ac51e3990d0c8097d09", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:7:19\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:11:19\n    |\n LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                -         - let's call the lifetime of this reference `'1`"}, {"sha": "c5854537a5ff46526599b87a1d6d8960e0b70476", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n     field: i32,\n }\n \n impl Foo {\n     fn foo<'a>(&self, x: &Foo) -> &Foo {\n-        if true { x } else { self } //~ ERROR lifetime mismatch\n+        if true { x } else { self }\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "755e9798170cc602e721ba5c05ef39773c2eb9b9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.base.stderr?ref=07e7b4346c48fe6d5c3026207e2d04c9a9f00fb8", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:10\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:6:10\n    |\n LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                               ---      --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr"}]}