{"sha": "ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMmIxMzExNDRiYzBkM2Q3ODE0Yzk5NjdlNDdhOGQ0ZTgzNGNhYTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-03T16:14:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-03T16:18:02Z"}, "message": "Add docs for `crate_in_paths`, `extern_in_paths` and `extern_absolute_paths` into the unstable book", "tree": {"sha": "e57004184c9a3bc4df28c703058b190dab496fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57004184c9a3bc4df28c703058b190dab496fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "html_url": "https://github.com/rust-lang/rust/commit/ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32db83b16e06cb5cca72d0e6a648a8008eda0fac", "url": "https://api.github.com/repos/rust-lang/rust/commits/32db83b16e06cb5cca72d0e6a648a8008eda0fac", "html_url": "https://github.com/rust-lang/rust/commit/32db83b16e06cb5cca72d0e6a648a8008eda0fac"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "f1656993e87a5f12c159680a43592468b62a56a2", "filename": "src/doc/unstable-book/src/language-features/crate_in_paths.md", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate_in_paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate_in_paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate_in_paths.md?ref=ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "patch": "@@ -0,0 +1,54 @@\n+# `crate_in_paths`\n+\n+The tracking issue for this feature is: [#44660]\n+\n+[#44660]: https://github.com/rust-lang/rust/issues/44660\n+\n+------------------------\n+\n+The `crate_in_paths` feature allows to explicitly refer to the crate root in absolute paths\n+using keyword `crate`.\n+\n+`crate` can be used *only* in absolute paths, i.e. either in `::crate::a::b::c` form or in `use`\n+items where the starting `::` is added implicitly.  \n+Paths like `crate::a::b::c` are not accepted currently.\n+\n+This feature is required in `feature(extern_absolute_paths)` mode to refer to any absolute path\n+in the local crate (absolute paths refer to extern crates by default in that mode), but can be\n+used without `feature(extern_absolute_paths)` as well.\n+\n+```rust\n+#![feature(crate_in_paths)]\n+\n+// Imports, `::` is added implicitly\n+use crate::m::f;\n+use crate as root;\n+\n+mod m {\n+    pub fn f() -> u8 { 1 }\n+    pub fn g() -> u8 { 2 }\n+    pub fn h() -> u8 { 3 }\n+\n+    // OK, visibilities implicitly add starting `::` as well, like imports\n+    pub(in crate::m) struct S;\n+}\n+\n+mod n\n+{\n+    use crate::m::f;\n+    use crate as root;\n+    pub fn check() {\n+        assert_eq!(f(), 1);\n+        // `::` is required in non-import paths\n+        assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(root::m::h(), 3);\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(f(), 1);\n+    assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(root::m::h(), 3);\n+    n::check();\n+}\n+```"}, {"sha": "f45c5053e8dbcd84b7a8a215b2f8439b1c1ba5f5", "filename": "src/doc/unstable-book/src/language-features/extern_absolute_paths.md", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_absolute_paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_absolute_paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_absolute_paths.md?ref=ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "patch": "@@ -0,0 +1,43 @@\n+# `extern_absolute_paths`\n+\n+The tracking issue for this feature is: [#44660]\n+\n+[#44660]: https://github.com/rust-lang/rust/issues/44660\n+\n+------------------------\n+\n+The `extern_absolute_paths` feature enables mode allowing to refer to names from other crates\n+\"inline\", without introducing `extern crate` items, using absolute paths like `::my_crate::a::b`.\n+\n+`::my_crate::a::b` will resolve to path `a::b` in crate `my_crate`.\n+\n+`feature(crate_in_paths)` can be used in `feature(extern_absolute_paths)` mode for referring\n+to absolute paths in the local crate (`::crate::a::b`).\n+\n+`feature(extern_in_paths)` provides the same effect by using keyword `extern` to refer to\n+paths from other crates (`extern::my_crate::a::b`).\n+\n+```rust,ignore\n+#![feature(extern_absolute_paths)]\n+\n+// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n+// options, or standard Rust distribution, or some other means.\n+\n+use xcrate::Z;\n+\n+fn f() {\n+    use xcrate;\n+    use xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = ::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+```"}, {"sha": "3ae6cc29df0b871537102122fdf06448eea5d132", "filename": "src/doc/unstable-book/src/language-features/extern_in_paths.md", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_in_paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b131144bc0d3d7814c9967e47a8d4e834caa5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_in_paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_in_paths.md?ref=ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "patch": "@@ -0,0 +1,40 @@\n+# `extern_in_paths`\n+\n+The tracking issue for this feature is: [#44660]\n+\n+[#44660]: https://github.com/rust-lang/rust/issues/44660\n+\n+------------------------\n+\n+The `extern_in_paths` feature allows to refer to names from other crates \"inline\", without\n+introducing `extern crate` items, using keyword `extern`.\n+\n+For example, `extern::my_crat::a::b` will resolve to path `a::b` in crate `my_crate`.\n+\n+`feature(extern_absolute_paths)` mode provides the same effect by resolving absolute paths like\n+`::my_crate::a::b` to paths from extern crates by default.\n+\n+```rust,ignore\n+#![feature(extern_in_paths)]\n+\n+// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n+// options, or standard Rust distribution, or some other means.\n+\n+use extern::xcrate::Z;\n+\n+fn f() {\n+    use extern::xcrate;\n+    use extern::xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = extern::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+```"}]}