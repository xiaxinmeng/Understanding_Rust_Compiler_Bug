{"sha": "5fa004313bd31a88b3f5f4c4467b4926e24cebac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTAwNDMxM2JkMzFhODhiM2Y1ZjRjNDQ2N2I0OTI2ZTI0Y2ViYWM=", "commit": {"author": {"name": "Elliott Clark", "email": "elliott@fb.com", "date": "2016-10-01T00:01:30Z"}, "committer": {"name": "Elliott Clark", "email": "elliott@fb.com", "date": "2016-10-01T00:42:43Z"}, "message": "Add a lint to warn about un-necessary .into_iter()\n\nThis should close #1094.", "tree": {"sha": "7647a7b94a7d6d74e156e01db17c111e739d050e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7647a7b94a7d6d74e156e01db17c111e739d050e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa004313bd31a88b3f5f4c4467b4926e24cebac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa004313bd31a88b3f5f4c4467b4926e24cebac", "html_url": "https://github.com/rust-lang/rust/commit/5fa004313bd31a88b3f5f4c4467b4926e24cebac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa004313bd31a88b3f5f4c4467b4926e24cebac/comments", "author": {"login": "elliottneilclark", "id": 169547, "node_id": "MDQ6VXNlcjE2OTU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/169547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elliottneilclark", "html_url": "https://github.com/elliottneilclark", "followers_url": "https://api.github.com/users/elliottneilclark/followers", "following_url": "https://api.github.com/users/elliottneilclark/following{/other_user}", "gists_url": "https://api.github.com/users/elliottneilclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/elliottneilclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elliottneilclark/subscriptions", "organizations_url": "https://api.github.com/users/elliottneilclark/orgs", "repos_url": "https://api.github.com/users/elliottneilclark/repos", "events_url": "https://api.github.com/users/elliottneilclark/events{/privacy}", "received_events_url": "https://api.github.com/users/elliottneilclark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elliottneilclark", "id": 169547, "node_id": "MDQ6VXNlcjE2OTU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/169547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elliottneilclark", "html_url": "https://github.com/elliottneilclark", "followers_url": "https://api.github.com/users/elliottneilclark/followers", "following_url": "https://api.github.com/users/elliottneilclark/following{/other_user}", "gists_url": "https://api.github.com/users/elliottneilclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/elliottneilclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elliottneilclark/subscriptions", "organizations_url": "https://api.github.com/users/elliottneilclark/orgs", "repos_url": "https://api.github.com/users/elliottneilclark/repos", "events_url": "https://api.github.com/users/elliottneilclark/events{/privacy}", "received_events_url": "https://api.github.com/users/elliottneilclark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84269478b02c6a4bbfa3844e2edeb4a59d29fd4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84269478b02c6a4bbfa3844e2edeb4a59d29fd4c", "html_url": "https://github.com/rust-lang/rust/commit/84269478b02c6a4bbfa3844e2edeb4a59d29fd4c"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "fad72db74ed4a382d8f6668346aac330b504c600", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5fa004313bd31a88b3f5f4c4467b4926e24cebac/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa004313bd31a88b3f5f4c4467b4926e24cebac/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5fa004313bd31a88b3f5f4c4467b4926e24cebac", "patch": "@@ -58,6 +58,24 @@ declare_lint! {\n     \"for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\"\n }\n \n+/// **What it does:** Checks for loops on `y.into_iter()` where `y` will do, and\n+/// suggests the latter.\n+///\n+/// **Why is this bad?** Readability.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// // with `y` a `Vec` or slice:\n+/// for x in y.into_iter() { .. }\n+/// ```\n+declare_lint! {\n+    pub EXPLICIT_INTO_ITER_LOOP,\n+    Warn,\n+    \"for-looping over `_.into_iter()` when `_` would do\"\n+}\n+\n /// **What it does:** Checks for loops on `x.next()`.\n ///\n /// **Why is this bad?** `next()` returns either `Some(value)` if there was a\n@@ -275,6 +293,7 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RANGE_LOOP,\n                     EXPLICIT_ITER_LOOP,\n+                    EXPLICIT_INTO_ITER_LOOP,\n                     ITER_NEXT_LOOP,\n                     FOR_LOOP_OVER_RESULT,\n                     FOR_LOOP_OVER_OPTION,\n@@ -577,6 +596,16 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                                        object,\n                                        method_name));\n                 }\n+            } else if method_name.as_str() == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n+                    let object = snippet(cx, args[0].span, \"_\");\n+                    span_lint(cx,\n+                              EXPLICIT_INTO_ITER_LOOP,\n+                              expr.span,\n+                              &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n+                                       object,\n+                                       object,\n+                                       method_name));\n+\n             } else if method_name.as_str() == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n                 span_lint(cx,\n                           ITER_NEXT_LOOP,"}, {"sha": "2f05ce37d334528fb9e3b106512a48d9af1aca30", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fa004313bd31a88b3f5f4c4467b4926e24cebac/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa004313bd31a88b3f5f4c4467b4926e24cebac/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=5fa004313bd31a88b3f5f4c4467b4926e24cebac", "patch": "@@ -23,6 +23,7 @@ pub const HASH: [&'static str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n+pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_PRINT: [&'static str; 3] = [\"std\", \"io\", \"_print\"];\n pub const ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LINKED_LIST: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];"}, {"sha": "22fcbff64b15586421b4290107267093e20cd24d", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fa004313bd31a88b3f5f4c4467b4926e24cebac/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa004313bd31a88b3f5f4c4467b4926e24cebac/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=5fa004313bd31a88b3f5f4c4467b4926e24cebac", "patch": "@@ -87,7 +87,7 @@ impl Unrelated {\n     }\n }\n \n-#[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n+#[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n #[deny(unused_collect)]\n #[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n #[allow(many_single_char_names)]\n@@ -294,6 +294,10 @@ fn main() {\n     for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n     for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n \n+\n+    let out_vec = vec![1,2,3];\n+    for _v in out_vec.into_iter() { } //~ERROR it is more idiomatic to loop over `out_vec` instead of `out_vec.into_iter()`\n+\n     for _v in &vec { } // these are fine\n     for _v in &mut vec { } // these are fine\n "}]}