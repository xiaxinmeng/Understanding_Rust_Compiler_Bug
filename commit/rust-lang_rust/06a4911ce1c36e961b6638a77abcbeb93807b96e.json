{"sha": "06a4911ce1c36e961b6638a77abcbeb93807b96e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YTQ5MTFjZTFjMzZlOTYxYjY2MzhhNzdhYmNiZWI5MzgwN2I5NmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-12T08:56:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-13T07:09:03Z"}, "message": "run-time validation: accept undef in int arrays, as we do for ints", "tree": {"sha": "28591157bb7b8ba0636116694fd26d62af0950ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28591157bb7b8ba0636116694fd26d62af0950ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a4911ce1c36e961b6638a77abcbeb93807b96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a4911ce1c36e961b6638a77abcbeb93807b96e", "html_url": "https://github.com/rust-lang/rust/commit/06a4911ce1c36e961b6638a77abcbeb93807b96e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a4911ce1c36e961b6638a77abcbeb93807b96e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2ddd27c2e9de8e7ad75c1f7a276aff22d8a2c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ddd27c2e9de8e7ad75c1f7a276aff22d8a2c52", "html_url": "https://github.com/rust-lang/rust/commit/b2ddd27c2e9de8e7ad75c1f7a276aff22d8a2c52"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "4b0c0c3ee6173fdb8ce38c409012cdded050b52b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a4911ce1c36e961b6638a77abcbeb93807b96e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a4911ce1c36e961b6638a77abcbeb93807b96e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=06a4911ce1c36e961b6638a77abcbeb93807b96e", "patch": "@@ -846,7 +846,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         &self,\n         ptr: Scalar<M::PointerTag>,\n         size: Size,\n-        allow_ptr: bool,\n+        allow_ptr_and_undef: bool,\n     ) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n         let align = Align::from_bytes(1, 1).unwrap();\n@@ -857,9 +857,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         let ptr = ptr.to_ptr()?;\n         // Check bounds, align and relocations on the edges\n         self.get_bytes_with_undef_and_ptr(ptr, size, align)?;\n-        // Check undef, and maybe ptr\n-        self.check_defined(ptr, size)?;\n-        if !allow_ptr {\n+        // Check undef and ptr\n+        if !allow_ptr_and_undef {\n+            self.check_defined(ptr, size)?;\n             self.check_relocations(ptr, size)?;\n         }\n         Ok(())"}, {"sha": "c446980d04995025ed3e8bbae9a604100af6ea2e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06a4911ce1c36e961b6638a77abcbeb93807b96e/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a4911ce1c36e961b6638a77abcbeb93807b96e/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=06a4911ce1c36e961b6638a77abcbeb93807b96e", "patch": "@@ -517,7 +517,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         // reject it.  However, that's good: We don't inherently want\n                         // to reject those pointers, we just do not have the machinery to\n                         // talk about parts of a pointer.\n-                        match self.memory.check_bytes(dest.ptr, size, /*allow_ptr*/!const_mode) {\n+                        // We also accept undef, for consistency with the type-based checks.\n+                        match self.memory.check_bytes(\n+                            dest.ptr,\n+                            size,\n+                            /*allow_ptr_and_undef*/!const_mode,\n+                        ) {\n                             // In the happy case, we needn't check anything else.\n                             Ok(()) => {},\n                             // Some error happened, try to provide a more detailed description."}]}