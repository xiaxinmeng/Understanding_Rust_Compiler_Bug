{"sha": "cac15d24f9342a8eee2e7446ade2990c9414a8a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzE1ZDI0ZjkzNDJhOGVlZTJlNzQ0NmFkZTI5OTBjOTQxNGE4YTE=", "commit": {"author": {"name": "Yati Sagade", "email": "yati.sagade@gmail.com", "date": "2017-04-13T19:48:52Z"}, "committer": {"name": "Yati Sagade", "email": "yati.sagade@gmail.com", "date": "2017-04-13T19:48:52Z"}, "message": "needless_continue: Remove indentation of suggestion code.\n\nAs per a suggestion by Oliver on the PR thread, maintaining indentation\nin the suggested code is futile because of the changes in the compiler\nand the messiness of real-world code. rustfmt will do the indentation if\nrequired, so we don't need to do it.", "tree": {"sha": "0471fd51d27dd85a189c61ff8ce9e7f1fac9f94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0471fd51d27dd85a189c61ff8ce9e7f1fac9f94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac15d24f9342a8eee2e7446ade2990c9414a8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac15d24f9342a8eee2e7446ade2990c9414a8a1", "html_url": "https://github.com/rust-lang/rust/commit/cac15d24f9342a8eee2e7446ade2990c9414a8a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac15d24f9342a8eee2e7446ade2990c9414a8a1/comments", "author": {"login": "yati-sagade", "id": 966274, "node_id": "MDQ6VXNlcjk2NjI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/966274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yati-sagade", "html_url": "https://github.com/yati-sagade", "followers_url": "https://api.github.com/users/yati-sagade/followers", "following_url": "https://api.github.com/users/yati-sagade/following{/other_user}", "gists_url": "https://api.github.com/users/yati-sagade/gists{/gist_id}", "starred_url": "https://api.github.com/users/yati-sagade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yati-sagade/subscriptions", "organizations_url": "https://api.github.com/users/yati-sagade/orgs", "repos_url": "https://api.github.com/users/yati-sagade/repos", "events_url": "https://api.github.com/users/yati-sagade/events{/privacy}", "received_events_url": "https://api.github.com/users/yati-sagade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yati-sagade", "id": 966274, "node_id": "MDQ6VXNlcjk2NjI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/966274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yati-sagade", "html_url": "https://github.com/yati-sagade", "followers_url": "https://api.github.com/users/yati-sagade/followers", "following_url": "https://api.github.com/users/yati-sagade/following{/other_user}", "gists_url": "https://api.github.com/users/yati-sagade/gists{/gist_id}", "starred_url": "https://api.github.com/users/yati-sagade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yati-sagade/subscriptions", "organizations_url": "https://api.github.com/users/yati-sagade/orgs", "repos_url": "https://api.github.com/users/yati-sagade/repos", "events_url": "https://api.github.com/users/yati-sagade/events{/privacy}", "received_events_url": "https://api.github.com/users/yati-sagade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "html_url": "https://github.com/rust-lang/rust/commit/7ee0d4f9c249da80ceb92c5878bd00f8764ba921"}], "stats": {"total": 318, "additions": 26, "deletions": 292}, "files": [{"sha": "1e7120951cab2c38be8183fedc38fc7fc36227ec", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cac15d24f9342a8eee2e7446ade2990c9414a8a1/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac15d24f9342a8eee2e7446ade2990c9414a8a1/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=cac15d24f9342a8eee2e7446ade2990c9414a8a1", "patch": "@@ -32,8 +32,7 @@ use syntax::ast;\n use syntax::codemap::{original_sp,DUMMY_SP};\n use std::borrow::Cow;\n \n-use utils::{in_macro, span_help_and_lint, snippet_block, snippet, trim_multiline,\n-            left_pad_lines_with_spaces, align_snippets};\n+use utils::{in_macro, span_help_and_lint, snippet_block, snippet, trim_multiline};\n \n /// **What it does:** The lint checks for `if`-statements appearing in loops\n /// that contain a `continue` statement in either their main blocks or their\n@@ -312,7 +311,6 @@ fn suggestion_snippet_for_continue_inside_else<'a>(ctx: &EarlyContext,\n     let block_code = &snippet(ctx, data.if_block.span, \"..\").into_owned();\n     let block_code = erode_block(block_code);\n     let block_code = trim_multiline(Cow::from(block_code), false);\n-    let block_code = left_pad_lines_with_spaces(&block_code, 4_usize);\n \n     if_code.push_str(&block_code);\n \n@@ -329,9 +327,10 @@ fn suggestion_snippet_for_continue_inside_else<'a>(ctx: &EarlyContext,\n                    .collect::<Vec<_>>().join(\"\\n\");\n \n     let mut ret = String::from(header);\n-    ret.push_str(&align_snippets(&[&if_code,\n-                                   \"\\n// Merged code follows...\",\n-                                   &to_annex]));\n+\n+    ret.push_str(&if_code);\n+    ret.push_str(\"\\n// Merged code follows...\");\n+    ret.push_str(&to_annex);\n     ret.push_str(\"\\n}\\n\");\n     ret\n }"}, {"sha": "40dab908614fc36bff5de2141e27885541874965", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 189, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/cac15d24f9342a8eee2e7446ade2990c9414a8a1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac15d24f9342a8eee2e7446ade2990c9414a8a1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cac15d24f9342a8eee2e7446ade2990c9414a8a1", "patch": "@@ -22,7 +22,6 @@ use syntax::codemap::{ExpnFormat, ExpnInfo, MultiSpan, Span, DUMMY_SP};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n-use std::iter;\n \n pub mod comparisons;\n pub mod conf;\n@@ -980,191 +979,3 @@ pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>) -> Opti\n         .enter(|infcx| ty.layout(&infcx).ok().map(|lay| lay.size(&TargetDataLayout::parse(cx.sess())).bytes()))\n }\n \n-/// Add `n` spaces to the left of `s`.\n-pub fn left_pad_with_spaces(s: &str, n: usize) -> String {\n-    let mut new_s = iter::repeat(' ').take(n).collect::<String>();\n-    new_s.push_str(s);\n-    new_s\n-}\n-\n-/// Add `n` spaces to the left of each line in `s` and return the result\n-/// in a new String.\n-/// e.g., when n = 2, the string\n-///\n-///     \"   fn foo() {\n-///             bar()\n-///         }\"\n-///\n-/// becomes\n-///\n-///     \"     fn foo() {\n-///               bar()\n-///           }\"\n-///\n-/// # Example\n-///\n-/// ```\n-/// use clippy_lints::utils::left_pad_with_spaces;\n-///\n-/// let input = \"\\\n-/// fn main() {\n-///     println!(\"hello world!\");\n-/// }\";\n-///\n-/// let expected =\n-/// \"    fn main() {\n-///         println!(\"hello world!\");\n-///      }\";\n-///\n-/// assert_eq!(expected, input);\n-/// ```\n-pub fn left_pad_lines_with_spaces(s: &str, n: usize) -> String {\n-    s.lines()\n-     .map(|line| left_pad_with_spaces(line, n))\n-     .collect::<Vec<_>>()\n-     .join(\"\\n\")\n-}\n-\n-/// Remove upto `n` whitespace characters from the beginning of `s`.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// let s = \"    foobar  \";\n-/// assert_eq!(\"foobar \", remove_whitespace_from_left(s, 100));\n-/// assert_eq!(\"  foobar \", remove_whitespace_from_left(s, 2));\n-/// assert_eq(\"\", remove_whitespace_from_left(\"   \", 50));\n-/// ```\n-pub fn remove_whitespace_from_left(s: &str, n: usize) -> String {\n-    s.chars()\n-     .enumerate()\n-     .skip_while(|&(i, c)| i < n && c.is_whitespace())\n-     .map(|(_, c)| c)\n-     .collect::<String>()\n-}\n-\n-/// Aligns two snippets such that the indentation level of the last non-empty,\n-/// non-space line of the first snippet matches the first non-empty, non-space\n-/// line of the second.\n-pub fn align_two_snippets(s: &str, t: &str) -> String {\n-    // indent level of the last nonempty, non-whitespace line of s.\n-    let target_ilevel = s.lines()\n-                         .rev()\n-                         .skip_while(|line| line.is_empty() || is_all_whitespace(line))\n-                         .next()\n-                         .map_or(0_usize, indent_level);\n-\n-    // We want to align the first nonempty, non-all-whitespace line of t to\n-    // have the same indent level as target_ilevel\n-    let level = t.lines()\n-                 .skip_while(|line| line.is_empty() || is_all_whitespace(line))\n-                 .next()\n-                 .map_or(0_usize, indent_level);\n-\n-    // When add_spaces=true, we add spaces, otherwise eat.\n-    let add_spaces = target_ilevel > level;\n-\n-    let delta = if add_spaces {\n-        target_ilevel - level\n-    } else {\n-        level - target_ilevel\n-    };\n-\n-    let new_t = t.lines()\n-                 .map(|line| {\n-                     if is_null(line) {\n-                         // leave empty lines alone\n-                         String::from(line)\n-                     } else if add_spaces {\n-                         left_pad_with_spaces(line, delta)\n-                     } else {\n-                         remove_whitespace_from_left(line, delta)\n-                     }\n-                 })\n-                 .collect::<Vec<_>>().join(\"\\n\");\n-\n-    format!(\"{}\\n{}\", s, new_t)\n-}\n-\n-/// Aligns strings in `xs` pairwise from the start, such that for any pair of\n-/// strings, the first string's last line is aligned with the first line of\n-/// the second string. See `align_two_snippets`. Use this to merge code regions\n-/// into a reasonably aligned chunk of code.\n-///\n-/// For example, consider\n-///\n-/// ```\n-///         let s1 = \"\\\n-///     if (condition()) {\n-///         do_something()\";\n-///\n-///         let s2 = \"\\\n-///             code_from_somewhere_else();\"\n-///\n-///         let s3 = \"\\\n-///     another_piece_of_code();\n-///         indented_here();\";\n-/// ```\n-///\n-///\n-///\n-/// Now calling `align_snippets(&[s1, s2, s3])` will yield the following:\n-///\n-/// ```\n-///     if (condition()) {\n-///         do_something();\n-///         code_from_somewhere_else();\n-///         another_piece_of_code();\n-///             indented_here();\n-/// ```\n-pub fn align_snippets(xs: &[&str]) -> String {\n-    if xs.is_empty() {\n-        String::from(\"\")\n-    } else {\n-        let mut ret = xs[0].to_string();\n-        for x in xs.iter().skip(1_usize) {\n-            ret = align_two_snippets(&ret, x);\n-        }\n-        ret\n-    }\n-}\n-\n-\n-/// # Examples\n-/// ```\n-/// use clippy_lints::utils::is_all_whitespace;\n-///\n-/// assert_eq!(true, \"   \\n\\t  \");\n-/// assert_eq!(false, \"\");\n-/// assert_eq!(false, \"hello world!\\n\");\n-/// ```\n-pub fn is_all_whitespace(s: &str) -> bool {\n-    s.chars().all(|c| c.is_whitespace())\n-}\n-\n-/// Returns true if a string is empty or just spaces.\n-pub fn is_null(s: &str) -> bool {\n-    s.is_empty() || is_all_whitespace(s)\n-}\n-\n-/// Returns the indentation level of a string. It just returns the count of\n-/// whitespace characters in the string before a non-whitespace character\n-/// is encountered.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use clippy_lints::utils::indent_level;\n-///\n-/// let s = \"    fn foo() { \";\n-/// assert_eq!(4, indent_level(s));\n-///\n-/// let s = \"fn foo() { \";\n-/// assert_eq!(0, indent_level(s));\n-/// ```\n-pub fn indent_level(s: &str) -> usize {\n-    s.chars()\n-     .enumerate()\n-     .find(|&(_, c)| !c.is_whitespace())\n-     .map_or(0_usize, |(i, _)| i)\n-}"}, {"sha": "f6a80036b3513455d990877f1cef147a78e1c2cf", "filename": "tests/test_align_snippets.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/tests%2Ftest_align_snippets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/tests%2Ftest_align_snippets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftest_align_snippets.rs?ref=7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "patch": "@@ -1,74 +0,0 @@\n-extern crate clippy_lints;\n-\n-use clippy_lints::utils::align_snippets;\n-\n-#[test]\n-fn test_align_snippets_single_line() {\n-    assert_eq!(\"\", align_snippets(&[\"\"]));\n-    assert_eq!(\"...\", align_snippets(&[\"...\"]));\n-}\n-\n-#[test]\n-#[cfg_attr(rustfmt, rustfmt_skip)]\n-fn test_align_snippets_multiline() {\n-    let expected = \"\\\n-if condition() {\n-    do_something();\n-    do_another_thing();\n-    yet_another_thing();\n-    {\n-        and_then_an_indented_block();\n-    }\n-        and_then_something_the_user_indented();\"; // expected\n-\n-    let input = &[\n-\"\\\n-if condition() {\n-    do_something();\",\n-\"       do_another_thing();\",\n-\"            yet_another_thing();\n-            {\n-                and_then_an_indented_block();\n-            }\n-                and_then_something_the_user_indented();\",\n-    ]; // input\n-\n-    let got = align_snippets(input);\n-    assert_eq!(expected, got);\n-\n-}\n-\n-#[test]\n-#[cfg_attr(rustfmt, rustfmt_skip)]\n-fn test_align_snippets_multiline_with_empty_lines() {\n-    let expected = \"\\\n-if condition() {\n-    do_something();\n-    do_another_thing();\n-    yet_another_thing();\n-    {\n-\n-        and_then_an_indented_block();\n-    }\n-\n-        and_then_something_the_user_indented();\"; // expected\n-\n-    let input = &[\n-\"\\\n-if condition() {\n-    do_something();\",\n-\"       do_another_thing();\",\n-\"            yet_another_thing();\n-            {\n-\n-                and_then_an_indented_block();\n-            }\n-\n-                and_then_something_the_user_indented();\",\n-    ]; // input\n-\n-    let got = align_snippets(input);\n-    println!(\"Input: {}\\nExpected: {}\\nGot: {}\", input.join(\"\\n\"), &expected, &got);\n-    assert_eq!(expected, got);\n-}\n-"}, {"sha": "5a4447aa6940f3047f34e0351a27e4b2199cd173", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cac15d24f9342a8eee2e7446ade2990c9414a8a1/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac15d24f9342a8eee2e7446ade2990c9414a8a1/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=cac15d24f9342a8eee2e7446ade2990c9414a8a1", "patch": "@@ -15,29 +15,27 @@ note: lint level defined here\n    |        ^^^^^^^^^^^^^^^^^\n    = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n            if i % 2 == 0 && i % 3 == 0 {\n-               println!(\"{}\", i);\n-               println!(\"{}\", i+1);\n-               if i % 5 == 0 {\n-                   println!(\"{}\", i+2);\n-               }\n-               let i = 0;\n-               println!(\"bar {} \", i);\n-           \n-               // Merged code follows...\n-               println!(\"bleh\");\n-               {\n-                   println!(\"blah\");\n-               }\n-               if !(!(i == 2) || !(i == 5)) {\n-                   println!(\"lama\");\n-               }\n-               if (zero!(i % 2) || nonzero!(i % 5)) && i % 3 != 0 {\n-                   continue;\n-               } else {\n-                   println!(\"Blabber\");\n-                   println!(\"Jabber\");\n-               }\n-               println!(\"bleh\");\n+           println!(\"{}\", i);\n+           println!(\"{}\", i+1);\n+           if i % 5 == 0 {\n+               println!(\"{}\", i+2);\n+           }\n+           let i = 0;\n+           println!(\"bar {} \", i);\n+           // Merged code follows...println!(\"bleh\");\n+           {\n+               println!(\"blah\");\n+           }\n+           if !(!(i == 2) || !(i == 5)) {\n+               println!(\"lama\");\n+           }\n+           if (zero!(i % 2) || nonzero!(i % 5)) && i % 3 != 0 {\n+               continue;\n+           } else {\n+               println!(\"Blabber\");\n+               println!(\"Jabber\");\n+           }\n+           println!(\"bleh\");\n            }\n            \n "}]}