{"sha": "0c25d154bd5b48819f490ac4a630f28fcfe4d321", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjVkMTU0YmQ1YjQ4ODE5ZjQ5MGFjNGE2MzBmMjhmY2ZlNGQzMjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-18T06:57:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T06:57:26Z"}, "message": "Rollup merge of #82055 - JulianKnodt:ty_where_const, r=estebank\n\nAdd diagnostics for specific cases for const/type mismatch err\n\nFor now, this adds at least more information so better diagnostics can be emitted for const mismatch errors.\n\nI'm not sure what exactly we want to emit, so I've left notes there temporarily, also to see if this is the right approach\n\nr? ```@lcnr```\ncc: ```@estebank```", "tree": {"sha": "5cc6a63e1ef08bc6e594741efbfba6c0a60e2b5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc6a63e1ef08bc6e594741efbfba6c0a60e2b5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c25d154bd5b48819f490ac4a630f28fcfe4d321", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLg/WCRBK7hj4Ov3rIwAAdHIIAI5QSWTc/39LXc5g5OkCSOb5\n1y5Yk9PLAJg8tYSK3/wiI8Ve+EAFrangpifjRl7SSF9dXf8a+os08TrZUTFSX88n\nYnL26Ic1DY8KNg+h5c8Rz7iwv6DO/Qlb+I/Kge6djG+gJ8l2EWCzBAr4EAM/x/lO\nDOwG21eK5KhTn+9LqMZVTRhARhC5ITDKxmR6Bh8taqIMeCs/qdDS2UyLRhLyJffr\n+E7FBph/hwEk7JimdFlkMkJncWEVwhdlUnMMFNngAPSORHWANZaeJ7sH0g213Lex\nPItuECkQwjIgcoIlT78t3/EPQIjWyr2a+Md/Xh9Dpzb9aN4goUJpAhaAUJKWRHU=\n=KvxA\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cc6a63e1ef08bc6e594741efbfba6c0a60e2b5b\nparent cbf666dbc1409f1afbe866ba03755e44dbd1927c\nparent f52029553fa97153eb7f3fc724523cc1a61dfaba\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613631446 +0900\ncommitter GitHub <noreply@github.com> 1613631446 +0900\n\nRollup merge of #82055 - JulianKnodt:ty_where_const, r=estebank\n\nAdd diagnostics for specific cases for const/type mismatch err\n\nFor now, this adds at least more information so better diagnostics can be emitted for const mismatch errors.\n\nI'm not sure what exactly we want to emit, so I've left notes there temporarily, also to see if this is the right approach\n\nr? ```@lcnr```\ncc: ```@estebank```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c25d154bd5b48819f490ac4a630f28fcfe4d321", "html_url": "https://github.com/rust-lang/rust/commit/0c25d154bd5b48819f490ac4a630f28fcfe4d321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c25d154bd5b48819f490ac4a630f28fcfe4d321/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf666dbc1409f1afbe866ba03755e44dbd1927c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf666dbc1409f1afbe866ba03755e44dbd1927c", "html_url": "https://github.com/rust-lang/rust/commit/cbf666dbc1409f1afbe866ba03755e44dbd1927c"}, {"sha": "f52029553fa97153eb7f3fc724523cc1a61dfaba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52029553fa97153eb7f3fc724523cc1a61dfaba", "html_url": "https://github.com/rust-lang/rust/commit/f52029553fa97153eb7f3fc724523cc1a61dfaba"}], "stats": {"total": 163, "additions": 134, "deletions": 29}, "files": [{"sha": "0ea0ccaceabd46530e2e81a39ed45c8323824462", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0c25d154bd5b48819f490ac4a630f28fcfe4d321/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c25d154bd5b48819f490ac4a630f28fcfe4d321/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=0c25d154bd5b48819f490ac4a630f28fcfe4d321", "patch": "@@ -6,8 +6,9 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n use rustc_middle::ty::{\n@@ -43,23 +44,57 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n+        let add_braces_suggestion = |arg: &GenericArg<'_>, err: &mut DiagnosticBuilder<'_>| {\n+            let suggestions = vec![\n+                (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                (arg.span().shrink_to_hi(), String::from(\" }\")),\n+            ];\n+            err.multipart_suggestion(\n+                \"if this generic argument was intended as a const parameter, \\\n+                 surround it with braces\",\n+                suggestions,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+\n         // Specific suggestion set for diagnostics\n         match (arg, &param.kind) {\n             (\n-                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }),\n-                GenericParamDefKind::Const { .. },\n-            ) => {\n-                let suggestions = vec![\n-                    (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                    (arg.span().shrink_to_hi(), String::from(\" }\")),\n-                ];\n-                err.multipart_suggestion(\n-                    \"if this generic argument was intended as a const parameter, \\\n-                try surrounding it with braces:\",\n-                    suggestions,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n+                GenericArg::Type(hir::Ty {\n+                    kind: hir::TyKind::Path(rustc_hir::QPath::Resolved(_, path)),\n+                    ..\n+                }),\n+                GenericParamDefKind::Const,\n+            ) => match path.res {\n+                Res::Err => {\n+                    add_braces_suggestion(arg, &mut err);\n+                    err.set_primary_message(\n+                        \"unresolved item provided when a constant was expected\",\n+                    )\n+                    .emit();\n+                    return;\n+                }\n+                Res::Def(DefKind::TyParam, src_def_id) => {\n+                    if let Some(param_local_id) = param.def_id.as_local() {\n+                        let param_hir_id = tcx.hir().local_def_id_to_hir_id(param_local_id);\n+                        let param_name = tcx.hir().ty_param_name(param_hir_id);\n+                        let param_type = tcx.type_of(param.def_id);\n+                        if param_type.is_suggestable() {\n+                            err.span_suggestion(\n+                                tcx.def_span(src_def_id),\n+                                \"consider changing this type paramater to a `const`-generic\",\n+                                format!(\"const {}: {}\", param_name, param_type),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        };\n+                    }\n+                }\n+                _ => add_braces_suggestion(arg, &mut err),\n+            },\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path(_), .. }),\n+                GenericParamDefKind::Const,\n+            ) => add_braces_suggestion(arg, &mut err),\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n                 GenericParamDefKind::Const { .. },"}, {"sha": "17ccd2f3527b0c64b0c13dea8d5e5d54377018a5", "filename": "src/test/ui/const-generics/const-param-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr?ref=0c25d154bd5b48819f490ac4a630f28fcfe4d321", "patch": "@@ -4,7 +4,7 @@ error[E0747]: type provided when a constant was expected\n LL | fn test<const N: usize>() -> Foo<N> {\n    |                                  ^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL | fn test<const N: usize>() -> Foo<{ N }> {\n    |                                  ^   ^"}, {"sha": "1581af5ab27516e5e301f5cdadce5e8237d5b969", "filename": "src/test/ui/const-generics/diagnostics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs?ref=0c25d154bd5b48819f490ac4a630f28fcfe4d321", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type=\"lib\"]\n+#![feature(min_const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A<const N: u8>;\n+trait Foo {}\n+impl Foo for A<N> {}\n+//~^ ERROR cannot find type\n+//~| unresolved item provided when a constant\n+\n+struct B<const N: u8>;\n+impl<N> Foo for B<N> {}\n+//~^ ERROR type provided when a constant\n+\n+struct C<const C: u8, const N: u8>;\n+impl<const N: u8> Foo for C<N, T> {}\n+//~^ ERROR cannot find type\n+//~| unresolved item provided when a constant"}, {"sha": "7d038ff955d6c7959c43e5f48d940f6949fbd75f", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=0c25d154bd5b48819f490ac4a630f28fcfe4d321", "patch": "@@ -0,0 +1,52 @@\n+error[E0412]: cannot find type `N` in this scope\n+  --> $DIR/diagnostics.rs:7:16\n+   |\n+LL | struct A<const N: u8>;\n+   | ---------------------- similarly named struct `A` defined here\n+LL | trait Foo {}\n+LL | impl Foo for A<N> {}\n+   |                ^ help: a struct with a similar name exists: `A`\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/diagnostics.rs:16:32\n+   |\n+LL | struct A<const N: u8>;\n+   | ---------------------- similarly named struct `A` defined here\n+...\n+LL | impl<const N: u8> Foo for C<N, T> {}\n+   |                                ^ help: a struct with a similar name exists: `A`\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/diagnostics.rs:7:16\n+   |\n+LL | impl Foo for A<N> {}\n+   |                ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl Foo for A<{ N }> {}\n+   |                ^   ^\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/diagnostics.rs:12:19\n+   |\n+LL | impl<N> Foo for B<N> {}\n+   |      -            ^\n+   |      |\n+   |      help: consider changing this type paramater to a `const`-generic: `const N: u8`\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/diagnostics.rs:16:32\n+   |\n+LL | impl<const N: u8> Foo for C<N, T> {}\n+   |                                ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl<const N: u8> Foo for C<N, { T }> {}\n+   |                                ^   ^\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0412, E0747.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "32939dcd2861bd1c7432c31238ab3e974f4184e2", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=0c25d154bd5b48819f490ac4a630f28fcfe4d321", "patch": "@@ -3,14 +3,14 @@\n \n #[derive(PartialEq, Eq)]\n enum CompileFlag {\n-  A,\n-  B,\n+    A,\n+    B,\n }\n \n pub fn test_1<const CF: CompileFlag>() {}\n pub fn test_2<T, const CF: CompileFlag>(x: T) {}\n pub struct Example<const CF: CompileFlag, T=u32>{\n-  x: T,\n+    x: T,\n }\n \n impl<const CF: CompileFlag, T> Example<CF, T> {\n@@ -20,15 +20,15 @@ impl<const CF: CompileFlag, T> Example<CF, T> {\n pub fn main() {\n   test_1::<CompileFlag::A>();\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   test_2::<_, CompileFlag::A>(0);\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n   //~^ ERROR: type provided when a constant was expected"}, {"sha": "cfbc61f02543bc6ae4c7eaa4a5b33db37658f873", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c25d154bd5b48819f490ac4a630f28fcfe4d321/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=0c25d154bd5b48819f490ac4a630f28fcfe4d321", "patch": "@@ -25,13 +25,13 @@ LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  not a type\n    |                  help: try using the variant's enum: `CompileFlag`\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:29:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n    |                  ^                ^\n@@ -42,29 +42,29 @@ error[E0747]: type provided when a constant was expected\n LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n    |                  ^                     ^\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:21:12\n    |\n LL |   test_1::<CompileFlag::A>();\n    |            ^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   test_1::<{ CompileFlag::A }>();\n    |            ^                ^\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:25:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   test_2::<_, { CompileFlag::A }>(0);\n    |               ^                ^"}]}