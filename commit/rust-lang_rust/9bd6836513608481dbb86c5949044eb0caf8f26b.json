{"sha": "9bd6836513608481dbb86c5949044eb0caf8f26b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZDY4MzY1MTM2MDg0ODFkYmI4NmM1OTQ5MDQ0ZWIwY2FmOGYyNmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-13T17:25:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-13T17:25:00Z"}, "message": "Merge #9596\n\n9596: Return type arguments in goto_type_definition result  r=Veykril a=Veykril\n\nFixes #9586\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "91b628e03aa0fee6af06b7b9548188c9776cba03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b628e03aa0fee6af06b7b9548188c9776cba03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd6836513608481dbb86c5949044eb0caf8f26b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7cxsCRBK7hj4Ov3rIwAA0YUIAKqauDZFmNqM4MEQNrWgtSkp\nbFeXXBkvf9Ybr4XP5FVoc9wdY469ifUCj+bBa1dr6QStkLeVvgjcXpQ4utgLqWed\n+GU0+0GvRvS7NKR/c7fb3OdaB9c+tAFXKNHza1glQHZnxxKgiX/PkX3+eOW8dZ2B\nmVZTBTMszYZ8BwQrCiaWVyzxn5dvzqTILvQx5yDp1KX3H6E2o5rCpGtNIOjeNV3n\nxfOE//7aww9rLItzYUk/ogbewMGvWQ1EdsErjtkbFFs8rNH65UMk7s7BBPNX2yFS\nIOGTvqpBqu06NmaM9i9eNvTEZ+omWQTLrj06p0WZwLaYoe2fuom5eIhyBKiY5h4=\n=Bu5r\n-----END PGP SIGNATURE-----\n", "payload": "tree 91b628e03aa0fee6af06b7b9548188c9776cba03\nparent d771a6aaaab0a4771d125654ba3a8598ae63414a\nparent 796988a2696719d9397a99c833e00419dc13a956\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626197100 +0000\ncommitter GitHub <noreply@github.com> 1626197100 +0000\n\nMerge #9596\n\n9596: Return type arguments in goto_type_definition result  r=Veykril a=Veykril\n\nFixes #9586\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd6836513608481dbb86c5949044eb0caf8f26b", "html_url": "https://github.com/rust-lang/rust/commit/9bd6836513608481dbb86c5949044eb0caf8f26b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd6836513608481dbb86c5949044eb0caf8f26b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d771a6aaaab0a4771d125654ba3a8598ae63414a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d771a6aaaab0a4771d125654ba3a8598ae63414a", "html_url": "https://github.com/rust-lang/rust/commit/d771a6aaaab0a4771d125654ba3a8598ae63414a"}, {"sha": "796988a2696719d9397a99c833e00419dc13a956", "url": "https://api.github.com/repos/rust-lang/rust/commits/796988a2696719d9397a99c833e00419dc13a956", "html_url": "https://github.com/rust-lang/rust/commit/796988a2696719d9397a99c833e00419dc13a956"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "bebf9032fc106629e474d08f2b7a4136dad7b5f6", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9bd6836513608481dbb86c5949044eb0caf8f26b/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd6836513608481dbb86c5949044eb0caf8f26b/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=9bd6836513608481dbb86c5949044eb0caf8f26b", "patch": "@@ -1,6 +1,5 @@\n-use ide_db::base_db::Upcast;\n-use ide_db::helpers::pick_best_token;\n-use ide_db::RootDatabase;\n+use ide_db::{base_db::Upcast, helpers::pick_best_token, RootDatabase};\n+use rustc_hash::FxHashSet;\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, T};\n \n use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n@@ -39,7 +38,6 @@ pub(crate) fn goto_type_definition(\n                 ast::SelfParam(it) => sema.type_of_self(&it)?,\n                 ast::Type(it) => sema.resolve_type(&it)?,\n                 ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n-                ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n                 // can't match on RecordExprField directly as `ast::Expr` will match an iteration too early otherwise\n                 ast::NameRef(it) => {\n                     if let Some(record_field) = ast::RecordExprField::for_name_ref(&it) {\n@@ -56,27 +54,46 @@ pub(crate) fn goto_type_definition(\n \n         Some((ty, node))\n     })?;\n-    let adt_def = ty.autoderef(db).filter_map(|ty| ty.as_adt()).last()?;\n \n-    let nav = adt_def.try_to_nav(db)?;\n-    Some(RangeInfo::new(node.text_range(), vec![nav]))\n+    let mut res = FxHashSet::default();\n+    let mut workload = vec![ty.strip_references()];\n+    while let Some(ty) = workload.pop() {\n+        if let Some(adt) = ty.as_adt() {\n+            res.insert(adt);\n+        }\n+        workload.extend(ty.strip_references().type_arguments());\n+    }\n+\n+    Some(RangeInfo::new(\n+        node.text_range(),\n+        res.into_iter().flat_map(|adt| adt.try_to_nav(db)).collect(),\n+    ))\n }\n \n #[cfg(test)]\n mod tests {\n     use ide_db::base_db::FileRange;\n+    use itertools::Itertools;\n \n     use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n-        let (expected, data) = annotations.pop().unwrap();\n-        assert!(data.is_empty());\n-\n-        let mut navs = analysis.goto_type_definition(position).unwrap().unwrap().info;\n-        assert_eq!(navs.len(), 1);\n-        let nav = navs.pop().unwrap();\n-        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n+        let (analysis, position, expected) = fixture::annotations(ra_fixture);\n+        let navs = analysis.goto_type_definition(position).unwrap().unwrap().info;\n+        assert_ne!(navs.len(), 0);\n+\n+        let cmp = |&FileRange { file_id, range }: &_| (file_id, range.start());\n+        let navs = navs\n+            .into_iter()\n+            .map(|nav| FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() })\n+            .sorted_by_key(cmp)\n+            .collect::<Vec<_>>();\n+        let expected = expected\n+            .into_iter()\n+            .map(|(FileRange { file_id, range }, _)| FileRange { file_id, range })\n+            .sorted_by_key(cmp)\n+            .collect::<Vec<_>>();\n+        assert_eq!(expected, navs);\n     }\n \n     #[test]\n@@ -243,6 +260,22 @@ enum Foo {\n         bar$0: Bar\n     },\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_considers_generics() {\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+struct Bar<T, U>(T, U);\n+     //^^^\n+struct Baz<T>(T);\n+     //^^^\n+\n+fn foo(x$0: Bar<Baz<Foo>, Baz<usize>) {}\n \"#,\n         );\n     }"}]}