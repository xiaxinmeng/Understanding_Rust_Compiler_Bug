{"sha": "3be987e076ad6b90a3679036ff71f639e9553ffa", "node_id": "C_kwDOAAsO6NoAKDNiZTk4N2UwNzZhZDZiOTBhMzY3OTAzNmZmNzFmNjM5ZTk1NTNmZmE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-08T09:56:21Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-08T09:56:21Z"}, "message": "dont make lit_to_mir_constant a query", "tree": {"sha": "ac4d3d86bc4978506546625e8ade362d126ae970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4d3d86bc4978506546625e8ade362d126ae970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3be987e076ad6b90a3679036ff71f639e9553ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3be987e076ad6b90a3679036ff71f639e9553ffa", "html_url": "https://github.com/rust-lang/rust/commit/3be987e076ad6b90a3679036ff71f639e9553ffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3be987e076ad6b90a3679036ff71f639e9553ffa/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3491378e3420a19dc98708a2953df5c524c2681", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3491378e3420a19dc98708a2953df5c524c2681", "html_url": "https://github.com/rust-lang/rust/commit/c3491378e3420a19dc98708a2953df5c524c2681"}], "stats": {"total": 113, "additions": 56, "deletions": 57}, "files": [{"sha": "14c11187fc5eecc28b946a5e01a9c14fac1b3fdb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3be987e076ad6b90a3679036ff71f639e9553ffa", "patch": "@@ -960,10 +960,6 @@ rustc_queries! {\n         desc { \"converting literal to const\" }\n     }\n \n-    query lit_to_mir_constant(key: LitToConstInput<'tcx>) -> Result<mir::ConstantKind<'tcx>, LitToConstError> {\n-        desc { \"converting literal to mir constant\" }\n-    }\n-\n     query check_match(key: DefId) {\n         desc { |tcx| \"match-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }"}, {"sha": "8b9b1847e7f0eb179d86bb671275aa9de52647ac", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=3be987e076ad6b90a3679036ff71f639e9553ffa", "patch": "@@ -1,12 +1,16 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n+use crate::thir::constant::parse_float;\n+use rustc_ast as ast;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::mir::interpret::Allocation;\n use rustc_middle::mir::interpret::{ConstValue, LitToConstError, LitToConstInput, Scalar};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt};\n+use rustc_target::abi::Size;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n@@ -27,7 +31,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Literal { lit, neg } => {\n                 let literal =\n-                    match tcx.lit_to_mir_constant(LitToConstInput { lit: &lit.node, ty, neg }) {\n+                    match lit_to_mir_constant(tcx, LitToConstInput { lit: &lit.node, ty, neg }) {\n                         Ok(c) => c,\n                         Err(LitToConstError::Reported) => ConstantKind::Ty(tcx.const_error(ty)),\n                         Err(LitToConstError::TypeError) => {\n@@ -84,3 +88,54 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n }\n+\n+#[instrument(skip(tcx, lit_input))]\n+fn lit_to_mir_constant<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    lit_input: LitToConstInput<'tcx>,\n+) -> Result<ConstantKind<'tcx>, LitToConstError> {\n+    let LitToConstInput { lit, ty, neg } = lit_input;\n+    let trunc = |n| {\n+        let param_ty = ty::ParamEnv::reveal_all().and(ty);\n+        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n+        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n+        let result = width.truncate(n);\n+        trace!(\"trunc result: {}\", result);\n+        Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n+    };\n+\n+    let value = match (lit, &ty.kind()) {\n+        (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n+            let s = s.as_str();\n+            let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n+            let allocation = tcx.intern_const_alloc(allocation);\n+            ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n+        }\n+        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n+            if matches!(inner_ty.kind(), ty::Slice(_)) =>\n+        {\n+            let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n+            let allocation = tcx.intern_const_alloc(allocation);\n+            ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n+        }\n+        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n+            let id = tcx.allocate_bytes(data);\n+            ConstValue::Scalar(Scalar::from_pointer(id.into(), &tcx))\n+        }\n+        (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n+            ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n+        }\n+        (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n+            trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n+        }\n+        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n+            parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n+        }\n+        (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n+        (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n+        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n+        _ => return Err(LitToConstError::TypeError),\n+    };\n+\n+    Ok(ConstantKind::Val(value, ty))\n+}"}, {"sha": "6687e1160ede86d639859984f948aacc00d0df8f", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=3be987e076ad6b90a3679036ff71f639e9553ffa", "patch": "@@ -27,7 +27,6 @@ use rustc_middle::ty::query::Providers;\n pub fn provide(providers: &mut Providers) {\n     providers.check_match = thir::pattern::check_match;\n     providers.lit_to_const = thir::constant::lit_to_const;\n-    providers.lit_to_mir_constant = thir::constant::lit_to_mir_constant;\n     providers.mir_built = build::mir_built;\n     providers.thir_check_unsafety = check_unsafety::thir_check_unsafety;\n     providers.thir_check_unsafety_for_const_arg = check_unsafety::thir_check_unsafety_for_const_arg;"}, {"sha": "30d7fdb7fec365de33928567e8fb729b32f7e7ed", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be987e076ad6b90a3679036ff71f639e9553ffa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=3be987e076ad6b90a3679036ff71f639e9553ffa", "patch": "@@ -3,7 +3,6 @@ use rustc_ast as ast;\n use rustc_middle::mir::interpret::{\n     Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n-use rustc_middle::mir::ConstantKind;\n use rustc_middle::ty::{self, ParamEnv, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::Size;\n@@ -59,56 +58,6 @@ crate fn lit_to_const<'tcx>(\n     Ok(ty::Const::from_value(tcx, lit, ty))\n }\n \n-crate fn lit_to_mir_constant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    lit_input: LitToConstInput<'tcx>,\n-) -> Result<ConstantKind<'tcx>, LitToConstError> {\n-    let LitToConstInput { lit, ty, neg } = lit_input;\n-    let trunc = |n| {\n-        let param_ty = ty::ParamEnv::reveal_all().and(ty);\n-        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n-        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n-        let result = width.truncate(n);\n-        trace!(\"trunc result: {}\", result);\n-        Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n-    };\n-\n-    let value = match (lit, &ty.kind()) {\n-        (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n-            let s = s.as_str();\n-            let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n-        }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n-            if matches!(inner_ty.kind(), ty::Slice(_)) =>\n-        {\n-            let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n-        }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n-            let id = tcx.allocate_bytes(data);\n-            ConstValue::Scalar(Scalar::from_pointer(id.into(), &tcx))\n-        }\n-        (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n-            ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n-        }\n-        (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n-            trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n-        }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n-            parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n-        }\n-        (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n-        (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n-        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n-        _ => return Err(LitToConstError::TypeError),\n-    };\n-\n-    Ok(ConstantKind::Val(value, ty))\n-}\n-\n // FIXME move this to rustc_mir_build::build\n pub(crate) fn parse_float<'tcx>(\n     num: Symbol,"}]}