{"sha": "40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "node_id": "C_kwDOAAsO6NoAKDQwZmNiYmFmYTA5Njk0NGE2MDE2OWZjOGEyZjY1YmE0YWI2Y2FkZjg", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-21T21:36:08Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-02-03T18:59:35Z"}, "message": "Change struct expr pretty printing to match rustfmt style", "tree": {"sha": "7594f3fbc17398984882d3866cd29f35eb011cf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7594f3fbc17398984882d3866cd29f35eb011cf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmH8JhcACgkQ+boUO5X/\nbYK+Ng//RzV0OMRsydbnppFVx2yWk9MNp0DED2DRt8fTMR70kyQrFDFK4vACVeUp\ncNOlke1Q+bJAn4X5kiHQXrvH67PNRZViXxGyiJSEWushyb2LZ07XV3lLA9iBggL6\n5mrTJ/2LjAGIMfNTp9ohXnadOQnglmD1GNQkz8w/jx7Ix+XAgfFQHm4jTrS1k/QR\natPT6OLoSkDcV6DxPlIbZ2WSj6+G3TOvyle4hY6xBRIW7lVbI1fk+vWoBzcUP08R\nAsHXjckQgqiD3blgdYa9fuQ04bh51rz3Vur97HlkfLvhPJvClk6Sycdrg+JXv6T6\nN8Y5o2NLZB7hn82nolfaIvZvsv5YA9BR1MahPeRYAB96PqQQR9AWEv1AXfhX60yy\nJFrjgZXYt32/HUaUyMJyEUy5C4dYSFEOJV+Q/wlpAZ8qDnLeGwq1ZZlOqXdXmUU/\nMLam1IjasaD1rGKeq6WgsDBpnewMtAQhncW2tQiYPIQGEEaZu7HFFvX/qB8i60bV\n5t/icV8Xa02NULDeplk8KS/u23TZz1IQfm8b2U0av22nlVn7YnGdsQcVvbYTvEUA\n8ciftplEd9Lld61yalUObmAdr2VDEBNp7mM69tM17LK604coRsiut4FyB/Rrnuqp\nAzojXVO7ZPvGPnmmDj9i+S5hWfSrjYSy0ExBYisjAufWAVlSJvo=\n=6x9q\n-----END PGP SIGNATURE-----", "payload": "tree 7594f3fbc17398984882d3866cd29f35eb011cf3\nparent 63406ac771c08597c870cc7b01ca8d8098ea3a2b\nauthor David Tolnay <dtolnay@gmail.com> 1642800968 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1643914775 -0800\n\nChange struct expr pretty printing to match rustfmt style\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "html_url": "https://github.com/rust-lang/rust/commit/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63406ac771c08597c870cc7b01ca8d8098ea3a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/63406ac771c08597c870cc7b01ca8d8098ea3a2b", "html_url": "https://github.com/rust-lang/rust/commit/63406ac771c08597c870cc7b01ca8d8098ea3a2b"}], "stats": {"total": 114, "additions": 83, "deletions": 31}, "files": [{"sha": "b2c62383fb69af5600a325f4223d730c3b5d590b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "patch": "@@ -1,3 +1,4 @@\n+mod delimited;\n mod expr;\n mod item;\n \n@@ -23,6 +24,8 @@ use rustc_span::{BytePos, FileName, Span};\n \n use std::borrow::Cow;\n \n+pub use self::delimited::IterDelimited;\n+\n pub enum MacHeader<'a> {\n     Path(&'a ast::Path),\n     Keyword(&'static str),"}, {"sha": "fe0640baaa1b0a0890cb485da741e0b0e5cf83af", "filename": "compiler/rustc_ast_pretty/src/pprust/state/delimited.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs?ref=40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "patch": "@@ -0,0 +1,41 @@\n+use std::iter::Peekable;\n+use std::mem;\n+use std::ops::Deref;\n+\n+pub struct Delimited<I: Iterator> {\n+    is_first: bool,\n+    iter: Peekable<I>,\n+}\n+\n+pub trait IterDelimited: Iterator + Sized {\n+    fn delimited(self) -> Delimited<Self> {\n+        Delimited { is_first: true, iter: self.peekable() }\n+    }\n+}\n+\n+impl<I: Iterator> IterDelimited for I {}\n+\n+pub struct IteratorItem<T> {\n+    value: T,\n+    pub is_first: bool,\n+    pub is_last: bool,\n+}\n+\n+impl<I: Iterator> Iterator for Delimited<I> {\n+    type Item = IteratorItem<I::Item>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let value = self.iter.next()?;\n+        let is_first = mem::replace(&mut self.is_first, false);\n+        let is_last = self.iter.peek().is_none();\n+        Some(IteratorItem { value, is_first, is_last })\n+    }\n+}\n+\n+impl<T> Deref for IteratorItem<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.value\n+    }\n+}"}, {"sha": "44116fa76a0c1e0265d39cd8217cf5a1022644bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fcbbafa096944a60169fc8a2f65ba4ab6cadf8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=40fcbbafa096944a60169fc8a2f65ba4ab6cadf8", "patch": "@@ -1,5 +1,5 @@\n-use crate::pp::Breaks::{Consistent, Inconsistent};\n-use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n+use crate::pp::Breaks::Inconsistent;\n+use crate::pprust::state::{AnnNode, IterDelimited, PrintState, State, INDENT_UNIT};\n \n use rustc_ast::ptr::P;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n@@ -117,38 +117,46 @@ impl<'a> State<'a> {\n         } else {\n             self.print_path(path, true, 0);\n         }\n+        self.nbsp();\n         self.word(\"{\");\n-        self.commasep_cmnt(\n-            Consistent,\n-            fields,\n-            |s, field| {\n-                s.print_outer_attributes(&field.attrs);\n-                s.ibox(INDENT_UNIT);\n-                if !field.is_shorthand {\n-                    s.print_ident(field.ident);\n-                    s.word_space(\":\");\n-                }\n-                s.print_expr(&field.expr);\n-                s.end();\n-            },\n-            |f| f.span,\n-        );\n-        match rest {\n-            ast::StructRest::Base(_) | ast::StructRest::Rest(_) => {\n-                self.ibox(INDENT_UNIT);\n-                if !fields.is_empty() {\n-                    self.word(\",\");\n-                    self.space();\n-                }\n-                self.word(\"..\");\n-                if let ast::StructRest::Base(ref expr) = *rest {\n-                    self.print_expr(expr);\n-                }\n-                self.end();\n+        let has_rest = match rest {\n+            ast::StructRest::Base(_) | ast::StructRest::Rest(_) => true,\n+            ast::StructRest::None => false,\n+        };\n+        if fields.is_empty() && !has_rest {\n+            self.word(\"}\");\n+            return;\n+        }\n+        self.cbox(0);\n+        for field in fields.iter().delimited() {\n+            self.maybe_print_comment(field.span.hi());\n+            self.print_outer_attributes(&field.attrs);\n+            if field.is_first {\n+                self.space_if_not_bol();\n+            }\n+            if !field.is_shorthand {\n+                self.print_ident(field.ident);\n+                self.word_nbsp(\":\");\n+            }\n+            self.print_expr(&field.expr);\n+            if !field.is_last || has_rest {\n+                self.word_space(\",\");\n+            } else {\n+                self.trailing_comma();\n             }\n-            ast::StructRest::None if !fields.is_empty() => self.word(\",\"),\n-            _ => {}\n         }\n+        if has_rest {\n+            if fields.is_empty() {\n+                self.space();\n+            }\n+            self.word(\"..\");\n+            if let ast::StructRest::Base(expr) = rest {\n+                self.print_expr(expr);\n+            }\n+            self.space();\n+        }\n+        self.offset(-INDENT_UNIT);\n+        self.end();\n         self.word(\"}\");\n     }\n "}]}