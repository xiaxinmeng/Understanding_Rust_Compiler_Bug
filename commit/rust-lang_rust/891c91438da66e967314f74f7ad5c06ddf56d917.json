{"sha": "891c91438da66e967314f74f7ad5c06ddf56d917", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MWM5MTQzOGRhNjZlOTY3MzE0Zjc0ZjdhZDVjMDZkZGY1NmQ5MTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-14T20:45:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:48:44Z"}, "message": "simd_shuffleNNN returns its type parameter directly.\n\nI.e. the signature now must be\n\n    fn simd_shuffleNNN<T, U>(x: T, y: T, idx: [u32; NNN]) -> U;\n\n(modulo names.)", "tree": {"sha": "d42c44953fda36f2fbbb3adabda1d2e16b755b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d42c44953fda36f2fbbb3adabda1d2e16b755b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/891c91438da66e967314f74f7ad5c06ddf56d917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/891c91438da66e967314f74f7ad5c06ddf56d917", "html_url": "https://github.com/rust-lang/rust/commit/891c91438da66e967314f74f7ad5c06ddf56d917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/891c91438da66e967314f74f7ad5c06ddf56d917/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "html_url": "https://github.com/rust-lang/rust/commit/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe"}], "stats": {"total": 13, "additions": 2, "deletions": 11}, "files": [{"sha": "636f17db38c36302789cf2319fbaf63d353e2933", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/891c91438da66e967314f74f7ad5c06ddf56d917/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891c91438da66e967314f74f7ad5c06ddf56d917/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=891c91438da66e967314f74f7ad5c06ddf56d917", "patch": "@@ -13,7 +13,6 @@\n \n use astconv::AstConv;\n use intrinsics;\n-use middle::infer;\n use middle::subst;\n use middle::ty::FnSig;\n use middle::ty::{self, Ty};\n@@ -29,7 +28,6 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n \n fn equate_intrinsic_type<'a, 'tcx>(tcx: &ty::ctxt<'tcx>, it: &ast::ForeignItem,\n-                                   maybe_infcx: Option<&infer::InferCtxt<'a, 'tcx>>,\n                                    n_tps: usize,\n                                    abi: abi::Abi,\n                                    inputs: Vec<ty::Ty<'tcx>>,\n@@ -52,7 +50,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: &ty::ctxt<'tcx>, it: &ast::ForeignItem,\n              i_n_tps, n_tps);\n     } else {\n         require_same_types(tcx,\n-                           maybe_infcx,\n+                           None,\n                            false,\n                            it.span,\n                            i_ty.ty,\n@@ -349,7 +347,6 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n     equate_intrinsic_type(\n         tcx,\n         it,\n-        None,\n         n_tps,\n         abi::RustIntrinsic,\n         inputs,\n@@ -369,7 +366,6 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n     let i_ty = tcx.lookup_item_type(local_def(it.id));\n     let i_n_tps = i_ty.generics.types.len(subst::FnSpace);\n     let name = it.ident.name.as_str();\n-    let mut infer_ctxt = None;\n \n     let (n_tps, inputs, output) = match &*name {\n         \"simd_eq\" | \"simd_ne\" | \"simd_lt\" | \"simd_le\" | \"simd_gt\" | \"simd_ge\" => {\n@@ -388,11 +384,7 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n                 Ok(n) => {\n                     let params = vec![param(0), param(0),\n                                       tcx.mk_ty(ty::TyArray(tcx.types.u32, n))];\n-\n-                    let ictxt = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n-                    let ret = ictxt.next_ty_var();\n-                    infer_ctxt = Some(ictxt);\n-                    (2, params, ret)\n+                    (2, params, param(1))\n                 }\n                 Err(_) => {\n                     span_err!(tcx.sess, it.span, E0439,\n@@ -438,7 +430,6 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n     equate_intrinsic_type(\n         tcx,\n         it,\n-        infer_ctxt.as_ref(),\n         n_tps,\n         abi::PlatformIntrinsic,\n         inputs,"}]}