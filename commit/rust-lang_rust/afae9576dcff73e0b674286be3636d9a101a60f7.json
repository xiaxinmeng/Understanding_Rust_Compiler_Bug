{"sha": "afae9576dcff73e0b674286be3636d9a101a60f7", "node_id": "C_kwDOAAsO6NoAKGFmYWU5NTc2ZGNmZjczZTBiNjc0Mjg2YmUzNjM2ZDlhMTAxYTYwZjc", "commit": {"author": {"name": "Petr Portnov", "email": "gh@progrm-jarvis.ru", "date": "2022-10-02T18:40:39Z"}, "committer": {"name": "Petr Portnov", "email": "gh@progrm-jarvis.ru", "date": "2022-10-02T18:40:39Z"}, "message": "Fix duplicate usage of `a` article.\n\nThis fixes a typo first appearing in #94624\nin which test-macro diagnostic uses \"a\" article twice.\n\nSince I searched sources for \" a a \" sequences,\nI also fixed the same issue in a few source files where I found it.\n\nSigned-off-by: Petr Portnov <gh@progrm-jarvis.ru>", "tree": {"sha": "78f487f472aca0e7f6235b5ad73c979a97c32aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f487f472aca0e7f6235b5ad73c979a97c32aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afae9576dcff73e0b674286be3636d9a101a60f7", "comment_count": 1, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5o7uPWEFNJKdSYJMP9TL6VK2jAEFAmM52ycACgkQP9TL6VK2\njAFXuw//QFk5xBXegHQtH7C/ar1LMxFlvCV2PkhKc3qqxvzLfJdpBtBkYeiaMmCu\n7+FN5GqXHAXwXZu/o8/OfxsX5n+XJSotVvFKYZiJyVE46kfz4F4/03yzii+BNayi\nGNsO/qdG6XDg/igpq66PnHrt818RB3irdFY2ZRwSDLJu6jYjgEj4fcRCVqkz2SFJ\nj3ny2nJiaIA7ydHMESZX3BFSe6sABbO5zUWsmhwR2iitEdoCr0XYdK17rD/qaQh2\nXamGjUMF2lQFZQveREOmxYd0ccFJB2QkAhKVMMSnOVtXO7c48PyJKqu4TEol49IA\n6n4qf+QBwvTVklVF97KPOzreURGSqjrqlX2Feh1S8Qq1cA0lCR1hGyE8vn2thZCU\ntY2fxJfXKa+Lkc8qg2Rrrx2aD6espqi23CNkjETL32veS+u6aFnxQis5Nb4FZvXt\nlWXEv46IZYoSOaSqZvpU2pNwC2uawi3fPz9u1itrQ5uzu1Ulyal3eZTrag5lSdei\nIxdOL74HCyxNUkSNlpamJbxD/gNYhEquuaTg/q+ZUA/rzcShfzsZIljjMZMFmXnf\nLa+UOcJZQ7u7BBpFpsDId8F2rfbTpuT6ktQzS8I2lkvmZ4zeILkS5HcHdYbbIsL5\nSD1naitXGXU0mtRy2MRfofKh3P6pG30imm1nVGiQ+1iwSEOSSxU=\n=ZWUw\n-----END PGP SIGNATURE-----", "payload": "tree 78f487f472aca0e7f6235b5ad73c979a97c32aa0\nparent 91931ec2fcb67a8e61080a97345c828a875c86ec\nauthor Petr Portnov <gh@progrm-jarvis.ru> 1664736039 +0300\ncommitter Petr Portnov <gh@progrm-jarvis.ru> 1664736039 +0300\n\nFix duplicate usage of `a` article.\n\nThis fixes a typo first appearing in #94624\nin which test-macro diagnostic uses \"a\" article twice.\n\nSince I searched sources for \" a a \" sequences,\nI also fixed the same issue in a few source files where I found it.\n\nSigned-off-by: Petr Portnov <gh@progrm-jarvis.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afae9576dcff73e0b674286be3636d9a101a60f7", "html_url": "https://github.com/rust-lang/rust/commit/afae9576dcff73e0b674286be3636d9a101a60f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afae9576dcff73e0b674286be3636d9a101a60f7/comments", "author": {"login": "JarvisCraft", "id": 7693005, "node_id": "MDQ6VXNlcjc2OTMwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7693005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarvisCraft", "html_url": "https://github.com/JarvisCraft", "followers_url": "https://api.github.com/users/JarvisCraft/followers", "following_url": "https://api.github.com/users/JarvisCraft/following{/other_user}", "gists_url": "https://api.github.com/users/JarvisCraft/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarvisCraft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarvisCraft/subscriptions", "organizations_url": "https://api.github.com/users/JarvisCraft/orgs", "repos_url": "https://api.github.com/users/JarvisCraft/repos", "events_url": "https://api.github.com/users/JarvisCraft/events{/privacy}", "received_events_url": "https://api.github.com/users/JarvisCraft/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarvisCraft", "id": 7693005, "node_id": "MDQ6VXNlcjc2OTMwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7693005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarvisCraft", "html_url": "https://github.com/JarvisCraft", "followers_url": "https://api.github.com/users/JarvisCraft/followers", "following_url": "https://api.github.com/users/JarvisCraft/following{/other_user}", "gists_url": "https://api.github.com/users/JarvisCraft/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarvisCraft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarvisCraft/subscriptions", "organizations_url": "https://api.github.com/users/JarvisCraft/orgs", "repos_url": "https://api.github.com/users/JarvisCraft/repos", "events_url": "https://api.github.com/users/JarvisCraft/events{/privacy}", "received_events_url": "https://api.github.com/users/JarvisCraft/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91931ec2fcb67a8e61080a97345c828a875c86ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/91931ec2fcb67a8e61080a97345c828a875c86ec", "html_url": "https://github.com/rust-lang/rust/commit/91931ec2fcb67a8e61080a97345c828a875c86ec"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "705141614e252288bb9cee3b5e4d9ac9ed34ddef", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afae9576dcff73e0b674286be3636d9a101a60f7/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afae9576dcff73e0b674286be3636d9a101a60f7/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=afae9576dcff73e0b674286be3636d9a101a60f7", "patch": "@@ -115,7 +115,7 @@ pub fn expand_test_or_bench(\n             // reworked in the future to not need it, it'd be nice.\n             _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n         };\n-        err.span_label(attr_sp, \"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n+        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\")\n             .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n             .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", \"#[cfg(test)]\", Applicability::MaybeIncorrect)\n             .emit();"}, {"sha": "fc2c5f62bedb07fe57cfce9a715ddf884c0c5b0b", "filename": "src/test/ui/test-attrs/test-on-not-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afae9576dcff73e0b674286be3636d9a101a60f7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afae9576dcff73e0b674286be3636d9a101a60f7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=afae9576dcff73e0b674286be3636d9a101a60f7", "patch": "@@ -2,7 +2,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:3:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | mod test {}\n    | ----------- expected a non-associated function, found a module\n    |\n@@ -15,7 +15,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:6:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | / mod loooooooooooooong_teeeeeeeeeest {\n LL | |     /*\n LL | |     this is a comment\n@@ -34,7 +34,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:20:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | extern \"C\" {}\n    | ------------- expected a non-associated function, found an extern block\n    |\n@@ -47,7 +47,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:23:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | trait Foo {}\n    | ------------ expected a non-associated function, found a trait\n    |\n@@ -60,7 +60,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:26:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | impl Foo for i32 {}\n    | ------------------- expected a non-associated function, found an implementation\n    |\n@@ -73,7 +73,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:29:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | const FOO: i32 = -1_i32;\n    | ------------------------ expected a non-associated function, found a constant item\n    |\n@@ -86,7 +86,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:32:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | static BAR: u64 = 10_000_u64;\n    | ----------------------------- expected a non-associated function, found a static item\n    |\n@@ -99,7 +99,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:35:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | / enum MyUnit {\n LL | |     Unit,\n LL | | }\n@@ -114,7 +114,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:40:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | struct NewI32(i32);\n    | ------------------- expected a non-associated function, found a struct\n    |\n@@ -127,7 +127,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:43:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | / union Spooky {\n LL | |     x: i32,\n LL | |     y: u32,\n@@ -143,7 +143,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:50:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL |   #[derive(Copy, Clone, Debug)]\n LL | / struct MoreAttrs {\n LL | |     a: i32,\n@@ -160,7 +160,7 @@ warning: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:61:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | foo!();\n    | ------- expected a non-associated function, found an item macro invocation\n    |"}, {"sha": "371d642c15d1d43b468213be0535284e9dc96d05", "filename": "src/tools/rust-analyzer/crates/ide-db/src/imports/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afae9576dcff73e0b674286be3636d9a101a60f7/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afae9576dcff73e0b674286be3636d9a101a60f7/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=afae9576dcff73e0b674286be3636d9a101a60f7", "patch": "@@ -225,7 +225,7 @@ fn path_cmp_short(a: &ast::Path, b: &ast::Path) -> Ordering {\n }\n \n /// Compares two paths, if one ends earlier than the other the has_tl parameters decide which is\n-/// greater as a a path that has a tree list should be greater, while one that just ends without\n+/// greater as a path that has a tree list should be greater, while one that just ends without\n /// a tree list should be considered less.\n pub(super) fn use_tree_path_cmp(\n     a: &ast::Path,"}, {"sha": "ac10721d95514049baa41f351b7a2a4c0a989811", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afae9576dcff73e0b674286be3636d9a101a60f7/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afae9576dcff73e0b674286be3636d9a101a60f7/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=afae9576dcff73e0b674286be3636d9a101a60f7", "patch": "@@ -132,7 +132,7 @@ where\n \n             let ext = span.extensions();\n \n-            // `FormattedFields` is a a formatted representation of the span's\n+            // `FormattedFields` is a formatted representation of the span's\n             // fields, which is stored in its extensions by the `fmt` layer's\n             // `new_span` method. The fields will have been formatted\n             // by the same field formatter that's provided to the event"}]}