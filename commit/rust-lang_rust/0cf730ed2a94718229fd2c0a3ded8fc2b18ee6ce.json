{"sha": "0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjczMGVkMmE5NDcxODIyOWZkMmMwYTNkZWQ4ZmMyYjE4ZWU2Y2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-23T00:32:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-23T00:32:57Z"}, "message": "core: Split up result extensions by kind bounds", "tree": {"sha": "db1b9a6e490fc6ea609f9c2ed63ab9701b5891aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1b9a6e490fc6ea609f9c2ed63ab9701b5891aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce", "html_url": "https://github.com/rust-lang/rust/commit/0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce7b8037286731117e7709974595f1ae5bc67bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7b8037286731117e7709974595f1ae5bc67bce", "html_url": "https://github.com/rust-lang/rust/commit/ce7b8037286731117e7709974595f1ae5bc67bce"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "a5badd92610ce13aeb9cac5ca66b239d7d53ef52", "filename": "src/libcore/result.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=0cf730ed2a94718229fd2c0a3ded8fc2b18ee6ce", "patch": "@@ -180,23 +180,11 @@ fn map_err<T: copy, E, F: copy>(res: result<T, E>, op: fn(E) -> F)\n     }\n }\n \n-impl extensions<T:copy, E:copy> for result<T,E> {\n-    fn get() -> T { get(self) }\n-\n-    fn get_err() -> E { get_err(self) }\n-\n+impl extensions<T, E> for result<T, E> {\n     fn is_success() -> bool { is_success(self) }\n \n     fn is_failure() -> bool { is_failure(self) }\n \n-    fn chain<U:copy>(op: fn(T) -> result<U,E>) -> result<U,E> {\n-        chain(self, op)\n-    }\n-\n-    fn chain_err<F:copy>(op: fn(E) -> result<T,F>) -> result<T,F> {\n-        chain_err(self, op)\n-    }\n-\n     fn iter(f: fn(T)) {\n         alt self {\n           ok(t) { f(t) }\n@@ -210,19 +198,37 @@ impl extensions<T:copy, E:copy> for result<T,E> {\n           err(e) { f(e) }\n         }\n     }\n+}\n+\n+impl extensions<T:copy, E> for result<T, E> {\n+    fn get() -> T { get(self) }\n+\n+    fn map_err<F:copy>(op: fn(E) -> F) -> result<T,F> {\n+        alt self {\n+          ok(t) { ok(t) }\n+          err(e) { err(op(e)) }\n+        }\n+    }\n+}\n+\n+impl extensions<T, E:copy> for result<T, E> {\n+    fn get_err() -> E { get_err(self) }\n \n     fn map<U:copy>(op: fn(T) -> U) -> result<U,E> {\n         alt self {\n           ok(t) { ok(op(t)) }\n           err(e) { err(e) }\n         }\n     }\n+}\n \n-    fn map_err<F:copy>(op: fn(E) -> F) -> result<T,F> {\n-        alt self {\n-          ok(t) { ok(t) }\n-          err(e) { err(op(e)) }\n-        }\n+impl extensions<T:copy, E:copy> for result<T,E> {\n+    fn chain<U:copy>(op: fn(T) -> result<U,E>) -> result<U,E> {\n+        chain(self, op)\n+    }\n+\n+    fn chain_err<F:copy>(op: fn(E) -> result<T,F>) -> result<T,F> {\n+        chain_err(self, op)\n     }\n }\n "}]}