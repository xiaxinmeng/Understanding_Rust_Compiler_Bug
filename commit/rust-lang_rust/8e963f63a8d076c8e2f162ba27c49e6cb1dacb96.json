{"sha": "8e963f63a8d076c8e2f162ba27c49e6cb1dacb96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTYzZjYzYThkMDc2YzhlMmYxNjJiYTI3YzQ5ZTZjYjFkYWNiOTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-02T23:23:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-02T23:23:49Z"}, "message": "Add trace and trap helpers to trans for low level diagnostics.", "tree": {"sha": "a3070ffd22701b441b51c1b395ff6a01169c9ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3070ffd22701b441b51c1b395ff6a01169c9ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e963f63a8d076c8e2f162ba27c49e6cb1dacb96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e963f63a8d076c8e2f162ba27c49e6cb1dacb96", "html_url": "https://github.com/rust-lang/rust/commit/8e963f63a8d076c8e2f162ba27c49e6cb1dacb96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e963f63a8d076c8e2f162ba27c49e6cb1dacb96/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3ed6139a6fc6fda15403d0b5679535959945e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3ed6139a6fc6fda15403d0b5679535959945e5", "html_url": "https://github.com/rust-lang/rust/commit/dd3ed6139a6fc6fda15403d0b5679535959945e5"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "d091e3ad93854becff332cf68ca71ab1e4705390", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e963f63a8d076c8e2f162ba27c49e6cb1dacb96/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e963f63a8d076c8e2f162ba27c49e6cb1dacb96/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8e963f63a8d076c8e2f162ba27c49e6cb1dacb96", "patch": "@@ -4186,6 +4186,24 @@ fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n     ret intrinsics;\n }\n \n+\n+fn trace_str(@block_ctxt cx, str s) {\n+    trans_upcall(cx, \"upcall_trace_str\", vec(p2i(C_cstr(cx.fcx.ccx, s))));\n+}\n+\n+fn trace_word(@block_ctxt cx, ValueRef v) {\n+    trans_upcall(cx, \"upcall_trace_word\", vec(v));\n+}\n+\n+fn trace_ptr(@block_ctxt cx, ValueRef v) {\n+    trace_word(cx, cx.build.PtrToInt(v, T_int()));\n+}\n+\n+fn trap(@block_ctxt bcx) {\n+    let vec[ValueRef] v = vec();\n+    bcx.build.Call(bcx.fcx.ccx.intrinsics.get(\"llvm.trap\"), v);\n+}\n+\n fn check_module(ModuleRef llmod) {\n     auto pm = mk_pass_manager();\n     llvm.LLVMAddVerifierPass(pm.llpm);"}]}