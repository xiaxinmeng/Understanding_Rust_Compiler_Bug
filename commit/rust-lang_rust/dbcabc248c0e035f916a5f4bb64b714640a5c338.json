{"sha": "dbcabc248c0e035f916a5f4bb64b714640a5c338", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiY2FiYzI0OGMwZTAzNWY5MTZhNWY0YmI2NGI3MTQ2NDBhNWMzMzg=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-04T12:14:41Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-04T12:37:03Z"}, "message": "instantiate_opaque_types LocalDefId", "tree": {"sha": "43792cdd867b40133a2d71b5c2040091429dccd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43792cdd867b40133a2d71b5c2040091429dccd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbcabc248c0e035f916a5f4bb64b714640a5c338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbcabc248c0e035f916a5f4bb64b714640a5c338", "html_url": "https://github.com/rust-lang/rust/commit/dbcabc248c0e035f916a5f4bb64b714640a5c338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbcabc248c0e035f916a5f4bb64b714640a5c338/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20d6941be7039eb7fad9a4f893792a77d65bc792", "url": "https://api.github.com/repos/rust-lang/rust/commits/20d6941be7039eb7fad9a4f893792a77d65bc792", "html_url": "https://github.com/rust-lang/rust/commit/20d6941be7039eb7fad9a4f893792a77d65bc792"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "8cebd3679345f6e84afe5104eaa3edb6d4c0f34e", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=dbcabc248c0e035f916a5f4bb64b714640a5c338", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Err(terr) = self.eq_opaque_type_and_type(\n             mir_output_ty,\n             normalized_output_ty,\n-            self.mir_def_id.to_def_id(),\n+            self.mir_def_id,\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n         ) {\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n                 user_provided_output_ty,\n-                self.mir_def_id.to_def_id(),\n+                self.mir_def_id,\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n             ) {"}, {"sha": "3532b6de003ba1d24054f8be92b02c48628354cd", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=dbcabc248c0e035f916a5f4bb64b714640a5c338", "patch": "@@ -1144,7 +1144,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // When you have `let x: impl Foo = ...` in a closure,\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n-                let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id.to_def_id());\n+                let parent_def_id =\n+                    self.tcx().closure_base_def_id(self.mir_def_id.to_def_id()).expect_local();\n                 return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n             } else {\n                 return Err(terr);\n@@ -1208,7 +1209,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         revealed_ty: Ty<'tcx>,\n         anon_ty: Ty<'tcx>,\n-        anon_owner_def_id: DefId,\n+        anon_owner_def_id: LocalDefId,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -1238,8 +1239,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n-        let concrete_opaque_types =\n-            &tcx.typeck_tables_of(anon_owner_def_id.expect_local()).concrete_opaque_types;\n+        let concrete_opaque_types = &tcx.typeck_tables_of(anon_owner_def_id).concrete_opaque_types;\n         let mut opaque_type_values = Vec::new();\n \n         debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", self.mir_def_id);"}, {"sha": "b60531833bd41ae997956f33e7f72a938cb4d4e2", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=dbcabc248c0e035f916a5f4bb64b714640a5c338", "patch": "@@ -108,7 +108,7 @@ pub enum GenerateMemberConstraints {\n pub trait InferCtxtExt<'tcx> {\n     fn instantiate_opaque_types<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_def_id: DefId,\n+        parent_def_id: LocalDefId,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n         value: &T,\n@@ -184,7 +184,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `value_span` -- the span where the value came from, used in error reporting\n     fn instantiate_opaque_types<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_def_id: DefId,\n+        parent_def_id: LocalDefId,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n         value: &T,\n@@ -986,7 +986,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n struct Instantiator<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    parent_def_id: DefId,\n+    parent_def_id: LocalDefId,\n     body_id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n     value_span: Span,\n@@ -1043,8 +1043,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                         let parent_def_id = self.parent_def_id;\n                         let def_scope_default = || {\n                             let opaque_parent_hir_id = tcx.hir().get_parent_item(opaque_hir_id);\n-                            parent_def_id\n-                                == tcx.hir().local_def_id(opaque_parent_hir_id).to_def_id()\n+                            parent_def_id == tcx.hir().local_def_id(opaque_parent_hir_id)\n                         };\n                         let (in_definition_scope, origin) = match tcx.hir().find(opaque_hir_id) {\n                             Some(Node::Item(item)) => match item.kind {\n@@ -1053,18 +1052,14 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                     impl_trait_fn: Some(parent),\n                                     origin,\n                                     ..\n-                                }) => (parent == self.parent_def_id, origin),\n+                                }) => (parent == self.parent_def_id.to_def_id(), origin),\n                                 // Named `type Foo = impl Bar;`\n                                 hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                                     impl_trait_fn: None,\n                                     origin,\n                                     ..\n                                 }) => (\n-                                    may_define_opaque_type(\n-                                        tcx,\n-                                        self.parent_def_id.expect_local(),\n-                                        opaque_hir_id,\n-                                    ),\n+                                    may_define_opaque_type(tcx, self.parent_def_id, opaque_hir_id),\n                                     origin,\n                                 ),\n                                 _ => (def_scope_default(), hir::OpaqueTyOrigin::Misc),"}, {"sha": "e564b01b11721e65b70d811a8dc098e2df40335c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcabc248c0e035f916a5f4bb64b714640a5c338/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dbcabc248c0e035f916a5f4bb64b714640a5c338", "patch": "@@ -1321,8 +1321,8 @@ fn check_fn<'a, 'tcx>(\n         fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n-    let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id());\n-    let outer_hir_id = hir.as_local_hir_id(outer_def_id.expect_local());\n+    let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id()).expect_local();\n+    let outer_hir_id = hir.as_local_hir_id(outer_def_id);\n     GatherLocalsVisitor { fcx: &fcx, parent_id: outer_hir_id }.visit_body(body);\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n@@ -3427,7 +3427,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (value, opaque_type_map) =\n             self.register_infer_ok_obligations(self.instantiate_opaque_types(\n-                parent_def_id.to_def_id(),\n+                parent_def_id,\n                 self.body_id,\n                 self.param_env,\n                 value,"}]}