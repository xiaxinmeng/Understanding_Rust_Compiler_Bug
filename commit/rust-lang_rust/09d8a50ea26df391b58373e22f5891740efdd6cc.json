{"sha": "09d8a50ea26df391b58373e22f5891740efdd6cc", "node_id": "C_kwDOAAsO6NoAKDA5ZDhhNTBlYTI2ZGYzOTFiNTgzNzNlMjJmNTg5MTc0MGVmZGQ2Y2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T00:46:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T00:46:14Z"}, "message": "Auto merge of #91573 - matthiaskrgr:rollup-wcygm2r, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #91367 (Fix ICE in `check_must_not_suspend_ty()`)\n - #91391 (Simplify --no-headless option for rustdoc-gui tester)\n - #91537 (compiler/rustc_target: make m68k-unknown-linux-gnu use the gnu base)\n - #91554 (Update doc about code block edition attributes)\n - #91563 (Bump download-ci-llvm-stamp for LLD inclusion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5d322dc8222d8d595114e0b8a5019b0503c437b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d322dc8222d8d595114e0b8a5019b0503c437b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d8a50ea26df391b58373e22f5891740efdd6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d8a50ea26df391b58373e22f5891740efdd6cc", "html_url": "https://github.com/rust-lang/rust/commit/09d8a50ea26df391b58373e22f5891740efdd6cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d8a50ea26df391b58373e22f5891740efdd6cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2116acae59654bfab2a9729a024f3e2fd6d4b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2116acae59654bfab2a9729a024f3e2fd6d4b02", "html_url": "https://github.com/rust-lang/rust/commit/e2116acae59654bfab2a9729a024f3e2fd6d4b02"}, {"sha": "d056cbf8d6648ce6c94b97586df3bed8b66854ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/d056cbf8d6648ce6c94b97586df3bed8b66854ed", "html_url": "https://github.com/rust-lang/rust/commit/d056cbf8d6648ce6c94b97586df3bed8b66854ed"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "5671b59c63fda700ea6229331d733f637fefc93e", "filename": "compiler/rustc_target/src/spec/m68k_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -2,7 +2,7 @@ use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_base::opts();\n+    let mut base = super::linux_gnu_base::opts();\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "37e601fa40442e9bec20b50650bbfaccd6e74609", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -536,22 +536,28 @@ pub fn check_must_not_suspend_ty<'tcx>(\n             }\n             has_emitted\n         }\n-        ty::Tuple(ref tys) => {\n+        ty::Tuple(_) => {\n             let mut has_emitted = false;\n-            let spans = if let Some(hir::ExprKind::Tup(comps)) = data.expr.map(|e| &e.kind) {\n-                debug_assert_eq!(comps.len(), tys.len());\n-                comps.iter().map(|e| e.span).collect()\n-            } else {\n-                vec![]\n+            let comps = match data.expr.map(|e| &e.kind) {\n+                Some(hir::ExprKind::Tup(comps)) => {\n+                    debug_assert_eq!(comps.len(), ty.tuple_fields().count());\n+                    Some(comps)\n+                }\n+                _ => None,\n             };\n-            for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n+            for (i, ty) in ty.tuple_fields().enumerate() {\n                 let descr_post = &format!(\" in tuple element {}\", i);\n-                let span = *spans.get(i).unwrap_or(&data.source_span);\n+                let span = comps.and_then(|c| c.get(i)).map(|e| e.span).unwrap_or(data.source_span);\n                 if check_must_not_suspend_ty(\n                     fcx,\n                     ty,\n                     hir_id,\n-                    SuspendCheckData { descr_post, source_span: span, ..data },\n+                    SuspendCheckData {\n+                        descr_post,\n+                        expr: comps.and_then(|comps| comps.get(i)),\n+                        source_span: span,\n+                        ..data\n+                    },\n                 ) {\n                     has_emitted = true;\n                 }"}, {"sha": "ef635ee26df57bd40cbda17deb9be334587c7f98", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/88069\n+Last change is for: https://github.com/rust-lang/rust/pull/91229"}, {"sha": "aea55d4f4b69cb0a19a8c0f589e584def8cbbfd2", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -359,9 +359,8 @@ are added.\n # fn foo() {}\n ```\n \n-`edition2018` tells `rustdoc` that the code sample should be compiled using\n-the 2018 edition of Rust. Similarly, you can specify `edition2015` to compile\n-the code with the 2015 edition.\n+`edition2015`, `edition2018` and `edition2021` tell `rustdoc`\n+that the code sample should be compiled using the respective edition of Rust.\n \n ```rust\n /// Only runs on the 2018 edition."}, {"sha": "bf9a5a62620d96002aa360bebbd0f554b9962f69", "filename": "src/test/ui/typeck/issue-91334.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.rs?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for the ICE described in issue #91334.\n+\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected one of\n+// error-pattern: mismatched closing delimiter\n+// error-pattern: mismatched types\n+\n+#![feature(generators)]\n+\n+fn f(){||yield(((){),"}, {"sha": "358cc771b7c458e986741377bad39637826e8b4a", "filename": "src/test/ui/typeck/issue-91334.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -0,0 +1,50 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-91334.rs:10:23\n+   |\n+LL | fn f(){||yield(((){),\n+   |       -       -       ^\n+   |       |       |\n+   |       |       unclosed delimiter\n+   |       unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-91334.rs:10:23\n+   |\n+LL | fn f(){||yield(((){),\n+   |       -       -       ^\n+   |       |       |\n+   |       |       unclosed delimiter\n+   |       unclosed delimiter\n+\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `{`\n+  --> $DIR/issue-91334.rs:10:19\n+   |\n+LL | fn f(){||yield(((){),\n+   |                   ^\n+   |                   |\n+   |                   expected one of `)`, `,`, `.`, `?`, or an operator\n+   |                   help: missing `,`\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-91334.rs:10:19\n+   |\n+LL | fn f(){||yield(((){),\n+   |                -  ^^ mismatched closing delimiter\n+   |                |  |\n+   |                |  unclosed delimiter\n+   |                closing delimiter possibly meant for this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-91334.rs:10:8\n+   |\n+LL | fn f(){||yield(((){),\n+   |       -^^^^^^^^^^^^^^^ expected `()`, found generator\n+   |       |\n+   |       help: try adding a return type: `-> [generator@$DIR/issue-91334.rs:10:8: 10:23]`\n+   |\n+   = note: expected unit type `()`\n+              found generator `[generator@$DIR/issue-91334.rs:10:8: 10:23]`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3feb4940d87f837d27422e478eab9044509fdfec", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/09d8a50ea26df391b58373e22f5891740efdd6cc/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=09d8a50ea26df391b58373e22f5891740efdd6cc", "patch": "@@ -172,11 +172,16 @@ async function main(argv) {\n     }\n     files.sort();\n \n+    if (no_headless) {\n+        opts[\"jobs\"] = 1;\n+        console.log(\"`--no-headless` option is active, disabling concurrency for running tests.\");\n+    }\n+\n     console.log(`Running ${files.length} rustdoc-gui (${opts[\"jobs\"]} concurrently) ...`);\n \n     if (opts[\"jobs\"] < 1) {\n         process.setMaxListeners(files.length + 1);\n-    } else {\n+    } else if (!no_headless) {\n         process.setMaxListeners(opts[\"jobs\"] + 1);\n     }\n \n@@ -217,9 +222,7 @@ async function main(argv) {\n                 tests_queue.splice(tests_queue.indexOf(callback), 1);\n             });\n         tests_queue.push(callback);\n-        if (no_headless) {\n-            await tests_queue[i];\n-        } else if (opts[\"jobs\"] > 0 && tests_queue.length >= opts[\"jobs\"]) {\n+        if (opts[\"jobs\"] > 0 && tests_queue.length >= opts[\"jobs\"]) {\n             await Promise.race(tests_queue);\n         }\n     }"}]}