{"sha": "38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZGJjYjJlMzcxOGVhYjRiYWM5ZjVhM2VjODIyNmQ3ZWU0ZjQwYTc=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-03-11T23:53:55Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-03-20T15:43:11Z"}, "message": "Check trait unsafety for defaulted traits", "tree": {"sha": "f315ac84816c98b0251edcf98e1f3f92ff182fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f315ac84816c98b0251edcf98e1f3f92ff182fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "html_url": "https://github.com/rust-lang/rust/commit/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d24297eb6fe16abdf7869c60519650e3490faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d24297eb6fe16abdf7869c60519650e3490faf", "html_url": "https://github.com/rust-lang/rust/commit/01d24297eb6fe16abdf7869c60519650e3490faf"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "0197ee82c77407104edd4647c1a9816a4a8683fa", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "patch": "@@ -39,7 +39,7 @@ pub unsafe trait Send : MarkerTrait {\n     // empty.\n }\n \n-impl Send for .. { }\n+unsafe impl Send for .. { }\n \n impl<T> !Send for *const T { }\n impl<T> !Send for *mut T { }\n@@ -205,7 +205,7 @@ pub unsafe trait Sync : MarkerTrait {\n     // Empty\n }\n \n-impl Sync for .. { }\n+unsafe impl Sync for .. { }\n \n impl<T> !Sync for *const T { }\n impl<T> !Sync for *mut T { }"}, {"sha": "e4926b119d5dbe551808b3e8bb2db99d0afd7d12", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 52, "deletions": 41, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "patch": "@@ -27,55 +27,66 @@ struct UnsafetyChecker<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>\n }\n \n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &'v ast::Item) {\n-        match item.node {\n-            ast::ItemImpl(unsafety, polarity, _, _, _, _) => {\n-                match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n-                    None => {\n-                        // Inherent impl.\n-                        match unsafety {\n-                            ast::Unsafety::Normal => { /* OK */ }\n-                            ast::Unsafety::Unsafe => {\n-                                span_err!(self.tcx.sess, item.span, E0197,\n-                                    \"inherent impls cannot be declared as unsafe\");\n-                            }\n-                        }\n+impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n+    fn check_unsafety_coherence(&mut self, item: &'v ast::Item,\n+                                unsafety: ast::Unsafety,\n+                                polarity: ast::ImplPolarity) {\n+        match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n+            None => {\n+                // Inherent impl.\n+                match unsafety {\n+                    ast::Unsafety::Normal => { /* OK */ }\n+                    ast::Unsafety::Unsafe => {\n+                        span_err!(self.tcx.sess, item.span, E0197,\n+                                  \"inherent impls cannot be declared as unsafe\");\n                     }\n+                }\n+            }\n \n-                    Some(trait_ref) => {\n-                        let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n-                        match (trait_def.unsafety, unsafety, polarity) {\n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Unsafe, ast::ImplPolarity::Negative) => {\n-                                span_err!(self.tcx.sess, item.span, E0198,\n-                                    \"negative implementations are not unsafe\");\n-                            }\n+            Some(trait_ref) => {\n+                let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n+                match (trait_def.unsafety, unsafety, polarity) {\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Unsafe, ast::ImplPolarity::Negative) => {\n+                        span_err!(self.tcx.sess, item.span, E0198,\n+                                  \"negative implementations are not unsafe\");\n+                    }\n \n-                            (ast::Unsafety::Normal, ast::Unsafety::Unsafe, _) => {\n-                                span_err!(self.tcx.sess, item.span, E0199,\n-                                    \"implementing the trait `{}` is not unsafe\",\n-                                            trait_ref.user_string(self.tcx));\n-                            }\n+                    (ast::Unsafety::Normal, ast::Unsafety::Unsafe, _) => {\n+                        span_err!(self.tcx.sess, item.span, E0199,\n+                                  \"implementing the trait `{}` is not unsafe\",\n+                                  trait_ref.user_string(self.tcx));\n+                    }\n \n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Normal, ast::ImplPolarity::Positive) => {\n-                                span_err!(self.tcx.sess, item.span, E0200,\n-                                    \"the trait `{}` requires an `unsafe impl` declaration\",\n-                                            trait_ref.user_string(self.tcx));\n-                            }\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Normal, ast::ImplPolarity::Positive) => {\n+                        span_err!(self.tcx.sess, item.span, E0200,\n+                                  \"the trait `{}` requires an `unsafe impl` declaration\",\n+                                  trait_ref.user_string(self.tcx));\n+                    }\n \n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Normal, ast::ImplPolarity::Negative) |\n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Unsafe, ast::ImplPolarity::Positive) |\n-                            (ast::Unsafety::Normal, ast::Unsafety::Normal, _) => {\n-                                /* OK */\n-                            }\n-                        }\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Normal, ast::ImplPolarity::Negative) |\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Unsafe, ast::ImplPolarity::Positive) |\n+                    (ast::Unsafety::Normal, ast::Unsafety::Normal, _) => {\n+                        /* OK */\n                     }\n                 }\n             }\n+        }\n+    }\n+}\n+\n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &'v ast::Item) {\n+        match item.node {\n+            ast::ItemDefaultImpl(unsafety, _) => {\n+                self.check_unsafety_coherence(item, unsafety, ast::ImplPolarity::Positive);\n+            }\n+            ast::ItemImpl(unsafety, polarity, _, _, _, _) => {\n+                self.check_unsafety_coherence(item, unsafety, polarity);\n+            }\n             _ => { }\n         }\n "}, {"sha": "a5b317307379e82cfa80d034d4a95e8bca787c6c", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=38dbcb2e3718eab4bac9f5a3ec8226d7ee4f40a7", "patch": "@@ -21,4 +21,14 @@ impl MyTrait for .. {}\n impl MyTrait for .. {}\n //~^ ERROR conflicting implementations for trait `MyTrait`\n \n+trait MySafeTrait: MarkerTrait {}\n+\n+unsafe impl MySafeTrait for .. {}\n+//~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+\n+unsafe trait MyUnsafeTrait: MarkerTrait {}\n+\n+impl MyUnsafeTrait for .. {}\n+//~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+\n fn main() {}"}]}