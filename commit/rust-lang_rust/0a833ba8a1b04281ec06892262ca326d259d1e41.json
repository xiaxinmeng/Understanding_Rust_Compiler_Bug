{"sha": "0a833ba8a1b04281ec06892262ca326d259d1e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhODMzYmE4YTFiMDQyODFlYzA2ODkyMjYyY2EzMjZkMjU5ZDFlNDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-25T13:49:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:32:04Z"}, "message": "[WIP]", "tree": {"sha": "e040e0c74342ff81d114a4a04a5bafa40b7d29f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e040e0c74342ff81d114a4a04a5bafa40b7d29f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a833ba8a1b04281ec06892262ca326d259d1e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a833ba8a1b04281ec06892262ca326d259d1e41", "html_url": "https://github.com/rust-lang/rust/commit/0a833ba8a1b04281ec06892262ca326d259d1e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a833ba8a1b04281ec06892262ca326d259d1e41/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46c8bfb7e2803f50cde344bd21e8f9deb59d62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46c8bfb7e2803f50cde344bd21e8f9deb59d62d", "html_url": "https://github.com/rust-lang/rust/commit/b46c8bfb7e2803f50cde344bd21e8f9deb59d62d"}], "stats": {"total": 110, "additions": 9, "deletions": 101}, "files": [{"sha": "af199c757e0059383dc996193ff3974854777e2f", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a833ba8a1b04281ec06892262ca326d259d1e41/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0a833ba8a1b04281ec06892262ca326d259d1e41/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=0a833ba8a1b04281ec06892262ca326d259d1e41", "patch": "@@ -5,16 +5,12 @@ version = \"0.0.0\"\n \n [dependencies]\n core = { path = \"./sysroot_src/src/libcore\" }\n-compiler_builtins = \"0.1\"\n-alloc = { path = \"./sysroot_src/src/liballoc\" }\n-std = { path = \"./sysroot_src/src/libstd\" }\n-\n-alloc_system = { path = \"./alloc_system\" }\n+compiler_builtins = { version = \"0.1\", features = [\"rustc-dep-of-std\"] }\n \n [patch.crates-io]\n rustc-std-workspace-core = { path = \"./sysroot_src/src/tools/rustc-std-workspace-core\" }\n rustc-std-workspace-alloc = { path = \"./rustc-std-workspace-alloc\" }\n-#compiler_builtins = { path = \"./compiler_builtins\" }\n+compiler_builtins = { path = \"./compiler-builtins\" }\n \n [profile.release]\n debug = true"}, {"sha": "ea5e4a169e566f1e337fe43c0952aad77ef891af", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a833ba8a1b04281ec06892262ca326d259d1e41/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0a833ba8a1b04281ec06892262ca326d259d1e41/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=0a833ba8a1b04281ec06892262ca326d259d1e41", "patch": "@@ -4,8 +4,6 @@ cd $(dirname \"$0\")\n \n # Cleanup for previous run\n #     v Clean target dir except for build scripts and incremental cache\n-rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} || true\n-rm Cargo.lock 2>/dev/null || true\n rm -r sysroot 2>/dev/null || true\n \n # FIXME find a better way to get the target triple"}, {"sha": "36da64f20e96206ac279f700586817c8abe3bdf8", "filename": "build_sysroot/compiler-builtins", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fcompiler-builtins?ref=0a833ba8a1b04281ec06892262ca326d259d1e41", "patch": "@@ -0,0 +1 @@\n+Subproject commit 36da64f20e96206ac279f700586817c8abe3bdf8"}, {"sha": "724a637a2013514608beeaf9f094a64771f20394", "filename": "build_sysroot/compiler_builtins/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b46c8bfb7e2803f50cde344bd21e8f9deb59d62d/build_sysroot%2Fcompiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b46c8bfb7e2803f50cde344bd21e8f9deb59d62d/build_sysroot%2Fcompiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fcompiler_builtins%2FCargo.toml?ref=b46c8bfb7e2803f50cde344bd21e8f9deb59d62d", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-name = \"compiler_builtins\"\n-# Make sure the `compiler_builtins` from crates.io doesn't take precedence over this\n-# replacement by specifying a higher version than the one on crates.io.\n-version = \"0.1.100\"\n-authors = [\"bjorn3 <bjorn3@users.noreply.github.com>\"]\n-edition = \"2018\"\n-\n-[lib]\n-name = \"compiler_builtins\"\n-path = \"lib.rs\"\n-test = false\n-doc = false\n-\n-[dependencies]\n-core = { path = \"../sysroot_src/src/libcore\" }\n-\n-[features]\n-rustc-dep-of-std = []\n-c = []"}, {"sha": "79a54a3a4b8971750913793423de1501915ba18b", "filename": "build_sysroot/compiler_builtins/lib.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b46c8bfb7e2803f50cde344bd21e8f9deb59d62d/build_sysroot%2Fcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46c8bfb7e2803f50cde344bd21e8f9deb59d62d/build_sysroot%2Fcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fcompiler_builtins%2Flib.rs?ref=b46c8bfb7e2803f50cde344bd21e8f9deb59d62d", "patch": "@@ -1,9 +0,0 @@\n-#![feature(compiler_builtins, staged_api)]\n-#![compiler_builtins]\n-#![no_std]\n-\n-#![unstable(\n-    feature = \"compiler_builtins_lib\",\n-    reason = \"Compiler builtins. Will never become stable.\",\n-    issue = \"0\"\n-)]"}, {"sha": "497f5fbdb2d03a5c3daaf93402492eb5a331d275", "filename": "example/alloc_example.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a833ba8a1b04281ec06892262ca326d259d1e41/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a833ba8a1b04281ec06892262ca326d259d1e41/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=0a833ba8a1b04281ec06892262ca326d259d1e41", "patch": "@@ -1,16 +1,6 @@\n-#![feature(start, box_syntax, alloc_system, core_intrinsics, alloc_prelude, alloc_error_handler)]\n+#![feature(start, box_syntax, core_intrinsics, alloc_error_handler)]\n #![no_std]\n \n-extern crate alloc;\n-extern crate alloc_system;\n-\n-use alloc::prelude::v1::*;\n-\n-use alloc_system::System;\n-\n-#[global_allocator]\n-static ALLOC: System = System;\n-\n #[link(name = \"c\")]\n extern \"C\" {\n     fn puts(s: *const u8);\n@@ -23,19 +13,12 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     }\n }\n \n-#[alloc_error_handler]\n-fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n-    unsafe {\n-        core::intrinsics::abort();\n-    }\n-}\n-\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let world: Box<&str> = box \"Hello World!\\0\";\n-    unsafe {\n-        puts(*world as *const str as *const u8);\n+    extern \"C\" {\n+        fn __rust_u128_mulo(a: u128, b: u128) -> (u128, bool);\n     }\n \n+    assert_eq!(unsafe { __rust_u128_mulo(353985398u128,  932490u128).0 }, 330087843781020u128);\n     0\n }"}, {"sha": "8a4e79d544ba42821aaf6562956525699f8f7459", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a833ba8a1b04281ec06892262ca326d259d1e41/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a833ba8a1b04281ec06892262ca326d259d1e41/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0a833ba8a1b04281ec06892262ca326d259d1e41", "patch": "@@ -243,6 +243,8 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n         \"false\"\n     }).unwrap();\n \n+    flags_builder.set(\"opt_level\", \"best\").unwrap();\n+\n     // FIXME enable again when https://github.com/CraneStation/cranelift/issues/664 is fixed\n     /*\n     use rustc::session::config::OptLevel;"}, {"sha": "2b8f9ad733b623c3d7c49ed9a13e244f51a12f72", "filename": "test.sh", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0a833ba8a1b04281ec06892262ca326d259d1e41/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0a833ba8a1b04281ec06892262ca326d259d1e41/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=0a833ba8a1b04281ec06892262ca326d259d1e41", "patch": "@@ -4,52 +4,9 @@ source config.sh\n rm -r target/out || true\n mkdir -p target/out/clif\n \n-echo \"[BUILD] mini_core\"\n-$RUSTC example/mini_core.rs --crate-name mini_core --crate-type dylib\n-\n-echo \"[BUILD] example\"\n-$RUSTC example/example.rs --crate-type lib\n-\n-echo \"[JIT] mini_core_hello_world\"\n-SHOULD_RUN=1 JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin example/mini_core_hello_world.rs --cfg jit\n-\n-echo \"[AOT] mini_core_hello_world\"\n-$RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin\n-./target/out/mini_core_hello_world abc bcd\n-\n-echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin\n-./target/out/arbitrary_self_types_pointers_and_wrappers\n-\n echo \"[BUILD] sysroot\"\n time ./build_sysroot/build_sysroot.sh\n \n echo \"[BUILD+RUN] alloc_example\"\n $RUSTC example/alloc_example.rs --crate-type bin\n ./target/out/alloc_example\n-\n-echo \"[BUILD+RUN] std_example\"\n-$RUSTC example/std_example.rs --crate-type bin\n-./target/out/std_example\n-\n-echo \"[BUILD] mod_bench\"\n-$RUSTC example/mod_bench.rs --crate-type bin\n-\n-# FIXME linker gives multiple definitions error on Linux\n-#echo \"[BUILD] sysroot in release mode\"\n-#./build_sysroot/build_sysroot.sh --release\n-\n-COMPILE_MOD_BENCH_INLINE=\"$RUSTC example/mod_bench.rs --crate-type bin -Zmir-opt-level=3 -O --crate-name mod_bench_inline\"\n-COMPILE_MOD_BENCH_LLVM_0=\"rustc example/mod_bench.rs --crate-type bin -Copt-level=0 -o target/out/mod_bench_llvm_0 -Cpanic=abort\"\n-COMPILE_MOD_BENCH_LLVM_1=\"rustc example/mod_bench.rs --crate-type bin -Copt-level=1 -o target/out/mod_bench_llvm_1 -Cpanic=abort\"\n-COMPILE_MOD_BENCH_LLVM_2=\"rustc example/mod_bench.rs --crate-type bin -Copt-level=2 -o target/out/mod_bench_llvm_2 -Cpanic=abort\"\n-COMPILE_MOD_BENCH_LLVM_3=\"rustc example/mod_bench.rs --crate-type bin -Copt-level=3 -o target/out/mod_bench_llvm_3 -Cpanic=abort\"\n-\n-# Use 100 runs, because a single compilations doesn't take more than ~150ms, so it isn't very slow\n-hyperfine --runs 100 \"$COMPILE_MOD_BENCH_INLINE\" \"$COMPILE_MOD_BENCH_LLVM_0\" \"$COMPILE_MOD_BENCH_LLVM_1\" \"$COMPILE_MOD_BENCH_LLVM_2\" \"$COMPILE_MOD_BENCH_LLVM_3\"\n-\n-echo\n-echo \"[Bench] mod_bench\"\n-hyperfine ./target/out/mod_bench{,_inline} ./target/out/mod_bench_llvm_*\n-\n-cat target/out/log.txt | sort | uniq -c"}]}