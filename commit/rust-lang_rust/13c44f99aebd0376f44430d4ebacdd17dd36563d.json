{"sha": "13c44f99aebd0376f44430d4ebacdd17dd36563d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYzQ0Zjk5YWViZDAzNzZmNDQ0MzBkNGViYWNkZDE3ZGQzNjU2M2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-13T00:50:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-13T00:54:27Z"}, "message": "stdlib: Make pipe and waitpid use interior vectors", "tree": {"sha": "3c6d04fa30aec1be865bb6ec0d98023663d42379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6d04fa30aec1be865bb6ec0d98023663d42379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13c44f99aebd0376f44430d4ebacdd17dd36563d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13c44f99aebd0376f44430d4ebacdd17dd36563d", "html_url": "https://github.com/rust-lang/rust/commit/13c44f99aebd0376f44430d4ebacdd17dd36563d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13c44f99aebd0376f44430d4ebacdd17dd36563d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53cfb979b20b357b09e4fcd63278c1f58e19c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53cfb979b20b357b09e4fcd63278c1f58e19c5e", "html_url": "https://github.com/rust-lang/rust/commit/e53cfb979b20b357b09e4fcd63278c1f58e19c5e"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "0a4c391de195540af73e10faf765c0d622b9e975", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13c44f99aebd0376f44430d4ebacdd17dd36563d/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c44f99aebd0376f44430d4ebacdd17dd36563d/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=13c44f99aebd0376f44430d4ebacdd17dd36563d", "patch": "@@ -29,8 +29,8 @@ native \"cdecl\" mod libc = \"\" {\n     fn getenv(sbuf n) -> sbuf;\n     fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n     fn unsetenv(sbuf n) -> int;\n-    fn pipe(vbuf buf) -> int;\n-    fn waitpid(int pid, vbuf status, int options) -> int;\n+    fn pipe(*mutable int buf) -> int;\n+    fn waitpid(int pid, &mutable int status, int options) -> int;\n }\n \n native \"cdecl\" mod libc_ivec = \"\" {\n@@ -67,16 +67,16 @@ fn target_os() -> str { ret \"linux\"; }\n fn dylib_filename(str base) -> str { ret \"lib\" + base + \".so\"; }\n \n fn pipe() -> tup(int, int) {\n-    let vec[mutable int] fds = [mutable 0, 0];\n-    assert (os::libc::pipe(vec::buf(fds)) == 0);\n-    ret tup(fds.(0), fds.(1));\n+    auto fds = tup(mutable 0, 0);\n+    assert (os::libc::pipe(ptr::addr_of(fds._0)) == 0);\n+    ret tup(fds._0, fds._1);\n }\n \n fn fd_FILE(int fd) -> libc::FILE { ret libc::fdopen(fd, str::buf(\"r\")); }\n \n fn waitpid(int pid) -> int {\n-    let vec[mutable int] status = [mutable 0];\n-    assert (os::libc::waitpid(pid, vec::buf(status), 0) != -1);\n+    auto status = 0;\n+    assert (os::libc::waitpid(pid, status, 0) != -1);\n     ret status.(0);\n }\n "}, {"sha": "5b3e30f0398d07d494001ee3e76ba396a1152835", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13c44f99aebd0376f44430d4ebacdd17dd36563d/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c44f99aebd0376f44430d4ebacdd17dd36563d/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=13c44f99aebd0376f44430d4ebacdd17dd36563d", "patch": "@@ -26,8 +26,8 @@ native \"cdecl\" mod libc = \"\" {\n     fn getenv(sbuf n) -> sbuf;\n     fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n     fn unsetenv(sbuf n) -> int;\n-    fn pipe(vbuf buf) -> int;\n-    fn waitpid(int pid, vbuf status, int options) -> int;\n+    fn pipe(*mutable int buf) -> int;\n+    fn waitpid(int pid, &mutable int status, int options) -> int;\n }\n \n native \"cdecl\" mod libc_ivec = \"\" {\n@@ -64,17 +64,17 @@ fn target_os() -> str { ret \"macos\"; }\n fn dylib_filename(str base) -> str { ret \"lib\" + base + \".dylib\"; }\n \n fn pipe() -> tup(int, int) {\n-    let vec[mutable int] fds = [mutable 0, 0];\n-    assert (os::libc::pipe(vec::buf(fds)) == 0);\n-    ret tup(fds.(0), fds.(1));\n+    auto fds = tup(mutable 0, 0);\n+    assert (os::libc::pipe(ptr::addr_of(fds._0)) == 0);\n+    ret tup(fds._0, fds._1);\n }\n \n fn fd_FILE(int fd) -> libc::FILE { ret libc::fdopen(fd, str::buf(\"r\")); }\n \n fn waitpid(int pid) -> int {\n-    let vec[mutable int] status = [mutable 0];\n-    assert (os::libc::waitpid(pid, vec::buf(status), 0) != -1);\n-    ret status.(0);\n+    auto status = 0;\n+    assert (os::libc::waitpid(pid, status, 0) != -1);\n+    ret status;\n }\n \n native \"rust\" mod rustrt {"}, {"sha": "ecb18bed130644ba8b9d8647ba7a76ef7fb48e2b", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13c44f99aebd0376f44430d4ebacdd17dd36563d/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c44f99aebd0376f44430d4ebacdd17dd36563d/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=13c44f99aebd0376f44430d4ebacdd17dd36563d", "patch": "@@ -19,7 +19,7 @@ native \"cdecl\" mod libc = \"\" {\n     fn fseek(FILE f, int offset, int whence) -> int;\n     fn ftell(FILE f) -> int;\n     fn getenv(sbuf n) -> sbuf;\n-    fn _pipe(vbuf fds, uint size, int mode) -> int;\n+    fn _pipe(*mutable int fds, uint size, int mode) -> int;\n }\n \n native \"cdecl\" mod libc_ivec = \"\" {\n@@ -56,10 +56,10 @@ fn target_os() -> str { ret \"win32\"; }\n fn dylib_filename(str base) -> str { ret base + \".dll\"; }\n \n fn pipe() -> tup(int, int) {\n-    let vec[mutable int] fds = [mutable 0, 0];\n-    assert (os::libc::_pipe(vec::buf(fds), 1024u, libc_constants::O_BINARY())\n-                == 0);\n-    ret tup(fds.(0), fds.(1));\n+    auto fds = tup(mutable 0, 0);\n+    assert (os::libc::pipe(ptr::addr_of(fds._0), 1024u,\n+                           libc_constants::O_BINARY()) == 0);\n+    ret tup(fds._0, fds._1);\n }\n \n fn fd_FILE(int fd) -> libc::FILE { ret libc::_fdopen(fd, str::buf(\"r\")); }"}]}