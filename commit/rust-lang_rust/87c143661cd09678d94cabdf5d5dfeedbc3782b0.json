{"sha": "87c143661cd09678d94cabdf5d5dfeedbc3782b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzE0MzY2MWNkMDk2NzhkOTRjYWJkZjVkNWRmZWVkYmMzNzgyYjA=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-02T02:03:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T02:03:28Z"}, "message": "Rollup merge of #87629 - steffahn:consistent_adapter_spelling, r=m-ou-se\n\nConsistent spelling of \"adapter\" in the standard library\n\nChange all occurrences of \"(A|a)daptor\" to \"(A|a)dapter\".\n\nThe spelling \u201cadapter\u201d seems to be significantly more common both in general in the English language and also in the `rust` repository and standard library. I don\u2019t like the inconsistency that\u2019s currently found on pages like https://doc.rust-lang.org/std/iter/trait.Iterator.html. Note however that the Rust book consistently uses the spelling \u201citerator adaptor\u201d.\n\nRelated discussion [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/adapter.20.2F.20adaptor) ([in the archive](https://zulip-archive.rust-lang.org/219381tlibs/60284adapteradaptor.html)).\n\n`@rustbot` label T-libs", "tree": {"sha": "94c0a66d11af4ce0fbdf8ab49e18faffdd516b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c0a66d11af4ce0fbdf8ab49e18faffdd516b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c143661cd09678d94cabdf5d5dfeedbc3782b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhB1JwCRBK7hj4Ov3rIwAA0gAIAHJAoNPoIdFgKi7QFHMgrEUB\n2DbzydST4qJs2lmmSTlbBIAEhJ8LZT5MOM+ut7kQgjeIs3TrCBUwWJV/8Mohb0ev\nR1m+Bwh+OaslrPnHbJGunvsw7BHnGy8X/njDR2laGZcGwMJJHVCEzKn1DKu6aURd\nm7tiKdIsB9lCUZX3FMXDNEK40v8qDhuioZ9YXOOhzl8vLkO5yaIBzwQl/ckBUsRV\nWeQvyfgAXG5VzdDZbdbDrH3kTeROEKItFEYTq5SQb5IeVqNtJdl2sPR46m2YDEIy\nmfqSm+RYIgPuX+oX+tfNIfOMYTBdjXce/jzRceoe76uvVaF1e59tGFyr3QhWDrI=\n=BU7t\n-----END PGP SIGNATURE-----\n", "payload": "tree 94c0a66d11af4ce0fbdf8ab49e18faffdd516b51\nparent 5cf6566df4cf25efc25a42bb96c5c5ea38ab2aec\nparent 8d2bb9389adbd224bdf2c35f33097b8cab304636\nauthor Yuki Okushi <jtitor@2k36.org> 1627869808 +0900\ncommitter GitHub <noreply@github.com> 1627869808 +0900\n\nRollup merge of #87629 - steffahn:consistent_adapter_spelling, r=m-ou-se\n\nConsistent spelling of \"adapter\" in the standard library\n\nChange all occurrences of \"(A|a)daptor\" to \"(A|a)dapter\".\n\nThe spelling \u201cadapter\u201d seems to be significantly more common both in general in the English language and also in the `rust` repository and standard library. I don\u2019t like the inconsistency that\u2019s currently found on pages like https://doc.rust-lang.org/std/iter/trait.Iterator.html. Note however that the Rust book consistently uses the spelling \u201citerator adaptor\u201d.\n\nRelated discussion [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/adapter.20.2F.20adaptor) ([in the archive](https://zulip-archive.rust-lang.org/219381tlibs/60284adapteradaptor.html)).\n\n`@rustbot` label T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c143661cd09678d94cabdf5d5dfeedbc3782b0", "html_url": "https://github.com/rust-lang/rust/commit/87c143661cd09678d94cabdf5d5dfeedbc3782b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c143661cd09678d94cabdf5d5dfeedbc3782b0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cf6566df4cf25efc25a42bb96c5c5ea38ab2aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf6566df4cf25efc25a42bb96c5c5ea38ab2aec", "html_url": "https://github.com/rust-lang/rust/commit/5cf6566df4cf25efc25a42bb96c5c5ea38ab2aec"}, {"sha": "8d2bb9389adbd224bdf2c35f33097b8cab304636", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2bb9389adbd224bdf2c35f33097b8cab304636", "html_url": "https://github.com/rust-lang/rust/commit/8d2bb9389adbd224bdf2c35f33097b8cab304636"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "1f1033b0437f861602be9745e0e0a1dcd9761f33", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=87c143661cd09678d94cabdf5d5dfeedbc3782b0", "patch": "@@ -338,9 +338,9 @@ pub unsafe trait Allocator {\n         Ok(new_ptr)\n     }\n \n-    /// Creates a \"by reference\" adaptor for this instance of `Allocator`.\n+    /// Creates a \"by reference\" adapter for this instance of `Allocator`.\n     ///\n-    /// The returned adaptor also implements `Allocator` and will simply borrow this.\n+    /// The returned adapter also implements `Allocator` and will simply borrow this.\n     #[inline(always)]\n     fn by_ref(&self) -> &Self\n     where"}, {"sha": "537e42f66de1b7ffaf37becc528bedfd5678cfae", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=87c143661cd09678d94cabdf5d5dfeedbc3782b0", "patch": "@@ -694,7 +694,7 @@ pub trait Iterator {\n     /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n     /// when processing items at the end of longer iterator chains. In some\n     /// cases `for_each` may also be faster than a loop, because it will use\n-    /// internal iteration on adaptors like `Chain`.\n+    /// internal iteration on adapters like `Chain`.\n     ///\n     /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n     ///\n@@ -1293,7 +1293,7 @@ pub trait Iterator {\n         Take::new(self, n)\n     }\n \n-    /// An iterator adaptor similar to [`fold`] that holds internal state and\n+    /// An iterator adapter similar to [`fold`] that holds internal state and\n     /// produces a new iterator.\n     ///\n     /// [`fold`]: Iterator::fold\n@@ -1604,7 +1604,7 @@ pub trait Iterator {\n \n     /// Borrows an iterator, rather than consuming it.\n     ///\n-    /// This is useful to allow applying iterator adaptors while still\n+    /// This is useful to allow applying iterator adapters while still\n     /// retaining ownership of the original iterator.\n     ///\n     /// # Examples"}, {"sha": "567d9fe49cade270aa3edda0b38e27ea6fef252a", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=87c143661cd09678d94cabdf5d5dfeedbc3782b0", "patch": "@@ -24,7 +24,7 @@ use core::cell::Cell;\n \n /// An iterator that panics whenever `next` or next_back` is called\n /// after `None` has already been returned. This does not violate\n-/// `Iterator`'s contract. Used to test that iterator adaptors don't\n+/// `Iterator`'s contract. Used to test that iterator adapters don't\n /// poll their inner iterators after exhausting them.\n pub struct NonFused<I> {\n     iter: I,"}, {"sha": "fa073d080c6edd6bce2637f57d7808f34ac5e663", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c143661cd09678d94cabdf5d5dfeedbc3782b0/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=87c143661cd09678d94cabdf5d5dfeedbc3782b0", "patch": "@@ -810,9 +810,9 @@ pub trait Read {\n         default_read_exact(self, buf)\n     }\n \n-    /// Creates a \"by reference\" adaptor for this instance of `Read`.\n+    /// Creates a \"by reference\" adapter for this instance of `Read`.\n     ///\n-    /// The returned adaptor also implements `Read` and will simply borrow this\n+    /// The returned adapter also implements `Read` and will simply borrow this\n     /// current reader.\n     ///\n     /// # Examples\n@@ -889,7 +889,7 @@ pub trait Read {\n         Bytes { inner: self }\n     }\n \n-    /// Creates an adaptor which will chain this stream with another.\n+    /// Creates an adapter which will chain this stream with another.\n     ///\n     /// The returned `Read` instance will first read all bytes from this object\n     /// until EOF is encountered. Afterwards the output is equivalent to the\n@@ -927,7 +927,7 @@ pub trait Read {\n         Chain { first: self, second: next, done_first: false }\n     }\n \n-    /// Creates an adaptor which will read at most `limit` bytes from it.\n+    /// Creates an adapter which will read at most `limit` bytes from it.\n     ///\n     /// This function returns a new instance of `Read` which will read at most\n     /// `limit` bytes, after which it will always return EOF ([`Ok(0)`]). Any\n@@ -1326,7 +1326,7 @@ impl Initializer {\n /// * The [`write`] method will attempt to write some data into the object,\n ///   returning how many bytes were successfully written.\n ///\n-/// * The [`flush`] method is useful for adaptors and explicit buffers\n+/// * The [`flush`] method is useful for adapters and explicit buffers\n ///   themselves for ensuring that all buffered data has been pushed out to the\n ///   'true sink'.\n ///\n@@ -1646,12 +1646,12 @@ pub trait Write {\n     fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {\n         // Create a shim which translates a Write to a fmt::Write and saves\n         // off I/O errors. instead of discarding them\n-        struct Adaptor<'a, T: ?Sized + 'a> {\n+        struct Adapter<'a, T: ?Sized + 'a> {\n             inner: &'a mut T,\n             error: Result<()>,\n         }\n \n-        impl<T: Write + ?Sized> fmt::Write for Adaptor<'_, T> {\n+        impl<T: Write + ?Sized> fmt::Write for Adapter<'_, T> {\n             fn write_str(&mut self, s: &str) -> fmt::Result {\n                 match self.inner.write_all(s.as_bytes()) {\n                     Ok(()) => Ok(()),\n@@ -1663,7 +1663,7 @@ pub trait Write {\n             }\n         }\n \n-        let mut output = Adaptor { inner: self, error: Ok(()) };\n+        let mut output = Adapter { inner: self, error: Ok(()) };\n         match fmt::write(&mut output, fmt) {\n             Ok(()) => Ok(()),\n             Err(..) => {\n@@ -1677,9 +1677,9 @@ pub trait Write {\n         }\n     }\n \n-    /// Creates a \"by reference\" adaptor for this instance of `Write`.\n+    /// Creates a \"by reference\" adapter for this instance of `Write`.\n     ///\n-    /// The returned adaptor also implements `Write` and will simply borrow this\n+    /// The returned adapter also implements `Write` and will simply borrow this\n     /// current writer.\n     ///\n     /// # Examples\n@@ -2263,7 +2263,7 @@ pub trait BufRead: Read {\n     }\n }\n \n-/// Adaptor to chain together two readers.\n+/// Adapter to chain together two readers.\n ///\n /// This struct is generally created by calling [`chain`] on a reader.\n /// Please see the documentation of [`chain`] for more details.\n@@ -2414,7 +2414,7 @@ impl<T, U> SizeHint for Chain<T, U> {\n     }\n }\n \n-/// Reader adaptor which limits the bytes read from an underlying reader.\n+/// Reader adapter which limits the bytes read from an underlying reader.\n ///\n /// This struct is generally created by calling [`take`] on a reader.\n /// Please see the documentation of [`take`] for more details."}]}