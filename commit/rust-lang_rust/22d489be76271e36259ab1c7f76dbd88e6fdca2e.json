{"sha": "22d489be76271e36259ab1c7f76dbd88e6fdca2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDQ4OWJlNzYyNzFlMzYyNTlhYjFjN2Y3NmRiZDg4ZTZmZGNhMmU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-01-27T13:28:07Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.de", "date": "2021-02-02T16:40:29Z"}, "message": "Let a portion of DefPathHash uniquely identify the DefPath's crate.\n\nThis allows to directly map from a DefPathHash to the crate it\noriginates from, without constructing side tables to do that mapping.\n\nIt also allows to reliably and cheaply check for DefPathHash collisions.", "tree": {"sha": "92663d83350193797f1d201b16416056aea80491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92663d83350193797f1d201b16416056aea80491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d489be76271e36259ab1c7f76dbd88e6fdca2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d489be76271e36259ab1c7f76dbd88e6fdca2e", "html_url": "https://github.com/rust-lang/rust/commit/22d489be76271e36259ab1c7f76dbd88e6fdca2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d489be76271e36259ab1c7f76dbd88e6fdca2e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ed564c130ec3f19e933a9ea31faca5a717ce91", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ed564c130ec3f19e933a9ea31faca5a717ce91", "html_url": "https://github.com/rust-lang/rust/commit/a3ed564c130ec3f19e933a9ea31faca5a717ce91"}], "stats": {"total": 208, "additions": 181, "deletions": 27}, "files": [{"sha": "5ddaf9c950a3b2943d1974af00cc57673673b5f1", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -41,7 +41,6 @@ pub mod util {\n \n pub mod ast;\n pub mod attr;\n-pub mod crate_disambiguator;\n pub mod entry;\n pub mod expand;\n pub mod mut_visit;"}, {"sha": "fecc51324cc677518bae18faa165d90d5926b389", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -7,19 +7,30 @@ use std::hash::{Hash, Hasher};\n use std::mem::{self, MaybeUninit};\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]\n+#[repr(C)]\n pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n     pub const ZERO: Fingerprint = Fingerprint(0, 0);\n \n+    #[inline]\n+    pub fn new(_0: u64, _1: u64) -> Fingerprint {\n+        Fingerprint(_0, _1)\n+    }\n+\n     #[inline]\n     pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n         Fingerprint(hash, hash)\n     }\n \n     #[inline]\n     pub fn to_smaller_hash(&self) -> u64 {\n-        self.0\n+        // Even though both halves of the fingerprint are expected to be good\n+        // quality hash values, let's still combine the two values because the\n+        // Fingerprints in DefPathHash have the StableCrateId portion which is\n+        // the same for all DefPathHashes from the same crate. Combining the\n+        // two halfs makes sure we get a good quality hash in such cases too.\n+        self.0.wrapping_mul(3).wrapping_add(self.1)\n     }\n \n     #[inline]\n@@ -93,7 +104,7 @@ impl FingerprintHasher for crate::unhash::Unhasher {\n     #[inline]\n     fn write_fingerprint(&mut self, fingerprint: &Fingerprint) {\n         // `Unhasher` only wants a single `u64`\n-        self.write_u64(fingerprint.0);\n+        self.write_u64(fingerprint.0.wrapping_add(fingerprint.1));\n     }\n }\n "}, {"sha": "7ab55db509b029fb8cef1146dfb5aba2d6761d9f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -5,13 +5,16 @@\n //! expressions) that are mostly just leftovers.\n \n pub use crate::def_id::DefPathHash;\n-use crate::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::def_id::{\n+    CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, CRATE_DEF_INDEX, LOCAL_CRATE,\n+};\n use crate::hir;\n \n-use rustc_ast::crate_disambiguator::CrateDisambiguator;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::unhash::UnhashMap;\n use rustc_index::vec::IndexVec;\n+use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -27,6 +30,7 @@ use tracing::debug;\n pub struct DefPathTable {\n     index_to_key: IndexVec<DefIndex, DefKey>,\n     def_path_hashes: IndexVec<DefIndex, DefPathHash>,\n+    def_path_hash_to_index: UnhashMap<DefPathHash, DefIndex>,\n }\n \n impl DefPathTable {\n@@ -39,6 +43,25 @@ impl DefPathTable {\n         };\n         self.def_path_hashes.push(def_path_hash);\n         debug_assert!(self.def_path_hashes.len() == self.index_to_key.len());\n+\n+        // Check for hash collisions of DefPathHashes. These should be\n+        // exceedingly rare.\n+        if let Some(existing) = self.def_path_hash_to_index.insert(def_path_hash, index) {\n+            let def_path1 = DefPath::make(LOCAL_CRATE, existing, |idx| self.def_key(idx));\n+            let def_path2 = DefPath::make(LOCAL_CRATE, index, |idx| self.def_key(idx));\n+\n+            // Continuing with colliding DefPathHashes can lead to correctness\n+            // issues. We must abort compilation.\n+            panic!(\"Found DefPathHash collsion between {:?} and {:?}\", def_path1, def_path2);\n+        }\n+\n+        // Assert that all DefPathHashes correctly contain the local crate's\n+        // StableCrateId\n+        #[cfg(debug_assertions)]\n+        if let Some(root) = self.def_path_hashes.get(CRATE_DEF_INDEX) {\n+            assert!(def_path_hash.stable_crate_id() == root.stable_crate_id());\n+        }\n+\n         index\n     }\n \n@@ -108,13 +131,10 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: DefPathHash) -> DefPathHash {\n+    fn compute_stable_hash(&self, parent: DefPathHash) -> DefPathHash {\n         let mut hasher = StableHasher::new();\n \n-        // We hash a `0u8` here to disambiguate between regular `DefPath` hashes,\n-        // and the special \"root_parent\" below.\n-        0u8.hash(&mut hasher);\n-        parent_hash.hash(&mut hasher);\n+        parent.hash(&mut hasher);\n \n         let DisambiguatedDefPathData { ref data, disambiguator } = self.disambiguated_data;\n \n@@ -127,19 +147,13 @@ impl DefKey {\n \n         disambiguator.hash(&mut hasher);\n \n-        DefPathHash(hasher.finish())\n-    }\n+        let local_hash: u64 = hasher.finish();\n \n-    fn root_parent_stable_hash(\n-        crate_name: &str,\n-        crate_disambiguator: CrateDisambiguator,\n-    ) -> DefPathHash {\n-        let mut hasher = StableHasher::new();\n-        // Disambiguate this from a regular `DefPath` hash; see `compute_stable_hash()` above.\n-        1u8.hash(&mut hasher);\n-        crate_name.hash(&mut hasher);\n-        crate_disambiguator.hash(&mut hasher);\n-        DefPathHash(hasher.finish())\n+        // Construct the new DefPathHash, making sure that the `crate_id`\n+        // portion of the hash is properly copied from the parent. This way the\n+        // `crate_id` part will be recursively propagated from the root to all\n+        // DefPathHashes in this DefPathTable.\n+        DefPathHash::new(parent.stable_crate_id(), local_hash)\n     }\n }\n \n@@ -295,6 +309,12 @@ impl Definitions {\n         self.table.def_path_hash(id.local_def_index)\n     }\n \n+    #[inline]\n+    pub fn def_path_hash_to_def_id(&self, def_path_hash: DefPathHash) -> LocalDefId {\n+        let local_def_index = self.table.def_path_hash_to_index[&def_path_hash];\n+        LocalDefId { local_def_index }\n+    }\n+\n     /// Returns the path from the crate root to `index`. The root\n     /// nodes are not included in the path (i.e., this will be an\n     /// empty vector for the crate root). For an inlined item, this\n@@ -332,7 +352,8 @@ impl Definitions {\n             },\n         };\n \n-        let parent_hash = DefKey::root_parent_stable_hash(crate_name, crate_disambiguator);\n+        let stable_crate_id = StableCrateId::new(crate_name, crate_disambiguator);\n+        let parent_hash = DefPathHash::new(stable_crate_id, 0);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n \n         // Create the root definition."}, {"sha": "42e4f1f8fff15f4abd0bf4ce7dfd88213b34efef", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -6,11 +6,11 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::SyntaxExtension;\n-use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::cstore::{CrateDepKind, CrateSource, ExternCrate};\n@@ -40,6 +40,10 @@ pub struct CStore {\n     allocator_kind: Option<AllocatorKind>,\n     /// This crate has a `#[global_allocator]` item.\n     has_global_allocator: bool,\n+\n+    /// This map is used to verify we get no hash conflicts between\n+    /// `StableCrateId` values.\n+    stable_crate_ids: FxHashMap<StableCrateId, CrateNum>,\n }\n \n pub struct CrateLoader<'a> {\n@@ -192,6 +196,11 @@ impl<'a> CrateLoader<'a> {\n         metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: &str,\n     ) -> Self {\n+        let local_crate_stable_id =\n+            StableCrateId::new(local_crate_name, sess.local_crate_disambiguator());\n+        let mut stable_crate_ids = FxHashMap::default();\n+        stable_crate_ids.insert(local_crate_stable_id, LOCAL_CRATE);\n+\n         CrateLoader {\n             sess,\n             metadata_loader,\n@@ -205,6 +214,7 @@ impl<'a> CrateLoader<'a> {\n                 injected_panic_runtime: None,\n                 allocator_kind: None,\n                 has_global_allocator: false,\n+                stable_crate_ids,\n             },\n             used_extern_options: Default::default(),\n         }\n@@ -311,6 +321,20 @@ impl<'a> CrateLoader<'a> {\n         res\n     }\n \n+    fn verify_no_stable_crate_id_hash_conflicts(\n+        &mut self,\n+        root: &CrateRoot<'_>,\n+        cnum: CrateNum,\n+    ) -> Result<(), CrateError> {\n+        if let Some(existing) = self.cstore.stable_crate_ids.insert(root.stable_crate_id(), cnum) {\n+            let crate_name0 = root.name();\n+            let crate_name1 = self.cstore.get_crate_data(existing).name();\n+            return Err(CrateError::StableCrateIdCollision(crate_name0, crate_name1));\n+        }\n+\n+        Ok(())\n+    }\n+\n     fn register_crate(\n         &mut self,\n         host_lib: Option<Library>,\n@@ -332,6 +356,8 @@ impl<'a> CrateLoader<'a> {\n         // Claim this crate number and cache it\n         let cnum = self.cstore.alloc_new_crate_num();\n \n+        self.verify_no_stable_crate_id_hash_conflicts(&crate_root, cnum)?;\n+\n         info!(\n             \"register crate `{}` (cnum = {}. private_dep = {})\",\n             crate_root.name(),"}, {"sha": "a9f58b08f589998245afc46b6f6b5e96818d4a92", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -888,6 +888,7 @@ crate enum CrateError {\n     MultipleMatchingCrates(Symbol, FxHashMap<Svh, Library>),\n     SymbolConflictsCurrent(Symbol),\n     SymbolConflictsOthers(Symbol),\n+    StableCrateIdCollision(Symbol, Symbol),\n     DlOpen(String),\n     DlSym(String),\n     LocatorCombined(CombinedLocatorError),\n@@ -970,6 +971,13 @@ impl CrateError {\n                  `-C metadata`. This will result in symbol conflicts between the two.\",\n                 root_name,\n             ),\n+            CrateError::StableCrateIdCollision(crate_name0, crate_name1) => {\n+                let msg = format!(\n+                    \"found crates (`{}` and `{}`) with colliding StableCrateId values.\",\n+                    crate_name0, crate_name1\n+                );\n+                sess.struct_span_err(span, &msg)\n+            }\n             CrateError::DlOpen(s) | CrateError::DlSym(s) => sess.struct_span_err(span, &s),\n             CrateError::LocatorCombined(locator) => {\n                 let crate_name = locator.crate_name;"}, {"sha": "e9b8388c1c915e3dde9879af1a0495e8e94df95a", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -635,6 +635,10 @@ impl CrateRoot<'_> {\n         self.hash\n     }\n \n+    crate fn stable_crate_id(&self) -> StableCrateId {\n+        self.stable_crate_id\n+    }\n+\n     crate fn triple(&self) -> &TargetTriple {\n         &self.triple\n     }"}, {"sha": "25d70d9768a6a948bf801d1bb2e055fb0da29f2f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -651,6 +651,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n+            stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),"}, {"sha": "610528956d0a18ba12d7ccaf736f410dc6ee90f2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n-use rustc_hir::def_id::{DefId, DefIndex, DefPathHash};\n+use rustc_hir::def_id::{DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n@@ -203,6 +203,7 @@ crate struct CrateRoot<'tcx> {\n     extra_filename: String,\n     hash: Svh,\n     disambiguator: CrateDisambiguator,\n+    stable_crate_id: StableCrateId,\n     panic_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,"}, {"sha": "3f690ba87ea05d0fe4d5fb394158091df3a44fe8", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -8,7 +8,6 @@ use crate::parse::ParseSess;\n use crate::search_paths::{PathKind, SearchPath};\n \n pub use rustc_ast::attr::MarkedAttrs;\n-pub use rustc_ast::crate_disambiguator::CrateDisambiguator;\n pub use rustc_ast::Attribute;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -23,6 +22,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_lint_defs::FutureBreakage;\n+pub use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};"}, {"sha": "bd7d85167140dfe4e28a712edf85a4d17dfbf8dc", "filename": "compiler/rustc_span/src/crate_disambiguator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "previous_filename": "compiler/rustc_ast/src/crate_disambiguator.rs"}, {"sha": "7c02056105e0580d273557603e61bb0b0af91d5a", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -1,3 +1,4 @@\n+use crate::crate_disambiguator::CrateDisambiguator;\n use crate::HashStableContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -105,17 +106,97 @@ impl ::std::fmt::Debug for CrateNum {\n     }\n }\n \n+/// A `DefPathHash` is a fixed-size representation of a `DefPath` that is\n+/// stable across crate and compilation session boundaries. It consists of two\n+/// separate 64-bit hashes. The first uniquely identifies the crate this\n+/// `DefPathHash` originates from (see [StableCrateId]), and the second\n+/// uniquely identifies the corresponding `DefPath` within that crate. Together\n+/// they form a unique identifier within an entire crate graph.\n+///\n+/// There is a very small chance of hash collisions, which would mean that two\n+/// different `DefPath`s map to the same `DefPathHash`. Proceeding compilation\n+/// with such a hash collision would very probably lead to an ICE, and in the\n+/// worst case lead to a silent mis-compilation. The compiler therefore actively\n+/// and exhaustively checks for such hash collisions and aborts compilation if\n+/// it finds one.\n+///\n+/// `DefPathHash` uses 64-bit hashes for both the crate-id part and the\n+/// crate-internal part, even though it is likely that there are many more\n+/// `LocalDefId`s in a single crate than there are individual crates in a crate\n+/// graph. Since we use the same number of bits in both cases, the collision\n+/// probability for the crate-local part will be quite a bit higher (though\n+/// still very small).\n+///\n+/// This imbalance is not by accident: A hash collision in the\n+/// crate-local part of a `DefPathHash` will be detected and reported while\n+/// compiling the crate in question. Such a collision does not depend on\n+/// outside factors and can be easily fixed by the crate maintainer (e.g. by\n+/// renaming the item in question or by bumping the crate version in a harmless\n+/// way).\n+///\n+/// A collision between crate-id hashes on the other hand is harder to fix\n+/// because it depends on the set of crates in the entire crate graph of a\n+/// compilation session. Again, using the same crate with a different version\n+/// number would fix the issue with a high probability -- but that might be\n+/// easier said then done if the crates in questions are dependencies of\n+/// third-party crates.\n+///\n+/// That being said, given a high quality hash function, the collision\n+/// probabilities in question are very small. For example, for a big crate like\n+/// `rustc_middle` (with ~50000 `LocalDefId`s as of the time of writing) there\n+/// is a probability of roughly 1 in 14,750,000,000 of a crate-internal\n+/// collision occurring. For a big crate graph with 1000 crates in it, there is\n+/// a probability of 1 in 36,890,000,000,000 of a `StableCrateId` collision.\n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub struct DefPathHash(pub Fingerprint);\n \n+impl DefPathHash {\n+    /// Returns the [StableCrateId] identifying the crate this [DefPathHash]\n+    /// originates from.\n+    #[inline]\n+    pub fn stable_crate_id(&self) -> StableCrateId {\n+        StableCrateId(self.0.as_value().0)\n+    }\n+\n+    /// Builds a new [DefPathHash] with the given [StableCrateId] and\n+    /// `local_hash`, where `local_hash` must be unique within its crate.\n+    pub fn new(stable_crate_id: StableCrateId, local_hash: u64) -> DefPathHash {\n+        DefPathHash(Fingerprint::new(stable_crate_id.0, local_hash))\n+    }\n+}\n+\n impl Borrow<Fingerprint> for DefPathHash {\n     #[inline]\n     fn borrow(&self) -> &Fingerprint {\n         &self.0\n     }\n }\n \n+/// A [StableCrateId] is a 64 bit hash of `(crate-name, crate-disambiguator)`. It\n+/// is to [CrateNum] what [DefPathHash] is to [DefId]. It is stable across\n+/// compilation sessions.\n+///\n+/// Since the ID is a hash value there is a (very small) chance that two crates\n+/// end up with the same [StableCrateId]. The compiler will check for such\n+/// collisions when loading crates and abort compilation in order to avoid\n+/// further trouble.\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, Encodable, Decodable)]\n+pub struct StableCrateId(u64);\n+\n+impl StableCrateId {\n+    /// Computes the stable ID for a crate with the given name and\n+    /// disambiguator.\n+    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> StableCrateId {\n+        use std::hash::Hash;\n+\n+        let mut hasher = StableHasher::new();\n+        crate_name.hash(&mut hasher);\n+        crate_disambiguator.hash(&mut hasher);\n+        StableCrateId(hasher.finish())\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned"}, {"sha": "0f14154047d6c0595b10d0524dcf917c5826673b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d489be76271e36259ab1c7f76dbd88e6fdca2e/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=22d489be76271e36259ab1c7f76dbd88e6fdca2e", "patch": "@@ -47,6 +47,8 @@ pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n+pub mod crate_disambiguator;\n+\n pub mod symbol;\n pub use symbol::{sym, Symbol};\n "}]}