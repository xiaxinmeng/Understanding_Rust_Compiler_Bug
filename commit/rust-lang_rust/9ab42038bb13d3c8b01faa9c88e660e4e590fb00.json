{"sha": "9ab42038bb13d3c8b01faa9c88e660e4e590fb00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjQyMDM4YmIxM2QzYzhiMDFmYWE5Yzg4ZTY2MGU0ZTU5MGZiMDA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-18T18:49:08Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-18T19:00:17Z"}, "message": "Change the makefiles to use -c.", "tree": {"sha": "0c5973d4820e4da45e252ef0f92315b2136286f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5973d4820e4da45e252ef0f92315b2136286f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab42038bb13d3c8b01faa9c88e660e4e590fb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab42038bb13d3c8b01faa9c88e660e4e590fb00", "html_url": "https://github.com/rust-lang/rust/commit/9ab42038bb13d3c8b01faa9c88e660e4e590fb00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab42038bb13d3c8b01faa9c88e660e4e590fb00/comments", "author": null, "committer": null, "parents": [{"sha": "0c873993c94a3bd5827061120e2caf230f89c498", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c873993c94a3bd5827061120e2caf230f89c498", "html_url": "https://github.com/rust-lang/rust/commit/0c873993c94a3bd5827061120e2caf230f89c498"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "0ea4bf4b4622fe97a87a51018fcd49a09516e9b4", "filename": "Makefile.in", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9ab42038bb13d3c8b01faa9c88e660e4e590fb00/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9ab42038bb13d3c8b01faa9c88e660e4e590fb00/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=9ab42038bb13d3c8b01faa9c88e660e4e590fb00", "patch": "@@ -463,27 +463,27 @@ boot/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \t@$(call E, compile: $@)\n \t$(BOOT) -shared -o $@ $<\n \n-stage0/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n+stage0/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE0) -S -shared -o $@ $<\n+\t$(STAGE0) -c -shared -o $@ $<\n \n stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage0 -Lrt -lrustrt\n \n-stage1/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n+stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE1) -S -shared -o $@ $<\n+\t$(STAGE1) -c -shared -o $@ $<\n \n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage1 -Lrt -lrustrt\n \n-stage2/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n+stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE2) -S -shared -o $@ $<\n+\t$(STAGE2) -c -shared -o $@ $<\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n@@ -509,20 +509,20 @@ stage2/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n \n \n \n-stage0/glue.s: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n+stage0/glue.o: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE0) -S -o $@ -glue\n+\t$(STAGE0) -c -o $@ -glue\n \n-stage1/glue.s: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n+stage1/glue.o: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE1) -S -o $@ -glue\n+\t$(STAGE1) -c -o $@ -glue\n \n-stage2/glue.s: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n+stage2/glue.o: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE2) -S -o $@ -glue\n+\t$(STAGE2) -c -o $@ -glue\n \n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n@@ -789,35 +789,29 @@ compile-check: tidy \\\n \t@$(call E, compile [boot]: $@)\n \t$(BOOT) -o $@ $<\n \n-%.stage0.s: %.rc $(SREQ0)\n+%.stage0.o: %.rc $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -S -o $@ $<\n+\t$(STAGE0) -c -o $@ $<\n \n-%.stage0.s: %.rs $(SREQ0)\n+%.stage0.o: %.rs $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -S -o $@ $<\n+\t$(STAGE0) -c -o $@ $<\n \n-%.stage1.s: %.rc $(SREQ1)\n+%.stage1.o: %.rc $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -S -o $@ $<\n+\t$(STAGE1) -c -o $@ $<\n \n-%.stage1.s: %.rs $(SREQ1)\n+%.stage1.o: %.rs $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -S -o $@ $<\n+\t$(STAGE1) -c -o $@ $<\n \n-%.stage2.s: %.rc $(SREQ2)\n+%.stage2.o: %.rc $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -S -o $@ $<\n+\t$(STAGE2) -c -o $@ $<\n \n-%.stage2.s: %.rs $(SREQ2)\n+%.stage2.o: %.rs $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -S -o $@ $<\n-\n-\n-\n-%.o: %.s\n-\t@$(call E, assemble [llvm]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n+\t$(STAGE2) -c -o $@ $<\n \n # Cancel the implicit .out rule in GNU make.\n %.out: %"}, {"sha": "d1f411b47ff0dcdb84ffaaed8ba14c0452741ecc", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ab42038bb13d3c8b01faa9c88e660e4e590fb00/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9ab42038bb13d3c8b01faa9c88e660e4e590fb00/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9ab42038bb13d3c8b01faa9c88e660e4e590fb00", "patch": "@@ -53,6 +53,7 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR, LLVMModuleRef M,\n                                         LLVMCodeGenFileType FileType) {\n   InitializeAllTargets();\n   InitializeAllAsmPrinters();\n+  InitializeAllAsmParsers();\n   TargetMachine::setRelocationModel(Reloc::PIC_);\n   std::string Err;\n   const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);"}]}