{"sha": "215a077ee42f60c7fad26ac662726295a6c41d2d", "node_id": "C_kwDOAAsO6NoAKDIxNWEwNzdlZTQyZjYwYzdmYWQyNmFjNjYyNzI2Mjk1YTZjNDFkMmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-26T14:01:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-26T14:01:54Z"}, "message": "Remove imports when inlining all calls in a file", "tree": {"sha": "afb4f6c34853759d0f5b442f196b3c6f4d485d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb4f6c34853759d0f5b442f196b3c6f4d485d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215a077ee42f60c7fad26ac662726295a6c41d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215a077ee42f60c7fad26ac662726295a6c41d2d", "html_url": "https://github.com/rust-lang/rust/commit/215a077ee42f60c7fad26ac662726295a6c41d2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215a077ee42f60c7fad26ac662726295a6c41d2d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c70d0ad3b87f9920296c88fb8a05498fe8a6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c70d0ad3b87f9920296c88fb8a05498fe8a6cb", "html_url": "https://github.com/rust-lang/rust/commit/79c70d0ad3b87f9920296c88fb8a05498fe8a6cb"}], "stats": {"total": 81, "additions": 59, "deletions": 22}, "files": [{"sha": "9927ceb74ec6beba6329e6d8421a2c526762b1db", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/215a077ee42f60c7fad26ac662726295a6c41d2d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215a077ee42f60c7fad26ac662726295a6c41d2d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=215a077ee42f60c7fad26ac662726295a6c41d2d", "patch": "@@ -1,13 +1,15 @@\n use ast::make;\n+use either::Either;\n use hir::{db::HirDatabase, HasSource, PathResolution, Semantics, TypeInfo};\n use ide_db::{\n     base_db::{FileId, FileRange},\n     defs::Definition,\n+    helpers::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n     RootDatabase,\n };\n-use itertools::izip;\n+use itertools::{izip, Itertools};\n use syntax::{\n     ast::{self, edit_in_place::Indent, ArgListOwner},\n     ted, AstNode, SyntaxNode,\n@@ -96,26 +98,45 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext) -> Opt\n             let mut inline_refs_for_file = |file_id, refs: Vec<FileReference>| {\n                 builder.edit_file(file_id);\n                 let count = refs.len();\n-                let name_refs = refs.into_iter().filter_map(|file_ref| match file_ref.name {\n-                    ast::NameLike::NameRef(name_ref) => Some(name_ref),\n-                    _ => None,\n-                });\n-                let call_infos = name_refs.filter_map(CallInfo::from_name_ref);\n-                let replaced = call_infos\n+                // The collects are required as we are otherwise iterating while mutating \ud83d\ude45\u200d\u2640\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\n+                let (name_refs, name_refs_use): (Vec<_>, Vec<_>) = refs\n+                    .into_iter()\n+                    .filter_map(|file_ref| match file_ref.name {\n+                        ast::NameLike::NameRef(name_ref) => Some(name_ref),\n+                        _ => None,\n+                    })\n+                    .partition_map(|name_ref| {\n+                        match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n+                            Some(use_tree) => Either::Right(builder.make_mut(use_tree)),\n+                            None => Either::Left(name_ref),\n+                        }\n+                    });\n+                let call_infos: Vec<_> = name_refs\n+                    .into_iter()\n+                    .filter_map(CallInfo::from_name_ref)\n                     .map(|call_info| {\n+                        let mut_node = builder.make_syntax_mut(call_info.node.syntax().clone());\n+                        (call_info, mut_node)\n+                    })\n+                    .collect();\n+                let replaced = call_infos\n+                    .into_iter()\n+                    .map(|(call_info, mut_node)| {\n                         let replacement =\n                             inline(&ctx.sema, def_file, function, &func_body, &params, &call_info);\n-\n-                        builder.replace_ast(\n-                            match call_info.node {\n-                                CallExprNode::Call(it) => ast::Expr::CallExpr(it),\n-                                CallExprNode::MethodCallExpr(it) => ast::Expr::MethodCallExpr(it),\n-                            },\n-                            replacement,\n-                        );\n+                        ted::replace(mut_node, replacement.syntax());\n                     })\n                     .count();\n-                remove_def &= replaced == count;\n+                if replaced + name_refs_use.len() == count {\n+                    // we replaced all usages in this file, so we can remove the imports\n+                    name_refs_use.into_iter().for_each(|use_tree| {\n+                        if let Some(path) = use_tree.path() {\n+                            remove_path_if_in_use_stmt(&path);\n+                        }\n+                    })\n+                } else {\n+                    remove_def = false;\n+                }\n             };\n             for (file_id, refs) in usages.into_iter() {\n                 inline_refs_for_file(file_id, refs);\n@@ -915,7 +936,10 @@ fn foo() {\n }\n \"#,\n             r#\"\n-use super::do_the_math;\n+//- /lib.rs\n+mod foo;\n+\n+//- /foo.rs\n fn foo() {\n     {\n         let foo = 10;\n@@ -954,18 +978,14 @@ fn foo() {\n             r#\"\n //- /lib.rs\n mod foo;\n-fn do_the_math(b: u32) -> u32 {\n-    let foo = 10;\n-    foo * b + foo\n-}\n+\n fn bar(a: u32, b: u32) -> u32 {\n     {\n         let foo = 10;\n         foo * 0 + foo\n     };\n }\n //- /foo.rs\n-use super::do_the_math;\n fn foo() {\n     {\n         let foo = 10;"}, {"sha": "8acad6a8ca441b6d37d7addb4f2aed5b1247a717", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/215a077ee42f60c7fad26ac662726295a6c41d2d/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215a077ee42f60c7fad26ac662726295a6c41d2d/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=215a077ee42f60c7fad26ac662726295a6c41d2d", "patch": "@@ -220,6 +220,23 @@ pub fn insert_use(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n     insert_use_(scope, &path, cfg.group, use_item);\n }\n \n+pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+    // FIXME: improve this\n+    if path.parent_path().is_some() {\n+        return;\n+    }\n+    if let Some(use_tree) = path.syntax().parent().and_then(ast::UseTree::cast) {\n+        if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n+            return;\n+        }\n+        if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n+            use_.remove();\n+            return;\n+        }\n+        use_tree.remove();\n+    }\n+}\n+\n #[derive(Eq, PartialEq, PartialOrd, Ord)]\n enum ImportGroup {\n     // the order here defines the order of new group inserts"}]}