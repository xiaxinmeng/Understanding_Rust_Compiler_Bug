{"sha": "50ab23ddbd39d797dde46288af0ae9d29784e7a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYWIyM2RkYmQzOWQ3OTdkZGU0NjI4OGFmMGFlOWQyOTc4NGU3YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-12T21:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-12T21:31:37Z"}, "message": "Auto merge of #25844 - alexcrichton:stabilize-fs-features, r=aturon\n\nThis commit stabilizes the following APIs, slating them all to be cherry-picked\r\ninto the 1.1 release.\r\n\r\n* fs::FileType (and transitively the derived trait implementations)\r\n* fs::Metadata::file_type\r\n* fs::FileType::is_dir\r\n* fs::FileType::is_file\r\n* fs::FileType::is_symlink\r\n* fs::DirEntry::metadata\r\n* fs::DirEntry::file_type\r\n* fs::DirEntry::file_name\r\n* fs::set_permissions\r\n* fs::symlink_metadata\r\n* os::raw::{self, *}\r\n* os::{android, bitrig, linux, ...}::raw::{self, *}\r\n* os::{android, bitrig, linux, ...}::fs::MetadataExt\r\n* os::{android, bitrig, linux, ...}::fs::MetadataExt::as_raw_stat\r\n* os::unix::fs::PermissionsExt\r\n* os::unix::fs::PermissionsExt::mode\r\n* os::unix::fs::PermissionsExt::set_mode\r\n* os::unix::fs::PermissionsExt::from_mode\r\n* os::unix::fs::OpenOptionsExt\r\n* os::unix::fs::OpenOptionsExt::mode\r\n* os::unix::fs::DirEntryExt\r\n* os::unix::fs::DirEntryExt::ino\r\n* os::windows::fs::MetadataExt\r\n* os::windows::fs::MetadataExt::file_attributes\r\n* os::windows::fs::MetadataExt::creation_time\r\n* os::windows::fs::MetadataExt::last_access_time\r\n* os::windows::fs::MetadataExt::last_write_time\r\n* os::windows::fs::MetadataExt::file_size\r\n\r\nThe `os::unix::fs::Metadata` structure was also removed entirely, moving all of\r\nits associated methods into the `os::unix::fs::MetadataExt` trait instead. The\r\nmethods are all marked as `#[stable]` still.\r\n\r\nAs some minor cleanup, some deprecated and unstable fs apis were also removed:\r\n\r\n* File::path\r\n* Metadata::accessed\r\n* Metadata::modified\r\n\r\nFeatures that were explicitly left unstable include:\r\n\r\n* fs::WalkDir - the semantics of this were not considered in the recent fs\r\n  expansion RFC.\r\n* fs::DirBuilder - it's still not 100% clear if the naming is right here and if\r\n  the set of functionality exposed is appropriate.\r\n* fs::canonicalize - the implementation on Windows here is specifically in\r\n  question as it always returns a verbatim path. Additionally the Unix\r\n  implementation is susceptible to buffer overflows on long paths unfortunately.\r\n* fs::PathExt - as this is just a convenience trait, it is not stabilized at\r\n  this time.\r\n* fs::set_file_times - this funciton is still waiting on a time abstraction.", "tree": {"sha": "f716ad4c0e3fb8e8dc90b4b807cf7f81a812cfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f716ad4c0e3fb8e8dc90b4b807cf7f81a812cfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ab23ddbd39d797dde46288af0ae9d29784e7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ab23ddbd39d797dde46288af0ae9d29784e7a3", "html_url": "https://github.com/rust-lang/rust/commit/50ab23ddbd39d797dde46288af0ae9d29784e7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ab23ddbd39d797dde46288af0ae9d29784e7a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85b5338e3444de1c46ac8cf9bf20ae4b31b9f905", "url": "https://api.github.com/repos/rust-lang/rust/commits/85b5338e3444de1c46ac8cf9bf20ae4b31b9f905", "html_url": "https://github.com/rust-lang/rust/commit/85b5338e3444de1c46ac8cf9bf20ae4b31b9f905"}, {"sha": "ec68c4a8351e65ec6e2d349aa103a457494ad814", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec68c4a8351e65ec6e2d349aa103a457494ad814", "html_url": "https://github.com/rust-lang/rust/commit/ec68c4a8351e65ec6e2d349aa103a457494ad814"}], "stats": {"total": 929, "additions": 672, "deletions": 257}, "files": [{"sha": "d21c7e206df89bbbeedff1b73166f4aaeaba948d", "filename": "RELEASES.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -1,3 +1,21 @@\n+Version 1.1.0 (July 2015)\n+========================\n+\n+* NNNN changes, numerous bugfixes\n+\n+Libraries\n+---------\n+\n+* The [`std::fs` module has been expanded][fs-expand] to expand the set of\n+  functionality exposed:\n+  * `DirEntry` now supports optimizations like `file_type` and `metadata` which\n+    don't incur a syscall on some platforms.\n+  * A `symlink_metadata` function has been added.\n+  * The `fs::Metadata` structure now lowers to its OS counterpart, providing\n+    access to all underlying information.\n+\n+[fs-expand]: https://github.com/rust-lang/rust/pull/25844\n+\n Version 1.0.0 (May 2015)\n ========================\n "}, {"sha": "9f25c8d5fee148fb37ffcf96e72ecc952962e9dc", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -38,7 +38,6 @@\n #![feature(staged_api)]\n #![feature(unicode)]\n #![feature(path_ext)]\n-#![feature(fs)]\n #![feature(path_relative_from)]\n #![feature(std_misc)]\n "}, {"sha": "2b0f17fb2bb9c07be19e42d8dcc9d31805503878", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 31, "deletions": 57, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -148,7 +148,7 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n pub struct Permissions(fs_imp::FilePermissions);\n \n /// An structure representing a type of file with accessors for each file type.\n-#[unstable(feature = \"file_type\", reason = \"recently added API\")]\n+#[stable(feature = \"file_type\", since = \"1.1.0\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct FileType(fs_imp::FileType);\n \n@@ -208,14 +208,6 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path)\n     }\n \n-    /// Returns `None`.\n-    #[unstable(feature = \"file_path\",\n-               reason = \"this abstraction was imposed by this library and was removed\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"abstraction was removed\")]\n-    pub fn path(&self) -> Option<&Path> {\n-        None\n-    }\n-\n     /// Attempts to sync all OS-internal metadata to disk.\n     ///\n     /// This function will attempt to ensure that all in-core data reaches the\n@@ -501,7 +493,7 @@ impl AsInnerMut<fs_imp::OpenOptions> for OpenOptions {\n \n impl Metadata {\n     /// Returns the file type for this metadata.\n-    #[unstable(feature = \"file_type\", reason = \"recently added API\")]\n+    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> FileType {\n         FileType(self.0.file_type())\n     }\n@@ -575,38 +567,6 @@ impl Metadata {\n     pub fn permissions(&self) -> Permissions {\n         Permissions(self.0.perm())\n     }\n-\n-    /// Returns the most recent access time for a file.\n-    ///\n-    /// The return value is in milliseconds since the epoch.\n-    #[unstable(feature = \"fs_time\",\n-               reason = \"the return type of u64 is not quite appropriate for \\\n-                         this method and may change if the standard library \\\n-                         gains a type to represent a moment in time\")]\n-    #[deprecated(since = \"1.1.0\",\n-                 reason = \"use os::platform::fs::MetadataExt extension traits\")]\n-    pub fn accessed(&self) -> u64 {\n-        self.adjust_time(self.0.accessed())\n-    }\n-\n-    /// Returns the most recent modification time for a file.\n-    ///\n-    /// The return value is in milliseconds since the epoch.\n-    #[unstable(feature = \"fs_time\",\n-               reason = \"the return type of u64 is not quite appropriate for \\\n-                         this method and may change if the standard library \\\n-                         gains a type to represent a moment in time\")]\n-    #[deprecated(since = \"1.1.0\",\n-                 reason = \"use os::platform::fs::MetadataExt extension traits\")]\n-    pub fn modified(&self) -> u64 {\n-        self.adjust_time(self.0.modified())\n-    }\n-\n-    fn adjust_time(&self, val: u64) -> u64 {\n-        // FILETIME (what `val` represents) is in 100ns intervals and there are\n-        // 10000 intervals in a millisecond.\n-        if cfg!(windows) {val / 10000} else {val}\n-    }\n }\n \n impl AsInner<fs_imp::FileAttr> for Metadata {\n@@ -663,15 +623,17 @@ impl Permissions {\n     }\n }\n \n-#[unstable(feature = \"file_type\", reason = \"recently added API\")]\n impl FileType {\n     /// Test whether this file type represents a directory.\n+    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_dir(&self) -> bool { self.0.is_dir() }\n \n     /// Test whether this file type represents a regular file.\n+    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_file(&self) -> bool { self.0.is_file() }\n \n     /// Test whether this file type represents a symbolic link.\n+    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_symlink(&self) -> bool { self.0.is_symlink() }\n }\n \n@@ -736,7 +698,7 @@ impl DirEntry {\n     /// On Windows this function is cheap to call (no extra system calls\n     /// needed), but on Unix platforms this function is the equivalent of\n     /// calling `symlink_metadata` on the path.\n-    #[unstable(feature = \"dir_entry_ext\", reason = \"recently added API\")]\n+    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn metadata(&self) -> io::Result<Metadata> {\n         self.0.metadata().map(Metadata)\n     }\n@@ -751,14 +713,14 @@ impl DirEntry {\n     /// On Windows and most Unix platforms this function is free (no extra\n     /// system calls needed), but some Unix platforms may require the equivalent\n     /// call to `symlink_metadata` to learn about the target file type.\n-    #[unstable(feature = \"dir_entry_ext\", reason = \"recently added API\")]\n+    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         self.0.file_type().map(FileType)\n     }\n \n     /// Returns the bare file name of this directory entry without any other\n     /// leading path component.\n-    #[unstable(feature = \"dir_entry_ext\", reason = \"recently added API\")]\n+    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_name(&self) -> OsString {\n         self.0.file_name()\n     }\n@@ -828,7 +790,6 @@ pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n /// # Examples\n ///\n /// ```rust\n-/// #![feature(symlink_metadata)]\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///\n@@ -837,7 +798,7 @@ pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n /// # Ok(())\n /// # }\n /// ```\n-#[unstable(feature = \"symlink_metadata\", reason = \"recently added API\")]\n+#[stable(feature = \"symlink_metadata\", since = \"1.1.0\")]\n pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n     fs_imp::lstat(path.as_ref()).map(Metadata)\n }\n@@ -1270,7 +1231,6 @@ pub fn set_file_times<P: AsRef<Path>>(path: P, accessed: u64,\n /// # Examples\n ///\n /// ```\n-/// # #![feature(fs)]\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///\n@@ -1286,14 +1246,13 @@ pub fn set_file_times<P: AsRef<Path>>(path: P, accessed: u64,\n /// This function will return an error if the provided `path` doesn't exist, if\n /// the process lacks permissions to change the attributes of the file, or if\n /// some other I/O error is encountered.\n-#[unstable(feature = \"fs\",\n-           reason = \"a more granual ability to set specific permissions may \\\n-                     be exposed on the Permissions structure itself and this \\\n-                     method may not always exist\")]\n-pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions) -> io::Result<()> {\n+#[stable(feature = \"set_permissions\", since = \"1.1.0\")]\n+pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)\n+                                       -> io::Result<()> {\n     fs_imp::set_perm(path.as_ref(), perm.0)\n }\n \n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n impl DirBuilder {\n     /// Creates a new set of options with default mode/security settings for all\n     /// platforms and also non-recursive.\n@@ -2066,9 +2025,24 @@ mod tests {\n         // These numbers have to be bigger than the time in the day to account\n         // for timezones Windows in particular will fail in certain timezones\n         // with small enough values\n-        check!(fs::set_file_times(&path, 100000, 200000));\n-        assert_eq!(check!(path.metadata()).accessed(), 100000);\n-        assert_eq!(check!(path.metadata()).modified(), 200000);\n+        check!(fs::set_file_times(&path, 100_000, 200_000));\n+\n+        check(&check!(path.metadata()));\n+\n+        #[cfg(unix)]\n+        fn check(metadata: &fs::Metadata) {\n+            use os::unix::prelude::*;\n+            assert_eq!(metadata.atime(), 100);\n+            assert_eq!(metadata.atime_nsec(), 0);\n+            assert_eq!(metadata.mtime(), 200);\n+            assert_eq!(metadata.mtime_nsec(), 0);\n+        }\n+        #[cfg(windows)]\n+        fn check(metadata: &fs::Metadata) {\n+            use os::windows::prelude::*;\n+            assert_eq!(metadata.last_access_time(), 100_000 * 10_000);\n+            assert_eq!(metadata.last_write_time(), 200_000 * 10_000);\n+        }\n     }\n \n     #[test]"}, {"sha": "1947bebb947cc213e5ff00d526b5816eeaa7c0ee", "filename": "src/libstd/os/android/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! Android-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "e5e89ad800a418199dd648b4f02a51c8b8356775", "filename": "src/libstd/os/android/raw.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,6 +10,8 @@\n \n //! Android-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n #[doc(inline)]\n pub use self::arch::{dev_t, mode_t, blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n@@ -18,36 +20,64 @@ mod arch {\n     use os::raw::{c_uint, c_uchar, c_ulonglong, c_longlong, c_ulong};\n     use os::unix::raw::{uid_t, gid_t};\n \n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type mode_t = u16;\n \n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type blkcnt_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type blksize_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type nlink_t = u16;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type off_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type time_t = i32;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad0: [c_uchar; 4],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad3: [c_uchar; 4],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: c_longlong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: c_ulonglong,\n     }\n \n@@ -59,37 +89,64 @@ mod arch {\n     use os::raw::{c_uchar, c_ulong};\n     use os::unix::raw::{uid_t, gid_t};\n \n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type mode_t = u32;\n \n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type blksize_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type time_t = i64;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad0: [c_uchar; 4],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad3: [c_uchar; 4],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n     }\n-\n }"}, {"sha": "2e9f1d33951b62fecd88c5db185fda9ec0f4c405", "filename": "src/libstd/os/bitrig/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! Bitrig-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "2427a4e409251914d7ed6762e55d1589ba1f0286", "filename": "src/libstd/os/bitrig/raw.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,39 +10,62 @@\n \n //! Bitrig-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-pub type blkcnt_t = i64;\n-pub type blksize_t = u32;\n-pub type dev_t = i32;\n-pub type fflags_t = u32; // type not declared, but struct stat have u_int32_t\n-pub type ino_t = u64;\n-pub type mode_t = u32;\n-pub type nlink_t = u32;\n-pub type off_t = i64;\n-pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[repr(C)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: fflags_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n }"}, {"sha": "79ccb8a045850201ac9e282a2dcd1b6dcdcb5540", "filename": "src/libstd/os/dragonfly/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! Dragonfly-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "41e8f9b056750f28e517298c7da93d7a574925a4", "filename": "src/libstd/os/dragonfly/raw.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,41 +10,66 @@\n \n //! Dragonfly-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-pub type blkcnt_t = i64;\n-pub type blksize_t = u32;\n-pub type dev_t = u32;\n-pub type fflags_t = u32;\n-pub type ino_t = u64;\n-pub type mode_t = u16;\n-pub type nlink_t = u16;\n-pub type off_t = i64;\n-pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[repr(C)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_padding1: u16,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: fflags_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: uint32_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_lspare: int32_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_qspare1: int64_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_qspare2: int64_t,\n }"}, {"sha": "947826b816035a0dde56e747baadb196b3c26a26", "filename": "src/libstd/os/freebsd/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! FreeBSD-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "38e31a3c5acdcd6a8e4afe0f60f76c6feb53c534", "filename": "src/libstd/os/freebsd/raw.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,41 +10,75 @@\n \n //! FreeBSD-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type blksize_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type dev_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type ino_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type mode_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type nlink_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type time_t = i64;\n \n #[repr(C)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: fflags_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_lspare: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub __unused: [u8; 2],\n }"}, {"sha": "e2fe2e8a9ba4874fa7d9774ba528e92950c6def1", "filename": "src/libstd/os/ios/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! iOS-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "a9803f50b7b67b7e390fa1078de3d78512868be0", "filename": "src/libstd/os/ios/raw.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,40 +10,65 @@\n \n //! iOS-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-pub type blkcnt_t = i64;\n-pub type blksize_t = i32;\n-pub type dev_t = i32;\n-pub type ino_t = u64;\n-pub type mode_t = u16;\n-pub type nlink_t = u16;\n-pub type off_t = i64;\n-pub type time_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n \n #[repr(C)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_lspare: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_qspare: [i64; 2],\n }"}, {"sha": "146a74a4550e49ea5b1f38d2caf165e712246b37", "filename": "src/libstd/os/linux/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! Linux-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "3275ce07b48ab04d6073e3e3c31ff8268e664ec6", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 109, "deletions": 26, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,8 +10,10 @@\n \n //! Linux-specific raw type definitions\n \n-pub type dev_t = u64;\n-pub type mode_t = u32;\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n \n #[doc(inline)]\n pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n@@ -25,34 +27,55 @@ mod arch {\n     use os::raw::{c_long, c_short};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i32;\n-    pub type blksize_t = i32;\n-    pub type ino_t = u32;\n-    pub type nlink_t = u32;\n-    pub type off_t = i32;\n-    pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad1: c_short,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad2: c_short,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused4: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused5: c_long,\n     }\n }\n@@ -64,34 +87,55 @@ mod arch {\n     use os::raw::{c_long, c_ulong};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i32;\n-    pub type blksize_t = i32;\n-    pub type ino_t = u32;\n-    pub type nlink_t = u32;\n-    pub type off_t = i32;\n-    pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad1: [c_long; 3],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad2: [c_long; 2],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad3: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad5: [c_long; 14],\n     }\n }\n@@ -102,33 +146,53 @@ mod arch {\n     use os::raw::{c_long, c_int};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i64;\n-    pub type blksize_t = i32;\n-    pub type ino_t = u64;\n-    pub type nlink_t = u32;\n-    pub type off_t = i64;\n-    pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad1: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad2: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused: [c_int; 2],\n     }\n }\n@@ -139,32 +203,51 @@ mod arch {\n     use os::raw::{c_long, c_int};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i64;\n-    pub type blksize_t = i64;\n-    pub type ino_t = u64;\n-    pub type nlink_t = u64;\n-    pub type off_t = i64;\n-    pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad0: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused: [c_long; 3],\n     }\n }"}, {"sha": "db3a0e0e64a47f4a5644296bcddd6d8d0a55a820", "filename": "src/libstd/os/macos/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! MacOS-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "dbc1b8c726bfe70b00e25f2f5535fca7d31a7b5e", "filename": "src/libstd/os/macos/raw.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,40 +10,65 @@\n \n //! MacOS-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-pub type blkcnt_t = i64;\n-pub type blksize_t = i32;\n-pub type dev_t = i32;\n-pub type ino_t = u64;\n-pub type mode_t = u16;\n-pub type nlink_t = u16;\n-pub type off_t = i64;\n-pub type time_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n \n #[repr(C)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_lspare: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_qspare: [i64; 2],\n }"}, {"sha": "d481d45404c7f709fa335292b07ce4c6a9c19d99", "filename": "src/libstd/os/nacl/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! Nacl-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "d811b94c847b3d6947746039c165190c9f4794da", "filename": "src/libstd/os/nacl/raw.rs", "status": "modified", "additions": 109, "deletions": 26, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,8 +10,10 @@\n \n //! Nacl-specific raw type definitions\n \n-pub type dev_t = u64;\n-pub type mode_t = u32;\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n \n pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n \n@@ -24,34 +26,55 @@ mod arch {\n     use os::raw::{c_long, c_short};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i32;\n-    pub type blksize_t = i32;\n-    pub type ino_t = u32;\n-    pub type nlink_t = u32;\n-    pub type off_t = i32;\n-    pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad1: c_short,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad2: c_short,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused4: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused5: c_long,\n     }\n }\n@@ -63,34 +86,55 @@ mod arch {\n     use os::raw::c_long;\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i32;\n-    pub type blksize_t = i32;\n-    pub type ino_t = u32;\n-    pub type nlink_t = u32;\n-    pub type off_t = i32;\n-    pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad1: [c_long; 3],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad2: [c_long; 2],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad3: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad5: [c_long; 14],\n     }\n }\n@@ -101,33 +145,53 @@ mod arch {\n     use os::raw::{c_long, c_int};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i64;\n-    pub type blksize_t = i32;\n-    pub type ino_t = u64;\n-    pub type nlink_t = u32;\n-    pub type off_t = i64;\n-    pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad1: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad2: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused: [c_int; 2],\n     }\n }\n@@ -138,32 +202,51 @@ mod arch {\n     use os::raw::{c_long, c_int};\n     use os::unix::raw::{gid_t, uid_t};\n \n-    pub type blkcnt_t = i64;\n-    pub type blksize_t = i64;\n-    pub type ino_t = u64;\n-    pub type nlink_t = u64;\n-    pub type off_t = i64;\n-    pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_dev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: ino_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_nlink: nlink_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: mode_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_uid: uid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gid: gid_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad0: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: off_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blksize: blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __unused: [c_long; 3],\n     }\n }"}, {"sha": "bdb003b877babc796d66230326e8a9c3448ede46", "filename": "src/libstd/os/openbsd/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,10 +10,11 @@\n \n //! OpenBSD-specific definitions\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n \n pub mod fs {\n+    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "79ca901ade7b50dd45263c271280affbb3714026", "filename": "src/libstd/os/openbsd/raw.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,39 +10,62 @@\n \n //! OpenBSD-specific raw type definitions\n \n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-pub type blkcnt_t = i64;\n-pub type blksize_t = u32;\n-pub type dev_t = i32;\n-pub type fflags_t = u32; // type not declared, but struct stat have u_int32_t\n-pub type ino_t = u64;\n-pub type mode_t = u32;\n-pub type nlink_t = u32;\n-pub type off_t = i64;\n-pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[repr(C)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: fflags_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n }"}, {"sha": "2de0448a5347faec3cf39e8db6a9e289cea42eb8", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,24 +10,30 @@\n \n //! Raw OS-specific types for the current platform/architecture\n \n-#![unstable(feature = \"raw_os\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n-#[cfg(target_arch = \"aarch64\")]      pub type c_char = u8;\n-#[cfg(not(target_arch = \"aarch64\"))] pub type c_char = i8;\n-pub type c_schar = i8;\n-pub type c_uchar = u8;\n-pub type c_short = i16;\n-pub type c_ushort = u16;\n-pub type c_int = i32;\n-pub type c_uint = u32;\n-#[cfg(any(target_pointer_width = \"32\", windows))] pub type c_long = i32;\n-#[cfg(any(target_pointer_width = \"32\", windows))] pub type c_ulong = u32;\n-#[cfg(all(target_pointer_width = \"64\", not(windows)))] pub type c_long = i64;\n-#[cfg(all(target_pointer_width = \"64\", not(windows)))] pub type c_ulong = u64;\n-pub type c_longlong = i64;\n-pub type c_ulonglong = u64;\n-pub type c_float = f32;\n-pub type c_double = f64;\n+#[cfg(target_arch = \"aarch64\")]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n+#[cfg(not(target_arch = \"aarch64\"))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n+#[cfg(any(target_pointer_width = \"32\", windows))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n+#[cfg(any(target_pointer_width = \"32\", windows))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n+#[cfg(all(target_pointer_width = \"64\", not(windows)))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n+#[cfg(all(target_pointer_width = \"64\", not(windows)))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n /// Type used to construct void pointers for use with C.\n ///\n@@ -41,8 +47,11 @@ pub type c_double = f64;\n //     variants, because the compiler complains about the repr attribute\n //     otherwise.\n #[repr(u8)]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n pub enum c_void {\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\")]\n     #[doc(hidden)] __variant1,\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\")]\n     #[doc(hidden)] __variant2,\n }\n "}, {"sha": "97703b8305683e46031f48d9097b7e6533261e80", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 77, "deletions": 47, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -16,11 +16,10 @@ use prelude::v1::*;\n \n use fs::{self, Permissions, OpenOptions};\n use io;\n-use mem;\n use os::raw::c_long;\n use os::unix::raw;\n use path::Path;\n-use sys::platform;\n+use sys::fs::MetadataExt as UnixMetadataExt;\n use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n \n@@ -64,14 +63,24 @@ pub const SETGID: raw::mode_t = 0o2000;\n pub const STICKY_BIT: raw::mode_t = 0o1000;\n \n /// Unix-specific extensions to `Permissions`\n-#[unstable(feature = \"fs_ext\",\n-           reason = \"may want a more useful mode abstraction\")]\n+#[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n+    /// Returns the underlying raw `mode_t` bits that are the standard Unix\n+    /// permissions for this file.\n+    #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> raw::mode_t;\n+\n+    /// Sets the underlying raw `mode_t` bits for this set of permissions.\n+    #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn set_mode(&mut self, mode: raw::mode_t);\n+\n+    /// Creates a new instance of `Permissions` from the given set of Unix\n+    /// permission bits.\n+    #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn from_mode(mode: raw::mode_t) -> Self;\n }\n \n+#[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n impl PermissionsExt for Permissions {\n     fn mode(&self) -> raw::mode_t { self.as_inner().mode() }\n \n@@ -85,75 +94,96 @@ impl PermissionsExt for Permissions {\n }\n \n /// Unix-specific extensions to `OpenOptions`\n-#[unstable(feature = \"fs_ext\",\n-           reason = \"may want a more useful mode abstraction\")]\n+#[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n     ///\n     /// If a new file is created as part of a `File::open_opts` call then this\n     /// specified `mode` will be used as the permission bits for the new file.\n+    #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n }\n \n+#[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n impl OpenOptionsExt for OpenOptions {\n     fn mode(&mut self, mode: raw::mode_t) -> &mut OpenOptions {\n         self.as_inner_mut().mode(mode); self\n     }\n }\n \n-#[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n-pub struct Metadata(sys::fs::FileAttr);\n-\n-#[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n-pub trait MetadataExt {\n-    fn as_raw(&self) -> &Metadata;\n-}\n-\n-impl MetadataExt for fs::Metadata {\n-    fn as_raw(&self) -> &Metadata {\n-        let inner: &sys::fs::FileAttr = self.as_inner();\n-        unsafe { mem::transmute(inner) }\n-    }\n-}\n-\n-impl AsInner<platform::raw::stat> for Metadata {\n-    fn as_inner(&self) -> &platform::raw::stat { self.0.as_inner() }\n-}\n-\n // Hm, why are there casts here to the returned type, shouldn't the types always\n // be the same? Right you are! Turns out, however, on android at least the types\n // in the raw `stat` structure are not the same as the types being returned. Who\n // knew!\n //\n // As a result to make sure this compiles for all platforms we do the manual\n // casts and rely on manual lowering to `stat` if the raw type is desired.\n-#[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n-impl Metadata {\n-    pub fn dev(&self) -> raw::dev_t { self.0.raw().st_dev as raw::dev_t }\n-    pub fn ino(&self) -> raw::ino_t { self.0.raw().st_ino as raw::ino_t }\n-    pub fn mode(&self) -> raw::mode_t { self.0.raw().st_mode as raw::mode_t }\n-    pub fn nlink(&self) -> raw::nlink_t { self.0.raw().st_nlink as raw::nlink_t }\n-    pub fn uid(&self) -> raw::uid_t { self.0.raw().st_uid as raw::uid_t }\n-    pub fn gid(&self) -> raw::gid_t { self.0.raw().st_gid as raw::gid_t }\n-    pub fn rdev(&self) -> raw::dev_t { self.0.raw().st_rdev as raw::dev_t }\n-    pub fn size(&self) -> raw::off_t { self.0.raw().st_size as raw::off_t }\n-    pub fn atime(&self) -> raw::time_t { self.0.raw().st_atime }\n-    pub fn atime_nsec(&self) -> c_long { self.0.raw().st_atime_nsec as c_long }\n-    pub fn mtime(&self) -> raw::time_t { self.0.raw().st_mtime }\n-    pub fn mtime_nsec(&self) -> c_long { self.0.raw().st_mtime_nsec as c_long }\n-    pub fn ctime(&self) -> raw::time_t { self.0.raw().st_ctime }\n-    pub fn ctime_nsec(&self) -> c_long { self.0.raw().st_ctime_nsec as c_long }\n-\n-    pub fn blksize(&self) -> raw::blksize_t {\n-        self.0.raw().st_blksize as raw::blksize_t\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn dev(&self) -> raw::dev_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn ino(&self) -> raw::ino_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn mode(&self) -> raw::mode_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn nlink(&self) -> raw::nlink_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn uid(&self) -> raw::uid_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn gid(&self) -> raw::gid_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn rdev(&self) -> raw::dev_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn size(&self) -> raw::off_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn atime(&self) -> raw::time_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn atime_nsec(&self) -> c_long;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn mtime(&self) -> raw::time_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn mtime_nsec(&self) -> c_long;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn ctime(&self) -> raw::time_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn ctime_nsec(&self) -> c_long;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn blksize(&self) -> raw::blksize_t;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn blocks(&self) -> raw::blkcnt_t;\n+}\n+\n+impl MetadataExt for fs::Metadata {\n+    fn dev(&self) -> raw::dev_t { self.as_raw_stat().st_dev as raw::dev_t }\n+    fn ino(&self) -> raw::ino_t { self.as_raw_stat().st_ino as raw::ino_t }\n+    fn mode(&self) -> raw::mode_t { self.as_raw_stat().st_mode as raw::mode_t }\n+    fn nlink(&self) -> raw::nlink_t { self.as_raw_stat().st_nlink as raw::nlink_t }\n+    fn uid(&self) -> raw::uid_t { self.as_raw_stat().st_uid as raw::uid_t }\n+    fn gid(&self) -> raw::gid_t { self.as_raw_stat().st_gid as raw::gid_t }\n+    fn rdev(&self) -> raw::dev_t { self.as_raw_stat().st_rdev as raw::dev_t }\n+    fn size(&self) -> raw::off_t { self.as_raw_stat().st_size as raw::off_t }\n+    fn atime(&self) -> raw::time_t { self.as_raw_stat().st_atime }\n+    fn atime_nsec(&self) -> c_long { self.as_raw_stat().st_atime_nsec as c_long }\n+    fn mtime(&self) -> raw::time_t { self.as_raw_stat().st_mtime }\n+    fn mtime_nsec(&self) -> c_long { self.as_raw_stat().st_mtime_nsec as c_long }\n+    fn ctime(&self) -> raw::time_t { self.as_raw_stat().st_ctime }\n+    fn ctime_nsec(&self) -> c_long { self.as_raw_stat().st_ctime_nsec as c_long }\n+\n+    fn blksize(&self) -> raw::blksize_t {\n+        self.as_raw_stat().st_blksize as raw::blksize_t\n     }\n-    pub fn blocks(&self) -> raw::blkcnt_t {\n-        self.0.raw().st_blocks as raw::blkcnt_t\n+    fn blocks(&self) -> raw::blkcnt_t {\n+        self.as_raw_stat().st_blocks as raw::blkcnt_t\n     }\n }\n \n-#[unstable(feature = \"dir_entry_ext\", reason = \"recently added API\")]\n+/// Unix-specific extension methods for `fs::DirEntry`\n+#[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n+    /// Returns the underlying `d_ino` field in the contained `dirent`\n+    /// structure.\n+    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     fn ino(&self) -> raw::ino_t;\n }\n "}, {"sha": "fa380abe6c54d97ff5995e00fc31deff342f8e90", "filename": "src/libstd/sys/unix/ext/raw.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,11 +10,11 @@\n \n //! Unix-specific primitives available on all unix platforms\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub type uid_t = u32;\n-pub type gid_t = u32;\n-pub type pid_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type pid_t = i32;\n \n #[doc(inline)]\n pub use sys::platform::raw::{dev_t, ino_t, mode_t, nlink_t, off_t, blksize_t};"}, {"sha": "128284834ab01362944242581aa25349352eeb96", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -69,42 +69,33 @@ impl FileAttr {\n         FilePermissions { mode: (self.stat.st_mode as mode_t) & 0o777 }\n     }\n \n-    pub fn accessed(&self) -> u64 {\n-        self.mktime(self.stat.st_atime as u64, self.stat.st_atime_nsec as u64)\n-    }\n-    pub fn modified(&self) -> u64 {\n-        self.mktime(self.stat.st_mtime as u64, self.stat.st_mtime_nsec as u64)\n-    }\n-\n     pub fn file_type(&self) -> FileType {\n         FileType { mode: self.stat.st_mode as mode_t }\n     }\n-\n-    pub fn raw(&self) -> &raw::stat { &self.stat }\n-\n-    // times are in milliseconds (currently)\n-    fn mktime(&self, secs: u64, nsecs: u64) -> u64 {\n-        secs * 1000 + nsecs / 1000000\n-    }\n }\n \n impl AsInner<raw::stat> for FileAttr {\n     fn as_inner(&self) -> &raw::stat { &self.stat }\n }\n \n-#[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains the\n+    /// raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across Unix\n+    /// platforms. The `os::unix::fs::MetadataExt` trait contains the cross-Unix\n+    /// abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn as_raw_stat(&self) -> &raw::stat;\n }\n \n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for ::fs::Metadata {\n     fn as_raw_stat(&self) -> &raw::stat { &self.as_inner().stat }\n }\n \n-impl MetadataExt for ::os::unix::fs::Metadata {\n-    fn as_raw_stat(&self) -> &raw::stat { self.as_inner() }\n-}\n-\n impl FilePermissions {\n     pub fn readonly(&self) -> bool { self.mode & 0o222 == 0 }\n     pub fn set_readonly(&mut self, readonly: bool) {"}, {"sha": "f629e983ce542aeaa438406ca607b73fb709af22", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -21,7 +21,8 @@ use sys;\n use sys_common::{AsInnerMut, AsInner};\n \n /// Windows-specific extensions to `OpenOptions`\n-#[unstable(feature = \"fs_ext\", reason = \"may require more thought/methods\")]\n+#[unstable(feature = \"open_options_ext\",\n+           reason = \"may require more thought/methods\")]\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n     /// with the specified value.\n@@ -66,39 +67,45 @@ impl OpenOptionsExt for OpenOptions {\n \n /// Extension methods for `fs::Metadata` to access the raw fields contained\n /// within.\n-#[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the value of the `dwFileAttributes` field of this metadata.\n     ///\n     /// This field contains the file system attribute information for a file\n     /// or directory.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_attributes(&self) -> u32;\n \n     /// Returns the value of the `ftCreationTime` field of this metadata.\n     ///\n     /// The returned 64-bit value represents the number of 100-nanosecond\n     /// intervals since January 1, 1601 (UTC).\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn creation_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastAccessTime` field of this metadata.\n     ///\n     /// The returned 64-bit value represents the number of 100-nanosecond\n     /// intervals since January 1, 1601 (UTC).\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_access_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastWriteTime` field of this metadata.\n     ///\n     /// The returned 64-bit value represents the number of 100-nanosecond\n     /// intervals since January 1, 1601 (UTC).\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_write_time(&self) -> u64;\n \n     /// Returns the value of the `nFileSize{High,Low}` fields of this\n     /// metadata.\n     ///\n     /// The returned value does not have meaning for directories.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_size(&self) -> u64;\n }\n \n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for Metadata {\n     fn file_attributes(&self) -> u32 { self.as_inner().attrs() }\n     fn creation_time(&self) -> u64 { self.as_inner().created() }"}, {"sha": "e1796d4b5f0737df979e14653d6caaf68653e7a5", "filename": "src/libstd/sys/windows/ext/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab23ddbd39d797dde46288af0ae9d29784e7a3/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs?ref=50ab23ddbd39d797dde46288af0ae9d29784e7a3", "patch": "@@ -10,12 +10,12 @@\n \n //! Windows-specific primitives\n \n-#![unstable(feature = \"raw_ext\", reason = \"recently added API\")]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-use os::raw;\n+use os::raw::c_void;\n \n-pub type HANDLE = *mut raw::c_void;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type HANDLE = *mut c_void;\n #[cfg(target_pointer_width = \"32\")]\n-pub type SOCKET = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type SOCKET = u32;\n #[cfg(target_pointer_width = \"64\")]\n-pub type SOCKET = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type SOCKET = u64;"}]}