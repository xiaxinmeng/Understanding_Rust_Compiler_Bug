{"sha": "84d93a4edd808e913debc35a007bac7cfb1db07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZDkzYTRlZGQ4MDhlOTEzZGViYzM1YTAwN2JhYzdjZmIxZGIwN2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-18T05:44:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-22T04:35:40Z"}, "message": "Use a config file with save-analysis\n\nReplaces the output path env var. Can be passed to save-analysis via a function call or env var.", "tree": {"sha": "8b16d078e1200d0aeda889acc477a77d4f1df85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b16d078e1200d0aeda889acc477a77d4f1df85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d93a4edd808e913debc35a007bac7cfb1db07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d93a4edd808e913debc35a007bac7cfb1db07f", "html_url": "https://github.com/rust-lang/rust/commit/84d93a4edd808e913debc35a007bac7cfb1db07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d93a4edd808e913debc35a007bac7cfb1db07f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "504328a31a211814f9cac6de84c5a7ed154f58eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/504328a31a211814f9cac6de84c5a7ed154f58eb", "html_url": "https://github.com/rust-lang/rust/commit/504328a31a211814f9cac6de84c5a7ed154f58eb"}], "stats": {"total": 94, "additions": 62, "deletions": 32}, "files": [{"sha": "0c12d7304da3693713efeafa7130c6df2609b104", "filename": "src/Cargo.lock", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=84d93a4edd808e913debc35a007bac7cfb1db07f", "patch": "@@ -1128,6 +1128,15 @@ dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rls-data\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rls-span\"\n version = \"0.4.0\"\n@@ -1459,7 +1468,7 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2172,6 +2181,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rls-analysis 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea940411ed2ad6d1e705fc2a0b146a0a3f30f8098ba4e61b45b4e5f2bfa7ed63\"\n \"checksum rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e502ac679bc35e023e982506c32d0278ef89e29af1e4ad21cb70c44b525b87a9\"\n+\"checksum rls-data 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f274ec7f966337dc2601fe9bde060b551d1293c277af782dc65cd7200ca070c0\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\"\n \"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\""}, {"sha": "0fc17e645151fc940935820b4b78013748ded2f9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=84d93a4edd808e913debc35a007bac7cfb1db07f", "patch": "@@ -578,6 +578,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                         state.expanded_crate.unwrap(),\n                                         state.analysis.unwrap(),\n                                         state.crate_name.unwrap(),\n+                                        None,\n                                         DumpHandler::new(save_analysis_format(state.session),\n                                                          state.out_dir,\n                                                          state.crate_name.unwrap()))"}, {"sha": "2a51bf9430e7ea2a5a0f37e4cc581b27c9452d4c", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=84d93a4edd808e913debc35a007bac7cfb1db07f", "patch": "@@ -14,7 +14,7 @@ rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.7\"\n+rls-data = \"0.9\"\n rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "530e29a8c82cf3b5963c9d044ed2f5fdf929e38e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d93a4edd808e913debc35a007bac7cfb1db07f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=84d93a4edd808e913debc35a007bac7cfb1db07f", "patch": "@@ -43,10 +43,10 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeItem};\n use rustc::hir::def_id::DefId;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n-use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n \n+use std::default::Default;\n use std::env;\n use std::fs::File;\n use std::path::{Path, PathBuf};\n@@ -68,13 +68,15 @@ use span_utils::SpanUtils;\n \n use rls_data::{Ref, RefKind, SpanData, MacroRef, Def, DefKind, Relation, RelationKind,\n                ExternalCrateData, Import, CratePreludeData};\n+use rls_data::config::Config;\n \n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n     analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n+    config: Config,\n }\n \n #[derive(Debug)]\n@@ -900,39 +902,41 @@ impl<'a> DumpHandler<'a> {\n         }\n     }\n \n-    fn output_file(&self, sess: &Session) -> File {\n-        let mut root_path = match env::var_os(\"RUST_SAVE_ANALYSIS_FOLDER\") {\n-            Some(val) => PathBuf::from(val),\n-            None => match self.odir {\n-                Some(val) => val.join(\"save-analysis\"),\n-                None => PathBuf::from(\"save-analysis-temp\"),\n-            },\n-        };\n+    fn output_file(&self, ctx: &SaveContext) -> File {\n+        let sess = &ctx.tcx.sess;\n+        let file_name = match ctx.config.output_file {\n+            Some(ref s) => PathBuf::from(s),\n+            None => {\n+                let mut root_path = match self.odir {\n+                    Some(val) => val.join(\"save-analysis\"),\n+                    None => PathBuf::from(\"save-analysis-temp\"),\n+                };\n \n-        if let Err(e) = std::fs::create_dir_all(&root_path) {\n-            error!(\"Could not create directory {}: {}\", root_path.display(), e);\n-        }\n+                if let Err(e) = std::fs::create_dir_all(&root_path) {\n+                    error!(\"Could not create directory {}: {}\", root_path.display(), e);\n+                }\n \n-        {\n-            let disp = root_path.display();\n-            info!(\"Writing output to {}\", disp);\n-        }\n+                let executable = sess.crate_types.borrow().iter().any(|ct| *ct == CrateTypeExecutable);\n+                let mut out_name = if executable {\n+                    \"\".to_owned()\n+                } else {\n+                    \"lib\".to_owned()\n+                };\n+                out_name.push_str(&self.cratename);\n+                out_name.push_str(&sess.opts.cg.extra_filename);\n+                out_name.push_str(self.format.extension());\n+                root_path.push(&out_name);\n \n-        let executable = sess.crate_types.borrow().iter().any(|ct| *ct == CrateTypeExecutable);\n-        let mut out_name = if executable {\n-            \"\".to_owned()\n-        } else {\n-            \"lib\".to_owned()\n+                root_path\n+            }\n         };\n-        out_name.push_str(&self.cratename);\n-        out_name.push_str(&sess.opts.cg.extra_filename);\n-        out_name.push_str(self.format.extension());\n-        root_path.push(&out_name);\n-        let output_file = File::create(&root_path).unwrap_or_else(|e| {\n-            let disp = root_path.display();\n-            sess.fatal(&format!(\"Could not open {}: {}\", disp, e));\n+\n+        info!(\"Writing output to {}\", file_name.display());\n+\n+        let output_file = File::create(&file_name).unwrap_or_else(|e| {\n+            sess.fatal(&format!(\"Could not open {}: {}\", file_name.display(), e))\n         });\n-        root_path.pop();\n+\n         output_file\n     }\n }\n@@ -952,7 +956,7 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n             }}\n         }\n \n-        let output = &mut self.output_file(&save_ctxt.tcx.sess);\n+        let output = &mut self.output_file(&save_ctxt);\n \n         match self.format {\n             Format::Json => dump!(JsonDumper::new(output)),\n@@ -994,6 +998,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n                                                krate: &ast::Crate,\n                                                analysis: &'l ty::CrateAnalysis,\n                                                cratename: &str,\n+                                               config: Option<Config>,\n                                                mut handler: H) {\n     let _ignore = tcx.dep_graph.in_ignore();\n \n@@ -1006,11 +1011,25 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n         tables: &ty::TypeckTables::empty(),\n         analysis: analysis,\n         span_utils: SpanUtils::new(&tcx.sess),\n+        config: find_config(config),\n     };\n \n     handler.save(save_ctxt, krate, cratename)\n }\n \n+fn find_config(supplied: Option<Config>) -> Config {\n+    if let Some(config) = supplied {\n+        return config;\n+    }\n+    match env::var_os(\"RUST_SAVE_ANALYSIS_CONFIG\") {\n+        Some(config_string) => {\n+            rustc_serialize::json::decode(config_string.to_str().unwrap())\n+                .expect(\"Could not deserialize save-analysis config\")\n+        },\n+        None => Config::default(),\n+    }\n+}\n+\n // Utility functions for the module.\n \n // Helper function to escape quotes in a string"}]}