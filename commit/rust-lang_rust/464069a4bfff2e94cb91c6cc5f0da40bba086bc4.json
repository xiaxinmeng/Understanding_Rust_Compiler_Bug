{"sha": "464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDA2OWE0YmZmZjJlOTRjYjkxYzZjYzVmMGRhNDBiYmEwODZiYzQ=", "commit": {"author": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2015-05-04T17:21:27Z"}, "committer": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2015-05-04T17:21:27Z"}, "message": "Fix spelling errors in documentation.", "tree": {"sha": "06e9334d36c5e4accf6452d1ec45f7d3feeecbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e9334d36c5e4accf6452d1ec45f7d3feeecbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "html_url": "https://github.com/rust-lang/rust/commit/464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/comments", "author": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a979efc2f961c2cf8d7afa57b905e73349b8f476", "url": "https://api.github.com/repos/rust-lang/rust/commits/a979efc2f961c2cf8d7afa57b905e73349b8f476", "html_url": "https://github.com/rust-lang/rust/commit/a979efc2f961c2cf8d7afa57b905e73349b8f476"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "38431ab5bf1b0b84e1f4c89a61e7325dc19745a9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -713,7 +713,7 @@ impl str {\n     /// is skipped if empty.\n     ///\n     /// This method can be used for string data that is _terminated_,\n-    /// rather than _seperated_ by a pattern.\n+    /// rather than _separated_ by a pattern.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -760,7 +760,7 @@ impl str {\n     /// skipped if empty.\n     ///\n     /// This method can be used for string data that is _terminated_,\n-    /// rather than _seperated_ by a pattern.\n+    /// rather than _separated_ by a pattern.\n     ///\n     /// # Iterator behavior\n     ///"}, {"sha": "3c668f7fe9bc680f5369e0ef6d8c2d2f92212973", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -757,7 +757,7 @@ impl FromUtf8Error {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> { self.bytes }\n \n-    /// Accesss the underlying UTF8-error that was the cause of this error.\n+    /// Access the underlying UTF8-error that was the cause of this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn utf8_error(&self) -> Utf8Error { self.error }\n }"}, {"sha": "c9bbcba31e9de28009118823df32c32693d2f3e9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -421,7 +421,7 @@ macro_rules! derive_pattern_clone {\n /// wrapping an private internal one that makes use of the `Pattern` API.\n ///\n /// For all patterns `P: Pattern<'a>` the following items will be\n-/// generated (generics ommitted):\n+/// generated (generics omitted):\n ///\n /// struct $forward_iterator($internal_iterator);\n /// struct $reverse_iterator($internal_iterator);"}, {"sha": "b0940aa7ec0ac823afccc51d440547dacd80c898", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -461,7 +461,7 @@ impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> {\n \n /// Constructs and returns a substitution that, for a given type\n /// scheme parameterized by `generics`, will replace every generic\n-/// parmeter in the type with a skolemized type/region (which one can\n+/// parameter in the type with a skolemized type/region (which one can\n /// think of as a \"fresh constant\", except at the type/region level of\n /// reasoning).\n ///"}, {"sha": "c80dba6d1fb31d26e067f5cb1e7b0ff6debe5749", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -1908,7 +1908,7 @@ pub enum Predicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    /// Performs a substituion suitable for going from a\n+    /// Performs a substitution suitable for going from a\n     /// poly-trait-ref to supertraits that must hold if that\n     /// poly-trait-ref holds. This is slightly different from a normal\n     /// substitution in terms of what happens with bound regions.  See"}, {"sha": "362296cd1339daa1d3456bc1f189a99f96129f57", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -434,7 +434,7 @@ pub mod builtin {\n \n     /// Parse the current given file as an expression.\n     ///\n-    /// This is generally a bad idea, because it's going to behave unhygenically.\n+    /// This is generally a bad idea, because it's going to behave unhygienically.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8ccc387c9027788adb1e7603bdbc34f1a01a58d4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -358,7 +358,7 @@ pub fn is_separator(c: char) -> bool {\n     c.is_ascii() && is_sep_byte(c as u8)\n }\n \n-/// The primary sperator for the current platform\n+/// The primary separator for the current platform\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAIN_SEPARATOR: char = platform::MAIN_SEP;\n "}, {"sha": "e00cb82649b7b6bb538948623d1f1215eafbcd6e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464069a4bfff2e94cb91c6cc5f0da40bba086bc4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=464069a4bfff2e94cb91c6cc5f0da40bba086bc4", "patch": "@@ -595,7 +595,7 @@ pub enum Pat_ {\n \n     /// An associated const named using the qualified path `<T>::CONST` or\n     /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n-    /// refered to as simply `T::CONST`, in which case they will end up as\n+    /// referred to as simply `T::CONST`, in which case they will end up as\n     /// PatEnum, and the resolver will have to sort that out.\n     PatQPath(QSelf, Path),\n "}]}