{"sha": "8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZmEwYmZhYTI0NTJlYjljODBiZjBmMTkwOWIwMzllZmM4ZGQwYzM=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-10T22:52:33Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-13T18:33:32Z"}, "message": "New lint: reversed_empty_ranges", "tree": {"sha": "0cdaab2f19757167ef29e37731792a55efbbdcb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cdaab2f19757167ef29e37731792a55efbbdcb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "html_url": "https://github.com/rust-lang/rust/commit/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20a9cd474776277a7ad7435fa0ff7b36f829ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20a9cd474776277a7ad7435fa0ff7b36f829ddf", "html_url": "https://github.com/rust-lang/rust/commit/b20a9cd474776277a7ad7435fa0ff7b36f829ddf"}], "stats": {"total": 260, "additions": 258, "deletions": 2}, "files": [{"sha": "33b277fbd3189cfccedda5c9a974590c663e6f51", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -1546,6 +1546,7 @@ Released 2018-09-13\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reverse_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#reverse_range_loop\n+[`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse"}, {"sha": "e1cb10a465123877b7f112293872264e9437a311", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -770,6 +770,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::RANGE_MINUS_ONE,\n         &ranges::RANGE_PLUS_ONE,\n         &ranges::RANGE_ZIP_WITH_LEN,\n+        &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n@@ -1384,6 +1385,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&question_mark::QUESTION_MARK),\n         LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n+        LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n@@ -1675,6 +1677,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),\n+        LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),"}, {"sha": "86d55ccabb600211db34221f0fa03779f89b5649", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -1,14 +1,17 @@\n+use crate::consts::{constant, Constant};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n+use std::cmp::Ordering;\n \n use crate::utils::sugg::Sugg;\n+use crate::utils::{get_parent_expr, is_integer_const, snippet, snippet_opt, span_lint, span_lint_and_then};\n use crate::utils::{higher, SpanlessEq};\n-use crate::utils::{is_integer_const, snippet, snippet_opt, span_lint, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for zipping a collection with the range of\n@@ -84,10 +87,44 @@ declare_clippy_lint! {\n     \"`x..=(y-1)` reads better as `x..y`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for range expressions `x..y` where both `x` and `y`\n+    /// are constant and `x` is greater or equal to `y`.\n+    ///\n+    /// **Why is this bad?** Empty ranges yield no values so iterating them is a no-op.\n+    /// Moreover, trying to use a reversed range to index a slice will panic at run-time.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn main() {\n+    ///     (10..=0).for_each(|x| println!(\"{}\", x));\n+    ///\n+    ///     let arr = [1, 2, 3, 4, 5];\n+    ///     let sub = &arr[3..1];\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     (0..=10).rev().for_each(|x| println!(\"{}\", x));\n+    ///\n+    ///     let arr = [1, 2, 3, 4, 5];\n+    ///     let sub = &arr[1..3];\n+    /// }\n+    /// ```\n+    pub REVERSED_EMPTY_RANGES,\n+    correctness,\n+    \"reversing the limits of range expressions, resulting in empty ranges\"\n+}\n+\n declare_lint_pass!(Ranges => [\n     RANGE_ZIP_WITH_LEN,\n     RANGE_PLUS_ONE,\n-    RANGE_MINUS_ONE\n+    RANGE_MINUS_ONE,\n+    REVERSED_EMPTY_RANGES,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n@@ -124,6 +161,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n \n         check_exclusive_range_plus_one(cx, expr);\n         check_inclusive_range_minus_one(cx, expr);\n+        check_reversed_empty_range(cx, expr);\n     }\n }\n \n@@ -202,6 +240,76 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn check_reversed_empty_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+    fn inside_indexing_expr(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        matches!(\n+            get_parent_expr(cx, expr),\n+            Some(Expr {\n+                kind: ExprKind::Index(..),\n+                ..\n+            })\n+        )\n+    }\n+\n+    fn is_empty_range(limits: RangeLimits, ordering: Ordering) -> bool {\n+        match limits {\n+            RangeLimits::HalfOpen => ordering != Ordering::Less,\n+            RangeLimits::Closed => ordering == Ordering::Greater,\n+        }\n+    }\n+\n+    if_chain! {\n+        if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(cx, expr);\n+        let ty = cx.tables.expr_ty(start);\n+        if let ty::Int(_) | ty::Uint(_) = ty.kind;\n+        if let Some((start_idx, _)) = constant(cx, cx.tables, start);\n+        if let Some((end_idx, _)) = constant(cx, cx.tables, end);\n+        if let Some(ordering) = Constant::partial_cmp(cx.tcx, ty, &start_idx, &end_idx);\n+        if is_empty_range(limits, ordering);\n+        then {\n+            if inside_indexing_expr(cx, expr) {\n+                let (reason, outcome) = if ordering == Ordering::Equal {\n+                    (\"empty\", \"always yield an empty slice\")\n+                } else {\n+                    (\"reversed\", \"panic at run-time\")\n+                };\n+\n+                span_lint(\n+                    cx,\n+                    REVERSED_EMPTY_RANGES,\n+                    expr.span,\n+                    &format!(\"this range is {} and using it to index a slice will {}\", reason, outcome),\n+                );\n+            } else {\n+                span_lint_and_then(\n+                    cx,\n+                    REVERSED_EMPTY_RANGES,\n+                    expr.span,\n+                    \"this range is empty so it will yield no values\",\n+                    |diag| {\n+                        if ordering != Ordering::Equal {\n+                            let start_snippet = snippet(cx, start.span, \"_\");\n+                            let end_snippet = snippet(cx, end.span, \"_\");\n+                            let dots = match limits {\n+                                RangeLimits::HalfOpen => \"..\",\n+                                RangeLimits::Closed => \"..=\"\n+                            };\n+\n+                            diag.span_suggestion(\n+                                expr.span,\n+                                \"consider using the following if you are attempting to iterate over this \\\n+                                 range in reverse\",\n+                                format!(\"({}{}{}).rev()\", end_snippet, dots, start_snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}\n+\n fn y_plus_one<'t>(cx: &LateContext<'_, '_>, expr: &'t Expr<'_>) -> Option<&'t Expr<'t>> {\n     match expr.kind {\n         ExprKind::Binary("}, {"sha": "ee2cbc3cf540eb1309ced9d7a3caee6720047611", "filename": "tests/ui/reversed_empty_ranges_fixable.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.fixed?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+const ANSWER: i32 = 42;\n+\n+fn main() {\n+    (21..=42).rev().for_each(|x| println!(\"{}\", x));\n+    let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+\n+    for _ in (-42..=-21).rev() {}\n+    for _ in (21u32..42u32).rev() {}\n+\n+    // These should be ignored as they are not empty ranges:\n+\n+    (21..=42).for_each(|x| println!(\"{}\", x));\n+    (21..42).for_each(|x| println!(\"{}\", x));\n+\n+    let arr = [1, 2, 3, 4, 5];\n+    let _ = &arr[1..=3];\n+    let _ = &arr[1..3];\n+\n+    for _ in 21..=42 {}\n+    for _ in 21..42 {}\n+}"}, {"sha": "6ed5ca6daa0e8fd537e8b7e0635234dbb6f491cb", "filename": "tests/ui/reversed_empty_ranges_fixable.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.rs?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+const ANSWER: i32 = 42;\n+\n+fn main() {\n+    (42..=21).for_each(|x| println!(\"{}\", x));\n+    let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+\n+    for _ in -21..=-42 {}\n+    for _ in 42u32..21u32 {}\n+\n+    // These should be ignored as they are not empty ranges:\n+\n+    (21..=42).for_each(|x| println!(\"{}\", x));\n+    (21..42).for_each(|x| println!(\"{}\", x));\n+\n+    let arr = [1, 2, 3, 4, 5];\n+    let _ = &arr[1..=3];\n+    let _ = &arr[1..3];\n+\n+    for _ in 21..=42 {}\n+    for _ in 21..42 {}\n+}"}, {"sha": "97933b8ff851530496f750deb848bb0a87668e1d", "filename": "tests/ui/reversed_empty_ranges_fixable.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.stderr?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -0,0 +1,47 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:7:5\n+   |\n+LL |     (42..=21).for_each(|x| println!(\"{}\", x));\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:8:13\n+   |\n+LL |     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:10:14\n+   |\n+LL |     for _ in -21..=-42 {}\n+   |              ^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for _ in (-42..=-21).rev() {}\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:11:14\n+   |\n+LL |     for _ in 42u32..21u32 {}\n+   |              ^^^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for _ in (21u32..42u32).rev() {}\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c9ca4c476683101ccd049f1ede61d4526025f1b2", "filename": "tests/ui/reversed_empty_ranges_unfixable.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.rs?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -0,0 +1,15 @@\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+const ANSWER: i32 = 42;\n+const SOME_NUM: usize = 3;\n+\n+fn main() {\n+    let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n+\n+    let arr = [1, 2, 3, 4, 5];\n+    let _ = &arr[3usize..=1usize];\n+    let _ = &arr[SOME_NUM..1];\n+    let _ = &arr[3..3];\n+\n+    for _ in ANSWER..ANSWER {}\n+}"}, {"sha": "12e5483ecdfff05e6d5869cbe51ea8b0038b72d4", "filename": "tests/ui/reversed_empty_ranges_unfixable.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr?ref=8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "patch": "@@ -0,0 +1,34 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:7:13\n+   |\n+LL |     let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+\n+error: this range is reversed and using it to index a slice will panic at run-time\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:10:18\n+   |\n+LL |     let _ = &arr[3usize..=1usize];\n+   |                  ^^^^^^^^^^^^^^^\n+\n+error: this range is reversed and using it to index a slice will panic at run-time\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:11:18\n+   |\n+LL |     let _ = &arr[SOME_NUM..1];\n+   |                  ^^^^^^^^^^^\n+\n+error: this range is empty and using it to index a slice will always yield an empty slice\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:12:18\n+   |\n+LL |     let _ = &arr[3..3];\n+   |                  ^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:14:14\n+   |\n+LL |     for _ in ANSWER..ANSWER {}\n+   |              ^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}