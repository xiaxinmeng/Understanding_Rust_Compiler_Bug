{"sha": "55464ebc8372cb2b489aaee84c324f5a6f6ba58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NDY0ZWJjODM3MmNiMmI0ODlhYWVlODRjMzI0ZjVhNmY2YmE1OGQ=", "commit": {"author": {"name": "Yashhwanth Ram", "email": "ryr397@gmail.com", "date": "2020-04-12T04:32:02Z"}, "committer": {"name": "Yashhwanth Ram", "email": "ryr397@gmail.com", "date": "2020-04-12T06:44:42Z"}, "message": "Fix order of comparison and remove incorrect case for ints in typeck/demand.rs\nAdd tests for *size", "tree": {"sha": "f0d79940dcae80720acbf7b82d2e393bb55ac08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0d79940dcae80720acbf7b82d2e393bb55ac08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55464ebc8372cb2b489aaee84c324f5a6f6ba58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55464ebc8372cb2b489aaee84c324f5a6f6ba58d", "html_url": "https://github.com/rust-lang/rust/commit/55464ebc8372cb2b489aaee84c324f5a6f6ba58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55464ebc8372cb2b489aaee84c324f5a6f6ba58d/comments", "author": {"login": "ryr3", "id": 17092480, "node_id": "MDQ6VXNlcjE3MDkyNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/17092480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryr3", "html_url": "https://github.com/ryr3", "followers_url": "https://api.github.com/users/ryr3/followers", "following_url": "https://api.github.com/users/ryr3/following{/other_user}", "gists_url": "https://api.github.com/users/ryr3/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryr3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryr3/subscriptions", "organizations_url": "https://api.github.com/users/ryr3/orgs", "repos_url": "https://api.github.com/users/ryr3/repos", "events_url": "https://api.github.com/users/ryr3/events{/privacy}", "received_events_url": "https://api.github.com/users/ryr3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ryr3", "id": 17092480, "node_id": "MDQ6VXNlcjE3MDkyNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/17092480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryr3", "html_url": "https://github.com/ryr3", "followers_url": "https://api.github.com/users/ryr3/followers", "following_url": "https://api.github.com/users/ryr3/following{/other_user}", "gists_url": "https://api.github.com/users/ryr3/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryr3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryr3/subscriptions", "organizations_url": "https://api.github.com/users/ryr3/orgs", "repos_url": "https://api.github.com/users/ryr3/repos", "events_url": "https://api.github.com/users/ryr3/events{/privacy}", "received_events_url": "https://api.github.com/users/ryr3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3c9912dbad13d7a3c369df4913e36d7fd7315ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c9912dbad13d7a3c369df4913e36d7fd7315ad", "html_url": "https://github.com/rust-lang/rust/commit/b3c9912dbad13d7a3c369df4913e36d7fd7315ad"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "2f890d4dabb5b813922ec9d942da374402891c10", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55464ebc8372cb2b489aaee84c324f5a6f6ba58d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55464ebc8372cb2b489aaee84c324f5a6f6ba58d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=55464ebc8372cb2b489aaee84c324f5a6f6ba58d", "patch": "@@ -753,19 +753,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match (&expected_ty.kind, &checked_ty.kind) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n-                    let is_fallible = match (found.bit_width(), exp.bit_width()) {\n-                        (Some(found), Some(exp)) if found > exp => true,\n-                        (None, Some(8 | 16)) | (Some(8 | 16), None) => false,\n+                    let is_fallible = match (exp.bit_width(), found.bit_width()) {\n+                        (Some(exp), Some(found)) if exp < found => true,\n+                        (None, Some(8 | 16)) => false,\n                         (None, _) | (_, None) => true,\n                         _ => false,\n                     };\n                     suggest_to_change_suffix_or_into(err, is_fallible);\n                     true\n                 }\n                 (&ty::Uint(ref exp), &ty::Uint(ref found)) => {\n-                    let is_fallible = match (found.bit_width(), exp.bit_width()) {\n-                        (Some(found), Some(exp)) if found > exp => true,\n-                        (None, Some(8 | 16)) | (Some(8 | 16), None) => false,\n+                    let is_fallible = match (exp.bit_width(), found.bit_width()) {\n+                        (Some(exp), Some(found)) if exp < found => true,\n+                        (None, Some(8 | 16)) => false,\n                         (None, _) | (_, None) => true,\n                         _ => false,\n                     };"}, {"sha": "c320f2bb7b446a30381097ecee8774bf8a8d7754", "filename": "src/test/ui/integer-literal-suffix-inference.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/55464ebc8372cb2b489aaee84c324f5a6f6ba58d/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55464ebc8372cb2b489aaee84c324f5a6f6ba58d/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs?ref=55464ebc8372cb2b489aaee84c324f5a6f6ba58d", "patch": "@@ -16,6 +16,7 @@ fn main() {\n     fn id_i16(n: i16) -> i16 { n }\n     fn id_i32(n: i32) -> i32 { n }\n     fn id_i64(n: i64) -> i64 { n }\n+    fn id_isize(n: isize) -> isize { n }\n \n     // the smallest values that need these types\n     let b8: u8 = 16;\n@@ -27,6 +28,11 @@ fn main() {\n     fn id_u16(n: u16) -> u16 { n }\n     fn id_u32(n: u32) -> u32 { n }\n     fn id_u64(n: u64) -> u64 { n }\n+    fn id_usize(n: usize) -> usize { n }\n+\n+    // Values for testing *size\n+    let asize: isize = 1;\n+    let bsize: usize = 3;\n \n     id_i8(a8); // ok\n     id_i8(a16);\n@@ -38,6 +44,9 @@ fn main() {\n     id_i8(a64);\n     //~^ ERROR mismatched types\n     //~| expected `i8`, found `i64`\n+    id_i8(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`, found `isize`\n \n     id_i16(a8);\n     //~^ ERROR mismatched types\n@@ -49,6 +58,9 @@ fn main() {\n     id_i16(a64);\n     //~^ ERROR mismatched types\n     //~| expected `i16`, found `i64`\n+    id_i16(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`, found `isize`\n \n     id_i32(a8);\n     //~^ ERROR mismatched types\n@@ -60,6 +72,9 @@ fn main() {\n     id_i32(a64);\n     //~^ ERROR mismatched types\n     //~| expected `i32`, found `i64`\n+    id_i32(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`, found `isize`\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n@@ -71,6 +86,23 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected `i64`, found `i32`\n     id_i64(a64); // ok\n+    id_i64(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`, found `isize`\n+\n+    id_isize(a8);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i8`\n+    id_isize(a16);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i16`\n+    id_isize(a32);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i32`\n+    id_isize(a64);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i64`\n+    id_isize(asize); //ok\n \n     id_i8(c8); // ok\n     id_i8(c16);\n@@ -126,6 +158,9 @@ fn main() {\n     id_u8(b64);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `u64`\n+    id_u8(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u8`, found `usize`\n \n     id_u16(b8);\n     //~^ ERROR mismatched types\n@@ -137,6 +172,9 @@ fn main() {\n     id_u16(b64);\n     //~^ ERROR mismatched types\n     //~| expected `u16`, found `u64`\n+    id_u16(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`, found `usize`\n \n     id_u32(b8);\n     //~^ ERROR mismatched types\n@@ -148,6 +186,9 @@ fn main() {\n     id_u32(b64);\n     //~^ ERROR mismatched types\n     //~| expected `u32`, found `u64`\n+    id_u32(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u32`, found `usize`\n \n     id_u64(b8);\n     //~^ ERROR mismatched types\n@@ -159,4 +200,21 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected `u64`, found `u32`\n     id_u64(b64); // ok\n+    id_u64(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u64`, found `usize`\n+\n+    id_usize(b8);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u8`\n+    id_usize(b16);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u16`\n+    id_usize(b32);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u32`\n+    id_usize(b64);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u64`\n+    id_usize(bsize); //ok\n }"}]}