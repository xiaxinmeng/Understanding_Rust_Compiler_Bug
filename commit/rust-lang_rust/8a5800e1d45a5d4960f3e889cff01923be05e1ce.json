{"sha": "8a5800e1d45a5d4960f3e889cff01923be05e1ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTgwMGUxZDQ1YTVkNDk2MGYzZTg4OWNmZjAxOTIzYmUwNWUxY2U=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-28T02:22:55Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-30T02:34:47Z"}, "message": "take ParamEnv into account when resolving", "tree": {"sha": "0ecd75635ed4898fbdb39b29b46c329d2922b479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecd75635ed4898fbdb39b29b46c329d2922b479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5800e1d45a5d4960f3e889cff01923be05e1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5800e1d45a5d4960f3e889cff01923be05e1ce", "html_url": "https://github.com/rust-lang/rust/commit/8a5800e1d45a5d4960f3e889cff01923be05e1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5800e1d45a5d4960f3e889cff01923be05e1ce/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24fc50fffacef28d580a67b3c881f62d4752a860", "url": "https://api.github.com/repos/rust-lang/rust/commits/24fc50fffacef28d580a67b3c881f62d4752a860", "html_url": "https://github.com/rust-lang/rust/commit/24fc50fffacef28d580a67b3c881f62d4752a860"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "89f55c57048d2be541e3f3f2c82f79dfea7875ba", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a5800e1d45a5d4960f3e889cff01923be05e1ce/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5800e1d45a5d4960f3e889cff01923be05e1ce/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=8a5800e1d45a5d4960f3e889cff01923be05e1ce", "patch": "@@ -118,12 +118,12 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n \n     /// The point where linking happens. Resolve a (def_id, substs)\n     /// pair to an instance.\n-    pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n+    pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>, param_env: ty::ParamEnv<'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n             debug!(\" => associated item, attempting to find impl\");\n             let item = tcx.associated_item(def_id);\n-            resolve_associated_item(tcx, &item, trait_def_id, substs)\n+            resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n         } else {\n             let ty = tcx.type_of(def_id);\n             let item_type = tcx.trans_apply_param_substs(substs, &ty);\n@@ -184,6 +184,7 @@ fn resolve_closure<'a, 'tcx>(\n fn resolve_associated_item<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_item: &ty::AssociatedItem,\n+    param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,\n     rcvr_substs: &'tcx Substs<'tcx>\n     ) -> Option<Instance<'tcx>> {\n@@ -194,7 +195,7 @@ fn resolve_associated_item<'a, 'tcx>(\n            def_id, trait_id, rcvr_substs);\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = tcx.trans_fulfill_obligation(DUMMY_SP, ty::Binder(trait_ref));\n+    let vtbl = tcx.trans_fulfill_obligation(DUMMY_SP, param_env, ty::Binder(trait_ref));\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:"}, {"sha": "1eb8f21f80a91f2d1c0daee56c11f4425a272579", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a5800e1d45a5d4960f3e889cff01923be05e1ce/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5800e1d45a5d4960f3e889cff01923be05e1ce/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=8a5800e1d45a5d4960f3e889cff01923be05e1ce", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         let mut callsites = VecDeque::new();\n \n         // Only do inlining into fn bodies.\n-        if let MirSource::Fn(_) = self.source {\n+        if let MirSource::Fn(caller_id) = self.source {\n             for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n                 // Don't inline calls that are in cleanup blocks.\n                 if bb_data.is_cleanup { continue; }\n@@ -88,7 +88,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 if let TerminatorKind::Call {\n                     func: Operand::Constant(ref f), .. } = terminator.kind {\n                         if let ty::TyFnDef(callee_def_id, substs) = f.ty.sty {\n-                            if let Some(instance) = Instance::resolve(self.tcx, callee_def_id, substs) {\n+                            let caller_def_id = self.tcx.hir.local_def_id(caller_id);\n+                            let param_env = self.tcx.param_env(caller_def_id);\n+\n+                            if let Some(instance) = Instance::resolve(self.tcx, param_env, callee_def_id, substs) {\n                                 callsites.push_back(CallSite {\n                                     callee: instance.def_id(),\n                                     substs: instance.substs,"}]}