{"sha": "87a0a25b38cb791b5145dcba53ac83f8dc76f197", "node_id": "C_kwDOAAsO6NoAKDg3YTBhMjViMzhjYjc5MWI1MTQ1ZGNiYTUzYWM4M2Y4ZGM3NmYxOTc", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-22T23:36:49Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-25T23:05:52Z"}, "message": "A for loop is a lot faster apparently", "tree": {"sha": "5a5a2792e46c1fa2bb62d2ab6e01758dbae77020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5a2792e46c1fa2bb62d2ab6e01758dbae77020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a0a25b38cb791b5145dcba53ac83f8dc76f197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a0a25b38cb791b5145dcba53ac83f8dc76f197", "html_url": "https://github.com/rust-lang/rust/commit/87a0a25b38cb791b5145dcba53ac83f8dc76f197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a0a25b38cb791b5145dcba53ac83f8dc76f197/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff90c6353b1e78aee13acedbfd545b02bc9e830f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff90c6353b1e78aee13acedbfd545b02bc9e830f", "html_url": "https://github.com/rust-lang/rust/commit/ff90c6353b1e78aee13acedbfd545b02bc9e830f"}], "stats": {"total": 38, "additions": 9, "deletions": 29}, "files": [{"sha": "80e9bcbde773ad2b2b1a506d936e6833175ce324", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/87a0a25b38cb791b5145dcba53ac83f8dc76f197/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a0a25b38cb791b5145dcba53ac83f8dc76f197/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=87a0a25b38cb791b5145dcba53ac83f8dc76f197", "patch": "@@ -301,7 +301,7 @@ use rustc_span::Span;\n \n use smallvec::{smallvec, SmallVec};\n use std::fmt;\n-use std::iter::{FromIterator, IntoIterator};\n+use std::iter::IntoIterator;\n use std::lazy::OnceCell;\n \n crate struct MatchCheckCtxt<'a, 'tcx> {\n@@ -489,15 +489,6 @@ impl<'p, 'tcx> PartialEq for PatStack<'p, 'tcx> {\n     }\n }\n \n-impl<'p, 'tcx> FromIterator<&'p Pat<'tcx>> for PatStack<'p, 'tcx> {\n-    fn from_iter<T>(iter: T) -> Self\n-    where\n-        T: IntoIterator<Item = &'p Pat<'tcx>>,\n-    {\n-        Self::from_vec(iter.into_iter().collect())\n-    }\n-}\n-\n /// Pretty-printing for matrix row.\n impl<'p, 'tcx> fmt::Debug for PatStack<'p, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -565,11 +556,14 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         ctor: &Constructor<'tcx>,\n         ctor_wild_subpatterns: &Fields<'p, 'tcx>,\n     ) -> Matrix<'p, 'tcx> {\n-        self.patterns\n-            .iter()\n-            .filter(|r| ctor.is_covered_by(pcx, r.head_ctor(pcx.cx)))\n-            .map(|r| r.pop_head_constructor(ctor_wild_subpatterns))\n-            .collect()\n+        let mut matrix = Matrix::empty();\n+        for row in &self.patterns {\n+            if ctor.is_covered_by(pcx, row.head_ctor(pcx.cx)) {\n+                let new_row = row.pop_head_constructor(ctor_wild_subpatterns);\n+                matrix.push(new_row);\n+            }\n+        }\n+        matrix\n     }\n }\n \n@@ -609,20 +603,6 @@ impl<'p, 'tcx> fmt::Debug for Matrix<'p, 'tcx> {\n     }\n }\n \n-impl<'p, 'tcx> FromIterator<PatStack<'p, 'tcx>> for Matrix<'p, 'tcx> {\n-    fn from_iter<T>(iter: T) -> Self\n-    where\n-        T: IntoIterator<Item = PatStack<'p, 'tcx>>,\n-    {\n-        let mut matrix = Matrix::empty();\n-        for x in iter {\n-            // Using `push` ensures we correctly expand or-patterns.\n-            matrix.push(x);\n-        }\n-        matrix\n-    }\n-}\n-\n /// Given a pattern or a pattern-stack, this struct captures a set of its subpatterns. We use that\n /// to track reachable sub-patterns arising from or-patterns. In the absence of or-patterns this\n /// will always be either `Empty` (the whole pattern is unreachable) or `Full` (the whole pattern"}]}