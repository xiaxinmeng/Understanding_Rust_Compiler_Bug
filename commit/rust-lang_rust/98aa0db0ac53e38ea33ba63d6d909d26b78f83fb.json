{"sha": "98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YWEwZGIwYWM1M2UzOGVhMzNiYTYzZDZkOTA5ZDI2Yjc4ZjgzZmI=", "commit": {"author": {"name": "f001", "email": "changchun.fan@qq.com", "date": "2017-02-12T09:03:09Z"}, "committer": {"name": "f001", "email": "changchun.fan@qq.com", "date": "2017-02-12T09:03:09Z"}, "message": "Add a lint for `slice.iter().cloned().collect()`\n\nIf one uses `slice.iter().cloned().collect()` to create a new `Vec`,\nit should be `slice.to_owned()`.\n\nFix #1292", "tree": {"sha": "1fcf67d98a4bee1d81d92149b861a0973271246e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcf67d98a4bee1d81d92149b861a0973271246e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "html_url": "https://github.com/rust-lang/rust/commit/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b29f9a36478575bd174f388ad3cfbef4a84d0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b29f9a36478575bd174f388ad3cfbef4a84d0cc", "html_url": "https://github.com/rust-lang/rust/commit/4b29f9a36478575bd174f388ad3cfbef4a84d0cc"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "2885c27e54564ed7632ee59bccecd3defa5a9305", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "patch": "@@ -494,13 +494,33 @@ declare_lint! {\n /// s.push_str(abc);\n /// s.push_str(&def));\n /// ```\n-\n declare_lint! {\n     pub STRING_EXTEND_CHARS,\n     Warn,\n     \"using `x.extend(s.chars())` where s is a `&str` or `String`\"\n }\n \n+/// **What it does:** Checks for the use of `.cloned().collect()` on slice to create a Vec.\n+///\n+/// **Why is this bad?** `.to_owned()` is clearer\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let s = [1,2,3,4,5];\n+/// let s2 : Vec<isize> = s.iter().cloned().collect();\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let s = [1,2,3,4,5];\n+/// let s2 : Vec<isize> = s.to_owned();\n+/// ```\n+declare_lint! {\n+    pub ITER_CLONED_COLLECT,\n+    Warn,\n+    \"using `.cloned().collect()` on slice to create a `Vec`\"\n+}\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -525,7 +545,8 @@ impl LintPass for Pass {\n                     ITER_NTH,\n                     ITER_SKIP_NEXT,\n                     GET_UNWRAP,\n-                    STRING_EXTEND_CHARS)\n+                    STRING_EXTEND_CHARS,\n+                    ITER_CLONED_COLLECT)\n     }\n }\n \n@@ -580,6 +601,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_iter_nth(cx, expr, arglists[0], true);\n                 } else if method_chain_args(expr, &[\"skip\", \"next\"]).is_some() {\n                     lint_iter_skip_next(cx, expr);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"cloned\", \"collect\"]) {\n+                    lint_iter_cloned_collect(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), args);\n@@ -879,6 +902,16 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n     }}\n }\n \n+fn lint_iter_cloned_collect(cx: &LateContext, expr: &hir::Expr, iter_args: &[hir::Expr]) {\n+    if match_type(cx, cx.tables.expr_ty(expr), &paths::VEC) &&\n+        derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {\n+        span_lint(cx,\n+                  ITER_CLONED_COLLECT,\n+                  expr.span,\n+                  \"called `cloned().collect()` on a slice to create a `Vec`. This is more succinctly expressed by calling `to_owned(x)`\");\n+    }\n+}\n+\n fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &[hir::Expr], is_mut: bool) {\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {"}, {"sha": "ac90528c60639bc7f3702f7417fc49424a41e48c", "filename": "src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-#![feature(static_in_const)]\n \n #![allow(unknown_lints, missing_docs_in_private_items)]\n "}, {"sha": "8eb4ff6870f78d2a81a2b659a759dd89cdc300ff", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "patch": "@@ -689,3 +689,8 @@ fn temporary_cstring() {\n \n \n }\n+\n+fn iter_clone_collect() {\n+    let v = [1,2,3,4,5];\n+    let v2 : Vec<isize> = v.iter().cloned().collect();\n+}"}, {"sha": "a62784e3302b638700aed0d8c08fcbd7ff5f0f17", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98aa0db0ac53e38ea33ba63d6d909d26b78f83fb/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=98aa0db0ac53e38ea33ba63d6d909d26b78f83fb", "patch": "@@ -950,5 +950,13 @@ help: assign the `CString` to a variable to extend its lifetime\n 687 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+warning: called `cloned().collect()` on a slice to create a `Vec`. This is more succinctly expressed by calling `to_owned(x)`\n+   --> $DIR/methods.rs:695:27\n+    |\n+695 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[warn(iter_cloned_collect)] on by default\n+\n error: aborting due to 88 previous errors\n "}]}