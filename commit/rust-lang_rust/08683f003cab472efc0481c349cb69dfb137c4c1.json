{"sha": "08683f003cab472efc0481c349cb69dfb137c4c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjgzZjAwM2NhYjQ3MmVmYzA0ODFjMzQ5Y2I2OWRmYjEzN2M0YzE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-28T06:20:32Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-28T23:57:19Z"}, "message": "Rename `IdxSet::clone_from`.\n\nThe current situation is something of a mess.\n\n- `IdxSetBuf` derefs to `IdxSet`.\n- `IdxSetBuf` implements `Clone`, and therefore has a provided `clone_from`\n  method, which does allocation and so is expensive.\n- `IdxSet` has a `clone_from` method that is non-allocating and therefore\n  cheap, but this method is not from the `Clone` trait.\n\nAs a result, if you have an `IdxSetBuf` called `b`, if you call\n`b.clone_from(b2)` you'll get the expensive `IdxSetBuf` method, but if you call\n`(*b).clone_from(b2)` you'll get the cheap `IdxSetBuf` method.\n`liveness_of_locals()` does the former, presumably unintentionally, and\ntherefore does lots of unnecessary allocations.\n\nHaving a `clone_from` method that isn't from the `Clone` trait is a bad idea in\ngeneral, so this patch renames it as `overwrite`. This avoids the unnecessary\nallocations in `liveness_of_locals()`, speeding up most NLL benchmarks, the\nbest by 1.5%. It also means that calls of the form `(*b).clone_from(b2)` can be\nrewritten as `b.overwrite(b2)`.", "tree": {"sha": "097f92369e0b42064adef34924d2485e59a022aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097f92369e0b42064adef34924d2485e59a022aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08683f003cab472efc0481c349cb69dfb137c4c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08683f003cab472efc0481c349cb69dfb137c4c1", "html_url": "https://github.com/rust-lang/rust/commit/08683f003cab472efc0481c349cb69dfb137c4c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08683f003cab472efc0481c349cb69dfb137c4c1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99a9d6806d355b69fa66621df5208342de823aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/99a9d6806d355b69fa66621df5208342de823aea", "html_url": "https://github.com/rust-lang/rust/commit/99a9d6806d355b69fa66621df5208342de823aea"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "30b87c0390a7ed3032914e135266e74de0a36d57", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=08683f003cab472efc0481c349cb69dfb137c4c1", "patch": "@@ -233,7 +233,9 @@ impl<T: Idx> IdxSet<T> {\n         &mut self.bits\n     }\n \n-    pub fn clone_from(&mut self, other: &IdxSet<T>) {\n+    /// Efficiently overwrite `self` with `other`. Panics if `self` and `other`\n+    /// don't have the same length.\n+    pub fn overwrite(&mut self, other: &IdxSet<T>) {\n         self.words_mut().clone_from_slice(other.words());\n     }\n "}, {"sha": "05453bd58c43d9015ccacbf024d47def18252d7e", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=08683f003cab472efc0481c349cb69dfb137c4c1", "patch": "@@ -139,7 +139,7 @@ impl<BD> FlowsAtLocation for FlowAtLocation<BD>\n     where BD: BitDenotation\n {\n     fn reset_to_entry_of(&mut self, bb: BasicBlock) {\n-        (*self.curr_state).clone_from(self.base_results.sets().on_entry_set_for(bb.index()));\n+        self.curr_state.overwrite(self.base_results.sets().on_entry_set_for(bb.index()));\n     }\n \n     fn reconstruct_statement_effect(&mut self, loc: Location) {"}, {"sha": "98cd9c35d8809ec9e66a11c9f7c91023ef27381e", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=08683f003cab472efc0481c349cb69dfb137c4c1", "patch": "@@ -242,7 +242,7 @@ impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: Bi\n             {\n                 let sets = builder.flow_state.sets.for_block(bb_idx);\n                 debug_assert!(in_out.words().len() == sets.on_entry.words().len());\n-                in_out.clone_from(sets.on_entry);\n+                in_out.overwrite(sets.on_entry);\n                 in_out.union(sets.gen_set);\n                 in_out.subtract(sets.kill_set);\n             }"}, {"sha": "34f8141141d26180740b99793f62f1150cb38d91", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08683f003cab472efc0481c349cb69dfb137c4c1/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=08683f003cab472efc0481c349cb69dfb137c4c1", "patch": "@@ -141,14 +141,14 @@ pub fn liveness_of_locals<'tcx>(mir: &Mir<'tcx>, mode: LivenessMode) -> Liveness\n             for &successor in mir.basic_blocks()[b].terminator().successors() {\n                 bits.union(&ins[successor]);\n             }\n-            outs[b].clone_from(&bits);\n+            outs[b].overwrite(&bits);\n \n             // bits = use \u222a (bits - def)\n             def_use[b].apply(&mut bits);\n \n             // update bits on entry and flag if they have changed\n             if ins[b] != bits {\n-                ins[b].clone_from(&bits);\n+                ins[b].overwrite(&bits);\n                 changed = true;\n             }\n         }"}]}