{"sha": "27cc3d203baf219ae06596e9ac44f0c394024bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Y2MzZDIwM2JhZjIxOWFlMDY1OTZlOWFjNDRmMGMzOTQwMjRiYjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T00:24:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` `FileMap::lines`", "tree": {"sha": "2f5827355e0c62a3ebb39fdb8c518ff980e7d856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f5827355e0c62a3ebb39fdb8c518ff980e7d856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27cc3d203baf219ae06596e9ac44f0c394024bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc3d203baf219ae06596e9ac44f0c394024bb5", "html_url": "https://github.com/rust-lang/rust/commit/27cc3d203baf219ae06596e9ac44f0c394024bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27cc3d203baf219ae06596e9ac44f0c394024bb5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada9150abf26912478aa6f613602f8ac7ba135e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada9150abf26912478aa6f613602f8ac7ba135e5", "html_url": "https://github.com/rust-lang/rust/commit/ada9150abf26912478aa6f613602f8ac7ba135e5"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "80dc66405e1132366d35075fe09154b33afb3ad9", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27cc3d203baf219ae06596e9ac44f0c394024bb5/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cc3d203baf219ae06596e9ac44f0c394024bb5/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=27cc3d203baf219ae06596e9ac44f0c394024bb5", "patch": "@@ -21,6 +21,7 @@ source code snippets, etc.\n \n */\n \n+use std::cell::RefCell;\n use std::cmp;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -220,7 +221,7 @@ pub struct FileMap {\n     /// The start position of this source in the CodeMap\n     start_pos: BytePos,\n     /// Locations of lines beginnings in the source code\n-    lines: @mut ~[BytePos],\n+    lines: RefCell<~[BytePos]>,\n     /// Locations of multi-byte characters in the source code\n     multibyte_chars: @mut ~[MultiByteChar],\n }\n@@ -233,14 +234,16 @@ impl FileMap {\n     // about what ends a line between this file and parse.rs\n     pub fn next_line(&self, pos: BytePos) {\n         // the new charpos must be > the last one (or it's the first one).\n-        let lines = &mut *self.lines;\n-        assert!((lines.len() == 0) || (lines[lines.len() - 1] < pos))\n-        lines.push(pos);\n+        let mut lines = self.lines.borrow_mut();;\n+        let line_len = lines.get().len();\n+        assert!(line_len == 0 || (lines.get()[line_len - 1] < pos))\n+        lines.get().push(pos);\n     }\n \n     // get a line from the list of pre-computed line-beginnings\n     pub fn get_line(&self, line: int) -> ~str {\n-        let begin: BytePos = self.lines[line] - self.start_pos;\n+        let mut lines = self.lines.borrow_mut();\n+        let begin: BytePos = lines.get()[line] - self.start_pos;\n         let begin = begin.to_uint();\n         let slice = self.src.slice_from(begin);\n         match slice.find('\\n') {\n@@ -296,7 +299,7 @@ impl CodeMap {\n         let filemap = @FileMap {\n             name: filename, substr: substr, src: src,\n             start_pos: Pos::from_uint(start_pos),\n-            lines: @mut ~[],\n+            lines: RefCell::new(~[]),\n             multibyte_chars: @mut ~[],\n         };\n \n@@ -421,11 +424,11 @@ impl CodeMap {\n         let idx = self.lookup_filemap_idx(pos);\n         let f = self.files[idx];\n         let mut a = 0u;\n-        let lines = &*f.lines;\n-        let mut b = lines.len();\n+        let mut lines = f.lines.borrow_mut();\n+        let mut b = lines.get().len();\n         while b - a > 1u {\n             let m = (a + b) / 2u;\n-            if lines[m] > pos { b = m; } else { a = m; }\n+            if lines.get()[m] > pos { b = m; } else { a = m; }\n         }\n         return FileMapAndLine {fm: f, line: a};\n     }\n@@ -434,7 +437,8 @@ impl CodeMap {\n         let FileMapAndLine {fm: f, line: a} = self.lookup_line(pos);\n         let line = a + 1u; // Line numbers start at 1\n         let chpos = self.bytepos_to_local_charpos(pos);\n-        let linebpos = f.lines[a];\n+        let mut lines = f.lines.borrow_mut();\n+        let linebpos = lines.get()[a];\n         let linechpos = self.bytepos_to_local_charpos(linebpos);\n         debug!(\"codemap: byte pos {:?} is on the line at byte pos {:?}\",\n                pos, linebpos);"}, {"sha": "283e046c68a105c1211b9718b5b89991f665e6b2", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27cc3d203baf219ae06596e9ac44f0c394024bb5/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cc3d203baf219ae06596e9ac44f0c394024bb5/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=27cc3d203baf219ae06596e9ac44f0c394024bb5", "patch": "@@ -19,6 +19,7 @@ use parse;\n use parse::token::{get_ident_interner};\n use print::pprust;\n \n+use std::cell::RefCell;\n use std::io;\n use std::io::File;\n use std::str;\n@@ -113,7 +114,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                 substr: codemap::FssNone,\n                 src: s,\n                 start_pos: codemap::BytePos(0),\n-                lines: @mut ~[],\n+                lines: RefCell::new(~[]),\n                 multibyte_chars: @mut ~[],\n             });\n             base::MRExpr(cx.expr_str(sp, s))"}]}