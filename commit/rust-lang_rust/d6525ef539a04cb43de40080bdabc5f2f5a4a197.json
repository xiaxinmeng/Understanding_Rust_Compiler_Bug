{"sha": "d6525ef539a04cb43de40080bdabc5f2f5a4a197", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NTI1ZWY1MzlhMDRjYjQzZGU0MDA4MGJkYWJjNWYyZjVhNGExOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-12T11:22:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-12T11:22:20Z"}, "message": "Auto merge of #57542 - Centril:rollup, r=Centril\n\nRollup of 26 pull requests\n\nSuccessful merges:\n\n - #56425 (Redo the docs for Vec::set_len)\n - #56906 (Issue #56905)\n - #57042 (Don't call `FieldPlacement::count` when count is too large)\n - #57175 (Stabilize `let` bindings and destructuring in constants and const fn)\n - #57192 (Change std::error::Error trait documentation to talk about `source` instead of `cause`)\n - #57296 (Fixed the link to the ? operator)\n - #57368 (Use CMAKE_{C,CXX}_COMPILER_LAUNCHER for ccache)\n - #57400 (Rustdoc: update Source Serif Pro and replace Heuristica italic)\n - #57417 (rustdoc: use text-based doctest parsing if a macro is wrapping main)\n - #57433 (Add link destination for `read-ownership`)\n - #57434 (Remove `CrateNum::Invalid`.)\n - #57441 (Supporting backtrace for x86_64-fortanix-unknown-sgx.)\n - #57450 (actually take a slice in this example)\n - #57459 (Reference tracking issue for inherent associated types in diagnostic)\n - #57463 (docs: Fix some 'second-edition' links)\n - #57466 (Remove outdated comment)\n - #57493 (use structured suggestion when casting a reference)\n - #57498 (make note of one more normalization that Paths do)\n - #57499 (note that FromStr does not work for borrowed types)\n - #57505 (Remove submodule step from README)\n - #57510 (Add a profiles section to the manifest)\n - #57511 (Fix undefined behavior)\n - #57519 (Correct RELEASES.md for 1.32.0)\n - #57522 (don't unwrap unexpected tokens in `format!`)\n - #57530 (Fixing a typographical error.)\n - #57535 (Stabilise irrefutable if-let and while-let patterns)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8abef858718c138adecb80e45339ba8df8bf9f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abef858718c138adecb80e45339ba8df8bf9f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6525ef539a04cb43de40080bdabc5f2f5a4a197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6525ef539a04cb43de40080bdabc5f2f5a4a197", "html_url": "https://github.com/rust-lang/rust/commit/d6525ef539a04cb43de40080bdabc5f2f5a4a197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6525ef539a04cb43de40080bdabc5f2f5a4a197/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "html_url": "https://github.com/rust-lang/rust/commit/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b"}, {"sha": "3117784c1846e8d45c711703d1693e835cf4679e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3117784c1846e8d45c711703d1693e835cf4679e", "html_url": "https://github.com/rust-lang/rust/commit/3117784c1846e8d45c711703d1693e835cf4679e"}], "stats": {"total": 2484, "additions": 999, "deletions": 1485}, "files": [{"sha": "cb1f06257ed152ad958aff5aaba60b0d58f140bf", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -38,7 +38,6 @@ Read [\"Installation\"] from [The Book].\n 3. Build and install:\n \n     ```sh\n-    $ git submodule update --init --recursive --progress\n     $ ./x.py build && sudo ./x.py install\n     ```\n "}, {"sha": "83c44774da283ce94eb1c0d8d289941bebf3c0a0", "filename": "RELEASES.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -121,6 +121,12 @@ Stabilized APIs\n - [`i64::from_be_bytes`]\n - [`i64::from_le_bytes`]\n - [`i64::from_ne_bytes`]\n+- [`i128::to_be_bytes`]\n+- [`i128::to_le_bytes`]\n+- [`i128::to_ne_bytes`]\n+- [`i128::from_be_bytes`]\n+- [`i128::from_le_bytes`]\n+- [`i128::from_ne_bytes`]\n - [`isize::to_be_bytes`]\n - [`isize::to_le_bytes`]\n - [`isize::to_ne_bytes`]\n@@ -151,6 +157,12 @@ Stabilized APIs\n - [`u64::from_be_bytes`]\n - [`u64::from_le_bytes`]\n - [`u64::from_ne_bytes`]\n+- [`u128::to_be_bytes`]\n+- [`u128::to_le_bytes`]\n+- [`u128::to_ne_bytes`]\n+- [`u128::from_be_bytes`]\n+- [`u128::from_le_bytes`]\n+- [`u128::from_ne_bytes`]\n - [`usize::to_be_bytes`]\n - [`usize::to_le_bytes`]\n - [`usize::to_ne_bytes`]\n@@ -208,6 +220,12 @@ Compatibility Notes\n [`UnsafeCell::get`]: https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.get\n [`slice::as_ptr`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr\n [`char::is_ascii`]: https://doc.rust-lang.org/std/primitive.char.html#method.is_ascii\n+[`i128::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.from_be_bytes\n+[`i128::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.from_le_bytes\n+[`i128::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.from_ne_bytes\n+[`i128::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.to_be_bytes\n+[`i128::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.to_le_bytes\n+[`i128::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.to_ne_bytes\n [`i16::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_be_bytes\n [`i16::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_le_bytes\n [`i16::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_ne_bytes\n@@ -240,6 +258,12 @@ Compatibility Notes\n [`isize::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_ne_bytes\n [`iter::empty`]: https://doc.rust-lang.org/std/iter/fn.empty.html\n [`str::as_ptr`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_ptr\n+[`u128::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.from_be_bytes\n+[`u128::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.from_le_bytes\n+[`u128::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.from_ne_bytes\n+[`u128::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.to_be_bytes\n+[`u128::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.to_le_bytes\n+[`u128::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.to_ne_bytes\n [`u16::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_be_bytes\n [`u16::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_le_bytes\n [`u16::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_ne_bytes"}, {"sha": "23943d34b7ca8fc596737ddfbfae45da9d0987a8", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -288,7 +288,7 @@\n #codegen-units-std = 1\n \n # Whether or not debug assertions are enabled for the compiler and standard\n-# library. Also enables compilation of debug! and trace! logging macros.\n+# library.\n #debug-assertions = false\n \n # Whether or not debuginfo is emitted"}, {"sha": "cb9c86df55080d560f93814e2e777a8acec3770c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -346,15 +346,13 @@ fn configure_cmake(builder: &Builder,\n        if builder.config.llvm_clang_cl.is_some() && target.contains(\"i686\") {\n            cfg.env(\"SCCACHE_EXTRA_ARGS\", \"-m32\");\n        }\n-\n-    // If ccache is configured we inform the build a little differently how\n-    // to invoke ccache while also invoking our compilers.\n-    } else if let Some(ref ccache) = builder.config.ccache {\n-       cfg.define(\"CMAKE_C_COMPILER\", ccache)\n-          .define(\"CMAKE_C_COMPILER_ARG1\", sanitize_cc(cc))\n-          .define(\"CMAKE_CXX_COMPILER\", ccache)\n-          .define(\"CMAKE_CXX_COMPILER_ARG1\", sanitize_cc(cxx));\n     } else {\n+       // If ccache is configured we inform the build a little differently how\n+       // to invoke ccache while also invoking our compilers.\n+       if let Some(ref ccache) = builder.config.ccache {\n+         cfg.define(\"CMAKE_C_COMPILER_LAUNCHER\", ccache)\n+            .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n+       }\n        cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n           .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n     }"}, {"sha": "46b843778e81077967d1864514553eb31d7696c5", "filename": "src/doc/unstable-book/src/language-features/irrefutable-let-patterns.md", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,28 +0,0 @@\n-# `irrefutable_let_patterns`\n-\n-The tracking issue for this feature is: [#44495]\n-\n-[#44495]: https://github.com/rust-lang/rust/issues/44495\n-\n-------------------------\n-\n-This feature changes the way that \"irrefutable patterns\" are handled\n-in the `if let` and `while let` forms. An *irrefutable pattern* is one\n-that cannot fail to match -- for example, the `_` pattern matches any\n-value, and hence it is \"irrefutable\". Without this feature, using an\n-irrefutable pattern in an `if let` gives a hard error (since often\n-this indicates programmer error). But when the feature is enabled, the\n-error becomes a lint (since in some cases irrefutable patterns are\n-expected). This means you can use `#[allow]` to silence the lint:\n-\n-```rust\n-#![feature(irrefutable_let_patterns)]\n-\n-#[allow(irrefutable_let_patterns)]\n-fn main() {\n-    // These two examples used to be errors, but now they\n-    // trigger a lint (that is allowed):\n-    if let _ = 5 {}\n-    while let _ = 5 { break; }\n-}\n-```"}, {"sha": "e1c5ab15bb5ce23975c33ed13096a4c6c9f2eac3", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -738,53 +738,88 @@ impl<T> Vec<T> {\n         self\n     }\n \n-    /// Sets the length of a vector.\n+    /// Forces the length of the vector to `new_len`.\n     ///\n-    /// This will explicitly set the size of the vector, without actually\n-    /// modifying its buffers, so it is up to the caller to ensure that the\n-    /// vector is actually the specified size.\n+    /// This is a low-level operation that maintains none of the normal\n+    /// invariants of the type.  Normally changing the length of a vector\n+    /// is done using one of the safe operations instead, such as\n+    /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n     ///\n-    /// # Examples\n+    /// [`truncate`]: #method.truncate\n+    /// [`resize`]: #method.resize\n+    /// [`extend`]: #method.extend-1\n+    /// [`clear`]: #method.clear\n     ///\n-    /// ```\n-    /// use std::ptr;\n+    /// # Safety\n     ///\n-    /// let mut vec = vec!['r', 'u', 's', 't'];\n+    /// - `new_len` must be less than or equal to [`capacity()`].\n+    /// - The elements at `old_len..new_len` must be initialized.\n     ///\n-    /// unsafe {\n-    ///     ptr::drop_in_place(&mut vec[3]);\n-    ///     vec.set_len(3);\n+    /// [`capacity()`]: #method.capacity\n+    ///\n+    /// # Examples\n+    ///\n+    /// This method can be useful for situations in which the vector\n+    /// is serving as a buffer for other code, particularly over FFI:\n+    ///\n+    /// ```no_run\n+    /// # #![allow(dead_code)]\n+    /// # // This is just a minimal skeleton for the doc example;\n+    /// # // don't use this as a starting point for a real library.\n+    /// # pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n+    /// # const Z_OK: i32 = 0;\n+    /// # extern \"C\" {\n+    /// #     fn deflateGetDictionary(\n+    /// #         strm: *mut std::ffi::c_void,\n+    /// #         dictionary: *mut u8,\n+    /// #         dictLength: *mut usize,\n+    /// #     ) -> i32;\n+    /// # }\n+    /// # impl StreamWrapper {\n+    /// pub fn get_dictionary(&self) -> Option<Vec<u8>> {\n+    ///     // Per the FFI method's docs, \"32768 bytes is always enough\".\n+    ///     let mut dict = Vec::with_capacity(32_768);\n+    ///     let mut dict_length = 0;\n+    ///     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n+    ///     // 1. `dict_length` elements were initialized.\n+    ///     // 2. `dict_length` <= the capacity (32_768)\n+    ///     // which makes `set_len` safe to call.\n+    ///     unsafe {\n+    ///         // Make the FFI call...\n+    ///         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n+    ///         if r == Z_OK {\n+    ///             // ...and update the length to what was initialized.\n+    ///             dict.set_len(dict_length);\n+    ///             Some(dict)\n+    ///         } else {\n+    ///             None\n+    ///         }\n+    ///     }\n     /// }\n-    /// assert_eq!(vec, ['r', 'u', 's']);\n+    /// # }\n     /// ```\n     ///\n-    /// In this example, there is a memory leak since the memory locations\n-    /// owned by the inner vectors were not freed prior to the `set_len` call:\n+    /// While the following example is sound, there is a memory leak since\n+    /// the inner vectors were not freed prior to the `set_len` call:\n     ///\n     /// ```\n     /// let mut vec = vec![vec![1, 0, 0],\n     ///                    vec![0, 1, 0],\n     ///                    vec![0, 0, 1]];\n+    /// // SAFETY:\n+    /// // 1. `old_len..0` is empty so no elements need to be initialized.\n+    /// // 2. `0 <= capacity` always holds whatever `capacity` is.\n     /// unsafe {\n     ///     vec.set_len(0);\n     /// }\n     /// ```\n     ///\n-    /// In this example, the vector gets expanded from zero to four items\n-    /// without any memory allocations occurring, resulting in vector\n-    /// values of unallocated memory:\n-    ///\n-    /// ```\n-    /// let mut vec: Vec<char> = Vec::new();\n-    ///\n-    /// unsafe {\n-    ///     vec.set_len(4);\n-    /// }\n-    /// ```\n+    /// Normally, here, one would use [`clear`] instead to correctly drop\n+    /// the contents and thus not leak memory.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn set_len(&mut self, len: usize) {\n-        self.len = len;\n+    pub unsafe fn set_len(&mut self, new_len: usize) {\n+        self.len = new_len;\n     }\n \n     /// Removes an element from the vector and returns it."}, {"sha": "02eef07afd7ab6890cad3ecdd7bd717b9b11d1fa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -849,6 +849,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// [valid]: ../ptr/index.html#safety\n /// [`Copy`]: ../marker/trait.Copy.html\n /// [`read`]: ./fn.read.html\n+/// [read-ownership]: ./fn.read.html#ownership-of-the-returned-value\n ///\n /// Just like in C, whether an operation is volatile has no bearing whatsoever\n /// on questions involving concurrent access from multiple threads. Volatile"}, {"sha": "bdde187d931cc4654264a42c21a7f2f21c4c89d5", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -20,8 +20,7 @@ pub mod pattern;\n #[allow(missing_docs)]\n pub mod lossy;\n \n-/// A trait to abstract the idea of creating a new instance of a type from a\n-/// string.\n+/// Parse a value from a string\n ///\n /// `FromStr`'s [`from_str`] method is often used implicitly, through\n /// [`str`]'s [`parse`] method. See [`parse`]'s documentation for examples.\n@@ -30,6 +29,11 @@ pub mod lossy;\n /// [`str`]: ../../std/primitive.str.html\n /// [`parse`]: ../../std/primitive.str.html#method.parse\n ///\n+/// `FromStr` does not have a lifetime parameter, and so you can only parse types\n+/// that do not contain a lifetime parameter themselves. In other words, you can\n+/// parse an `i32` with `FromStr`, but not a `&i32`. You can parse a struct that\n+/// contains an `i32`, but not one that contains an `&i32`.\n+///\n /// # Examples\n ///\n /// Basic implementation of `FromStr` on an example `Point` type:"}, {"sha": "0a8c72a0ad8ec9f49059048a58ec565b7230c90f", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -17,8 +17,6 @@ pub enum CrateNum {\n     // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n     // `CrateNum`s.\n     BuiltinMacros,\n-    /// A CrateNum value that indicates that something is wrong.\n-    Invalid,\n     /// A special CrateNum that we use for the tcx.rcache when decoding from\n     /// the incr. comp. cache.\n     ReservedForIncrCompCache,\n@@ -29,7 +27,6 @@ impl ::std::fmt::Debug for CrateNum {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         match self {\n             CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n-            CrateNum::Invalid => write!(fmt, \"invalid crate\"),\n             CrateNum::BuiltinMacros => write!(fmt, \"builtin macros crate\"),\n             CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n         }\n@@ -90,7 +87,6 @@ impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             CrateNum::Index(id) => fmt::Display::fmt(&id.private, f),\n-            CrateNum::Invalid => write!(f, \"invalid crate\"),\n             CrateNum::BuiltinMacros => write!(f, \"builtin macros crate\"),\n             CrateNum::ReservedForIncrCompCache => write!(f, \"crate for decoding incr comp cache\"),\n         }"}, {"sha": "c428ff1bd1b37bc9b1ea4f68534377babdbce1b3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -286,7 +286,7 @@ declare_lint! {\n \n declare_lint! {\n     pub IRREFUTABLE_LET_PATTERNS,\n-    Deny,\n+    Warn,\n     \"detects irrefutable patterns in if-let and while-let statements\"\n }\n "}, {"sha": "8d4b8aae8b1767641a3705010f4fdd0e4a7f668c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -417,6 +417,12 @@ pub struct TypeckTables<'tcx> {\n     /// All the existential types that are restricted to concrete types\n     /// by this function\n     pub concrete_existential_types: FxHashMap<DefId, Ty<'tcx>>,\n+\n+    /// Given the closure ID this map provides the list of UpvarIDs used by it.\n+    /// The upvarID contains the HIR node ID and it also contains the full path\n+    /// leading to the member of the struct or tuple that is used instead of the\n+    /// entire variable.\n+    pub upvar_list: ty::UpvarListMap,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -441,6 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             tainted_by_errors: false,\n             free_region_map: Default::default(),\n             concrete_existential_types: Default::default(),\n+            upvar_list: Default::default(),\n         }\n     }\n \n@@ -741,6 +748,8 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             tainted_by_errors,\n             ref free_region_map,\n             ref concrete_existential_types,\n+            ref upvar_list,\n+\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -783,6 +792,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             tainted_by_errors.hash_stable(hcx, hasher);\n             free_region_map.hash_stable(hcx, hasher);\n             concrete_existential_types.hash_stable(hcx, hasher);\n+            upvar_list.hash_stable(hcx, hasher);\n         })\n     }\n }"}, {"sha": "1162bff852cbba232b33eb90b188b5c45bfd3e17", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1842,7 +1842,11 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 return Ok(None);\n             }\n         }\n-        if let FieldPlacement::Array { .. } = layout.fields {\n+        if let FieldPlacement::Array { count: original_64_bit_count, .. } = layout.fields {\n+            // rust-lang/rust#57038: avoid ICE within FieldPlacement::count when count too big\n+            if original_64_bit_count > usize::max_value() as u64 {\n+                return Err(LayoutError::SizeOverflow(layout.ty));\n+            }\n             if layout.fields.count() > 0 {\n                 return self.find_niche(layout.field(self, 0)?);\n             } else {"}, {"sha": "cfd99948e4370424f991da6d61dc16a159006182", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -808,6 +808,7 @@ pub struct UpvarBorrow<'tcx> {\n     pub region: ty::Region<'tcx>,\n }\n \n+pub type UpvarListMap = FxHashMap<DefId, Vec<UpvarId>>;\n pub type UpvarCaptureMap<'tcx> = FxHashMap<UpvarId, UpvarCapture<'tcx>>;\n \n #[derive(Copy, Clone)]"}, {"sha": "65ae111fbc0fcba1bf6b93c25aa565d671ea53b4", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -4,7 +4,7 @@ use hair::cx::Cx;\n use hair::{LintLevel, BindingMode, PatternKind};\n use rustc::hir;\n use rustc::hir::Node;\n-use rustc::hir::def_id::{DefId, LocalDefId};\n+use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n@@ -640,32 +640,39 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let arguments: Vec<_> = arguments.collect();\n \n     let tcx = hir.tcx();\n-    let span = tcx.hir().span(fn_id);\n+    let tcx_hir = tcx.hir();\n+    let span = tcx_hir.span(fn_id);\n+\n+    let hir_tables = hir.tables();\n+    let fn_def_id = tcx_hir.local_def_id(fn_id);\n \n     // Gather the upvars of a closure, if any.\n-    let upvar_decls: Vec<_> = tcx.with_freevars(fn_id, |freevars| {\n-        freevars.iter().map(|fv| {\n-            let var_id = fv.var_id();\n-            let var_hir_id = tcx.hir().node_to_hir_id(var_id);\n-            let closure_expr_id = tcx.hir().local_def_id(fn_id);\n-            let capture = hir.tables().upvar_capture(ty::UpvarId {\n-                var_path: ty::UpvarPath {hir_id: var_hir_id},\n-                closure_expr_id: LocalDefId::from_def_id(closure_expr_id),\n-            });\n+    // In analyze_closure() in upvar.rs we gathered a list of upvars used by a\n+    // closure and we stored in a map called upvar_list in TypeckTables indexed\n+    // with the closure's DefId. Here, we run through that vec of UpvarIds for\n+    // the given closure and use the necessary information to create UpvarDecl.\n+    let upvar_decls: Vec<_> = hir_tables\n+        .upvar_list\n+        .get(&fn_def_id)\n+        .into_iter()\n+        .flatten()\n+        .map(|upvar_id| {\n+            let var_hir_id = upvar_id.var_path.hir_id;\n+            let var_node_id = tcx_hir.hir_to_node_id(var_hir_id);\n+            let capture = hir_tables.upvar_capture(*upvar_id);\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue => false,\n-                ty::UpvarCapture::ByRef(..) => true\n+                ty::UpvarCapture::ByRef(..) => true,\n             };\n             let mut decl = UpvarDecl {\n                 debug_name: keywords::Invalid.name(),\n                 var_hir_id: ClearCrossCrate::Set(var_hir_id),\n                 by_ref,\n                 mutability: Mutability::Not,\n             };\n-            if let Some(Node::Binding(pat)) = tcx.hir().find(var_id) {\n+            if let Some(Node::Binding(pat)) = tcx_hir.find(var_node_id) {\n                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                     decl.debug_name = ident.name;\n-\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {\n                         if bm == ty::BindByValue(hir::MutMutable) {\n                             decl.mutability = Mutability::Mut;\n@@ -678,8 +685,8 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 }\n             }\n             decl\n-        }).collect()\n-    });\n+        })\n+        .collect();\n \n     let mut builder = Builder::new(hir,\n         span,\n@@ -689,7 +696,6 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         return_ty_span,\n         upvar_decls);\n \n-    let fn_def_id = tcx.hir().local_def_id(fn_id);\n     let call_site_scope = region::Scope {\n         id: body.value.hir_id.local_id,\n         data: region::ScopeData::CallSite\n@@ -732,7 +738,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         // RustCall pseudo-ABI untuples the last argument.\n         spread_arg = Some(Local::new(arguments.len()));\n     }\n-    let closure_expr_id = tcx.hir().local_def_id(fn_id);\n+    let closure_expr_id = tcx_hir.local_def_id(fn_id);\n     info!(\"fn_id {:?} has attrs {:?}\", closure_expr_id,\n           tcx.get_attrs(closure_expr_id));\n "}, {"sha": "a324761f06ab54c36c1fa46519edd7a758b1e866", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -325,11 +325,13 @@ match Some(42) {\n \"##,\n \n E0162: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An if-let pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding instead. For instance:\n \n-```compile_fail,E0162\n+```compile_pass\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n@@ -352,11 +354,13 @@ println!(\"{}\", x);\n \"##,\n \n E0165: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A while-let pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding inside a `loop` instead. For instance:\n \n-```compile_fail,E0165\n+```compile_pass,no_run\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n@@ -2334,7 +2338,7 @@ local variable that already exists, and hence no temporary is created.\n Temporaries are not always dropped at the end of the enclosing\n statement. In simple cases where the `&` expression is immediately\n stored into a variable, the compiler will automatically extend\n-the lifetime of the temporary until the end of the enclosinb\n+the lifetime of the temporary until the end of the enclosing\n block. Therefore, an alternative way to fix the original\n program is to write `let tmp = &foo()` and not `let tmp = foo()`:\n "}, {"sha": "10213beba2a6df74d420ecc50afdc864a32654d5", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -350,7 +350,6 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n {\n     let mut seen = Matrix::empty();\n     let mut catchall = None;\n-    let mut printed_if_let_err = false;\n     for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n         for &(pat, hir_pat) in pats {\n             let v = smallvec![pat];\n@@ -359,27 +358,12 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {\n-                            if cx.tcx.features().irrefutable_let_patterns {\n-                                cx.tcx.lint_node(\n-                                    lint::builtin::IRREFUTABLE_LET_PATTERNS,\n-                                    hir_pat.id, pat.span,\n-                                    \"irrefutable if-let pattern\");\n-                            } else {\n-                                if printed_if_let_err {\n-                                    // we already printed an irrefutable if-let pattern error.\n-                                    // We don't want two, that's just confusing.\n-                                } else {\n-                                    // find the first arm pattern so we can use its span\n-                                    let &(ref first_arm_pats, _) = &arms[0];\n-                                    let first_pat = &first_arm_pats[0];\n-                                    let span = first_pat.0.span;\n-                                    struct_span_err!(cx.tcx.sess, span, E0162,\n-                                                    \"irrefutable if-let pattern\")\n-                                        .span_label(span, \"irrefutable pattern\")\n-                                        .emit();\n-                                    printed_if_let_err = true;\n-                                }\n-                            }\n+                            cx.tcx.lint_node(\n+                                lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                hir_pat.id,\n+                                pat.span,\n+                                \"irrefutable if-let pattern\",\n+                            );\n                         }\n \n                         hir::MatchSource::WhileLetDesugar => {\n@@ -394,21 +378,12 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                 },\n                                 // The arm with the wildcard pattern.\n                                 1 => {\n-                                    if cx.tcx.features().irrefutable_let_patterns {\n-                                        cx.tcx.lint_node(\n-                                            lint::builtin::IRREFUTABLE_LET_PATTERNS,\n-                                            hir_pat.id, pat.span,\n-                                            \"irrefutable while-let pattern\");\n-                                    } else {\n-                                        // find the first arm pattern so we can use its span\n-                                        let &(ref first_arm_pats, _) = &arms[0];\n-                                        let first_pat = &first_arm_pats[0];\n-                                        let span = first_pat.0.span;\n-                                        struct_span_err!(cx.tcx.sess, span, E0165,\n-                                                         \"irrefutable while-let pattern\")\n-                                            .span_label(span, \"irrefutable pattern\")\n-                                            .emit();\n-                                    }\n+                                    cx.tcx.lint_node(\n+                                        lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                        hir_pat.id,\n+                                        pat.span,\n+                                        \"irrefutable while-let pattern\",\n+                                    );\n                                 },\n                                 _ => bug!(),\n                             }"}, {"sha": "193b0fe05f00210d220da177cdfe7a3252a0d1b8", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 42, "deletions": 182, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUs\n use rustc::middle::lang_items;\n use rustc::session::config::nightly_options;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -104,7 +104,6 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'tcx>,\n     local_qualif: IndexVec<Local, Option<Qualif>>,\n     qualif: Qualif,\n-    const_fn_arg_vars: BitSet<Local>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -139,7 +138,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             param_env,\n             local_qualif,\n             qualif: Qualif::empty(),\n-            const_fn_arg_vars: BitSet::new_empty(mir.local_decls.len()),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -168,26 +166,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    /// Error about extra statements in a constant.\n-    fn statement_like(&mut self) {\n-        self.add(Qualif::NOT_CONST);\n-        if self.mode != Mode::Fn {\n-            let mut err = feature_err(\n-                &self.tcx.sess.parse_sess,\n-                \"const_let\",\n-                self.span,\n-                GateIssue::Language,\n-                &format!(\"statements in {}s are unstable\", self.mode),\n-            );\n-            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"Blocks in constants may only contain items (such as constant, function \\\n-                          definition, etc...) and a tail expression.\");\n-                err.help(\"To avoid it, you have to replace the non-item object.\");\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     /// Add the given qualification to self.qualif.\n     fn add(&mut self, qualif: Qualif) {\n         self.qualif = self.qualif | qualif;\n@@ -233,80 +211,46 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        if self.tcx.features().const_let {\n-            let mut dest = dest;\n-            let index = loop {\n-                match dest {\n-                    // with `const_let` active, we treat all locals equal\n-                    Place::Local(index) => break *index,\n-                    // projections are transparent for assignments\n-                    // we qualify the entire destination at once, even if just a field would have\n-                    // stricter qualification\n-                    Place::Projection(proj) => {\n-                        // Catch more errors in the destination. `visit_place` also checks various\n-                        // projection rules like union field access and raw pointer deref\n-                        self.visit_place(\n-                            dest,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                            location\n-                        );\n-                        dest = &proj.base;\n-                    },\n-                    Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n-                    Place::Static(..) => {\n-                        // Catch more errors in the destination. `visit_place` also checks that we\n-                        // do not try to access statics from constants or try to mutate statics\n-                        self.visit_place(\n-                            dest,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                            location\n-                        );\n-                        return;\n-                    }\n+        let mut dest = dest;\n+        let index = loop {\n+            match dest {\n+                // We treat all locals equal in constants\n+                Place::Local(index) => break *index,\n+                // projections are transparent for assignments\n+                // we qualify the entire destination at once, even if just a field would have\n+                // stricter qualification\n+                Place::Projection(proj) => {\n+                    // Catch more errors in the destination. `visit_place` also checks various\n+                    // projection rules like union field access and raw pointer deref\n+                    self.visit_place(\n+                        dest,\n+                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                        location\n+                    );\n+                    dest = &proj.base;\n+                },\n+                Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n+                Place::Static(..) => {\n+                    // Catch more errors in the destination. `visit_place` also checks that we\n+                    // do not try to access statics from constants or try to mutate statics\n+                    self.visit_place(\n+                        dest,\n+                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                        location\n+                    );\n+                    return;\n                 }\n-            };\n-            debug!(\"store to var {:?}\", index);\n-            match &mut self.local_qualif[index] {\n-                // this is overly restrictive, because even full assignments do not clear the qualif\n-                // While we could special case full assignments, this would be inconsistent with\n-                // aggregates where we overwrite all fields via assignments, which would not get\n-                // that feature.\n-                Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n-                // insert new qualification\n-                qualif @ None => *qualif = Some(self.qualif),\n-            }\n-            return;\n-        }\n-\n-        match *dest {\n-            Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n-                                   self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n-                debug!(\"store to {:?} (temp or return pointer)\", index);\n-                store(&mut self.local_qualif[index])\n-            }\n-\n-            Place::Projection(box Projection {\n-                base: Place::Local(index),\n-                elem: ProjectionElem::Deref\n-            }) if self.mir.local_kind(index) == LocalKind::Temp\n-               && self.mir.local_decls[index].ty.is_box()\n-               && self.local_qualif[index].map_or(false, |qualif| {\n-                    qualif.contains(Qualif::NOT_CONST)\n-               }) => {\n-                // Part of `box expr`, we should've errored\n-                // already for the Box allocation Rvalue.\n-            }\n-\n-            // This must be an explicit assignment.\n-            _ => {\n-                // Catch more errors in the destination.\n-                self.visit_place(\n-                    dest,\n-                    PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                    location\n-                );\n-                self.statement_like();\n             }\n+        };\n+        debug!(\"store to var {:?}\", index);\n+        match &mut self.local_qualif[index] {\n+            // this is overly restrictive, because even full assignments do not clear the qualif\n+            // While we could special case full assignments, this would be inconsistent with\n+            // aggregates where we overwrite all fields via assignments, which would not get\n+            // that feature.\n+            Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n+            // insert new qualification\n+            qualif @ None => *qualif = Some(self.qualif),\n         }\n     }\n \n@@ -347,45 +291,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if !self.tcx.features().const_let {\n-                        // Check for unused values. This usually means\n-                        // there are extra statements in the AST.\n-                        for temp in mir.temps_iter() {\n-                            if self.local_qualif[temp].is_none() {\n-                                continue;\n-                            }\n-\n-                            let state = self.temp_promotion_state[temp];\n-                            if let TempState::Defined { location, uses: 0 } = state {\n-                                let data = &mir[location.block];\n-                                let stmt_idx = location.statement_index;\n-\n-                                // Get the span for the initialization.\n-                                let source_info = if stmt_idx < data.statements.len() {\n-                                    data.statements[stmt_idx].source_info\n-                                } else {\n-                                    data.terminator().source_info\n-                                };\n-                                self.span = source_info.span;\n-\n-                                // Treat this as a statement in the AST.\n-                                self.statement_like();\n-                            }\n-                        }\n-\n-                        // Make sure there are no extra unassigned variables.\n-                        self.qualif = Qualif::NOT_CONST;\n-                        for index in mir.vars_iter() {\n-                            if !self.const_fn_arg_vars.contains(index) {\n-                                debug!(\"unassigned variable {:?}\", index);\n-                                self.assign(&Place::Local(index), Location {\n-                                    block: bb,\n-                                    statement_index: usize::MAX,\n-                                });\n-                            }\n-                        }\n-                    }\n-\n                     break;\n                 }\n             };\n@@ -454,12 +359,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.tcx.features().const_let => {\n-                if self.mode != Mode::Fn {\n-                    emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n-                                    self.span, GateIssue::Language,\n-                                    &format!(\"let bindings in {}s are unstable\",self.mode));\n-                }\n+            LocalKind::Var if self.mode == Mode::Fn => {\n                 self.add(Qualif::NOT_CONST);\n             }\n             LocalKind::Var |\n@@ -569,6 +469,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             }\n                         }\n \n+                        ProjectionElem::ConstantIndex {..} |\n+                        ProjectionElem::Subslice {..} |\n                         ProjectionElem::Field(..) |\n                         ProjectionElem::Index(_) => {\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n@@ -598,8 +500,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             this.qualif.restrict(ty, this.tcx, this.param_env);\n                         }\n \n-                        ProjectionElem::ConstantIndex {..} |\n-                        ProjectionElem::Subslice {..} |\n                         ProjectionElem::Downcast(..) => {\n                             this.not_const()\n                         }\n@@ -1168,46 +1068,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         debug!(\"visit_assign: dest={:?} rvalue={:?} location={:?}\", dest, rvalue, location);\n         self.visit_rvalue(rvalue, location);\n \n-        // Check the allowed const fn argument forms.\n-        if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n-            if self.mir.local_kind(index) == LocalKind::Var &&\n-               self.const_fn_arg_vars.insert(index) &&\n-               !self.tcx.features().const_let {\n-                // Direct use of an argument is permitted.\n-                match *rvalue {\n-                    Rvalue::Use(Operand::Copy(Place::Local(local))) |\n-                    Rvalue::Use(Operand::Move(Place::Local(local))) => {\n-                        if self.mir.local_kind(local) == LocalKind::Arg {\n-                            return;\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-                // Avoid a generic error for other uses of arguments.\n-                if self.qualif.contains(Qualif::FN_ARGUMENT) {\n-                    let decl = &self.mir.local_decls[index];\n-                    let mut err = feature_err(\n-                        &self.tcx.sess.parse_sess,\n-                        \"const_let\",\n-                        decl.source_info.span,\n-                        GateIssue::Language,\n-                        \"arguments of constant functions can only be immutable by-value bindings\"\n-                    );\n-                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                        err.note(\"Constant functions are not allowed to mutate anything. Thus, \\\n-                                  binding to an argument with a mutable pattern is not allowed.\");\n-                        err.note(\"Remove any mutable bindings from the argument list to fix this \\\n-                                  error. In case you need to mutate the argument, try lazily \\\n-                                  initializing a global variable instead of using a const fn, or \\\n-                                  refactoring the code to a functional style to avoid mutation if \\\n-                                  possible.\");\n-                    }\n-                    err.emit();\n-                    return;\n-                }\n-            }\n-        }\n-\n         self.assign(dest, location);\n     }\n "}, {"sha": "41a042ebcb643f5118b475fe6dc79d612364dcb4", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -65,12 +65,6 @@ pub fn is_min_const_fn(\n         }\n     }\n \n-    for local in mir.vars_iter() {\n-        return Err((\n-            mir.local_decls[local].source_info.span,\n-            \"local variables in const fn are unstable\".into(),\n-        ));\n-    }\n     for local in &mir.local_decls {\n         check_ty(tcx, local.ty, local.source_info.span)?;\n     }\n@@ -147,7 +141,7 @@ fn check_rvalue(\n             check_operand(tcx, mir, operand, span)\n         }\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n-            check_place(tcx, mir, place, span, PlaceMode::Read)\n+            check_place(tcx, mir, place, span)\n         }\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n@@ -213,11 +207,6 @@ fn check_rvalue(\n     }\n }\n \n-enum PlaceMode {\n-    Assign,\n-    Read,\n-}\n-\n fn check_statement(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &'a Mir<'tcx>,\n@@ -226,11 +215,11 @@ fn check_statement(\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(place, rval) => {\n-            check_place(tcx, mir, place, span, PlaceMode::Assign)?;\n+            check_place(tcx, mir, place, span)?;\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span, PlaceMode::Read),\n+        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),\n@@ -256,7 +245,7 @@ fn check_operand(\n ) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            check_place(tcx, mir, place, span, PlaceMode::Read)\n+            check_place(tcx, mir, place, span)\n         }\n         Operand::Constant(_) => Ok(()),\n     }\n@@ -267,29 +256,17 @@ fn check_place(\n     mir: &'a Mir<'tcx>,\n     place: &Place<'tcx>,\n     span: Span,\n-    mode: PlaceMode,\n ) -> McfResult {\n     match place {\n-        Place::Local(l) => match mode {\n-            PlaceMode::Assign => match mir.local_kind(*l) {\n-                LocalKind::Temp | LocalKind::ReturnPointer => Ok(()),\n-                LocalKind::Arg | LocalKind::Var => {\n-                    Err((span, \"assignments in const fn are unstable\".into()))\n-                }\n-            },\n-            PlaceMode::Read => Ok(()),\n-        },\n+        Place::Local(_) => Ok(()),\n         // promoteds are always fine, they are essentially constants\n         Place::Promoted(_) => Ok(()),\n         Place::Static(_) => Err((span, \"cannot access `static` items in const fn\".into())),\n         Place::Projection(proj) => {\n             match proj.elem {\n+                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. }\n                 | ProjectionElem::Deref | ProjectionElem::Field(..) | ProjectionElem::Index(_) => {\n-                    check_place(tcx, mir, &proj.base, span, mode)\n-                }\n-                // slice patterns are unstable\n-                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {\n-                    return Err((span, \"slice patterns in const fn are unstable\".into()))\n+                    check_place(tcx, mir, &proj.base, span)\n                 }\n                 | ProjectionElem::Downcast(..) => {\n                     Err((span, \"`match` or `if let` in `const fn` is unstable\".into()))\n@@ -311,10 +288,10 @@ fn check_terminator(\n         | TerminatorKind::Resume => Ok(()),\n \n         TerminatorKind::Drop { location, .. } => {\n-            check_place(tcx, mir, location, span, PlaceMode::Read)\n+            check_place(tcx, mir, location, span)\n         }\n         TerminatorKind::DropAndReplace { location, value, .. } => {\n-            check_place(tcx, mir, location, span, PlaceMode::Read)?;\n+            check_place(tcx, mir, location, span)?;\n             check_operand(tcx, mir, value, span)\n         },\n "}, {"sha": "3d0e46d998622e2791e6f8ba093b2843b3bc91de", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -438,8 +438,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n-                self.err_handler().span_err(predicate.span, \"equality constraints are not yet \\\n-                                                             supported in where clauses (#20041)\");\n+                self.err_handler()\n+                    .span_err(predicate.span, \"equality constraints are not yet \\\n+                                               supported in where clauses (see #20041)\");\n             }\n         }\n         visit::walk_generics(self, generics)"}, {"sha": "fbba89164e6db89a52ff18b1b8eb7b8946f7157d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -213,8 +213,14 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                        fcx.ty_to_string(self.expr_ty),\n                                        cast_ty));\n                 if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr.span) {\n-                    err.span_help(self.expr.span,\n-                        &format!(\"did you mean `*{}`?\", snippet));\n+                    err.span_suggestion_with_applicability(\n+                        self.expr.span,\n+                        \"dereference the expression\",\n+                        format!(\"*{}\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.span_help(self.expr.span, \"dereference the expression with `*`\");\n                 }\n                 err.emit();\n             }"}, {"sha": "ffd7c2114e5ab34294c4f03584d02d669ce4cf42", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -122,14 +122,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         self.tcx.with_freevars(closure_node_id, |freevars| {\n+            let mut freevar_list: Vec<ty::UpvarId> = Vec::with_capacity(freevars.len());\n             for freevar in freevars {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath {\n-                        hir_id : self.tcx.hir().node_to_hir_id(freevar.var_id()),\n+                        hir_id: self.tcx.hir().node_to_hir_id(freevar.var_id()),\n                     },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n+                // Adding the upvar Id to the list of Upvars, which will be added\n+                // to the map for the closure at the end of the for loop.\n+                freevar_list.push(upvar_id);\n \n                 let capture_kind = match capture_clause {\n                     hir::CaptureByValue => ty::UpvarCapture::ByValue,\n@@ -149,6 +153,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     .upvar_capture_map\n                     .insert(upvar_id, capture_kind);\n             }\n+            // Add the vector of freevars to the map keyed with the closure id.\n+            // This gives us an easier access to them without having to call\n+            // with_freevars again..\n+            if !freevar_list.is_empty() {\n+                self.tables\n+                    .borrow_mut()\n+                    .upvar_list\n+                    .insert(closure_def_id, freevar_list);\n+            }\n         });\n \n         let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n@@ -166,7 +179,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.param_env,\n             region_scope_tree,\n             &self.tables.borrow(),\n-        ).consume_body(body);\n+        )\n+        .consume_body(body);\n \n         if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n@@ -240,9 +254,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let var_hir_id = tcx.hir().node_to_hir_id(var_node_id);\n                     let freevar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n-                        var_path: ty::UpvarPath {\n-                            hir_id: var_hir_id,\n-                        },\n+                        var_path: ty::UpvarPath { hir_id: var_hir_id },\n                         closure_expr_id: LocalDefId::from_def_id(closure_def_index),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n@@ -262,7 +274,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             },\n                         ),\n                     }\n-                }).collect()\n+                })\n+                .collect()\n         })\n     }\n }"}, {"sha": "c61159eb4948121bb64bcfb2bfd46122a3bf3071", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -21,6 +21,15 @@ use syntax_pos::Span;\n ///////////////////////////////////////////////////////////////////////////\n // Entry point\n \n+// During type inference, partially inferred types are\n+// represented using Type variables (ty::Infer). These don't appear in\n+// the final TypeckTables since all of the types should have been\n+// inferred once typeck_tables_of is done.\n+// When type inference is running however, having to update the typeck\n+// tables every time a new type is inferred would be unreasonably slow,\n+// so instead all of the replacement happens at the end in\n+// resolve_type_vars_in_body, which creates a new TypeTables which\n+// doesn't contain any inference types.\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn resolve_type_vars_in_body(&self, body: &'gcx hir::Body) -> &'gcx ty::TypeckTables<'gcx> {\n         let item_id = self.tcx.hir().body_owner(body.id());\n@@ -35,7 +44,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             wbcx.visit_node_id(arg.pat.span, arg.hir_id);\n         }\n         wbcx.visit_body(body);\n-        wbcx.visit_upvar_borrow_map();\n+        wbcx.visit_upvar_capture_map();\n+        wbcx.visit_upvar_list_map();\n         wbcx.visit_closures();\n         wbcx.visit_liberated_fn_sigs();\n         wbcx.visit_fru_field_types();\n@@ -291,7 +301,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n }\n \n impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n-    fn visit_upvar_borrow_map(&mut self) {\n+    fn visit_upvar_capture_map(&mut self) {\n         for (upvar_id, upvar_capture) in self.fcx.tables.borrow().upvar_capture_map.iter() {\n             let new_upvar_capture = match *upvar_capture {\n                 ty::UpvarCapture::ByValue => ty::UpvarCapture::ByValue,\n@@ -314,6 +324,21 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Runs through the function context's upvar list map and adds the same to\n+    /// the TypeckTables. upvarlist is a hashmap of the list of upvars referred\n+    /// to in a closure..\n+    fn visit_upvar_list_map(&mut self) {\n+        for (closure_def_id, upvar_list) in self.fcx.tables.borrow().upvar_list.iter() {\n+            debug!(\n+                \"UpvarIDs captured by closure {:?} are: {:?}\",\n+                closure_def_id, upvar_list\n+            );\n+            self.tables\n+                .upvar_list\n+                .insert(*closure_def_id, upvar_list.to_vec());\n+        }\n+    }\n+\n     fn visit_closures(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);"}, {"sha": "be5f398e31f0527d66590268a178ef5d0ee86e5e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1108,7 +1108,7 @@ fn report_assoc_ty_on_inherent_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span:\n         tcx.sess,\n         span,\n         E0202,\n-        \"associated types are not allowed in inherent impls\"\n+        \"associated types are not yet supported in inherent impls (see #8995)\"\n     );\n }\n "}, {"sha": "b48951d7593b665ba8e237ee941c346eacb6d57c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -893,14 +893,12 @@ themePicker.onblur = handleThemeButtonsBlur;\n           static_files::fira_sans::MEDIUM)?;\n     write(cx.dst.join(\"FiraSans-LICENSE.txt\"),\n           static_files::fira_sans::LICENSE)?;\n-    write(cx.dst.join(\"Heuristica-Italic.woff\"),\n-          static_files::heuristica::ITALIC)?;\n-    write(cx.dst.join(\"Heuristica-LICENSE.txt\"),\n-          static_files::heuristica::LICENSE)?;\n-    write(cx.dst.join(\"SourceSerifPro-Regular.woff\"),\n+    write(cx.dst.join(\"SourceSerifPro-Regular.ttf.woff\"),\n           static_files::source_serif_pro::REGULAR)?;\n-    write(cx.dst.join(\"SourceSerifPro-Bold.woff\"),\n+    write(cx.dst.join(\"SourceSerifPro-Bold.ttf.woff\"),\n           static_files::source_serif_pro::BOLD)?;\n+    write(cx.dst.join(\"SourceSerifPro-It.ttf.woff\"),\n+          static_files::source_serif_pro::ITALIC)?;\n     write(cx.dst.join(\"SourceSerifPro-LICENSE.txt\"),\n           static_files::source_serif_pro::LICENSE)?;\n     write(cx.dst.join(\"SourceCodePro-Regular.woff\"),"}, {"sha": "af77776cca431b6d88da119f16e64f66f0834f37", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -12,21 +12,6 @@ included, and carry their own copyright notices and license terms:\n     Licensed under the SIL Open Font License, Version 1.1.\n     See FiraSans-LICENSE.txt.\n \n-* Heuristica (Heuristica-Italic.woff):\n-\n-    Copyright 1989, 1991 Adobe Systems Incorporated. All rights reserved.\n-    Utopia is either a registered trademark or trademark of Adobe Systems\n-    Incorporated in the United States and/or other countries. Used under\n-    license.\n-\n-    Copyright 2006 Han The Thanh, Vntopia font family, http://vntex.sf.net\n-\n-    Copyright (c) 2008-2012, Andrey V. Panov (panov@canopus.iacp.dvo.ru),\n-    with Reserved Font Name Heuristica.\n-\n-    Licensed under the SIL Open Font License, Version 1.1.\n-    See Heuristica-LICENSE.txt.\n-\n * rustdoc.css, main.js, and playpen.js:\n \n     Copyright 2015 The Rust Developers.\n@@ -47,7 +32,8 @@ included, and carry their own copyright notices and license terms:\n     Licensed under the SIL Open Font License, Version 1.1.\n     See SourceCodePro-LICENSE.txt.\n \n-* Source Serif Pro (SourceSerifPro-Regular.woff, SourceSerifPro-Bold.woff):\n+* Source Serif Pro (SourceSerifPro-Regular.ttf.woff,\n+    SourceSerifPro-Bold.ttf.woff, SourceSerifPro-It.ttf.woff):\n \n     Copyright 2014 Adobe Systems Incorporated (http://www.adobe.com/), with\n     Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of"}, {"sha": "b0cebf01de49b61c0f1ec5cb47f2687c64e918c2", "filename": "src/librustdoc/html/static/Heuristica-Italic.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FHeuristica-Italic.woff", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FHeuristica-Italic.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FHeuristica-Italic.woff?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b"}, {"sha": "dd85e40e64548e19b4571c86ec4ec1111bad4401", "filename": "src/librustdoc/html/static/Heuristica-LICENSE.txt", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FHeuristica-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FHeuristica-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FHeuristica-LICENSE.txt?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,101 +0,0 @@\n-Copyright 1989, 1991 Adobe Systems Incorporated. All rights reserved.\n-Utopia is either a registered trademark or trademark of Adobe Systems\n-Incorporated in the United States and/or other countries. Used under\n-license.\n-\n-Copyright 2006 Han The Thanh, Vntopia font family, http://vntex.sf.net\n-\n-Copyright (c) 2008-2012, Andrey V. Panov (panov@canopus.iacp.dvo.ru),\n-with Reserved Font Name Heuristica.\n-\n-This Font Software is licensed under the SIL Open Font License, Version 1.1.\n-This license is copied below, and is also available with a FAQ at:\n-http://scripts.sil.org/OFL\n-\n-\n------------------------------------------------------------\n-SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n------------------------------------------------------------\n-\n-PREAMBLE\n-The goals of the Open Font License (OFL) are to stimulate worldwide\n-development of collaborative font projects, to support the font creation\n-efforts of academic and linguistic communities, and to provide a free and\n-open framework in which fonts may be shared and improved in partnership\n-with others.\n-\n-The OFL allows the licensed fonts to be used, studied, modified and\n-redistributed freely as long as they are not sold by themselves. The\n-fonts, including any derivative works, can be bundled, embedded,\n-redistributed and/or sold with any software provided that any reserved\n-names are not used by derivative works. The fonts and derivatives,\n-however, cannot be released under any other type of license. The\n-requirement for fonts to remain under this license does not apply\n-to any document created using the fonts or their derivatives.\n-\n-DEFINITIONS\n-\"Font Software\" refers to the set of files released by the Copyright\n-Holder(s) under this license and clearly marked as such. This may\n-include source files, build scripts and documentation.\n-\n-\"Reserved Font Name\" refers to any names specified as such after the\n-copyright statement(s).\n-\n-\"Original Version\" refers to the collection of Font Software components as\n-distributed by the Copyright Holder(s).\n-\n-\"Modified Version\" refers to any derivative made by adding to, deleting,\n-or substituting -- in part or in whole -- any of the components of the\n-Original Version, by changing formats or by porting the Font Software to a\n-new environment.\n-\n-\"Author\" refers to any designer, engineer, programmer, technical\n-writer or other person who contributed to the Font Software.\n-\n-PERMISSION & CONDITIONS\n-Permission is hereby granted, free of charge, to any person obtaining\n-a copy of the Font Software, to use, study, copy, merge, embed, modify,\n-redistribute, and sell modified and unmodified copies of the Font\n-Software, subject to the following conditions:\n-\n-1) Neither the Font Software nor any of its individual components,\n-in Original or Modified Versions, may be sold by itself.\n-\n-2) Original or Modified Versions of the Font Software may be bundled,\n-redistributed and/or sold with any software, provided that each copy\n-contains the above copyright notice and this license. These can be\n-included either as stand-alone text files, human-readable headers or\n-in the appropriate machine-readable metadata fields within text or\n-binary files as long as those fields can be easily viewed by the user.\n-\n-3) No Modified Version of the Font Software may use the Reserved Font\n-Name(s) unless explicit written permission is granted by the corresponding\n-Copyright Holder. This restriction only applies to the primary font name as\n-presented to the users.\n-\n-4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\n-Software shall not be used to promote, endorse or advertise any\n-Modified Version, except to acknowledge the contribution(s) of the\n-Copyright Holder(s) and the Author(s) or with their explicit written\n-permission.\n-\n-5) The Font Software, modified or unmodified, in part or in whole,\n-must be distributed entirely under this license, and must not be\n-distributed under any other license. The requirement for fonts to\n-remain under this license does not apply to any document created\n-using the Font Software.\n-\n-TERMINATION\n-This license becomes null and void if any of the above conditions are\n-not met.\n-\n-DISCLAIMER\n-THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\n-OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\n-COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n-INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\n-DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n-FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\n-OTHER DEALINGS IN THE FONT SOFTWARE."}, {"sha": "e283dae58de6b38fd88280bc95fbb8ec99bab9a8", "filename": "src/librustdoc/html/static/SourceSerifPro-Bold.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197"}, {"sha": "ac1b1b3a0bb7a673d52495743d8f86fd55188b44", "filename": "src/librustdoc/html/static/SourceSerifPro-Bold.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.woff", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.woff?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b"}, {"sha": "4bd621c9bd0bac971eced0ff78504c196e7b6c14", "filename": "src/librustdoc/html/static/SourceSerifPro-It.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197"}, {"sha": "96b36a0ed2366b57ebaffa15c5546e5ec3bd0f65", "filename": "src/librustdoc/html/static/SourceSerifPro-Regular.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197"}, {"sha": "e8c43b852e10e1556268d6c17b47bd0644d6edec", "filename": "src/librustdoc/html/static/SourceSerifPro-Regular.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.woff?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b"}, {"sha": "14273c6b1db330b85440b7b9527cf778b14d7333", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -12,25 +12,24 @@\n \tsrc: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n }\n \n-/* See SourceSerifPro-LICENSE.txt for the Source Serif Pro license and\n- * Heuristica-LICENSE.txt for the Heuristica license. */\n+/* See SourceSerifPro-LICENSE.txt for the Source Serif Pro license. */\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.woff\") format('woff');\n+\tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: url(\"Heuristica-Italic.woff\") format('woff');\n+\tsrc: local('Source Serif Pro Italic'), url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 700;\n-\tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.woff\") format('woff');\n+\tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n }\n \n /* See SourceCodePro-LICENSE.txt for the Source Code Pro license. */"}, {"sha": "f340590e5fe33b4dc4bd149f14a44e1c6c24a04b", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -73,22 +73,17 @@ pub mod fira_sans {\n     pub static LICENSE: &'static [u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n }\n \n-/// Files related to the Heuristica font.\n-pub mod heuristica {\n-    /// The file `Heuristica-Italic.woff`, the Italic variant of the Heuristica font.\n-    pub static ITALIC: &'static [u8] = include_bytes!(\"static/Heuristica-Italic.woff\");\n-\n-    /// The file `Heuristica-LICENSE.txt`, the license text for the Heuristica font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/Heuristica-LICENSE.txt\");\n-}\n-\n /// Files related to the Source Serif Pro font.\n pub mod source_serif_pro {\n-    /// The file `SourceSerifPro-Regular.woff`, the Regular variant of the Source Serif Pro font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Regular.woff\");\n+    /// The file `SourceSerifPro-Regular.ttf.woff`, the Regular variant of the Source Serif Pro\n+    /// font.\n+    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n+\n+    /// The file `SourceSerifPro-Bold.ttf.woff`, the Bold variant of the Source Serif Pro font.\n+    pub static BOLD: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n \n-    /// The file `SourceSerifPro-Bold.woff`, the Bold variant of the Source Serif Pro font.\n-    pub static BOLD: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Bold.woff\");\n+    /// The file `SourceSerifPro-It.ttf.woff`, the Italic variant of the Source Serif Pro font.\n+    pub static ITALIC: &'static [u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n \n     /// The file `SourceSerifPro-LICENSE.txt`, the license text for the Source Serif Pro font.\n     pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.txt\");"}, {"sha": "1f19fa2e7f598fbd8315fd62a6baba1170400264", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -394,7 +394,7 @@ pub fn make_test(s: &str,\n \n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n-    let (already_has_main, already_has_extern_crate) = crate::syntax::with_globals(|| {\n+    let (already_has_main, already_has_extern_crate, found_macro) = crate::syntax::with_globals(|| {\n         use crate::syntax::{ast, parse::{self, ParseSess}, source_map::FilePathMapping};\n         use crate::syntax_pos::FileName;\n         use errors::emitter::EmitterWriter;\n@@ -412,6 +412,7 @@ pub fn make_test(s: &str,\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n+        let mut found_macro = false;\n \n         let mut parser = match parse::maybe_new_parser_from_source_str(&sess, filename, source) {\n             Ok(p) => p,\n@@ -420,7 +421,7 @@ pub fn make_test(s: &str,\n                     err.cancel();\n                 }\n \n-                return (found_main, found_extern_crate);\n+                return (found_main, found_extern_crate, found_macro);\n             }\n         };\n \n@@ -448,6 +449,12 @@ pub fn make_test(s: &str,\n                         }\n                     }\n \n+                    if !found_macro {\n+                        if let ast::ItemKind::Mac(..) = item.node {\n+                            found_macro = true;\n+                        }\n+                    }\n+\n                     if found_main && found_extern_crate {\n                         break;\n                     }\n@@ -460,9 +467,28 @@ pub fn make_test(s: &str,\n             }\n         }\n \n-        (found_main, found_extern_crate)\n+        (found_main, found_extern_crate, found_macro)\n     });\n \n+    // If a doctest's `fn main` is being masked by a wrapper macro, the parsing loop above won't\n+    // see it. In that case, run the old text-based scan to see if they at least have a main\n+    // function written inside a macro invocation. See\n+    // https://github.com/rust-lang/rust/issues/56898\n+    let already_has_main = if found_macro && !already_has_main {\n+        s.lines()\n+            .map(|line| {\n+                let comment = line.find(\"//\");\n+                if let Some(comment_begins) = comment {\n+                    &line[0..comment_begins]\n+                } else {\n+                    line\n+                }\n+            })\n+            .any(|code| code.contains(\"fn main\"))\n+    } else {\n+        already_has_main\n+    };\n+\n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n     if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n@@ -1143,4 +1169,23 @@ assert_eq!(asdf::foo, 4);\n         let output = make_test(input, Some(\"asdf\"), false, &opts);\n         assert_eq!(output, (expected, 3));\n     }\n+\n+    #[test]\n+    fn make_test_main_in_macro() {\n+        let opts = TestOptions::default();\n+        let input =\n+\"#[macro_use] extern crate my_crate;\n+test_wrapper! {\n+    fn main() {}\n+}\";\n+        let expected =\n+\"#![allow(unused)]\n+#[macro_use] extern crate my_crate;\n+test_wrapper! {\n+    fn main() {}\n+}\".to_string();\n+\n+        let output = make_test(input, Some(\"my_crate\"), false, &opts);\n+        assert_eq!(output, (expected, 1));\n+    }\n }"}, {"sha": "2f9efb3f0fb579cfa4677add42daa9f9ce0e60e0", "filename": "src/libstd/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -30,17 +30,17 @@ use string;\n /// themselves through the [`Display`] and [`Debug`] traits, and may provide\n /// cause chain information:\n ///\n-/// The [`cause`] method is generally used when errors cross \"abstraction\n-/// boundaries\", i.e.,  when a one module must report an error that is \"caused\"\n-/// by an error from a lower-level module. This setup makes it possible for the\n-/// high-level module to provide its own errors that do not commit to any\n-/// particular implementation, but also reveal some of its implementation for\n-/// debugging via [`cause`] chains.\n+/// The [`source`] method is generally used when errors cross \"abstraction\n+/// boundaries\". If one module must report an error that is caused by an error\n+/// from a lower-level module, it can allow access to that error via the\n+/// [`source`] method. This makes it possible for the high-level module to\n+/// provide its own errors while also revealing some of the implementation for\n+/// debugging via [`source`] chains.\n ///\n /// [`Result<T, E>`]: ../result/enum.Result.html\n /// [`Display`]: ../fmt/trait.Display.html\n /// [`Debug`]: ../fmt/trait.Debug.html\n-/// [`cause`]: trait.Error.html#method.cause\n+/// [`source`]: trait.Error.html#method.source\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n     /// **This method is soft-deprecated.**"}, {"sha": "28a6fbd48cf0917851e3ffce1a20be479b50f296", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -252,7 +252,7 @@\n //! [`println!`]: ../macro.println.html\n //! [`Lines`]: struct.Lines.html\n //! [`io::Result`]: type.Result.html\n-//! [`?` operator]: ../../book/first-edition/syntax-index.html\n+//! [`?` operator]: ../../book/appendix-02-operators.html\n //! [`Read::read`]: trait.Read.html#tymethod.read\n //! [`Result`]: ../result/enum.Result.html\n //! [`.unwrap()`]: ../result/enum.Result.html#method.unwrap"}, {"sha": "e22008084494690373829e636fbc04bbbd69acac", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -305,7 +305,7 @@\n #![feature(maybe_uninit)]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n             feature(global_asm, range_contains, slice_index_methods,\n-                    decl_macro, coerce_unsized, sgx_platform))]\n+                    decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]\n \n #![default_lib_allocator]\n "}, {"sha": "5c7bff70a0dcdf4a132447ec0ae59bffad4bad3c", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2203,6 +2203,8 @@ impl Path {\n     ///   `a/b` all have `a` and `b` as components, but `./a/b` starts with\n     ///   an additional [`CurDir`] component.\n     ///\n+    /// * A trailing slash is normalized away, `/a/b` and `/a/b/` are equivalent.\n+    ///\n     /// Note that no other normalization takes place; in particular, `a/c`\n     /// and `a/b/../c` are distinct, to account for the possibility that `b`\n     /// is a symbolic link (so its parent isn't `a`)."}, {"sha": "c2751508ce094dd84e25b808d38b06d1ff0d0549", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -550,7 +550,6 @@ mod prim_array { }\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n-//\n /// A dynamically-sized view into a contiguous sequence, `[T]`.\n ///\n /// *[See also the `std::slice` module](slice/index.html).*\n@@ -572,11 +571,11 @@ mod prim_array { }\n /// points to:\n ///\n /// ```\n-/// let x = &mut [1, 2, 3];\n+/// let mut x = [1, 2, 3];\n+/// let x = &mut x[..]; // Take a full slice of `x`.\n /// x[1] = 7;\n /// assert_eq!(x, &[1, 7, 3]);\n /// ```\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice { }\n "}, {"sha": "808f1ce3ff2c73a4265f9d60319357505de2a425", "filename": "src/libstd/sys/sgx/abi/mem.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -17,8 +17,10 @@ extern {\n // Do not remove inline: will result in relocation failure\n // For the same reason we use inline ASM here instead of an extern static to\n // locate the base\n+/// Returns address at which current enclave is loaded.\n #[inline(always)]\n-fn image_base() -> u64 {\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub fn image_base() -> u64 {\n     let base;\n     unsafe { asm!(\"lea IMAGE_BASE(%rip),$0\":\"=r\"(base)) };\n     base"}, {"sha": "2b8e1da05791dee62231a0c0c1aeeb02ee26cadf", "filename": "src/libstd/sys/sgx/backtrace.rs", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,27 +1,96 @@\n use io;\n-use sys::unsupported;\n+use error::Error;\n+use libc;\n use sys_common::backtrace::Frame;\n+use unwind as uw;\n+use sys::sgx::abi::mem::image_base;\n \n pub struct BacktraceContext;\n \n-pub fn unwind_backtrace(_frames: &mut [Frame])\n-    -> io::Result<(usize, BacktraceContext)>\n-{\n-    unsupported()\n+struct Context<'a> {\n+    idx: usize,\n+    frames: &'a mut [Frame],\n+}\n+\n+#[derive(Debug)]\n+struct UnwindError(uw::_Unwind_Reason_Code);\n+\n+impl Error for UnwindError {\n+    fn description(&self) -> &'static str {\n+        \"unexpected return value while unwinding\"\n+    }\n+}\n+\n+impl ::fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+        write!(f, \"{}: {:?}\", self.description(), self.0)\n+    }\n+}\n+\n+#[inline(never)] // this function call can be skipped it when tracing.\n+pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n+    let mut cx = Context { idx: 0, frames };\n+    let result_unwind =\n+        unsafe { uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context as *mut libc::c_void) };\n+    // See libunwind:src/unwind/Backtrace.c for the return values.\n+    // No, there is no doc.\n+    let res = match result_unwind {\n+        // These return codes seem to be benign and need to be ignored for backtraces\n+        // to show up properly on all tested platforms.\n+        uw::_URC_END_OF_STACK | uw::_URC_FATAL_PHASE1_ERROR | uw::_URC_FAILURE => {\n+            Ok((cx.idx, BacktraceContext))\n+        }\n+        _ => Err(io::Error::new(\n+            io::ErrorKind::Other,\n+            UnwindError(result_unwind),\n+        )),\n+    };\n+    res\n+}\n+\n+extern \"C\" fn trace_fn(\n+    ctx: *mut uw::_Unwind_Context,\n+    arg: *mut libc::c_void,\n+) -> uw::_Unwind_Reason_Code {\n+    let cx = unsafe { &mut *(arg as *mut Context) };\n+    if cx.idx >= cx.frames.len() {\n+        return uw::_URC_NORMAL_STOP;\n+    }\n+\n+    let mut ip_before_insn = 0;\n+    let mut ip = unsafe { uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void };\n+    if !ip.is_null() && ip_before_insn == 0 {\n+        // this is a non-signaling frame, so `ip` refers to the address\n+        // after the calling instruction. account for that.\n+        ip = (ip as usize - 1) as *mut _;\n+    }\n+\n+    let symaddr = unsafe { uw::_Unwind_FindEnclosingFunction(ip) };\n+    cx.frames[cx.idx] = Frame {\n+        symbol_addr: symaddr as *mut u8,\n+        exact_position: ip as *mut u8,\n+        inline_context: 0,\n+    };\n+    cx.idx += 1;\n+\n+    uw::_URC_NO_REASON\n }\n \n-pub fn resolve_symname<F>(_frame: Frame,\n-                          _callback: F,\n+// To reduce TCB size in Sgx enclave, we do not want to implement resolve_symname functionality.\n+// Rather, we print the offset of the address here, which could be later mapped to correct function.\n+pub fn resolve_symname<F>(frame: Frame,\n+                          callback: F,\n                           _: &BacktraceContext) -> io::Result<()>\n     where F: FnOnce(Option<&str>) -> io::Result<()>\n {\n-    unsupported()\n+    callback(Some(&format!(\"0x{:x}\",\n+            (frame.symbol_addr.wrapping_offset_from(image_base() as _)))))\n }\n \n pub fn foreach_symbol_fileline<F>(_: Frame,\n                                   _: F,\n                                   _: &BacktraceContext) -> io::Result<bool>\n     where F: FnMut(&[u8], u32) -> io::Result<()>\n {\n-    unsupported()\n+    Ok(false)\n }"}, {"sha": "3bd87b5d2657403910e3b3d3c2efb344b95b8cb9", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -36,7 +36,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n             : \"={eax}\"(error)\n             : \"{eax}\"(ENCLU_EGETKEY),\n               \"{rbx}\"(request),\n-              \"{rcx}\"(out.get_mut())\n+              \"{rcx}\"(out.as_mut_ptr())\n             : \"flags\"\n         );\n \n@@ -66,7 +66,7 @@ pub fn ereport(\n             : \"{eax}\"(ENCLU_EREPORT),\n               \"{rbx}\"(targetinfo),\n               \"{rcx}\"(reportdata),\n-              \"{rdx}\"(report.get_mut())\n+              \"{rdx}\"(report.as_mut_ptr())\n         );\n \n         report.into_inner()"}, {"sha": "9d1f91875e5d825ed68f9d4ab86b8324f538815e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -193,9 +193,6 @@ declare_features! (\n     // Allows the definition of `const` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n-    // Allows let bindings and destructuring in `const` functions and constants.\n-    (active, const_let, \"1.22.1\", Some(48821), None),\n-\n     // Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n@@ -411,9 +408,6 @@ declare_features! (\n     // `#[doc(alias = \"...\")]`\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n-    (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n-\n     // inconsistent bounds in where clauses\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n@@ -681,8 +675,14 @@ declare_features! (\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n     // Allows `#[repr(packed(N))]` attribute on structs.\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n+    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n+    (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n     // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n     (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n+    // Allows let bindings, assignments and destructuring in `const` functions and constants.\n+    // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n+    // at the same time as let bindings.\n+    (accepted, const_let, \"1.33.0\", Some(48821), None),\n     // `#[cfg_attr(predicate, multiple, attributes, here)]`\n     (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n     // Top level or-patterns (`p | q`) in `if let` and `while let`."}, {"sha": "3e3bca7080fb6d4b9f77ce95272ffc6a68b5ee8b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -159,7 +159,7 @@ fn parse_args<'a>(\n             };\n             let name: &str = &ident.as_str();\n \n-            p.expect(&token::Eq).unwrap();\n+            p.expect(&token::Eq)?;\n             let e = p.parse_expr()?;\n             if let Some(prev) = names.get(name) {\n                 ecx.struct_span_err(e.span, &format!(\"duplicate argument named `{}`\", name))"}, {"sha": "da6036a04a549e7aa4dbcc1179bd3841a2729283", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, const_let)]\n+#![feature(const_fn)]\n \n const X : usize = 2;\n "}, {"sha": "d9a42a2963998e305e526d6ed4dd431f0777b4d2", "filename": "src/test/run-pass/binding/allow_irrefutable_let_patterns.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-#![feature(irrefutable_let_patterns)]\n-\n-// must-compile-successfully-irrefutable_let_patterns_with_gate\n-#[allow(irrefutable_let_patterns)]\n-fn main() {\n-    if let _ = 5 {}\n-\n-    while let _ = 5 {\n-        break;\n-    }\n-}"}, {"sha": "10a4c31f24ed4eb25c6c41d101842463c10185ee", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(const_let)]\n-\n type Array = [u32; {  let x = 2; 5 }];\n \n-pub fn main() {}\n+pub fn main() {\n+    let _: Array = [0; 5];\n+}"}, {"sha": "a1b9b586ad0384e70e2fffc0c66a141c51972dd9", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,10 +1,11 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(const_let)]\n-\n+#[repr(u8)]\n enum Foo {\n     Bar = { let x = 1; 3 }\n }\n \n-pub fn main() {}\n+pub fn main() {\n+    assert_eq!(3, Foo::Bar as u8);\n+}"}, {"sha": "04865830df2ebec06bb9e8550be08dd39c9579e6", "filename": "src/test/run-pass/ctfe/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(const_fn, const_let)]\n+#![feature(const_fn)]\n \n const fn x() {\n     let t = true;"}, {"sha": "95d50171a847bca7d0db0f0a2705106d669ffc58", "filename": "src/test/run-pass/ctfe/locals-in-const-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,8 +2,6 @@\n \n // https://github.com/rust-lang/rust/issues/48821\n \n-#![feature(const_fn, const_let)]\n-\n const fn foo(i: usize) -> usize {\n     let x = i;\n     x"}, {"sha": "05329a2714257bed0eaa05d6c11f7c38a09ab84d", "filename": "src/test/ui/assoc-inherent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,9 +1,9 @@\n-// Test associated types are forbidden in inherent impls.\n+// Test associated types are, until #8995 is implemented, forbidden in inherent impls.\n \n struct Foo;\n \n impl Foo {\n-    type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n+    type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n }\n \n fn main() {}"}, {"sha": "f438ac8df4a090a0d639684ca3089c603895c415", "filename": "src/test/ui/assoc-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,7 +1,7 @@\n-error[E0202]: associated types are not allowed in inherent impls\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n   --> $DIR/assoc-inherent.rs:6:5\n    |\n-LL |     type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n+LL |     type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n    |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "f1a2312490813a6672d005a94bafb9298dcda6ed", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -13,44 +13,80 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:79:37\n+   |\n+LL | static STATIC11: Box<MyOwned> = box MyOwned;\n+   |                                     ^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:89:32\n+  --> $DIR/check-static-values-constraints.rs:90:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:94:5\n+  --> $DIR/check-static-values-constraints.rs:95:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:95:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:95:5\n+  --> $DIR/check-static-values-constraints.rs:97:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:97:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:99:6\n+  --> $DIR/check-static-values-constraints.rs:102:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:102:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:100:6\n+  --> $DIR/check-static-values-constraints.rs:104:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:104:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:106:5\n+  --> $DIR/check-static-values-constraints.rs:111:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:111:9\n+   |\n+LL |     box 3;\n+   |         ^\n+\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:110:45\n+  --> $DIR/check-static-values-constraints.rs:116:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n@@ -59,12 +95,18 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:38\n+  --> $DIR/check-static-values-constraints.rs:116:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:116:42\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                          ^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0010, E0015, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "acfb3b5e44bab041a8ded3504faab37c026ccb85", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -78,6 +78,7 @@ struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR static contains unimplemented expression type\n \n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n \n@@ -92,22 +93,28 @@ static mut STATIC14: SafeStruct = SafeStruct {\n \n static STATIC15: &'static [Box<MyOwned>] = &[\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n ];\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n \n static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n \n pub fn main() {\n     let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR allocations are not allowed in statics\n-    //~^^ ERROR cannot move out of static item\n+    //~| ERROR cannot move out of static item\n+    //~| ERROR contains unimplemented expression\n }"}, {"sha": "5b1f265c34aef5c94ff8f1d53394555c4db83e44", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -13,55 +13,97 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:79:37\n+   |\n+LL | static STATIC11: Box<MyOwned> = box MyOwned;\n+   |                                     ^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:89:32\n+  --> $DIR/check-static-values-constraints.rs:90:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:94:5\n+  --> $DIR/check-static-values-constraints.rs:95:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:95:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:95:5\n+  --> $DIR/check-static-values-constraints.rs:97:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:97:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:99:6\n+  --> $DIR/check-static-values-constraints.rs:102:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:102:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:100:6\n+  --> $DIR/check-static-values-constraints.rs:104:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:104:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:106:5\n+  --> $DIR/check-static-values-constraints.rs:111:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:111:9\n+   |\n+LL |     box 3;\n+   |         ^\n+\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:110:45\n+  --> $DIR/check-static-values-constraints.rs:116:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^ cannot move out of static item\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:38\n+  --> $DIR/check-static-values-constraints.rs:116:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:116:42\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                          ^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0010, E0015, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "58a6cf6dcfdebe245e7c0f97cbe402fe6f2e65fe", "filename": "src/test/ui/consts/const-block-non-item-statement-2.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,18 +0,0 @@\n-const A: usize = { 1; 2 };\n-//~^ ERROR statements in constants are unstable\n-\n-const B: usize = { { } 2 };\n-//~^ ERROR statements in constants are unstable\n-\n-macro_rules! foo {\n-    () => (()) //~ ERROR statements in constants are unstable\n-}\n-const C: usize = { foo!(); 2 };\n-\n-const D: usize = { let x = 4; 2 };\n-//~^ ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-//~| ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-\n-pub fn main() {}"}, {"sha": "e0c61a953f50b72c9df5b11f5f28fc1b29b86bd2", "filename": "src/test/ui/consts/const-block-non-item-statement-2.stderr", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,62 +0,0 @@\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:1:20\n-   |\n-LL | const A: usize = { 1; 2 };\n-   |                    ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:4:20\n-   |\n-LL | const B: usize = { { } 2 };\n-   |                    ^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:8:12\n-   |\n-LL |     () => (()) //~ ERROR statements in constants are unstable\n-   |            ^^\n-LL | }\n-LL | const C: usize = { foo!(); 2 };\n-   |                    ------- in this macro invocation\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:28\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   |                            ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:28\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   |                            ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:1\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:1\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "867840925b2d59c75b678ca19954142602fbdaaa", "filename": "src/test/ui/consts/const-block-non-item-statement-3.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,7 +0,0 @@\n-type Array = [u32; {  let x = 2; 5 }];\n-//~^ ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-//~| ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-\n-pub fn main() {}"}, {"sha": "0a549bc0c8ded103ca505189c4d498c11939fdbd", "filename": "src/test/ui/consts/const-block-non-item-statement-3.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:31\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                               ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:31\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                               ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:20\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:20\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5ecf9a049842d4a1631dff192f522b0b7e60277c", "filename": "src/test/ui/consts/const-block-non-item-statement.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,9 +1,23 @@\n+// compile-pass\n+\n enum Foo {\n     Bar = { let x = 1; 3 }\n-    //~^ ERROR let bindings in constants are unstable\n-    //~| ERROR statements in constants are unstable\n-    //~| ERROR let bindings in constants are unstable\n-    //~| ERROR statements in constants are unstable\n }\n \n+\n+const A: usize = { 1; 2 };\n+\n+const B: usize = { { } 2 };\n+\n+macro_rules! foo {\n+    () => (())\n+}\n+\n+const C: usize = { foo!(); 2 };\n+\n+const D: usize = { let x = 4; 2 };\n+\n+type Array = [u32; {  let x = 2; 5 }];\n+type Array2 = [u32; { let mut x = 2; x = 3; x}];\n+\n pub fn main() {}"}, {"sha": "f0d751e07561c44981315ca99a07625e0dc53613", "filename": "src/test/ui/consts/const-block-non-item-statement.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:21\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |                     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:21\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |                     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:11\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:11\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4d3c714481a290984b67a31d8d688af363c08d07", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,7 +2,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "be1be6c060071cb8b240bbc6ac2fffd3e2a55a37", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/assign-to-static-within-other-static-2.rs:17:5\n+  --> $DIR/assign-to-static-within-other-static-2.rs:16:5\n    |\n LL |     *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "b4c416b1c55f040e3c921e5540e7c6ccf66abd41", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,7 +2,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "31e49dc10ca60e845264f5dc23eca45bfd2bbbea", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/assign-to-static-within-other-static.rs:11:5\n+  --> $DIR/assign-to-static-within-other-static.rs:10:5\n    |\n LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n    |     ^^^^^^^"}, {"sha": "63321b9120076aedd3ef431a56f31da3135f2027", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {}\n \n struct FakeNeedsDrop;"}, {"sha": "00de97e6fb3a027a3a119dc0ace1d746171a82d3", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:15:55\n+  --> $DIR/const_let.rs:13:55\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                                       ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:19:35\n+  --> $DIR/const_let.rs:17:35\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n    |                                   ^"}, {"sha": "a2a45af7cb086e1361c92fd1687f2835464e205e", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {\n     // Tests the Collatz conjecture with an incorrect base case (0 instead of 1).\n     // The value of `n` will loop indefinitely (4 - 2 - 1 - 4)."}, {"sha": "422c2bab6ea906567f4f805199568d45ce28ec9a", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/infinite_loop.rs:9:9\n+  --> $DIR/infinite_loop.rs:7:9\n    |\n LL | /         while n != 0 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/infinite_loop.rs:6:18\n+  --> $DIR/infinite_loop.rs:4:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:10:20\n+  --> $DIR/infinite_loop.rs:8:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "aafdd5fe61782fe8ed935182d35d72860e222988", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {\n     let _ = [(); {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time"}, {"sha": "4f1b2ab4c8f4625b3ae3808f2c4d8eec7ed5ba7e", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52475.rs:8:9\n+  --> $DIR/issue-52475.rs:6:9\n    |\n LL | /         while n < 5 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/issue-52475.rs:4:18\n+  --> $DIR/issue-52475.rs:2:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:9:17\n+  --> $DIR/issue-52475.rs:7:17\n    |\n LL |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "32f0062168b3d6648a5133e25588b5b8639260f1", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,7 +2,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "9fad6868d2038e60cea295c8d52fb5a95df1f0d8", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mod-static-with-const-fn.rs:19:5\n+  --> $DIR/mod-static-with-const-fn.rs:18:5\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:22:5\n+  --> $DIR/mod-static-with-const-fn.rs:21:5\n    |\n LL |     foo();\n    |     ^^^^^"}, {"sha": "9b7bca6b72d61eeb6a9273312a649527c0aa3c41", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_transmute,const_let)]\n+#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "dcf89f90e31da3e70aa1625c6921cc41424b5256", "filename": "src/test/ui/consts/const-fn-destructuring-arg.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,17 +1,7 @@\n-// test that certain things are disallowed in constant functions\n+// compile-pass\n \n-#![feature(const_fn)]\n-\n-// no destructuring\n-const fn i((\n-            a,\n-            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n-            b\n-            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n-           ): (u32, u32)) -> u32 {\n+const fn i((a, b): (u32, u32)) -> u32 {\n     a + b\n-    //~^ ERROR let bindings in constant functions are unstable\n-    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "db63e8308045a11f3c0af8aeb281dd57a3ec375f", "filename": "src/test/ui/consts/const-fn-destructuring-arg.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:7:13\n-   |\n-LL |             a,\n-   |             ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:9:13\n-   |\n-LL |             b\n-   |             ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:12:5\n-   |\n-LL |     a + b\n-   |     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:12:9\n-   |\n-LL |     a + b\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "085ff5c58e60c6c68f693ad5eec77ce2fdd75fae", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -27,13 +27,9 @@ const fn get_Y_addr() -> &'static u32 {\n }\n \n const fn get() -> u32 {\n-    let x = 22; //~ ERROR let bindings in constant functions are unstable\n-//~^ ERROR statements in constant functions\n-    let y = 44; //~ ERROR let bindings in constant functions are unstable\n-//~^ ERROR statements in constant functions\n+    let x = 22;\n+    let y = 44;\n     x + y\n-//~^ ERROR let bindings in constant functions are unstable\n-//~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "2003b137c272b8b0ef3b084ccfc32c625235a731", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -16,55 +16,7 @@ error[E0013]: constant functions cannot refer to statics, use a constant instead\n LL |     &Y\n    |     ^^\n \n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:30:13\n-   |\n-LL |     let x = 22; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:30:13\n-   |\n-LL |     let x = 22; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:32:13\n-   |\n-LL |     let y = 44; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:32:13\n-   |\n-LL |     let y = 44; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:34:5\n-   |\n-LL |     x + y\n-   |     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:34:9\n-   |\n-LL |     x + y\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0013, E0015, E0658.\n+Some errors occurred: E0013, E0015.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "0b09b8469fd752f206b6dffa945d78dfffeef1fd", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n-\n struct S(i32);\n \n const A: () = {"}, {"sha": "1c44237e49b7a2f20c0e3506df439630c4f4fa86", "filename": "src/test/ui/consts/const_let_assign2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,8 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n-#![feature(const_fn)]\n-\n pub struct AA {\n     pub data: [u8; 10],\n }"}, {"sha": "cbe73923e9c424b961abec029bb092733899827f", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_let)]\n #![feature(const_fn)]\n \n struct S {\n@@ -18,6 +17,15 @@ const FOO: S = {\n     s\n };\n \n+type Array = [u32; {\n+    let mut x = 2;\n+    let y = &mut x;\n+//~^ ERROR references in constants may only refer to immutable values\n+    *y = 42;\n+//~^ ERROR constant contains unimplemented expression type\n+    *y\n+}];\n+\n fn main() {\n     assert_eq!(FOO.state, 3);\n }"}, {"sha": "6649fb997cce471ef79b22c267ebfd51abba6a90", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,16 +1,28 @@\n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const_let_assign3.rs:10:9\n+  --> $DIR/const_let_assign3.rs:9:9\n    |\n LL |         self.state = x;\n    |         ^^^^^^^^^^^^^^\n \n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/const_let_assign3.rs:17:5\n+  --> $DIR/const_let_assign3.rs:16:5\n    |\n LL |     s.foo(3); //~ ERROR references in constants may only refer to immutable values\n    |     ^ constants require immutable values\n \n-error: aborting due to 2 previous errors\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/const_let_assign3.rs:22:13\n+   |\n+LL |     let y = &mut x;\n+   |             ^^^^^^ constants require immutable values\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const_let_assign3.rs:24:5\n+   |\n+LL |     *y = 42;\n+   |     ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0017, E0019.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "a2364c392f26bd945bf232a315f343d498197bdf", "filename": "src/test/ui/consts/const_let_eq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let, const_fn)]\n-\n // run-pass\n \n struct Foo<T>(T);"}, {"sha": "c48f54e567b2cb4f651a601f0badcc7776d291c0", "filename": "src/test/ui/consts/const_let_eq_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,6 +1,6 @@\n // compile-pass\n \n-#![feature(const_let, const_fn)]\n+#![feature(const_fn)]\n \n struct Foo<T>(T);\n struct Bar<T> { x: T }"}, {"sha": "424a16f7ed39b10aa34e222de064709d3e816f22", "filename": "src/test/ui/consts/const_let_irrefutable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_irrefutable.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+\n+fn main() {}\n+\n+const fn tup((a, b): (i32, i32)) -> i32 {\n+    a + b\n+}\n+\n+const fn array([a, b]: [i32; 2]) -> i32 {\n+    a + b\n+}"}, {"sha": "345f682868fbc52f6890a70cd28359f7b63046c6", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -0,0 +1,5 @@\n+fn main() {}\n+\n+const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n+    a + b\n+}"}, {"sha": "c5d2ba02a70c613917b178033ba76eab9ad07545", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -0,0 +1,9 @@\n+error[E0005]: refutable pattern in function argument: `&[]` not covered\n+  --> $DIR/const_let_refutable.rs:3:16\n+   |\n+LL | const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n+   |                ^^^^^^ pattern `&[]` not covered\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "1e7b7ed3193557a52dbacef980517bf52c90e839", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,4 @@\n-#![feature(underscore_const_names, const_let)]\n+#![feature(underscore_const_names)]\n \n const _: bool = false && false;\n const _: bool = true && false;"}, {"sha": "dbc50f1fbd4b4c75efcaf784d0b1165685e9662a", "filename": "src/test/ui/consts/dangling-alloc-id-ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,7 +1,5 @@\n // https://github.com/rust-lang/rust/issues/55223\n \n-#![feature(const_let)]\n-\n union Foo<'a> {\n     y: &'a (),\n     long_live_the_unit: &'static (),"}, {"sha": "2cd8711f03d3168ed8e696c4c8b40b6a49a1f3d8", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling-alloc-id-ice.rs:10:1\n+  --> $DIR/dangling-alloc-id-ice.rs:8:1\n    |\n LL | / const FOO: &() = { //~ ERROR any use of this value will cause an error\n LL | |     let y = ();"}, {"sha": "c2d8e6d421a2876346286962f7b620bc946114ed", "filename": "src/test/ui/consts/dangling_raw_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n     let x = 42;\n     &x"}, {"sha": "091f1f785cb02a2824d36e8917f4267d000bf360", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling_raw_ptr.rs:3:1\n+  --> $DIR/dangling_raw_ptr.rs:1:1\n    |\n LL | / const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n LL | |     let x = 42;"}, {"sha": "91b076097b0183ec730ad482f02e0ab0993e1455", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -112,12 +112,6 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:99:34\n-   |\n-LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n-   |                                  ^\n-\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:44\n    |\n@@ -220,7 +214,7 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors occurred: E0493, E0515.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "05cf3d5f1f1731aa69eb49a91bc2514d24b9c246", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -96,7 +96,7 @@ const fn foo30_2(x: *mut u32) -> usize { x as usize }\n const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n-const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n+const fn foo30_6() -> bool { let x = true; x }\n const fn foo36(a: bool, b: bool) -> bool { a && b }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo37(a: bool, b: bool) -> bool { a || b }"}, {"sha": "2cae714fbf727cbb25dc889b73bbe208d75a2196", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -112,12 +112,6 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:99:34\n-   |\n-LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n-   |                                  ^\n-\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:44\n    |\n@@ -208,6 +202,6 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "89acfea6ed8ff8d60ae13bdc63c8602ef235fdf3", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,15 +1,15 @@\n const fn mutable_ref_in_const() -> u8 {\n-    let mut a = 0; //~ ERROR local variables in const fn\n-    let b = &mut a;\n+    let mut a = 0;\n+    let b = &mut a; //~ ERROR mutable references in const fn\n     *b\n }\n \n struct X;\n \n impl X {\n     const fn inherent_mutable_ref_in_const() -> u8 {\n-        let mut a = 0; //~ ERROR local variables in const fn\n-        let b = &mut a;\n+        let mut a = 0;\n+        let b = &mut a; //~ ERROR mutable references in const fn\n         *b\n     }\n }"}, {"sha": "5ce0f30dc6e1f27bfc7e5578a016a80cc8f26343", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,14 +1,14 @@\n-error: local variables in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:2:9\n+error: mutable references in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:3:9\n    |\n-LL |     let mut a = 0; //~ ERROR local variables in const fn\n-   |         ^^^^^\n+LL |     let b = &mut a; //~ ERROR mutable references in const fn\n+   |         ^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:11:13\n+error: mutable references in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:12:13\n    |\n-LL |         let mut a = 0; //~ ERROR local variables in const fn\n-   |             ^^^^^\n+LL |         let b = &mut a; //~ ERROR mutable references in const fn\n+   |             ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32c68e69f4beda7d4d4ba48908ce00ae90aaf899", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n const FOO: &(Cell<usize>, bool) = {"}, {"sha": "967fb83b78b087d64d18cc5770af96a3c0f04de5", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/partial_qualif.rs:8:5\n+  --> $DIR/partial_qualif.rs:6:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "dedb7db5920891315da02e88b4ef7988207dae46", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n const FOO: &u32 = {"}, {"sha": "410c51c4b54e1bb666d4bc7a87a760756fa99e16", "filename": "src/test/ui/consts/projection_qualif.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,17 +1,17 @@\n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/projection_qualif.rs:8:27\n+  --> $DIR/projection_qualif.rs:6:27\n    |\n LL |         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n    |                           ^^^^^^ constants require immutable values\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/projection_qualif.rs:9:18\n+  --> $DIR/projection_qualif.rs:7:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^\n \n error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n-  --> $DIR/projection_qualif.rs:9:18\n+  --> $DIR/projection_qualif.rs:7:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^"}, {"sha": "e6ee1523a3b285e4ecd0bd4805bb6c1570c3bf64", "filename": "src/test/ui/consts/promote_const_let.nll.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:6:9\n+  --> $DIR/promote_const_let.rs:4:9\n    |\n LL |     let x: &'static u32 = {\n    |            ------------ type annotation requires that `y` is borrowed for `'static`\n@@ -9,6 +9,21 @@ LL |         &y //~ ERROR does not live long enough\n LL |     };\n    |     - `y` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote_const_let.rs:6:28\n+   |\n+LL |       let x: &'static u32 = &{ //~ ERROR does not live long enough\n+   |  ____________------------____^\n+   | |            |\n+   | |            type annotation requires that borrow lasts for `'static`\n+LL | |         let y = 42;\n+LL | |         y\n+LL | |     };\n+   | |_____^ creates a temporary which is freed while still in use\n+LL |   }\n+   |   - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "a8a6d4d99c6ffb959c5156f1cb30c418564415af", "filename": "src/test/ui/consts/promote_const_let.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,8 +1,10 @@\n-#![feature(const_let)]\n-\n fn main() {\n     let x: &'static u32 = {\n         let y = 42;\n         &y //~ ERROR does not live long enough\n     };\n+    let x: &'static u32 = &{ //~ ERROR does not live long enough\n+        let y = 42;\n+        y\n+    };\n }"}, {"sha": "d37bd49186032d141e56aee31f8ad56cfa790d91", "filename": "src/test/ui/consts/promote_const_let.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:6:10\n+  --> $DIR/promote_const_let.rs:4:10\n    |\n LL |         &y //~ ERROR does not live long enough\n    |          ^ borrowed value does not live long enough\n@@ -8,6 +8,20 @@ LL |     };\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to previous error\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote_const_let.rs:6:28\n+   |\n+LL |       let x: &'static u32 = &{ //~ ERROR does not live long enough\n+   |  ____________________________^\n+LL | |         let y = 42;\n+LL | |         y\n+LL | |     };\n+   | |_____^ temporary value does not live long enough\n+LL |   }\n+   |   - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "430eea37de73c60cb76e51b054d1e346e136393a", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n // this is overly conservative. The reset to `None` should clear `a` of all qualifications"}, {"sha": "30479139e314c82c0d51341b79b678dafd8d9960", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:12:5\n+  --> $DIR/qualif_overwrite.rs:10:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "fa79b5c14a73629e80853143aaff2217c7f83d2f", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n // const qualification is not smart enough to know about fields and always assumes that there might"}, {"sha": "8276db99a12c0b264b227387cbb90b70b1a3e03a", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite_2.rs:10:5\n+  --> $DIR/qualif_overwrite_2.rs:8:5\n    |\n LL |     &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^^^"}, {"sha": "ef378fa84518e5cc1e208e87d5e6c192d486042f", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };"}, {"sha": "72186571d697e15f25a57659797eaf712ab7aedf", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,11 +1,11 @@\n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/static_mut_containing_mut_ref2.rs:5:46\n+  --> $DIR/static_mut_containing_mut_ref2.rs:3:46\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static_mut_containing_mut_ref2.rs:5:45\n+  --> $DIR/static_mut_containing_mut_ref2.rs:3:45\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c24c7e27920795a6d8fe14c3f67a5c3a4bd40c90", "filename": "src/test/ui/consts/static_mut_containing_mut_ref3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n static mut FOO: (u8, u8) = (42, 43);\n \n static mut BAR: () = unsafe { FOO.0 = 99; };"}, {"sha": "e88e49b097af26b7d0cbe13936c58de0a7153b5e", "filename": "src/test/ui/consts/static_mut_containing_mut_ref3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/static_mut_containing_mut_ref3.rs:5:31\n+  --> $DIR/static_mut_containing_mut_ref3.rs:3:31\n    |\n LL | static mut BAR: () = unsafe { FOO.0 = 99; };\n    |                               ^^^^^^^^^^ tried to modify a static's initial value from another static's initializer"}, {"sha": "da51035ab555062b2e03c26a658f14690a0d301c", "filename": "src/test/ui/error-codes/E0010-teach.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -4,5 +4,6 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "77e7b5ec0e860cf50e2102db6e5d0b4a30bfee7c", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -6,6 +6,16 @@ LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n-error: aborting due to previous error\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/E0010-teach.rs:6:28\n+   |\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                            ^\n+   |\n+   = note: A function call isn't allowed in the const's initialization expression because the expression's value must be known at compile-time.\n+   = note: Remember: you can't use a function call inside a const's initialization expression! However, you can use it anywhere else.\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "3398e2c28ba6b5cdcf7acb9a81cf5178b78be955", "filename": "src/test/ui/error-codes/E0010.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,5 +2,6 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "1364693109e086bc64d6ccb8510b2e3d28f67ee5", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -4,6 +4,13 @@ error[E0010]: allocations are not allowed in constants\n LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |                        ^^^^^ allocation not allowed in constants\n \n-error: aborting due to previous error\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/E0010.rs:4:28\n+   |\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                            ^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "d3221f8e1769a19034bdc1836625b02a4d34a2e7", "filename": "src/test/ui/error-codes/E0162.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,8 +0,0 @@\n-struct Irrefutable(i32);\n-\n-fn main() {\n-    let irr = Irrefutable(0);\n-    if let Irrefutable(x) = irr { //~ ERROR E0162\n-        println!(\"{}\", x);\n-    }\n-}"}, {"sha": "ca5c56cd59d31a64e682e9f52250d1c4d76c0672", "filename": "src/test/ui/error-codes/E0162.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,9 +0,0 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/E0162.rs:5:12\n-   |\n-LL |     if let Irrefutable(x) = irr { //~ ERROR E0162\n-   |            ^^^^^^^^^^^^^^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "952071c8b9e77c31eb39013391d6bc9022fb6f59", "filename": "src/test/ui/error-codes/E0165.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,9 +0,0 @@\n-struct Irrefutable(i32);\n-\n-fn main() {\n-    let irr = Irrefutable(0);\n-    while let Irrefutable(x) = irr { //~ ERROR E0165\n-                                     //~| irrefutable pattern\n-        // ...\n-    }\n-}"}, {"sha": "e0d192ea15290753e39152da5546d8d8e5a169fc", "filename": "src/test/ui/error-codes/E0165.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,9 +0,0 @@\n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/E0165.rs:5:15\n-   |\n-LL |     while let Irrefutable(x) = irr { //~ ERROR E0165\n-   |               ^^^^^^^^^^^^^^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0165`."}, {"sha": "89ec4896a2b4329b459efcc30c9fe5a41b9f60d9", "filename": "src/test/ui/error-codes/E0606.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-codes%2FE0606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0606.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,13 +2,10 @@ error[E0606]: casting `&u8` as `u8` is invalid\n   --> $DIR/E0606.rs:2:5\n    |\n LL |     &0u8 as u8; //~ ERROR E0606\n-   |     ^^^^^^^^^^ cannot cast `&u8` as `u8`\n-   |\n-help: did you mean `*&0u8`?\n-  --> $DIR/E0606.rs:2:5\n-   |\n-LL |     &0u8 as u8; //~ ERROR E0606\n-   |     ^^^^\n+   |     ----^^^^^^\n+   |     |\n+   |     cannot cast `&u8` as `u8`\n+   |     help: dereference the expression: `*&0u8`\n \n error: aborting due to previous error\n "}, {"sha": "ef7b49399bf3ab58e0250fcce40b1ff3e9a2c039", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -60,13 +60,10 @@ error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18\n    |\n LL |     let y: u32 = x as u32;\n-   |                  ^^^^^^^^ cannot cast `&u8` as `u32`\n-   |\n-help: did you mean `*x`?\n-  --> $DIR/error-festival.rs:37:18\n-   |\n-LL |     let y: u32 = x as u32;\n-   |                  ^\n+   |                  -^^^^^^^\n+   |                  |\n+   |                  cannot cast `&u8` as `u32`\n+   |                  help: dereference the expression: `*x`\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/error-festival.rs:41:5"}, {"sha": "74cefd7c0670d531b7d1d2be864438f3eda553d6", "filename": "src/test/ui/feature-gates/feature-gate-const_let.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,21 +0,0 @@\n-// Test use of const let without feature gate.\n-\n-const FOO: usize = {\n-    //~^ ERROR statements in constants are unstable\n-    //~| ERROR: let bindings in constants are unstable\n-    let x = 42;\n-    //~^ ERROR statements in constants are unstable\n-    //~| ERROR: let bindings in constants are unstable\n-    42\n-};\n-\n-static BAR: usize = {\n-    //~^ ERROR statements in statics are unstable\n-    //~| ERROR: let bindings in statics are unstable\n-    let x = 42;\n-    //~^ ERROR statements in statics are unstable\n-    //~| ERROR: let bindings in statics are unstable\n-    42\n-};\n-\n-fn main() {}"}, {"sha": "56312999a5fd8e5142fb9359758dd5409cb2e761", "filename": "src/test/ui/feature-gates/feature-gate-const_let.stderr", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,91 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:6:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:6:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:3:1\n-   |\n-LL | / const FOO: usize = {\n-LL | |     //~^ ERROR statements in constants are unstable\n-LL | |     //~| ERROR: let bindings in constants are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:3:1\n-   |\n-LL | / const FOO: usize = {\n-LL | |     //~^ ERROR statements in constants are unstable\n-LL | |     //~| ERROR: let bindings in constants are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:15:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:15:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:12:1\n-   |\n-LL | / static BAR: usize = {\n-LL | |     //~^ ERROR statements in statics are unstable\n-LL | |     //~| ERROR: let bindings in statics are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:12:1\n-   |\n-LL | / static BAR: usize = {\n-LL | |     //~^ ERROR statements in statics are unstable\n-LL | |     //~| ERROR: let bindings in statics are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 8 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "6b97c24a47ed24ce983d85a6b729a6de1cf5f34f", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n trait Trt {}\n struct Str {}\n "}, {"sha": "d608f3d37cf2ae7000118abe596f611aa49e8f45", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: naming constants with `_` is unstable (see issue #54912)\n-  --> $DIR/feature-gate-underscore_const_names.rs:8:1\n+  --> $DIR/feature-gate-underscore_const_names.rs:6:1\n    |\n LL | / const _ : () = {\n LL | | //~^ ERROR is unstable"}, {"sha": "cae2f1d2793df985cc715cc75fb69518b845964c", "filename": "src/test/ui/feature-gates/feature-gate-without_gate_irrefutable_pattern.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,8 +0,0 @@\n-// gate-test-irrefutable_let_patterns\n-\n-\n-#[allow(irrefutable_let_patterns)]\n-fn main() {\n-    if let _ = 5 {}\n-    //~^ ERROR irrefutable if-let pattern [E0162]\n-}"}, {"sha": "fa8b74ffecf3ad0855b150b7a1a24ef5443f52b0", "filename": "src/test/ui/feature-gates/feature-gate-without_gate_irrefutable_pattern.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,9 +0,0 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/feature-gate-without_gate_irrefutable_pattern.rs:6:12\n-   |\n-LL |     if let _ = 5 {}\n-   |            ^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "741685fe9b64995a85b95356e9434532110c5f70", "filename": "src/test/ui/if/if-let.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fif%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fif%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n@@ -10,20 +12,20 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1, { //~ ERROR irrefutable if-let\n+    foo!(a, 1, { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1, { //~ ERROR irrefutable if-let\n+    bar!(a, 1, { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    if let a = 1 { //~ ERROR irrefutable if-let\n+    if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n-    if let a = 1 { //~ ERROR irrefutable if-let\n+    if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     } else if true {\n         println!(\"else-if in irrefutable if-let\");\n@@ -33,13 +35,13 @@ pub fn main() {\n \n     if let 1 = 2 {\n         println!(\"refutable pattern\");\n-    } else if let a = 1 { //~ ERROR irrefutable if-let\n+    } else if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n     if true {\n         println!(\"if\");\n-    } else if let a = 1 { //~ ERROR irrefutable if-let\n+    } else if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "b2a104bfacffc7d99713db786f4c391b040d4f19", "filename": "src/test/ui/if/if-let.stderr", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,39 +1,62 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:13:10\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:6:13\n    |\n-LL |     foo!(a, 1, { //~ ERROR irrefutable if-let\n-   |          ^ irrefutable pattern\n-\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:16:10\n+LL |               if let $p = $e $b\n+   |               ^^\n+...\n+LL | /     foo!(a, 1, { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n    |\n-LL |     bar!(a, 1, { //~ ERROR irrefutable if-let\n-   |          ^ irrefutable pattern\n+   = note: #[warn(irrefutable_let_patterns)] on by default\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:22:12\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:6:13\n    |\n-LL |     if let a = 1 { //~ ERROR irrefutable if-let\n-   |            ^ irrefutable pattern\n+LL |               if let $p = $e $b\n+   |               ^^\n+...\n+LL | /     bar!(a, 1, { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:26:12\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:24:5\n    |\n-LL |     if let a = 1 { //~ ERROR irrefutable if-let\n-   |            ^ irrefutable pattern\n+LL | /     if let a = 1 { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:36:19\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:28:5\n    |\n-LL |     } else if let a = 1 { //~ ERROR irrefutable if-let\n-   |                   ^ irrefutable pattern\n+LL | /     if let a = 1 { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     } else if true {\n+LL | |         println!(\"else-if in irrefutable if-let\");\n+LL | |     } else {\n+LL | |         println!(\"else in irrefutable if-let\");\n+LL | |     }\n+   | |_____^\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:42:19\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:38:12\n    |\n-LL |     } else if let a = 1 { //~ ERROR irrefutable if-let\n-   |                   ^ irrefutable pattern\n+LL |       } else if let a = 1 { //~ WARN irrefutable if-let\n+   |  ____________^\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-error: aborting due to 6 previous errors\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:44:12\n+   |\n+LL |       } else if let a = 1 { //~ WARN irrefutable if-let\n+   |  ____________^\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "1920e1637d1494905bf9ebcefa5c8b3a07c2b9b8", "filename": "src/test/ui/issues/issue-18118.nll.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,68 +1,14 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:8:9\n-   |\n-LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:8:9\n+  --> $DIR/issue-18118.rs:4:9\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |         ^^\n    |         |\n    |         borrowed value does not live long enough\n    |         using this value as a constant requires that `p` is borrowed for `'static`\n-LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - `p` dropped here while still borrowed\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0597, E0658.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "f58a3de281f1ae1123e7ec98c7057e050f72c947", "filename": "src/test/ui/issues/issue-18118.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,11 +1,6 @@\n pub fn main() {\n     const z: &'static isize = {\n-        //~^ ERROR let bindings in constants are unstable\n-        //~| ERROR statements in constants are unstable\n         let p = 3;\n-        //~^ ERROR let bindings in constants are unstable\n-        //~| ERROR statements in constants are unstable\n         &p //~ ERROR `p` does not live long enough\n-        //~^ ERROR let bindings in constants are unstable\n     };\n }"}, {"sha": "9b21ece341a9f2fa87b66cb7b8d39220237591ea", "filename": "src/test/ui/issues/issue-18118.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,67 +1,13 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:8:9\n-   |\n-LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:8:10\n+  --> $DIR/issue-18118.rs:4:10\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |          ^ borrowed value does not live long enough\n-LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - borrowed value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0597, E0658.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "c93c84b5fb7732d342cb1b68597cdb0091aa845e", "filename": "src/test/ui/issues/issue-32829-2.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,36 +1,30 @@\n // ignore-tidy-linelength\n \n-#![feature(const_fn)]\n-\n const bad : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n const bad_two : u32 = {\n     {\n         invalid();\n-        //~^ ERROR statements in constants are unstable\n-        //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n const bad_three : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n static bad_four : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n@@ -39,40 +33,35 @@ static bad_five : u32 = {\n     {\n         invalid();\n         //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n-        //~| ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_six : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_seven : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_eight : u32 = {\n     {\n         invalid();\n-        //~^ ERROR statements in statics are unstable\n-        //~| ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n static mut bad_nine : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };"}, {"sha": "8d7423f29ae97acc537b695bd25c0096994067b6", "filename": "src/test/ui/issues/issue-32829-2.stderr", "status": "modified", "additions": 5, "deletions": 78, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,94 +1,21 @@\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:7:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:15:9\n+  --> $DIR/issue-32829-2.rs:12:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:15:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:24:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:32:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:40:9\n+  --> $DIR/issue-32829-2.rs:34:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:40:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:49:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:57:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:65:9\n+  --> $DIR/issue-32829-2.rs:56:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:65:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:74:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0015, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "505c030b967122758a770ba84f1d7081bc9ee04d", "filename": "src/test/ui/issues/issue-37550.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,6 +1,6 @@\n const fn x() {\n-    let t = true; //~ ERROR local variables in const fn\n-    let x = || t;\n+    let t = true;\n+    let x = || t; //~ ERROR function pointers in const fn are unstable\n }\n \n fn main() {}"}, {"sha": "d2b03416cb73cb923de830cf930bcd8dfd6a2362", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,7 +1,7 @@\n-error: local variables in const fn are unstable\n-  --> $DIR/issue-37550.rs:2:9\n+error: function pointers in const fn are unstable\n+  --> $DIR/issue-37550.rs:3:9\n    |\n-LL |     let t = true; //~ ERROR local variables in const fn\n+LL |     let x = || t; //~ ERROR function pointers in const fn are unstable\n    |         ^\n \n error: aborting due to previous error"}, {"sha": "4885e4a2db7d5e5a0fa6b7dd894dd993716c078f", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -10,5 +10,5 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n-    //~^^ ERROR irrefutable while-let pattern\n+    //~^^ WARN irrefutable while-let pattern\n }"}, {"sha": "df11f6b7f5a535c3a06f0ba10bc02f99b373fb7b", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -22,13 +22,14 @@ error[E0572]: return statement outside of function body\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/issue-51714.rs:11:27\n+warning: irrefutable while-let pattern\n+  --> $DIR/issue-51714.rs:11:17\n    |\n LL |     [(); return while let Some(n) = Some(0) {}];\n-   |                           ^^^^^^^ irrefutable pattern\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(irrefutable_let_patterns)] on by default\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0165, E0572.\n-For more information about an error, try `rustc --explain E0165`.\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "52ec9e42be78282a46f370d2bc2dca078ab536b0", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -6,5 +6,6 @@ use std::cell::RefCell;\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR `std::cell::RefCell<isize>` cannot be shared between threads safely [E0277]\n+//~| ERROR static contains unimplemented expression type\n \n fn main() { }"}, {"sha": "52a99ce36b8704ced0caa0280cadd1941dafa2df", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -4,6 +4,12 @@ error[E0010]: allocations are not allowed in statics\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    |                                     ^^^^^^^^^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/issue-7364.rs:6:41\n+   |\n+LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n+   |                                         ^^^^^^^^^^^^^^^\n+\n error[E0277]: `std::cell::RefCell<isize>` cannot be shared between threads safely\n   --> $DIR/issue-7364.rs:6:1\n    |\n@@ -15,7 +21,7 @@ LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    = note: required because it appears within the type `std::boxed::Box<std::cell::RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0010, E0277.\n+Some errors occurred: E0010, E0019, E0277.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "96aee5e6aeed5cc9c9561f90ccd1f61d2661c6f4", "filename": "src/test/ui/macros/format-parse-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     format!(); //~ ERROR requires at least a format string argument\n     format!(struct); //~ ERROR expected expression\n     format!(\"s\", name =); //~ ERROR expected expression\n+    format!(\"s\", foo = foo, bar); //~ ERROR expected `=`\n     format!(\"s\", foo = struct); //~ ERROR expected expression\n     format!(\"s\", struct); //~ ERROR expected expression\n "}, {"sha": "a3d2786bce1119ef10d39e387245096d5c0e2475", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -18,20 +18,26 @@ error: expected expression, found `<eof>`\n LL |     format!(\"s\", name =); //~ ERROR expected expression\n    |                       ^ expected expression\n \n+error: expected `=`, found `<eof>`\n+  --> $DIR/format-parse-errors.rs:5:29\n+   |\n+LL |     format!(\"s\", foo = foo, bar); //~ ERROR expected `=`\n+   |                             ^^^ expected `=`\n+\n error: expected expression, found keyword `struct`\n-  --> $DIR/format-parse-errors.rs:5:24\n+  --> $DIR/format-parse-errors.rs:6:24\n    |\n LL |     format!(\"s\", foo = struct); //~ ERROR expected expression\n    |                        ^^^^^^ expected expression\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/format-parse-errors.rs:6:18\n+  --> $DIR/format-parse-errors.rs:7:18\n    |\n LL |     format!(\"s\", struct); //~ ERROR expected expression\n    |                  ^^^^^^ expected expression\n \n error: format argument must be a string literal\n-  --> $DIR/format-parse-errors.rs:9:13\n+  --> $DIR/format-parse-errors.rs:10:13\n    |\n LL |     format!(123); //~ ERROR format argument must be a string literal\n    |             ^^^\n@@ -40,5 +46,5 @@ help: you might be missing a string literal to format with\n LL |     format!(\"{}\", 123); //~ ERROR format argument must be a string literal\n    |             ^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "fbe5e6d409934fe0fc7a8251f02a3ef8de742e27", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -240,13 +240,10 @@ error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30\n    |\n LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>(); //~ ERROR is invalid\n-   |                              ^^^^^^^^ cannot cast `&{float}` as `f32`\n-   |\n-help: did you mean `*s`?\n-  --> $DIR/cast-rfc0401.rs:71:30\n-   |\n-LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>(); //~ ERROR is invalid\n-   |                              ^\n+   |                              -^^^^^^^\n+   |                              |\n+   |                              cannot cast `&{float}` as `f32`\n+   |                              help: dereference the expression: `*s`\n \n error: aborting due to 34 previous errors\n "}, {"sha": "14040c8ada67d17f54efb881af4e7a1f6e991196", "filename": "src/test/ui/pattern/deny-irrefutable-let-patterns.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -0,0 +1,9 @@\n+#![deny(irrefutable_let_patterns)]\n+\n+fn main() {\n+    if let _ = 5 {} //~ ERROR irrefutable if-let pattern\n+\n+    while let _ = 5 { //~ ERROR irrefutable while-let pattern\n+        break;\n+    }\n+}"}, {"sha": "ad8cc2ef8973b83652ab9beec1f350690728ca5d", "filename": "src/test/ui/pattern/deny-irrefutable-let-patterns.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -0,0 +1,22 @@\n+error: irrefutable if-let pattern\n+  --> $DIR/deny-irrefutable-let-patterns.rs:4:5\n+   |\n+LL |     if let _ = 5 {} //~ ERROR irrefutable if-let pattern\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/deny-irrefutable-let-patterns.rs:1:9\n+   |\n+LL | #![deny(irrefutable_let_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: irrefutable while-let pattern\n+  --> $DIR/deny-irrefutable-let-patterns.rs:6:5\n+   |\n+LL | /     while let _ = 5 { //~ ERROR irrefutable while-let pattern\n+LL | |         break;\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "85599530ea6a4e5c8ab3bd3cb48ea4b2b0f00ca3", "filename": "src/test/ui/pattern/enum-variant-generic-args.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fenum-variant-generic-args.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,5 @@\n-#![feature(irrefutable_let_patterns)]\n+// run-pass\n+\n #![feature(type_alias_enum_variants)]\n \n #![allow(irrefutable_let_patterns)]", "previous_filename": "src/test/run-pass/enum-variant-generic-args.rs"}, {"sha": "d400ef0bbd64ca834336ee85950ad5fa56d67736", "filename": "src/test/ui/pattern/irrefutable-let-patterns.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Firrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fpattern%2Firrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Firrefutable-let-patterns.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+fn main() {\n+    if let _ = 5 {}\n+\n+    while let _ = 5 {\n+        break;\n+    }\n+}"}, {"sha": "d79798d57e820622787d44647a523bf8b90e35fd", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,7 +2,6 @@\n \n // Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n // with examples easier.\n-#![feature(irrefutable_let_patterns)]\n \n #[allow(irrefutable_let_patterns)]\n fn main() {"}, {"sha": "2cd59fe56cf2d111a346af2c792663d6bab6d3df", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:11:47\n+  --> $DIR/syntax-ambiguity-2015.rs:10:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -8,7 +8,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2015.rs:14:47\n+  --> $DIR/syntax-ambiguity-2015.rs:13:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -17,7 +17,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:17:50\n+  --> $DIR/syntax-ambiguity-2015.rs:16:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -26,7 +26,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2015.rs:20:50\n+  --> $DIR/syntax-ambiguity-2015.rs:19:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -35,7 +35,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:23:19\n+  --> $DIR/syntax-ambiguity-2015.rs:22:19\n    |\n LL |     if let true = false && false { }\n    |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n@@ -44,7 +44,7 @@ LL |     if let true = false && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:26:22\n+  --> $DIR/syntax-ambiguity-2015.rs:25:22\n    |\n LL |     while let true = (1 == 2) && false { }\n    |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`"}, {"sha": "687bf659416ab27a2172be16cbc15f365d7a7d6b", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,7 +2,6 @@\n \n // Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n // with examples easier.\n-#![feature(irrefutable_let_patterns)]\n \n #[allow(irrefutable_let_patterns)]\n fn main() {"}, {"sha": "cbba2d7473334ef4f582901cfd21d3b28828f098", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:11:47\n+  --> $DIR/syntax-ambiguity-2018.rs:10:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -8,7 +8,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2018.rs:14:47\n+  --> $DIR/syntax-ambiguity-2018.rs:13:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -17,7 +17,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:17:50\n+  --> $DIR/syntax-ambiguity-2018.rs:16:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -26,7 +26,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2018.rs:20:50\n+  --> $DIR/syntax-ambiguity-2018.rs:19:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -35,7 +35,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:23:19\n+  --> $DIR/syntax-ambiguity-2018.rs:22:19\n    |\n LL |     if let true = false && false { }\n    |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n@@ -44,7 +44,7 @@ LL |     if let true = false && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:26:22\n+  --> $DIR/syntax-ambiguity-2018.rs:25:22\n    |\n LL |     while let true = (1 == 2) && false { }\n    |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`"}, {"sha": "2899298a0cb1d1160496b1ef678a502b72b20408", "filename": "src/test/ui/should-fail-no_gate_irrefutable_if_let_pattern.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,5 +0,0 @@\n-// should-fail-irrefutable_let_patterns\n-fn main() {\n-    if let _ = 5 {}\n-    //~^ ERROR irrefutable if-let pattern [E0162]\n-}"}, {"sha": "9c9ebc6659b73feca374317889e8d3f3243e559d", "filename": "src/test/ui/should-fail-no_gate_irrefutable_if_let_pattern.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,9 +0,0 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/should-fail-no_gate_irrefutable_if_let_pattern.rs:3:12\n-   |\n-LL |     if let _ = 5 {}\n-   |            ^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "1b9b3dc1a4cbe6d9b463cd2db95090d87f4964c3", "filename": "src/test/ui/should-fail-with_gate_irrefutable_pattern_deny.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,7 +0,0 @@\n-#![feature(irrefutable_let_patterns)]\n-\n-// should-fail-irrefutable_let_patterns_with_gate\n-fn main() {\n-    if let _ = 5 {}\n-    //~^ ERROR irrefutable if-let pattern [irrefutable_let_patterns]\n-}"}, {"sha": "dc670f0e59081fa71980130ea0a4b286d749ad17", "filename": "src/test/ui/should-fail-with_gate_irrefutable_pattern_deny.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.stderr?ref=1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "patch": "@@ -1,10 +0,0 @@\n-error: irrefutable if-let pattern\n-  --> $DIR/should-fail-with_gate_irrefutable_pattern_deny.rs:5:5\n-   |\n-LL |     if let _ = 5 {}\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: #[deny(irrefutable_let_patterns)] on by default\n-\n-error: aborting due to previous error\n-"}, {"sha": "84d401c9fa61df2d7b718119bc3cc11a1af5f2f6", "filename": "src/test/ui/static/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -2,5 +2,6 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "d2c6ba6a2f85a70dc95ecfb4bd66b4c0592327c4", "filename": "src/test/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -4,6 +4,13 @@ error[E0010]: allocations are not allowed in statics\n LL | static mut a: Box<isize> = box 3;\n    |                            ^^^^^ allocation not allowed in statics\n \n-error: aborting due to previous error\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/static-mut-not-constant.rs:3:32\n+   |\n+LL | static mut a: Box<isize> = box 3;\n+   |                                ^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "1db022e886208f17050815bfd3f2bf65631ad186", "filename": "src/test/ui/underscore_const_names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funderscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funderscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore_const_names.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,6 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n #![feature(underscore_const_names)]\n \n trait Trt {}"}, {"sha": "788f49f743cda3a667987939dd2d61be5f5dd9b1", "filename": "src/test/ui/unsafe/ranged_ints2_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_let, const_fn)]\n+#![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]\n #[repr(transparent)]\n@@ -8,13 +8,13 @@ fn main() {\n \n const fn foo() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+    let y = &mut x.0; //~ ERROR references in const fn are unstable\n     //~^ ERROR mutation of layout constrained field is unsafe\n     unsafe { NonZero(1) }\n }\n \n const fn bar() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    let y = unsafe { &mut x.0 }; //~ ERROR references in constant functions may only refer to immut\n+    let y = unsafe { &mut x.0 }; //~ ERROR mutable references in const fn are unstable\n     unsafe { NonZero(1) }\n }"}, {"sha": "39a55190b17deed7328383bfe2bbe25c6a154aa3", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,24 +1,23 @@\n-error[E0017]: references in constant functions may only refer to immutable values\n-  --> $DIR/ranged_ints2_const.rs:11:13\n+error: mutable references in const fn are unstable\n+  --> $DIR/ranged_ints2_const.rs:11:9\n    |\n-LL |     let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n-   |             ^^^^^^^^ constant functions require immutable values\n+LL |     let y = &mut x.0; //~ ERROR references in const fn are unstable\n+   |         ^\n \n-error[E0017]: references in constant functions may only refer to immutable values\n-  --> $DIR/ranged_ints2_const.rs:18:22\n+error: mutable references in const fn are unstable\n+  --> $DIR/ranged_ints2_const.rs:18:9\n    |\n-LL |     let y = unsafe { &mut x.0 }; //~ ERROR references in constant functions may only refer to immut\n-   |                      ^^^^^^^^ constant functions require immutable values\n+LL |     let y = unsafe { &mut x.0 }; //~ ERROR mutable references in const fn are unstable\n+   |         ^\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2_const.rs:11:13\n    |\n-LL |     let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+LL |     let y = &mut x.0; //~ ERROR references in const fn are unstable\n    |             ^^^^^^^^ mutation of layout constrained field\n    |\n    = note: mutating layout constrained fields cannot statically be checked for valid values\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0017, E0133.\n-For more information about an error, try `rustc --explain E0017`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "7b03d8eda9380ef1bf3125b7a64ac44ed5ef7035", "filename": "src/test/ui/unsafe/ranged_ints3_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_let, const_fn)]\n+#![feature(rustc_attrs)]\n \n use std::cell::Cell;\n "}, {"sha": "f09168c3d3f9ca48a8225cc0b165cb0d62d6fb1a", "filename": "src/test/ui/unsafe/ranged_ints4_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_let, const_fn)]\n+#![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]\n #[repr(transparent)]"}, {"sha": "220447079c629f88ed84f6d0d838963c312abbca", "filename": "src/test/ui/where-clauses/where-equality-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,10 +1,10 @@\n-error: equality constraints are not yet supported in where clauses (#20041)\n+error: equality constraints are not yet supported in where clauses (see #20041)\n   --> $DIR/where-equality-constraints.rs:1:14\n    |\n LL | fn f() where u8 = u16 {}\n    |              ^^^^^^^^\n \n-error: equality constraints are not yet supported in where clauses (#20041)\n+error: equality constraints are not yet supported in where clauses (see #20041)\n   --> $DIR/where-equality-constraints.rs:3:14\n    |\n LL | fn g() where for<'a> &'static (u8,) == u16, {}"}, {"sha": "69f9de9497740018274cace4089346960bfdf2c2", "filename": "src/test/ui/while-let.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n@@ -10,16 +12,17 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1, { //~ ERROR irrefutable while-let\n+    foo!(a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1, { //~ ERROR irrefutable while-let\n+    bar!(a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    while let a = 1 { //~ ERROR irrefutable while-let\n+    while let a = 1 { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n+        break;\n     }\n }"}, {"sha": "6d61143d33c844f1a89399bb0525bd147d58ec0f", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,21 +1,33 @@\n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:13:10\n+warning: irrefutable while-let pattern\n+  --> $DIR/while-let.rs:6:13\n    |\n-LL |     foo!(a, 1, { //~ ERROR irrefutable while-let\n-   |          ^ irrefutable pattern\n-\n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:16:10\n+LL |               while let $p = $e $b\n+   |               ^^^^^\n+...\n+LL | /     foo!(a, 1, { //~ WARN irrefutable while-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n    |\n-LL |     bar!(a, 1, { //~ ERROR irrefutable while-let\n-   |          ^ irrefutable pattern\n+   = note: #[warn(irrefutable_let_patterns)] on by default\n \n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:22:15\n+warning: irrefutable while-let pattern\n+  --> $DIR/while-let.rs:6:13\n    |\n-LL |     while let a = 1 { //~ ERROR irrefutable while-let\n-   |               ^ irrefutable pattern\n+LL |               while let $p = $e $b\n+   |               ^^^^^\n+...\n+LL | /     bar!(a, 1, { //~ WARN irrefutable while-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n \n-error: aborting due to 3 previous errors\n+warning: irrefutable while-let pattern\n+  --> $DIR/while-let.rs:24:5\n+   |\n+LL | /     while let a = 1 { //~ WARN irrefutable while-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |         break;\n+LL | |     }\n+   | |_____^\n \n-For more information about this error, try `rustc --explain E0165`."}, {"sha": "43c63fed8cef19efd88767d2973a012fe0215107", "filename": "src/test/ui/write-to-static-mut-in-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n pub static mut A: u32 = 0;\n pub static mut B: () = unsafe { A = 1; };\n //~^ ERROR could not evaluate static initializer"}, {"sha": "eba1c609d2f8355ad3efde3bb3c7f19cf83be76b", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -1,23 +1,23 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/write-to-static-mut-in-static.rs:4:33\n+  --> $DIR/write-to-static-mut-in-static.rs:2:33\n    |\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^ tried to modify a static's initial value from another static's initializer\n \n error[E0391]: cycle detected when const-evaluating `C`\n-  --> $DIR/write-to-static-mut-in-static.rs:7:34\n+  --> $DIR/write-to-static-mut-in-static.rs:5:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^\n    |\n note: ...which requires const-evaluating `C`...\n-  --> $DIR/write-to-static-mut-in-static.rs:7:1\n+  --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `C`, completing the cycle\n note: cycle used when const-evaluating + checking `C`\n-  --> $DIR/write-to-static-mut-in-static.rs:7:1\n+  --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b00daa716777fd3a298c0f223995c5c3a5fee040", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6525ef539a04cb43de40080bdabc5f2f5a4a197/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=d6525ef539a04cb43de40080bdabc5f2f5a4a197", "patch": "@@ -131,7 +131,8 @@ struct Manifest {\n     manifest_version: String,\n     date: String,\n     pkg: BTreeMap<String, Package>,\n-    renames: BTreeMap<String, Rename>\n+    renames: BTreeMap<String, Rename>,\n+    profiles: BTreeMap<String, Vec<String>>,\n }\n \n #[derive(Serialize)]\n@@ -340,6 +341,7 @@ impl Builder {\n             date: self.date.to_string(),\n             pkg: BTreeMap::new(),\n             renames: BTreeMap::new(),\n+            profiles: BTreeMap::new(),\n         };\n \n         self.package(\"rustc\", &mut manifest.pkg, HOSTS);\n@@ -355,6 +357,20 @@ impl Builder {\n         self.package(\"llvm-tools-preview\", &mut manifest.pkg, TARGETS);\n         self.package(\"lldb-preview\", &mut manifest.pkg, TARGETS);\n \n+        self.profile(\"minimal\",\n+                     &mut manifest.profiles,\n+                     &[\"rustc\", \"cargo\", \"rust-std\", \"rust-mingw\"]);\n+        self.profile(\"default\",\n+                     &mut manifest.profiles,\n+                     &[\"rustc\", \"cargo\", \"rust-std\", \"rust-mingw\",\n+                       \"rust-docs\", \"rustfmt-preview\", \"clippy-preview\"]);\n+        self.profile(\"complete\",\n+                     &mut manifest.profiles,\n+                     &[\"rustc\", \"cargo\", \"rust-std\", \"rust-mingw\",\n+                       \"rust-docs\", \"rustfmt-preview\", \"clippy-preview\",\n+                       \"rls-preview\", \"rust-src\", \"llvm-tools-preview\",\n+                       \"lldb-preview\", \"rust-analysis\"]);\n+\n         manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n         manifest.renames.insert(\"rustfmt\".to_owned(), Rename { to: \"rustfmt-preview\".to_owned() });\n         manifest.renames.insert(\"clippy\".to_owned(), Rename { to: \"clippy-preview\".to_owned() });\n@@ -453,6 +469,13 @@ impl Builder {\n         return manifest;\n     }\n \n+    fn profile(&mut self,\n+               profile_name: &str,\n+               dst: &mut BTreeMap<String, Vec<String>>,\n+               pkgs: &[&str]) {\n+        dst.insert(profile_name.to_owned(), pkgs.iter().map(|s| (*s).to_owned()).collect());\n+    }\n+\n     fn package(&mut self,\n                pkgname: &str,\n                dst: &mut BTreeMap<String, Package>,"}]}