{"sha": "48ee57e656ea955fe634df7c7e9f37c27c65580a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWU1N2U2NTZlYTk1NWZlNjM0ZGY3YzdlOWYzN2MyN2M2NTU4MGE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-12T22:57:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-12T22:57:16Z"}, "message": "Update error codes", "tree": {"sha": "d619754cbb4fb6a5804a727547dbbb2dcbce15e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d619754cbb4fb6a5804a727547dbbb2dcbce15e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ee57e656ea955fe634df7c7e9f37c27c65580a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ee57e656ea955fe634df7c7e9f37c27c65580a", "html_url": "https://github.com/rust-lang/rust/commit/48ee57e656ea955fe634df7c7e9f37c27c65580a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ee57e656ea955fe634df7c7e9f37c27c65580a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "html_url": "https://github.com/rust-lang/rust/commit/f1b231dd714cb0edb0a632a5bd804b53423b3d4c"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "939991da20307f0679918f33677d9055b2c8e785", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48ee57e656ea955fe634df7c7e9f37c27c65580a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ee57e656ea955fe634df7c7e9f37c27c65580a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=48ee57e656ea955fe634df7c7e9f37c27c65580a", "patch": "@@ -210,10 +210,6 @@ register_diagnostics! {\n     E0258,\n     E0364, // item is private\n     E0365, // item is private\n-    E0397, // failed to resolve\n-    E0398, // unresolved import\n-    E0399, // can't capture dynamic environment in a fn item\n-    E0400, // attempt to use a non-constant value in a constant\n     E0401, // can't use type parameters from outer function\n     E0402, // cannot use an outer type parameter in this context\n     E0403, // the name `{}` is already used\n@@ -248,6 +244,10 @@ register_diagnostics! {\n     E0428, // duplicate definition of ...\n     E0429, // `self` imports are only allowed within a { } list\n     E0430, // `self` import can only appear once in the list\n-    E0431  // `self` import can only appear in an import list with a non-empty\n+    E0431, // `self` import can only appear in an import list with a non-empty\n            // prefix\n+    E0432, // unresolved import\n+    E0433, // failed to resolve\n+    E0434, // can't capture dynamic environment in a fn item\n+    E0435  // attempt to use a non-constant value in a constant\n }"}, {"sha": "58c91aa81c771977ea13320d0294708f84547ba4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48ee57e656ea955fe634df7c7e9f37c27c65580a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ee57e656ea955fe634df7c7e9f37c27c65580a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=48ee57e656ea955fe634df7c7e9f37c27c65580a", "patch": "@@ -1310,7 +1310,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                               PathSearch,\n                                               true) {\n                 Failed(Some((span, msg))) => {\n-                    resolve_err!(self, span, E0397, \"failed to resolve. {}\", msg);\n+                    resolve_err!(self, span, E0433, \"failed to resolve. {}\", msg);\n                 },\n                 Failed(None) => (), // Continue up the search chain.\n                 Indeterminate => {\n@@ -1568,10 +1568,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          .span_to_snippet((*imports)[index].span)\n                          .unwrap();\n             if sn.contains(\"::\") {\n-                resolve_err!(self, (*imports)[index].span, E0398,\n+                resolve_err!(self, (*imports)[index].span, E0432,\n                              \"{}\", \"unresolved import\");\n             } else {\n-                resolve_err!(self, (*imports)[index].span, E0398,\n+                resolve_err!(self, (*imports)[index].span, E0432,\n                              \"unresolved import (maybe you meant `{}::*`?)\", sn);\n             }\n         }\n@@ -1698,14 +1698,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n-                            resolve_err!(self, span, E0399, \"{}\",\n+                            resolve_err!(self, span, E0434, \"{}\",\n                                          \"can't capture dynamic environment in a fn item; \\\n                                           use the || { ... } closure form instead\");\n                             return None;\n                         }\n                         ConstantItemRibKind => {\n                             // Still doesn't deal with upvars\n-                            resolve_err!(self, span, E0400, \"{}\",\n+                            resolve_err!(self, span, E0435, \"{}\",\n                                          \"attempt to use a non-constant \\\n                                           value in a constant\");\n                             return None;\n@@ -2678,7 +2678,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Failed(err) => {\n                 match err {\n                     Some((span, msg)) => {\n-                        resolve_err!(self, span, E0397,\n+                        resolve_err!(self, span, E0433,\n                                      \"failed to resolve: {}\",\n                                      msg);\n                     }\n@@ -2909,7 +2909,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 };\n \n-                resolve_err!(self, span, E0397,\n+                resolve_err!(self, span, E0433,\n                              \"failed to resolve: {}\",\n                              msg);\n                 return None;\n@@ -2972,7 +2972,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 /*self.resolve_error(span, &format!(\"failed to resolve. {}\",\n                                                  msg));*/\n-                resolve_err!(self, span, E0397,\n+                resolve_err!(self, span, E0433,\n                              \"failed to resolve: {}\",\n                              msg);\n                 return None;\n@@ -3070,7 +3070,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          failed to resolve {}\", name);\n \n                 if let Some((span, msg)) = err {\n-                    resolve_err!(self, span, E0397,\n+                    resolve_err!(self, span, E0433,\n                                  \"failed to resolve: {}\",\n                                  msg)\n                 }"}, {"sha": "162dc4bd3815ac3b01901cb478f55951b69d0f08", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ee57e656ea955fe634df7c7e9f37c27c65580a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ee57e656ea955fe634df7c7e9f37c27c65580a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=48ee57e656ea955fe634df7c7e9f37c27c65580a", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new())\n                     };\n-                    resolve_err!(self.resolver, span, E0398,\n+                    resolve_err!(self.resolver, span, E0432,\n                                  \"unresolved import `{}`{}\",\n                                  import_path_to_string(\n                                           &import_directive.module_path,"}]}