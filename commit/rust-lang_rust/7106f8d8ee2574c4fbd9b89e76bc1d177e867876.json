{"sha": "7106f8d8ee2574c4fbd9b89e76bc1d177e867876", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDZmOGQ4ZWUyNTc0YzRmYmQ5Yjg5ZTc2YmMxZDE3N2U4Njc4NzY=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-26T04:06:32Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:51Z"}, "message": "Don't transform predicates in Inherited", "tree": {"sha": "eb6f7ecf14aa495f5cc54f2a8dcaf19092f07b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6f7ecf14aa495f5cc54f2a8dcaf19092f07b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7106f8d8ee2574c4fbd9b89e76bc1d177e867876", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1MACgkQAn35M4hi\nrd1IXhAAmTyLlfTraXBtc2XsCJCBkarFEDMravwmj52TN1LTUUKr+sMywIxFH14o\nARSnkZpmp+4vXYevjo3cEhJXPNjdv4+j6s34a/uff9KXs1dcif1J+SD9uJh6jPHJ\n0bDTeMAW3YmjAXkgflzr/sKF4BD5N9Mqh2Y2btjZn9VzC98yTuxrQm/P+unX+7lk\n6nRJZ9IUphSVWHOok2tBkEBU+0GqF/mRqNub3oYNqgHj4OSDdDW6kqAzbOJHMkXD\nWxjsKaSzkl02aydb1FgnBLygWvhrDzgwBJ4ETvyvorGiHAfvwBKuXRSz19nfgQfj\nXbw7iCtiQnnZzOV5U3Zuj/Uiy0ZlpIAJM3ki8ZhnTuUzcuNvrPO+Lji8ru3ssYFL\nY/GAEDCMngoXefIiXGLsbQSfY7ZoXm49X7oXdWBLZ2ydkAMeguXD8jhTYtjRUkpY\nqHVg9GWuiElug1lxUjQ5ZTDnHWD8K1HcdzxJ9OfxO8d3MkeF+p+u1NPzaxv1nGX8\nj/USrP9mVvIHFRInApvLzYWic96Yp1ScNJuvF9AZIIAb0H6N6XrSM47eCPdfoXVA\n6GUxzN+X6/ranlk72LfxWyF7j16x5L+cAnvcRZavzwoaXJgQ03dol16V9PvhDu0v\n4U8hmV5DPbr8ooGkGXBsRhqHez3A1okjyMEEZWVuZEFLgJzY/74=\n=VFG3\n-----END PGP SIGNATURE-----", "payload": "tree eb6f7ecf14aa495f5cc54f2a8dcaf19092f07b99\nparent c6d0a20f7baae2cec4488195d4ca873f10b0f63b\nauthor Deadbeef <ent3rm4n@gmail.com> 1627272392 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846931 +0000\n\nDon't transform predicates in Inherited\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7106f8d8ee2574c4fbd9b89e76bc1d177e867876", "html_url": "https://github.com/rust-lang/rust/commit/7106f8d8ee2574c4fbd9b89e76bc1d177e867876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7106f8d8ee2574c4fbd9b89e76bc1d177e867876/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6d0a20f7baae2cec4488195d4ca873f10b0f63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d0a20f7baae2cec4488195d4ca873f10b0f63b", "html_url": "https://github.com/rust-lang/rust/commit/c6d0a20f7baae2cec4488195d4ca873f10b0f63b"}], "stats": {"total": 18, "additions": 1, "deletions": 17}, "files": [{"sha": "9d9c77ec072b855c37dbfd5ddd17d8b66ad208ef", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7106f8d8ee2574c4fbd9b89e76bc1d177e867876/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7106f8d8ee2574c4fbd9b89e76bc1d177e867876/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=7106f8d8ee2574c4fbd9b89e76bc1d177e867876", "patch": "@@ -126,24 +126,8 @@ impl Inherited<'a, 'tcx> {\n         }\n     }\n \n-    #[instrument(level = \"debug\", skip(self))]\n-    fn transform_predicate(&self, p: &mut ty::Predicate<'tcx>) {\n-        // Don't transform non-const bounds into const bounds,\n-        // but transform const bounds to non-const when we are\n-        // not in a const context.\n-        if let hir::Constness::NotConst = self.constness {\n-            let kind = p.kind();\n-            if let ty::PredicateKind::Trait(pred) = kind.as_ref().skip_binder() {\n-                let mut pred = *pred;\n-                pred.constness = hir::Constness::NotConst;\n-                *p = kind.rebind(ty::PredicateKind::Trait(pred)).to_predicate(self.tcx);\n-            }\n-        }\n-    }\n-\n-    pub(super) fn register_predicate(&self, mut obligation: traits::PredicateObligation<'tcx>) {\n+    pub(super) fn register_predicate(&self, obligation: traits::PredicateObligation<'tcx>) {\n         debug!(\"register_predicate({:?})\", obligation);\n-        self.transform_predicate(&mut obligation.predicate);\n         if obligation.has_escaping_bound_vars() {\n             span_bug!(obligation.cause.span, \"escaping bound vars in predicate {:?}\", obligation);\n         }"}]}