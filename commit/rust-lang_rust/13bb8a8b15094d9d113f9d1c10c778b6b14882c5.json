{"sha": "13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "node_id": "C_kwDOAAsO6NoAKDEzYmI4YThiMTUwOTRkOWQxMTNmOWQxYzEwYzc3OGI2YjE0ODgyYzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-05T04:36:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-05T04:36:27Z"}, "message": "Rollup merge of #106385 - compiler-errors:new-solver-flag, r=jackh726\n\nSplit `-Zchalk` flag into `-Ztrait-solver=(classic|chalk|next)` flag\n\nWe'll eventually need a way to select more than chalk + not-chalk.\n\nDoes this need an MCP since it's touching a `-Z` flag? Or perhaps I should preserve `-Zchalk` for the time being... maybe I could make it a warning to use that flag? cc ``@rust-lang/types``\n\nr? types", "tree": {"sha": "5cf5abcc4fdc74062559abc1ceb77dc94bbb62fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf5abcc4fdc74062559abc1ceb77dc94bbb62fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtlPLCRBK7hj4Ov3rIwAAKX0IAGP0GMdYOumBkvYpDQERI8T/\nvWvuVPB+dHL4hS8uxKfPEdE8RzgkVdwL7P2vpURsUb7yUAHu5MQOaFTCUjFOvYBm\nQOUTAay86iBPLxpPjh80cB6SjpHycjgVuwmWJWCOBX6IeZNbKnfAd5amVDaZWip/\n5dJ/Sh6Zd6yBZKG4zjilfEk/dgZ+EySr9ukaLNsxFgLir8GvQdftiJ22SQIf26v7\n6PcQhiSKWVz2wxr/XGOl0CgMLjNGGVBFJUO0YdawoELMqMQGK0z1mleYx/PuOQ6r\nUY7vY71exIJDzD1BpXQZNQwMANY/Tx8WdYNQysN+jvcx8WUnA8WxyHCvR0qBM6Q=\n=zHFO\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cf5abcc4fdc74062559abc1ceb77dc94bbb62fa\nparent f9ccbf084f972cf50a08ab5c565b9287676fc927\nparent 8b0f43b19dcd97cc6b31c2d02b5526a48dd93c06\nauthor Michael Goulet <michael@errs.io> 1672893387 -0800\ncommitter GitHub <noreply@github.com> 1672893387 -0800\n\nRollup merge of #106385 - compiler-errors:new-solver-flag, r=jackh726\n\nSplit `-Zchalk` flag into `-Ztrait-solver=(classic|chalk|next)` flag\n\nWe'll eventually need a way to select more than chalk + not-chalk.\n\nDoes this need an MCP since it's touching a `-Z` flag? Or perhaps I should preserve `-Zchalk` for the time being... maybe I could make it a warning to use that flag? cc ``@rust-lang/types``\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "html_url": "https://github.com/rust-lang/rust/commit/13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ccbf084f972cf50a08ab5c565b9287676fc927", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ccbf084f972cf50a08ab5c565b9287676fc927", "html_url": "https://github.com/rust-lang/rust/commit/f9ccbf084f972cf50a08ab5c565b9287676fc927"}, {"sha": "8b0f43b19dcd97cc6b31c2d02b5526a48dd93c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0f43b19dcd97cc6b31c2d02b5526a48dd93c06", "html_url": "https://github.com/rust-lang/rust/commit/8b0f43b19dcd97cc6b31c2d02b5526a48dd93c06"}], "stats": {"total": 126, "additions": 78, "deletions": 48}, "files": [{"sha": "316e2e29cd8b31c107aaed69dcc00f04bb232e50", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -4,6 +4,7 @@ use crate::interface::parse_cfgspecs;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n+use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n     BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n@@ -722,7 +723,6 @@ fn test_unstable_options_tracking_hash() {\n             pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B })\n         })\n     );\n-    tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n     tracked!(debug_info_for_profiling, true);\n@@ -792,6 +792,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(trait_solver, TraitSolver::Chalk);\n     tracked!(translate_remapped_path_to_local_path, false);\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));"}, {"sha": "a87e820386e7cbc2240e788eb232ff6cfffed3b2", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -554,6 +554,16 @@ pub enum PrintRequest {\n     SplitDebuginfo,\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub enum TraitSolver {\n+    /// Classic trait solver in `rustc_trait_selection::traits::select`\n+    Classic,\n+    /// Chalk trait solver\n+    Chalk,\n+    /// Experimental trait solver in `rustc_trait_selection::solve`\n+    Next,\n+}\n+\n pub enum Input {\n     /// Load source code from a file.\n     File(PathBuf),\n@@ -2761,7 +2771,7 @@ pub(crate) mod dep_tracking {\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n         InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OomStrategy, OptLevel,\n         OutputType, OutputTypes, Passes, SourceFileHashAlgorithm, SplitDwarfKind,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2861,6 +2871,7 @@ pub(crate) mod dep_tracking {\n         BranchProtection,\n         OomStrategy,\n         LanguageIdentifier,\n+        TraitSolver,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "043a60a1c5310c7247ad0fe286c681d7269d2226", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -382,6 +382,8 @@ mod desc {\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n     pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n+    pub const parse_trait_solver: &str =\n+        \"one of the supported solver modes (`classic`, `chalk`, or `next`)\";\n     pub const parse_lto: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted\";\n     pub const parse_linker_plugin_lto: &str =\n@@ -880,6 +882,18 @@ mod parse {\n         }\n     }\n \n+    pub(crate) fn parse_trait_solver(slot: &mut TraitSolver, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"classic\") => *slot = TraitSolver::Classic,\n+            Some(\"chalk\") => *slot = TraitSolver::Chalk,\n+            Some(\"next\") => *slot = TraitSolver::Next,\n+            // default trait solver is subject to change..\n+            Some(\"default\") => *slot = TraitSolver::Classic,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     pub(crate) fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n         if v.is_some() {\n             let mut bool_arg = None;\n@@ -1249,8 +1263,6 @@ options! {\n         \"instrument control-flow architecture protection\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n-    chalk: bool = (false, parse_bool, [TRACKED],\n-        \"enable the experimental Chalk-based trait solving engine\"),\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     combine_cgu: bool = (false, parse_bool, [TRACKED],\n@@ -1609,6 +1621,8 @@ options! {\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     track_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"tracks where in rustc a diagnostic was emitted\"),\n+    trait_solver: TraitSolver = (TraitSolver::Classic, parse_trait_solver, [TRACKED],\n+        \"specify the trait solver mode used by rustc (default: classic)\"),\n     // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n     // alongside query results and changes to translation options can affect diagnostics - so\n     // translation options should be tracked."}, {"sha": "bc6d9d4b922d87c27a6dd159416157aadae0dd64", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -3,6 +3,7 @@ use std::fmt::Debug;\n \n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n+use crate::solve::FulfillmentCtxt as NextFulfillmentCtxt;\n use crate::traits::NormalizeExt;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -20,6 +21,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::config::TraitSolver;\n use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n@@ -29,18 +31,18 @@ pub trait TraitEngineExt<'tcx> {\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new())\n-        } else {\n-            Box::new(FulfillmentContext::new())\n+        match tcx.sess.opts.unstable_opts.trait_solver {\n+            TraitSolver::Classic => Box::new(FulfillmentContext::new()),\n+            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new()),\n+            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n         }\n     }\n \n     fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new_in_snapshot())\n-        } else {\n-            Box::new(FulfillmentContext::new_in_snapshot())\n+        match tcx.sess.opts.unstable_opts.trait_solver {\n+            TraitSolver::Classic => Box::new(FulfillmentContext::new_in_snapshot()),\n+            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new_in_snapshot()),\n+            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n         }\n     }\n }"}, {"sha": "ac52316d9c91792e952781a5df69537dd030046d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -40,6 +40,7 @@ use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n     TypeVisitable,\n };\n+use rustc_session::config::TraitSolver;\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n@@ -1167,7 +1168,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n-                        if !self.tcx.sess.opts.unstable_opts.chalk {\n+                        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n                             // WF predicates cannot themselves make\n                             // errors. They can only block due to\n                             // ambiguity; otherwise, they always"}, {"sha": "15526b34ed2d851a6f357b67e220e281b23cf52d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::{\n     self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n     ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt,\n };\n+use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -767,8 +768,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?closure_def_id, ?trait_ref, ?nested, \"confirm closure candidate obligations\");\n \n         // FIXME: Chalk\n-\n-        if !self.tcx().sess.opts.unstable_opts.chalk {\n+        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n             nested.push(obligation.with(\n                 self.tcx(),\n                 ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)),"}, {"sha": "86afac113d79e4f9cef5ee2998f73a5e89bee5d0", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n+use rustc_session::config::TraitSolver;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -121,7 +122,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // are any errors at that point, so outside of type inference you can be\n     // sure that this will succeed without errors anyway.\n \n-    if tcx.sess.opts.unstable_opts.chalk {\n+    if tcx.sess.opts.unstable_opts.trait_solver == TraitSolver::Chalk {\n         let environment = well_formed_types_in_env(tcx, def_id);\n         predicates.extend(environment);\n     }"}, {"sha": "537dc92be192101237c068f44fe856b9ac4f5cb0", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -8,7 +8,6 @@\n     -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n     -Z                           cf-protection=val -- instrument control-flow architecture protection\n     -Z               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n-    -Z                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n     -Z                         codegen-backend=val -- the backend to use\n     -Z                             combine-cgu=val -- combine CGUs into a single one\n     -Z                              crate-attr=val -- inject the given attribute in the crate\n@@ -175,6 +174,7 @@\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n     -Z                       track-diagnostics=val -- tracks where in rustc a diagnostic was emitted\n+    -Z                            trait-solver=val -- specify the trait solver mode used by rustc (default: classic)\n     -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n     -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n     -Z                          translate-lang=val -- language identifier for diagnostic output"}, {"sha": "6c78a71b0fc9d9faa06f7ea43f5391491341bba8", "filename": "src/test/ui/chalkify/arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Farithmetic.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() {\n     1 + 2;"}, {"sha": "834c8935e762006e4b04b60a5b1c3cf1ca99de4c", "filename": "src/test/ui/chalkify/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() {\n     assert_eq!(1, 1);"}, {"sha": "4a7cd9396690a9d2d7015760905e91ef63bd2356", "filename": "src/test/ui/chalkify/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbasic.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo {}\n "}, {"sha": "ed0f5dc9bd371208beef2cc965aad75399b412d2", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,6 +1,6 @@\n // check-fail\n // known-bug: unknown\n-// compile-flags: -Z chalk --edition=2021\n+// compile-flags: -Z trait-solver=chalk --edition=2021\n \n fn main() -> () {}\n "}, {"sha": "a478c006ef1ca05de08f59389836b038fc977f8c", "filename": "src/test/ui/chalkify/builtin-copy-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n // Test that `Clone` is correctly implemented for builtin types.\n "}, {"sha": "21de72b6fcccbc8c2d3eca1a2a1d30eca121564c", "filename": "src/test/ui/chalkify/chalk_initial_program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "a908a1e97ecd9c3491a7ddcd70ef3a2b73cff2c8", "filename": "src/test/ui/chalkify/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() -> () {\n     let t = || {};"}, {"sha": "7d33e12d8be1739e31dd876e504dada3e66007ca", "filename": "src/test/ui/chalkify/generic_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "c8dfd4c3a5b4fa51d6b1d8e1e4551b8c6ba31613", "filename": "src/test/ui/chalkify/impl_wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo: Sized { }\n "}, {"sha": "325044ad6349a94a32b50f74186c401372703c58", "filename": "src/test/ui/chalkify/impl_wf_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,6 +1,6 @@\n // Split out of impl_wf.rs to work around rust aborting compilation early\n \n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo: Sized { }\n "}, {"sha": "f0f24d485cd8748993f9391d5f5538489c11181c", "filename": "src/test/ui/chalkify/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "3eda7102decd111771c6de6bdd17c5ec143b3868", "filename": "src/test/ui/chalkify/inherent_impl_min.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl_min.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl_min.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl_min.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "c8762001e6a1d948d77ac1b8ee618ca26a6f21e3", "filename": "src/test/ui/chalkify/lower_env1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![allow(dead_code)]\n "}, {"sha": "7d4f81f12eaf5be4a033e20d789ff13223864897", "filename": "src/test/ui/chalkify/lower_env2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![allow(dead_code)]\n "}, {"sha": "5b70c4abbb551c3e741f558e042a3d537105aee8", "filename": "src/test/ui/chalkify/lower_env3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![allow(dead_code)]\n "}, {"sha": "6f79b3ba386a52c533dff6eceaf3bf8f6308cb8a", "filename": "src/test/ui/chalkify/lower_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "6be0d4dd5bd2978c07a2240d914f834af585c322", "filename": "src/test/ui/chalkify/lower_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n struct Foo<'a, T> where Box<T>: Clone {\n     _x: std::marker::PhantomData<&'a T>,"}, {"sha": "8f5b358220bf73233f36096f59c111191e43bcb4", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Bar { }\n "}, {"sha": "f04a1deea87536356df2e3df7a52528884209ef1", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo<F: ?Sized> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n {"}, {"sha": "a21d2f31963c79ec88a83de6b173a47463ee2522", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n use std::borrow::Borrow;\n "}, {"sha": "edddc382152344de1a2eeea2c96db9aed0f8597c", "filename": "src/test/ui/chalkify/println.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() {\n     println!(\"hello\");"}, {"sha": "19bb2ae1497230af55976f8991c6f0f0cb9c9fa5", "filename": "src/test/ui/chalkify/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fprojection.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "5855f000c7b93eb3c438ad0324732f5c14cef2ec", "filename": "src/test/ui/chalkify/recursive_where_clause_on_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,6 +1,6 @@\n // FIXME(chalk): should fail, see comments\n // check-fail\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![feature(trivial_bounds)]\n "}, {"sha": "540ae51e57f6d80c2a7819da256f460ca8cd0672", "filename": "src/test/ui/chalkify/super_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fsuper_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Fsuper_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fsuper_trait.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n trait Bar: Foo { }"}, {"sha": "144d9788b82e6c558b69f355adedb6d2e2d1eb36", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n use std::fmt::Display;\n "}, {"sha": "f97dbf6b7e7748649213c7b7144fcce67495c8e8", "filename": "src/test/ui/chalkify/trait_implied_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftrait_implied_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftrait_implied_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait_implied_bound.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n trait Bar<U> where U: Foo { }"}, {"sha": "70f1b4265e4990507b5a935ea8690f1965358e62", "filename": "src/test/ui/chalkify/type_implied_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_implied_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_implied_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_implied_bound.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Eq { }\n trait Hash: Eq { }"}, {"sha": "d7167d0dc57fa3da2a18fbeb8dac9bcbe7970d58", "filename": "src/test/ui/chalkify/type_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n impl Foo for i32 { }"}, {"sha": "37d2f5ca832ce6c9f0f7cbe69ecd0f16842e2f4f", "filename": "src/test/ui/chalkify/type_wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "c177655c5acf549cae437f52356d139ba452c7c2", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -1,5 +1,5 @@\n // A test exploiting the bug behind #25860 except with\n-// implied trait bounds which currently don't exist without `-Zchalk`.\n+// implied trait bounds which currently don't exist without `-Ztrait-solver=chalk`.\n use std::marker::PhantomData;\n struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n where"}, {"sha": "7e48dd206606867512a6a8e0f4cfcbe122b8317e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bb8a8b15094d9d113f9d1c10c778b6b14882c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=13bb8a8b15094d9d113f9d1c10c778b6b14882c5", "patch": "@@ -2011,7 +2011,7 @@ impl<'test> TestCx<'test> {\n                 rustc.args(&[\"-Zpolonius\"]);\n             }\n             Some(CompareMode::Chalk) => {\n-                rustc.args(&[\"-Zchalk\"]);\n+                rustc.args(&[\"-Ztrait-solver=chalk\"]);\n             }\n             Some(CompareMode::SplitDwarf) if self.config.target.contains(\"windows\") => {\n                 rustc.args(&[\"-Csplit-debuginfo=unpacked\", \"-Zunstable-options\"]);"}]}