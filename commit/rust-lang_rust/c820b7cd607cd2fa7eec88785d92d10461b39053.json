{"sha": "c820b7cd607cd2fa7eec88785d92d10461b39053", "node_id": "C_kwDOAAsO6NoAKGM4MjBiN2NkNjA3Y2QyZmE3ZWVjODg3ODVkOTJkMTA0NjFiMzkwNTM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-17T13:43:32Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-17T13:43:32Z"}, "message": "Remove TyCtxt field from CodegenCx", "tree": {"sha": "cba5f88af18ee42b27b8a44905419ffdb338d6d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba5f88af18ee42b27b8a44905419ffdb338d6d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c820b7cd607cd2fa7eec88785d92d10461b39053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c820b7cd607cd2fa7eec88785d92d10461b39053", "html_url": "https://github.com/rust-lang/rust/commit/c820b7cd607cd2fa7eec88785d92d10461b39053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c820b7cd607cd2fa7eec88785d92d10461b39053/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b181f2b3769f1185d328efb1569c3da72e5edaa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b181f2b3769f1185d328efb1569c3da72e5edaa0", "html_url": "https://github.com/rust-lang/rust/commit/b181f2b3769f1185d328efb1569c3da72e5edaa0"}], "stats": {"total": 145, "additions": 73, "deletions": 72}, "files": [{"sha": "6a276df40baccdcf9025a29cf8e164daad6cf11c", "filename": "src/base.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c820b7cd607cd2fa7eec88785d92d10461b39053", "patch": "@@ -24,31 +24,30 @@ struct CodegenedFunction<'tcx> {\n }\n \n pub(crate) fn codegen_and_compile_fn<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     cx: &mut crate::CodegenCx<'tcx>,\n     cached_context: &mut Context,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n-    let tcx = cx.tcx;\n     let _inst_guard =\n         crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n \n     let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n-    let codegened_func = codegen_fn(cx, cached_func, module, instance);\n+    let codegened_func = codegen_fn(tcx, cx, cached_func, module, instance);\n \n-    compile_fn(cx, cached_context, module, codegened_func);\n+    compile_fn(tcx, cx, cached_context, module, codegened_func);\n }\n \n fn codegen_fn<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     cx: &mut crate::CodegenCx<'tcx>,\n     cached_func: Function,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) -> CodegenedFunction<'tcx> {\n     debug_assert!(!instance.substs.needs_infer());\n \n-    let tcx = cx.tcx;\n-\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n@@ -117,14 +116,16 @@ fn codegen_fn<'tcx>(\n \n     fx.constants_cx.finalize(fx.tcx, &mut *fx.module);\n \n-    crate::pretty_clif::write_clif_file(\n-        tcx,\n-        symbol_name.name,\n-        \"unopt\",\n-        module.isa(),\n-        &func,\n-        &clif_comments,\n-    );\n+    if cx.should_write_ir {\n+        crate::pretty_clif::write_clif_file(\n+            tcx.output_filenames(()),\n+            symbol_name.name,\n+            \"unopt\",\n+            module.isa(),\n+            &func,\n+            &clif_comments,\n+        );\n+    }\n \n     // Verify function\n     verify_func(tcx, &clif_comments, &func);\n@@ -141,13 +142,12 @@ fn codegen_fn<'tcx>(\n }\n \n fn compile_fn<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     cx: &mut crate::CodegenCx<'tcx>,\n     cached_context: &mut Context,\n     module: &mut dyn Module,\n     codegened_func: CodegenedFunction<'tcx>,\n ) {\n-    let tcx = cx.tcx;\n-\n     let clif_comments = codegened_func.clif_comments;\n \n     // Store function in context\n@@ -194,26 +194,28 @@ fn compile_fn<'tcx>(\n \n     // Define function\n     tcx.sess.time(\"define function\", || {\n-        context.want_disasm = crate::pretty_clif::should_write_ir(tcx);\n+        context.want_disasm = cx.should_write_ir;\n         module.define_function(codegened_func.func_id, context).unwrap();\n     });\n \n-    // Write optimized function to file for debugging\n-    crate::pretty_clif::write_clif_file(\n-        tcx,\n-        codegened_func.symbol_name.name,\n-        \"opt\",\n-        module.isa(),\n-        &context.func,\n-        &clif_comments,\n-    );\n-\n-    if let Some(disasm) = &context.mach_compile_result.as_ref().unwrap().disasm {\n-        crate::pretty_clif::write_ir_file(\n-            tcx,\n-            || format!(\"{}.vcode\", codegened_func.symbol_name.name),\n-            |file| file.write_all(disasm.as_bytes()),\n-        )\n+    if cx.should_write_ir {\n+        // Write optimized function to file for debugging\n+        crate::pretty_clif::write_clif_file(\n+            &cx.output_filenames,\n+            codegened_func.symbol_name.name,\n+            \"opt\",\n+            module.isa(),\n+            &context.func,\n+            &clif_comments,\n+        );\n+\n+        if let Some(disasm) = &context.mach_compile_result.as_ref().unwrap().disasm {\n+            crate::pretty_clif::write_ir_file(\n+                &cx.output_filenames,\n+                &format!(\"{}.vcode\", codegened_func.symbol_name.name),\n+                |file| file.write_all(disasm.as_bytes()),\n+            )\n+        }\n     }\n \n     // Define debuginfo for function"}, {"sha": "b2ad3cc4c4cde412084705275b8fd07ee0614084", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=c820b7cd607cd2fa7eec88785d92d10461b39053", "patch": "@@ -256,8 +256,9 @@ fn module_codegen(\n     for (mono_item, _) in mono_items {\n         match mono_item {\n             MonoItem::Fn(inst) => {\n-                cx.tcx.sess.time(\"codegen fn\", || {\n+                tcx.sess.time(\"codegen fn\", || {\n                     crate::base::codegen_and_compile_fn(\n+                        tcx,\n                         &mut cx,\n                         &mut cached_context,\n                         &mut module,"}, {"sha": "de71b76da4efebd832fae42ed2a1f73b60e09190", "filename": "src/driver/jit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=c820b7cd607cd2fa7eec88785d92d10461b39053", "patch": "@@ -129,8 +129,9 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n                 MonoItem::Fn(inst) => match backend_config.codegen_mode {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n-                        cx.tcx.sess.time(\"codegen fn\", || {\n+                        tcx.sess.time(\"codegen fn\", || {\n                             crate::base::codegen_and_compile_fn(\n+                                tcx,\n                                 &mut cx,\n                                 &mut cached_context,\n                                 &mut jit_module,\n@@ -139,7 +140,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n                         });\n                     }\n                     CodegenMode::JitLazy => {\n-                        codegen_shim(&mut cx, &mut cached_context, &mut jit_module, inst)\n+                        codegen_shim(tcx, &mut cached_context, &mut jit_module, inst)\n                     }\n                 },\n                 MonoItem::Static(def_id) => {\n@@ -269,6 +270,7 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n             );\n             tcx.sess.time(\"codegen fn\", || {\n                 crate::base::codegen_and_compile_fn(\n+                    tcx,\n                     &mut cx,\n                     &mut Context::new(),\n                     jit_module,\n@@ -350,13 +352,11 @@ fn load_imported_symbols_for_jit(\n }\n \n fn codegen_shim<'tcx>(\n-    cx: &mut CodegenCx<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     cached_context: &mut Context,\n     module: &mut JITModule,\n     inst: Instance<'tcx>,\n ) {\n-    let tcx = cx.tcx;\n-\n     let pointer_type = module.target_config().pointer_type();\n \n     let name = tcx.symbol_name(inst).name;"}, {"sha": "1e851e31ac30485252b67ca8d6adc2813252ed21", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c820b7cd607cd2fa7eec88785d92d10461b39053", "patch": "@@ -26,6 +26,7 @@ extern crate rustc_driver;\n \n use std::any::Any;\n use std::cell::{Cell, RefCell};\n+use std::sync::Arc;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n@@ -121,7 +122,8 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n /// The codegen context holds any information shared between the codegen of individual functions\n /// inside a single codegen unit with the exception of the Cranelift [`Module`](cranelift_module::Module).\n struct CodegenCx<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+    output_filenames: Arc<OutputFilenames>,\n+    should_write_ir: bool,\n     global_asm: String,\n     inline_asm_index: Cell<usize>,\n     debug_context: Option<DebugContext<'tcx>>,\n@@ -147,7 +149,8 @@ impl<'tcx> CodegenCx<'tcx> {\n             None\n         };\n         CodegenCx {\n-            tcx,\n+            output_filenames: tcx.output_filenames(()).clone(),\n+            should_write_ir: crate::pretty_clif::should_write_ir(tcx),\n             global_asm: String::new(),\n             inline_asm_index: Cell::new(0),\n             debug_context,"}, {"sha": "a7af162687c34c5cd0fa4ffbea65459779231eb7", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c820b7cd607cd2fa7eec88785d92d10461b39053/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=c820b7cd607cd2fa7eec88785d92d10461b39053", "patch": "@@ -62,7 +62,7 @@ use cranelift_codegen::{\n };\n \n use rustc_middle::ty::layout::FnAbiOf;\n-use rustc_session::config::OutputType;\n+use rustc_session::config::{OutputFilenames, OutputType};\n \n use crate::prelude::*;\n \n@@ -205,60 +205,55 @@ pub(crate) fn should_write_ir(tcx: TyCtxt<'_>) -> bool {\n }\n \n pub(crate) fn write_ir_file(\n-    tcx: TyCtxt<'_>,\n-    name: impl FnOnce() -> String,\n+    output_filenames: &OutputFilenames,\n+    name: &str,\n     write: impl FnOnce(&mut dyn Write) -> std::io::Result<()>,\n ) {\n-    if !should_write_ir(tcx) {\n-        return;\n-    }\n-\n-    let clif_output_dir = tcx.output_filenames(()).with_extension(\"clif\");\n+    let clif_output_dir = output_filenames.with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n         Ok(()) => {}\n         Err(err) if err.kind() == std::io::ErrorKind::AlreadyExists => {}\n         res @ Err(_) => res.unwrap(),\n     }\n \n-    let clif_file_name = clif_output_dir.join(name());\n+    let clif_file_name = clif_output_dir.join(name);\n \n     let res = std::fs::File::create(clif_file_name).and_then(|mut file| write(&mut file));\n     if let Err(err) = res {\n-        tcx.sess.warn(&format!(\"error writing ir file: {}\", err));\n+        // Using early_warn as no Session is available here\n+        rustc_session::early_warn(\n+            rustc_session::config::ErrorOutputType::default(),\n+            &format!(\"error writing ir file: {}\", err),\n+        );\n     }\n }\n \n-pub(crate) fn write_clif_file<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn write_clif_file(\n+    output_filenames: &OutputFilenames,\n     symbol_name: &str,\n     postfix: &str,\n     isa: &dyn cranelift_codegen::isa::TargetIsa,\n     func: &cranelift_codegen::ir::Function,\n     mut clif_comments: &CommentWriter,\n ) {\n     // FIXME work around filename too long errors\n-    write_ir_file(\n-        tcx,\n-        || format!(\"{}.{}.clif\", symbol_name, postfix),\n-        |file| {\n-            let mut clif = String::new();\n-            cranelift_codegen::write::decorate_function(&mut clif_comments, &mut clif, func)\n-                .unwrap();\n+    write_ir_file(output_filenames, &format!(\"{}.{}.clif\", symbol_name, postfix), |file| {\n+        let mut clif = String::new();\n+        cranelift_codegen::write::decorate_function(&mut clif_comments, &mut clif, func).unwrap();\n \n-            for flag in isa.flags().iter() {\n-                writeln!(file, \"set {}\", flag)?;\n-            }\n-            write!(file, \"target {}\", isa.triple().architecture.to_string())?;\n-            for isa_flag in isa.isa_flags().iter() {\n-                write!(file, \" {}\", isa_flag)?;\n-            }\n-            writeln!(file, \"\\n\")?;\n-            writeln!(file)?;\n-            file.write_all(clif.as_bytes())?;\n-            Ok(())\n-        },\n-    );\n+        for flag in isa.flags().iter() {\n+            writeln!(file, \"set {}\", flag)?;\n+        }\n+        write!(file, \"target {}\", isa.triple().architecture.to_string())?;\n+        for isa_flag in isa.isa_flags().iter() {\n+            write!(file, \" {}\", isa_flag)?;\n+        }\n+        writeln!(file, \"\\n\")?;\n+        writeln!(file)?;\n+        file.write_all(clif.as_bytes())?;\n+        Ok(())\n+    });\n }\n \n impl fmt::Debug for FunctionCx<'_, '_, '_> {"}]}