{"sha": "1d32b201707ce6327c0ab322c4e06d8e0367f563", "node_id": "C_kwDOAAsO6NoAKDFkMzJiMjAxNzA3Y2U2MzI3YzBhYjMyMmM0ZTA2ZDhlMDM2N2Y1NjM", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-03T15:04:30Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-07T04:00:34Z"}, "message": "Add unit test for issue 78174", "tree": {"sha": "bfc800246faa967b568cb409448669b76ae1994f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc800246faa967b568cb409448669b76ae1994f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d32b201707ce6327c0ab322c4e06d8e0367f563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d32b201707ce6327c0ab322c4e06d8e0367f563", "html_url": "https://github.com/rust-lang/rust/commit/1d32b201707ce6327c0ab322c4e06d8e0367f563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d32b201707ce6327c0ab322c4e06d8e0367f563/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4acef9ac19133e7cd3a0648ab6395c7c4eb3031f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4acef9ac19133e7cd3a0648ab6395c7c4eb3031f", "html_url": "https://github.com/rust-lang/rust/commit/4acef9ac19133e7cd3a0648ab6395c7c4eb3031f"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "f622f2cbddf482b5c33b561eff4298e748ca5eeb", "filename": "src/test/ui/inline-const/const-expr-lifetime.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1d32b201707ce6327c0ab322c4e06d8e0367f563/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d32b201707ce6327c0ab322c4e06d8e0367f563/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs?ref=1d32b201707ce6327c0ab322c4e06d8e0367f563", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(inline_const)]\n+\n+use std::marker::PhantomData;\n+\n+// rust-lang/rust#78174: ICE: \"cannot convert ReErased to a region vid\"\n+fn issue_78174() {\n+    let foo = const { \"foo\" };\n+    assert_eq!(foo, \"foo\");\n+}\n+\n+pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);\n+\n+impl<'a, T: ?Sized> InvariantRef<'a, T> {\n+    pub const fn new(r: &'a T) -> Self {\n+        InvariantRef(r, PhantomData)\n+    }\n+}\n+\n+fn get_invariant_ref<'a>() -> InvariantRef<'a, ()> {\n+    const { InvariantRef::<'a, ()>::new(&()) }\n+}\n+\n+fn get_invariant_ref2<'a>() -> InvariantRef<'a, ()> {\n+    // Try some type inference\n+    const { InvariantRef::new(&()) }\n+}\n+\n+fn main() {\n+    issue_78174();\n+    get_invariant_ref();\n+    get_invariant_ref2();\n+}"}, {"sha": "3d986f0d9ee08161957a9da31a27ac52288a41ca", "filename": "src/test/ui/inline-const/const-match-pat-lifetime.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1d32b201707ce6327c0ab322c4e06d8e0367f563/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d32b201707ce6327c0ab322c4e06d8e0367f563/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs?ref=1d32b201707ce6327c0ab322c4e06d8e0367f563", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(inline_const)]\n+\n+use std::marker::PhantomData;\n+\n+// rust-lang/rust#78174: ICE: \"cannot convert ReErased to a region vid\"\n+fn issue_78174() {\n+    match \"foo\" {\n+        const { concat!(\"fo\", \"o\") } => (),\n+        _ => unreachable!(),\n+    }\n+}\n+\n+#[derive(PartialEq, Eq)]\n+pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);\n+\n+impl<'a, T: ?Sized> InvariantRef<'a, T> {\n+    pub const fn new(r: &'a T) -> Self {\n+        InvariantRef(r, PhantomData)\n+    }\n+}\n+\n+fn match_invariant_ref<'a>() {\n+    match const { InvariantRef::<'a, _>::new(&()) } {\n+        const { InvariantRef::<'a, ()>::new(&()) } => {\n+        }\n+    }\n+}\n+\n+fn main() {\n+    issue_78174();\n+    match_invariant_ref();\n+}"}]}