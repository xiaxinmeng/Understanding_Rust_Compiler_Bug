{"sha": "06333e092b9e811646d44b1deffbc3139484b00c", "node_id": "C_kwDOAAsO6NoAKDA2MzMzZTA5MmI5ZTgxMTY0NmQ0NGIxZGVmZmJjMzEzOTQ4NGIwMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-02T15:17:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-02T15:17:34Z"}, "message": "Rollup merge of #100045 - Amanieu:global_asm_may_unwind, r=tmiasko\n\nProperly reject the `may_unwind` option in `global_asm!`\n\nThis was accidentally accepted even though it had no effect in\n`global_asm!`. The option only makes sense for `asm!` which runs within\na function.", "tree": {"sha": "77c0a8c1466a864b79d3920e6c24af76352d27f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c0a8c1466a864b79d3920e6c24af76352d27f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06333e092b9e811646d44b1deffbc3139484b00c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6UAOCRBK7hj4Ov3rIwAAONgIAA5OVrQq+1POGUsIXqi16/Pt\ngdh5mMwaRaLn8RW2RTDFbVeiDKPCqYLncZE0dLCMoraeAmntUM7PDmaRpvGggb+6\nTxj39INPAIld+r680oRErPJIi3H7EcOjQy80R1gpjvHKyCFQ0xUU3QhqdFhz5sAD\n9knW0PpLHwbhqY3y50UwbhNEj47X95vAodiDPGB7iBz7bXdsQ/CF//dt73tc1HRb\ntZ3EZ5wJRBa53tlWPL7v4bOtoqAwkLF6j2FeGCWsR1ISgc8EKJiwYuMsfuVxcL5t\nq5Voh3FKkLE8/NHawUCo0PGDBJ7gvPjPR/huKBLr908YgElh5hYS1G0KCv/NiV4=\n=1rys\n-----END PGP SIGNATURE-----\n", "payload": "tree 77c0a8c1466a864b79d3920e6c24af76352d27f7\nparent 1ce85b1c392f0029200cb62493a16398fb134799\nparent 96c955e66b39f23eca553644aeb2ea5f41ff355a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659453454 +0200\ncommitter GitHub <noreply@github.com> 1659453454 +0200\n\nRollup merge of #100045 - Amanieu:global_asm_may_unwind, r=tmiasko\n\nProperly reject the `may_unwind` option in `global_asm!`\n\nThis was accidentally accepted even though it had no effect in\n`global_asm!`. The option only makes sense for `asm!` which runs within\na function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06333e092b9e811646d44b1deffbc3139484b00c", "html_url": "https://github.com/rust-lang/rust/commit/06333e092b9e811646d44b1deffbc3139484b00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06333e092b9e811646d44b1deffbc3139484b00c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce85b1c392f0029200cb62493a16398fb134799", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce85b1c392f0029200cb62493a16398fb134799", "html_url": "https://github.com/rust-lang/rust/commit/1ce85b1c392f0029200cb62493a16398fb134799"}, {"sha": "96c955e66b39f23eca553644aeb2ea5f41ff355a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c955e66b39f23eca553644aeb2ea5f41ff355a", "html_url": "https://github.com/rust-lang/rust/commit/96c955e66b39f23eca553644aeb2ea5f41ff355a"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "1a0ea8f416064f27c0b90a31254c9f0dd7af6731", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06333e092b9e811646d44b1deffbc3139484b00c/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06333e092b9e811646d44b1deffbc3139484b00c/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=06333e092b9e811646d44b1deffbc3139484b00c", "patch": "@@ -410,12 +410,12 @@ fn parse_options<'a>(\n             try_set_option(p, args, sym::noreturn, ast::InlineAsmOptions::NORETURN);\n         } else if !is_global_asm && p.eat_keyword(sym::nostack) {\n             try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n+        } else if !is_global_asm && p.eat_keyword(sym::may_unwind) {\n+            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else if p.eat_keyword(sym::att_syntax) {\n             try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n         } else if p.eat_keyword(kw::Raw) {\n             try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::RAW);\n-        } else if p.eat_keyword(sym::may_unwind) {\n-            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else {\n             return p.unexpected();\n         }"}, {"sha": "21bcc4a9c7badd4ddbc01351734661187eb6d68a", "filename": "src/test/ui/asm/aarch64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr?ref=06333e092b9e811646d44b1deffbc3139484b00c", "patch": "@@ -36,41 +36,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n    |                    |\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:28:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:30:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:32:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:34:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:36:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:38:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "804966b06ba7dfdf1f19b368bc5c85f4fb61dcb2", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=06333e092b9e811646d44b1deffbc3139484b00c", "patch": "@@ -260,23 +260,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:108:30"}, {"sha": "e2351840eef211612b880b82ec4c538f50e3cfeb", "filename": "src/test/ui/asm/x86_64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr?ref=06333e092b9e811646d44b1deffbc3139484b00c", "patch": "@@ -45,41 +45,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                    |             clobber_abi\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:31:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:33:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:35:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:37:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:39:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:41:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "57702c37b7ce2ff29554eb5bc166d5b66fbca13d", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06333e092b9e811646d44b1deffbc3139484b00c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=06333e092b9e811646d44b1deffbc3139484b00c", "patch": "@@ -266,23 +266,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:108:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:110:30"}]}