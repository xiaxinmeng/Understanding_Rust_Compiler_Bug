{"sha": "d461555e443a07bc75564b8322dc461efe7cea7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjE1NTVlNDQzYTA3YmM3NTU2NGI4MzIyZGM0NjFlZmU3Y2VhN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-02T14:42:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-02T14:42:11Z"}, "message": "Auto merge of #61460 - Centril:rollup-8txhjx4, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #61380 (Fix some issues with `unwrap_usize` instead of `assert_usize`)\n - #61423 (codegen: change `$6d$` to `$u6d$`)\n - #61438 (Point at individual type args on arg count mismatch)\n - #61441 (Tweak wording when encountering `fn` call in pattern)\n - #61451 (Fix missing semicolon in doc)\n - #61458 (Fix typo in AsRef doc)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "142116ba2b27c046e6b5bbb8306d620d1ace9d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142116ba2b27c046e6b5bbb8306d620d1ace9d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d461555e443a07bc75564b8322dc461efe7cea7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d461555e443a07bc75564b8322dc461efe7cea7c", "html_url": "https://github.com/rust-lang/rust/commit/d461555e443a07bc75564b8322dc461efe7cea7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d461555e443a07bc75564b8322dc461efe7cea7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c7bb8b0d9d3c5149c8ad12b59604ccb57e8accc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7bb8b0d9d3c5149c8ad12b59604ccb57e8accc", "html_url": "https://github.com/rust-lang/rust/commit/4c7bb8b0d9d3c5149c8ad12b59604ccb57e8accc"}, {"sha": "aaf264b999ff4ed9f0b65757076ed3a8e64dc9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf264b999ff4ed9f0b65757076ed3a8e64dc9b9", "html_url": "https://github.com/rust-lang/rust/commit/aaf264b999ff4ed9f0b65757076ed3a8e64dc9b9"}], "stats": {"total": 405, "additions": 313, "deletions": 92}, "files": [{"sha": "6215bf5cd65723495fdc76d07808f55cd2b906bc", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -129,7 +129,7 @@ pub const fn identity<T>(x: T) -> T { x }\n /// # Examples\n ///\n /// By using trait bounds we can accept arguments of different types as long as they can be\n-/// converted a the specified type `T`.\n+/// converted to the specified type `T`.\n ///\n /// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n /// want to accept all references that can be converted to `&str` as an argument."}, {"sha": "75799a1903174270912f5babb8616412a8f7710f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -628,10 +628,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn get_generics_span(&self, id: DefId) -> Option<Span> {\n-        self.get_generics(id).map(|generics| generics.span).filter(|sp| *sp != DUMMY_SP)\n-    }\n-\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {\n         let hir_id = self.node_to_hir_id(id);"}, {"sha": "210c0c9225a3d9bb3afb74564c59d21b11595e6f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -16,7 +16,7 @@ use crate::util::nodemap::{NodeMap, FxHashSet};\n use crate::mir::mono::Linkage;\n \n use errors::FatalError;\n-use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n+use syntax_pos::{Span, DUMMY_SP, symbol::InternedString, MultiSpan};\n use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n@@ -625,6 +625,14 @@ impl Generics {\n         }\n         None\n     }\n+\n+    pub fn spans(&self) -> MultiSpan {\n+        if self.params.is_empty() {\n+            self.span.into()\n+        } else {\n+            self.params.iter().map(|p| p.span).collect::<Vec<Span>>().into()\n+        }\n+    }\n }\n \n /// Synthetic type parameters are converted to another form during lowering; this allows"}, {"sha": "95312d55b3be1c6125d7a40a8c4e7eb0e75fd26c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -914,8 +914,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             // already reported in the query\n-            ConstEvalFailure(_) => {\n-                self.tcx.sess.delay_span_bug(span, \"constant in type had an ignored error\");\n+            ConstEvalFailure(err) => {\n+                self.tcx.sess.delay_span_bug(\n+                    span,\n+                    &format!(\"constant in type had an ignored error: {:?}\", err),\n+                );\n                 return;\n             }\n "}, {"sha": "6415122dd3905877fb0268868f6fffbb7cfb35bf", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -549,8 +549,8 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     }\n                 }\n \n+                let count = count.assert_usize(tcx).ok_or(LayoutError::Unknown(ty))?;\n                 let element = self.layout_of(element)?;\n-                let count = count.unwrap_usize(tcx);\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n "}, {"sha": "42bd790ca2e9c47662da3e2a8662f0c858a67e55", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -342,9 +342,7 @@ fn fixed_vec_metadata(\n     let (size, align) = cx.size_and_align_of(array_or_slice_type);\n \n     let upper_bound = match array_or_slice_type.sty {\n-        ty::Array(_, len) => {\n-            len.unwrap_usize(cx.tcx) as c_longlong\n-        }\n+        ty::Array(_, len) => len.unwrap_usize(cx.tcx) as c_longlong,\n         _ => -1\n     };\n "}, {"sha": "6eaa22afce19ac60616909a25d3bf33322d74851", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -440,7 +440,7 @@ impl fmt::Write for SymbolPrinter<'_, '_> {\n                 '-' | ':' => self.path.temp_buf.push('.'),\n \n                 // Avoid crashing LLVM in certain (LTO-related) situations, see #60925.\n-                'm' if self.path.temp_buf.ends_with(\".llv\") => self.path.temp_buf.push_str(\"$6d$\"),\n+                'm' if self.path.temp_buf.ends_with(\".llv\") => self.path.temp_buf.push_str(\"$u6d$\"),\n \n                 // These are legal symbols\n                 'a'..='z' | 'A'..='Z' | '0'..='9' | '_' | '.' | '$' => self.path.temp_buf.push(c),"}, {"sha": "8aa27eef72a5e022efa1e534520245934713184a", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -332,8 +332,8 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n                 },\n                 (StaticKind::Promoted(promoted_1), StaticKind::Promoted(promoted_2)) => {\n                     if promoted_1 == promoted_2 {\n-                        if let ty::Array(_, size) = s1.ty.sty {\n-                            if size.unwrap_usize(tcx) == 0 {\n+                        if let ty::Array(_, len) = s1.ty.sty {\n+                            if let Some(0) = len.assert_usize(tcx) {\n                                 // Ignore conflicts with promoted [T; 0].\n                                 debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n                                 return Overlap::Disjoint;"}, {"sha": "fe94181047fcd3a5b76b3940de3dc4e20dbbb4fc", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -316,8 +316,9 @@ impl Qualif for HasMutInterior {\n                     } else if let ty::Array(_, len) = ty.sty {\n                         // FIXME(eddyb) the `cx.mode == Mode::Fn` condition\n                         // seems unnecessary, given that this is merely a ZST.\n-                        if !(len.unwrap_usize(cx.tcx) == 0 && cx.mode == Mode::Fn) {\n-                            return true;\n+                        match len.assert_usize(cx.tcx) {\n+                            Some(0) if cx.mode == Mode::Fn => {},\n+                            _ => return true,\n                         }\n                     } else {\n                         return true;"}, {"sha": "9607427baa9ec4d96e3c4b0198329458fbc61d52", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -400,27 +400,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::Array(inner_ty, size) => {\n-                        let size = size.unwrap_usize(tcx);\n-                        let min_len = before.len() as u64 + after.len() as u64;\n-                        if slice.is_none() {\n-                            if min_len != size {\n-                                struct_span_err!(\n-                                    tcx.sess, pat.span, E0527,\n-                                    \"pattern requires {} elements but array has {}\",\n-                                    min_len, size)\n-                                    .span_label(pat.span, format!(\"expected {} elements\", size))\n+                        if let Some(size) = size.assert_usize(tcx) {\n+                            let min_len = before.len() as u64 + after.len() as u64;\n+                            if slice.is_none() {\n+                                if min_len != size {\n+                                    struct_span_err!(\n+                                        tcx.sess, pat.span, E0527,\n+                                        \"pattern requires {} elements but array has {}\",\n+                                        min_len, size)\n+                                        .span_label(pat.span, format!(\"expected {} elements\", size))\n+                                        .emit();\n+                                }\n+                                (inner_ty, tcx.types.err)\n+                            } else if let Some(rest) = size.checked_sub(min_len) {\n+                                (inner_ty, tcx.mk_array(inner_ty, rest))\n+                            } else {\n+                                struct_span_err!(tcx.sess, pat.span, E0528,\n+                                        \"pattern requires at least {} elements but array has {}\",\n+                                        min_len, size)\n+                                    .span_label(pat.span,\n+                                        format!(\"pattern cannot match array of {} elements\", size))\n                                     .emit();\n+                                (inner_ty, tcx.types.err)\n                             }\n-                            (inner_ty, tcx.types.err)\n-                        } else if let Some(rest) = size.checked_sub(min_len) {\n-                            (inner_ty, tcx.mk_array(inner_ty, rest))\n                         } else {\n-                            struct_span_err!(tcx.sess, pat.span, E0528,\n-                                    \"pattern requires at least {} elements but array has {}\",\n-                                    min_len, size)\n-                                .span_label(pat.span,\n-                                    format!(\"pattern cannot match array of {} elements\", size))\n-                                .emit();\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                pat.span,\n+                                E0730,\n+                                \"cannot pattern-match on an array without a fixed length\",\n+                            ).emit();\n                             (inner_ty, tcx.types.err)\n                         }\n                     }\n@@ -1080,8 +1089,18 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             let msg = format!(\"expected tuple struct/variant, found {} `{}`\",\n                               res.descr(),\n                               hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)));\n-            struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg)\n-                .span_label(pat.span, \"not a tuple variant or struct\").emit();\n+            let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n+            match (res, &pat.node) {\n+                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::Method, _), _) => {\n+                    err.span_label(pat.span, \"`fn` calls are not allowed in patterns\");\n+                    err.help(\"for more information, visit \\\n+                              https://doc.rust-lang.org/book/ch18-00-patterns.html\");\n+                }\n+                _ => {\n+                    err.span_label(pat.span, \"not a tuple variant or struct\");\n+                }\n+            }\n+            err.emit();\n             on_error();\n         };\n "}, {"sha": "b4548ac70911e8224afbf1272d92e66dd3ecfdef", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -385,7 +385,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n         let def_span = tcx.sess.source_map().def_span(span);\n-        let span = tcx.hir().get_generics_span(impl_m.def_id).unwrap_or(def_span);\n+        let span = tcx.hir().get_generics(impl_m.def_id).map(|g| g.span).unwrap_or(def_span);\n         let mut err = struct_span_err!(\n             tcx.sess,\n             span,\n@@ -396,7 +396,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         err.span_label(span, \"lifetimes do not match method in trait\");\n         if let Some(sp) = tcx.hir().span_if_local(trait_m.def_id) {\n             let def_sp = tcx.sess.source_map().def_span(sp);\n-            let sp = tcx.hir().get_generics_span(trait_m.def_id).unwrap_or(def_sp);\n+            let sp = tcx.hir().get_generics(trait_m.def_id).map(|g| g.span).unwrap_or(def_sp);\n             err.span_label(sp, \"lifetimes in impl do not match this method in trait\");\n         }\n         err.emit();\n@@ -583,7 +583,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn compare_number_of_generics<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     impl_: &ty::AssocItem,\n-    impl_span: Span,\n+    _impl_span: Span,\n     trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n ) -> Result<(), ErrorReported> {\n@@ -600,17 +600,44 @@ fn compare_number_of_generics<'a, 'tcx>(\n         if impl_count != trait_count {\n             err_occurred = true;\n \n-            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n-            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n-            let span = if impl_item.generics.params.is_empty()\n-                || impl_item.generics.span.is_dummy() { // argument position impl Trait (#55374)\n-                impl_span\n+            let (\n+                trait_spans,\n+                impl_trait_spans,\n+            ) = if let Some(trait_hir_id) = tcx.hir().as_local_hir_id(trait_.def_id) {\n+                let trait_item = tcx.hir().expect_trait_item(trait_hir_id);\n+                if trait_item.generics.params.is_empty() {\n+                    (Some(vec![trait_item.generics.span]), vec![])\n+                } else {\n+                    let arg_spans: Vec<Span> = trait_item.generics.params.iter()\n+                        .map(|p| p.span)\n+                        .collect();\n+                    let impl_trait_spans: Vec<Span> = trait_item.generics.params.iter()\n+                        .filter_map(|p| match p.kind {\n+                            GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+                            } => Some(p.span),\n+                            _ => None,\n+                        }).collect();\n+                    (Some(arg_spans), impl_trait_spans)\n+                }\n             } else {\n-                impl_item.generics.span\n+                (trait_span.map(|s| vec![s]), vec![])\n             };\n \n+            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n+            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n+            let impl_item_impl_trait_spans: Vec<Span> = impl_item.generics.params.iter()\n+                .filter_map(|p| match p.kind {\n+                    GenericParamKind::Type {\n+                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+                    } => Some(p.span),\n+                    _ => None,\n+                }).collect();\n+            let spans = impl_item.generics.spans();\n+            let span = spans.primary_span();\n+\n             let mut err = tcx.sess.struct_span_err_with_code(\n-                span,\n+                spans,\n                 &format!(\n                     \"method `{}` has {} {kind} parameter{} but its trait \\\n                      declaration has {} {kind} parameter{}\",\n@@ -626,22 +653,36 @@ fn compare_number_of_generics<'a, 'tcx>(\n \n             let mut suffix = None;\n \n-            if let Some(span) = trait_span {\n-                err.span_label(\n-                    span,\n-                    format!(\"expected {} {} parameter{}\", trait_count, kind,\n-                        if trait_count != 1 { \"s\" } else { \"\" })\n-                );\n+            if let Some(spans) = trait_spans {\n+                let mut spans = spans.iter();\n+                if let Some(span) = spans.next() {\n+                    err.span_label(*span, format!(\n+                        \"expected {} {} parameter{}\",\n+                        trait_count,\n+                        kind,\n+                        if trait_count != 1 { \"s\" } else { \"\" },\n+                    ));\n+                }\n+                for span in spans {\n+                    err.span_label(*span, \"\");\n+                }\n             } else {\n                 suffix = Some(format!(\", expected {}\", trait_count));\n             }\n \n-            err.span_label(\n-                span,\n-                format!(\"found {} {} parameter{}{}\", impl_count, kind,\n+            if let Some(span) = span {\n+                err.span_label(span, format!(\n+                    \"found {} {} parameter{}{}\",\n+                    impl_count,\n+                    kind,\n                     if impl_count != 1 { \"s\" } else { \"\" },\n-                    suffix.unwrap_or_else(|| String::new())),\n-            );\n+                    suffix.unwrap_or_else(|| String::new()),\n+                ));\n+            }\n+\n+            for span in impl_trait_spans.iter().chain(impl_item_impl_trait_spans.iter()) {\n+                err.span_label(*span, \"`impl Trait` introduces an implicit type parameter\");\n+            }\n \n             err.emit();\n         }"}, {"sha": "b5a50f43875816debe1ef11b32b13a456dcc7cd1", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -4648,6 +4648,38 @@ fn make_recursive_type() -> impl Sized {\n ```\n \"##,\n \n+E0730: r##\"\n+An array without a fixed length was pattern-matched.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0730\n+#![feature(const_generics)]\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2, 3] => true, // error: cannot pattern-match on an\n+                           //        array without a fixed length\n+        _ => false\n+    }\n+}\n+```\n+\n+Ensure that the pattern is consistent with the size of the matched\n+array. Additional elements can be matched with `..`:\n+\n+```\n+#![feature(slice_patterns)]\n+\n+let r = &[1, 2, 3, 4];\n+match r {\n+    &[a, b, ..] => { // ok!\n+        println!(\"a={}, b={}\", a, b);\n+    }\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "ef7179f0b6f90ae068dd0f67715c06ee40bf3532", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -405,7 +405,7 @@ mod builtin {\n     ///\n     /// ```compile_fail\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n-    /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\")\n+    /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\");\n     /// ```\n     ///\n     /// [`panic!`]: ../std/macro.panic.html"}, {"sha": "7bc95ad03693880920f7481ace84b5d9b08fb33a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -5050,21 +5050,22 @@ impl<'a> Parser<'a> {\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     fn parse_generics(&mut self) -> PResult<'a, ast::Generics> {\n         let span_lo = self.span;\n-        if self.eat_lt() {\n+        let (params, span) = if self.eat_lt() {\n             let params = self.parse_generic_params()?;\n             self.expect_gt()?;\n-            Ok(ast::Generics {\n-                params,\n-                where_clause: WhereClause {\n-                    id: ast::DUMMY_NODE_ID,\n-                    predicates: Vec::new(),\n-                    span: DUMMY_SP,\n-                },\n-                span: span_lo.to(self.prev_span),\n-            })\n+            (params, span_lo.to(self.prev_span))\n         } else {\n-            Ok(ast::Generics::default())\n-        }\n+            (vec![], self.prev_span.between(self.span))\n+        };\n+        Ok(ast::Generics {\n+            params,\n+            where_clause: WhereClause {\n+                id: ast::DUMMY_NODE_ID,\n+                predicates: Vec::new(),\n+                span: DUMMY_SP,\n+            },\n+            span,\n+        })\n     }\n \n     /// Parses generic args (within a path segment) with recovery for extra leading angle brackets."}, {"sha": "4c7c0d1a0dfa514f5beea8594406e3ed5e0d70b3", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -36,13 +36,13 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |                        ^^\n \n error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:20\n    |\n LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n    |                    ---------------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                    ^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:48:5"}, {"sha": "3ccf38e5619775499121eb5669eda91826931bb9", "filename": "src/test/ui/const-generics/issue-61422.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+use std::mem;\n+\n+fn foo<const SIZE: usize>() {\n+    let arr: [u8; SIZE] = unsafe {\n+        let mut array: [u8; SIZE] = mem::uninitialized();\n+        array\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "4cb76ec4fe18c61680adc1b51dea377f2da2009c", "filename": "src/test/ui/const-generics/issue-61422.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61422.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "f930fb879632502ef3d4a38602f9761f19552ceb", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+use std::ops::AddAssign;\n+\n+fn inc<T: AddAssign + Clone, const N: usize>(v: &mut [T; N]) -> &mut [T; N] {\n+    for x in v.iter_mut() {\n+        *x += x.clone();\n+    }\n+    v\n+}\n+\n+fn main() {\n+    let mut v = [1, 2, 3];\n+    inc(&mut v);\n+    assert_eq!(v, [2, 4, 6]);\n+}"}, {"sha": "261d3578a11ac7e2306b5349318db6cefd3e56f2", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/mut-ref-const-param-array.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "794048174f903ef10b09c9c21911c1ed1b488c8f", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+use std::mem::MaybeUninit;\n+\n+#[repr(transparent)]\n+pub struct MaybeUninitWrapper<const N: usize>(MaybeUninit<[u64; N]>);\n+\n+fn main() {}"}, {"sha": "661bbd113bc0db965a1a1155269b6e8f9e178842", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/transparent-maybeunit-array-wrapper.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "3dd910019bfd08337c6a9db1f118e8e0e5488643", "filename": "src/test/ui/error-codes/E0049.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -8,5 +8,15 @@ impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n }\n \n+trait Fuzz {\n+    fn fuzz<A: Default, B>(x: A, y: B) -> Self;\n+}\n+\n+struct Baz;\n+\n+impl Fuzz for Baz {\n+    fn fuzz(x: bool, y: bool) -> Self { Baz } //~ ERROR E0049\n+}\n+\n fn main() {\n }"}, {"sha": "c0cd31faa90d60056cc31fe6d5a0446fe7b28e43", "filename": "src/test/ui/error-codes/E0049.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -1,12 +1,23 @@\n error[E0049]: method `foo` has 0 type parameters but its trait declaration has 1 type parameter\n-  --> $DIR/E0049.rs:8:5\n+  --> $DIR/E0049.rs:8:11\n    |\n LL |     fn foo<T: Default>(x: T) -> Self;\n-   |     --------------------------------- expected 1 type parameter\n+   |            - expected 1 type parameter\n ...\n LL |     fn foo(x: bool) -> Self { Bar }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ found 0 type parameters\n+   |           ^ found 0 type parameters\n \n-error: aborting due to previous error\n+error[E0049]: method `fuzz` has 0 type parameters but its trait declaration has 2 type parameters\n+  --> $DIR/E0049.rs:18:12\n+   |\n+LL |     fn fuzz<A: Default, B>(x: A, y: B) -> Self;\n+   |             -           -\n+   |             |\n+   |             expected 2 type parameters\n+...\n+LL |     fn fuzz(x: bool, y: bool) -> Self { Baz }\n+   |            ^ found 0 type parameters\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0049`."}, {"sha": "e5048d6e6e320d0d12d16e87893c16ed4084e7d7", "filename": "src/test/ui/error-codes/E0730.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2, 3] => true, //~ ERROR cannot pattern-match on an array without a fixed length\n+        _ => false\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f9281262bb71b9b98ce75c0f16ec74d7260d73d8", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/E0730.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0730]: cannot pattern-match on an array without a fixed length\n+  --> $DIR/E0730.rs:6:9\n+   |\n+LL |         [1, 2, 3] => true,\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0730`."}, {"sha": "0bb24365ef42b49d8738a0e057e32b4c61bdd18b", "filename": "src/test/ui/fn-in-pat.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -2,7 +2,9 @@ error[E0164]: expected tuple struct/variant, found method `<A>::new`\n   --> $DIR/fn-in-pat.rs:11:9\n    |\n LL |         A::new() => (),\n-   |         ^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^ `fn` calls are not allowed in patterns\n+   |\n+   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n error: aborting due to previous error\n "}, {"sha": "140f19f1ff7746f0ed898c405acb7bd5564d4b8d", "filename": "src/test/ui/issues/issue-36708.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -1,8 +1,8 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/issue-36708.rs:8:11\n+  --> $DIR/issue-36708.rs:8:12\n    |\n LL |     fn foo<T>() {}\n-   |           ^^^ found 1 type parameter, expected 0\n+   |            ^ found 1 type parameter, expected 0\n \n error: aborting due to previous error\n "}, {"sha": "3928a3cd532015e1bd8da5f6ff7a3ca4e81cb580", "filename": "src/test/ui/issues/issue-55587.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -2,7 +2,9 @@ error[E0164]: expected tuple struct/variant, found method `<Path>::new`\n   --> $DIR/issue-55587.rs:4:9\n    |\n LL |     let Path::new();\n-   |         ^^^^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^^^^ `fn` calls are not allowed in patterns\n+   |\n+   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n error: aborting due to previous error\n "}, {"sha": "ecfa5c69e2f038ed19bbc6264e017d0d839c4739", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -10,6 +10,7 @@ impl Foo for u32 {\n     fn foo(&self, t: impl Clone) {}\n //~^ ERROR method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n //~| NOTE found 1 type parameter\n+//~| NOTE `impl Trait` introduces an implicit type parameter\n }\n \n fn main() {}"}, {"sha": "30322f88cca42aa6020b8d84c665b06d86ad508e", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -1,11 +1,14 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:5\n+  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:22\n    |\n LL |     fn foo(&self, t: Self::T);\n-   |     -------------------------- expected 0 type parameters\n+   |           - expected 0 type parameters\n ...\n LL |     fn foo(&self, t: impl Clone) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found 1 type parameter\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      found 1 type parameter\n+   |                      `impl Trait` introduces an implicit type parameter\n \n error: aborting due to previous error\n "}, {"sha": "bd918428351b9fbdb7c0acf6f0288792dca23cf1", "filename": "src/test/ui/match/match-fn-call.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -2,13 +2,17 @@ error[E0164]: expected tuple struct/variant, found method `<Path>::new`\n   --> $DIR/match-fn-call.rs:6:9\n    |\n LL |         Path::new(\"foo\") => println!(\"foo\"),\n-   |         ^^^^^^^^^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n+   |\n+   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n error[E0164]: expected tuple struct/variant, found method `<Path>::new`\n   --> $DIR/match-fn-call.rs:8:9\n    |\n LL |         Path::new(\"bar\") => println!(\"bar\"),\n-   |         ^^^^^^^^^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n+   |\n+   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fcd2ede31b69b1279d798b61e8da2a5518d1dce", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -1,16 +1,16 @@\n-error: symbol-name(_ZN11issue_609253foo36Foo$LT$issue_60925..llv$6d$..Foo$GT$3foo17h059a991a004536adE)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h059a991a004536adE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo::h059a991a004536ad)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llv$u6d$..Foo$GT$::foo::h059a991a004536ad)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo)\n+error: demangling-alt(issue_60925::foo::Foo<issue_60925::llv$u6d$..Foo$GT$::foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "89de15cc0f3e47d23f0f21eb66a7757606ce7408", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461555e443a07bc75564b8322dc461efe7cea7c/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=d461555e443a07bc75564b8322dc461efe7cea7c", "patch": "@@ -19,9 +19,9 @@ mod foo {\n \n     impl Foo<::llvm::Foo> {\n         #[rustc_symbol_name]\n-        //[legacy]~^ ERROR symbol-name(_ZN11issue_609253foo36Foo$LT$issue_60925..llv$6d$..Foo$GT$3foo\n-        //[legacy]~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo\n-        //[legacy]~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo)\n+        //[legacy]~^ ERROR symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo\n+        //[legacy]~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llv$u6d$..Foo$GT$::foo\n+        //[legacy]~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llv$u6d$..Foo$GT$::foo)\n          //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n             //[v0]~| ERROR demangling(<issue_60925[317d481089b8c8fe]::foo::Foo<issue_60925[317d481089b8c8fe]::llvm::Foo>>::foo)\n             //[v0]~| ERROR demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)"}]}