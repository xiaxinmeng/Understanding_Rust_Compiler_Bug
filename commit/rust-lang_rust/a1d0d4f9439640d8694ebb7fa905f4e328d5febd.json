{"sha": "a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDBkNGY5NDM5NjQwZDg2OTRlYmI3ZmE5MDVmNGUzMjhkNWZlYmQ=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-06T21:44:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "Removing LLVM content from CommonMethods -> ConstMethods", "tree": {"sha": "447f51146f100f004852565c52e10e7b3eabb260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/447f51146f100f004852565c52e10e7b3eabb260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "html_url": "https://github.com/rust-lang/rust/commit/a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e224f063e8b7ea16302d0b048b9272dfe8465734", "url": "https://api.github.com/repos/rust-lang/rust/commits/e224f063e8b7ea16302d0b048b9272dfe8465734", "html_url": "https://github.com/rust-lang/rust/commit/e224f063e8b7ea16302d0b048b9272dfe8465734"}], "stats": {"total": 179, "additions": 55, "deletions": 124}, "files": [{"sha": "7de657a49186599f639b3b246e17ea6929a1590e", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -18,7 +18,7 @@ use type_::Type;\n use type_of::{LayoutLlvmExt, PointerKind};\n use value::Value;\n \n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TyLayout, Abi as LayoutAbi};\n use rustc::ty::{self, Ty};"}, {"sha": "ecd371e82468fe7607590fd01026e889499c07a1", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -15,7 +15,7 @@ use builder::Builder;\n use value::Value;\n \n use rustc::hir;\n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use mir::place::PlaceRef;\n use mir::operand::OperandValue;"}, {"sha": "8972a7e8f992356feb5f7cdc7ae0c6535dab9084", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -49,7 +49,6 @@ use context::{is_pie_binary, get_reloc_model};\n use common;\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n-use value::Value;\n use std::marker::PhantomData;\n \n use std::any::Any;\n@@ -428,24 +427,6 @@ impl CodegenContext<'ll> {\n     }\n }\n \n-\n-impl CodegenContext<'ll> {\n-    fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n-        common::val_ty(v)\n-    }\n-\n-    fn const_bytes_in_context(&self, llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n-        common::const_bytes_in_context(llcx, bytes)\n-    }\n-\n-    pub fn type_ptr_to(&self, ty: &'ll Type) -> &'ll Type {\n-        unsafe {\n-            llvm::LLVMPointerType(ty, 0)\n-        }\n-    }\n-}\n-\n-\n pub struct DiagnosticHandlers<'a> {\n     data: *mut (&'a CodegenContext<'a>, &'a Handler),\n     llcx: &'a llvm::Context,\n@@ -907,10 +888,10 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext,\n                         llcx: &llvm::Context,\n                         llmod: &llvm::Module,\n                         bitcode: Option<&[u8]>) {\n-    let llconst = cgcx.const_bytes_in_context(llcx, bitcode.unwrap_or(&[]));\n+    let llconst = common::bytes_in_context(llcx, bitcode.unwrap_or(&[]));\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n-        cgcx.val_ty(llconst),\n+        common::val_ty(llconst),\n         \"rustc.embedded.module\\0\".as_ptr() as *const _,\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n@@ -927,10 +908,10 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext,\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n     llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n \n-    let llconst = cgcx.const_bytes_in_context(llcx, &[]);\n+    let llconst = common::bytes_in_context(llcx, &[]);\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n-        cgcx.val_ty(llconst),\n+        common::val_ty(llconst),\n         \"rustc.embedded.cmdline\\0\".as_ptr() as *const _,\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n@@ -2598,7 +2579,7 @@ fn create_msvc_imps(cgcx: &CodegenContext, llcx: &llvm::Context, llmod: &llvm::M\n         \"\\x01__imp_\"\n     };\n     unsafe {\n-        let i8p_ty = Type::i8p_llcx(cgcx, llcx);\n+        let i8p_ty = Type::i8p_llcx(llcx);\n         let globals = base::iter_globals(llmod)\n             .filter(|&val| {\n                 llvm::LLVMRustGetLinkage(val) == llvm::Linkage::ExternalLinkage &&"}, {"sha": "6257d32527f3adde0b19af95542a2e37bd03660c", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -54,7 +54,7 @@ use attributes;\n use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n-use common::{IntPredicate, RealPredicate};\n+use common::{self, IntPredicate, RealPredicate};\n use consts;\n use context::CodegenCx;\n use debuginfo;\n@@ -74,7 +74,7 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use interfaces::{BuilderMethods, CommonMethods, CommonWriteMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use std::any::Any;\n use std::cmp;\n@@ -649,12 +649,12 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     DeflateEncoder::new(&mut compressed, Compression::fast())\n         .write_all(&metadata.raw_data).unwrap();\n \n-    let llmeta = llvm_module.const_bytes_in_context(metadata_llcx, &compressed);\n-    let llconst = llvm_module.const_struct_in_context(metadata_llcx, &[llmeta], false);\n+    let llmeta = common::bytes_in_context(metadata_llcx, &compressed);\n+    let llconst = common::struct_in_context(metadata_llcx, &[llmeta], false);\n     let name = exported_symbols::metadata_symbol_name(tcx);\n     let buf = CString::new(name).unwrap();\n     let llglobal = unsafe {\n-        llvm::LLVMAddGlobal(metadata_llmod, llvm_module.val_ty(llconst), buf.as_ptr())\n+        llvm::LLVMAddGlobal(metadata_llmod, common::val_ty(llconst), buf.as_ptr())\n     };\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);"}, {"sha": "10165c20860de3412ae9ff8febfa82f8ff8eeff8", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -19,7 +19,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::layout::{Align, Size};\n use rustc::session::{config, Session};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use interfaces::{BuilderMethods, Backend, CommonMethods, CommonWriteMethods, TypeMethods};\n+use interfaces::{BuilderMethods, Backend, ConstMethods, TypeMethods};\n use syntax;\n \n use std::borrow::Cow;"}, {"sha": "0d93bd0ce9c0f8e1c8528940b39aa6527f74332b", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -22,7 +22,7 @@ use llvm;\n use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use interfaces::CommonWriteMethods;\n+use interfaces::TypeMethods;\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};"}, {"sha": "6783807e5635eaef159448e4e323b0519a0a2523", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -24,7 +24,7 @@ use declare;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use interfaces::{Backend, CommonMethods, CommonWriteMethods, TypeMethods};\n+use interfaces::{Backend, ConstMethods, TypeMethods};\n \n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n@@ -201,7 +201,7 @@ impl Backend for CodegenCx<'ll, 'tcx> {\n     type Context = &'ll llvm::Context;\n }\n \n-impl<'ll, 'tcx: 'll> CommonMethods for CodegenCx<'ll, 'tcx> {\n+impl<'ll, 'tcx: 'll> ConstMethods for CodegenCx<'ll, 'tcx> {\n \n     // LLVM constant constructors.\n     fn const_null(&self, t: &'ll Type) -> &'ll Value {\n@@ -319,7 +319,7 @@ impl<'ll, 'tcx: 'll> CommonMethods for CodegenCx<'ll, 'tcx> {\n         elts: &[&'ll Value],\n         packed: bool\n     ) -> &'ll Value {\n-        &self.const_struct_in_context(&self.llcx, elts, packed)\n+        struct_in_context(&self.llcx, elts, packed)\n     }\n \n     fn const_array(&self, ty: &'ll Type, elts: &[&'ll Value]) -> &'ll Value {\n@@ -335,7 +335,7 @@ impl<'ll, 'tcx: 'll> CommonMethods for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn const_bytes(&self, bytes: &[u8]) -> &'ll Value {\n-        &self.const_bytes_in_context(&self.llcx, bytes)\n+        bytes_in_context(&self.llcx, bytes)\n     }\n \n     fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n@@ -406,14 +406,14 @@ pub fn val_ty(v: &'ll Value) -> &'ll Type {\n     }\n }\n \n-pub fn const_bytes_in_context(llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n+pub fn bytes_in_context(llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n     unsafe {\n         let ptr = bytes.as_ptr() as *const c_char;\n         return llvm::LLVMConstStringInContext(llcx, ptr, bytes.len() as c_uint, True);\n     }\n }\n \n-pub fn const_struct_in_context(\n+pub fn struct_in_context(\n     llcx: &'a llvm::Context,\n     elts: &[&'a Value],\n     packed: bool,\n@@ -425,26 +425,6 @@ pub fn const_struct_in_context(\n     }\n }\n \n-impl<'ll, 'tcx: 'll> CommonWriteMethods for CodegenCx<'ll, 'tcx> {\n-    fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n-        val_ty(v)\n-    }\n-\n-    fn const_bytes_in_context(&self, llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n-        const_bytes_in_context(llcx, bytes)\n-    }\n-\n-    fn const_struct_in_context(\n-        &self,\n-        llcx: &'a llvm::Context,\n-        elts: &[&'a Value],\n-        packed: bool,\n-    ) -> &'a Value {\n-        const_struct_in_context(llcx, elts, packed)\n-    }\n-}\n-\n-\n #[inline]\n fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)"}, {"sha": "72cb696c54cdb1a446501d3d4954736665b6b7dd", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -24,7 +24,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n use rustc::ty::{self, Ty};\n-use interfaces::{CommonWriteMethods, TypeMethods};\n+use interfaces::TypeMethods;\n \n use rustc::ty::layout::{Align, LayoutOf};\n "}, {"sha": "45c692c6250df6041c31b11dbcbf40effda0a546", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -17,7 +17,7 @@ use builder::Builder;\n use declare;\n use rustc::session::config::DebugInfo;\n use value::Value;\n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use syntax::attr;\n "}, {"sha": "5581b926ccd048fbf75a730077c53fd0a26b9de9", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -18,7 +18,7 @@ use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n use super::{CrateDebugContext};\n use abi;\n-use interfaces::CommonMethods;\n+use interfaces::ConstMethods;\n use value::Value;\n \n use llvm;"}, {"sha": "919d80a9d6b08145bffb374f4ebdbf7030cdcff7", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -20,7 +20,7 @@ use meth;\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n use value::Value;\n-use interfaces::{BuilderMethods, CommonMethods};\n+use interfaces::{BuilderMethods, ConstMethods};\n \n pub fn size_and_align_of_dst(\n     bx: &Builder<'_, 'll, 'tcx>,"}, {"sha": "696d88b3dbcd5720f235c4dfe17dc87524f287c6", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -13,7 +13,7 @@ use std::fmt::Debug;\n pub trait Backend {\n     type Value: Debug + PartialEq;\n     type BasicBlock;\n-    type Type : Debug + PartialEq;\n+    type Type: Debug + PartialEq;\n     type TypeKind;\n     type Context;\n }"}, {"sha": "2366fefd941c7203728b18651217f8059824f284", "filename": "src/librustc_codegen_llvm/interfaces/consts.rs", "status": "renamed", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fconsts.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -11,7 +11,7 @@\n use super::Backend;\n use syntax::symbol::LocalInternedString;\n \n-pub trait CommonMethods: Backend + CommonWriteMethods {\n+pub trait ConstMethods: Backend {\n     // Constant constructors\n     fn const_null(&self, t: Self::Type) -> Self::Value;\n     fn const_undef(&self, t: Self::Type) -> Self::Value;\n@@ -52,14 +52,3 @@ pub trait CommonMethods: Backend + CommonWriteMethods {\n     fn is_const_integral(&self, v: Self::Value) -> bool;\n     fn is_const_real(&self, v: Self::Value) -> bool;\n }\n-\n-pub trait CommonWriteMethods: Backend {\n-        fn val_ty(&self, v: Self::Value) -> Self::Type;\n-        fn const_bytes_in_context(&self, llcx: Self::Context, bytes: &[u8]) -> Self::Value;\n-        fn const_struct_in_context(\n-            &self,\n-            llcx: Self::Context,\n-            elts: &[Self::Value],\n-            packed: bool,\n-        ) -> Self::Value;\n-}", "previous_filename": "src/librustc_codegen_llvm/interfaces/common.rs"}, {"sha": "93c46aed4acbe081f3a82eceb636724cf976f1e1", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -10,10 +10,10 @@\n \n mod builder;\n mod backend;\n-mod common;\n+mod consts;\n mod type_;\n \n pub use self::builder::BuilderMethods;\n pub use self::backend::Backend;\n-pub use self::common::{CommonMethods, CommonWriteMethods};\n+pub use self::consts::ConstMethods;\n pub use self::type_::TypeMethods;"}, {"sha": "b2867985c8d83d84917fcf49231913f2116c5072", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -10,7 +10,7 @@\n \n use super::backend::Backend;\n \n-pub trait TypeMethods : Backend {\n+pub trait TypeMethods: Backend {\n     fn type_void(&self) -> Self::Type;\n     fn type_metadata(&self) -> Self::Type;\n     fn type_i1(&self) -> Self::Type;\n@@ -38,4 +38,6 @@ pub trait TypeMethods : Backend {\n     fn func_params_types(&self, ty: Self::Type) -> Vec<Self::Type>;\n     fn float_width(&self, ty: Self::Type) -> usize;\n     fn int_width(&self, ty: Self::Type) -> u64;\n+\n+    fn val_ty(&self, v: Self::Value) -> Self::Type;\n }"}, {"sha": "f9e31e6145c11d0d14df391add965951a37a6d3e", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -32,7 +32,7 @@ use syntax::symbol::Symbol;\n use builder::Builder;\n use value::Value;\n \n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use rustc::session::Session;\n use syntax_pos::Span;"}, {"sha": "f8f50326f0e3912e6859fa182a6da43cacf44d11", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -68,9 +68,6 @@ extern crate tempfile;\n extern crate memmap;\n \n use back::bytecode::RLIB_BYTECODE_EXTENSION;\n-use interfaces::{Backend, CommonWriteMethods};\n-use value::Value;\n-use type_::Type;\n \n pub use llvm_util::target_features;\n use std::any::Any;\n@@ -326,14 +323,6 @@ struct ModuleLlvm<'ll> {\n     phantom: PhantomData<&'ll ()>\n }\n \n-impl<'ll> Backend for ModuleLlvm<'ll> {\n-    type Value = &'ll Value;\n-    type BasicBlock = &'ll llvm::BasicBlock;\n-    type Type = &'ll Type;\n-    type TypeKind = llvm::TypeKind;\n-    type Context = &'ll llvm::Context;\n-}\n-\n unsafe impl Send for ModuleLlvm<'ll> { }\n unsafe impl Sync for ModuleLlvm<'ll> { }\n \n@@ -359,25 +348,6 @@ impl ModuleLlvm<'ll> {\n     }\n }\n \n-impl CommonWriteMethods for ModuleLlvm<'ll> {\n-    fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n-        common::val_ty(v)\n-    }\n-\n-    fn const_bytes_in_context(&self, llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n-        common::const_bytes_in_context(llcx, bytes)\n-    }\n-\n-    fn const_struct_in_context(\n-        &self,\n-        llcx: &'a llvm::Context,\n-        elts: &[&'a Value],\n-        packed: bool,\n-    ) -> &'a Value {\n-        common::const_struct_in_context(llcx, elts, packed)\n-    }\n-}\n-\n impl Drop for ModuleLlvm<'ll> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "5cc106a2255534e8c57c3bf993a012f7cd1718ec", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -16,7 +16,7 @@ use consts;\n use monomorphize;\n use value::Value;\n \n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use rustc::ty::{self, Ty};\n use rustc::ty::layout::HasDataLayout;"}, {"sha": "5d7eab6d3bed63cdf4542b32434224189e6f5c16", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -26,7 +26,7 @@ use type_of::LayoutLlvmExt;\n use type_::Type;\n use value::Value;\n \n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use syntax::symbol::Symbol;\n use syntax_pos::Pos;"}, {"sha": "deb10b03ba5f368db93228bfdff59f7a635df1b4", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -25,7 +25,7 @@ use type_::Type;\n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n use value::Value;\n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use super::super::callee;\n use super::FunctionCx;"}, {"sha": "fd379de95ec0c137aa08c20f1b2af816c5fc4e84", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -24,7 +24,7 @@ use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebug\n use monomorphize::Instance;\n use abi::{ArgTypeExt, FnType, FnTypeExt, PassMode};\n use value::Value;\n-use interfaces::{BuilderMethods, CommonMethods};\n+use interfaces::{BuilderMethods, ConstMethods};\n \n use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n use syntax::symbol::keywords;"}, {"sha": "508ba263ce8afd3519de6c6b522866db7adc00d0", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -20,7 +20,7 @@ use value::Value;\n use type_of::LayoutLlvmExt;\n use glue;\n \n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use std::fmt;\n "}, {"sha": "aa4ecc1df89fd0d3d30d75ec8855bdc34766d6b4", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -22,7 +22,7 @@ use value::Value;\n use glue;\n use mir::constant::const_alloc_to_llvm;\n \n-use interfaces::{BuilderMethods, CommonMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "abd197bf4343d3dfd252437e7f1747ded315fbb6", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -26,7 +26,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n \n-use interfaces::{BuilderMethods, CommonMethods, CommonWriteMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "f34e725c3a4393d5fb066f58e7996408b191833d", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0d4f9439640d8694ebb7fa905f4e328d5febd/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "patch": "@@ -17,11 +17,12 @@ use llvm::{Bool, False, True, TypeKind};\n \n use context::CodegenCx;\n use interfaces::TypeMethods;\n+use value::Value;\n \n use syntax::ast;\n use rustc::ty::layout::{self, Align, Size};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use back::write;\n+use common;\n \n use std::fmt;\n \n@@ -188,9 +189,7 @@ impl TypeMethods for CodegenCx<'ll, 'tcx> {\n     fn type_ptr_to(&self, ty: &'ll Type) -> &'ll Type {\n         assert_ne!(self.type_kind(ty), TypeKind::Function,\n                    \"don't call ptr_to on function types, use ptr_to_llvm_type on FnType instead\");\n-        unsafe {\n-            llvm::LLVMPointerType(ty, 0)\n-        }\n+        ty.ptr_to()\n     }\n \n     fn element_type(&self, ty: &'ll Type) -> &'ll Type {\n@@ -216,7 +215,7 @@ impl TypeMethods for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn float_width(&self, ty : &'ll Type) -> usize {\n+    fn float_width(&self, ty: &'ll Type) -> usize {\n         match self.type_kind(ty) {\n             TypeKind::Float => 32,\n             TypeKind::Double => 64,\n@@ -232,6 +231,10 @@ impl TypeMethods for CodegenCx<'ll, 'tcx> {\n             llvm::LLVMGetIntTypeWidth(ty) as u64\n         }\n     }\n+\n+    fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n+        common::val_ty(v)\n+    }\n }\n \n impl Type {\n@@ -251,8 +254,14 @@ impl Type {\n         }\n     }\n \n-    pub fn i8p_llcx(cx : &write::CodegenContext<'ll>, llcx: &'ll llvm::Context) -> &'ll Type {\n-        cx.type_ptr_to(Type::i8_llcx(llcx))\n+    pub fn i8p_llcx(llcx: &'ll llvm::Context) -> &'ll Type {\n+        Type::i8_llcx(llcx).ptr_to()\n+    }\n+\n+    fn ptr_to(&self) -> &Type {\n+        unsafe {\n+            llvm::LLVMPointerType(&self, 0)\n+        }\n     }\n }\n "}]}