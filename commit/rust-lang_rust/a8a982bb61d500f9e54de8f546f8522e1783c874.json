{"sha": "a8a982bb61d500f9e54de8f546f8522e1783c874", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTk4MmJiNjFkNTAwZjllNTRkZThmNTQ2Zjg1MjJlMTc4M2M4NzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-10T21:34:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-19T14:34:43Z"}, "message": "treat local variables specially", "tree": {"sha": "c0598fea11172633100e7fc6adc20394ed5fe3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0598fea11172633100e7fc6adc20394ed5fe3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a982bb61d500f9e54de8f546f8522e1783c874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a982bb61d500f9e54de8f546f8522e1783c874", "html_url": "https://github.com/rust-lang/rust/commit/a8a982bb61d500f9e54de8f546f8522e1783c874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a982bb61d500f9e54de8f546f8522e1783c874/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8928de74394f320d1109da6731b12638a2167945", "url": "https://api.github.com/repos/rust-lang/rust/commits/8928de74394f320d1109da6731b12638a2167945", "html_url": "https://github.com/rust-lang/rust/commit/8928de74394f320d1109da6731b12638a2167945"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "75e9b5f2df022689d80a7b090e86ebc1c1590a8e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a8a982bb61d500f9e54de8f546f8522e1783c874/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a982bb61d500f9e54de8f546f8522e1783c874/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a8a982bb61d500f9e54de8f546f8522e1783c874", "patch": "@@ -798,12 +798,6 @@ enum LocalMutationIsAllowed {\n     No,\n }\n \n-struct AccessErrorsReported {\n-    mutability_error: bool,\n-    #[allow(dead_code)]\n-    conflict_error: bool,\n-}\n-\n #[derive(Copy, Clone)]\n enum InitializationRequiringAction {\n     Update,\n@@ -1072,7 +1066,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         kind: (ShallowOrDeep, ReadOrWrite),\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n-    ) -> AccessErrorsReported {\n+    ) {\n         let (sd, rw) = kind;\n \n         if let Activation(_, borrow_index) = rw {\n@@ -1082,10 +1076,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                      place: {:?} borrow_index: {:?}\",\n                     place_span.0, borrow_index\n                 );\n-                return AccessErrorsReported {\n-                    mutability_error: false,\n-                    conflict_error: true,\n-                };\n+                return;\n             }\n         }\n \n@@ -1097,10 +1088,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 \"access_place: suppressing error place_span=`{:?}` kind=`{:?}`\",\n                 place_span, kind\n             );\n-            return AccessErrorsReported {\n-                mutability_error: false,\n-                conflict_error: true,\n-            };\n+            return;\n         }\n \n         let mutability_error =\n@@ -1122,11 +1110,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             self.access_place_error_reported\n                 .insert((place_span.0.clone(), place_span.1));\n         }\n-\n-        AccessErrorsReported {\n-            mutability_error,\n-            conflict_error,\n-        }\n     }\n \n     fn check_access_for_conflict(\n@@ -1275,23 +1258,25 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-        let errors_reported = self.access_place(\n+        // Special case: you can assign a immutable local variable\n+        // (e.g., `x = ...`) so long as it has never been initialized\n+        // before (at this point in the flow).\n+        if let &Place::Local(local) = place_span.0 {\n+            if let Mutability::Not = self.mir.local_decls[local].mutability {\n+                // check for reassignments to immutable local variables\n+                self.check_if_reassignment_to_immutable_state(context, place_span, flow_state);\n+                return;\n+            }\n+        }\n+\n+        // Otherwise, use the normal access permission rules.\n+        self.access_place(\n             context,\n             place_span,\n             (kind, Write(WriteKind::Mutate)),\n-            // We want immutable upvars to cause an \"assignment to immutable var\"\n-            // error, not an \"reassignment of immutable var\" error, because the\n-            // latter can't find a good previous assignment span.\n-            //\n-            // There's probably a better way to do this.\n-            LocalMutationIsAllowed::ExceptUpvars,\n+            LocalMutationIsAllowed::No,\n             flow_state,\n         );\n-\n-        if !errors_reported.mutability_error {\n-            // check for reassignments to immutable local variables\n-            self.check_if_reassignment_to_immutable_state(context, place_span, flow_state);\n-        }\n     }\n \n     fn consume_rvalue("}]}