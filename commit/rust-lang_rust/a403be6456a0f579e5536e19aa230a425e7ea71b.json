{"sha": "a403be6456a0f579e5536e19aa230a425e7ea71b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MDNiZTY0NTZhMGY1NzllNTUzNmUxOWFhMjMwYTQyNWU3ZWE3MWI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2021-02-16T21:27:30Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2021-02-16T21:27:30Z"}, "message": "Remove Semantic Tokens flicker workaround\n\nhttps://github.com/microsoft/vscode-languageserver-node/issues/576 has been closed with\nthe latest vscode-languageclient release.", "tree": {"sha": "b7a24119c7eee3b39579ee62494f516e136df6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a24119c7eee3b39579ee62494f516e136df6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a403be6456a0f579e5536e19aa230a425e7ea71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a403be6456a0f579e5536e19aa230a425e7ea71b", "html_url": "https://github.com/rust-lang/rust/commit/a403be6456a0f579e5536e19aa230a425e7ea71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a403be6456a0f579e5536e19aa230a425e7ea71b/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13008c4d30968155fdac3a1bd383045f3dd89dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/13008c4d30968155fdac3a1bd383045f3dd89dc0", "html_url": "https://github.com/rust-lang/rust/commit/13008c4d30968155fdac3a1bd383045f3dd89dc0"}], "stats": {"total": 17, "additions": 0, "deletions": 17}, "files": [{"sha": "0771ca3b69a7cf2e2a442df1627973b59febef58", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a403be6456a0f579e5536e19aa230a425e7ea71b/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a403be6456a0f579e5536e19aa230a425e7ea71b/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=a403be6456a0f579e5536e19aa230a425e7ea71b", "patch": "@@ -2,7 +2,6 @@ import * as lc from 'vscode-languageclient/node';\n import * as vscode from 'vscode';\n import * as ra from '../src/lsp_ext';\n import * as Is from 'vscode-languageclient/lib/common/utils/is';\n-import { DocumentSemanticsTokensSignature, DocumentSemanticsTokensEditsSignature, DocumentRangeSemanticTokensSignature } from 'vscode-languageclient/lib/common/semanticTokens';\n import { assert } from './util';\n import { WorkspaceEdit } from 'vscode';\n \n@@ -24,13 +23,6 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n-// Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576\n-async function semanticHighlightingWorkaround<R, F extends (...args: any[]) => vscode.ProviderResult<R>>(next: F, ...args: Parameters<F>): Promise<R> {\n-    const res = await next(...args);\n-    if (res == null) throw new Error('busy');\n-    return res;\n-}\n-\n export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -57,15 +49,6 @@ export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel,\n         middleware: {\n-            provideDocumentSemanticTokens(document: vscode.TextDocument, token: vscode.CancellationToken, next: DocumentSemanticsTokensSignature): vscode.ProviderResult<vscode.SemanticTokens> {\n-                return semanticHighlightingWorkaround(next, document, token);\n-            },\n-            provideDocumentSemanticTokensEdits(document: vscode.TextDocument, previousResultId: string, token: vscode.CancellationToken, next: DocumentSemanticsTokensEditsSignature): vscode.ProviderResult<vscode.SemanticTokensEdits | vscode.SemanticTokens> {\n-                return semanticHighlightingWorkaround(next, document, previousResultId, token);\n-            },\n-            provideDocumentRangeSemanticTokens(document: vscode.TextDocument, range: vscode.Range, token: vscode.CancellationToken, next: DocumentRangeSemanticTokensSignature): vscode.ProviderResult<vscode.SemanticTokens> {\n-                return semanticHighlightingWorkaround(next, document, range, token);\n-            },\n             async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n                 return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n                     (result) => {"}]}