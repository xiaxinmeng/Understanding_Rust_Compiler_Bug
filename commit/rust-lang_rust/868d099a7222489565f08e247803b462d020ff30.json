{"sha": "868d099a7222489565f08e247803b462d020ff30", "node_id": "C_kwDOAAsO6NoAKDg2OGQwOTlhNzIyMjQ4OTU2NWYwOGUyNDc4MDNiNDYyZDAyMGZmMzA", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-01-28T03:46:42Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-01-28T03:46:42Z"}, "message": "Remove `ControlFlow::{BREAK, CONTINUE}`\n\nLibs-API decided to remove these in #102697.\n\nFollow-up to #107023, which removed them from `compiler/`, but a couple new ones showed up since that was merged.", "tree": {"sha": "40fc5d871be54db88d6016b2cab584531fbedfa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fc5d871be54db88d6016b2cab584531fbedfa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/868d099a7222489565f08e247803b462d020ff30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/868d099a7222489565f08e247803b462d020ff30", "html_url": "https://github.com/rust-lang/rust/commit/868d099a7222489565f08e247803b462d020ff30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/868d099a7222489565f08e247803b462d020ff30/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4df2d30eb342af1ef136d83d70d281f34adcd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4df2d30eb342af1ef136d83d70d281f34adcd7", "html_url": "https://github.com/rust-lang/rust/commit/7d4df2d30eb342af1ef136d83d70d281f34adcd7"}], "stats": {"total": 81, "additions": 19, "deletions": 62}, "files": [{"sha": "d39979b5d1c3160e8522b4e56bd76a8fa88b0c53", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/868d099a7222489565f08e247803b462d020ff30/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868d099a7222489565f08e247803b462d020ff30/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=868d099a7222489565f08e247803b462d020ff30", "patch": "@@ -93,24 +93,24 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if t.needs_infer() {\n                     if ty::Term::from(t) == self.term {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n                         t.super_visit_with(self)\n                     }\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n \n             fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if c.needs_infer() {\n                     if ty::Term::from(c) == self.term {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n                         c.super_visit_with(self)\n                     }\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }"}, {"sha": "6bdf53f7fc9dd8a0d0a0ced46f5dd9ea2941bf7d", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=868d099a7222489565f08e247803b462d020ff30", "patch": "@@ -99,7 +99,7 @@ where\n         ) -> impl FnMut((), T) -> ControlFlow<B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::CONTINUE,\n+                None => ControlFlow::Continue(()),\n             }\n         }\n "}, {"sha": "b040a0ea9011bb88ae1fc35fe153367be3eec980", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=868d099a7222489565f08e247803b462d020ff30", "patch": "@@ -539,7 +539,7 @@ where\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_by(n) {\n-                Ok(()) => ControlFlow::BREAK,\n+                Ok(()) => ControlFlow::Break(()),\n                 Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }\n@@ -629,7 +629,7 @@ where\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_back_by(n) {\n-                Ok(()) => ControlFlow::BREAK,\n+                Ok(()) => ControlFlow::Break(()),\n                 Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }"}, {"sha": "ed23873cdde7cc7e0ae7232504265d5494b96842", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=868d099a7222489565f08e247803b462d020ff30", "patch": "@@ -352,7 +352,7 @@ pub trait DoubleEndedIterator: Iterator {\n         #[inline]\n         fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n             }\n         }\n "}, {"sha": "5a0b8594104ee1d1d5e120f5704539205d8bf946", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=868d099a7222489565f08e247803b462d020ff30", "patch": "@@ -2601,10 +2601,10 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n+                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n             }\n         }\n-        self.try_fold((), check(f)) == ControlFlow::CONTINUE\n+        self.try_fold((), check(f)) == ControlFlow::Continue(())\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -2654,11 +2654,11 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n             }\n         }\n \n-        self.try_fold((), check(f)) == ControlFlow::BREAK\n+        self.try_fold((), check(f)) == ControlFlow::Break(())\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -2717,7 +2717,7 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n             }\n         }\n \n@@ -2749,7 +2749,7 @@ pub trait Iterator {\n         fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::CONTINUE,\n+                None => ControlFlow::Continue(()),\n             }\n         }\n \n@@ -2812,7 +2812,7 @@ pub trait Iterator {\n             R: Residual<Option<I>>,\n         {\n             move |(), x| match f(&x).branch() {\n-                ControlFlow::Continue(false) => ControlFlow::CONTINUE,\n+                ControlFlow::Continue(false) => ControlFlow::Continue(()),\n                 ControlFlow::Continue(true) => ControlFlow::Break(Try::from_output(Some(x))),\n                 ControlFlow::Break(r) => ControlFlow::Break(FromResidual::from_residual(r)),\n             }\n@@ -3491,7 +3491,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> Ordering,\n         {\n             move |x, y| match cmp(x, y) {\n-                Ordering::Equal => ControlFlow::CONTINUE,\n+                Ordering::Equal => ControlFlow::Continue(()),\n                 non_eq => ControlFlow::Break(non_eq),\n             }\n         }\n@@ -3567,7 +3567,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> Option<Ordering>,\n         {\n             move |x, y| match partial_cmp(x, y) {\n-                Some(Ordering::Equal) => ControlFlow::CONTINUE,\n+                Some(Ordering::Equal) => ControlFlow::Continue(()),\n                 non_eq => ControlFlow::Break(non_eq),\n             }\n         }\n@@ -3625,7 +3625,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> bool,\n         {\n             move |x, y| {\n-                if eq(x, y) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n+                if eq(x, y) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n             }\n         }\n \n@@ -3859,7 +3859,7 @@ pub trait Iterator {\n \n /// Compares two iterators element-wise using the given function.\n ///\n-/// If `ControlFlow::CONTINUE` is returned from the function, the comparison moves on to the next\n+/// If `ControlFlow::Continue(())` is returned from the function, the comparison moves on to the next\n /// elements of both iterators. Returning `ControlFlow::Break(x)` short-circuits the iteration and\n /// returns `ControlFlow::Break(x)`. If one of the iterators runs out of elements,\n /// `ControlFlow::Continue(ord)` is returned where `ord` is the result of comparing the lengths of"}, {"sha": "117706fb4b28d3379bf1d8176a4cf9bbc2832018", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868d099a7222489565f08e247803b462d020ff30/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=868d099a7222489565f08e247803b462d020ff30", "patch": "@@ -259,46 +259,3 @@ impl<R: ops::Try> ControlFlow<R, R::Output> {\n         }\n     }\n }\n-\n-impl<B> ControlFlow<B, ()> {\n-    /// It's frequently the case that there's no value needed with `Continue`,\n-    /// so this provides a way to avoid typing `(())`, if you prefer it.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(control_flow_enum)]\n-    /// use std::ops::ControlFlow;\n-    ///\n-    /// let mut partial_sum = 0;\n-    /// let last_used = (1..10).chain(20..25).try_for_each(|x| {\n-    ///     partial_sum += x;\n-    ///     if partial_sum > 100 { ControlFlow::Break(x) }\n-    ///     else { ControlFlow::CONTINUE }\n-    /// });\n-    /// assert_eq!(last_used.break_value(), Some(22));\n-    /// ```\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-    pub const CONTINUE: Self = ControlFlow::Continue(());\n-}\n-\n-impl<C> ControlFlow<(), C> {\n-    /// APIs like `try_for_each` don't need values with `Break`,\n-    /// so this provides a way to avoid typing `(())`, if you prefer it.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(control_flow_enum)]\n-    /// use std::ops::ControlFlow;\n-    ///\n-    /// let mut partial_sum = 0;\n-    /// (1..10).chain(20..25).try_for_each(|x| {\n-    ///     if partial_sum > 100 { ControlFlow::BREAK }\n-    ///     else { partial_sum += x; ControlFlow::CONTINUE }\n-    /// });\n-    /// assert_eq!(partial_sum, 108);\n-    /// ```\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-    pub const BREAK: Self = ControlFlow::Break(());\n-}"}]}