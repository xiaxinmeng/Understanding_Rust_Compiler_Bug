{"sha": "753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "node_id": "C_kwDOAAsO6NoAKDc1M2U1NjljOWMyYTRlM2VmMzk0ZWY3YWJkMDgwMmJmNTdmNjZiY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-12T14:24:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-12T14:24:23Z"}, "message": "Auto merge of #90207 - BoxyUwU:stabilise_cg_defaults, r=lcnr\n\nStabilise `feature(const_generics_defaults)`\n\n`feature(const_generics_defaults)` is complete implementation wise and has a pretty extensive test suite so I think is ready for stabilisation.\n\nneeds stabilisation report and maybe an RFC :sweat_smile:\n\nr? `@lcnr`\ncc `@rust-lang/project-const-generics`", "tree": {"sha": "e171cbd9a5f95de83f7705a4ec69901239b00592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e171cbd9a5f95de83f7705a4ec69901239b00592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "html_url": "https://github.com/rust-lang/rust/commit/753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "html_url": "https://github.com/rust-lang/rust/commit/4c9bdf4cbbf1deab0b5da398d4910558a66b332f"}, {"sha": "1e896df2fe8978b549e05e4b79a89456ee272715", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e896df2fe8978b549e05e4b79a89456ee272715", "html_url": "https://github.com/rust-lang/rust/commit/1e896df2fe8978b549e05e4b79a89456ee272715"}], "stats": {"total": 481, "additions": 101, "deletions": 380}, "files": [{"sha": "4f55f37e2e964a0f74a0bc1d4240eeb6c3a1a148", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -332,10 +332,7 @@ pub type GenericBounds = Vec<GenericBound>;\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n-    // `unordered` is only `true` if `sess.unordered_const_ty_params()`\n-    // returns true. Specifically, if it's only `min_const_generics`, it will still require\n-    // ordering consts after types.\n-    Const { unordered: bool },\n+    Const,\n     // `Infer` is not actually constructed directly from the AST, but is implicitly constructed\n     // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.\n     Infer,\n@@ -346,11 +343,7 @@ impl Ord for ParamKindOrd {\n         use ParamKindOrd::*;\n         let to_int = |v| match v {\n             Lifetime => 0,\n-            Infer | Type | Const { unordered: true } => 1,\n-            // technically both consts should be ordered equally,\n-            // but only one is ever encountered at a time, so this is\n-            // fine.\n-            Const { unordered: false } => 2,\n+            Infer | Type | Const => 1,\n         };\n \n         to_int(*self).cmp(&to_int(*other))"}, {"sha": "ae8c4330a1c5345dadc7f2a5b68bff8d99b7423b", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -894,7 +894,6 @@ impl<'a> AstValidator<'a> {\n /// Checks that generic parameters are in the correct order,\n /// which is lifetimes, then types and then consts. (`<'a, T, const N: usize>`)\n fn validate_generic_param_order(\n-    sess: &Session,\n     handler: &rustc_errors::Handler,\n     generics: &[GenericParam],\n     span: Span,\n@@ -911,8 +910,7 @@ fn validate_generic_param_order(\n             GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident.to_string()),\n             GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n-                let unordered = sess.features_untracked().unordered_const_ty_params();\n-                (ParamKindOrd::Const { unordered }, format!(\"const {}: {}\", ident, ty))\n+                (ParamKindOrd::Const, format!(\"const {}: {}\", ident, ty))\n             }\n         };\n         param_idents.push((kind, ord_kind, bounds, idx, ident));\n@@ -968,14 +966,7 @@ fn validate_generic_param_order(\n             );\n             err.span_suggestion(\n                 span,\n-                &format!(\n-                    \"reorder the parameters: lifetimes, {}\",\n-                    if sess.features_untracked().unordered_const_ty_params() {\n-                        \"then consts and types\"\n-                    } else {\n-                        \"then types, then consts\"\n-                    }\n-                ),\n+                \"reorder the parameters: lifetimes, then consts and types\",\n                 ordered_params.clone(),\n                 Applicability::MachineApplicable,\n             );\n@@ -1342,8 +1333,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let cg_defaults = self.session.features_untracked().unordered_const_ty_params();\n-\n         let mut prev_param_default = None;\n         for param in &generics.params {\n             match param.kind {\n@@ -1358,25 +1347,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             span,\n                             \"generic parameters with a default must be trailing\",\n                         );\n-                        if matches!(param.kind, GenericParamKind::Const { .. }) && !cg_defaults {\n-                            err.note(\n-                                \"using type defaults and const parameters \\\n-                                 in the same parameter list is currently not permitted\",\n-                            );\n-                        }\n                         err.emit();\n                         break;\n                     }\n                 }\n             }\n         }\n \n-        validate_generic_param_order(\n-            self.session,\n-            self.err_handler(),\n-            &generics.params,\n-            generics.span,\n-        );\n+        validate_generic_param_order(self.err_handler(), &generics.params, generics.span);\n \n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {"}, {"sha": "1d1539152be02529d64946d8736d88d589e5e06a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -724,10 +724,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n     gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n-    gate_all!(\n-        const_generics_defaults,\n-        \"default values for const generic parameters are experimental\"\n-    );\n     if sess.parse_sess.span_diagnostic.err_count() == 0 {\n         // Errors for `destructuring_assignment` can get quite noisy, especially where `_` is\n         // involved, so we only emit errors where there are no other parsing errors."}, {"sha": "87b08dc52643e5eb97d64c6da7f4d8539cc4fb21", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -90,6 +90,8 @@ declare_features! (\n     (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n     /// Allows unsizing coercions in `const fn`.\n     (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n+    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n+    (accepted, const_generics_defaults, \"1.59.0\", Some(44580), None),\n     /// Allows the use of `if` and `match` in constants.\n     (accepted, const_if_match, \"1.46.0\", Some(49146), None),\n     /// Allows indexing into constant arrays."}, {"sha": "22f6559d15fa2f2f3b7c09e41047137575f1af6e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -69,10 +69,6 @@ macro_rules! declare_features {\n                 }\n             }\n \n-            pub fn unordered_const_ty_params(&self) -> bool {\n-                self.const_generics_defaults || self.generic_const_exprs || self.adt_const_params\n-            }\n-\n             /// Some features are known to be incomplete and using them is likely to have\n             /// unanticipated results, such as compiler crashes. We warn the user about these\n             /// to alert them.\n@@ -334,8 +330,6 @@ declare_features! (\n     (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n     /// Allows `for _ in _` loops in const contexts.\n     (active, const_for, \"1.56.0\", Some(87575), None),\n-    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n-    (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n     /// Allows argument and return position `impl Trait` in a `const fn`.\n     (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n     /// Allows using `&mut` in constant functions."}, {"sha": "60e4864874d15c2ee482d497f784f405927163a2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -325,13 +325,11 @@ impl GenericArg<'_> {\n         }\n     }\n \n-    pub fn to_ord(&self, feats: &rustc_feature::Features) -> ast::ParamKindOrd {\n+    pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n             GenericArg::Type(_) => ast::ParamKindOrd::Type,\n-            GenericArg::Const(_) => {\n-                ast::ParamKindOrd::Const { unordered: feats.unordered_const_ty_params() }\n-            }\n+            GenericArg::Const(_) => ast::ParamKindOrd::Const,\n             GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n         }\n     }"}, {"sha": "1c3a01e2cfadf99aa1017fe3a38bf5696b908a3a", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -24,13 +24,11 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Const { .. } => \"constant\",\n         }\n     }\n-    pub fn to_ord(&self, tcx: TyCtxt<'_>) -> ast::ParamKindOrd {\n+    pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n             GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n-            GenericParamDefKind::Const { .. } => {\n-                ast::ParamKindOrd::Const { unordered: tcx.features().unordered_const_ty_params() }\n-            }\n+            GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,\n         }\n     }\n }"}, {"sha": "419ea9cced0d7c483a79a3130a3c96d4f194c888", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::{\n     self as ast, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause,\n };\n use rustc_errors::PResult;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::kw;\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -59,19 +59,8 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        // Parse optional const generics default value, taking care of feature gating the spans\n-        // with the unstable syntax mechanism.\n-        let default = if self.eat(&token::Eq) {\n-            // The gated span goes from the `=` to the end of the const argument that follows (and\n-            // which could be a block expression).\n-            let start = self.prev_token.span;\n-            let const_arg = self.parse_const_arg()?;\n-            let span = start.to(const_arg.value.span);\n-            self.sess.gated_spans.gate(sym::const_generics_defaults, span);\n-            Some(const_arg)\n-        } else {\n-            None\n-        };\n+        // Parse optional const generics default value.\n+        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n \n         Ok(GenericParam {\n             ident,"}, {"sha": "caa5c71e21cd940525ff88bae9411e9a08b724be", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -131,8 +131,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             _ => {}\n         }\n \n-        let kind_ord = param.kind.to_ord(tcx);\n-        let arg_ord = arg.to_ord(tcx.features());\n+        let kind_ord = param.kind.to_ord();\n+        let arg_ord = arg.to_ord();\n \n         // This note is only true when generic parameters are strictly ordered by their kind.\n         if possible_ordering_error && kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n@@ -298,26 +298,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         .params\n                                         .clone()\n                                         .into_iter()\n-                                        .map(|param| {\n-                                            (\n-                                                match param.kind {\n-                                                    GenericParamDefKind::Lifetime => {\n-                                                        ParamKindOrd::Lifetime\n-                                                    }\n-                                                    GenericParamDefKind::Type { .. } => {\n-                                                        ParamKindOrd::Type\n-                                                    }\n-                                                    GenericParamDefKind::Const { .. } => {\n-                                                        ParamKindOrd::Const {\n-                                                            unordered: tcx\n-                                                                .features()\n-                                                                .unordered_const_ty_params(),\n-                                                        }\n-                                                    }\n-                                                },\n-                                                param,\n-                                            )\n-                                        })\n+                                        .map(|param| (param.kind.to_ord(), param))\n                                         .collect::<Vec<(ParamKindOrd, GenericParamDef)>>();\n                                     param_types_present.sort_by_key(|(ord, _)| *ord);\n                                     let (mut param_types_present, ordered_params): (\n@@ -330,16 +311,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         tcx,\n                                         arg,\n                                         param,\n-                                        !args_iter.clone().is_sorted_by_key(|arg| match arg {\n-                                            GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n-                                            GenericArg::Type(_) => ParamKindOrd::Type,\n-                                            GenericArg::Const(_) => ParamKindOrd::Const {\n-                                                unordered: tcx\n-                                                    .features()\n-                                                    .unordered_const_ty_params(),\n-                                            },\n-                                            GenericArg::Infer(_) => ParamKindOrd::Infer,\n-                                        }),\n+                                        !args_iter.clone().is_sorted_by_key(|arg| arg.to_ord()),\n                                         Some(&format!(\n                                             \"reorder the arguments: {}: `<{}>`\",\n                                             param_types_present"}, {"sha": "10fa9e0cff554049ffd22048d15cb92122227438", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -697,7 +697,6 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n         hir::GenericParamKind::Lifetime { .. } | hir::GenericParamKind::Type { .. } => (),\n \n         // Const parameters are well formed if their type is structural match.\n-        // FIXME(const_generics_defaults): we also need to check that the `default` is wf.\n         hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n "}, {"sha": "5cdd43cd782c46d8f1b020029064d2f030d80053", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(generic_const_exprs, adt_const_params, const_generics_defaults)]\n+#![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n // regression test for #77650\n struct C<T, const N: core::num::NonZeroUsize>([T; N.get()])"}, {"sha": "8035f826775ef5e806d6f6751595b8e04a025102", "filename": "src/test/rustdoc/const-generics/const-generic-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"foo\"]\n-#![feature(const_generics_defaults)]\n \n // @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n //      'pub struct Foo<const M: usize = 10_usize, const N: usize = M, T = i32>(_);'"}, {"sha": "afd9ed1a7235dbe956c06f227801c52a1a3e8f05", "filename": "src/test/ui/const-generics/argument_order.min.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,30 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:4:28\n-   |\n-LL | struct Bad<const N: usize, T> {\n-   |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n-\n-error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:10:32\n-   |\n-LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:10:36\n-   |\n-LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n-\n-error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:18:23\n-   |\n-LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n-   |                       ^^^^^^^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then types, then consts: `<'a, 'b, T, U, N, M>`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0747`."}, {"sha": "196d9b8a1e210df32588f4489f6f3cca73a8b517", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,15 +1,10 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-\n struct Bad<const N: usize, T> {\n-    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     arr: [u8; { N }],\n     another: T,\n }\n \n struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n     //~^ ERROR lifetime parameters must be declared prior\n-    //[min]~^^ ERROR type parameters must be declared prior to const parameters\n     a: &'a T,\n     b: &'b U,\n }"}, {"sha": "6b33dffb434e7e351f23effe938fe1f308aaf1cc", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:10:32\n+  --> $DIR/argument_order.rs:6:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:18:23\n+  --> $DIR/argument_order.rs:13:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^", "previous_filename": "src/test/ui/const-generics/argument_order.full.stderr"}, {"sha": "4e12f7a8c6e6966d75d26f447f4953d70fea520a", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -3,9 +3,6 @@ error[E0747]: constant provided when a type was expected\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^\n-   |\n-   = note: type arguments must be provided before constant arguments\n-   = help: reorder the arguments: types, then consts: `<T, N>`\n \n error: aborting due to previous error\n "}, {"sha": "f439cd9d69fcce59abc7d74fe362a65f87f269c6", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:5:21\n-   |\n-LL | fn bar<const X: u8, 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: u8>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:9:21\n-   |\n-LL | fn foo<const X: u8, T>(_: &T) {}\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: u8>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "da06aca308e18bcb5a76822e9eb32fdb5e704698", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,12 +1,7 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn bar<const X: u8, 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n }\n \n fn foo<const X: u8, T>(_: &T) {}\n-//[min]~^ ERROR type parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "607d20c4a25f2654cd8a3e75739bc9f5821e0436", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:5:21\n+  --> $DIR/const-param-before-other-params.rs:1:21\n    |\n LL | fn bar<const X: u8, 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: u8>`", "previous_filename": "src/test/ui/const-generics/const-param-before-other-params.full.stderr"}, {"sha": "eed982534c206ce15c9d9f42e0babb45517269b5", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n pub struct Defaulted<const N: usize=3>;\n impl Defaulted {\n     pub fn new() -> Self {"}, {"sha": "b836cfeaedbb774a5e04546ae73b15bab3e240a3", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:7:47\n+  --> $DIR/complex-generic-default-expr.rs:6:47\n    |\n LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:10:62\n+  --> $DIR/complex-generic-default-expr.rs:9:62\n    |\n LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |                                                              ^ cannot perform const operation using `T`"}, {"sha": "7f50d4c9f299b2b562e041db510cd1aec2992c61", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,8 +1,7 @@\n // revisions: full min\n //[full] check-pass\n #![cfg_attr(full, feature(generic_const_exprs))]\n-#![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n //[min]~^ ERROR generic parameters may not be used in const operations"}, {"sha": "aebc5975a5a5d72d4fde0074671c4e1321cd8cc8", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,12 +1,8 @@\n-// [full] run-pass\n-// revisions: full min\n+// run-pass\n // Checks a complicated usage of unordered params\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-#![cfg_attr(full, allow(incomplete_features))]\n #![allow(dead_code)]\n \n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n-    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     args: &'a [&'a [T; M]; N],\n     specifier: A,\n }"}, {"sha": "65cb0eb14a37d1eedbea1d61534731ab04c60c06", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n-\n pub struct ConstDefault<const N: usize = 3>;\n \n impl<const N: usize> ConstDefault<N> {"}, {"sha": "c1c955d8758ad2fff37f843993ae9d79318e68f6", "filename": "src/test/ui/const-generics/defaults/const-param-as-default-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n struct Foo<const N: usize, const M: usize = N>([u8; N], [u8; M]);\n \n fn foo<const N: usize>() -> Foo<N> {"}, {"sha": "5f0cafe2ef1799290c449bb6bc43b0792b7014bb", "filename": "src/test/ui/const-generics/defaults/const-param-in-ty-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n struct Foo<const N: usize, T = [u8; N]>(T);\n \n impl<const N: usize> Foo<N> {"}, {"sha": "7a9f5732f7fa21f15511c272cb46a57a659e4efb", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(staged_api)]\n-#![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n // FIXME(const_generics_defaults): It seems like we aren't testing the right thing here,\n // I would assume that we want the attributes to apply to the const parameter defaults"}, {"sha": "45275e6092059a0f6ad53e577d552371b5a06cbd", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Struct<const N: usize = { Self; 10 }>;\n //~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n "}, {"sha": "72d7001fdf1b06bcc5956172a2ef0569b4d29ade", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,17 +1,17 @@\n error[E0735]: generic parameters cannot use `Self` in their defaults\n-  --> $DIR/default-const-param-cannot-reference-self.rs:3:34\n+  --> $DIR/default-const-param-cannot-reference-self.rs:1:34\n    |\n LL | struct Struct<const N: usize = { Self; 10 }>;\n    |                                  ^^^^ `Self` in generic parameter default\n \n error[E0735]: generic parameters cannot use `Self` in their defaults\n-  --> $DIR/default-const-param-cannot-reference-self.rs:6:30\n+  --> $DIR/default-const-param-cannot-reference-self.rs:4:30\n    |\n LL | enum Enum<const N: usize = { Self; 10 }> { }\n    |                              ^^^^ `Self` in generic parameter default\n \n error[E0735]: generic parameters cannot use `Self` in their defaults\n-  --> $DIR/default-const-param-cannot-reference-self.rs:9:32\n+  --> $DIR/default-const-param-cannot-reference-self.rs:7:32\n    |\n LL | union Union<const N: usize = { Self; 10 }> { not_empty: () }\n    |                                ^^^^ `Self` in generic parameter default"}, {"sha": "9ce46aa09dee6fa6e8f0d82a759cc3ee5d847884", "filename": "src/test/ui/const-generics/defaults/default-on-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Foo<const N: usize>;\n \n impl<const N: usize = 1> Foo<N> {}"}, {"sha": "ddfc0ead8ad8c2fe1c9990ef318dcd3ff7c90526", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:5:12\n+  --> $DIR/default-on-impl.rs:3:12\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n    |            ^"}, {"sha": "41a52c7eb0d8336bdbe038e256e76949cd3d48f7", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_generics_defaults)]\n struct Foo<const N: u8 = { 255 + 1 }>;\n //~^ ERROR evaluation of constant value failed\n fn main() {}"}, {"sha": "e8ebddade5c16792aafd5fd4983b1d73b690550f", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/default-param-wf-concrete.rs:2:28\n+  --> $DIR/default-param-wf-concrete.rs:1:28\n    |\n LL | struct Foo<const N: u8 = { 255 + 1 }>;\n    |                            ^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow"}, {"sha": "cd533b57bc31fe4a8a393847d8df3661cd7e18f1", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n // test that defaulted const params are not used to help type inference\n \n struct Foo<const N: u32 = 2>;"}, {"sha": "1551e81ea7577a270f3e6fa602e192049909bf7a", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed for `Foo<{_: u32}>`\n-  --> $DIR/doesnt_infer.rs:13:15\n+  --> $DIR/doesnt_infer.rs:11:15\n    |\n LL |     let foo = Foo::foo();\n    |         ---   ^^^^^^^^ cannot infer the value of const parameter `N`"}, {"sha": "25ec523cb5489e213c6fb392c281491563f68d9e", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,7 +1,5 @@\n // aux-build:const_defaulty.rs\n // check-pass\n-#![feature(const_generics_defaults)]\n-\n extern crate const_defaulty;\n use const_defaulty::Defaulted;\n "}, {"sha": "ede3d873bdcf6b5d8ad2d9f82150da9b2ccdc57a", "filename": "src/test/ui/const-generics/defaults/forward-declared.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Foo<const N: usize = M, const M: usize = 10>;\n //~^ ERROR generic parameters with a default cannot use forward declared identifiers\n "}, {"sha": "4856c7a1fd2d82a90c4221be4cb4619816faafcf", "filename": "src/test/ui/const-generics/defaults/forward-declared.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,23 +1,23 @@\n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:3:29\n+  --> $DIR/forward-declared.rs:1:29\n    |\n LL | struct Foo<const N: usize = M, const M: usize = 10>;\n    |                             ^ defaulted generic parameters cannot be forward declared\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:6:27\n+  --> $DIR/forward-declared.rs:4:27\n    |\n LL | enum Bar<const N: usize = M, const M: usize = 10> {}\n    |                           ^ defaulted generic parameters cannot be forward declared\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:9:30\n+  --> $DIR/forward-declared.rs:7:30\n    |\n LL | struct Foo2<const N: usize = N>;\n    |                              ^ defaulted generic parameters cannot be forward declared\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:12:28\n+  --> $DIR/forward-declared.rs:10:28\n    |\n LL | enum Bar2<const N: usize = N> {}\n    |                            ^ defaulted generic parameters cannot be forward declared"}, {"sha": "f082bd8d2e9ff5b9c2826f5f01b8f819c920ef8a", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-concrete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "777865d1cb6a1051a84e24f1804d9126e342c887", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-mismatched-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "8fe43feb78ac80f758a4815c611bdf306da4e6c2", "filename": "src/test/ui/const-generics/defaults/generic-expr-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "725cc36b428c7a48fb08995836b435bb50e60136", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:5:28\n-   |\n-LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n-\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:8:37\n-   |\n-LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "578938db4c43e8affbaff63a08d19f97b42ad69f", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,4 @@\n // Checks that lifetimes cannot be interspersed between consts and types.\n-// revisions: full min\n-#![feature(const_generics_defaults)]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters"}, {"sha": "e27976deb2b569dddb1eb316cf2011be19aab22f", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:5:28\n+  --> $DIR/intermixed-lifetime.rs:3:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:8:37\n+  --> $DIR/intermixed-lifetime.rs:6:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`", "previous_filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr"}, {"sha": "fce4ec4edda080c5d67e7acc4db3163c3028ea65", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n pub struct Example<const N: usize=13>;\n pub struct Example2<T=u32, const N: usize=13>(T);\n pub struct Example3<const N: usize=13, T=u32>(T);"}, {"sha": "369768191951b264300500becc2b57c36ea96eee", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:9:28\n+  --> $DIR/mismatch.rs:7:28\n    |\n LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n@@ -10,7 +10,7 @@ LL |     let e: Example::<13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:12:34\n+  --> $DIR/mismatch.rs:10:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -21,7 +21,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:34\n+  --> $DIR/mismatch.rs:13:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -32,7 +32,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:18:28\n+  --> $DIR/mismatch.rs:16:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -43,7 +43,7 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:28\n+  --> $DIR/mismatch.rs:19:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`"}, {"sha": "158fa2ec1c8ffd614d2ef21c3b2cfe17471068e2", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:7:26\n-   |\n-LL | struct A<const N: usize, T=u32>(T);\n-   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T = u32, const N: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "9ba8184e058518a21501c2ffa7451b0a63d90a76", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,12 +0,0 @@\n-//[full] run-pass\n-// Verifies that having generic parameters after constants is not permitted without the\n-// `const_generics_defaults` feature.\n-// revisions: min full\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-\n-struct A<const N: usize, T=u32>(T);\n-//[min]~^ ERROR type parameters must be declared prior\n-\n-fn main() {\n-    let _: A<3> = A(0);\n-}"}, {"sha": "da087ffc3c4affe767d476286be9ad2d58a0e0c9", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_generics_defaults)]\n struct Foo<const M: usize = 10, 'a>(&'a u32);\n //~^ Error lifetime parameters must be declared prior to const parameters\n "}, {"sha": "55f5a53538537da232de7f21f503592d9e841c16", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/param-order-err-pretty-prints-default.rs:2:33\n+  --> $DIR/param-order-err-pretty-prints-default.rs:1:33\n    |\n LL | struct Foo<const M: usize = 10, 'a>(&'a u32);\n    |           ----------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const M: usize = 10>`"}, {"sha": "e202d4e86a2852ee6b300e6ece24e4dd56e1c2bc", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -3,7 +3,6 @@\n // compile-flags: -Z unpretty=expanded\n \n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n \n trait Foo<const KIND: bool = true> {}\n "}, {"sha": "99fe9d2e4b3c3ae5d23506972f52d4a228fabb95", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -5,7 +5,6 @@\n // compile-flags: -Z unpretty=expanded\n \n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;\n #[macro_use]"}, {"sha": "118da2723acfb7b3e8041dc354e88f44e4782949", "filename": "src/test/ui/const-generics/defaults/repr-c-issue-82792.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_generics_defaults)]\n-\n #[repr(C)]\n pub struct Loaf<T: Sized, const N: usize = 1> {\n     head: [T; N],"}, {"sha": "dde8eea45257f12c1f8456c3cd7c7f8d57d38cf9", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n-\n struct Uwu<const N: u32 = 1, const M: u32 = N>;\n \n trait Trait {}"}, {"sha": "308c121a94111ad86386d09611be0325e5fede06", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Uwu<const N: u32 = 1, const M: u32 = N>;\n \n trait Trait {}"}, {"sha": "8c8bfdc0e4847a82fb8c79c164ff78af1ed60cc8", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:8:14\n+  --> $DIR/rp_impl_trait_fail.rs:6:14\n    |\n LL | fn rawr() -> impl Trait {\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n@@ -8,7 +8,7 @@ LL | fn rawr() -> impl Trait {\n              <Uwu<N> as Trait>\n \n error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:19:26\n+  --> $DIR/rp_impl_trait_fail.rs:17:26\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n@@ -17,7 +17,7 @@ LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n              <u32 as Traitor<N, 2_u8>>\n \n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:24:13\n+  --> $DIR/rp_impl_trait_fail.rs:22:13\n    |\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`"}, {"sha": "6a782d2238c7c29f195989a007752296c4b039af", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // Checks that type param defaults are allowed after const params.\n-#![feature(const_generics_defaults)]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {"}, {"sha": "750e40313fb5aff6e01f254f242ae0b9dcd779a1", "filename": "src/test/ui/const-generics/defaults/trait_objects.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n-\n trait Trait<const N: u8 = 12> {\n     fn uwu(&self) -> u8 {\n         N"}, {"sha": "7ba12d02b6e77150ccac9b00cc5004a02db6f24b", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n trait Trait<const N: u8 = 12> {\n     fn uwu(&self) -> u8 {\n         N"}, {"sha": "13d03c2d42d3166077168e8616fb92007fbbcf72", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n-  --> $DIR/trait_objects_fail.rs:28:9\n+  --> $DIR/trait_objects_fail.rs:26:9\n    |\n LL |     foo(&10_u32);\n    |     --- ^^^^^^^ the trait `Trait` is not implemented for `u32`\n@@ -11,7 +11,7 @@ LL |     foo(&10_u32);\n    = note: required for the cast to the object type `dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n-  --> $DIR/trait_objects_fail.rs:30:9\n+  --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n    |     --- ^^^^^ the trait `Traitor<{_: u8}, {_: u8}>` is not implemented for `bool`"}, {"sha": "405664dedc70117110933ef60a6208ae3a7a3445", "filename": "src/test/ui/const-generics/defaults/type-default-const-param-name.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-#![feature(const_generics_defaults)]\n-\n struct N;\n \n struct Foo<const N: usize = 1, T = N>(T);"}, {"sha": "d366040ba3ea65e7783c70f257089532c4129881", "filename": "src/test/ui/const-generics/defaults/wfness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n //~^ error: evaluation of constant value failed\n "}, {"sha": "facf0ae19f734a53601be1a8d88e848aae0a0fb1", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/wfness.rs:3:33\n+  --> $DIR/wfness.rs:1:33\n    |\n LL | struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n    |                                 ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n \n error[E0277]: the trait bound `(): Trait<2_u8>` is not satisfied\n-  --> $DIR/wfness.rs:8:47\n+  --> $DIR/wfness.rs:6:47\n    |\n LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |                                               ^^^^^^^^ the trait `Trait<2_u8>` is not implemented for `()`\n@@ -14,15 +14,15 @@ LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n              <() as Trait<3_u8>>\n \n error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n-  --> $DIR/wfness.rs:16:13\n+  --> $DIR/wfness.rs:14:13\n    |\n LL | fn foo() -> DependentDefaultWfness {\n    |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1_u8>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<3_u8>>\n note: required by a bound in `WhereClause`\n-  --> $DIR/wfness.rs:8:47\n+  --> $DIR/wfness.rs:6:47\n    |\n LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |                                               ^^^^^^^^ required by this bound in `WhereClause`"}, {"sha": "d53d56f41e6666c3f7c9086589f14fde957ce23e", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct A<T = u32, const N: usize> {\n     //~^ ERROR generic parameters with a default must be trailing\n     arg: T,"}, {"sha": "4d2628d034f3515ec22d78c0ed7beb6cb30a1b1e", "filename": "src/test/ui/const-generics/defaults/wrong-order.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,11 +1,11 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:3:10\n+  --> $DIR/wrong-order.rs:1:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n \n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:8:18\n+  --> $DIR/wrong-order.rs:6:18\n    |\n LL | struct Foo<const N: u8 = 3, T>(T);\n    |                  ^"}, {"sha": "9580f8a7fbc55c50b7119f91a8c5b55f11bbb240", "filename": "src/test/ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n struct Bar<const N: usize>(Foo<N, 3>);"}, {"sha": "cb6d05349db97230dd9ab557f9fd1b090e653205", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,4 @@\n-#![feature(adt_const_params, const_generics_defaults)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "eafafb8a27455a55765cbd818e58ac710f5c7314", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n-#![allow(incomplete_features, dead_code)]\n+#![allow(dead_code)]\n \n struct Both<const N: usize=3, T> {\n //~^ ERROR: generic parameters with a default must be"}, {"sha": "0d5a393cb7bfb900c54f2662cda6c6e662d01275", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/const_default_first.rs:5:19\n+  --> $DIR/const_default_first.rs:4:19\n    |\n LL | struct Both<const N: usize=3, T> {\n    |                   ^"}, {"sha": "92d495ef6653bb9830c0138bd5622a4c1529c499", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n \n fn foo<const SIZE: usize = 5usize>() {}\n //~^ ERROR defaults for const parameters are"}, {"sha": "07dcd57dab8cbab0025959068f9f481154afa044", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default_function_param.rs:4:14\n+  --> $DIR/default_function_param.rs:3:14\n    |\n LL | fn foo<const SIZE: usize = 5usize>() {}\n    |              ^^^^"}, {"sha": "9cd5e3279ffa02debe8f7f020ad61c0ae53f3f60", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,4 +1,4 @@\n+// check-pass\n trait Foo<const KIND: bool = true> {}\n-//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "5617b35ad013afc2510f5c87109d8886a42d57fc", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: default values for const generic parameters are experimental\n-  --> $DIR/default_trait_param.rs:1:28\n-   |\n-LL | trait Foo<const KIND: bool = true> {}\n-   |                            ^^^^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fa119c59f613e4e3a425235c478dcad5437e4d86", "filename": "src/test/ui/const-generics/min_const_generics/type_and_const_defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n #![allow(dead_code)]\n \n struct Both<T=u32, const N: usize=3> {"}, {"sha": "a5e70f6b9e64824e57f9fcc4d4459971e9cc8e54", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -3,8 +3,6 @@ error: generic parameters with a default must be trailing\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: generic parameters may not be used in const operations\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:5:44"}, {"sha": "f37b0b10233baac0ad1aa9d5ae9b272413bb8094", "filename": "src/test/ui/const-generics/type-after-const-ok.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,11 +1,6 @@\n-// [full] run-pass\n-// revisions: full min\n+// run-pass\n // Verifies that having generic parameters after constants is permitted\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n #[allow(dead_code)]\n struct A<const N: usize, T>(T);\n-//[min]~^ ERROR type parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "ce80271d274b0ef6a5468bc0b144be2324db41af", "filename": "src/test/ui/derives/derive-macro-const-default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-#![feature(const_generics_defaults)]\n-\n #[derive(Clone, PartialEq, Debug)]\n struct Example<T, const N: usize = 1usize>([T; N]);\n "}, {"sha": "5b5ccc888732242ddfd158596d83a27a0c8b775c", "filename": "src/test/ui/feature-gates/feature-gate-const_generics_defaults.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,9 +0,0 @@\n-#[cfg(FALSE)]\n-struct A<const N: usize = 3>;\n-//~^ ERROR default values for const generic parameters are experimental\n-\n-#[cfg(FALSE)]\n-fn foo<const B: bool = false>() {}\n-//~^ ERROR default values for const generic parameters are experimental\n-\n-fn main() {}"}, {"sha": "e2b48d793fdfffdd6b8f072744e6ca81183248c3", "filename": "src/test/ui/feature-gates/feature-gate-const_generics_defaults.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c9bdf4cbbf1deab0b5da398d4910558a66b332f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr?ref=4c9bdf4cbbf1deab0b5da398d4910558a66b332f", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: default values for const generic parameters are experimental\n-  --> $DIR/feature-gate-const_generics_defaults.rs:2:25\n-   |\n-LL | struct A<const N: usize = 3>;\n-   |                         ^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n-\n-error[E0658]: default values for const generic parameters are experimental\n-  --> $DIR/feature-gate-const_generics_defaults.rs:6:22\n-   |\n-LL | fn foo<const B: bool = false>() {}\n-   |                      ^^^^^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7e1dd77070441fa317cfeb57fc60ebca79dc71ff", "filename": "src/test/ui/generics/issue-59508-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,8 +1,7 @@\n #![allow(dead_code)]\n-#![feature(const_generics_defaults)]\n \n // This test checks that generic parameter re-ordering diagnostic suggestions mention that\n-// consts come after types and lifetimes when the `const_generics_defaults` feature is enabled.\n+// consts come after types and lifetimes.\n // We cannot run rustfix on this test because of the above const generics warning.\n \n struct A;"}, {"sha": "d162365ea4bff9c010a2df6b2cdf994614f1abbb", "filename": "src/test/ui/generics/issue-59508-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-59508-1.rs:11:25\n+  --> $DIR/issue-59508-1.rs:10:25\n    |\n LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n    |                     ----^^--^^----- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b: 'a, T>`"}, {"sha": "c52ae4182b86bf0ad4547d6be74d0eb2a6553908", "filename": "src/test/ui/generics/issue-59508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-59508.rs:10:25\n    |\n LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n-   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n+   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b: 'a, T>`\n \n error: aborting due to previous error\n "}, {"sha": "62d95e45329f92f7c93ac98eabf6a3854cbe4261", "filename": "src/test/ui/generics/lifetime-before-type-params.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Flifetime-before-type-params.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,25 +2,25 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:2:13\n    |\n LL | fn first<T, 'a, 'b>() {}\n-   |         ----^^--^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |         ----^^--^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:4:18\n    |\n LL | fn second<'a, T, 'b>() {}\n-   |          --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |          --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:6:16\n    |\n LL | fn third<T, U, 'a>() {}\n-   |         -------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n+   |         -------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:8:18\n    |\n LL | fn fourth<'a, T, 'b, U, 'c, V>() {}\n-   |          --------^^-----^^---- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, 'c, T, U, V>`\n+   |          --------^^-----^^---- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, 'c, T, U, V>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "119b1a0d2070ec79ca6502eb2d04fea6b46c7517", "filename": "src/test/ui/issues/issue-80512-param-reordering-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80512-param-reordering-with-defaults.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-80512-param-reordering-with-defaults.rs:3:18\n    |\n LL | struct S<T = (), 'a>(&'a T);\n-   |         ---------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = ()>`\n+   |         ---------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T = ()>`\n \n error: aborting due to previous error\n "}, {"sha": "e9b32fb7198d431bfe53b3c9742402fa30b210a6", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(const_generics_defaults)]\n-\n struct X<const N: u8>();\n \n impl X<N> {}"}, {"sha": "3b930d7e4ec1422ab4e39c7935ba5d58a82b0489", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/missing-type-parameter2.rs:6:8\n+  --> $DIR/missing-type-parameter2.rs:3:8\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n@@ -17,7 +17,7 @@ LL | impl<N> X<N> {}\n    |     +++\n \n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/missing-type-parameter2.rs:9:28\n+  --> $DIR/missing-type-parameter2.rs:6:28\n    |\n LL | impl<T, const A: u8 = 2> X<N> {}\n    |      -                     ^\n@@ -34,7 +34,7 @@ LL | impl<T, const A: u8 = 2, N> X<N> {}\n    |                        +++\n \n error[E0412]: cannot find type `T` in this scope\n-  --> $DIR/missing-type-parameter2.rs:14:20\n+  --> $DIR/missing-type-parameter2.rs:11:20\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n@@ -52,7 +52,7 @@ LL | fn foo<T>(_: T) where T: Send {}\n    |       +++\n \n error[E0412]: cannot find type `T` in this scope\n-  --> $DIR/missing-type-parameter2.rs:14:11\n+  --> $DIR/missing-type-parameter2.rs:11:11\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n@@ -70,7 +70,7 @@ LL | fn foo<T>(_: T) where T: Send {}\n    |       +++\n \n error[E0412]: cannot find type `A` in this scope\n-  --> $DIR/missing-type-parameter2.rs:18:24\n+  --> $DIR/missing-type-parameter2.rs:15:24\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n@@ -88,7 +88,7 @@ LL | fn bar<const N: u8, A>(_: A) {}\n    |                   +++\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/missing-type-parameter2.rs:6:8\n+  --> $DIR/missing-type-parameter2.rs:3:8\n    |\n LL | impl X<N> {}\n    |        ^\n@@ -99,13 +99,13 @@ LL | impl X<{ N }> {}\n    |        +   +\n \n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/missing-type-parameter2.rs:9:15\n+  --> $DIR/missing-type-parameter2.rs:6:15\n    |\n LL | impl<T, const A: u8 = 2> X<N> {}\n    |               ^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/missing-type-parameter2.rs:9:28\n+  --> $DIR/missing-type-parameter2.rs:6:28\n    |\n LL | impl<T, const A: u8 = 2> X<N> {}\n    |                            ^"}, {"sha": "55cef4cabacfe84b2f1b2d28bcb067142d1c3811", "filename": "src/test/ui/parser/issues/issue-14303-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-enum.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-enum.rs:1:15\n    |\n LL | enum X<'a, T, 'b> {\n-   |       --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |       --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "bacc922969d9172bdaaf4f5bdec9f7f8369ca3df", "filename": "src/test/ui/parser/issues/issue-14303-fn-def.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-fn-def.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-fn-def.rs:1:15\n    |\n LL | fn foo<'a, T, 'b>(x: &'a T) {}\n-   |       --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |       --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "d6be02f70fd2e8a4c8280720e466964c2c6aa997", "filename": "src/test/ui/parser/issues/issue-14303-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-impl.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-impl.rs:3:13\n    |\n LL | impl<'a, T, 'b> X<T> {}\n-   |     --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |     --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "fa62a39f2416ca91d6724e9d47b38d3cdf7032f5", "filename": "src/test/ui/parser/issues/issue-14303-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-struct.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-struct.rs:1:17\n    |\n LL | struct X<'a, T, 'b> {\n-   |         --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |         --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "75cd67a9ded821093e17bb902b723ef7706476a5", "filename": "src/test/ui/parser/issues/issue-14303-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-14303-trait.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-trait.rs:1:18\n    |\n LL | trait Foo<'a, T, 'b> {}\n-   |          --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |          --------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "f52631caed173caec745c09ca43d4d9dc2610f37", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -2,25 +2,25 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:1:13\n    |\n LL | struct A<T, 'a> {\n-   |         ----^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T>`\n+   |         ----^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:5:13\n    |\n LL | struct B<T, 'a, U> {\n-   |         ----^^---- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n+   |         ----^^---- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n    |\n LL | struct C<T, U, 'a> {\n-   |         -------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n+   |         -------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:15:16\n    |\n LL | struct D<T, U, 'a, 'b, V, 'c> {\n-   |         -------^^--^^-----^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, 'c, T, U, V>`\n+   |         -------^^--^^-----^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, 'c, T, U, V>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c39b0bcaf227fb2db8b36952a8d6f22f42226ffa", "filename": "src/tools/clippy/tests/ui/trailing_empty_array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrailing_empty_array.rs?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::trailing_empty_array)]\n-#![feature(const_generics_defaults)]\n \n // Do lint:\n "}, {"sha": "9e2bd31d9fa51ec7a922ed918d411e94ceb55466", "filename": "src/tools/clippy/tests/ui/trailing_empty_array.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrailing_empty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753e569c9c2a4e3ef394ef7abd0802bf57f66bce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrailing_empty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrailing_empty_array.stderr?ref=753e569c9c2a4e3ef394ef7abd0802bf57f66bce", "patch": "@@ -1,5 +1,5 @@\n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:6:1\n+  --> $DIR/trailing_empty_array.rs:5:1\n    |\n LL | / struct RarelyUseful {\n LL | |     field: i32,\n@@ -11,7 +11,7 @@ LL | | }\n    = help: consider annotating `RarelyUseful` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:11:1\n+  --> $DIR/trailing_empty_array.rs:10:1\n    |\n LL | / struct OnlyField {\n LL | |     first_and_last: [usize; 0],\n@@ -21,7 +21,7 @@ LL | | }\n    = help: consider annotating `OnlyField` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:15:1\n+  --> $DIR/trailing_empty_array.rs:14:1\n    |\n LL | / struct GenericArrayType<T> {\n LL | |     field: i32,\n@@ -32,7 +32,7 @@ LL | | }\n    = help: consider annotating `GenericArrayType` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:21:1\n+  --> $DIR/trailing_empty_array.rs:20:1\n    |\n LL | / struct OnlyAnotherAttribute {\n LL | |     field: i32,\n@@ -43,7 +43,7 @@ LL | | }\n    = help: consider annotating `OnlyAnotherAttribute` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:27:1\n+  --> $DIR/trailing_empty_array.rs:26:1\n    |\n LL | / struct OnlyADeriveAttribute {\n LL | |     field: i32,\n@@ -54,7 +54,7 @@ LL | | }\n    = help: consider annotating `OnlyADeriveAttribute` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:33:1\n+  --> $DIR/trailing_empty_array.rs:32:1\n    |\n LL | / struct ZeroSizedWithConst {\n LL | |     field: i32,\n@@ -65,7 +65,7 @@ LL | | }\n    = help: consider annotating `ZeroSizedWithConst` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:42:1\n+  --> $DIR/trailing_empty_array.rs:41:1\n    |\n LL | / struct ZeroSizedWithConstFunction {\n LL | |     field: i32,\n@@ -76,7 +76,7 @@ LL | | }\n    = help: consider annotating `ZeroSizedWithConstFunction` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:50:1\n+  --> $DIR/trailing_empty_array.rs:49:1\n    |\n LL | / struct ZeroSizedWithConstFunction2 {\n LL | |     field: i32,\n@@ -87,23 +87,23 @@ LL | | }\n    = help: consider annotating `ZeroSizedWithConstFunction2` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:55:1\n+  --> $DIR/trailing_empty_array.rs:54:1\n    |\n LL | struct ZeroSizedArrayWrapper([usize; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider annotating `ZeroSizedArrayWrapper` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:57:1\n+  --> $DIR/trailing_empty_array.rs:56:1\n    |\n LL | struct TupleStruct(i32, [usize; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider annotating `TupleStruct` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_empty_array.rs:59:1\n+  --> $DIR/trailing_empty_array.rs:58:1\n    |\n LL | / struct LotsOfFields {\n LL | |     f1: u32,"}]}