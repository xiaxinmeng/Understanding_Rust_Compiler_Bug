{"sha": "eadd74b5b69c36921963c2f1da7685bafcb723d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZGQ3NGI1YjY5YzM2OTIxOTYzYzJmMWRhNzY4NWJhZmNiNzIzZDg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-12T23:41:11Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-13T00:37:04Z"}, "message": "Test case for previous commit\n\n(basically a stripped-down version of comm, and a \"driver\" that\nconstructs a new port)", "tree": {"sha": "324de1a3914f71b36c69ab0995b70e123cb66ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324de1a3914f71b36c69ab0995b70e123cb66ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eadd74b5b69c36921963c2f1da7685bafcb723d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eadd74b5b69c36921963c2f1da7685bafcb723d8", "html_url": "https://github.com/rust-lang/rust/commit/eadd74b5b69c36921963c2f1da7685bafcb723d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eadd74b5b69c36921963c2f1da7685bafcb723d8/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa9d2d88d33266437ca770a7345cce0d23ad1011", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9d2d88d33266437ca770a7345cce0d23ad1011", "html_url": "https://github.com/rust-lang/rust/commit/aa9d2d88d33266437ca770a7345cce0d23ad1011"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "48083fdf3f4fdda920c65328bcc06950b6a4d5cc", "filename": "src/test/auxiliary/test_comm.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/eadd74b5b69c36921963c2f1da7685bafcb723d8/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadd74b5b69c36921963c2f1da7685bafcb723d8/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=eadd74b5b69c36921963c2f1da7685bafcb723d8", "patch": "@@ -0,0 +1,108 @@\n+/*\n+  Minimized version of core::comm (with still-local modifications\n+  to turn a resource into a class) for testing. \n+\n+  Could probably be more minimal.\n+ */\n+\n+import libc::size_t;\n+\n+export port::{};\n+export port;\n+export recv;\n+\n+\n+#[doc = \"\n+A communication endpoint that can receive messages\n+\n+Each port has a unique per-task identity and may not be replicated or\n+transmitted. If a port value is copied, both copies refer to the same\n+port.  Ports may be associated with multiple `chan`s.\n+\"]\n+enum port<T: send> {\n+    port_t(@port_ptr<T>)\n+}\n+\n+#[doc = \"Constructs a port\"]\n+fn port<T: send>() -> port<T> {\n+    port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n+}\n+\n+class port_ptr<T:send> {\n+   let po: *rust_port;\n+   new(po: *rust_port) {\n+    #debug(\"in the port_ptr constructor\");\n+    self.po = po; }\n+   drop unsafe {\n+    #debug(\"in the port_ptr destructor\");\n+    task::unkillable {||\n+        let yield = 0u;\n+        let yieldp = ptr::addr_of(yield);\n+        rustrt::rust_port_begin_detach(self.po, yieldp);\n+        if yield != 0u {\n+            task::yield();\n+        }\n+        rustrt::rust_port_end_detach(self.po);\n+\n+        while rustrt::rust_port_size(self.po) > 0u as size_t {\n+            recv_::<T>(self.po);\n+        }\n+        rustrt::del_port(self.po);\n+    }\n+  }\n+}\n+\n+\n+#[doc = \"\n+Receive from a port.  If no data is available on the port then the\n+task will block until data becomes available.\n+\"]\n+fn recv<T: send>(p: port<T>) -> T { recv_((**p).po) }\n+\n+\n+#[doc = \"Receive on a raw port pointer\"]\n+fn recv_<T: send>(p: *rust_port) -> T {\n+    let yield = 0u;\n+    let yieldp = ptr::addr_of(yield);\n+    let mut res;\n+    res = rusti::init::<T>();\n+    rustrt::port_recv(ptr::addr_of(res) as *uint, p, yieldp);\n+\n+    if yield != 0u {\n+        // Data isn't available yet, so res has not been initialized.\n+        task::yield();\n+    } else {\n+        // In the absense of compiler-generated preemption points\n+        // this is a good place to yield\n+        task::yield();\n+    }\n+    ret res;\n+}\n+\n+\n+/* Implementation details */\n+\n+\n+enum rust_port {}\n+\n+type port_id = int;\n+\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n+\n+    fn new_port(unit_sz: libc::size_t) -> *rust_port;\n+    fn del_port(po: *rust_port);\n+    fn rust_port_begin_detach(po: *rust_port,\n+                              yield: *libc::uintptr_t);\n+    fn rust_port_end_detach(po: *rust_port);\n+    fn rust_port_size(po: *rust_port) -> libc::size_t;\n+    fn port_recv(dptr: *uint, po: *rust_port,\n+                 yield: *libc::uintptr_t);\n+}\n+\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n+    fn init<T>() -> T;\n+}\n+\n+"}, {"sha": "24dedd357857109c960bb134d1aede842f92b3fb", "filename": "src/test/run-pass/leaky_comm.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eadd74b5b69c36921963c2f1da7685bafcb723d8/src%2Ftest%2Frun-pass%2Fleaky_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadd74b5b69c36921963c2f1da7685bafcb723d8/src%2Ftest%2Frun-pass%2Fleaky_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleaky_comm.rs?ref=eadd74b5b69c36921963c2f1da7685bafcb723d8", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:test_comm.rs\n+\n+use test_comm;\n+\n+fn main() {\n+  let p = test_comm::port();\n+  \n+  alt none::<int> {\n+      none {}\n+      some(_) {\n+  if test_comm::recv(p) == 0 {\n+      #error(\"floop\");\n+  }\n+  else {\n+      #error(\"bloop\");\n+  }\n+      }}\n+}\n\\ No newline at end of file"}]}