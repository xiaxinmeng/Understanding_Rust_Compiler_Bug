{"sha": "f26e7707458676f657398da9a9770013b7e35b93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNmU3NzA3NDU4Njc2ZjY1NzM5OGRhOWE5NzcwMDEzYjdlMzViOTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-07T14:22:53Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-07T14:46:44Z"}, "message": "Make 1-1 parse again\n\nIssue #954\n\nThis is not a very elegant fix -- we should probably do something with\nconstant folding to handle negative-int alt patterns in the future.", "tree": {"sha": "26dfa9c11c060b2b1fb25f9eadc83d2b8d2fa637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26dfa9c11c060b2b1fb25f9eadc83d2b8d2fa637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26e7707458676f657398da9a9770013b7e35b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26e7707458676f657398da9a9770013b7e35b93", "html_url": "https://github.com/rust-lang/rust/commit/f26e7707458676f657398da9a9770013b7e35b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26e7707458676f657398da9a9770013b7e35b93/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7eee8fb059fc9639f2a4e5ef749dc3701bf3377", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7eee8fb059fc9639f2a4e5ef749dc3701bf3377", "html_url": "https://github.com/rust-lang/rust/commit/c7eee8fb059fc9639f2a4e5ef749dc3701bf3377"}], "stats": {"total": 116, "additions": 82, "deletions": 34}, "files": [{"sha": "10581643701a6009425474782f2b3bc59d8749ce", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f26e7707458676f657398da9a9770013b7e35b93/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26e7707458676f657398da9a9770013b7e35b93/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=f26e7707458676f657398da9a9770013b7e35b93", "patch": "@@ -754,6 +754,43 @@ fn gather_comments_and_literals(cm: codemap::codemap, path: str,\n     }\n     ret {cmnts: comments, lits: literals};\n }\n+\n+// This is a stopgap fix. We will have to do better eventually (issue #954)\n+fn maybe_untangle_minus_from_lit(r: reader, t: token::token)\n+    -> option::t<token::token> {\n+    fn check_str(r: reader, i: uint) -> option::t<uint> {\n+        let it = r.get_interner(), s = interner::get(*it, i);\n+        if s[0] == '-' as u8 {\n+            some(interner::intern(*it, str::slice(s, 1u, str::byte_len(s))))\n+        } else { none }\n+    }\n+    alt t {\n+      token::LIT_INT(v) {\n+        if v < 0 { ret some(token::LIT_INT(-v)); }\n+      }\n+      token::LIT_UINT(v) {\n+        if v > 0x7fffffffu { ret some(token::LIT_UINT(-(v as int) as uint)); }\n+      }\n+      token::LIT_MACH_INT(m, v) {\n+        if v < 0 { ret some(token::LIT_MACH_INT(m, -v)); }\n+      }\n+      token::LIT_FLOAT(s) {\n+        alt check_str(r, s) {\n+          some(s) { ret some(token::LIT_FLOAT(s)); }\n+          _ {}\n+        }\n+      }\n+      token::LIT_MACH_FLOAT(m, s) {\n+        alt check_str(r, s) {\n+          some(s) { ret some(token::LIT_MACH_FLOAT(m, s)); }\n+          _ {}\n+        }\n+      }\n+      _ {}\n+    }\n+    none\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "8c9097961aded63d604e46a0918d3f12cad396cc", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f26e7707458676f657398da9a9770013b7e35b93/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26e7707458676f657398da9a9770013b7e35b93/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f26e7707458676f657398da9a9770013b7e35b93", "patch": "@@ -678,40 +678,31 @@ fn parse_seq<@T>(bra: token::token, ket: token::token,\n     ret spanned(lo, hi, result);\n }\n \n+fn lit_from_token(p: parser, tok: token::token) -> ast::lit_ {\n+    alt tok {\n+      token::LIT_INT(i) { ast::lit_int(i) }\n+      token::LIT_UINT(u) { ast::lit_uint(u) }\n+      token::LIT_FLOAT(s) { ast::lit_float(p.get_str(s)) }\n+      token::LIT_MACH_INT(tm, i) { ast::lit_mach_int(tm, i) }\n+      token::LIT_MACH_FLOAT(tm, s) { ast::lit_mach_float(tm, p.get_str(s)) }\n+      token::LIT_CHAR(c) { ast::lit_char(c) }\n+      token::LIT_STR(s) { ast::lit_str(p.get_str(s)) }\n+      token::LPAREN. { expect(p, token::RPAREN); ast::lit_nil }\n+      _ { unexpected(p, tok); }\n+    }\n+}\n \n fn parse_lit(p: parser) -> ast::lit {\n     let sp = p.get_span();\n-    let lit: ast::lit_ = ast::lit_nil;\n-    if eat_word(p, \"true\") {\n-        lit = ast::lit_bool(true);\n+    let lit = if eat_word(p, \"true\") {\n+        ast::lit_bool(true)\n     } else if eat_word(p, \"false\") {\n-        lit = ast::lit_bool(false);\n+        ast::lit_bool(false)\n     } else {\n-        alt p.peek() {\n-          token::LIT_INT(i) { p.bump(); lit = ast::lit_int(i); }\n-          token::LIT_UINT(u) { p.bump(); lit = ast::lit_uint(u); }\n-          token::LIT_FLOAT(s) {\n-            p.bump();\n-            lit = ast::lit_float(p.get_str(s));\n-          }\n-          token::LIT_MACH_INT(tm, i) {\n-            p.bump();\n-            lit = ast::lit_mach_int(tm, i);\n-          }\n-          token::LIT_MACH_FLOAT(tm, s) {\n-            p.bump();\n-            lit = ast::lit_mach_float(tm, p.get_str(s));\n-          }\n-          token::LIT_CHAR(c) { p.bump(); lit = ast::lit_char(c); }\n-          token::LIT_STR(s) { p.bump(); lit = ast::lit_str(p.get_str(s)); }\n-          token::LPAREN. {\n-            p.bump();\n-            expect(p, token::RPAREN);\n-            lit = ast::lit_nil;\n-          }\n-          t { unexpected(p, t); }\n-        }\n-    }\n+        let tok = p.peek();\n+        p.bump();\n+        lit_from_token(p, tok)\n+    };\n     ret {node: lit, span: sp};\n }\n \n@@ -1200,13 +1191,25 @@ fn parse_more_binops(p: parser, lhs: @ast::expr, min_prec: int) ->\n    @ast::expr {\n     if !expr_has_value(lhs) { ret lhs; }\n     let peeked = p.peek();\n+    let lit_after = alt lexer::maybe_untangle_minus_from_lit(p.get_reader(),\n+                                                             peeked) {\n+      some(tok) {\n+        peeked = token::BINOP(token::MINUS);\n+        let lit = @{node: lit_from_token(p, tok), span: p.get_span()};\n+        some(mk_expr(p, p.get_lo_pos(), p.get_hi_pos(), ast::expr_lit(lit)))\n+      }\n+      none. { none }\n+    };\n     for cur: op_spec in *p.get_prec_table() {\n         if cur.prec > min_prec && cur.tok == peeked {\n             p.bump();\n-            let rhs = parse_more_binops(p, parse_prefix_expr(p), cur.prec);\n-            let bin =\n-                mk_expr(p, lhs.span.lo, rhs.span.hi,\n-                        ast::expr_binary(cur.op, lhs, rhs));\n+            let expr = alt lit_after {\n+              some(ex) { ex }\n+              _ { parse_prefix_expr(p) }\n+            };\n+            let rhs = parse_more_binops(p, expr, cur.prec);\n+            let bin = mk_expr(p, lhs.span.lo, rhs.span.hi,\n+                              ast::expr_binary(cur.op, lhs, rhs));\n             ret parse_more_binops(p, bin, min_prec);\n         }\n     }"}, {"sha": "c89d99f0bafd7508830cff65b9b1a54aa9fb9259", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f26e7707458676f657398da9a9770013b7e35b93/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26e7707458676f657398da9a9770013b7e35b93/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=f26e7707458676f657398da9a9770013b7e35b93", "patch": "@@ -3,7 +3,8 @@ import ast::ty_mach;\n import ast_util::ty_mach_to_str;\n import std::map::new_str_hash;\n import util::interner;\n-import std::{int, uint, str};\n+import std::{int, uint, str, option};\n+import option::{some, none};\n \n type str_num = uint;\n \n@@ -211,6 +212,7 @@ pure fn can_begin_expr(t: token) -> bool {\n       _ { false }\n     }\n }\n+\n // Local Variables:\n // fill-column: 78;\n // indent-tabs-mode: nil"}, {"sha": "cb31faacc3c480a90f9c852c60ec4422a15e0013", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f26e7707458676f657398da9a9770013b7e35b93/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26e7707458676f657398da9a9770013b7e35b93/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=f26e7707458676f657398da9a9770013b7e35b93", "patch": "@@ -0,0 +1,6 @@\n+// Check that issue #954 stays fixed\n+\n+fn main() {\n+    alt -1 { -1 {} }\n+    assert 1-1 == 0;\n+}"}]}