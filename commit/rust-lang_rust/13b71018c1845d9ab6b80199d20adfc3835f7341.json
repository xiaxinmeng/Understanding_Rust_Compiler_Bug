{"sha": "13b71018c1845d9ab6b80199d20adfc3835f7341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYjcxMDE4YzE4NDVkOWFiNmI4MDE5OWQyMGFkZmMzODM1ZjczNDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T18:23:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T18:43:07Z"}, "message": "`lower_pattern_unadjusted`: remove dead code.\n\nThe code is dead because `check_pat_slice` will never have\n`expected = ty::Ref(...)` due to default-binding-modes\n(see `is_non_ref_pat`, `peel_off_references`).\n\nMoreover, if the type is not `ty::Array(_) | ty::Slice(_)`\nthen `check_pat_slice` enters an error branch.", "tree": {"sha": "04e8fb69e5efe9e754604ccdc44bda8629b3ead1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04e8fb69e5efe9e754604ccdc44bda8629b3ead1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b71018c1845d9ab6b80199d20adfc3835f7341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b71018c1845d9ab6b80199d20adfc3835f7341", "html_url": "https://github.com/rust-lang/rust/commit/13b71018c1845d9ab6b80199d20adfc3835f7341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b71018c1845d9ab6b80199d20adfc3835f7341/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "html_url": "https://github.com/rust-lang/rust/commit/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "22426defcd05b70aa9f0e59c1517b94371eec428", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13b71018c1845d9ab6b80199d20adfc3835f7341/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b71018c1845d9ab6b80199d20adfc3835f7341/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=13b71018c1845d9ab6b80199d20adfc3835f7341", "patch": "@@ -545,15 +545,6 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n             hir::PatKind::Slice(ref prefix, ref slice, ref suffix) => {\n                 match ty.kind {\n-                    ty::Ref(_, ty, _) =>\n-                        PatKind::Deref {\n-                            subpattern: Pat {\n-                                ty,\n-                                span: pat.span,\n-                                kind: Box::new(self.slice_or_array_pattern(\n-                                    pat.span, ty, prefix, slice, suffix))\n-                            },\n-                        },\n                     ty::Slice(..) |\n                     ty::Array(..) =>\n                         self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix),"}, {"sha": "65029048b5ddd127452750564123e698d0cca45e", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b71018c1845d9ab6b80199d20adfc3835f7341/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b71018c1845d9ab6b80199d20adfc3835f7341/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=13b71018c1845d9ab6b80199d20adfc3835f7341", "patch": "@@ -1176,7 +1176,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let expected = self.structurally_resolved_type(span, expected);\n-        let (inner_ty, slice_ty) = match expected.kind {\n+        let (inner_ty, slice_ty, expected) = match expected.kind {\n             // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n             ty::Array(inner_ty, size) => {\n                 let slice_ty = if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n@@ -1206,15 +1206,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.error_scrutinee_unfixed_length(span);\n                     tcx.types.err\n                 };\n-                (inner_ty, slice_ty)\n+                (inner_ty, slice_ty, expected)\n             }\n-            ty::Slice(inner_ty) => (inner_ty, expected),\n+            ty::Slice(inner_ty) => (inner_ty, expected, expected),\n             // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected.references_error() {\n                     self.error_expected_array_or_slice(span, expected);\n                 }\n-                (tcx.types.err, tcx.types.err)\n+                (tcx.types.err, tcx.types.err, tcx.types.err)\n             }\n         };\n "}]}