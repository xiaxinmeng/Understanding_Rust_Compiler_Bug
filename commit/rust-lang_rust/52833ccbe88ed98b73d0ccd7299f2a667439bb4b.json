{"sha": "52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "node_id": "C_kwDOAAsO6NoAKDUyODMzY2NiZTg4ZWQ5OGI3M2QwY2NkNzI5OWYyYTY2NzQzOWJiNGI", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-04-22T23:02:45Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-04-22T23:08:55Z"}, "message": "Add notes to avoid direct field accesses", "tree": {"sha": "f9ad04fcc517a0f84ada254a801ee9700c2903fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ad04fcc517a0f84ada254a801ee9700c2903fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "html_url": "https://github.com/rust-lang/rust/commit/52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52833ccbe88ed98b73d0ccd7299f2a667439bb4b/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afad9c3f644ddbfef3301f617cb9d23ca4e71fe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/afad9c3f644ddbfef3301f617cb9d23ca4e71fe0", "html_url": "https://github.com/rust-lang/rust/commit/afad9c3f644ddbfef3301f617cb9d23ca4e71fe0"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "eee105ff5fc67da756a5d1e24f4a3dfdc58dd1db", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52833ccbe88ed98b73d0ccd7299f2a667439bb4b/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52833ccbe88ed98b73d0ccd7299f2a667439bb4b/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "patch": "@@ -76,6 +76,11 @@ use crate::simd::{\n /// [`read`]: pointer::read\n /// [`write`]: pointer::write\n /// [as_simd]: slice::as_simd\n+//\n+// NOTE: Accessing the inner array directly in any way (e.g. by using the `.0` field syntax) or\n+// directly constructing an instance of the type (i.e. `let vector = Simd(array)`) should be\n+// avoided, as it will likely become illegal on `#[repr(simd)]` structs in the future. It also\n+// causes rustc to emit illegal LLVM IR in some cases.\n #[repr(simd)]\n pub struct Simd<T, const LANES: usize>([T; LANES])\n where\n@@ -138,6 +143,9 @@ where\n         // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n         // is always valid and `Simd<T, LANES>` never has a lower alignment\n         // than `[T; LANES]`.\n+        //\n+        // NOTE: This deliberately doesn't just use `&self.0`, see the comment\n+        // on the struct definition for details.\n         unsafe { &*(self as *const Self as *const [T; LANES]) }\n     }\n \n@@ -146,20 +154,29 @@ where\n         // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n         // is always valid and `Simd<T, LANES>` never has a lower alignment\n         // than `[T; LANES]`.\n+        //\n+        // NOTE: This deliberately doesn't just use `&mut self.0`, see the comment\n+        // on the struct definition for details.\n         unsafe { &mut *(self as *mut Self as *mut [T; LANES]) }\n     }\n \n     /// Converts an array to a SIMD vector.\n     pub const fn from_array(array: [T; LANES]) -> Self {\n         // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n         // is always valid.\n+        //\n+        // NOTE: This deliberately doesn't just use `Self(array)`, see the comment\n+        // on the struct definition for details.\n         unsafe { core::mem::transmute_copy(&array) }\n     }\n \n     /// Converts a SIMD vector to an array.\n     pub const fn to_array(self) -> [T; LANES] {\n         // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n         // is always valid.\n+        //\n+        // NOTE: This deliberately doesn't just use `self.0`, see the comment\n+        // on the struct definition for details.\n         unsafe { core::mem::transmute_copy(&self) }\n     }\n "}]}