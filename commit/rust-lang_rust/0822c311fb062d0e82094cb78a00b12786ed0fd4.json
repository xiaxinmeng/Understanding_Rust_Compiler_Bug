{"sha": "0822c311fb062d0e82094cb78a00b12786ed0fd4", "node_id": "C_kwDOAAsO6NoAKDA4MjJjMzExZmIwNjJkMGU4MjA5NGNiNzhhMDBiMTI3ODZlZDBmZDQ", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-11-09T08:39:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-26T14:58:02Z"}, "message": "add namespace to resolve_path", "tree": {"sha": "9cfe013d93dec4ec80da0d6e587a919decea1f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cfe013d93dec4ec80da0d6e587a919decea1f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0822c311fb062d0e82094cb78a00b12786ed0fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0822c311fb062d0e82094cb78a00b12786ed0fd4", "html_url": "https://github.com/rust-lang/rust/commit/0822c311fb062d0e82094cb78a00b12786ed0fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0822c311fb062d0e82094cb78a00b12786ed0fd4/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d3e565004eeef0d01a57007577dd96cfb9bf208", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3e565004eeef0d01a57007577dd96cfb9bf208", "html_url": "https://github.com/rust-lang/rust/commit/4d3e565004eeef0d01a57007577dd96cfb9bf208"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "363b647d6c684fd6e95e04a7244f7217c1073d4e", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0822c311fb062d0e82094cb78a00b12786ed0fd4/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0822c311fb062d0e82094cb78a00b12786ed0fd4/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=0822c311fb062d0e82094cb78a00b12786ed0fd4", "patch": "@@ -9,6 +9,7 @@ use std::thread;\n use log::info;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{\n     self,\n@@ -195,7 +196,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     MiriMachine::late_init(&mut ecx, config)?;\n \n     // Make sure we have MIR. We check MIR for some stable monomorphic function in libcore.\n-    let sentinel = ecx.try_resolve_path(&[\"core\", \"ascii\", \"escape_default\"]);\n+    let sentinel = ecx.try_resolve_path(&[\"core\", \"ascii\", \"escape_default\"], Namespace::ValueNS);\n     if !matches!(sentinel, Some(s) if tcx.is_mir_available(s.def.def_id())) {\n         tcx.sess.fatal(\n             \"the current sysroot was built without `-Zalways-encode-mir`, or libcore seems missing. \\"}, {"sha": "17c9ceafba48fcdf77fc1627a8a9d14a03c52420", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0822c311fb062d0e82094cb78a00b12786ed0fd4/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0822c311fb062d0e82094cb78a00b12786ed0fd4/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=0822c311fb062d0e82094cb78a00b12786ed0fd4", "patch": "@@ -2,12 +2,12 @@ pub mod convert;\n \n use std::cmp;\n use std::iter;\n-use std::mem;\n use std::num::NonZeroUsize;\n use std::time::Duration;\n \n use log::trace;\n \n+use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_middle::mir;\n use rustc_middle::ty::{\n@@ -74,48 +74,51 @@ const UNIX_IO_ERROR_TABLE: &[(&str, std::io::ErrorKind)] = {\n };\n \n /// Gets an instance for a path.\n-fn try_resolve_did<'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n+fn try_resolve_did<'tcx>(tcx: TyCtxt<'tcx>, path: &[&str], namespace: Namespace) -> Option<DefId> {\n     tcx.crates(()).iter().find(|&&krate| tcx.crate_name(krate).as_str() == path[0]).and_then(\n         |krate| {\n             let krate = DefId { krate: *krate, index: CRATE_DEF_INDEX };\n             let mut items = tcx.module_children(krate);\n-            let mut path_it = path.iter().skip(1).peekable();\n \n-            while let Some(segment) = path_it.next() {\n-                for item in mem::take(&mut items).iter() {\n-                    if item.ident.name.as_str() == *segment {\n-                        if path_it.peek().is_none() {\n-                            return Some(item.res.def_id());\n-                        }\n+            for &segment in &path[1..path.len() - 1] {\n+                let next_mod = items.iter().find(|item| {\n+                    item.ident.name.as_str() == segment\n+                        && tcx.def_kind(item.res.def_id()) == DefKind::Mod\n+                })?;\n \n-                        items = tcx.module_children(item.res.def_id());\n-                        break;\n-                    }\n-                }\n+                items = tcx.module_children(next_mod.res.def_id());\n             }\n-            None\n+\n+            let item_name = *path.last().unwrap();\n+\n+            let item = items.iter().find(|item| {\n+                item.ident.name.as_str() == item_name\n+                    && tcx.def_kind(item.res.def_id()).ns() == Some(namespace)\n+            })?;\n+\n+            Some(item.res.def_id())\n         },\n     )\n }\n \n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Gets an instance for a path; fails gracefully if the path does not exist.\n-    fn try_resolve_path(&self, path: &[&str]) -> Option<ty::Instance<'tcx>> {\n-        let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path)?;\n+    fn try_resolve_path(&self, path: &[&str], namespace: Namespace) -> Option<ty::Instance<'tcx>> {\n+        let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path, namespace)?;\n         Some(ty::Instance::mono(self.eval_context_ref().tcx.tcx, did))\n     }\n \n     /// Gets an instance for a path.\n-    fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n-        self.try_resolve_path(path)\n+    fn resolve_path(&self, path: &[&str], namespace: Namespace) -> ty::Instance<'tcx> {\n+        self.try_resolve_path(path, namespace)\n             .unwrap_or_else(|| panic!(\"failed to find required Rust item: {path:?}\"))\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)\n     /// if the path could be resolved, and None otherwise\n     fn eval_path_scalar(&self, path: &[&str]) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_ref();\n-        let instance = this.resolve_path(path);\n+        let instance = this.resolve_path(path, Namespace::ValueNS);\n         let cid = GlobalId { instance, promoted: None };\n         // We don't give a span -- this isn't actually used directly by the program anyway.\n         let const_val = this.eval_global(cid, None)?;\n@@ -147,15 +150,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Helper function to get the `TyAndLayout` of a `libc` type\n     fn libc_ty_layout(&self, name: &str) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n         let this = self.eval_context_ref();\n-        let ty = this.resolve_path(&[\"libc\", name]).ty(*this.tcx, ty::ParamEnv::reveal_all());\n+        let ty = this\n+            .resolve_path(&[\"libc\", name], Namespace::TypeNS)\n+            .ty(*this.tcx, ty::ParamEnv::reveal_all());\n         this.layout_of(ty)\n     }\n \n     /// Helper function to get the `TyAndLayout` of a `windows` type\n     fn windows_ty_layout(&self, name: &str) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n         let this = self.eval_context_ref();\n         let ty = this\n-            .resolve_path(&[\"std\", \"sys\", \"windows\", \"c\", name])\n+            .resolve_path(&[\"std\", \"sys\", \"windows\", \"c\", name], Namespace::TypeNS)\n             .ty(*this.tcx, ty::ParamEnv::reveal_all());\n         this.layout_of(ty)\n     }"}, {"sha": "816e7d87e85867cd37dd71e1ebf2d4e7f5437452", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0822c311fb062d0e82094cb78a00b12786ed0fd4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0822c311fb062d0e82094cb78a00b12786ed0fd4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=0822c311fb062d0e82094cb78a00b12786ed0fd4", "patch": "@@ -11,7 +11,6 @@ use std::time::SystemTime;\n use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::ty::{self, layout::LayoutOf};\n use rustc_target::abi::{Align, Size};\n \n use crate::shims::os_str::bytes_to_os_str;\n@@ -1006,12 +1005,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // as `isize`s instead of having the proper types. Thus, we have to recover the layout of\n         // `statxbuf_op` by using the `libc::statx` struct type.\n         let statxbuf = {\n-            // FIXME: This long path is required because `libc::statx` is an struct and also a\n-            // function and `resolve_path` is returning the latter.\n-            let statx_ty = this\n-                .resolve_path(&[\"libc\", \"unix\", \"linux_like\", \"linux\", \"gnu\", \"statx\"])\n-                .ty(*this.tcx, ty::ParamEnv::reveal_all());\n-            let statx_layout = this.layout_of(statx_ty)?;\n+            let statx_layout = this.libc_ty_layout(\"statx\")?;\n             MPlaceTy::from_aligned_ptr(statxbuf_ptr, statx_layout)\n         };\n "}]}