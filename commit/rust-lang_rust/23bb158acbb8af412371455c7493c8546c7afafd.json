{"sha": "23bb158acbb8af412371455c7493c8546c7afafd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmIxNThhY2JiOGFmNDEyMzcxNDU1Yzc0OTNjODU0NmM3YWZhZmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T00:49:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:27:08Z"}, "message": "fix win32 types, make close() use i32 as return type", "tree": {"sha": "cc54c3f4c966ad1ed18c3863dedf15580e81b697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc54c3f4c966ad1ed18c3863dedf15580e81b697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bb158acbb8af412371455c7493c8546c7afafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bb158acbb8af412371455c7493c8546c7afafd", "html_url": "https://github.com/rust-lang/rust/commit/23bb158acbb8af412371455c7493c8546c7afafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bb158acbb8af412371455c7493c8546c7afafd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3699a26368c4582b0825aae6045dabdb50aee5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3699a26368c4582b0825aae6045dabdb50aee5f", "html_url": "https://github.com/rust-lang/rust/commit/e3699a26368c4582b0825aae6045dabdb50aee5f"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "ca004e96695f111472f79d367ffddf72ad06f9a8", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=23bb158acbb8af412371455c7493c8546c7afafd", "patch": "@@ -30,7 +30,7 @@ native mod libc {\n     fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n     fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n     fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> fd_t;\n-    fn close(fd: fd_t) -> int;\n+    fn close(fd: fd_t) -> c_int;\n     type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n@@ -54,18 +54,18 @@ native mod libc {\n }\n \n mod libc_constants {\n-    const O_RDONLY: c_int = 0;\n-    const O_WRONLY: c_int = 1;\n-    const O_RDWR: c_int   = 2;\n-    const O_APPEND: c_int = 1024;\n-    const O_CREAT: c_int  = 64;\n-    const O_EXCL: c_int   = 128;\n-    const O_TRUNC: c_int  = 512;\n-    const O_TEXT: c_int   = 0;     // nonexistent in linux libc\n-    const O_BINARY: c_int = 0;     // nonexistent in linux libc\n-\n-    const S_IRUSR: unsigned = 256u;\n-    const S_IWUSR: unsigned = 128u;\n+    const O_RDONLY: c_int = 0i32;\n+    const O_WRONLY: c_int = 1i32;\n+    const O_RDWR: c_int   = 2i32;\n+    const O_APPEND: c_int = 1024i32;\n+    const O_CREAT: c_int  = 64i32;\n+    const O_EXCL: c_int   = 128i32;\n+    const O_TRUNC: c_int  = 512i32;\n+    const O_TEXT: c_int   = 0i32;     // nonexistent in linux libc\n+    const O_BINARY: c_int = 0i32;     // nonexistent in linux libc\n+\n+    const S_IRUSR: unsigned = 256u32;\n+    const S_IWUSR: unsigned = 128u32;\n }\n \n fn pipe() -> {in: fd_t, out: fd_t} {\n@@ -78,7 +78,7 @@ fn fd_FILE(fd: fd_t) -> libc::FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::fdopen(fd, modebuf) });\n }\n \n-fn close(fd: fd_t) -> int {\n+fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n "}, {"sha": "f0caed83ac5fb4a206f90f5c59f9199b5ad81eb2", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=23bb158acbb8af412371455c7493c8546c7afafd", "patch": "@@ -24,7 +24,7 @@ native mod libc {\n     fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n     fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n     fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> fd_t;\n-    fn close(fd: fd_t) -> int;\n+    fn close(fd: fd_t) -> c_int;\n     type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n@@ -71,7 +71,7 @@ fn fd_FILE(fd: fd_t) -> libc::FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::fdopen(fd, modebuf) });\n }\n \n-fn close(fd: fd_t) -> int {\n+fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n "}, {"sha": "74461d5559308e8c7f62533a339fa7194e619986", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=23bb158acbb8af412371455c7493c8546c7afafd", "patch": "@@ -259,8 +259,8 @@ fn waitpid(pid: pid_t) -> int {\n     ret waitpid_os(pid);\n \n     #[cfg(target_os = \"win32\")]\n-    fn waitpid_os(pid: int) -> int {\n-        os::waitpid(pid)\n+    fn waitpid_os(pid: pid_t) -> int {\n+        os::waitpid(pid) as int\n     }\n \n     #[cfg(target_os = \"linux\")]"}, {"sha": "5e6e9c5ae5bc0d5433e61db3b70c4eefd8be3633", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bb158acbb8af412371455c7493c8546c7afafd/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=23bb158acbb8af412371455c7493c8546c7afafd", "patch": "@@ -1,40 +1,41 @@\n+import ctypes::*;\n \n #[abi = \"cdecl\"]\n #[link_name = \"\"]\n native mod libc {\n-    fn read(fd: int, buf: *u8, count: uint) -> int;\n-    fn write(fd: int, buf: *u8, count: uint) -> int;\n-    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n+    fn read(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n+    fn write(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n+    fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n     #[link_name = \"_open\"]\n-    fn open(s: str::sbuf, flags: int, mode: uint) -> int;\n+    fn open(s: str::sbuf, flags: c_int, mode: c_int) -> c_int;\n     #[link_name = \"_close\"]\n-    fn close(fd: int) -> int;\n+    fn close(fd: fd_t) -> c_int;\n     type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n-    fn _fdopen(fd: int, mode: str::sbuf) -> FILE;\n+    fn _fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n     fn fclose(f: FILE);\n-    fn fgetc(f: FILE) -> int;\n-    fn ungetc(c: int, f: FILE);\n-    fn feof(f: FILE) -> int;\n-    fn fseek(f: FILE, offset: int, whence: int) -> int;\n-    fn ftell(f: FILE) -> int;\n-    fn _pipe(fds: *mutable int, size: uint, mode: int) -> int;\n+    fn fgetc(f: FILE) -> c_int;\n+    fn ungetc(c: c_int, f: FILE);\n+    fn feof(f: FILE) -> c_int;\n+    fn fseek(f: FILE, offset: long, whence: c_int) -> c_int;\n+    fn ftell(f: FILE) -> long;\n+    fn _pipe(fds: *mutable fd_t, size: unsigned, mode: c_int) -> c_int;\n }\n \n mod libc_constants {\n-    const O_RDONLY: int    = 0;\n-    const O_WRONLY: int    = 1;\n-    const O_RDWR: int      = 2;\n-    const O_APPEND: int    = 8;\n-    const O_CREAT: int     = 256;\n-    const O_EXCL: int      = 1024;\n-    const O_TRUNC: int     = 512;\n-    const O_TEXT: int      = 16384;\n-    const O_BINARY: int    = 32768;\n-    const O_NOINHERIT: int = 128;\n-    const S_IRUSR: uint    = 256u; // really _S_IREAD  in win32\n-    const S_IWUSR: uint    = 128u; // really _S_IWRITE in win32\n+    const O_RDONLY: c_int    = 0i32;\n+    const O_WRONLY: c_int    = 1i32;\n+    const O_RDWR: c_int      = 2i32;\n+    const O_APPEND: c_int    = 8i32;\n+    const O_CREAT: c_int     = 256i32;\n+    const O_EXCL: c_int      = 1024i32;\n+    const O_TRUNC: c_int     = 512i32;\n+    const O_TEXT: c_int      = 16384i32;\n+    const O_BINARY: c_int    = 32768i32;\n+    const O_NOINHERIT: c_int = 128i32;\n+    const S_IRUSR: unsigned  = 256u32; // really _S_IREAD  in win32\n+    const S_IWUSR: unsigned  = 128u32; // really _S_IWRITE in win32\n }\n \n type DWORD = u32;\n@@ -57,28 +58,28 @@ fn target_os() -> str { ret \"win32\"; }\n \n fn dylib_filename(base: str) -> str { ret base + \".dll\"; }\n \n-fn pipe() -> {in: int, out: int} {\n+fn pipe() -> {in: fd_t, out: fd_t} {\n     // Windows pipes work subtly differently than unix pipes, and their\n     // inheritance has to be handled in a different way that I don't fully\n     // understand. Here we explicitly make the pipe non-inheritable,\n     // which means to pass it to a subprocess they need to be duplicated\n     // first, as in rust_run_program.\n-    let fds = {mutable in: 0, mutable out: 0};\n+    let fds = {mutable in: 0i32, mutable out: 0i32};\n     let res =\n-        os::libc::_pipe(ptr::mut_addr_of(fds.in), 1024u,\n+        os::libc::_pipe(ptr::mut_addr_of(fds.in), 1024u32,\n                         libc_constants::O_BINARY |\n                             libc_constants::O_NOINHERIT);\n-    assert (res == 0);\n-    assert (fds.in != -1 && fds.in != 0);\n-    assert (fds.out != -1 && fds.in != 0);\n+    assert (res == 0i32);\n+    assert (fds.in != -1i32 && fds.in != 0i32);\n+    assert (fds.out != -1i32 && fds.in != 0i32);\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: int) -> libc::FILE {\n+fn fd_FILE(fd: fd_t) -> libc::FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::_fdopen(fd, modebuf) });\n }\n \n-fn close(fd: int) -> int {\n+fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n \n@@ -88,11 +89,11 @@ fn fclose(file: libc::FILE) {\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn rust_process_wait(handle: int) -> int;\n+    fn rust_process_wait(handle: c_int) -> c_int;\n     fn rust_getcwd() -> str;\n }\n \n-fn waitpid(pid: int) -> int { ret rustrt::rust_process_wait(pid); }\n+fn waitpid(pid: pid_t) -> i32 { ret rustrt::rust_process_wait(pid); }\n \n fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n "}]}