{"sha": "8a227c75777bf154ac8fb1673d970133e9a02d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjI3Yzc1Nzc3YmYxNTRhYzhmYjE2NzNkOTcwMTMzZTlhMDJkNTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-02-18T07:23:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-18T07:23:11Z"}, "message": "Merge pull request #1550 from sinkuu/should_assert_eq\n\nLint `assert!(x == y)`", "tree": {"sha": "22776b8dcd32c10b530767b6c72ca4b1014f9ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22776b8dcd32c10b530767b6c72ca4b1014f9ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a227c75777bf154ac8fb1673d970133e9a02d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a227c75777bf154ac8fb1673d970133e9a02d56", "html_url": "https://github.com/rust-lang/rust/commit/8a227c75777bf154ac8fb1673d970133e9a02d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a227c75777bf154ac8fb1673d970133e9a02d56/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0682c950bc71421783e8b5c15e0dfbe04496c616", "url": "https://api.github.com/repos/rust-lang/rust/commits/0682c950bc71421783e8b5c15e0dfbe04496c616", "html_url": "https://github.com/rust-lang/rust/commit/0682c950bc71421783e8b5c15e0dfbe04496c616"}, {"sha": "d2b9b7ece2714170fae43ff9c5c5c3853d04ecef", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b9b7ece2714170fae43ff9c5c5c3853d04ecef", "html_url": "https://github.com/rust-lang/rust/commit/d2b9b7ece2714170fae43ff9c5c5c3853d04ecef"}], "stats": {"total": 141, "additions": 130, "deletions": 11}, "files": [{"sha": "1192195cd6a584ad959e42bebe3ef3fa7ab299c1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -423,6 +423,7 @@ All notable changes to this project will be documented in this file.\n [`shadow_same`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_same\n [`shadow_unrelated`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated\n [`short_circuit_statement`]: https://github.com/Manishearth/rust-clippy/wiki#short_circuit_statement\n+[`should_assert_eq`]: https://github.com/Manishearth/rust-clippy/wiki#should_assert_eq\n [`should_implement_trait`]: https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait\n [`similar_names`]: https://github.com/Manishearth/rust-clippy/wiki#similar_names\n [`single_char_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern"}, {"sha": "842e654678b8d38999771edfce7e8fcde3eb6aa9", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 190 lints included in this crate:\n+There are 191 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -329,6 +329,7 @@ name\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                             | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                   | allow   | rebinding a name without even using the original value\n [short_circuit_statement](https://github.com/Manishearth/rust-clippy/wiki#short_circuit_statement)                     | warn    | using a short circuit boolean condition as a statement\n+[should_assert_eq](https://github.com/Manishearth/rust-clippy/wiki#should_assert_eq)                                   | warn    | using `assert` macro for asserting equality\n [should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)                       | warn    | defining a method that should be implementing a std trait\n [similar_names](https://github.com/Manishearth/rust-clippy/wiki#similar_names)                                         | allow   | similarly named items and bindings\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                             | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`"}, {"sha": "ea3e29cff122fc20760afc0432a235e958dd9e19", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                             let hir::Item_::ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node,\n                                             trait_ref.path.def.def_id() == trait_id\n                                         ], { return; }}\n-                                        implements_trait($cx, $ty, trait_id, vec![$rty])\n+                                        implements_trait($cx, $ty, trait_id, &[$rty], None)\n                                     },)*\n                                     _ => false,\n                                 }"}, {"sha": "814daf7d64586c11ee8163151e07ca9702b9c1c9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -126,6 +126,7 @@ pub mod regex;\n pub mod returns;\n pub mod serde;\n pub mod shadow;\n+pub mod should_assert_eq;\n pub mod strings;\n pub mod swap;\n pub mod temporary_assignment;\n@@ -297,6 +298,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box double_parens::DoubleParens);\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n+    reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -479,6 +481,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         serde::SERDE_API_MISUSE,\n+        should_assert_eq::SHOULD_ASSERT_EQ,\n         strings::STRING_LIT_AS_BYTES,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,"}, {"sha": "9acf4c7e973ac1f4f9e45f95f1d8ac09eabc8b87", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -724,7 +724,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n                         return false;\n                     };\n \n-                    if implements_trait(cx, arg_ty, default_trait_id, Vec::new()) {\n+                    if implements_trait(cx, arg_ty, default_trait_id, &[], None) {\n                         span_lint_and_then(cx,\n                                            OR_FUN_CALL,\n                                            span,\n@@ -1268,7 +1268,7 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n /// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'a, 'b>(ty: ty::Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n     match cx.tcx.lang_items.debug_trait() {\n-        Some(debug) => implements_trait(cx, ty, debug, Vec::new()),\n+        Some(debug) => implements_trait(cx, ty, debug, &[], None),\n         None => false,\n     }\n }"}, {"sha": "d2f794def0cf6f4b727eefc6da0bbcf5c6a8439b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -420,7 +420,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr, left: bool, op: S\n         None => return,\n     };\n \n-    if !implements_trait(cx, arg_ty, partial_eq_trait_id, vec![other_ty]) {\n+    if !implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty], None) {\n         return;\n     }\n "}, {"sha": "ece7e130c5fbeab688638a2b452d3ad7ec877b54", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     same_tys(cx, self_ty, return_ty(cx, id), id),\n                     let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT),\n-                    !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n+                    !implements_trait(cx, self_ty, default_trait_id, &[], None)\n                 ], {\n                     if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n                         span_lint_and_then(cx,\n@@ -156,7 +156,7 @@ fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_\n         ty::TyAdt(adt_def, substs) if adt_def.is_struct() => {\n             for field in adt_def.all_fields() {\n                 let f_ty = field.ty(cx.tcx, substs);\n-                if !implements_trait(cx, f_ty, default_trait_id, Vec::new()) {\n+                if !implements_trait(cx, f_ty, default_trait_id, &[], None) {\n                     return None;\n                 }\n             }"}, {"sha": "e6296154126914fe9f96e2a9847d5fe458d5976e", "filename": "clippy_lints/src/should_assert_eq.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshould_assert_eq.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -0,0 +1,54 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{is_direct_expn_of, implements_trait, span_lint};\n+\n+/// **What it does:** Checks for `assert!(x == y)` which can be better written\n+/// as `assert_eq!(x, y)` if `x` and `y` implement `Debug` trait.\n+///\n+/// **Why is this bad?** `assert_eq` provides better assertion failure reporting.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let (x, y) = (1, 2);\n+///\n+/// assert!(x == y);  // assertion failed: x == y\n+/// assert_eq!(x, y); // assertion failed: `(left == right)` (left: `1`, right: `2`)\n+/// ```\n+declare_lint! {\n+    pub SHOULD_ASSERT_EQ,\n+    Warn,\n+    \"using `assert` macro for asserting equality\"\n+}\n+\n+pub struct ShouldAssertEq;\n+\n+impl LintPass for ShouldAssertEq {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![SHOULD_ASSERT_EQ]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ShouldAssertEq {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if_let_chain! {[\n+            let ExprIf(ref cond, ..) = e.node,\n+            let ExprUnary(UnOp::UnNot, ref cond) = cond.node,\n+            let ExprBinary(ref binop, ref expr1, ref expr2) = cond.node,\n+            binop.node == BinOp_::BiEq,\n+            is_direct_expn_of(cx, e.span, \"assert\").is_some(),\n+            let Some(debug_trait) = cx.tcx.lang_items.debug_trait(),\n+        ], {\n+            let ty1 = cx.tables.expr_ty(expr1);\n+            let ty2 = cx.tables.expr_ty(expr2);\n+\n+            let parent = cx.tcx.hir.get_parent(e.id);\n+\n+            if implements_trait(cx, ty1, debug_trait, &[], Some(parent)) &&\n+                implements_trait(cx, ty2, debug_trait, &[], Some(parent)) {\n+                span_lint(cx, SHOULD_ASSERT_EQ, e.span, \"use `assert_eq` for better reporting\");\n+            }\n+        }}\n+    }\n+}"}, {"sha": "ce581febfe41a45689463c0fa25b7930a5c308ee", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -317,13 +317,19 @@ pub fn implements_trait<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     ty: ty::Ty<'tcx>,\n     trait_id: DefId,\n-    ty_params: Vec<ty::Ty<'tcx>>\n+    ty_params: &[ty::Ty<'tcx>],\n+    parent_node_id: Option<NodeId>\n ) -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n     let ty = cx.tcx.erase_regions(&ty);\n-    cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n-        let obligation = cx.tcx.predicate_for_trait_def(traits::ObligationCause::dummy(), trait_id, 0, ty, &ty_params);\n+    let mut b = if let Some(id) = parent_node_id {\n+        cx.tcx.infer_ctxt(BodyId { node_id: id }, Reveal::All)\n+    } else {\n+        cx.tcx.infer_ctxt((), Reveal::All)\n+    };\n+    b.enter(|infcx| {\n+        let obligation = cx.tcx.predicate_for_trait_def(traits::ObligationCause::dummy(), trait_id, 0, ty, ty_params);\n \n         traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n     })"}, {"sha": "024dd9c242ce3a402b01e3a64d5a0491ee518d68", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -92,5 +92,5 @@ fn main() {\n     let a: *const f32 = xs.as_ptr();\n     let b: *const f32 = xs.as_ptr();\n \n-    assert!(a == b); // no errors\n+    assert_eq!(a, b); // no errors\n }"}, {"sha": "5abf35664259fed009d95de40a54691fbc3c7aa6", "filename": "tests/ui/should_assert_eq.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -0,0 +1,23 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(should_assert_eq)]\n+\n+#[derive(PartialEq, Eq)]\n+struct NonDebug(i32);\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Debug(i32);\n+\n+fn main() {\n+    assert!(1 == 2);\n+    assert!(Debug(1) == Debug(2));\n+    assert!(NonDebug(1) == NonDebug(1)); // ok\n+\n+    test_generic(1, 2, 3, 4);\n+}\n+\n+fn test_generic<T: std::fmt::Debug + Eq, U: Eq>(x: T, y: T, z: U, w: U) {\n+    assert!(x == y);\n+    assert!(z == w); // ok\n+}"}, {"sha": "68d287fda8d54f84c123105d6f58afd1c4dd6023", "filename": "tests/ui/should_assert_eq.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a227c75777bf154ac8fb1673d970133e9a02d56/tests%2Fui%2Fshould_assert_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a227c75777bf154ac8fb1673d970133e9a02d56/tests%2Fui%2Fshould_assert_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.stderr?ref=8a227c75777bf154ac8fb1673d970133e9a02d56", "patch": "@@ -0,0 +1,31 @@\n+error: use `assert_eq` for better reporting\n+  --> $DIR/should_assert_eq.rs:13:5\n+   |\n+13 |     assert!(1 == 2);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/should_assert_eq.rs:4:9\n+   |\n+4  | #![deny(should_assert_eq)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: use `assert_eq` for better reporting\n+  --> $DIR/should_assert_eq.rs:14:5\n+   |\n+14 |     assert!(Debug(1) == Debug(2));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: use `assert_eq` for better reporting\n+  --> $DIR/should_assert_eq.rs:21:5\n+   |\n+21 |     assert!(x == y);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to 3 previous errors\n+"}]}