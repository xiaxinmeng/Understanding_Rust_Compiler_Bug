{"sha": "99b8a671981eb9bf2c624027940bf9ae4cd23087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YjhhNjcxOTgxZWI5YmYyYzYyNDAyNzk0MGJmOWFlNGNkMjMwODc=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-23T01:38:14Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-24T20:22:28Z"}, "message": "Fix false positive with `new_ret_no_self` when returning `Self` with different generic arguments", "tree": {"sha": "cf493f46a8d0fe7498077ac5863240a05f33bf73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf493f46a8d0fe7498077ac5863240a05f33bf73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b8a671981eb9bf2c624027940bf9ae4cd23087", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBbn4gACgkQ2lnoZDo37QYpMgEAyTyJnYbdpN5hHVKDuuD8ydKw\nyhvFEczSNCS6aMg5pHwA/1tCU6BHHKanvxtx/RJXbZnuwKEURPqCXMPj7Ilt92sI\n=eXUy\n-----END PGP SIGNATURE-----", "payload": "tree cf493f46a8d0fe7498077ac5863240a05f33bf73\nparent 917b538c6857892a925a4e5d7c7cd448ad3488ab\nauthor Jason Newcomb <jsnewcomb@pm.me> 1616463494 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1616617348 -0400\n\nFix false positive with `new_ret_no_self` when returning `Self` with different generic arguments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b8a671981eb9bf2c624027940bf9ae4cd23087", "html_url": "https://github.com/rust-lang/rust/commit/99b8a671981eb9bf2c624027940bf9ae4cd23087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b8a671981eb9bf2c624027940bf9ae4cd23087/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917b538c6857892a925a4e5d7c7cd448ad3488ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/917b538c6857892a925a4e5d7c7cd448ad3488ab", "html_url": "https://github.com/rust-lang/rust/commit/917b538c6857892a925a4e5d7c7cd448ad3488ab"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "b6be77b03e573621e18d502c2abdd2507c46b0ae", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99b8a671981eb9bf2c624027940bf9ae4cd23087/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b8a671981eb9bf2c624027940bf9ae4cd23087/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=99b8a671981eb9bf2c624027940bf9ae4cd23087", "patch": "@@ -61,7 +61,7 @@ mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n-use clippy_utils::ty::{contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::{contains_adt, contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{contains_return, get_trait_def_id, in_macro, iter_input_pats, method_calls, paths, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n@@ -1916,7 +1916,11 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             let ret_ty = return_ty(cx, impl_item.hir_id());\n \n             // walk the return type and check for Self (this does not check associated types)\n-            if contains_ty(ret_ty, self_ty) {\n+            if let Some(self_adt) = self_ty.ty_adt_def() {\n+                if contains_adt(ret_ty, self_adt) {\n+                    return;\n+                }\n+            } else if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -1926,7 +1930,11 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n-                        if contains_ty(projection_predicate.ty, self_ty) {\n+                        if let Some(self_adt) = self_ty.ty_adt_def() {\n+                            if contains_adt(projection_predicate.ty, self_adt) {\n+                                return;\n+                            }\n+                        } else if contains_ty(projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }"}, {"sha": "b9724efb04f143c1175a82a952b4ccb5d4da2284", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99b8a671981eb9bf2c624027940bf9ae4cd23087/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b8a671981eb9bf2c624027940bf9ae4cd23087/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=99b8a671981eb9bf2c624027940bf9ae4cd23087", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::{TyKind, Unsafety};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, IntTy, Ty, TypeFoldable, UintTy};\n+use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TypeFoldable, UintTy};\n use rustc_span::sym;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n@@ -43,6 +43,15 @@ pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n     })\n }\n \n+/// Walks into `ty` and returns `true` if any inner type is any instance of the given abstract data\n+/// type.`\n+pub fn contains_adt(ty: Ty<'_>, adt: &AdtDef) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n+        GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n+        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+    })\n+}\n+\n /// Returns true if ty has `iter` or `iter_mut` methods\n pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`"}, {"sha": "2f315ffe2983ebebc506b2a5eb33bf7d2f87647b", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99b8a671981eb9bf2c624027940bf9ae4cd23087/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b8a671981eb9bf2c624027940bf9ae4cd23087/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=99b8a671981eb9bf2c624027940bf9ae4cd23087", "patch": "@@ -340,3 +340,13 @@ mod issue5435 {\n         }\n     }\n }\n+\n+// issue #1724\n+struct RetOtherSelf<T>(T);\n+struct RetOtherSelfWrapper<T>(T);\n+\n+impl RetOtherSelf<T> {\n+    fn new(t: T) -> RetOtherSelf<RetOtherSelfWrapper<T>> {\n+        RetOtherSelf(RetOtherSelfWrapper(t))\n+    }\n+}"}]}