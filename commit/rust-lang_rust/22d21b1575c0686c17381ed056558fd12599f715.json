{"sha": "22d21b1575c0686c17381ed056558fd12599f715", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDIxYjE1NzVjMDY4NmMxNzM4MWVkMDU2NTU4ZmQxMjU5OWY3MTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-13T13:03:05Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-13T13:03:05Z"}, "message": "Remove unused macro argument", "tree": {"sha": "46b239dca66ba0cdfb360dbe4fe2b163e163d96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b239dca66ba0cdfb360dbe4fe2b163e163d96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d21b1575c0686c17381ed056558fd12599f715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d21b1575c0686c17381ed056558fd12599f715", "html_url": "https://github.com/rust-lang/rust/commit/22d21b1575c0686c17381ed056558fd12599f715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d21b1575c0686c17381ed056558fd12599f715/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c946c2539e9690fab5dbf7ac217ec696ac263cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c2539e9690fab5dbf7ac217ec696ac263cf3", "html_url": "https://github.com/rust-lang/rust/commit/c946c2539e9690fab5dbf7ac217ec696ac263cf3"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "4ee5d86b8f8ebcf1263aebd34eaae59a6dc43179", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/22d21b1575c0686c17381ed056558fd12599f715/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21b1575c0686c17381ed056558fd12599f715/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=22d21b1575c0686c17381ed056558fd12599f715", "patch": "@@ -395,7 +395,7 @@ pub struct EarlyContext<'a> {\n }\n \n /// Convenience macro for calling a `LintPass` method on every pass in the context.\n-macro_rules! run_lints { ($cx:expr, $f:ident, $ps:ident, $($args:expr),*) => ({\n+macro_rules! run_lints { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     // Move the vector of passes out of `$cx` so that we can\n     // iterate over it mutably while passing `$cx` to the methods.\n     let mut passes = $cx.lint_sess_mut().passes.take().unwrap();\n@@ -558,12 +558,12 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n \n     fn enter_attrs(&mut self, attrs: &'tcx [ast::Attribute]) {\n         debug!(\"late context: enter_attrs({:?})\", attrs);\n-        run_lints!(self, enter_lint_attrs, late_passes, attrs);\n+        run_lints!(self, enter_lint_attrs, attrs);\n     }\n \n     fn exit_attrs(&mut self, attrs: &'tcx [ast::Attribute]) {\n         debug!(\"late context: exit_attrs({:?})\", attrs);\n-        run_lints!(self, exit_lint_attrs, late_passes, attrs);\n+        run_lints!(self, exit_lint_attrs, attrs);\n     }\n \n     fn lookup<S: Into<MultiSpan>>(&self,\n@@ -615,12 +615,12 @@ impl<'a> LintContext<'a> for EarlyContext<'a> {\n \n     fn enter_attrs(&mut self, attrs: &'a [ast::Attribute]) {\n         debug!(\"early context: enter_attrs({:?})\", attrs);\n-        run_lints!(self, enter_lint_attrs, early_passes, attrs);\n+        run_lints!(self, enter_lint_attrs, attrs);\n     }\n \n     fn exit_attrs(&mut self, attrs: &'a [ast::Attribute]) {\n         debug!(\"early context: exit_attrs({:?})\", attrs);\n-        run_lints!(self, exit_lint_attrs, early_passes, attrs);\n+        run_lints!(self, exit_lint_attrs, attrs);\n     }\n \n     fn lookup<S: Into<MultiSpan>>(&self,\n@@ -686,19 +686,19 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body) {\n-        run_lints!(self, check_body, late_passes, body);\n+        run_lints!(self, check_body, body);\n         hir_visit::walk_body(self, body);\n-        run_lints!(self, check_body_post, late_passes, body);\n+        run_lints!(self, check_body_post, body);\n     }\n \n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n         let generics = self.generics.take();\n         self.generics = it.node.generics();\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n             cx.with_param_env(it.id, |cx| {\n-                run_lints!(cx, check_item, late_passes, it);\n+                run_lints!(cx, check_item, it);\n                 hir_visit::walk_item(cx, it);\n-                run_lints!(cx, check_item_post, late_passes, it);\n+                run_lints!(cx, check_item_post, it);\n             });\n         });\n         self.generics = generics;\n@@ -707,23 +707,23 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n             cx.with_param_env(it.id, |cx| {\n-                run_lints!(cx, check_foreign_item, late_passes, it);\n+                run_lints!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n-                run_lints!(cx, check_foreign_item_post, late_passes, it);\n+                run_lints!(cx, check_foreign_item_post, it);\n             });\n         })\n     }\n \n     fn visit_pat(&mut self, p: &'tcx hir::Pat) {\n-        run_lints!(self, check_pat, late_passes, p);\n+        run_lints!(self, check_pat, p);\n         hir_visit::walk_pat(self, p);\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr) {\n         self.with_lint_attrs(e.id, &e.attrs, |cx| {\n-            run_lints!(cx, check_expr, late_passes, e);\n+            run_lints!(cx, check_expr, e);\n             hir_visit::walk_expr(cx, e);\n-            run_lints!(cx, check_expr_post, late_passes, e);\n+            run_lints!(cx, check_expr_post, e);\n         })\n     }\n \n@@ -733,7 +733,7 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         // - local\n         // - expression\n         // so we keep track of lint levels there\n-        run_lints!(self, check_stmt, late_passes, s);\n+        run_lints!(self, check_stmt, s);\n         hir_visit::walk_stmt(self, s);\n     }\n \n@@ -744,9 +744,9 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         let old_tables = self.tables;\n         self.tables = self.tcx.body_tables(body_id);\n         let body = self.tcx.hir.body(body_id);\n-        run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n+        run_lints!(self, check_fn, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n-        run_lints!(self, check_fn_post, late_passes, fk, decl, body, span, id);\n+        run_lints!(self, check_fn_post, fk, decl, body, span, id);\n         self.tables = old_tables;\n     }\n \n@@ -756,14 +756,14 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n                         g: &'tcx hir::Generics,\n                         item_id: ast::NodeId,\n                         _: Span) {\n-        run_lints!(self, check_struct_def, late_passes, s, name, g, item_id);\n+        run_lints!(self, check_struct_def, s, name, g, item_id);\n         hir_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, late_passes, s, name, g, item_id);\n+        run_lints!(self, check_struct_def_post, s, name, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_lints!(cx, check_struct_field, late_passes, s);\n+            run_lints!(cx, check_struct_field, s);\n             hir_visit::walk_struct_field(cx, s);\n         })\n     }\n@@ -773,68 +773,68 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n                      g: &'tcx hir::Generics,\n                      item_id: ast::NodeId) {\n         self.with_lint_attrs(v.node.data.id(), &v.node.attrs, |cx| {\n-            run_lints!(cx, check_variant, late_passes, v, g);\n+            run_lints!(cx, check_variant, v, g);\n             hir_visit::walk_variant(cx, v, g, item_id);\n-            run_lints!(cx, check_variant_post, late_passes, v, g);\n+            run_lints!(cx, check_variant_post, v, g);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n-        run_lints!(self, check_ty, late_passes, t);\n+        run_lints!(self, check_ty, t);\n         hir_visit::walk_ty(self, t);\n     }\n \n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n-        run_lints!(self, check_name, late_passes, sp, name);\n+        run_lints!(self, check_name, sp, name);\n     }\n \n     fn visit_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: ast::NodeId) {\n-        run_lints!(self, check_mod, late_passes, m, s, n);\n+        run_lints!(self, check_mod, m, s, n);\n         hir_visit::walk_mod(self, m, n);\n-        run_lints!(self, check_mod_post, late_passes, m, s, n);\n+        run_lints!(self, check_mod_post, m, s, n);\n     }\n \n     fn visit_local(&mut self, l: &'tcx hir::Local) {\n         self.with_lint_attrs(l.id, &l.attrs, |cx| {\n-            run_lints!(cx, check_local, late_passes, l);\n+            run_lints!(cx, check_local, l);\n             hir_visit::walk_local(cx, l);\n         })\n     }\n \n     fn visit_block(&mut self, b: &'tcx hir::Block) {\n-        run_lints!(self, check_block, late_passes, b);\n+        run_lints!(self, check_block, b);\n         hir_visit::walk_block(self, b);\n-        run_lints!(self, check_block_post, late_passes, b);\n+        run_lints!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'tcx hir::Arm) {\n-        run_lints!(self, check_arm, late_passes, a);\n+        run_lints!(self, check_arm, a);\n         hir_visit::walk_arm(self, a);\n     }\n \n     fn visit_decl(&mut self, d: &'tcx hir::Decl) {\n-        run_lints!(self, check_decl, late_passes, d);\n+        run_lints!(self, check_decl, d);\n         hir_visit::walk_decl(self, d);\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam) {\n-        run_lints!(self, check_generic_param, late_passes, p);\n+        run_lints!(self, check_generic_param, p);\n         hir_visit::walk_generic_param(self, p);\n     }\n \n     fn visit_generics(&mut self, g: &'tcx hir::Generics) {\n-        run_lints!(self, check_generics, late_passes, g);\n+        run_lints!(self, check_generics, g);\n         hir_visit::walk_generics(self, g);\n     }\n \n     fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate) {\n-        run_lints!(self, check_where_predicate, late_passes, p);\n+        run_lints!(self, check_where_predicate, p);\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'tcx hir::PolyTraitRef,\n                             m: hir::TraitBoundModifier) {\n-        run_lints!(self, check_poly_trait_ref, late_passes, t, m);\n+        run_lints!(self, check_poly_trait_ref, t, m);\n         hir_visit::walk_poly_trait_ref(self, t, m);\n     }\n \n@@ -843,9 +843,9 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         self.generics = Some(&trait_item.generics);\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             cx.with_param_env(trait_item.id, |cx| {\n-                run_lints!(cx, check_trait_item, late_passes, trait_item);\n+                run_lints!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n-                run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n+                run_lints!(cx, check_trait_item_post, trait_item);\n             });\n         });\n         self.generics = generics;\n@@ -856,71 +856,71 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         self.generics = Some(&impl_item.generics);\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n             cx.with_param_env(impl_item.id, |cx| {\n-                run_lints!(cx, check_impl_item, late_passes, impl_item);\n+                run_lints!(cx, check_impl_item, impl_item);\n                 hir_visit::walk_impl_item(cx, impl_item);\n-                run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n+                run_lints!(cx, check_impl_item_post, impl_item);\n             });\n         });\n         self.generics = generics;\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n-        run_lints!(self, check_lifetime, late_passes, lt);\n+        run_lints!(self, check_lifetime, lt);\n         hir_visit::walk_lifetime(self, lt);\n     }\n \n     fn visit_path(&mut self, p: &'tcx hir::Path, id: ast::NodeId) {\n-        run_lints!(self, check_path, late_passes, p, id);\n+        run_lints!(self, check_path, p, id);\n         hir_visit::walk_path(self, p);\n     }\n \n     fn visit_attribute(&mut self, attr: &'tcx ast::Attribute) {\n-        run_lints!(self, check_attribute, late_passes, attr);\n+        run_lints!(self, check_attribute, attr);\n     }\n }\n \n impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     fn visit_item(&mut self, it: &'a ast::Item) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_lints!(cx, check_item, early_passes, it);\n+            run_lints!(cx, check_item, it);\n             ast_visit::walk_item(cx, it);\n-            run_lints!(cx, check_item_post, early_passes, it);\n+            run_lints!(cx, check_item_post, it);\n         })\n     }\n \n     fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_lints!(cx, check_foreign_item, early_passes, it);\n+            run_lints!(cx, check_foreign_item, it);\n             ast_visit::walk_foreign_item(cx, it);\n-            run_lints!(cx, check_foreign_item_post, early_passes, it);\n+            run_lints!(cx, check_foreign_item_post, it);\n         })\n     }\n \n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n-        run_lints!(self, check_pat, early_passes, p);\n+        run_lints!(self, check_pat, p);\n         self.check_id(p.id);\n         ast_visit::walk_pat(self, p);\n     }\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         self.with_lint_attrs(e.id, &e.attrs, |cx| {\n-            run_lints!(cx, check_expr, early_passes, e);\n+            run_lints!(cx, check_expr, e);\n             ast_visit::walk_expr(cx, e);\n         })\n     }\n \n     fn visit_stmt(&mut self, s: &'a ast::Stmt) {\n-        run_lints!(self, check_stmt, early_passes, s);\n+        run_lints!(self, check_stmt, s);\n         self.check_id(s.id);\n         ast_visit::walk_stmt(self, s);\n     }\n \n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, decl: &'a ast::FnDecl,\n                 span: Span, id: ast::NodeId) {\n-        run_lints!(self, check_fn, early_passes, fk, decl, span, id);\n+        run_lints!(self, check_fn, fk, decl, span, id);\n         self.check_id(id);\n         ast_visit::walk_fn(self, fk, decl, span);\n-        run_lints!(self, check_fn_post, early_passes, fk, decl, span, id);\n+        run_lints!(self, check_fn_post, fk, decl, span, id);\n     }\n \n     fn visit_variant_data(&mut self,\n@@ -929,116 +929,116 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n                         g: &'a ast::Generics,\n                         item_id: ast::NodeId,\n                         _: Span) {\n-        run_lints!(self, check_struct_def, early_passes, s, ident, g, item_id);\n+        run_lints!(self, check_struct_def, s, ident, g, item_id);\n         self.check_id(s.id());\n         ast_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, early_passes, s, ident, g, item_id);\n+        run_lints!(self, check_struct_def_post, s, ident, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &'a ast::StructField) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_lints!(cx, check_struct_field, early_passes, s);\n+            run_lints!(cx, check_struct_field, s);\n             ast_visit::walk_struct_field(cx, s);\n         })\n     }\n \n     fn visit_variant(&mut self, v: &'a ast::Variant, g: &'a ast::Generics, item_id: ast::NodeId) {\n         self.with_lint_attrs(item_id, &v.node.attrs, |cx| {\n-            run_lints!(cx, check_variant, early_passes, v, g);\n+            run_lints!(cx, check_variant, v, g);\n             ast_visit::walk_variant(cx, v, g, item_id);\n-            run_lints!(cx, check_variant_post, early_passes, v, g);\n+            run_lints!(cx, check_variant_post, v, g);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &'a ast::Ty) {\n-        run_lints!(self, check_ty, early_passes, t);\n+        run_lints!(self, check_ty, t);\n         self.check_id(t.id);\n         ast_visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, ident: ast::Ident) {\n-        run_lints!(self, check_ident, early_passes, ident);\n+        run_lints!(self, check_ident, ident);\n     }\n \n     fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, _a: &[ast::Attribute], n: ast::NodeId) {\n-        run_lints!(self, check_mod, early_passes, m, s, n);\n+        run_lints!(self, check_mod, m, s, n);\n         self.check_id(n);\n         ast_visit::walk_mod(self, m);\n-        run_lints!(self, check_mod_post, early_passes, m, s, n);\n+        run_lints!(self, check_mod_post, m, s, n);\n     }\n \n     fn visit_local(&mut self, l: &'a ast::Local) {\n         self.with_lint_attrs(l.id, &l.attrs, |cx| {\n-            run_lints!(cx, check_local, early_passes, l);\n+            run_lints!(cx, check_local, l);\n             ast_visit::walk_local(cx, l);\n         })\n     }\n \n     fn visit_block(&mut self, b: &'a ast::Block) {\n-        run_lints!(self, check_block, early_passes, b);\n+        run_lints!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n-        run_lints!(self, check_block_post, early_passes, b);\n+        run_lints!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n-        run_lints!(self, check_arm, early_passes, a);\n+        run_lints!(self, check_arm, a);\n         ast_visit::walk_arm(self, a);\n     }\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n-        run_lints!(self, check_expr_post, early_passes, e);\n+        run_lints!(self, check_expr_post, e);\n     }\n \n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n-        run_lints!(self, check_generic_param, early_passes, param);\n+        run_lints!(self, check_generic_param, param);\n         ast_visit::walk_generic_param(self, param);\n     }\n \n     fn visit_generics(&mut self, g: &'a ast::Generics) {\n-        run_lints!(self, check_generics, early_passes, g);\n+        run_lints!(self, check_generics, g);\n         ast_visit::walk_generics(self, g);\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n-        run_lints!(self, check_where_predicate, early_passes, p);\n+        run_lints!(self, check_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {\n-        run_lints!(self, check_poly_trait_ref, early_passes, t, m);\n+        run_lints!(self, check_poly_trait_ref, t, m);\n         ast_visit::walk_poly_trait_ref(self, t, m);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) {\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n-            run_lints!(cx, check_trait_item, early_passes, trait_item);\n+            run_lints!(cx, check_trait_item, trait_item);\n             ast_visit::walk_trait_item(cx, trait_item);\n-            run_lints!(cx, check_trait_item_post, early_passes, trait_item);\n+            run_lints!(cx, check_trait_item_post, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'a ast::ImplItem) {\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n-            run_lints!(cx, check_impl_item, early_passes, impl_item);\n+            run_lints!(cx, check_impl_item, impl_item);\n             ast_visit::walk_impl_item(cx, impl_item);\n-            run_lints!(cx, check_impl_item_post, early_passes, impl_item);\n+            run_lints!(cx, check_impl_item_post, impl_item);\n         });\n     }\n \n     fn visit_lifetime(&mut self, lt: &'a ast::Lifetime) {\n-        run_lints!(self, check_lifetime, early_passes, lt);\n+        run_lints!(self, check_lifetime, lt);\n         self.check_id(lt.id);\n     }\n \n     fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) {\n-        run_lints!(self, check_path, early_passes, p, id);\n+        run_lints!(self, check_path, p, id);\n         self.check_id(id);\n         ast_visit::walk_path(self, p);\n     }\n \n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n-        run_lints!(self, check_attribute, early_passes, attr);\n+        run_lints!(self, check_attribute, attr);\n     }\n \n     fn visit_mac_def(&mut self, _mac: &'a ast::MacroDef, id: ast::NodeId) {\n@@ -1069,11 +1069,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n-        run_lints!(cx, check_crate, late_passes, krate);\n+        run_lints!(cx, check_crate, krate);\n \n         hir_visit::walk_crate(cx, krate);\n \n-        run_lints!(cx, check_crate_post, late_passes, krate);\n+        run_lints!(cx, check_crate_post, krate);\n     });\n \n     // Put the lint store levels and passes back in the session.\n@@ -1087,11 +1087,11 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n-        run_lints!(cx, check_crate, early_passes, krate);\n+        run_lints!(cx, check_crate, krate);\n \n         ast_visit::walk_crate(cx, krate);\n \n-        run_lints!(cx, check_crate_post, early_passes, krate);\n+        run_lints!(cx, check_crate_post, krate);\n     });\n \n     // Put the lint store levels and passes back in the session."}]}