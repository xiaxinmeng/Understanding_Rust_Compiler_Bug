{"sha": "4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "node_id": "C_kwDOAAsO6NoAKDQ1OTZmNGY4YjU2NWJkZDAyZDNiOTlkMWFiMTJmZjA5MTQ2YTkzZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T03:40:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T03:40:22Z"}, "message": "Auto merge of #103787 - notriddle:rollup-q1vmxsb, r=notriddle\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #97971 (Enable varargs support for calling conventions other than C or cdecl )\n - #101428 (Add mir building test directory)\n - #101944 (rustdoc: clean up `#toggle-all-docs`)\n - #102101 (check lld version to choose correct option to disable multi-threading in tests)\n - #102689 (Add a tier 3 target for the Sony PlayStation 1)\n - #103746 (rustdoc: add support for incoherent impls on structs and traits)\n - #103758 (Add regression test for reexports in search results)\n - #103764 (All verbosity checks in `PrettyPrinter` now go through `PrettyPrinter::should_print_verbose`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d8156bd3f499469f8309042782548ffd0749852a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8156bd3f499469f8309042782548ffd0749852a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "html_url": "https://github.com/rust-lang/rust/commit/4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d726c8467c06088d5d4488edf6b015ec9698c1ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d726c8467c06088d5d4488edf6b015ec9698c1ea", "html_url": "https://github.com/rust-lang/rust/commit/d726c8467c06088d5d4488edf6b015ec9698c1ea"}, {"sha": "e6ffd96e41ade1cdc5c39ddfc788615c46172f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ffd96e41ade1cdc5c39ddfc788615c46172f4f", "html_url": "https://github.com/rust-lang/rust/commit/e6ffd96e41ade1cdc5c39ddfc788615c46172f4f"}], "stats": {"total": 735, "additions": 547, "deletions": 188}, "files": [{"sha": "b15606baee5882b4e9d73acc0d5b797e2c90b261", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::definitions::DisambiguatedDefPathData;\n use rustc_middle::mir::interpret::{Allocation, ConstAllocation};\n use rustc_middle::ty::{\n     self,\n-    print::{with_no_verbose_constants, PrettyPrinter, Print, Printer},\n+    print::{PrettyPrinter, Print, Printer},\n     subst::{GenericArg, GenericArgKind},\n     Ty, TyCtxt,\n };\n@@ -179,6 +179,11 @@ impl<'tcx> PrettyPrinter<'tcx> for AbsolutePathPrinter<'tcx> {\n \n         Ok(self)\n     }\n+\n+    fn should_print_verbose(&self) -> bool {\n+        // `std::any::type_name` should never print verbose type names\n+        false\n+    }\n }\n \n impl Write for AbsolutePathPrinter<'_> {\n@@ -190,9 +195,7 @@ impl Write for AbsolutePathPrinter<'_> {\n \n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n-    let path = with_no_verbose_constants!(\n-        AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path\n-    );\n+    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n     let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n     tcx.intern_const_alloc(alloc)\n }"}, {"sha": "7900f1500489e1122eb5f16ad87e8fc75fe72673", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -388,6 +388,9 @@ declare_features! (\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n+    /// Allows using `efiapi`, `sysv64` and `win64` as calling convention\n+    /// for functions with varargs.\n+    (active, extended_varargs_abi_support, \"1.65.0\", Some(100189), None),\n     /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n     /// Allows the use of `#[ffi_const]` on foreign functions."}, {"sha": "bd1a461b93522235cb2b6423a48da8f0f11c4dfa", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -106,7 +106,7 @@ use rustc_middle::middle;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util;\n-use rustc_session::config::EntryFnType;\n+use rustc_session::{config::EntryFnType, parse::feature_err};\n use rustc_span::{symbol::sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n@@ -118,20 +118,40 @@ use astconv::AstConv;\n use bounds::Bounds;\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n-    match (decl.c_variadic, abi) {\n-        // The function has the correct calling convention, or isn't a \"C-variadic\" function.\n-        (false, _) | (true, Abi::C { .. }) | (true, Abi::Cdecl { .. }) => {}\n-        // The function is a \"C-variadic\" function with an incorrect calling convention.\n-        (true, _) => {\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n+    const ERROR_HEAD: &str = \"C-variadic function must have a compatible calling convention\";\n+    const CONVENTIONS_UNSTABLE: &str = \"`C`, `cdecl`, `win64`, `sysv64` or `efiapi`\";\n+    const CONVENTIONS_STABLE: &str = \"`C` or `cdecl`\";\n+    const UNSTABLE_EXPLAIN: &str =\n+        \"using calling conventions other than `C` or `cdecl` for varargs functions is unstable\";\n+\n+    if !decl.c_variadic || matches!(abi, Abi::C { .. } | Abi::Cdecl { .. }) {\n+        return;\n+    }\n+\n+    let extended_abi_support = tcx.features().extended_varargs_abi_support;\n+    let conventions = match (extended_abi_support, abi.supports_varargs()) {\n+        // User enabled additional ABI support for varargs and function ABI matches those ones.\n+        (true, true) => return,\n+\n+        // Using this ABI would be ok, if the feature for additional ABI support was enabled.\n+        // Return CONVENTIONS_STABLE, because we want the other error to look the same.\n+        (false, true) => {\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::extended_varargs_abi_support,\n                 span,\n-                E0045,\n-                \"C-variadic function must have C or cdecl calling convention\"\n-            );\n-            err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n+                UNSTABLE_EXPLAIN,\n+            )\n+            .emit();\n+            CONVENTIONS_STABLE\n         }\n-    }\n+\n+        (false, false) => CONVENTIONS_STABLE,\n+        (true, false) => CONVENTIONS_UNSTABLE,\n+    };\n+\n+    let mut err = struct_span_err!(tcx.sess, span, E0045, \"{}, like {}\", ERROR_HEAD, conventions);\n+    err.span_label(span, ERROR_HEAD).emit();\n }\n \n fn require_same_types<'tcx>("}, {"sha": "f07c60af248290c25e4eb3c830eaad1f9319b882", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -63,7 +63,6 @@ thread_local! {\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n-    static NO_VERBOSE_CONSTANTS: Cell<bool> = const { Cell::new(false) };\n }\n \n macro_rules! define_helper {\n@@ -118,9 +117,6 @@ define_helper!(\n     /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n     /// visible (public) reexports of types as paths.\n     fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n-    /// Prevent verbose printing of constants. Verbose printing of constants is\n-    /// never desirable in some contexts like `std::any::type_name`.\n-    fn with_no_verbose_constants(NoVerboseConstantsGuard, NO_VERBOSE_CONSTANTS);\n );\n \n /// The \"region highlights\" are used to control region printing during\n@@ -600,7 +596,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n             ty::Infer(infer_ty) => {\n-                let verbose = self.tcx().sess.verbose();\n+                let verbose = self.should_print_verbose();\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     if let Some(name) = self.ty_infer_name(ty_vid) {\n                         p!(write(\"{}\", name))\n@@ -642,7 +638,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print_def_path(def_id, &[]));\n             }\n             ty::Projection(ref data) => {\n-                if !(self.tcx().sess.verbose() || NO_QUERIES.with(|q| q.get()))\n+                if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n                     && self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder\n                 {\n                     return self.pretty_print_opaque_impl_type(data.item_def_id, data.substs);\n@@ -658,7 +654,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // only affect certain debug messages (e.g. messages printed\n                 // from `rustc_middle::ty` during the computation of `tcx.predicates_of`),\n                 // and should have no effect on any compiler output.\n-                if self.tcx().sess.verbose() || NO_QUERIES.with(|q| q.get()) {\n+                if self.should_print_verbose() || NO_QUERIES.with(|q| q.get()) {\n                     p!(write(\"Opaque({:?}, {:?})\", def_id, substs));\n                     return Ok(self);\n                 }\n@@ -689,7 +685,7 @@ pub trait PrettyPrinter<'tcx>:\n                     hir::Movability::Static => p!(\"static \"),\n                 }\n \n-                if !self.tcx().sess.verbose() {\n+                if !self.should_print_verbose() {\n                     p!(\"generator\");\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n@@ -725,7 +721,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Closure(did, substs) => {\n                 p!(write(\"[\"));\n-                if !self.tcx().sess.verbose() {\n+                if !self.should_print_verbose() {\n                     p!(write(\"closure\"));\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n@@ -763,7 +759,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");\n-                if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n+                if self.should_print_verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n@@ -1077,7 +1073,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                 // Special-case `Fn(...) -> ...` and re-sugar it.\n                 let fn_trait_kind = cx.tcx().fn_trait_kind_from_lang_item(principal.def_id);\n-                if !cx.tcx().sess.verbose() && fn_trait_kind.is_some() {\n+                if !cx.should_print_verbose() && fn_trait_kind.is_some() {\n                     if let ty::Tuple(tys) = principal.substs.type_at(0).kind() {\n                         let mut projections = predicates.projection_bounds();\n                         if let (Some(proj), None) = (projections.next(), projections.next()) {\n@@ -1185,7 +1181,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n+        if self.should_print_verbose() {\n             p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n             return Ok(self);\n         }\n@@ -1420,7 +1416,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n+        if self.should_print_verbose() {\n             p!(write(\"ValTree({:?}: \", valtree), print(ty), \")\");\n             return Ok(self);\n         }\n@@ -1564,6 +1560,10 @@ pub trait PrettyPrinter<'tcx>:\n             Ok(cx)\n         })\n     }\n+\n+    fn should_print_verbose(&self) -> bool {\n+        self.tcx().sess.verbose()\n+    }\n }\n \n // HACK(eddyb) boxed to avoid moving around a large struct by-value.\n@@ -1839,7 +1839,7 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        let verbose = self.tcx.sess.verbose();\n+        let verbose = self.should_print_verbose();\n         disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n \n         self.empty_path = false;\n@@ -1940,7 +1940,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n             return true;\n         }\n \n-        if self.tcx.sess.verbose() {\n+        if self.should_print_verbose() {\n             return true;\n         }\n \n@@ -2012,7 +2012,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             return Ok(self);\n         }\n \n-        if self.tcx.sess.verbose() {\n+        if self.should_print_verbose() {\n             p!(write(\"{:?}\", region));\n             return Ok(self);\n         }\n@@ -2218,7 +2218,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         // aren't named. Eventually, we might just want this as the default, but\n         // this is not *quite* right and changes the ordering of some output\n         // anyways.\n-        let (new_value, map) = if self.tcx().sess.verbose() {\n+        let (new_value, map) = if self.should_print_verbose() {\n             let regions: Vec<_> = value\n                 .bound_vars()\n                 .into_iter()"}, {"sha": "4791be1306c1b09235074c849503800298cf8ae6", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -288,7 +288,7 @@ fn mir_const<'tcx>(\n \n     let mut body = tcx.mir_built(def).steal();\n \n-    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    pass_manager::dump_mir_for_phase_change(tcx, &body);\n \n     pm::run_passes(\n         tcx,"}, {"sha": "bf5906741441dad8f301eff8ac2eca8188818189", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -845,7 +845,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n         span,\n     );\n \n-    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    crate::pass_manager::dump_mir_for_phase_change(tcx, &body);\n \n     body\n }"}, {"sha": "cccc4897ecca6b35a1454559a2be2228179123f9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -694,6 +694,7 @@ symbols! {\n         export_name,\n         expr,\n         extended_key_value_attributes,\n+        extended_varargs_abi_support,\n         extern_absolute_paths,\n         extern_crate_item_prelude,\n         extern_crate_self,"}, {"sha": "cb2a0c04c6aa8ba1f82af68cd23ac67742afe4de", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -40,6 +40,28 @@ pub enum Abi {\n     RustCold,\n }\n \n+impl Abi {\n+    pub fn supports_varargs(self) -> bool {\n+        // * C and Cdecl obviously support varargs.\n+        // * C can be based on SysV64 or Win64, so they must support varargs.\n+        // * EfiApi is based on Win64 or C, so it also supports it.\n+        //\n+        // * Stdcall does not, because it would be impossible for the callee to clean\n+        //   up the arguments. (callee doesn't know how many arguments are there)\n+        // * Same for Fastcall, Vectorcall and Thiscall.\n+        // * System can become Stdcall, so is also a no-no.\n+        // * Other calling conventions are related to hardware or the compiler itself.\n+        match self {\n+            Self::C { .. }\n+            | Self::Cdecl { .. }\n+            | Self::Win64 { .. }\n+            | Self::SysV64 { .. }\n+            | Self::EfiApi => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct AbiData {\n     abi: Abi,"}, {"sha": "12a66efdd46f9af10bd20ad8ed599a17247f4e27", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psx.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psx.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,37 @@\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"mipsel-sony-psx\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n+\n+        options: TargetOptions {\n+            os: \"none\".into(),\n+            env: \"psx\".into(),\n+            vendor: \"sony\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n+            cpu: \"mips1\".into(),\n+            executables: true,\n+            linker: Some(\"rust-lld\".into()),\n+            relocation_model: RelocModel::Static,\n+            exe_suffix: \".exe\".into(),\n+\n+            // PSX doesn't natively support floats.\n+            features: \"+soft-float\".into(),\n+\n+            // This should be 16 bits, but LLVM incorrectly tries emitting MIPS-II SYNC instructions\n+            // for atomic loads and stores. This crashes rustc so we have to disable the Atomic* API\n+            // until this is fixed upstream. See https://reviews.llvm.org/D122427#3420144 for more\n+            // info.\n+            max_atomic_width: Some(0),\n+\n+            // PSX does not support trap-on-condition instructions.\n+            llvm_args: cvs![\"-mno-check-zero-division\"],\n+            llvm_abiname: \"o32\".into(),\n+            panic_strategy: PanicStrategy::Abort,\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "72b088d663b1f0bafaf144cfe4a6273f3b71be4d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1222,6 +1222,7 @@ supported_targets! {\n     (\"armv7a-kmc-solid_asp3-eabihf\", armv7a_kmc_solid_asp3_eabihf),\n \n     (\"mipsel-sony-psp\", mipsel_sony_psp),\n+    (\"mipsel-sony-psx\", mipsel_sony_psx),\n     (\"mipsel-unknown-none\", mipsel_unknown_none),\n     (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n     (\"armv4t-none-eabi\", armv4t_none_eabi),"}, {"sha": "23828f4758d67db275cce6d942ecb6da11d962e9", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -55,13 +55,9 @@ fn main() {\n         arg.push(&linker);\n         cmd.arg(arg);\n     }\n-    if env::var_os(\"RUSTDOC_FUSE_LD_LLD\").is_some() {\n+    if let Ok(no_threads) = env::var(\"RUSTDOC_LLD_NO_THREADS\") {\n         cmd.arg(\"-Clink-arg=-fuse-ld=lld\");\n-        if cfg!(windows) {\n-            cmd.arg(\"-Clink-arg=-Wl,/threads:1\");\n-        } else {\n-            cmd.arg(\"-Clink-arg=-Wl,--threads=1\");\n-        }\n+        cmd.arg(format!(\"-Clink-arg=-Wl,{}\", no_threads));\n     }\n     // Cargo doesn't pass RUSTDOCFLAGS to proc_macros:\n     // https://github.com/rust-lang/cargo/issues/4423"}, {"sha": "f5def8ba8341f58b817afaedb9828e75a6ad0ff7", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1152,8 +1152,8 @@ impl Build {\n                 options[0] = Some(\"-Clink-arg=-fuse-ld=lld\".to_string());\n             }\n \n-            let threads = if target.contains(\"windows\") { \"/threads:1\" } else { \"--threads=1\" };\n-            options[1] = Some(format!(\"-Clink-arg=-Wl,{}\", threads));\n+            let no_threads = util::lld_flag_no_threads(target.contains(\"windows\"));\n+            options[1] = Some(format!(\"-Clink-arg=-Wl,{}\", no_threads));\n         }\n \n         IntoIterator::into_iter(options).flatten()"}, {"sha": "38fd2e933f86317e98f908dc2343257a27a8bcd8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -771,7 +771,10 @@ impl Step for RustdocTheme {\n             cmd.env(\"RUSTDOC_LINKER\", linker);\n         }\n         if builder.is_fuse_ld_lld(self.compiler.host) {\n-            cmd.env(\"RUSTDOC_FUSE_LD_LLD\", \"1\");\n+            cmd.env(\n+                \"RUSTDOC_LLD_NO_THREADS\",\n+                util::lld_flag_no_threads(self.compiler.host.contains(\"windows\")),\n+            );\n         }\n         try_run(builder, &mut cmd);\n     }"}, {"sha": "20c3801f0a50222cbcc792f98a2786a993d7b5c6", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -13,6 +13,7 @@ use std::time::{Instant, SystemTime, UNIX_EPOCH};\n \n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n+use crate::OnceCell;\n \n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n@@ -607,3 +608,16 @@ pub fn get_clang_cl_resource_dir(clang_cl_path: &str) -> PathBuf {\n     let clang_rt_dir = clang_rt_builtins.parent().expect(\"The clang lib folder should exist\");\n     clang_rt_dir.to_path_buf()\n }\n+\n+pub fn lld_flag_no_threads(is_windows: bool) -> &'static str {\n+    static LLD_NO_THREADS: OnceCell<(&'static str, &'static str)> = OnceCell::new();\n+    let (windows, other) = LLD_NO_THREADS.get_or_init(|| {\n+        let out = output(Command::new(\"lld\").arg(\"-flavor\").arg(\"ld\").arg(\"--version\"));\n+        let newer = match (out.find(char::is_numeric), out.find('.')) {\n+            (Some(b), Some(e)) => out.as_str()[b..e].parse::<i32>().ok().unwrap_or(14) > 10,\n+            _ => true,\n+        };\n+        if newer { (\"/threads:1\", \"--threads=1\") } else { (\"/no-threads\", \"--no-threads\") }\n+    });\n+    if is_windows { windows } else { other }\n+}"}, {"sha": "86bb2c0d3816ae2c94b3fb4ba11f299cdcae8c2c", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -29,6 +29,7 @@\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n+    - [mipsel-sony-psx](platform-support/mipsel-sony-psx.md)\n     - [nvptx64-nvidia-cuda](platform-support/nvptx64-nvidia-cuda.md)\n     - [riscv32imac-unknown-xous-elf](platform-support/riscv32imac-unknown-xous-elf.md)\n     - [*-pc-windows-gnullvm](platform-support/pc-windows-gnullvm.md)"}, {"sha": "3ae9872cf62d4e8304d7b34d1bbe63fffa347194", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -260,6 +260,7 @@ target | std | host | notes\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n [`mips64-openwrt-linux-musl`](platform-support/mips64-openwrt-linux-musl.md) | ? |  | MIPS64 for OpenWrt Linux MUSL\n `mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n+[`mipsel-sony-psx`](platform-support/mipsel-sony-psx.md) | * |  | MIPS (LE) Sony PlayStation 1 (PSX)\n `mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc\n `mipsel-unknown-none` | * |  | Bare MIPS (LE) softfloat\n `mipsisa32r6-unknown-linux-gnu` | ? |  |"}, {"sha": "589100e8888b32c22e91e41089f38128843b9647", "filename": "src/doc/rustc/src/platform-support/mipsel-sony-psx.md", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmipsel-sony-psx.md", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmipsel-sony-psx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmipsel-sony-psx.md?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,49 @@\n+# mipsel-sony-psx\n+\n+**Tier: 3**\n+\n+Sony PlayStation 1 (psx)\n+\n+## Designated Developer\n+\n+* [@ayrtonm](https://github.com/ayrtonm)\n+\n+## Requirements\n+\n+This target is cross-compiled.\n+It has no special requirements for the host.\n+\n+## Building\n+\n+The target can be built by enabling it for a `rustc` build:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"mipsel-sony-psx\"]\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled from any host.\n+\n+## Testing\n+\n+Currently there is no support to run the rustc test suite for this target.\n+\n+## Building Rust programs\n+\n+Since it is Tier 3, rust doesn't ship pre-compiled artifacts for this target.\n+\n+Just use the `build-std` nightly cargo feature to build the `core` and `alloc` libraries:\n+```shell\n+cargo build -Zbuild-std=core,alloc --target mipsel-sony-psx\n+```\n+\n+The command above generates an ELF. To generate binaries in the PSEXE format that emulators run, you can use [cargo-psx](https://github.com/ayrtonm/psx-sdk-rs#readme):\n+\n+```shell\n+cargo psx build\n+```\n+\n+or use `-Clink-arg=--oformat=binary` to produce a flat binary."}, {"sha": "b20c30ec8f1c8533026067ceaf4eee82b4ced03a", "filename": "src/doc/unstable-book/src/language-features/extended-varargs-abi-support.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextended-varargs-abi-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextended-varargs-abi-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextended-varargs-abi-support.md?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,10 @@\n+# `extended_varargs_abi_support`\n+\n+The tracking issue for this feature is: [#100189]\n+\n+[#100189]: https://github.com/rust-lang/rust/issues/100189\n+\n+------------------------\n+\n+This feature adds the possibility of using `sysv64`, `win64` or `efiapi` calling\n+conventions on functions with varargs."}, {"sha": "d93f0bd4e56579b11b4fefc5aa02db1c7fc2960a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -323,6 +323,21 @@ pub(crate) fn build_impls(\n     for &did in tcx.inherent_impls(did).iter() {\n         build_impl(cx, parent_module, did, attrs, ret);\n     }\n+\n+    // This pretty much exists expressly for `dyn Error` traits that exist in the `alloc` crate.\n+    // See also:\n+    //\n+    // * https://github.com/rust-lang/rust/issues/103170 \u2014 where it didn't used to get documented\n+    // * https://github.com/rust-lang/rust/pull/99917 \u2014 where the feature got used\n+    // * https://github.com/rust-lang/rust/issues/53487 \u2014 overall tracking issue for Error\n+    if tcx.has_attr(did, sym::rustc_has_incoherent_inherent_impls) {\n+        use rustc_middle::ty::fast_reject::SimplifiedTypeGen::*;\n+        let type_ =\n+            if tcx.is_trait(did) { TraitSimplifiedType(did) } else { AdtSimplifiedType(did) };\n+        for &did in tcx.incoherent_impls(type_) {\n+            build_impl(cx, parent_module, did, attrs, ret);\n+        }\n+    }\n }\n \n /// `parent_module` refers to the parent of the re-export, not the original item"}, {"sha": "894499e5c4fc99493db15d84971666902db1c810", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -163,9 +163,6 @@ h1.fqn {\n \tpadding-bottom: 6px;\n \tmargin-bottom: 15px;\n }\n-#toggle-all-docs {\n-\ttext-decoration: none;\n-}\n /* The only headings that get underlines are:\n \t Markdown-generated headings within the top-doc\n \t Rustdoc-generated h2 section headings (e.g. \"Implementations\", \"Required Methods\", etc)\n@@ -209,7 +206,7 @@ ul.all-items {\n \tfont-family: \"Fira Sans\", Arial, NanumBarunGothic, sans-serif;\n }\n \n-a#toggle-all-docs,\n+#toggle-all-docs,\n a.anchor,\n .small-section-header a,\n #source-sidebar a,\n@@ -299,6 +296,16 @@ button {\n \tpadding: 1px 6px;\n }\n \n+button#toggle-all-docs {\n+\tpadding: 0;\n+\tbackground: none;\n+\tborder: none;\n+\tcursor: pointer;\n+\t/* iOS button gradient: https://stackoverflow.com/q/5438567 */\n+\t-webkit-appearance: none;\n+\topacity: 1;\n+}\n+\n /* end tweaks for normalize.css 8 */\n \n .rustdoc {"}, {"sha": "e497b619366b175e0513fce42de6754d961d0d95", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -21,8 +21,8 @@ <h1 class=\"fqn\"> {#- -#}\n                 <a class=\"srclink\" href=\"{{href|safe}}\">source</a> \u00b7 {# -#}\n             {%- else -%}\n         {%- endmatch -%}\n-        <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}\n-            [<span class=\"inner\">&#x2212;</span>] {#- -#}\n-        </a> {#- -#}\n+        <button id=\"toggle-all-docs\" title=\"collapse all docs\"> {#- -#}\n+            [<span>&#x2212;</span>] {#- -#}\n+        </button> {#- -#}\n     </span> {#- -#}\n </div> {#- -#}"}, {"sha": "194b107bead89c32be70c17690bde0a9818aa0dc", "filename": "src/test/mir-opt/building/enum_cast.bar.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `bar` 0 mir_map\n+// MIR for `bar` after built\n \n fn bar(_1: Bar) -> usize {\n     debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11", "previous_filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir"}, {"sha": "dde26afc77a0c7e3a249290faba4d6a363f30015", "filename": "src/test/mir-opt/building/enum_cast.boo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `boo` 0 mir_map\n+// MIR for `boo` after built\n \n fn boo(_1: Boo) -> usize {\n     debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11", "previous_filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir"}, {"sha": "a43c523c71f3c00ac0d820c8fd20d5241d76e817", "filename": "src/test/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `droppy` 0 mir_map\n+// MIR for `droppy` after built\n \n fn droppy() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13", "previous_filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir"}, {"sha": "17e0abf2e319359419256cb63765b2f4a6853f4a", "filename": "src/test/mir-opt/building/enum_cast.foo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `foo` 0 mir_map\n+// MIR for `foo` after built\n \n fn foo(_1: Foo) -> usize {\n     debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11", "previous_filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir"}, {"sha": "98fd5acfb14f964014365f4bff32677a6c319cc0", "filename": "src/test/mir-opt/building/enum_cast.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,6 +1,6 @@\n-// EMIT_MIR enum_cast.foo.mir_map.0.mir\n-// EMIT_MIR enum_cast.bar.mir_map.0.mir\n-// EMIT_MIR enum_cast.boo.mir_map.0.mir\n+// EMIT_MIR enum_cast.foo.built.after.mir\n+// EMIT_MIR enum_cast.bar.built.after.mir\n+// EMIT_MIR enum_cast.boo.built.after.mir\n \n enum Foo {\n     A\n@@ -27,7 +27,7 @@ fn boo(boo: Boo) -> usize {\n     boo as usize\n }\n \n-// EMIT_MIR enum_cast.droppy.mir_map.0.mir\n+// EMIT_MIR enum_cast.droppy.built.after.mir\n enum Droppy {\n     A, B, C\n }", "previous_filename": "src/test/mir-opt/enum_cast.rs"}, {"sha": "a32d8cb37142c84fe57b503718d0e56b0d575cbd", "filename": "src/test/mir-opt/building/issue-101867.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-101867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-101867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-101867.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR issue_101867.main.mir_map.0.mir\n+// EMIT_MIR issue_101867.main.built.after.mir\n fn main() {\n     let x: Option<u8> = Some(1);\n     let Some(y) = x else {", "previous_filename": "src/test/mir-opt/issue-101867.rs"}, {"sha": "7e9f0de81f749808ee3b8efff39fc873266857d0", "filename": "src/test/mir-opt/building/issue-49232.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue-49232.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,7 @@\n // We must mark a variable whose initialization fails due to an\n // abort statement as StorageDead.\n \n-// EMIT_MIR issue_49232.main.mir_map.0.mir\n+// EMIT_MIR issue_49232.main.built.after.mir\n fn main() {\n     loop {\n         let beacon = {", "previous_filename": "src/test/mir-opt/issue-49232.rs"}, {"sha": "6834205b649b2a8012c8e909a3de32b8c04f7f19", "filename": "src/test/mir-opt/building/issue_101867.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>", "previous_filename": "src/test/mir-opt/issue_101867.main.mir_map.0.mir"}, {"sha": "b90f8c13589fa4e2d95c9cedc0dfaa701ab07fb5", "filename": "src/test/mir-opt/building/issue_49232.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-49232.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir"}, {"sha": "9a190c3d60ea49607f9e76a3ceb031bb659e18f8", "filename": "src/test/mir-opt/building/match_false_edges.full_tested_match.built.after.mir", "status": "renamed", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `full_tested_match` after PromoteTemps\n+// MIR for `full_tested_match` after built\n \n fn full_tested_match() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:28: +0:28\n@@ -12,7 +12,6 @@ fn full_tested_match() -> () {\n     let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:+2:35: +2:36\n     let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n     let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:+3:24: +3:25\n-    let mut _11: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n     scope 1 {\n     }\n     scope 2 {\n@@ -34,15 +33,15 @@ fn full_tested_match() -> () {\n \n     bb1: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n     }\n \n     bb2: {\n         falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:16\n+        falseEdge -> [real: bb10, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:16\n     }\n \n     bb4: {\n@@ -51,14 +50,10 @@ fn full_tested_match() -> () {\n \n     bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _11 = const _;                   // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:14:14: 14:15\n-                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(full_tested_match, [], Some(promoted[0])) }\n-        _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n+        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        _7 = guard() -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:14:20: 14:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n@@ -80,34 +75,38 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n     }\n \n     bb8: {\n+        goto -> bb9;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+    }\n+\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n     }\n \n-    bb9: {\n+    bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:+3:24: +3:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:+3:24: +3:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:+3:20: +3:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:+3:25: +3:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:28: +6:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:+6:2: +6:2\n     }\n \n-    bb11 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +6:2\n     }\n }", "previous_filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir"}, {"sha": "1c9953e7efc11ec538638eeed0355ad50f1a1024", "filename": "src/test/mir-opt/building/match_false_edges.full_tested_match2.built.after.mir", "status": "renamed", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `full_tested_match2` before PromoteTemps\n+// MIR for `full_tested_match2` after built\n \n fn full_tested_match2() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:29: +0:29\n@@ -32,7 +32,7 @@ fn full_tested_match2() -> () {\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:13\n+        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:13\n     }\n \n     bb2: {\n@@ -47,7 +47,7 @@ fn full_tested_match2() -> () {\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:+4:20: +4:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:+4:25: +4:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n     }\n \n     bb4: {\n@@ -59,7 +59,7 @@ fn full_tested_match2() -> () {\n         _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        _7 = guard() -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:25:20: 25:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n@@ -81,28 +81,32 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n     }\n \n     bb8: {\n+        goto -> bb9;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+    }\n+\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n         falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n     }\n \n-    bb9: {\n+    bb10: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:29: +6:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:+6:2: +6:2\n     }\n \n-    bb11 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +6:2\n     }\n }", "previous_filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir"}, {"sha": "08c67d39d78074f393be1f3963fa60d8be60db3e", "filename": "src/test/mir-opt/building/match_false_edges.main.built.after.mir", "status": "renamed", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` before PromoteTemps\n+// MIR for `main` after built\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:11: +0:11\n@@ -43,41 +43,54 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n+        falseEdge -> [real: bb13, imaginary: bb6]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:17\n+        falseEdge -> [real: bb8, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:17\n     }\n \n     bb3: {\n+        goto -> bb1;                     // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+    }\n+\n+    bb4: {\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n+        switchInt(move _3) -> [1_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+    }\n+\n+    bb5: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n         _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:+5:15: +5:16\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n     }\n \n-    bb4: {\n-        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+4:9: +4:16\n+    bb6: {\n+        falseEdge -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:+4:9: +4:16\n     }\n \n-    bb5: {\n+    bb7: {\n+        goto -> bb5;                     // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+    }\n+\n+    bb8: {\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n         _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n-        _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        _8 = guard() -> [return: bb9, unwind: bb20]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:34:21: 34:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n     }\n \n-    bb6: {\n-        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+    bb9: {\n+        switchInt(move _8) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n     }\n \n-    bb7: {\n+    bb10: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n@@ -86,41 +99,45 @@ fn main() -> () {\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:+2:32: +2:33\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n     }\n \n-    bb8: {\n+    bb11: {\n+        goto -> bb12;                    // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+    }\n+\n+    bb12: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n     }\n \n-    bb9: {\n+    bb13: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n         _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:+3:15: +3:16\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n     }\n \n-    bb10: {\n+    bb14: {\n         StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n         _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n         StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n-        _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        _12 = guard2(move _13) -> [return: bb15, unwind: bb20]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:20: 36:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(<ZST>) }\n     }\n \n-    bb11: {\n-        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+    bb15: {\n+        switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n     }\n \n-    bb12: {\n+    bb16: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n@@ -130,24 +147,28 @@ fn main() -> () {\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:+4:33: +4:34\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n+        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n     }\n \n-    bb13: {\n+    bb17: {\n+        goto -> bb18;                    // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+    }\n+\n+    bb18: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        falseEdge -> [real: bb7, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n     }\n \n-    bb14: {\n+    bb19: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:11: +7:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:+7:2: +7:2\n     }\n \n-    bb15 (cleanup): {\n+    bb20 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +7:2\n     }\n }", "previous_filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir"}, {"sha": "ddfcc149319187e09adcf016e11416f650a30204", "filename": "src/test/mir-opt/building/match_false_edges.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -8,7 +8,7 @@ fn guard2(_: i32) -> bool {\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n-// EMIT_MIR match_false_edges.full_tested_match.PromoteTemps.after.mir\n+// EMIT_MIR match_false_edges.full_tested_match.built.after.mir\n pub fn full_tested_match() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n@@ -19,7 +19,7 @@ pub fn full_tested_match() {\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n-// EMIT_MIR match_false_edges.full_tested_match2.PromoteTemps.before.mir\n+// EMIT_MIR match_false_edges.full_tested_match2.built.after.mir\n pub fn full_tested_match2() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n@@ -28,7 +28,7 @@ pub fn full_tested_match2() {\n     };\n }\n \n-// EMIT_MIR match_false_edges.main.PromoteTemps.before.mir\n+// EMIT_MIR match_false_edges.main.built.after.mir\n fn main() {\n     let _ = match Some(1) {\n         Some(_w) if guard() => 1,", "previous_filename": "src/test/mir-opt/match_false_edges.rs"}, {"sha": "668530968fe51de0067773ae034bd9fc503b3a12", "filename": "src/test/mir-opt/building/receiver-ptr-mutability.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver-ptr-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver-ptr-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver-ptr-mutability.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR receiver_ptr_mutability.main.mir_map.0.mir\n+// EMIT_MIR receiver_ptr_mutability.main.built.after.mir\n \n #![feature(arbitrary_self_types)]\n ", "previous_filename": "src/test/mir-opt/receiver-ptr-mutability.rs"}, {"sha": "0192bdc2d5e3e06d51eb11471d856eeaa318af81", "filename": "src/test/mir-opt/building/receiver_ptr_mutability.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:14:14: 14:23, inferred_ty: *mut Test", "previous_filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir"}, {"sha": "0ef97dde6363173c00a65f7b558cd9c39e8b19c0", "filename": "src/test/mir-opt/building/simple-match.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple-match.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,7 @@\n // Test that we don't generate unnecessarily large MIR for very simple matches\n \n \n-// EMIT_MIR simple_match.match_bool.mir_map.0.mir\n+// EMIT_MIR simple_match.match_bool.built.after.mir\n fn match_bool(x: bool) -> usize {\n     match x {\n         true => 10,", "previous_filename": "src/test/mir-opt/simple-match.rs"}, {"sha": "5b101cbdee7750e0810310e18cc945ef5d6ba6d5", "filename": "src/test/mir-opt/building/simple_match.match_bool.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `match_bool` 0 mir_map\n+// MIR for `match_bool` after built\n \n fn match_bool(_1: bool) -> usize {\n     debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:+0:15: +0:16", "previous_filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.mir"}, {"sha": "1d3f77e079bafef6baf43cd1b410184215adf8e5", "filename": "src/test/mir-opt/building/storage_live_dead_in_statics.XXX.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `XXX` 0 mir_map\n+// MIR for `XXX` after built\n \n static XXX: &Foo = {\n     let mut _0: &Foo;                    // return place in scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:13: +0:25", "previous_filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir"}, {"sha": "79f709148e30422fe202f91b603acc9fe52f531a", "filename": "src/test/mir-opt/building/storage_live_dead_in_statics.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,7 @@\n // Check that when we compile the static `XXX` into MIR, we do not\n // generate `StorageStart` or `StorageEnd` statements.\n \n-// EMIT_MIR storage_live_dead_in_statics.XXX.mir_map.0.mir\n+// EMIT_MIR storage_live_dead_in_statics.XXX.built.after.mir\n static XXX: &'static Foo = &Foo {\n     tup: \"hi\",\n     data: &[", "previous_filename": "src/test/mir-opt/storage_live_dead_in_statics.rs"}, {"sha": "234cd083977398ccac7711c3ae1df185adfc54f1", "filename": "src/test/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `move_out_by_subslice` 0 mir_map\n+// MIR for `move_out_by_subslice` after built\n \n fn move_out_by_subslice() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +0:27", "previous_filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir"}, {"sha": "24a189498d347d838628d7e10edd6a7f4236617b", "filename": "src/test/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `move_out_from_end` 0 mir_map\n+// MIR for `move_out_from_end` after built\n \n fn move_out_from_end() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +0:24", "previous_filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir"}, {"sha": "e925036ecf69adba60643c23d2dfed451092586e", "filename": "src/test/mir-opt/building/uniform_array_move_out.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,12 +1,12 @@\n #![feature(box_syntax)]\n \n-// EMIT_MIR uniform_array_move_out.move_out_from_end.mir_map.0.mir\n+// EMIT_MIR uniform_array_move_out.move_out_from_end.built.after.mir\n fn move_out_from_end() {\n     let a = [box 1, box 2];\n     let [.., _y] = a;\n }\n \n-// EMIT_MIR uniform_array_move_out.move_out_by_subslice.mir_map.0.mir\n+// EMIT_MIR uniform_array_move_out.move_out_by_subslice.built.after.mir\n fn move_out_by_subslice() {\n     let a = [box 1, box 2];\n     let [_y @ ..] = a;", "previous_filename": "src/test/mir-opt/uniform_array_move_out.rs"}, {"sha": "e4261cfe504470dd4d8662f91db7b21f4b0a0a2e", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -12,7 +12,7 @@ static mut BAR: *const &i32 = [&Y].as_ptr();\n // EMIT_MIR const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir\n static mut FOO: *const &i32 = [unsafe { &X }].as_ptr();\n \n-// EMIT_MIR const_promotion_extern_static.BOP.mir_map.0.mir\n+// EMIT_MIR const_promotion_extern_static.BOP.built.after.mir\n static BOP: &i32 = &13;\n \n fn main() {}"}, {"sha": "5bda86bbd4f5051cdcd95d994b476c7b83755b09", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `BOP` 0 mir_map\n+// MIR for `BOP` after built\n \n static BOP: &i32 = {\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:13: +0:17", "previous_filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir"}, {"sha": "8d1da7f1b9651c5224281abf544534966c29f886", "filename": "src/test/mir-opt/graphviz.main.built.after.dot", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fgraphviz.main.built.after.dot", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fgraphviz.main.built.after.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.main.built.after.dot?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "previous_filename": "src/test/mir-opt/graphviz.main.mir_map.0.dot"}, {"sha": "6906b86c2a5f429abe98edc015d14a9095328d85", "filename": "src/test/mir-opt/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,5 +1,5 @@\n // Test graphviz output\n // compile-flags: -Z dump-mir-graphviz\n \n-// EMIT_MIR graphviz.main.mir_map.0.dot\n+// EMIT_MIR graphviz.main.built.after.dot\n fn main() {}"}, {"sha": "8ae2599ec73f8fc025fddb85d0f1237d11273be3", "filename": "src/test/mir-opt/issue-72181-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -6,12 +6,12 @@\n \n enum Void {}\n \n-// EMIT_MIR issue_72181_1.f.mir_map.0.mir\n+// EMIT_MIR issue_72181_1.f.built.after.mir\n fn f(v: Void) -> ! {\n     match v {}\n }\n \n-// EMIT_MIR issue_72181_1.main.mir_map.0.mir\n+// EMIT_MIR issue_72181_1.main.built.after.mir\n fn main() {\n     let v: Void = unsafe {\n         std::mem::transmute::<(), Void>(())"}, {"sha": "6a32d4bbee2f7355a9171c35ae0c2eec69bceb13", "filename": "src/test/mir-opt/issue-72181.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -12,14 +12,14 @@ union Foo {\n }\n \n \n-// EMIT_MIR issue_72181.foo.mir_map.0.mir\n+// EMIT_MIR issue_72181.foo.built.after.mir\n fn foo(xs: [(Never, u32); 1]) -> u32 { xs[0].1 }\n \n-// EMIT_MIR issue_72181.bar.mir_map.0.mir\n+// EMIT_MIR issue_72181.bar.built.after.mir\n fn bar([(_, x)]: [(Never, u32); 1]) -> u32 { x }\n \n \n-// EMIT_MIR issue_72181.main.mir_map.0.mir\n+// EMIT_MIR issue_72181.main.built.after.mir\n fn main() {\n     let _ = mem::size_of::<Foo>();\n "}, {"sha": "9127cacc97c5debd487278d63530591e0d0b29c9", "filename": "src/test/mir-opt/issue-91633.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-91633.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,28 +1,28 @@\n // compile-flags: -Z mir-opt-level=0\n-// EMIT_MIR issue_91633.hey.mir_map.0.mir\n+// EMIT_MIR issue_91633.hey.built.after.mir\n fn hey<T> (it: &[T])\n  where\n      [T] : std::ops::Index<usize>,\n  {\n      let _ = &it[0];\n  }\n \n-// EMIT_MIR issue_91633.bar.mir_map.0.mir\n+// EMIT_MIR issue_91633.bar.built.after.mir\n fn bar<T> (it: Box<[T]>)\n  where\n      [T] : std::ops::Index<usize>,\n  {\n      let _ = it[0];\n  }\n \n-// EMIT_MIR issue_91633.fun.mir_map.0.mir\n+// EMIT_MIR issue_91633.fun.built.after.mir\n fn fun<T> (it: &[T]) -> &T\n  {\n      let f = &it[0];\n      f\n  }\n \n-// EMIT_MIR issue_91633.foo.mir_map.0.mir\n+// EMIT_MIR issue_91633.foo.built.after.mir\n fn foo<T: Clone> (it: Box<[T]>) -> T\n  {\n      let f = it[0].clone();"}, {"sha": "fe819cddb2c34b6e7997454c58997432fa438cea", "filename": "src/test/mir-opt/issue-99325.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-99325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue-99325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-99325.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -5,7 +5,7 @@ pub fn function_with_bytes<const BYTES: &'static [u8; 4]>() -> &'static [u8] {\n     BYTES\n }\n \n-// EMIT_MIR issue_99325.main.mir_map.0.mir\n+// EMIT_MIR issue_99325.main.built.after.mir\n pub fn main() {\n     assert_eq!(function_with_bytes::<b\"AAAA\">(), &[0x41, 0x41, 0x41, 0x41]);\n     assert_eq!(function_with_bytes::<{ &[0x41, 0x41, 0x41, 0x41] }>(), b\"AAAA\");"}, {"sha": "aa9c9986aac19e1207d2c109d90521f245d38e9b", "filename": "src/test/mir-opt/issue_72181.bar.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `bar` 0 mir_map\n+// MIR for `bar` after built\n \n fn bar(_1: [(Never, u32); 1]) -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:40: +0:43", "previous_filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.mir"}, {"sha": "1d771ad3656d2e28f44f425238c24eb76830b864", "filename": "src/test/mir-opt/issue_72181.foo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `foo` 0 mir_map\n+// MIR for `foo` after built\n \n fn foo(_1: [(Never, u32); 1]) -> u32 {\n     debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:+0:8: +0:10", "previous_filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.mir"}, {"sha": "afa09b16fe9642c25583e2ba42c892e87940cef3", "filename": "src/test/mir-opt/issue_72181.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir"}, {"sha": "31e997f9b33d9ab7a50990bc2613a85b8defceb6", "filename": "src/test/mir-opt/issue_72181_1.f.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `f` 0 mir_map\n+// MIR for `f` after built\n \n fn f(_1: Void) -> ! {\n     debug v => _1;                       // in scope 0 at $DIR/issue-72181-1.rs:+0:6: +0:7", "previous_filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir"}, {"sha": "65177a81b03b45da8e1e056ae1359bb83b6a7393", "filename": "src/test/mir-opt/issue_72181_1.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue-72181-1.rs:16:12: 16:16, inferred_ty: Void", "previous_filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir"}, {"sha": "19b1b6fe12b8b4e15194f5002023be092030265a", "filename": "src/test/mir-opt/issue_91633.bar.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `bar` 0 mir_map\n+// MIR for `bar` after built\n \n fn bar(_1: Box<[T]>) -> () {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14", "previous_filename": "src/test/mir-opt/issue_91633.bar.mir_map.0.mir"}, {"sha": "1a6eee93d36892aa885bbf34672ddb535ad4b6aa", "filename": "src/test/mir-opt/issue_91633.foo.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `foo` 0 mir_map\n+// MIR for `foo` after built\n \n fn foo(_1: Box<[T]>) -> T {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:19: +0:21", "previous_filename": "src/test/mir-opt/issue_91633.foo.mir_map.0.mir"}, {"sha": "b3eea600330119604b96b020d23024b0d285a4a0", "filename": "src/test/mir-opt/issue_91633.fun.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `fun` 0 mir_map\n+// MIR for `fun` after built\n \n fn fun(_1: &[T]) -> &T {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14", "previous_filename": "src/test/mir-opt/issue_91633.fun.mir_map.0.mir"}, {"sha": "e7e31ad33c1be871fcae9d5a4d8cf546189e2db8", "filename": "src/test/mir-opt/issue_91633.hey.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `hey` 0 mir_map\n+// MIR for `hey` after built\n \n fn hey(_1: &[T]) -> () {\n     debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14", "previous_filename": "src/test/mir-opt/issue_91633.hey.mir_map.0.mir"}, {"sha": "f588f06b7e4a39caaf2feca8190d5884ccf81cb5", "filename": "src/test/mir-opt/issue_99325.main.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` 0 mir_map\n+// MIR for `main` after built\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}", "previous_filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir"}, {"sha": "0ecf35ad6a2e86b71b41c99cd45447c761a1749e", "filename": "src/test/mir-opt/spanview-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview-block.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,5 +1,5 @@\n // Test spanview block output\n // compile-flags: -Z dump-mir-spanview=block\n \n-// EMIT_MIR spanview_block.main.mir_map.0.html\n+// EMIT_MIR spanview_block.main.built.after.html\n fn main() {}"}, {"sha": "457052617b788a8e5c2e3a88ef84d9e3ef09fbd3", "filename": "src/test/mir-opt/spanview-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview-statement.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,5 +1,5 @@\n // Test spanview output (the default value for `-Z dump-mir-spanview` is \"statement\")\n // compile-flags: -Z dump-mir-spanview\n \n-// EMIT_MIR spanview_statement.main.mir_map.0.html\n+// EMIT_MIR spanview_statement.main.built.after.html\n fn main() {}"}, {"sha": "76fced188f1db71d72ed2ae73b4eb366df1eeb9a", "filename": "src/test/mir-opt/spanview-terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview-terminator.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,5 +1,5 @@\n // Test spanview terminator output\n // compile-flags: -Z dump-mir-spanview=terminator\n \n-// EMIT_MIR spanview_terminator.main.mir_map.0.html\n+// EMIT_MIR spanview_terminator.main.built.after.html\n fn main() {}"}, {"sha": "fbf751d6d30b49bd1e29a98d7e862d2ed1f93678", "filename": "src/test/mir-opt/spanview_block.main.built.after.html", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n-<title>spanview_block.main.mir_map.0</title>\n+<title>spanview_block.main.built.after</title>\n <style>\n     .line {\n         counter-increment: line;", "previous_filename": "src/test/mir-opt/spanview_block.main.mir_map.0.html"}, {"sha": "02b2720feefc9b93136c5d8765f082111f3499de", "filename": "src/test/mir-opt/spanview_statement.main.built.after.html", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n-<title>spanview_statement.main.mir_map.0</title>\n+<title>spanview_statement.main.built.after</title>\n <style>\n     .line {\n         counter-increment: line;", "previous_filename": "src/test/mir-opt/spanview_statement.main.mir_map.0.html"}, {"sha": "a4cda7dd67ec62fc1341f1258fd7b79c6549b92c", "filename": "src/test/mir-opt/spanview_terminator.main.built.after.html", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE html>\n <html>\n <head>\n-<title>spanview_terminator.main.mir_map.0</title>\n+<title>spanview_terminator.main.built.after</title>\n <style>\n     .line {\n         counter-increment: line;", "previous_filename": "src/test/mir-opt/spanview_terminator.main.mir_map.0.html"}, {"sha": "6dad636416f228826ad35746c125fe047e06ac99", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -5,19 +5,19 @@\n \n struct A;\n \n-// EMIT_MIR unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.built.after.mir\n impl A {\n     const ASSOCIATED_CONSTANT: i32 = 2;\n }\n \n // See #59021\n-// EMIT_MIR unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.Test-X-{constructor#0}.built.after.mir\n enum Test {\n     X(usize),\n     Y { a: usize },\n }\n \n-// EMIT_MIR unusual_item_types.E-V-{constant#0}.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.E-V-{constant#0}.built.after.mir\n enum E {\n     V = 5,\n }"}, {"sha": "c8b0f8e41b77cb89fed8e2edf88f0211df0375f2", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `E::V::{constant#0}` 0 mir_map\n+// MIR for `E::V::{constant#0}` after built\n \n E::V::{constant#0}: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10", "previous_filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.mir"}, {"sha": "a46e60173774e6ee1624c3cb48fc84cbc6c1582e", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `Test::X` 0 mir_map\n+// MIR for `Test::X` after built\n \n fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6", "previous_filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir"}, {"sha": "7cb9050bc4bc6bbda74e07dcfa6e3000daeda95f", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.built.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` 0 mir_map\n+// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` after built\n \n const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:+0:32: +0:35", "previous_filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir"}, {"sha": "871e75d9b2b316167fd1f33868d2b60547916a81", "filename": "src/test/rustdoc-js/reexport.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc-js%2Freexport.js", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc-js%2Freexport.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Freexport.js?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,17 @@\n+// exact-check\n+\n+const QUERY = ['Subscriber', 'AnotherOne'];\n+\n+const EXPECTED = [\n+    {\n+        'others': [\n+            { 'path': 'reexport::fmt', 'name': 'Subscriber' },\n+            { 'path': 'reexport', 'name': 'FmtSubscriber' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'reexport', 'name': 'AnotherOne' },\n+        ],\n+    },\n+];"}, {"sha": "d69b2901edd5100e4ec13cb5d704b7ff971415e0", "filename": "src/test/rustdoc-js/reexport.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc-js%2Freexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc-js%2Freexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Freexport.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,11 @@\n+// This test enforces that the (renamed) reexports are present in the search results.\n+\n+pub mod fmt {\n+    pub struct Subscriber;\n+}\n+mod foo {\n+    pub struct AnotherOne;\n+}\n+\n+pub use foo::AnotherOne;\n+pub use fmt::Subscriber as FmtSubscriber;"}, {"sha": "fc51e42e5004d80cbd12f486b84302c6b711bbb7", "filename": "src/test/rustdoc/auxiliary/incoherent-impl-types.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc%2Fauxiliary%2Fincoherent-impl-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc%2Fauxiliary%2Fincoherent-impl-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fincoherent-impl-types.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,7 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub trait FooTrait {}\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub struct FooStruct;"}, {"sha": "3fdefbecc5461e10b984d36d9ff437f779e6e462", "filename": "src/test/rustdoc/rustc-incoherent-impls.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc%2Frustc-incoherent-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Frustdoc%2Frustc-incoherent-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-incoherent-impls.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,28 @@\n+// aux-build:incoherent-impl-types.rs\n+// build-aux-docs\n+\n+#![crate_name = \"foo\"]\n+#![feature(rustc_attrs)]\n+\n+extern crate incoherent_impl_types;\n+\n+// The only way this actually shows up is if the type gets inlined.\n+#[doc(inline)]\n+pub use incoherent_impl_types::FooTrait;\n+\n+// @has foo/trait.FooTrait.html\n+// @count - '//section[@id=\"method.do_something\"]' 1\n+impl dyn FooTrait {\n+    #[rustc_allow_incoherent_impl]\n+    pub fn do_something() {}\n+}\n+\n+#[doc(inline)]\n+pub use incoherent_impl_types::FooStruct;\n+\n+// @has foo/struct.FooStruct.html\n+// @count - '//section[@id=\"method.do_something\"]' 1\n+impl FooStruct {\n+    #[rustc_allow_incoherent_impl]\n+    pub fn do_something() {}\n+}"}, {"sha": "087743e505d25362f06c04b61e5d87cf4e1c14bb", "filename": "src/test/ui/c-variadic/feature-gate-extended_varargs_abi_support.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,19 @@\n+#![feature(abi_efiapi)]\n+\n+fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+    //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n+    f(22, 44);\n+}\n+fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+    //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n+    f(22, 44);\n+}\n+fn win(f: extern \"win64\" fn(usize, ...)) {\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+    //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n+    f(22, 44);\n+}\n+\n+fn main() {}"}, {"sha": "007d7d7953c9403b40fc7936e3ac23e5ff9a0c17", "filename": "src/test/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -0,0 +1,49 @@\n+error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+   |\n+LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n+   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n+\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+   |\n+LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n+\n+error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+   |\n+LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n+   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n+\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+   |\n+LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n+\n+error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+   |\n+LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n+   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n+\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+   |\n+LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0045, E0658.\n+For more information about an error, try `rustc --explain E0045`."}, {"sha": "24407a71ce6997184531b3c1018f6bf474efbbf1", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -6,7 +6,9 @@\n trait Sized { }\n \n extern \"stdcall\" {\n-    fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling\n+    fn printf(_: *const u8, ...);\n+    //~^ ERROR: C-variadic function must have a compatible calling convention,\n+    // like C, cdecl, win64, sysv64 or efiapi\n }\n \n extern \"C\" {"}, {"sha": "4beea83d8a5287b2a6216c24caa4ceb2fb157598", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,17 +1,17 @@\n-error[E0045]: C-variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/variadic-ffi-1.rs:9:5\n    |\n LL |     fn printf(_: *const u8, ...);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n-  --> $DIR/variadic-ffi-1.rs:20:9\n+  --> $DIR/variadic-ffi-1.rs:22:9\n    |\n LL |         foo();\n    |         ^^^-- two arguments of type `isize` and `u8` are missing\n    |\n note: function defined here\n-  --> $DIR/variadic-ffi-1.rs:13:8\n+  --> $DIR/variadic-ffi-1.rs:15:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n@@ -21,13 +21,13 @@ LL |         foo(/* isize */, /* u8 */);\n    |            ~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n-  --> $DIR/variadic-ffi-1.rs:21:9\n+  --> $DIR/variadic-ffi-1.rs:23:9\n    |\n LL |         foo(1);\n    |         ^^^--- an argument of type `u8` is missing\n    |\n note: function defined here\n-  --> $DIR/variadic-ffi-1.rs:13:8\n+  --> $DIR/variadic-ffi-1.rs:15:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n@@ -37,7 +37,7 @@ LL |         foo(1, /* u8 */);\n    |            ~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:23:56\n+  --> $DIR/variadic-ffi-1.rs:25:56\n    |\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                -------------------------------------   ^^^ expected non-variadic fn, found variadic function\n@@ -48,7 +48,7 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n                  found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:24:54\n+  --> $DIR/variadic-ffi-1.rs:26:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                -----------------------------------   ^^^ expected variadic fn, found non-variadic function\n@@ -59,37 +59,37 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n                  found fn item `extern \"C\" fn(_, _) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:26:19\n+  --> $DIR/variadic-ffi-1.rs:28:19\n    |\n LL |         foo(1, 2, 3f32);\n    |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n \n error[E0617]: can't pass `bool` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:27:19\n+  --> $DIR/variadic-ffi-1.rs:29:19\n    |\n LL |         foo(1, 2, true);\n    |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n \n error[E0617]: can't pass `i8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:28:19\n+  --> $DIR/variadic-ffi-1.rs:30:19\n    |\n LL |         foo(1, 2, 1i8);\n    |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n \n error[E0617]: can't pass `u8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:29:19\n+  --> $DIR/variadic-ffi-1.rs:31:19\n    |\n LL |         foo(1, 2, 1u8);\n    |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n \n error[E0617]: can't pass `i16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:30:19\n+  --> $DIR/variadic-ffi-1.rs:32:19\n    |\n LL |         foo(1, 2, 1i16);\n    |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n \n error[E0617]: can't pass `u16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:31:19\n+  --> $DIR/variadic-ffi-1.rs:33:19\n    |\n LL |         foo(1, 2, 1u16);\n    |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`"}, {"sha": "96cea87546e7ad3b3fa1a1f21937a9b3e6a7dae7", "filename": "src/test/ui/c-variadic/variadic-ffi-2.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,7 +1,20 @@\n // ignore-arm stdcall isn't supported\n+#![feature(extended_varargs_abi_support)]\n+#![feature(abi_efiapi)]\n \n fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n-    //~^ ERROR: variadic function must have C or cdecl calling convention\n+    //~^ ERROR: C-variadic function must have a compatible calling convention,\n+    // like C, cdecl, win64, sysv64 or efiapi\n+    f(22, 44);\n+}\n+\n+fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+    f(22, 44);\n+}\n+fn win(f: extern \"win64\" fn(usize, ...)) {\n+    f(22, 44);\n+}\n+fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n     f(22, 44);\n }\n "}, {"sha": "4e74c9d922786be95c85b5c0494e6637f9408f65", "filename": "src/test/ui/c-variadic/variadic-ffi-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: C-variadic function must have C or cdecl calling convention\n-  --> $DIR/variadic-ffi-2.rs:3:11\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C`, `cdecl`, `win64`, `sysv64` or `efiapi`\n+  --> $DIR/variadic-ffi-2.rs:5:11\n    |\n LL | fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error: aborting due to previous error\n "}, {"sha": "fcc613b11b8d1de8ef73431fd4072acd78a60c34", "filename": "src/test/ui/error-codes/E0045.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: C-variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/E0045.rs:1:17\n    |\n LL | extern \"Rust\" { fn foo(x: u8, ...); }\n-   |                 ^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n+   |                 ^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error: aborting due to previous error\n "}, {"sha": "64f0c09e89bca1ec914b82a0d08b89540a997f09", "filename": "src/test/ui/type/issue-94187-verbose-type-name.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596f4f8b565bdd02d3b99d1ab12ff09146a93de/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs?ref=4596f4f8b565bdd02d3b99d1ab12ff09146a93de", "patch": "@@ -1,13 +1,19 @@\n-// Check to insure that the output of `std::any::type_name` does not change based on -Zverbose\n-// when printing constants\n+// Check to insure that the output of `std::any::type_name` does not change based on `-Zverbose`\n // run-pass\n // edition: 2018\n // revisions: normal verbose\n // [verbose]compile-flags:-Zverbose\n \n-struct Wrapper<const VALUE: usize>;\n+use std::any::type_name;\n \n fn main() {\n-    assert_eq!(std::any::type_name::<[u32; 0]>(), \"[u32; 0]\");\n-    assert_eq!(std::any::type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::Wrapper<0>\");\n+    assert_eq!(type_name::<[u32; 0]>(), \"[u32; 0]\");\n+\n+    struct Wrapper<const VALUE: usize>;\n+    assert_eq!(type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::main::Wrapper<0>\");\n+\n+    assert_eq!(\n+        type_name::<dyn Fn(u32) -> u32>(),\n+        \"dyn core::ops::function::Fn<(u32,)>+Output = u32\"\n+    );\n }"}]}