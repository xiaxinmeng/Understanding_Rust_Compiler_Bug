{"sha": "702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d", "node_id": "C_kwDOAAsO6NoAKDcwMmE4M2IxYTFlZjNhOGU4NWEwZDRiNTZmZGZjMDdmNTBjMTNmMGQ", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T01:32:07Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-02T02:42:19Z"}, "message": "Restrict `#[rustc_box]` to `Box::new` calls", "tree": {"sha": "8fa6219e1f16efc0c0399a932e194037a3fae8d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fa6219e1f16efc0c0399a932e194037a3fae8d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d", "html_url": "https://github.com/rust-lang/rust/commit/702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2e45a5ba8e878ff917a88f52cb48c5e19eeb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2e45a5ba8e878ff917a88f52cb48c5e19eeb0f", "html_url": "https://github.com/rust-lang/rust/commit/2e2e45a5ba8e878ff917a88f52cb48c5e19eeb0f"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "50bef3709309d66e3fc117850ebe09dc1b223a67", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=702a83b1a1ef3a8e85a0d4b56fdfc07f50c13f0d", "patch": "@@ -287,15 +287,12 @@ impl<'a> VecArgs<'a> {\n                     Some(VecArgs::Repeat(&args[0], &args[1]))\n                 } else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n                     // `vec![a, b, c]` case\n-                    if_chain! {\n-                        if let hir::ExprKind::Box(boxed) = args[0].kind;\n-                        if let hir::ExprKind::Array(args) = boxed.kind;\n-                        then {\n-                            return Some(VecArgs::Vec(args));\n-                        }\n+                    if let hir::ExprKind::Call(_, [arg]) = &args[0].kind\n+                        && let hir::ExprKind::Array(args) = arg.kind {\n+                        Some(VecArgs::Vec(args))\n+                    } else {\n+                        None\n                     }\n-\n-                    None\n                 } else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n                     Some(VecArgs::Vec(&[]))\n                 } else {"}]}