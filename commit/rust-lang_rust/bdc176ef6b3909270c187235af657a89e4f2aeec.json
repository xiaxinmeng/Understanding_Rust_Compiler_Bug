{"sha": "bdc176ef6b3909270c187235af657a89e4f2aeec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYzE3NmVmNmIzOTA5MjcwYzE4NzIzNWFmNjU3YTg5ZTRmMmFlZWM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-12T17:07:00Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-12T17:07:00Z"}, "message": "Implement --unpretty mir-cfg for graphviz output\n\nAlso change output for --unpretty mir to output function names in a prettier way.", "tree": {"sha": "b57c312c5a4c0f14703159d093a6f1fecb4775c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57c312c5a4c0f14703159d093a6f1fecb4775c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc176ef6b3909270c187235af657a89e4f2aeec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc176ef6b3909270c187235af657a89e4f2aeec", "html_url": "https://github.com/rust-lang/rust/commit/bdc176ef6b3909270c187235af657a89e4f2aeec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc176ef6b3909270c187235af657a89e4f2aeec/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e30ff067567fc1c607e12601649e6b2539085a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30ff067567fc1c607e12601649e6b2539085a91", "html_url": "https://github.com/rust-lang/rust/commit/e30ff067567fc1c607e12601649e6b2539085a91"}], "stats": {"total": 127, "additions": 68, "deletions": 59}, "files": [{"sha": "e716c3e82b0e0966bda0cb6af4ab35a5bc774c0d", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bdc176ef6b3909270c187235af657a89e4f2aeec/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc176ef6b3909270c187235af657a89e4f2aeec/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=bdc176ef6b3909270c187235af657a89e4f2aeec", "patch": "@@ -31,6 +31,7 @@ use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n \n use rustc_mir::pretty::write_mir_pretty;\n+use rustc_mir::graphviz::write_mir_graphviz;\n \n use syntax::ast::{self, BlockCheckMode};\n use syntax::codemap;\n@@ -44,6 +45,7 @@ use graphviz as dot;\n \n use std::fs::File;\n use std::io::{self, Write};\n+use std::iter;\n use std::option;\n use std::path::PathBuf;\n use std::str::FromStr;\n@@ -80,6 +82,7 @@ pub enum PpMode {\n     PpmHir(PpSourceMode),\n     PpmFlowGraph(PpFlowGraphMode),\n     PpmMir,\n+    PpmMirCFG,\n }\n \n pub fn parse_pretty(sess: &Session,\n@@ -100,6 +103,7 @@ pub fn parse_pretty(sess: &Session,\n         (\"hir,identified\", true) => PpmHir(PpmIdentified),\n         (\"hir,typed\", true) => PpmHir(PpmTyped),\n         (\"mir\", true) => PpmMir,\n+        (\"mir-cfg\", true) => PpmMirCFG,\n         (\"flowgraph\", true) => PpmFlowGraph(PpFlowGraphMode::Default),\n         (\"flowgraph,unlabelled\", true) => PpmFlowGraph(PpFlowGraphMode::UnlabelledEdges),\n         _ => {\n@@ -574,6 +578,7 @@ fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n         PpmSource(PpmExpandedHygiene) |\n         PpmHir(_) |\n         PpmMir |\n+        PpmMirCFG |\n         PpmFlowGraph(_) => true,\n         PpmSource(PpmTyped) => panic!(\"invalid state\"),\n     }\n@@ -590,6 +595,7 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n         PpmSource(PpmExpandedHygiene) |\n         PpmHir(_) |\n         PpmMir |\n+        PpmMirCFG |\n         PpmFlowGraph(_) => true,\n         PpmSource(PpmTyped) => panic!(\"invalid state\"),\n     }\n@@ -807,9 +813,15 @@ pub fn pretty_print_input(sess: Session,\n             })\n         }\n \n-        (PpmMir, None) => {\n-            debug!(\"pretty printing MIR for whole crate\");\n-            let ast_map = ast_map.expect(\"--unpretty mir missing ast_map\");\n+        (pp_type@PpmMir, uii) | (pp_type@PpmMirCFG, uii) => {\n+            let ast_map = ast_map.expect(\"--unpretty missing ast_map\");\n+            let nodeid = if let Some(uii) = uii {\n+                debug!(\"pretty printing MIR for {:?}\", uii);\n+                Some(uii.to_one_node_id(\"--unpretty\", &sess, &ast_map))\n+            } else {\n+                debug!(\"pretty printing MIR for whole crate\");\n+                None\n+            };\n             abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n                                                              &cstore,\n                                                              ast_map,\n@@ -818,38 +830,25 @@ pub fn pretty_print_input(sess: Session,\n                                                              resolve::MakeGlobMap::No,\n                                                              |tcx, mir_map, _, _| {\n                 if let Some(mir_map) = mir_map {\n-                    for (nodeid, mir) in &mir_map.map {\n-                        try!(writeln!(out, \"MIR for {}\", tcx.map.node_to_string(*nodeid)));\n-                        try!(write_mir_pretty(mir, &mut out));\n+                    if let Some(nodeid) = nodeid {\n+                        let mir = mir_map.map.get(&nodeid).unwrap_or_else(|| {\n+                            sess.fatal(&format!(\"no MIR map entry for node {}\", nodeid))\n+                        });\n+                        try!(match pp_type {\n+                            PpmMir => write_mir_pretty(tcx, iter::once((&nodeid, mir)), &mut out),\n+                            _ => write_mir_graphviz(tcx, iter::once((&nodeid, mir)), &mut out)\n+                        });\n+                    } else {\n+                        try!(match pp_type {\n+                            PpmMir => write_mir_pretty(tcx, mir_map.map.iter(), &mut out),\n+                            _ => write_mir_graphviz(tcx, mir_map.map.iter(), &mut out)\n+                        });\n                     }\n                 }\n                 Ok(())\n             }), &sess)\n         }\n \n-        (PpmMir, Some(uii)) => {\n-            debug!(\"pretty printing MIR for {:?}\", uii);\n-            let ast_map = ast_map.expect(\"--unpretty mir missing ast_map\");\n-            let nodeid = uii.to_one_node_id(\"--unpretty\", &sess, &ast_map);\n-\n-            abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n-                                                             &cstore,\n-                                                             ast_map,\n-                                                             &arenas,\n-                                                             &id,\n-                                                             resolve::MakeGlobMap::No,\n-                                                             |tcx, mir_map, _, _| {\n-                if let Some(mir_map) = mir_map {\n-                    try!(writeln!(out, \"MIR for {}\", tcx.map.node_to_string(nodeid)));\n-                    let mir = mir_map.map.get(&nodeid).unwrap_or_else(|| {\n-                        sess.fatal(&format!(\"no MIR map entry for node {}\", nodeid))\n-                    });\n-                    try!(write_mir_pretty(mir, &mut out));\n-                }\n-                Ok(())\n-            }), &sess)\n-        }\n-\n         (PpmFlowGraph(mode), opt_uii) => {\n             debug!(\"pretty printing flow graph for {:?}\", opt_uii);\n             let uii = opt_uii.unwrap_or_else(|| {"}, {"sha": "f705c0591b5596a3258d5a9564f1189ade2ba946", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bdc176ef6b3909270c187235af657a89e4f2aeec/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc176ef6b3909270c187235af657a89e4f2aeec/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=bdc176ef6b3909270c187235af657a89e4f2aeec", "patch": "@@ -13,30 +13,34 @@ use rustc::mir::repr::*;\n use rustc::middle::ty;\n use std::fmt::Debug;\n use std::io::{self, Write};\n+use syntax::ast::NodeId;\n \n-/// Write a graphviz DOT graph for the given MIR.\n-pub fn write_mir_graphviz<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n-    try!(writeln!(w, \"digraph Mir {{\"));\n+/// Write a graphviz DOT graph of a list of MIRs.\n+pub fn write_mir_graphviz<'a, 't, W, I>(tcx: &ty::TyCtxt<'t>, iter: I, w: &mut W) -> io::Result<()>\n+where W: Write, I: Iterator<Item=(&'a NodeId, &'a Mir<'a>)> {\n+    for (&nodeid, mir) in iter {\n+        try!(writeln!(w, \"digraph Mir_{} {{\", nodeid));\n \n-    // Global graph properties\n-    try!(writeln!(w, r#\"    graph [fontname=\"monospace\"];\"#));\n-    try!(writeln!(w, r#\"    node [fontname=\"monospace\"];\"#));\n-    try!(writeln!(w, r#\"    edge [fontname=\"monospace\"];\"#));\n+        // Global graph properties\n+        try!(writeln!(w, r#\"    graph [fontname=\"monospace\"];\"#));\n+        try!(writeln!(w, r#\"    node [fontname=\"monospace\"];\"#));\n+        try!(writeln!(w, r#\"    edge [fontname=\"monospace\"];\"#));\n \n-    // Graph label\n-    try!(write_graph_label(mir, w));\n+        // Graph label\n+        try!(write_graph_label(tcx, nodeid, mir, w));\n \n-    // Nodes\n-    for block in mir.all_basic_blocks() {\n-        try!(write_node(block, mir, w));\n-    }\n+        // Nodes\n+        for block in mir.all_basic_blocks() {\n+            try!(write_node(block, mir, w));\n+        }\n \n-    // Edges\n-    for source in mir.all_basic_blocks() {\n-        try!(write_edges(source, mir, w));\n+        // Edges\n+        for source in mir.all_basic_blocks() {\n+            try!(write_edges(source, mir, w));\n+        }\n+        try!(writeln!(w, \"}}\"))\n     }\n-\n-    writeln!(w, \"}}\")\n+    Ok(())\n }\n \n /// Write a graphviz DOT node for the given basic block.\n@@ -84,8 +88,9 @@ fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result\n /// Write the graphviz DOT label for the overall graph. This is essentially a block of text that\n /// will appear below the graph, showing the type of the `fn` this MIR represents and the types of\n /// all the variables and temporaries.\n-fn write_graph_label<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n-    try!(write!(w, \"    label=<fn(\"));\n+fn write_graph_label<W: Write>(tcx: &ty::TyCtxt, nid: NodeId, mir: &Mir, w: &mut W)\n+-> io::Result<()> {\n+    try!(write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.map.path_to_string(nid))));\n \n     // fn argument types.\n     for (i, arg) in mir.arg_decls.iter().enumerate() {"}, {"sha": "c3fe4df40b5f6ba4d27640f8000021b025f3d3ec", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bdc176ef6b3909270c187235af657a89e4f2aeec/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc176ef6b3909270c187235af657a89e4f2aeec/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=bdc176ef6b3909270c187235af657a89e4f2aeec", "patch": "@@ -11,19 +11,22 @@\n use rustc::mir::repr::*;\n use rustc::middle::ty;\n use std::io::{self, Write};\n+use syntax::ast::NodeId;\n \n const INDENT: &'static str = \"    \";\n \n /// Write out a human-readable textual representation for the given MIR.\n-pub fn write_mir_pretty<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n-    try!(write_mir_intro(mir, w));\n-\n-    // Nodes\n-    for block in mir.all_basic_blocks() {\n-        try!(write_basic_block(block, mir, w));\n+pub fn write_mir_pretty<'a, 't, W, I>(tcx: &ty::TyCtxt<'t>, iter: I, w: &mut W) -> io::Result<()>\n+where W: Write, I: Iterator<Item=(&'a NodeId, &'a Mir<'a>)> {\n+    for (&nodeid, mir) in iter {\n+        try!(write_mir_intro(tcx, nodeid, mir, w));\n+        // Nodes\n+        for block in mir.all_basic_blocks() {\n+            try!(write_basic_block(block, mir, w));\n+        }\n+        try!(writeln!(w, \"}}\"))\n     }\n-\n-    writeln!(w, \"}}\")\n+    Ok(())\n }\n \n /// Write out a human-readable textual representation for the given basic block.\n@@ -46,8 +49,10 @@ fn write_basic_block<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::R\n \n /// Write out a human-readable textual representation of the MIR's `fn` type and the types of its\n /// local variables (both user-defined bindings and compiler temporaries).\n-fn write_mir_intro<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n-    try!(write!(w, \"fn(\"));\n+fn write_mir_intro<W: Write>(tcx: &ty::TyCtxt, nid: NodeId, mir: &Mir, w: &mut W)\n+-> io::Result<()> {\n+\n+    try!(write!(w, \"fn {}(\", tcx.map.path_to_string(nid)));\n \n     // fn argument types.\n     for (i, arg) in mir.arg_decls.iter().enumerate() {"}]}