{"sha": "7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "node_id": "C_kwDOAAsO6NoAKDdlMjczM2JiMWRkOWFmZTVmZDIwMzcwY2E0ZDUzOWQ0MmFjNTA0MTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T08:19:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T08:19:29Z"}, "message": "Auto merge of #98752 - matthiaskrgr:rollup-uwimznc, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #98610 (fix `emit_inference_failure_err` ICE)\n - #98640 (Let rust-analyzer ship on stable, non-preview)\n - #98686 (add ice test for 46511)\n - #98727 (rustdoc: filter '_ lifetimes from ty::PolyTraitRef)\n - #98729 (clarify that ExactSizeIterator::len returns the remaining length)\n - #98733 (Request to be notified of MIR changes)\n - #98734 (Update RELEASES.md)\n - #98745 (Add a `--build-dir` flag to rustbuild)\n - #98749 (Add macro_rules! rustdoc change to 1.62 relnotes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8e8742c5fceba260fa0c4b0349b48005f413b70c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e8742c5fceba260fa0c4b0349b48005f413b70c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "html_url": "https://github.com/rust-lang/rust/commit/7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acdcdfb61b7b472bfacbb8bb889bdf3204827f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/acdcdfb61b7b472bfacbb8bb889bdf3204827f2e", "html_url": "https://github.com/rust-lang/rust/commit/acdcdfb61b7b472bfacbb8bb889bdf3204827f2e"}, {"sha": "18d4228456a98fd6d8950f74fd117aba7fb45757", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d4228456a98fd6d8950f74fd117aba7fb45757", "html_url": "https://github.com/rust-lang/rust/commit/18d4228456a98fd6d8950f74fd117aba7fb45757"}], "stats": {"total": 225, "additions": 200, "deletions": 25}, "files": [{"sha": "ea6ae46b0edb7b5c3b3daaf7a93ff4a8f9f304bd", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -5,7 +5,7 @@ Language\n --------\n \n - [Stabilize `#[derive(Default)]` on enums with a `#[default]` variant][94457]\n-- [Stop validating some checks in dead code after functions with uninhabited return types][93313]\n+- [Teach flow sensitive checks that visibly uninhabited call expressions never return][93313]\n - [Fix constants not getting dropped if part of a diverging expression][94775]\n - [Support unit struct/enum variant in destructuring assignment][95380]\n - [Remove mutable_borrow_reservation_conflict lint and allow the code pattern][96268]\n@@ -75,6 +75,7 @@ Compatibility Notes\n - `cargo test` now passes `--target` to `rustdoc` if the specified target is\n   the same as the host target.\n   [#10594](https://github.com/rust-lang/cargo/pull/10594)\n+- [rustdoc: doctests are now run on unexported `macro_rules!` macros, matching other private items][96630]\n - [rustdoc: Remove .woff font files][96279]\n - [Enforce Copy bounds for repeat elements while considering lifetimes][95819]\n \n@@ -109,6 +110,7 @@ and related tools.\n [96393]: https://github.com/rust-lang/rust/pull/96393/\n [96436]: https://github.com/rust-lang/rust/pull/96436/\n [96557]: https://github.com/rust-lang/rust/pull/96557/\n+[96630]: https://github.com/rust-lang/rust/pull/96630/\n \n [`bool::then_some`]: https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then_some\n [`f32::total_cmp`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.total_cmp"}, {"sha": "d290752614c298ce8fcb39d9eb049bfb7571eb8a", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -334,7 +334,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let mut local_visitor = FindInferSourceVisitor::new(&self, typeck_results, arg);\n         if let Some(body_id) = body_id {\n             let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n-            debug!(?expr);\n             local_visitor.visit_expr(expr);\n         }\n \n@@ -550,6 +549,7 @@ impl<'tcx> InferSourceKind<'tcx> {\n     }\n }\n \n+#[derive(Debug)]\n struct InsertableGenericArgs<'tcx> {\n     insert_span: Span,\n     substs: SubstsRef<'tcx>,\n@@ -735,10 +735,20 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     return self.path_inferred_subst_iter(expr.hir_id, substs, path);\n                 }\n             }\n-            hir::ExprKind::Struct(path, _, _) => {\n+            // FIXME(#98711): Ideally we would also deal with type relative\n+            // paths here, even if that is quite rare.\n+            //\n+            // See the `need_type_info/expr-struct-type-relative-gat.rs` test\n+            // for an example where that would be needed.\n+            //\n+            // However, the `type_dependent_def_id` for `Self::Output` in an\n+            // impl is currently the `DefId` of `Output` in the trait definition\n+            // which makes this somewhat difficult and prevents us from just\n+            // using `self.path_inferred_subst_iter` here.\n+            hir::ExprKind::Struct(&hir::QPath::Resolved(_self_ty, path), _, _) => {\n                 if let Some(ty) = self.opt_node_type(expr.hir_id) {\n                     if let ty::Adt(_, substs) = ty.kind() {\n-                        return self.path_inferred_subst_iter(expr.hir_id, substs, path);\n+                        return Box::new(self.resolved_path_inferred_subst_iter(path, substs));\n                     }\n                 }\n             }\n@@ -945,6 +955,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n         intravisit::walk_body(self, body);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         let tcx = self.infcx.tcx;\n         match expr.kind {\n@@ -959,9 +970,9 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n-        for InsertableGenericArgs { insert_span, substs, generics_def_id, def_id } in\n-            self.expr_inferred_subst_iter(expr)\n-        {\n+        for args in self.expr_inferred_subst_iter(expr) {\n+            debug!(?args);\n+            let InsertableGenericArgs { insert_span, substs, generics_def_id, def_id } = args;\n             let generics = tcx.generics_of(generics_def_id);\n             if let Some(argument_index) =\n                 generics.own_substs(substs).iter().position(|&arg| self.generic_arg_is_target(arg))"}, {"sha": "5ad5692e7623c9abe95f91499c1671f3a7dff7ff", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -156,6 +156,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results.borrow_mut().field_indices_mut().insert(hir_id, index);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub(in super::super) fn write_resolution(\n         &self,\n         hir_id: hir::HirId,\n@@ -164,8 +165,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results.borrow_mut().type_dependent_defs_mut().insert(hir_id, r);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {\n-        debug!(\"write_method_call(hir_id={:?}, method={:?})\", hir_id, method);\n         self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));\n         self.write_substs(hir_id, method.substs);\n "}, {"sha": "1757e37ec0e2f87eaa2849b450c43bac7b09dd82", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -66,13 +66,15 @@\n ///\n /// // And now we can use it!\n ///\n-/// let counter = Counter::new();\n+/// let mut counter = Counter::new();\n ///\n /// assert_eq!(5, counter.len());\n+/// let _ = counter.next();\n+/// assert_eq!(4, counter.len());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExactSizeIterator: Iterator {\n-    /// Returns the exact length of the iterator.\n+    /// Returns the exact remaining length of the iterator.\n     ///\n     /// The implementation ensures that the iterator will return exactly `len()`\n     /// more times a [`Some(T)`] value, before returning [`None`].\n@@ -93,9 +95,11 @@ pub trait ExactSizeIterator: Iterator {\n     ///\n     /// ```\n     /// // a finite range knows exactly how many times it will iterate\n-    /// let five = 0..5;\n+    /// let mut range = 0..5;\n     ///\n-    /// assert_eq!(5, five.len());\n+    /// assert_eq!(5, range.len());\n+    /// let _ = range.next();\n+    /// assert_eq!(4, range.len());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "275412b57b55f00f8df05253bf17efeda20e02f5", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -177,9 +177,11 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n-    /// let iter = a.iter();\n+    /// let mut iter = a.iter();\n     ///\n     /// assert_eq!((3, Some(3)), iter.size_hint());\n+    /// let _ = iter.next();\n+    /// assert_eq!((2, Some(2)), iter.size_hint());\n     /// ```\n     ///\n     /// A more complex example:"}, {"sha": "6ead79ef040a98e7945812cbde1d2924b88f846e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -866,6 +866,7 @@ def bootstrap(help_triggered):\n \n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n+    parser.add_argument('--build-dir')\n     parser.add_argument('--build')\n     parser.add_argument('--color', choices=['always', 'never', 'auto'])\n     parser.add_argument('--clean', action='store_true')\n@@ -915,7 +916,7 @@ def bootstrap(help_triggered):\n \n     build.check_vendored_status()\n \n-    build_dir = build.get_toml('build-dir', 'build') or 'build'\n+    build_dir = args.build_dir or build.get_toml('build-dir', 'build') or 'build'\n     build.build_dir = os.path.abspath(build_dir)\n \n     with open(os.path.join(build.rust_root, \"src\", \"stage0.json\")) as f:"}, {"sha": "2fc18c9e79e32adb782c70b05e46327bcb446a34", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -857,7 +857,7 @@ impl Config {\n         let build = toml.build.unwrap_or_default();\n \n         set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n-        set(&mut config.out, build.build_dir.map(PathBuf::from));\n+        set(&mut config.out, flags.build_dir.or_else(|| build.build_dir.map(PathBuf::from)));\n         // NOTE: Bootstrap spawns various commands with different working directories.\n         // To avoid writing to random places on the file system, `config.out` needs to be an absolute path.\n         if !config.out.is_absolute() {"}, {"sha": "74ec9cab5ca97f31656a49955cd0a3600eca39b7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -1044,12 +1044,6 @@ impl Step for RustAnalyzer {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n-        // This prevents rust-analyzer from being built for \"dist\" or \"install\"\n-        // on the stable/beta channels. It is a nightly-only tool and should\n-        // not be included.\n-        if !builder.build.unstable_features() {\n-            return None;\n-        }\n         let compiler = self.compiler;\n         let target = self.target;\n "}, {"sha": "7ebae55efc168010bae2e8f4d0620fe03f63076d", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -51,6 +51,7 @@ pub struct Flags {\n     pub host: Option<Vec<TargetSelection>>,\n     pub target: Option<Vec<TargetSelection>>,\n     pub config: Option<PathBuf>,\n+    pub build_dir: Option<PathBuf>,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -174,6 +175,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optflagmulti(\"v\", \"verbose\", \"use verbose output (-vv for very verbose)\");\n         opts.optflag(\"i\", \"incremental\", \"use incremental compilation\");\n         opts.optopt(\"\", \"config\", \"TOML configuration file for build\", \"FILE\");\n+        opts.optopt(\n+            \"\",\n+            \"build-dir\",\n+            \"Build directory, overrides `build.build-dir` in `config.toml`\",\n+            \"DIR\",\n+        );\n         opts.optopt(\"\", \"build\", \"build target of the stage0 compiler\", \"BUILD\");\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n@@ -649,6 +656,7 @@ Arguments:\n                 None\n             },\n             config: matches.opt_str(\"config\").map(PathBuf::from),\n+            build_dir: matches.opt_str(\"build-dir\").map(PathBuf::from),\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().expect(\"`jobs` should be a number\")),\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),"}, {"sha": "5be6841e988ae74a6732bf43fd5606d3dc162f83", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -780,7 +780,7 @@ tool_extended!((self, builder),\n     // and this is close enough for now.\n     RustDemangler, rust_demangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, tool_std=true, {};\n     Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, in_tree=true, {};\n-    RustAnalyzer, rust_analyzer, \"src/tools/rust-analyzer/crates/rust-analyzer\", \"rust-analyzer\", stable=false, submodule=\"rust-analyzer\", {};\n+    RustAnalyzer, rust_analyzer, \"src/tools/rust-analyzer/crates/rust-analyzer\", \"rust-analyzer\", stable=true, submodule=\"rust-analyzer\", {};\n );\n \n impl<'a> Builder<'a> {"}, {"sha": "6ee725edcfc1d87202afeddd99c4e7e036b8c5be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -167,7 +167,7 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) => Some(GenericParamDef {\n+            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(GenericParamDef {\n                 name,\n                 kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n             }),"}, {"sha": "22cbeae72662ae697b093992c358ad425c64dd9a", "filename": "src/test/rustdoc/auxiliary/issue-98697-reexport-with-anonymous-lifetime.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-98697-reexport-with-anonymous-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-98697-reexport-with-anonymous-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-98697-reexport-with-anonymous-lifetime.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,9 @@\n+/// When reexporting this function, make sure the anonymous lifetimes are not rendered.\n+///\n+/// https://github.com/rust-lang/rust/issues/98697\n+pub fn repro<F>()\n+where\n+    F: Fn(&str),\n+{\n+    unimplemented!()\n+}"}, {"sha": "25ab55acd7747bea71ae95e08495b86bcfc9286f", "filename": "src/test/rustdoc/issue-98697.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-98697.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:issue-98697-reexport-with-anonymous-lifetime.rs\n+// ignore-cross-compile\n+\n+// When reexporting a function with a HRTB with anonymous lifetimes,\n+// make sure the anonymous lifetimes are not rendered.\n+//\n+// https://github.com/rust-lang/rust/issues/98697\n+\n+extern crate issue_98697_reexport_with_anonymous_lifetime;\n+\n+// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>() where F: Fn(&str)'\n+// @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n+pub use issue_98697_reexport_with_anonymous_lifetime::repro;"}, {"sha": "71c50e2f3f7f32c47eeb2566379c806516fb8b3f", "filename": "src/test/ui/const-generics/issue-46511.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Fconst-generics%2Fissue-46511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Fconst-generics%2Fissue-46511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-46511.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,8 @@\n+// check-fail\n+\n+struct Foo<'a> //~ ERROR parameter `'a` is never used [E0392]\n+{\n+    _a: [u8; std::mem::size_of::<&'a mut u8>()] //~ ERROR  a non-static lifetime is not allowed in a `const`\n+}\n+\n+pub fn main() {}"}, {"sha": "b21afa56dcbfc5c22fa1f991c9d6a687f1fbfaec", "filename": "src/test/ui/const-generics/issue-46511.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Fconst-generics%2Fissue-46511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Fconst-generics%2Fissue-46511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-46511.stderr?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/issue-46511.rs:5:35\n+   |\n+LL |     _a: [u8; std::mem::size_of::<&'a mut u8>()]\n+   |                                   ^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+\n+error[E0392]: parameter `'a` is never used\n+  --> $DIR/issue-46511.rs:3:12\n+   |\n+LL | struct Foo<'a>\n+   |            ^^ unused parameter\n+   |\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0392, E0658.\n+For more information about an error, try `rustc --explain E0392`."}, {"sha": "42af9fa8d113a4685bcc775c53e63fbf381ea558", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-enum.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,21 @@\n+trait Foo {\n+    type Output;\n+\n+    fn baz() -> Self::Output;\n+}\n+\n+fn needs_infer<T>() {}\n+\n+enum Bar {\n+    Variant {}\n+}\n+\n+impl Foo for u8 {\n+    type Output = Bar;\n+    fn baz() -> Self::Output {\n+        needs_infer(); //~ ERROR type annotations needed\n+        Self::Output::Variant {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "68ecb3813483716e9d8d684a99255cce52f513d5", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-enum.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-enum.stderr?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/expr-struct-type-relative-enum.rs:16:9\n+   |\n+LL |         needs_infer();\n+   |         ^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `needs_infer`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |         needs_infer::<T>();\n+   |                    +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "bcd29bb4e3495b78a3756a2753737cd0b727b1f9", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-gat.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,21 @@\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Output<T>;\n+\n+    fn baz();\n+}\n+\n+enum Bar<T> {\n+    Simple {},\n+    Generic(T),\n+}\n+\n+impl Foo for u8 {\n+    type Output<T> = Bar<T>;\n+    fn baz() {\n+        Self::Output::Simple {}; //~ ERROR type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "65a75b68c1f080b622abff74e776596982529815", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-gat.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/expr-struct-type-relative-gat.rs:17:9\n+   |\n+LL |         Self::Output::Simple {};\n+   |         ^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated type `Output`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "c3ece2b16cf08ba0bc1e34141e1177e0046d8655", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,21 @@\n+// regression test for #98598\n+\n+trait Foo {\n+    type Output;\n+\n+    fn baz() -> Self::Output;\n+}\n+\n+fn needs_infer<T>() {}\n+\n+struct Bar {}\n+\n+impl Foo for u8 {\n+    type Output = Bar;\n+    fn baz() -> Self::Output {\n+        needs_infer(); //~ ERROR type annotations needed\n+        Self::Output {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "397d8e7be04ff90585b492f259f1b6fb4c368906", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative.stderr?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/expr-struct-type-relative.rs:16:9\n+   |\n+LL |         needs_infer();\n+   |         ^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `needs_infer`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |         needs_infer::<T>();\n+   |                    +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "efe3f2b618be30a8de33055725745cd21b5d3817", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -184,7 +184,7 @@ static PKG_INSTALLERS: &[&str] = &[\"x86_64-apple-darwin\", \"aarch64-apple-darwin\"\n \n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n-static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-analyzer-preview\"];\n+static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\"];\n \n macro_rules! t {\n     ($e:expr) => {\n@@ -403,6 +403,7 @@ impl Builder {\n         rename(\"rustfmt\", \"rustfmt-preview\");\n         rename(\"clippy\", \"clippy-preview\");\n         rename(\"miri\", \"miri-preview\");\n+        rename(\"rust-analyzer\", \"rust-analyzer-preview\");\n     }\n \n     fn rust_package(&mut self, manifest: &Manifest) -> Package {"}, {"sha": "ba9ed20cc64a2a271404bd005279b751be672b23", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e2733bb1dd9afe5fd20370ca4d539d42ac50419/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "patch": "@@ -324,4 +324,4 @@ cc = [\"@rust-lang/rustfmt\"]\n \n [mentions.\"compiler/rustc_middle/src/mir/syntax.rs\"]\n message = \"This PR changes MIR\"\n-cc = [\"@oli-obk\", \"@RalfJung\", \"@JakobDegen\", \"@davidtwco\"]\n+cc = [\"@oli-obk\", \"@RalfJung\", \"@JakobDegen\", \"@davidtwco\", \"@celinval\"]"}]}