{"sha": "175229ab3d3243991aebfad6cf7052c1b5bc4ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NTIyOWFiM2QzMjQzOTkxYWViZmFkNmNmNzA1MmMxYjViYzRlY2Y=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-12-11T09:59:04Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-12-11T09:59:04Z"}, "message": "negative sign matching in mbe matching for literal", "tree": {"sha": "e396b930e21ec66524ba5b69a0e8b385643c5412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e396b930e21ec66524ba5b69a0e8b385643c5412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/175229ab3d3243991aebfad6cf7052c1b5bc4ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/175229ab3d3243991aebfad6cf7052c1b5bc4ecf", "html_url": "https://github.com/rust-lang/rust/commit/175229ab3d3243991aebfad6cf7052c1b5bc4ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/175229ab3d3243991aebfad6cf7052c1b5bc4ecf/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41321d96789ed918eebda02ada76758765d19d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/41321d96789ed918eebda02ada76758765d19d16", "html_url": "https://github.com/rust-lang/rust/commit/41321d96789ed918eebda02ada76758765d19d16"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "4860b242d007a9f46ad81b14a6f0f68274eb4c38", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/175229ab3d3243991aebfad6cf7052c1b5bc4ecf/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175229ab3d3243991aebfad6cf7052c1b5bc4ecf/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=175229ab3d3243991aebfad6cf7052c1b5bc4ecf", "patch": "@@ -356,6 +356,18 @@ impl<'a> TtIter<'a> {\n             ExpandResult { value: _, err: Some(_) } => None,\n         }\n     }\n+\n+    pub(crate) fn eat_char(&mut self) -> Option<tt::TokenTree> {\n+        let mut fork = self.clone();\n+        match fork.expect_char('-') {\n+            Ok(_) => {\n+                let tt = self.next().cloned();\n+                *self = fork;\n+                tt\n+            }\n+            Err(_) => None,\n+        }\n+    }\n }\n \n pub(super) fn match_repeat(\n@@ -447,10 +459,22 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                     .expect_lifetime()\n                     .map(|tt| Some(tt))\n                     .map_err(|()| err!(\"expected lifetime\")),\n-                \"literal\" => input\n-                    .expect_literal()\n-                    .map(|literal| Some(tt::Leaf::from(literal.clone()).into()))\n-                    .map_err(|()| err!()),\n+                \"literal\" => {\n+                    let neg = input.eat_char();\n+                    input\n+                        .expect_literal()\n+                        .map(|literal| {\n+                            let lit = tt::Leaf::from(literal.clone());\n+                            match neg {\n+                                None => Some(lit.into()),\n+                                Some(neg) => Some(tt::TokenTree::Subtree(tt::Subtree {\n+                                    delimiter: None,\n+                                    token_trees: vec![neg, lit.into()],\n+                                })),\n+                            }\n+                        })\n+                        .map_err(|()| err!())\n+                }\n                 // `vis` is optional\n                 \"vis\" => match input.eat_vis() {\n                     Some(vis) => Ok(Some(vis)),"}, {"sha": "843054fe854933c10b434d9add3ee1b5efc0bcac", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/175229ab3d3243991aebfad6cf7052c1b5bc4ecf/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175229ab3d3243991aebfad6cf7052c1b5bc4ecf/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=175229ab3d3243991aebfad6cf7052c1b5bc4ecf", "patch": "@@ -1008,11 +1008,20 @@ fn test_literal() {\n     parse_macro(\n         r#\"\n         macro_rules! foo {\n-              ($ type:ty $ lit:literal) => { const VALUE: $ type = $ lit;};\n+              ($ type:ty , $ lit:literal) => { const VALUE: $ type = $ lit;};\n         }\n \"#,\n     )\n-    .assert_expand_items(r#\"foo!(u8 0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n+    .assert_expand_items(r#\"foo!(u8,0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n+\n+    parse_macro(\n+        r#\"\n+        macro_rules! foo {\n+              ($ type:ty , $ lit:literal) => { const VALUE: $ type = $ lit;};\n+        }\n+\"#,\n+    )\n+    .assert_expand_items(r#\"foo!(i32,-1);\"#, r#\"const VALUE : i32 = - 1 ;\"#);\n }\n \n #[test]"}]}