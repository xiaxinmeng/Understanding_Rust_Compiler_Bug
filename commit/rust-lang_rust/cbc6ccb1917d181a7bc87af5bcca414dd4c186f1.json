{"sha": "cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "node_id": "C_kwDOAAsO6NoAKGNiYzZjY2IxOTE3ZDE4MWE3YmM4N2FmNWJjY2E0MTRkZDRjMTg2ZjE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-10T13:44:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-21T11:38:59Z"}, "message": "rustc_metadata: Split `children` into multiple tables\n\ninstead of merging everything into a single bag.\n\nIf it's acceptable from performance point of view, then it's more clear to keep this stuff organized more in accordance with its use.", "tree": {"sha": "8cdc36403b5a8e8f9a264b1753b74c3070e4051e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cdc36403b5a8e8f9a264b1753b74c3070e4051e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "html_url": "https://github.com/rust-lang/rust/commit/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5768bc67ecb025342770e14e03699699965706", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5768bc67ecb025342770e14e03699699965706", "html_url": "https://github.com/rust-lang/rust/commit/1f5768bc67ecb025342770e14e03699699965706"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "601281fddbaa6a4020a5a24161b89084067cccea", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "patch": "@@ -876,16 +876,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             variant_did,\n             ctor,\n             data.discr,\n-            self.root\n-                .tables\n-                .children\n-                .get(self, index)\n-                .expect(\"fields are not encoded for a variant\")\n-                .decode(self)\n-                .map(|index| ty::FieldDef {\n-                    did: self.local_def_id(index),\n-                    name: self.item_name(index),\n-                    vis: self.get_visibility(index),\n+            self.get_associated_item_or_field_def_ids(index)\n+                .map(|did| ty::FieldDef {\n+                    did,\n+                    name: self.item_name(did.index),\n+                    vis: self.get_visibility(did.index),\n                 })\n                 .collect(),\n             adt_kind,\n@@ -910,7 +905,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let variants = if let ty::AdtKind::Enum = adt_kind {\n             self.root\n                 .tables\n-                .children\n+                .module_children_non_reexports\n                 .get(self, item_id)\n                 .expect(\"variants are not encoded for an enum\")\n                 .decode(self)\n@@ -1022,11 +1017,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 }\n             } else {\n                 // Iterate over all children.\n-                for child_index in self.root.tables.children.get(self, id).unwrap().decode(self) {\n-                    // FIXME: Do not encode RPITITs as a part of this list.\n-                    if self.root.tables.opt_rpitit_info.get(self, child_index).is_none() {\n-                        yield self.get_mod_child(child_index, sess);\n-                    }\n+                let non_reexports = self.root.tables.module_children_non_reexports.get(self, id);\n+                for child_index in non_reexports.unwrap().decode(self) {\n+                    yield self.get_mod_child(child_index, sess);\n                 }\n \n                 let reexports = self.root.tables.module_children_reexports.get(self, id);\n@@ -1058,17 +1051,16 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .map_or(false, |ident| ident.name == kw::SelfLower)\n     }\n \n-    fn get_associated_item_def_ids(\n+    fn get_associated_item_or_field_def_ids(\n         self,\n         id: DefIndex,\n-        sess: &'a Session,\n     ) -> impl Iterator<Item = DefId> + 'a {\n         self.root\n             .tables\n-            .children\n+            .associated_item_or_field_def_ids\n             .get(self, id)\n-            .expect(\"associated items not encoded for an item\")\n-            .decode((self, sess))\n+            .unwrap_or_else(|| self.missing(\"associated_item_or_field_def_ids\", id))\n+            .decode(self)\n             .map(move |child_index| self.local_def_id(child_index))\n     }\n "}, {"sha": "883771cdd22346c5a272ebb0c615e60fea7e9133", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "patch": "@@ -276,7 +276,7 @@ provide! { tcx, def_id, other, cdata,\n         tcx.calculate_dtor(def_id, |_,_| Ok(()))\n     }\n     associated_item_def_ids => {\n-        tcx.arena.alloc_from_iter(cdata.get_associated_item_def_ids(def_id.index, tcx.sess))\n+        tcx.arena.alloc_from_iter(cdata.get_associated_item_or_field_def_ids(def_id.index))\n     }\n     associated_item => { cdata.get_associated_item(def_id.index, tcx.sess) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }"}, {"sha": "14c1b9d5589fec533be86e2619a5d1de4ac9aa7f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "patch": "@@ -1367,7 +1367,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         if adt_def.is_enum() {\n             let module_children = tcx.module_children_non_reexports(local_def_id);\n-            record_array!(self.tables.children[def_id] <-\n+            record_array!(self.tables.module_children_non_reexports[def_id] <-\n                 module_children.iter().map(|def_id| def_id.local_def_index));\n         } else {\n             // For non-enum, there is only one variant, and its def_id is the adt's.\n@@ -1385,7 +1385,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.variant_data[variant.def_id] <- data);\n \n             self.tables.constness.set_some(variant.def_id.index, hir::Constness::Const);\n-            record_array!(self.tables.children[variant.def_id] <- variant.fields.iter().map(|f| {\n+            record_array!(self.tables.associated_item_or_field_def_ids[variant.def_id] <- variant.fields.iter().map(|f| {\n                 assert!(f.did.is_local());\n                 f.did.index\n             }));\n@@ -1415,7 +1415,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n             let non_reexports = tcx.module_children_non_reexports(local_def_id);\n-            record_array!(self.tables.children[def_id] <-\n+            record_array!(self.tables.module_children_non_reexports[def_id] <-\n                 non_reexports.iter().map(|def_id| def_id.local_def_index));\n \n             record_defaulted_array!(self.tables.module_children_reexports[def_id] <-\n@@ -1617,7 +1617,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_item({:?})\", def_id);\n \n         let record_associated_item_def_ids = |this: &mut Self, def_ids: &[DefId]| {\n-            record_array!(this.tables.children[def_id] <- def_ids.iter().map(|&def_id| {\n+            record_array!(this.tables.associated_item_or_field_def_ids[def_id] <- def_ids.iter().map(|&def_id| {\n                 assert!(def_id.is_local());\n                 def_id.index\n             }))\n@@ -1678,6 +1678,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Trait(..) => {\n                 record!(self.tables.trait_def[def_id] <- self.tcx.trait_def(def_id));\n \n+                let module_children = tcx.module_children_non_reexports(item.owner_id.def_id);\n+                record_array!(self.tables.module_children_non_reexports[def_id] <-\n+                    module_children.iter().map(|def_id| def_id.local_def_index));\n+\n                 let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);\n                 record_associated_item_def_ids(self, associated_item_def_ids);\n                 for &item_def_id in associated_item_def_ids {"}, {"sha": "f2302c0ad43c906353a91c49e164addb3d063a78", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "patch": "@@ -361,7 +361,8 @@ define_tables! {\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n-    children: Table<DefIndex, LazyArray<DefIndex>>,\n+    module_children_non_reexports: Table<DefIndex, LazyArray<DefIndex>>,\n+    associated_item_or_field_def_ids: Table<DefIndex, LazyArray<DefIndex>>,\n     opt_def_kind: Table<DefIndex, DefKind>,\n     visibility: Table<DefIndex, LazyValue<ty::Visibility<DefIndex>>>,\n     def_span: Table<DefIndex, LazyValue<Span>>,"}, {"sha": "1c370b299619252d55b9aa06bacdf2fc0914cdbc", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6ccb1917d181a7bc87af5bcca414dd4c186f1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cbc6ccb1917d181a7bc87af5bcca414dd4c186f1", "patch": "@@ -670,9 +670,10 @@ rustc_queries! {\n         desc { \"computing the inferred outlives predicates for items in this crate\" }\n     }\n \n-    /// Maps from an impl/trait `DefId` to a list of the `DefId`s of its items.\n+    /// Maps from an impl/trait or struct/variant `DefId`\n+    /// to a list of the `DefId`s of its associated items or fields.\n     query associated_item_def_ids(key: DefId) -> &'tcx [DefId] {\n-        desc { |tcx| \"collecting associated items of `{}`\", tcx.def_path_str(key) }\n+        desc { |tcx| \"collecting associated items or fields of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }"}]}