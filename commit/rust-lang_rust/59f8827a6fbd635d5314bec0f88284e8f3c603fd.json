{"sha": "59f8827a6fbd635d5314bec0f88284e8f3c603fd", "node_id": "C_kwDOAAsO6NoAKDU5Zjg4MjdhNmZiZDYzNWQ1MzE0YmVjMGY4ODI4NGU4ZjNjNjAzZmQ", "commit": {"author": {"name": "Sebastian Ziebell", "email": "sebastian.ziebell@ferrous-systems.com", "date": "2023-04-26T14:13:58Z"}, "committer": {"name": "Sebastian Ziebell", "email": "sebastian.ziebell@ferrous-systems.com", "date": "2023-05-26T11:13:11Z"}, "message": "Implement assist to replace named generic with impl\n\nThis adds a new assist named \"replace named generic with impl\" to move\nthe generic param type from the generic param list into the function\nsignature.\n\n```rust\nfn new<T: ToString>(input: T) -> Self {}\n```\n\nbecomes\n\n```rust\nfn new(input: impl ToString) -> Self {}\n```\n\nThe first step is to determine if the assist can be applied, there has\nto be a match between generic trait param & function paramter types.\n\n* replace function parameter type(s) with impl\n* add new `impl_trait_type` function to generate the new trait bounds with `impl` keyword  for use in the\n  function signature", "tree": {"sha": "389afa9a304abe44f713a28efa8ed9cab3df8fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/389afa9a304abe44f713a28efa8ed9cab3df8fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f8827a6fbd635d5314bec0f88284e8f3c603fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f8827a6fbd635d5314bec0f88284e8f3c603fd", "html_url": "https://github.com/rust-lang/rust/commit/59f8827a6fbd635d5314bec0f88284e8f3c603fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f8827a6fbd635d5314bec0f88284e8f3c603fd/comments", "author": {"login": "justahero", "id": 1305185, "node_id": "MDQ6VXNlcjEzMDUxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1305185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justahero", "html_url": "https://github.com/justahero", "followers_url": "https://api.github.com/users/justahero/followers", "following_url": "https://api.github.com/users/justahero/following{/other_user}", "gists_url": "https://api.github.com/users/justahero/gists{/gist_id}", "starred_url": "https://api.github.com/users/justahero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justahero/subscriptions", "organizations_url": "https://api.github.com/users/justahero/orgs", "repos_url": "https://api.github.com/users/justahero/repos", "events_url": "https://api.github.com/users/justahero/events{/privacy}", "received_events_url": "https://api.github.com/users/justahero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "justahero", "id": 1305185, "node_id": "MDQ6VXNlcjEzMDUxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1305185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justahero", "html_url": "https://github.com/justahero", "followers_url": "https://api.github.com/users/justahero/followers", "following_url": "https://api.github.com/users/justahero/following{/other_user}", "gists_url": "https://api.github.com/users/justahero/gists{/gist_id}", "starred_url": "https://api.github.com/users/justahero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justahero/subscriptions", "organizations_url": "https://api.github.com/users/justahero/orgs", "repos_url": "https://api.github.com/users/justahero/repos", "events_url": "https://api.github.com/users/justahero/events{/privacy}", "received_events_url": "https://api.github.com/users/justahero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e5dc2af986d2eccb9d7caa74455a48b26c7ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e5dc2af986d2eccb9d7caa74455a48b26c7ae6", "html_url": "https://github.com/rust-lang/rust/commit/21e5dc2af986d2eccb9d7caa74455a48b26c7ae6"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "bd73c7b9c9dd56ee06d5328e5674bf23f8dd774d", "filename": "crates/ide-assists/src/handlers/replace_named_generic_with_impl.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs?ref=59f8827a6fbd635d5314bec0f88284e8f3c603fd", "patch": "@@ -0,0 +1,143 @@\n+use syntax::{\n+    ast::{\n+        self,\n+        make::{self, impl_trait_type},\n+        HasGenericParams, HasName, HasTypeBounds,\n+    },\n+    ted, AstNode,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: replace_named_generic_with_impl\n+//\n+// Replaces named generic with an `impl Trait` in function argument.\n+//\n+// ```\n+// fn new<P$0: AsRef<Path>>(location: P) -> Self {}\n+// ```\n+// ->\n+// ```\n+// fn new(location: impl AsRef<Path>) -> Self {}\n+// ```\n+pub(crate) fn replace_named_generic_with_impl(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    // finds `<P: AsRef<Path>>`\n+    let type_param = ctx.find_node_at_offset::<ast::TypeParam>()?;\n+\n+    // The list of type bounds / traits for generic name `P`\n+    let type_bound_list = type_param.type_bound_list()?;\n+\n+    // returns `P`\n+    let type_param_name = type_param.name()?;\n+\n+    let fn_ = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+    let params = fn_\n+        .param_list()?\n+        .params()\n+        .filter_map(|param| {\n+            // function parameter type needs to match generic type name\n+            if let ast::Type::PathType(path_type) = param.ty()? {\n+                let left = path_type.path()?.segment()?.name_ref()?.ident_token()?.to_string();\n+                let right = type_param_name.to_string();\n+                if left == right {\n+                    Some(param)\n+                } else {\n+                    None\n+                }\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    if params.is_empty() {\n+        return None;\n+    }\n+\n+    let target = type_param.syntax().text_range();\n+\n+    acc.add(\n+        AssistId(\"replace_named_generic_with_impl\", AssistKind::RefactorRewrite),\n+        \"Replace named generic with impl\",\n+        target,\n+        |edit| {\n+            let type_param = edit.make_mut(type_param);\n+            let fn_ = edit.make_mut(fn_);\n+\n+            // Replace generic type in `<P: AsRef<Path>>` to `<P>`\n+            let new_ty = make::ty(&type_param_name.to_string()).clone_for_update();\n+            ted::replace(type_param.syntax(), new_ty.syntax());\n+\n+            if let Some(generic_params) = fn_.generic_param_list() {\n+                if generic_params.generic_params().count() == 0 {\n+                    ted::remove(generic_params.syntax());\n+                }\n+            }\n+\n+            // Replace generic type parameter: `foo(p: P)` -> `foo(p: impl AsRef<Path>)`\n+            let new_bounds = impl_trait_type(type_bound_list).clone_for_update();\n+\n+            for param in params {\n+                if let Some(ast::Type::PathType(param_type)) = param.ty() {\n+                    let param_type = edit.make_mut(param_type).clone_for_update();\n+                    ted::replace(param_type.syntax(), new_bounds.syntax());\n+                }\n+            }\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::check_assist;\n+\n+    #[test]\n+    fn replace_generic_moves_into_function() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<T$0: ToString>(input: T) -> Self {}\"#,\n+            r#\"fn new(input: impl ToString) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_with_inner_associated_type() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: AsRef<Path>>(input: P) -> Self {}\"#,\n+            r#\"fn new(input: impl AsRef<Path>) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_trait_applies_to_all_matching_params() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<T$0: ToString>(a: T, b: T) -> Self {}\"#,\n+            r#\"fn new(a: impl ToString, b: impl ToString) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_with_multiple_generic_names() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P: AsRef<Path>, T$0: ToString>(t: T, p: P) -> Self {}\"#,\n+            r#\"fn new<P: AsRef<Path>>(t: impl ToString, p: P) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_with_multiple_trait_bounds() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: Send + Sync>(p: P) -> Self {}\"#,\n+            r#\"fn new(p: impl Send + Sync) -> Self {}\"#,\n+        );\n+    }\n+}"}, {"sha": "bd282e53434093629c58b2e225811a65b1c35cec", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=59f8827a6fbd635d5314bec0f88284e8f3c603fd", "patch": "@@ -193,6 +193,7 @@ mod handlers {\n     mod replace_arith_op;\n     mod introduce_named_generic;\n     mod replace_let_with_if_let;\n+    mod replace_named_generic_with_impl;\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n     mod replace_turbofish_with_explicit_type;\n@@ -299,6 +300,7 @@ mod handlers {\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_method_eager_lazy::replace_with_eager_method,\n             replace_method_eager_lazy::replace_with_lazy_method,\n+            replace_named_generic_with_impl::replace_named_generic_with_impl,\n             replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_arith_op::replace_arith_with_wrapping,"}, {"sha": "8a35fd290e686b4bf35e4431714a119143f071d6", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=59f8827a6fbd635d5314bec0f88284e8f3c603fd", "patch": "@@ -2338,6 +2338,19 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_replace_named_generic_with_impl() {\n+    check_doc_test(\n+        \"replace_named_generic_with_impl\",\n+        r#####\"\n+fn new<P$0: AsRef<Path>>(location: P) -> Self {}\n+\"#####,\n+        r#####\"\n+fn new(location: impl AsRef<Path>) -> Self {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_qualified_name_with_use() {\n     check_doc_test("}, {"sha": "3a61fb0a52c2645cf31536c3a96ce88e6ad951cf", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f8827a6fbd635d5314bec0f88284e8f3c603fd/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=59f8827a6fbd635d5314bec0f88284e8f3c603fd", "patch": "@@ -232,6 +232,10 @@ pub fn impl_trait(\n     ast_from_text(&format!(\"impl{ty_params_str} {trait_} for {ty}{ty_genargs_str} {{}}\"))\n }\n \n+pub fn impl_trait_type(bounds: ast::TypeBoundList) -> ast::ImplTraitType {\n+    ast_from_text(&format!(\"fn f(x: impl {bounds}) {{}}\"))\n+}\n+\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"type __ = {name_ref};\"))\n }"}]}