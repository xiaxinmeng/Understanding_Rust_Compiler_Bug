{"sha": "0cd939e36c0696aad44a213566c9b152f0437020", "node_id": "C_kwDOAAsO6NoAKDBjZDkzOWUzNmMwNjk2YWFkNDRhMjEzNTY2YzliMTUyZjA0MzcwMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T00:08:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T00:08:08Z"}, "message": "Auto merge of #96150 - est31:unused_macro_rules, r=petrochenkov\n\nImplement a lint to warn about unused macro rules\n\nThis implements a new lint to warn about unused macro rules (arms/matchers), similar to the `unused_macros` lint added by #41907 that warns about entire macros.\n\n```rust\nmacro_rules! unused_empty {\n    (hello) => { println!(\"Hello, world!\") };\n    () => { println!(\"empty\") }; //~ ERROR: 1st rule of macro `unused_empty` is never used\n}\n\nfn main() {\n    unused_empty!(hello);\n}\n```\n\nBuilds upon #96149 and #96156.\n\nFixes #73576", "tree": {"sha": "2499fbc88c8efc1693dc46f1f9946a5921fec865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2499fbc88c8efc1693dc46f1f9946a5921fec865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd939e36c0696aad44a213566c9b152f0437020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd939e36c0696aad44a213566c9b152f0437020", "html_url": "https://github.com/rust-lang/rust/commit/0cd939e36c0696aad44a213566c9b152f0437020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd939e36c0696aad44a213566c9b152f0437020/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "html_url": "https://github.com/rust-lang/rust/commit/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d"}, {"sha": "493af0b54f97840d3123a4020d178effdf841379", "url": "https://api.github.com/repos/rust-lang/rust/commits/493af0b54f97840d3123a4020d178effdf841379", "html_url": "https://github.com/rust-lang/rust/commit/493af0b54f97840d3123a4020d178effdf841379"}], "stats": {"total": 478, "additions": 400, "deletions": 78}, "files": [{"sha": "4407297c943a85dc01b1ba9cfaaec7dbe04722b5", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -816,6 +816,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n     span: Span,\n ) -> Result<&'ll Value, ()> {\n     // macros for error handling:\n+    #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n     macro_rules! emit_error {\n         ($msg: tt) => {\n             emit_error!($msg, )\n@@ -1144,6 +1145,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         span: Span,\n         args: &[OperandRef<'tcx, &'ll Value>],\n     ) -> Result<&'ll Value, ()> {\n+        #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n         macro_rules! emit_error {\n             ($msg: tt) => {\n                 emit_error!($msg, )"}, {"sha": "9ea09f7d702bae82d906cb680ecf2fbf9d58f0e8", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -886,6 +886,8 @@ pub trait ResolverExpand {\n         force: bool,\n     ) -> Result<Lrc<SyntaxExtension>, Indeterminate>;\n \n+    fn record_macro_rule_usage(&mut self, mac_id: NodeId, rule_index: usize);\n+\n     fn check_unused_macros(&mut self);\n \n     // Resolver interfaces for specific built-in macros."}, {"sha": "ba0b35470b6ba5645b84f00b387e701f19dfc478", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -156,13 +156,13 @@ impl<'a> ParserAnyMacro<'a> {\n }\n \n struct MacroRulesMacroExpander {\n+    node_id: NodeId,\n     name: Ident,\n     span: Span,\n     transparency: Transparency,\n     lhses: Vec<Vec<MatcherLoc>>,\n     rhses: Vec<mbe::TokenTree>,\n     valid: bool,\n-    is_local: bool,\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n@@ -179,12 +179,12 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n             cx,\n             sp,\n             self.span,\n+            self.node_id,\n             self.name,\n             self.transparency,\n             input,\n             &self.lhses,\n             &self.rhses,\n-            self.is_local,\n         )\n     }\n }\n@@ -207,14 +207,17 @@ fn generic_extension<'cx, 'tt>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     def_span: Span,\n+    node_id: NodeId,\n     name: Ident,\n     transparency: Transparency,\n     arg: TokenStream,\n     lhses: &'tt [Vec<MatcherLoc>],\n     rhses: &'tt [mbe::TokenTree],\n-    is_local: bool,\n ) -> Box<dyn MacResult + 'cx> {\n     let sess = &cx.sess.parse_sess;\n+    // Macros defined in the current crate have a real node id,\n+    // whereas macros from an external crate have a dummy id.\n+    let is_local = node_id != DUMMY_NODE_ID;\n \n     if cx.trace_macros() {\n         let msg = format!(\"expanding `{}! {{ {} }}`\", name, pprust::tts_to_string(&arg));\n@@ -296,6 +299,10 @@ fn generic_extension<'cx, 'tt>(\n                 let mut p = Parser::new(sess, tts, false, None);\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n+                if is_local {\n+                    cx.resolver.record_macro_rule_usage(node_id, i);\n+                }\n+\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n                 return Box::new(ParserAnyMacro {\n@@ -372,7 +379,7 @@ pub fn compile_declarative_macro(\n     features: &Features,\n     def: &ast::Item,\n     edition: Edition,\n-) -> SyntaxExtension {\n+) -> (SyntaxExtension, Vec<Span>) {\n     debug!(\"compile_declarative_macro: {:?}\", def);\n     let mk_syn_ext = |expander| {\n         SyntaxExtension::new(\n@@ -385,6 +392,7 @@ pub fn compile_declarative_macro(\n             &def.attrs,\n         )\n     };\n+    let dummy_syn_ext = || (mk_syn_ext(Box::new(macro_rules_dummy_expander)), Vec::new());\n \n     let diag = &sess.parse_sess.span_diagnostic;\n     let lhs_nm = Ident::new(sym::lhs, def.span);\n@@ -445,17 +453,17 @@ pub fn compile_declarative_macro(\n             let s = parse_failure_msg(&token);\n             let sp = token.span.substitute_dummy(def.span);\n             sess.parse_sess.span_diagnostic.struct_span_err(sp, &s).span_label(sp, msg).emit();\n-            return mk_syn_ext(Box::new(macro_rules_dummy_expander));\n+            return dummy_syn_ext();\n         }\n         Error(sp, msg) => {\n             sess.parse_sess\n                 .span_diagnostic\n                 .struct_span_err(sp.substitute_dummy(def.span), &msg)\n                 .emit();\n-            return mk_syn_ext(Box::new(macro_rules_dummy_expander));\n+            return dummy_syn_ext();\n         }\n         ErrorReported => {\n-            return mk_syn_ext(Box::new(macro_rules_dummy_expander));\n+            return dummy_syn_ext();\n         }\n     };\n \n@@ -530,6 +538,15 @@ pub fn compile_declarative_macro(\n         None => {}\n     }\n \n+    // Compute the spans of the macro rules\n+    // We only take the span of the lhs here,\n+    // so that the spans of created warnings are smaller.\n+    let rule_spans = if def.id != DUMMY_NODE_ID {\n+        lhses.iter().map(|lhs| lhs.span()).collect::<Vec<_>>()\n+    } else {\n+        Vec::new()\n+    };\n+\n     // Convert the lhses into `MatcherLoc` form, which is better for doing the\n     // actual matching. Unless the matcher is invalid.\n     let lhses = if valid {\n@@ -549,17 +566,16 @@ pub fn compile_declarative_macro(\n         vec![]\n     };\n \n-    mk_syn_ext(Box::new(MacroRulesMacroExpander {\n+    let expander = Box::new(MacroRulesMacroExpander {\n         name: def.ident,\n         span: def.span,\n+        node_id: def.id,\n         transparency,\n         lhses,\n         rhses,\n         valid,\n-        // Macros defined in the current crate have a real node id,\n-        // whereas macros from an external crate have a dummy id.\n-        is_local: def.id != DUMMY_NODE_ID,\n-    }))\n+    });\n+    (mk_syn_ext(expander), rule_spans)\n }\n \n fn check_lhs_nt_follows(sess: &ParseSess, def: &ast::Item, lhs: &mbe::TokenTree) -> bool {"}, {"sha": "0a0f292fe7a4d2f02a512fb9318f3fac2c1854d7", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -303,6 +303,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         PATH_STATEMENTS,\n         UNUSED_ATTRIBUTES,\n         UNUSED_MACROS,\n+        UNUSED_MACRO_RULES,\n         UNUSED_ALLOCATION,\n         UNUSED_DOC_COMMENTS,\n         UNUSED_EXTERN_CRATES,"}, {"sha": "7ebb1e85cdb235456a81ec861f4df9706daf2ce7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -749,6 +749,10 @@ declare_lint! {\n declare_lint! {\n     /// The `unused_macros` lint detects macros that were not used.\n     ///\n+    /// Note that this lint is distinct from the `unused_macro_rules` lint,\n+    /// which checks for single rules that never match of an otherwise used\n+    /// macro, and thus never expand.\n+    ///\n     /// ### Example\n     ///\n     /// ```rust\n@@ -775,6 +779,45 @@ declare_lint! {\n     \"detects macros that were not used\"\n }\n \n+declare_lint! {\n+    /// The `unused_macro_rules` lint detects macro rules that were not used.\n+    ///\n+    /// Note that the lint is distinct from the `unused_macros` lint, which\n+    /// fires if the entire macro is never called, while this lint fires for\n+    /// single unused rules of the macro that is otherwise used.\n+    /// `unused_macro_rules` fires only if `unused_macros` wouldn't fire.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// macro_rules! unused_empty {\n+    ///     (hello) => { println!(\"Hello, world!\") }; // This rule is unused\n+    ///     () => { println!(\"empty\") }; // This rule is used\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     unused_empty!(hello);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Unused macro rules may signal a mistake or unfinished code. Furthermore,\n+    /// they slow down compilation. Right now, silencing the warning is not\n+    /// supported on a single rule level, so you have to add an allow to the\n+    /// entire macro definition.\n+    ///\n+    /// If you intended to export the macro to make it\n+    /// available outside of the crate, use the [`macro_export` attribute].\n+    ///\n+    /// [`macro_export` attribute]: https://doc.rust-lang.org/reference/macros-by-example.html#path-based-scope\n+    pub UNUSED_MACRO_RULES,\n+    Warn,\n+    \"detects macro rules that were not used\"\n+}\n+\n declare_lint! {\n     /// The `warnings` lint allows you to change the level of other\n     /// lints which produce warnings.\n@@ -3104,6 +3147,7 @@ declare_lint_pass! {\n         OVERLAPPING_RANGE_ENDPOINTS,\n         BINDINGS_WITH_VARIANT_NAME,\n         UNUSED_MACROS,\n+        UNUSED_MACRO_RULES,\n         WARNINGS,\n         UNUSED_FEATURES,\n         STABLE_FEATURES,"}, {"sha": "ef4f1f5e84ef585b8d524e45b6725f198e6da9c1", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -258,6 +258,7 @@ macro_rules! make_mir_visitor {\n                 // for best performance, we want to use an iterator rather\n                 // than a for-loop, to avoid calling `body::Body::invalidate` for\n                 // each basic block.\n+                #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut().iter_enumerated_mut());\n                     () => (body.basic_blocks().iter_enumerated());\n@@ -279,6 +280,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_local_decl(local, & $($mutability)? body.local_decls[local]);\n                 }\n \n+                #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n                 macro_rules! type_annotations {\n                     (mut) => (body.user_type_annotations.iter_enumerated_mut());\n                     () => (body.user_type_annotations.iter_enumerated());\n@@ -932,6 +934,7 @@ macro_rules! make_mir_visitor {\n                 body: &$($mutability)? Body<'tcx>,\n                 location: Location\n             ) {\n+                #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut());\n                     () => (body.basic_blocks());"}, {"sha": "b2178ff59954b620d34e6ca32db5508e9d7489c4", "filename": "compiler/rustc_resolve/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2FCargo.toml?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -4,7 +4,6 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [lib]\n-test = false\n doctest = false\n \n [dependencies]"}, {"sha": "e68d6fdeea55b310321eae866438d87abe9bab24", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -194,7 +194,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {\n-            LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition),\n+            LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition).0,\n             LoadedMacro::ProcMacro(ext) => ext,\n         });\n \n@@ -1218,25 +1218,35 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     // Mark the given macro as unused unless its name starts with `_`.\n     // Macro uses will remove items from this set, and the remaining\n     // items will be reported as `unused_macros`.\n-    fn insert_unused_macro(&mut self, ident: Ident, def_id: LocalDefId, node_id: NodeId) {\n+    fn insert_unused_macro(\n+        &mut self,\n+        ident: Ident,\n+        def_id: LocalDefId,\n+        node_id: NodeId,\n+        rule_spans: &[Span],\n+    ) {\n         if !ident.as_str().starts_with('_') {\n             self.r.unused_macros.insert(def_id, (node_id, ident));\n+            for (rule_i, rule_span) in rule_spans.iter().enumerate() {\n+                self.r.unused_macro_rules.insert((def_id, rule_i), (ident, *rule_span));\n+            }\n         }\n     }\n \n     fn define_macro(&mut self, item: &ast::Item) -> MacroRulesScopeRef<'a> {\n         let parent_scope = self.parent_scope;\n         let expansion = parent_scope.expansion;\n         let def_id = self.r.local_def_id(item.id);\n-        let (ext, ident, span, macro_rules) = match &item.kind {\n+        let (ext, ident, span, macro_rules, rule_spans) = match &item.kind {\n             ItemKind::MacroDef(def) => {\n-                let ext = Lrc::new(self.r.compile_macro(item, self.r.session.edition()));\n-                (ext, item.ident, item.span, def.macro_rules)\n+                let (ext, rule_spans) = self.r.compile_macro(item, self.r.session.edition());\n+                let ext = Lrc::new(ext);\n+                (ext, item.ident, item.span, def.macro_rules, rule_spans)\n             }\n             ItemKind::Fn(..) => match self.proc_macro_stub(item) {\n                 Some((macro_kind, ident, span)) => {\n                     self.r.proc_macro_stubs.insert(def_id);\n-                    (self.r.dummy_ext(macro_kind), ident, span, false)\n+                    (self.r.dummy_ext(macro_kind), ident, span, false, Vec::new())\n                 }\n                 None => return parent_scope.macro_rules,\n             },\n@@ -1264,7 +1274,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(module, ident, MacroNS, (res, vis, span, expansion, IsMacroExport));\n             } else {\n                 self.r.check_reserved_macro_name(ident, res);\n-                self.insert_unused_macro(ident, def_id, item.id);\n+                self.insert_unused_macro(ident, def_id, item.id, &rule_spans);\n             }\n             self.r.visibilities.insert(def_id, vis);\n             let scope = self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n@@ -1287,7 +1297,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 _ => self.resolve_visibility(&item.vis),\n             };\n             if vis != ty::Visibility::Public {\n-                self.insert_unused_macro(ident, def_id, item.id);\n+                self.insert_unused_macro(ident, def_id, item.id, &rule_spans);\n             }\n             self.r.define(module, ident, MacroNS, (res, vis, span, expansion));\n             self.r.visibilities.insert(def_id, vis);"}, {"sha": "268e2c9b69bdfd944c5f5c4c6c3c9ef21cf5cea0", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -35,6 +35,9 @@ use crate::{LexicalScopeBinding, NameBinding, NameBindingKind, PrivacyError, Vis\n use crate::{ParentScope, PathResult, ResolutionError, Resolver, Scope, ScopeSet};\n use crate::{Segment, UseError};\n \n+#[cfg(test)]\n+mod tests;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A vector of spans and replacements, a message and applicability.\n@@ -2675,3 +2678,14 @@ fn is_span_suitable_for_use_injection(s: Span) -> bool {\n     // import or other generated ones\n     !s.from_expansion()\n }\n+\n+/// Convert the given number into the corresponding ordinal\n+crate fn ordinalize(v: usize) -> String {\n+    let suffix = match ((11..=13).contains(&(v % 100)), v % 10) {\n+        (false, 1) => \"st\",\n+        (false, 2) => \"nd\",\n+        (false, 3) => \"rd\",\n+        _ => \"th\",\n+    };\n+    format!(\"{v}{suffix}\")\n+}"}, {"sha": "2aa6cc61e460ad4363f768acc940f22a350d8463", "filename": "compiler/rustc_resolve/src/diagnostics/tests.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics%2Ftests.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -0,0 +1,40 @@\n+use super::ordinalize;\n+\n+#[test]\n+fn test_ordinalize() {\n+    assert_eq!(ordinalize(1), \"1st\");\n+    assert_eq!(ordinalize(2), \"2nd\");\n+    assert_eq!(ordinalize(3), \"3rd\");\n+    assert_eq!(ordinalize(4), \"4th\");\n+    assert_eq!(ordinalize(5), \"5th\");\n+    // ...\n+    assert_eq!(ordinalize(10), \"10th\");\n+    assert_eq!(ordinalize(11), \"11th\");\n+    assert_eq!(ordinalize(12), \"12th\");\n+    assert_eq!(ordinalize(13), \"13th\");\n+    assert_eq!(ordinalize(14), \"14th\");\n+    // ...\n+    assert_eq!(ordinalize(20), \"20th\");\n+    assert_eq!(ordinalize(21), \"21st\");\n+    assert_eq!(ordinalize(22), \"22nd\");\n+    assert_eq!(ordinalize(23), \"23rd\");\n+    assert_eq!(ordinalize(24), \"24th\");\n+    // ...\n+    assert_eq!(ordinalize(30), \"30th\");\n+    assert_eq!(ordinalize(31), \"31st\");\n+    assert_eq!(ordinalize(32), \"32nd\");\n+    assert_eq!(ordinalize(33), \"33rd\");\n+    assert_eq!(ordinalize(34), \"34th\");\n+    // ...\n+    assert_eq!(ordinalize(7010), \"7010th\");\n+    assert_eq!(ordinalize(7011), \"7011th\");\n+    assert_eq!(ordinalize(7012), \"7012th\");\n+    assert_eq!(ordinalize(7013), \"7013th\");\n+    assert_eq!(ordinalize(7014), \"7014th\");\n+    // ...\n+    assert_eq!(ordinalize(7020), \"7020th\");\n+    assert_eq!(ordinalize(7021), \"7021st\");\n+    assert_eq!(ordinalize(7022), \"7022nd\");\n+    assert_eq!(ordinalize(7023), \"7023rd\");\n+    assert_eq!(ordinalize(7024), \"7024th\");\n+}"}, {"sha": "8d3c46c29a861a78063e4dda24e333db9f38c7ad", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -975,6 +975,7 @@ pub struct Resolver<'a> {\n     local_macro_def_scopes: FxHashMap<LocalDefId, Module<'a>>,\n     ast_transform_scopes: FxHashMap<LocalExpnId, Module<'a>>,\n     unused_macros: FxHashMap<LocalDefId, (NodeId, Ident)>,\n+    unused_macro_rules: FxHashMap<(LocalDefId, usize), (Ident, Span)>,\n     proc_macro_stubs: FxHashSet<LocalDefId>,\n     /// Traces collected during macro resolution and validated when it's complete.\n     single_segment_macro_resolutions:\n@@ -1374,6 +1375,7 @@ impl<'a> Resolver<'a> {\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: Default::default(),\n             unused_macros: Default::default(),\n+            unused_macro_rules: Default::default(),\n             proc_macro_stubs: Default::default(),\n             single_segment_macro_resolutions: Default::default(),\n             multi_segment_macro_resolutions: Default::default(),"}, {"sha": "2337f72f1e8b1c8093909063db84fe818c89fca5", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -22,7 +22,8 @@ use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::RegisteredTools;\n-use rustc_session::lint::builtin::{LEGACY_DERIVE_HELPERS, SOFT_UNSTABLE, UNUSED_MACROS};\n+use rustc_session::lint::builtin::{LEGACY_DERIVE_HELPERS, SOFT_UNSTABLE};\n+use rustc_session::lint::builtin::{UNUSED_MACROS, UNUSED_MACRO_RULES};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -311,6 +312,11 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         Ok(ext)\n     }\n \n+    fn record_macro_rule_usage(&mut self, id: NodeId, rule_i: usize) {\n+        let did = self.local_def_id(id);\n+        self.unused_macro_rules.remove(&(did, rule_i));\n+    }\n+\n     fn check_unused_macros(&mut self) {\n         for (_, &(node_id, ident)) in self.unused_macros.iter() {\n             self.lint_buffer.buffer_lint(\n@@ -320,6 +326,23 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 &format!(\"unused macro definition: `{}`\", ident.as_str()),\n             );\n         }\n+        for (&(def_id, arm_i), &(ident, rule_span)) in self.unused_macro_rules.iter() {\n+            if self.unused_macros.contains_key(&def_id) {\n+                // We already lint the entire macro as unused\n+                continue;\n+            }\n+            let node_id = self.def_id_to_node_id[def_id];\n+            self.lint_buffer.buffer_lint(\n+                UNUSED_MACRO_RULES,\n+                node_id,\n+                rule_span,\n+                &format!(\n+                    \"{} rule of macro `{}` is never used\",\n+                    crate::diagnostics::ordinalize(arm_i + 1),\n+                    ident.as_str()\n+                ),\n+            );\n+        }\n     }\n \n     fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool {\n@@ -830,10 +853,15 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    /// Compile the macro into a `SyntaxExtension` and possibly replace\n-    /// its expander to a pre-defined one for built-in macros.\n-    crate fn compile_macro(&mut self, item: &ast::Item, edition: Edition) -> SyntaxExtension {\n-        let mut result = compile_declarative_macro(\n+    /// Compile the macro into a `SyntaxExtension` and its rule spans.\n+    ///\n+    /// Possibly replace its expander to a pre-defined one for built-in macros.\n+    crate fn compile_macro(\n+        &mut self,\n+        item: &ast::Item,\n+        edition: Edition,\n+    ) -> (SyntaxExtension, Vec<Span>) {\n+        let (mut result, mut rule_spans) = compile_declarative_macro(\n             &self.session,\n             self.session.features_untracked(),\n             item,\n@@ -849,6 +877,7 @@ impl<'a> Resolver<'a> {\n                 match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {\n                     BuiltinMacroState::NotYetSeen(ext) => {\n                         result.kind = ext;\n+                        rule_spans = Vec::new();\n                         if item.id != ast::DUMMY_NODE_ID {\n                             self.builtin_macro_kinds\n                                 .insert(self.local_def_id(item.id), result.macro_kind());\n@@ -871,6 +900,6 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        result\n+        (result, rule_spans)\n     }\n }"}, {"sha": "093b02113c3afca9513d5fe2a60335fe7218490a", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -56,6 +56,7 @@ macro_rules! vec {\n // `slice::into_vec`  function which is only available with cfg(test)\n // NB see the slice::hack module in slice.rs for more information\n #[cfg(all(not(no_global_oom_handling), test))]\n+#[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n macro_rules! vec {\n     () => (\n         $crate::vec::Vec::new()"}, {"sha": "28335054b1f417175ab5005cf1d9cf7937737930", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1 +1 @@\n-Subproject commit d215afe9d1cf79c5edb0dfd3cdf4c50aca1f1760\n+Subproject commit 28335054b1f417175ab5005cf1d9cf7937737930"}, {"sha": "fd5e42ef1707716c8806bc8a47587de054aa9eaf", "filename": "src/test/ui/consts/const-float-bits-conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n+#![allow(unused_macro_rules)]\n \n // Don't promote\n const fn nop<T>(x: T) -> T { x }"}, {"sha": "537c84940fd019f30d25636800dc130347b31631", "filename": "src/test/ui/lint/unused/unused-macro-rules-decl.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-decl.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -0,0 +1,49 @@\n+#![feature(decl_macro)]\n+#![deny(unused_macro_rules)]\n+// To make sure we are not hitting this\n+#![deny(unused_macros)]\n+\n+// Most simple case\n+macro num {\n+    (one) => { 1 },\n+    (two) => { 2 }, //~ ERROR: 2nd rule of macro\n+    (three) => { 3 },\n+    (four) => { 4 }, //~ ERROR: 4th rule of macro\n+}\n+const _NUM: u8 = num!(one) + num!(three);\n+\n+// Check that allowing the lint works\n+#[allow(unused_macro_rules)]\n+macro num_allowed {\n+    (one) => { 1 },\n+    (two) => { 2 },\n+    (three) => { 3 },\n+    (four) => { 4 },\n+}\n+const _NUM_ALLOWED: u8 = num_allowed!(one) + num_allowed!(three);\n+\n+// Check that macro calls inside the macro trigger as usage\n+macro num_rec {\n+    (one) => { 1 },\n+    (two) => {\n+        num_rec!(one) + num_rec!(one)\n+    },\n+    (three) => { //~ ERROR: 3rd rule of macro\n+        num_rec!(one) + num_rec!(two)\n+    },\n+    (four) => {\n+        num_rec!(two) + num_rec!(two)\n+    },\n+}\n+const _NUM_RECURSIVE: u8 = num_rec!(four);\n+\n+// No error if the macro is public\n+pub macro num_public {\n+    (one) => { 1 },\n+    (two) => { 2 },\n+    (three) => { 3 },\n+    (four) => { 4 },\n+}\n+const _NUM_PUBLIC: u8 = num_public!(one) + num_public!(three);\n+\n+fn main() {}"}, {"sha": "4d9b22feda2a2f2b409700c0e6fab353a381b3e4", "filename": "src/test/ui/lint/unused/unused-macro-rules-decl.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-decl.stderr?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -0,0 +1,26 @@\n+error: 4th rule of macro `num` is never used\n+  --> $DIR/unused-macro-rules-decl.rs:11:5\n+   |\n+LL |     (four) => { 4 },\n+   |     ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-macro-rules-decl.rs:2:9\n+   |\n+LL | #![deny(unused_macro_rules)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: 2nd rule of macro `num` is never used\n+  --> $DIR/unused-macro-rules-decl.rs:9:5\n+   |\n+LL |     (two) => { 2 },\n+   |     ^^^^^\n+\n+error: 3rd rule of macro `num_rec` is never used\n+  --> $DIR/unused-macro-rules-decl.rs:31:5\n+   |\n+LL |     (three) => {\n+   |     ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "eeaf4d1b0a9ce31b99d9cfad758a496be991d356", "filename": "src/test/ui/lint/unused/unused-macro-rules.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,29 +1,47 @@\n+#![deny(unused_macro_rules)]\n+// To make sure we are not hitting this\n #![deny(unused_macros)]\n \n // Most simple case\n-macro_rules! unused { //~ ERROR: unused macro definition\n-    () => {};\n+macro_rules! num {\n+    (one) => { 1 };\n+    (two) => { 2 }; //~ ERROR: 2nd rule of macro\n+    (three) => { 3 };\n+    (four) => { 4 }; //~ ERROR: 4th rule of macro\n }\n+const _NUM: u8 = num!(one) + num!(three);\n \n-// Test macros created by macros\n-macro_rules! create_macro {\n-    () => {\n-        macro_rules! m { //~ ERROR: unused macro definition\n-            () => {};\n-        }\n-    };\n+// Check that allowing the lint works\n+#[allow(unused_macro_rules)]\n+macro_rules! num_allowed {\n+    (one) => { 1 };\n+    (two) => { 2 };\n+    (three) => { 3 };\n+    (four) => { 4 };\n }\n-create_macro!();\n+const _NUM_ALLOWED: u8 = num_allowed!(one) + num_allowed!(three);\n \n-#[allow(unused_macros)]\n-mod bar {\n-    // Test that putting the #[deny] close to the macro's definition\n-    // works.\n+// Check that macro calls inside the macro trigger as usage\n+macro_rules! num_rec {\n+    (one) => { 1 };\n+    (two) => {\n+        num_rec!(one) + num_rec!(one)\n+    };\n+    (three) => { //~ ERROR: 3rd rule of macro\n+        num_rec!(one) + num_rec!(two)\n+    };\n+    (four) => { num_rec!(two) + num_rec!(two) };\n+}\n+const _NUM_RECURSIVE: u8 = num_rec!(four);\n \n-    #[deny(unused_macros)]\n-    macro_rules! unused { //~ ERROR: unused macro definition\n-        () => {};\n-    }\n+// No error if the macro is being exported\n+#[macro_export]\n+macro_rules! num_exported {\n+    (one) => { 1 };\n+    (two) => { 2 };\n+    (three) => { 3 };\n+    (four) => { 4 };\n }\n+const _NUM_EXPORTED: u8 = num_exported!(one) + num_exported!(three);\n \n fn main() {}"}, {"sha": "2b3098a5128d458668569303ad8f626d031e2885", "filename": "src/test/ui/lint/unused/unused-macro-rules.stderr", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.stderr?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,32 +1,26 @@\n-error: unused macro definition: `unused`\n-  --> $DIR/unused-macro-rules.rs:4:14\n+error: 4th rule of macro `num` is never used\n+  --> $DIR/unused-macro-rules.rs:10:5\n    |\n-LL | macro_rules! unused {\n-   |              ^^^^^^\n+LL |     (four) => { 4 };\n+   |     ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-macro-rules.rs:1:9\n    |\n-LL | #![deny(unused_macros)]\n-   |         ^^^^^^^^^^^^^\n+LL | #![deny(unused_macro_rules)]\n+   |         ^^^^^^^^^^^^^^^^^^\n \n-error: unused macro definition: `m`\n-  --> $DIR/unused-macro-rules.rs:11:22\n+error: 2nd rule of macro `num` is never used\n+  --> $DIR/unused-macro-rules.rs:8:5\n    |\n-LL |         macro_rules! m {\n-   |                      ^\n+LL |     (two) => { 2 };\n+   |     ^^^^^\n \n-error: unused macro definition: `unused`\n-  --> $DIR/unused-macro-rules.rs:24:18\n+error: 3rd rule of macro `num_rec` is never used\n+  --> $DIR/unused-macro-rules.rs:30:5\n    |\n-LL |     macro_rules! unused {\n-   |                  ^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/unused-macro-rules.rs:23:12\n-   |\n-LL |     #[deny(unused_macros)]\n-   |            ^^^^^^^^^^^^^\n+LL |     (three) => {\n+   |     ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "21f6108b18ad5b67b4396d20221a59b3215a8276", "filename": "src/test/ui/lint/unused/unused-macros-decl.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros-decl.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,5 +1,7 @@\n #![feature(decl_macro)]\n #![deny(unused_macros)]\n+// To make sure we are not hitting this\n+#![deny(unused_macro_rules)]\n \n // Most simple case\n macro unused { //~ ERROR: unused macro definition", "previous_filename": "src/test/ui/lint/unused/unused-macro.rs"}, {"sha": "1f426b9d91a610e51a9e8906ee23452618ced202", "filename": "src/test/ui/lint/unused/unused-macros-decl.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros-decl.stderr?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,29 +1,29 @@\n error: unused macro definition: `unused`\n-  --> $DIR/unused-macro.rs:5:7\n+  --> $DIR/unused-macros-decl.rs:7:7\n    |\n LL | macro unused {\n    |       ^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-macro.rs:2:9\n+  --> $DIR/unused-macros-decl.rs:2:9\n    |\n LL | #![deny(unused_macros)]\n    |         ^^^^^^^^^^^^^\n \n error: unused macro definition: `unused`\n-  --> $DIR/unused-macro.rs:15:11\n+  --> $DIR/unused-macros-decl.rs:17:11\n    |\n LL |     macro unused {\n    |           ^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-macro.rs:14:12\n+  --> $DIR/unused-macros-decl.rs:16:12\n    |\n LL |     #[deny(unused_macros)]\n    |            ^^^^^^^^^^^^^\n \n error: unused macro definition: `unused`\n-  --> $DIR/unused-macro.rs:21:22\n+  --> $DIR/unused-macros-decl.rs:23:22\n    |\n LL |     pub(crate) macro unused {\n    |                      ^^^^^^", "previous_filename": "src/test/ui/lint/unused/unused-macro.stderr"}, {"sha": "70b50b2082b36069d78f5710e125edf1c4729d7f", "filename": "src/test/ui/lint/unused/unused-macros.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -0,0 +1,31 @@\n+#![deny(unused_macros)]\n+// To make sure we are not hitting this\n+#![deny(unused_macro_rules)]\n+\n+// Most simple case\n+macro_rules! unused { //~ ERROR: unused macro definition\n+    () => {};\n+}\n+\n+// Test macros created by macros\n+macro_rules! create_macro {\n+    () => {\n+        macro_rules! m { //~ ERROR: unused macro definition\n+            () => {};\n+        }\n+    };\n+}\n+create_macro!();\n+\n+#[allow(unused_macros)]\n+mod bar {\n+    // Test that putting the #[deny] close to the macro's definition\n+    // works.\n+\n+    #[deny(unused_macros)]\n+    macro_rules! unused { //~ ERROR: unused macro definition\n+        () => {};\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d0baf5becec4c3594bdfcfb222167a2bbde2195e", "filename": "src/test/ui/lint/unused/unused-macros.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macros.stderr?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -0,0 +1,32 @@\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macros.rs:6:14\n+   |\n+LL | macro_rules! unused {\n+   |              ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-macros.rs:1:9\n+   |\n+LL | #![deny(unused_macros)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unused macro definition: `m`\n+  --> $DIR/unused-macros.rs:13:22\n+   |\n+LL |         macro_rules! m {\n+   |                      ^\n+\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macros.rs:26:18\n+   |\n+LL |     macro_rules! unused {\n+   |                  ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-macros.rs:25:12\n+   |\n+LL |     #[deny(unused_macros)]\n+   |            ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bccfdc611460ecdd6f3f4c8bdcbb2073872d7e51", "filename": "src/test/ui/macros/issue-41803.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fissue-41803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fissue-41803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-41803.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+#![allow(unused_macro_rules)]\n+\n /// A compile-time map from identifiers to arbitrary (heterogeneous) expressions\n macro_rules! ident_map {\n     ( $name:ident = { $($key:ident => $e:expr,)* } ) => {"}, {"sha": "f178cd30cb499e1ea1108101bf0ff7b6ad477b68", "filename": "src/test/ui/macros/issue-52169.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fissue-52169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fissue-52169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-52169.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#[allow(unused_macro_rules)]\n macro_rules! a {\n     ($i:literal) => { \"right\" };\n     ($i:tt) => { \"wrong\" };"}, {"sha": "eeb1ddd84ae58c37f0fa0b7f1473b5bf0ffa303f", "filename": "src/test/ui/macros/macro-first-set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_macro_rules)]\n \n //{{{ issue 40569 ==============================================================\n "}, {"sha": "3c2e71f9c43f3610c7416efb7489c61cc8694876", "filename": "src/test/ui/macros/macro-literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fmacro-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fmacro-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-literal.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -21,6 +21,7 @@ macro_rules! only_expr {\n     };\n }\n \n+#[allow(unused_macro_rules)]\n macro_rules! mtester_dbg {\n     ($l:literal) => {\n         &format!(\"macro caught literal: {:?}\", $l)"}, {"sha": "174056d6cdfaf88d67cb3e1333490c26beecce1e", "filename": "src/test/ui/macros/macro-pub-matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fmacro-pub-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fmacro-pub-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pub-matcher.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code, unused_imports)]\n+#![allow(dead_code, unused_imports, unused_macro_rules)]\n #![feature(crate_visibility_modifier)]\n \n /**"}, {"sha": "570191d2c90ae649a800a55eea34de4e244fb55f", "filename": "src/test/ui/macros/stmt_expr_attr_macro_parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fstmt_expr_attr_macro_parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Fstmt_expr_attr_macro_parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstmt_expr_attr_macro_parse.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+#![allow(unused_macro_rules)]\n+\n macro_rules! m {\n     ($e:expr) => {\n         \"expr includes attr\""}, {"sha": "946b5bd5d93341d2bf4a171830982e1c2c28b5ee", "filename": "src/test/ui/macros/type-macros-hlist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Ftype-macros-hlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fmacros%2Ftype-macros-hlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftype-macros-hlist.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+#![allow(unused_macro_rules)]\n+\n use std::ops::*;\n \n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "76c07bbfd81067e58c852c38aea1a2ae21ed5051", "filename": "src/test/ui/parser/issues/issue-65846-rollback-gating-failing-matcher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-65846-rollback-gating-failing-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-65846-rollback-gating-failing-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-65846-rollback-gating-failing-matcher.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -3,6 +3,7 @@\n // Test that failing macro matchers will not cause pre-expansion errors\n // even though they use a feature that is pre-expansion gated.\n \n+#[allow(unused_macro_rules)]\n macro_rules! m {\n     ($e:expr) => { 0 }; // This fails on the input below due to `, foo`.\n     ($e:expr,) => { 1 }; // This also fails to match due to `foo`."}, {"sha": "e909c79070ca773a27444f87fea2ad713a3f23b2", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n+#![allow(dead_code, unused_variables, unused_macro_rules, bad_style)]\n #![deny(keyword_idents)]\n \n // edition:2015"}, {"sha": "2bfbc3871d128ece82251ce043a3a9ce61c1d9d7", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n+#![allow(dead_code, unused_variables, unused_macro_rules, bad_style)]\n #![deny(keyword_idents)]\n \n // edition:2015"}, {"sha": "1ce02e48c05b6399492cc3ee19b28d5c4a36edc0", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd939e36c0696aad44a213566c9b152f0437020/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=0cd939e36c0696aad44a213566c9b152f0437020", "patch": "@@ -280,10 +280,6 @@ fn main() {\n fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\n     let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\n     macro_rules! register_diagnostics {\n-        ($($ecode:ident: $message:expr,)*) => (\n-            register_diagnostics!{$($ecode:$message,)* ;}\n-        );\n-\n         ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n             $(\n                 {long_codes.extend(["}]}