{"sha": "17f740e9d325f97a82db659279186c780a40b8c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Zjc0MGU5ZDMyNWY5N2E4MmRiNjU5Mjc5MTg2Yzc4MGE0MGI4YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-09T08:15:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-09T08:15:45Z"}, "message": "Auto merge of #1403 - RalfJung:rustup, r=RalfJung\n\nbump Rust, fix for renames", "tree": {"sha": "c9d4541a39071734a3fb92ff5beb67fbd3e59c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d4541a39071734a3fb92ff5beb67fbd3e59c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17f740e9d325f97a82db659279186c780a40b8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17f740e9d325f97a82db659279186c780a40b8c3", "html_url": "https://github.com/rust-lang/rust/commit/17f740e9d325f97a82db659279186c780a40b8c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17f740e9d325f97a82db659279186c780a40b8c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95dec9cee43b5bf71c444a4b0738a3ade151090b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95dec9cee43b5bf71c444a4b0738a3ade151090b", "html_url": "https://github.com/rust-lang/rust/commit/95dec9cee43b5bf71c444a4b0738a3ade151090b"}, {"sha": "379ac82a1c1d7530070e6676f03c8ca5eb9f7894", "url": "https://api.github.com/repos/rust-lang/rust/commits/379ac82a1c1d7530070e6676f03c8ca5eb9f7894", "html_url": "https://github.com/rust-lang/rust/commit/379ac82a1c1d7530070e6676f03c8ca5eb9f7894"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "d53d4d68e486a7088e3b89e6c22e0facb98157b9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17f740e9d325f97a82db659279186c780a40b8c3/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/17f740e9d325f97a82db659279186c780a40b8c3/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=17f740e9d325f97a82db659279186c780a40b8c3", "patch": "@@ -1 +1 @@\n-a08c47310c7d49cbdc5d7afb38408ba519967ecd\n+0f9088f9610618e724cfc0cf2ba3721918be5ec9"}, {"sha": "8296f71773c2a0abe717b678cb452def8450c6f7", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17f740e9d325f97a82db659279186c780a40b8c3/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f740e9d325f97a82db659279186c780a40b8c3/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=17f740e9d325f97a82db659279186c780a40b8c3", "patch": "@@ -118,7 +118,7 @@ pub fn report_error<'tcx, 'mir>(\n     report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, helps, true);\n \n     // Extra output to help debug specific issues.\n-    if let UndefinedBehavior(UndefinedBehaviorInfo::InvalidUndefBytes(Some(ptr))) = e.kind {\n+    if let UndefinedBehavior(UndefinedBehaviorInfo::InvalidUninitBytes(Some(ptr))) = e.kind {\n         eprintln!(\n             \"Uninitialized read occurred at offset 0x{:x} into this allocation:\",\n             ptr.offset.bytes(),"}, {"sha": "8b20ee2f0d8355daf8cda62e1c07885c09fb123a", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17f740e9d325f97a82db659279186c780a40b8c3/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f740e9d325f97a82db659279186c780a40b8c3/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=17f740e9d325f97a82db659279186c780a40b8c3", "patch": "@@ -54,7 +54,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn eval_path_scalar(\n         &mut self,\n         path: &[&str],\n-    ) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+    ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n         let this = self.eval_context_mut();\n         let instance = this.resolve_path(path);\n         let cid = GlobalId { instance, promoted: None };"}, {"sha": "c205c5c8dddb11ba79d0b3f3aaa7b0246ad95177", "filename": "src/shims/sync.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/17f740e9d325f97a82db659279186c780a40b8c3/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f740e9d325f97a82db659279186c780a40b8c3/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=17f740e9d325f97a82db659279186c780a40b8c3", "patch": "@@ -25,7 +25,7 @@ fn get_at_offset<'mir, 'tcx: 'mir>(\n     offset: u64,\n     layout: TyAndLayout<'tcx>,\n     min_size: u64,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     // Ensure that the following read at an offset to the attr pointer is within bounds\n     assert_ptr_target_min_size(ecx, op, min_size)?;\n     let op_place = ecx.deref_operand(op)?;\n@@ -37,7 +37,7 @@ fn set_at_offset<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     op: OpTy<'tcx, Tag>,\n     offset: u64,\n-    value: impl Into<ScalarMaybeUndef<Tag>>,\n+    value: impl Into<ScalarMaybeUninit<Tag>>,\n     layout: TyAndLayout<'tcx>,\n     min_size: u64,\n ) -> InterpResult<'tcx, ()> {\n@@ -59,14 +59,14 @@ const PTHREAD_MUTEXATTR_T_MIN_SIZE: u64 = 4;\n fn mutexattr_get_kind<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     attr_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, attr_op, 0, ecx.machine.layouts.i32, PTHREAD_MUTEXATTR_T_MIN_SIZE)\n }\n \n fn mutexattr_set_kind<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     attr_op: OpTy<'tcx, Tag>,\n-    kind: impl Into<ScalarMaybeUndef<Tag>>,\n+    kind: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, attr_op, 0, kind, ecx.machine.layouts.i32, PTHREAD_MUTEXATTR_T_MIN_SIZE)\n }\n@@ -88,45 +88,45 @@ const PTHREAD_MUTEX_T_MIN_SIZE: u64 = 24;\n fn mutex_get_locked_count<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, mutex_op, 4, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_set_locked_count<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-    locked_count: impl Into<ScalarMaybeUndef<Tag>>,\n+    locked_count: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, mutex_op, 4, locked_count, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_get_owner<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, mutex_op, 8, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_set_owner<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-    owner: impl Into<ScalarMaybeUndef<Tag>>,\n+    owner: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, mutex_op, 8, owner, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_get_kind<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     let offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n     get_at_offset(ecx, mutex_op, offset, ecx.machine.layouts.i32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_set_kind<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-    kind: impl Into<ScalarMaybeUndef<Tag>>,\n+    kind: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     let offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n     set_at_offset(ecx, mutex_op, offset, kind, ecx.machine.layouts.i32, PTHREAD_MUTEX_T_MIN_SIZE)\n@@ -135,14 +135,14 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n fn mutex_get_blockset<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, mutex_op, 20, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_set_blockset<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-    blockset: impl Into<ScalarMaybeUndef<Tag>>,\n+    blockset: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, mutex_op, 20, blockset, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n@@ -180,44 +180,44 @@ const PTHREAD_RWLOCK_T_MIN_SIZE: u64 = 20;\n fn rwlock_get_readers<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, rwlock_op, 4, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n \n fn rwlock_set_readers<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-    readers: impl Into<ScalarMaybeUndef<Tag>>,\n+    readers: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, rwlock_op, 4, readers, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n \n fn rwlock_get_writers<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, rwlock_op, 8, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n \n fn rwlock_set_writers<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-    writers: impl Into<ScalarMaybeUndef<Tag>>,\n+    writers: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, rwlock_op, 8, writers, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n \n fn rwlock_get_writer_blockset<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, rwlock_op, 12, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n \n fn rwlock_set_writer_blockset<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-    blockset: impl Into<ScalarMaybeUndef<Tag>>,\n+    blockset: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, rwlock_op, 12, blockset, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n@@ -241,14 +241,14 @@ fn rwlock_get_or_create_writer_blockset<'mir, 'tcx: 'mir>(\n fn rwlock_get_reader_blockset<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, rwlock_op, 16, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n \n fn rwlock_set_reader_blockset<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-    blockset: impl Into<ScalarMaybeUndef<Tag>>,\n+    blockset: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, rwlock_op, 16, blockset, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n@@ -304,7 +304,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_destroy(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        mutexattr_set_kind(this, attr_op, ScalarMaybeUndef::Undef)?;\n+        mutexattr_set_kind(this, attr_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }\n@@ -458,9 +458,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"destroyed a locked mutex\");\n         }\n \n-        mutex_set_kind(this, mutex_op, ScalarMaybeUndef::Undef)?;\n-        mutex_set_locked_count(this, mutex_op, ScalarMaybeUndef::Undef)?;\n-        mutex_set_blockset(this, mutex_op, ScalarMaybeUndef::Undef)?;\n+        mutex_set_kind(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n+        mutex_set_locked_count(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n+        mutex_set_blockset(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }\n@@ -579,10 +579,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"destroyed a locked rwlock\");\n         }\n \n-        rwlock_set_readers(this, rwlock_op, ScalarMaybeUndef::Undef)?;\n-        rwlock_set_writers(this, rwlock_op, ScalarMaybeUndef::Undef)?;\n-        rwlock_set_reader_blockset(this, rwlock_op, ScalarMaybeUndef::Undef)?;\n-        rwlock_set_writer_blockset(this, rwlock_op, ScalarMaybeUndef::Undef)?;\n+        rwlock_set_readers(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n+        rwlock_set_writers(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n+        rwlock_set_reader_blockset(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n+        rwlock_set_writer_blockset(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }"}]}