{"sha": "39c67b2133702974efe03fea651e9b4a5cb2cbe1", "node_id": "C_kwDOAAsO6NoAKDM5YzY3YjIxMzM3MDI5NzRlZmUwM2ZlYTY1MWU5YjRhNWNiMmNiZTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-29T16:54:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T11:55:17Z"}, "message": "Correct comment.", "tree": {"sha": "0c39515246fcabbf3c9f52232e85ea5eabe57a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c39515246fcabbf3c9f52232e85ea5eabe57a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39c67b2133702974efe03fea651e9b4a5cb2cbe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39c67b2133702974efe03fea651e9b4a5cb2cbe1", "html_url": "https://github.com/rust-lang/rust/commit/39c67b2133702974efe03fea651e9b4a5cb2cbe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39c67b2133702974efe03fea651e9b4a5cb2cbe1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74583852e8940f20d7c40c0dcc4d55697dee871b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74583852e8940f20d7c40c0dcc4d55697dee871b", "html_url": "https://github.com/rust-lang/rust/commit/74583852e8940f20d7c40c0dcc4d55697dee871b"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "dfeee3f356ffb3f8cb2a78fe8cf91a7573c0c801", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39c67b2133702974efe03fea651e9b4a5cb2cbe1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c67b2133702974efe03fea651e9b4a5cb2cbe1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=39c67b2133702974efe03fea651e9b4a5cb2cbe1", "patch": "@@ -566,8 +566,7 @@ impl<'hir> Generics<'hir> {\n         }\n     }\n \n-    /// If there are generic parameters, return wher to introduce a new one, and false.\n-    /// If there is none, return where to introduce `<>` and true.\n+    /// If there are generic parameters, return where to introduce a new one.\n     pub fn span_for_param_suggestion(&self) -> Option<Span> {\n         if self.params.iter().any(|p| self.span.contains(p.span)) {\n             // `fn foo<A>(t: impl Trait)`"}]}