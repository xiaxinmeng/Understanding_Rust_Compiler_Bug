{"sha": "d83fff3b3b9dd0fd6eef862e97f883d171367041", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4M2ZmZjNiM2I5ZGQwZmQ2ZWVmODYyZTk3Zjg4M2QxNzEzNjcwNDE=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-29T03:11:12Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-30T17:59:58Z"}, "message": "Use more specific panic message for &str slicing errors\n\nSeparate out of bounds errors from character boundary errors, and print\nmore details for character boundary errors.\n\nExample:\n\n    &\"abc\u03b1\u03b2\u03b3\"[..4]\n\n    thread 'str::test_slice_fail_boundary_1' panicked at 'byte index 4 is not\n    a char boundary; it is inside `\u03b1` (bytes 3..5) of `abc\u03b1\u03b2\u03b3`'", "tree": {"sha": "ab91da72cf2f86842144be21115ad9a3787dd57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab91da72cf2f86842144be21115ad9a3787dd57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d83fff3b3b9dd0fd6eef862e97f883d171367041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d83fff3b3b9dd0fd6eef862e97f883d171367041", "html_url": "https://github.com/rust-lang/rust/commit/d83fff3b3b9dd0fd6eef862e97f883d171367041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d83fff3b3b9dd0fd6eef862e97f883d171367041/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127a83df6615d09cda6ed9b53f7daba2d78c925d", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d", "html_url": "https://github.com/rust-lang/rust/commit/127a83df6615d09cda6ed9b53f7daba2d78c925d"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "a2146b669e3c6d65dfad480a03e89106326af2fc", "filename": "src/doc/book/strings.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d83fff3b3b9dd0fd6eef862e97f883d171367041/src%2Fdoc%2Fbook%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/d83fff3b3b9dd0fd6eef862e97f883d171367041/src%2Fdoc%2Fbook%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstrings.md?ref=d83fff3b3b9dd0fd6eef862e97f883d171367041", "patch": "@@ -163,8 +163,8 @@ let hachi = &dog[0..2];\n with this error:\n \n ```text\n-thread 'main' panicked at 'index 0 and/or 2 in `\u5fe0\u72ac\u30cf\u30c1\u516c` do not lie on\n-character boundary'\n+thread 'main' panicked at 'byte index 2 is not a char boundary; it is inside '\u5fe0'\n+(bytes 0..3) of `\u5fe0\u72ac\u30cf\u30c1\u516c`'\n ```\n \n ## Concatenation"}, {"sha": "9c3c3740aa96fae8ee781fc3155fc8a879cc667d", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d83fff3b3b9dd0fd6eef862e97f883d171367041/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83fff3b3b9dd0fd6eef862e97f883d171367041/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=d83fff3b3b9dd0fd6eef862e97f883d171367041", "patch": "@@ -383,17 +383,29 @@ tempus vel, gravida nec quam.\";\n \n // check the panic includes the prefix of the sliced string\n #[test]\n-#[should_panic(expected=\"Lorem ipsum dolor sit amet\")]\n+#[should_panic(expected=\"byte index 1024 is out of bounds of `Lorem ipsum dolor sit amet\")]\n fn test_slice_fail_truncated_1() {\n     &LOREM_PARAGRAPH[..1024];\n }\n // check the truncation in the panic message\n #[test]\n-#[should_panic(expected=\"luctus, im`[...] do not lie on character boundary\")]\n+#[should_panic(expected=\"luctus, im`[...]\")]\n fn test_slice_fail_truncated_2() {\n     &LOREM_PARAGRAPH[..1024];\n }\n \n+#[test]\n+#[should_panic(expected=\"byte index 4 is not a char boundary; it is inside '\u03b1' (bytes 3..5) of\")]\n+fn test_slice_fail_boundary_1() {\n+    &\"abc\u03b1\u03b2\u03b3\"[4..];\n+}\n+\n+#[test]\n+#[should_panic(expected=\"byte index 6 is not a char boundary; it is inside '\u03b2' (bytes 5..7) of\")]\n+fn test_slice_fail_boundary_2() {\n+    &\"abc\u03b1\u03b2\u03b3\"[2..6];\n+}\n+\n #[test]\n fn test_slice_from() {\n     assert_eq!(&\"abcd\"[0..], \"abcd\");"}, {"sha": "7081c3ebf43a09f13887c0c5296896c5b9e90202", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d83fff3b3b9dd0fd6eef862e97f883d171367041/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83fff3b3b9dd0fd6eef862e97f883d171367041/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=d83fff3b3b9dd0fd6eef862e97f883d171367041", "patch": "@@ -1741,13 +1741,31 @@ fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {\n #[cold]\n fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n     const MAX_DISPLAY_LENGTH: usize = 256;\n-    let (truncated, s) = truncate_to_char_boundary(s, MAX_DISPLAY_LENGTH);\n+    let (truncated, s_trunc) = truncate_to_char_boundary(s, MAX_DISPLAY_LENGTH);\n     let ellipsis = if truncated { \"[...]\" } else { \"\" };\n \n+    // 1. out of bounds\n+    if begin > s.len() || end > s.len() {\n+        let oob_index = if begin > s.len() { begin } else { end };\n+        panic!(\"byte index {} is out of bounds of `{}`{}\", oob_index, s_trunc, ellipsis);\n+    }\n+\n+    // 2. begin <= end\n     assert!(begin <= end, \"begin <= end ({} <= {}) when slicing `{}`{}\",\n-            begin, end, s, ellipsis);\n-    panic!(\"index {} and/or {} in `{}`{} do not lie on character boundary\",\n-          begin, end, s, ellipsis);\n+            begin, end, s_trunc, ellipsis);\n+\n+    // 3. character boundary\n+    let index = if !s.is_char_boundary(begin) { begin } else { end };\n+    // find the character\n+    let mut char_start = index;\n+    while !s.is_char_boundary(char_start) {\n+        char_start -= 1;\n+    }\n+    // `char_start` must be less than len and a char boundary\n+    let ch = s[char_start..].chars().next().unwrap();\n+    let char_range = char_start .. char_start + ch.len_utf8();\n+    panic!(\"byte index {} is not a char boundary; it is inside {:?} (bytes {:?}) of `{}`{}\",\n+           index, ch, char_range, s_trunc, ellipsis);\n }\n \n #[stable(feature = \"core\", since = \"1.6.0\")]"}]}