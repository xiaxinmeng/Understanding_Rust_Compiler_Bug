{"sha": "eb2b25dd6d38157213742b048fad63fa4ceec691", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMmIyNWRkNmQzODE1NzIxMzc0MmIwNDhmYWQ2M2ZhNGNlZWM2OTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-28T08:33:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T23:30:05Z"}, "message": "Refactor the logging system for fewer allocations\n\nThis lifts various restrictions on the runtime, for example the character limit\nwhen logging a message. Right now the old debug!-style macros still involve\nallocating (because they use fmt! syntax), but the new debug2! macros don't\ninvolve allocating at all (unless the formatter for a type requires allocation.", "tree": {"sha": "e41f9af78454e8f6641dead395274419d843ab63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41f9af78454e8f6641dead395274419d843ab63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb2b25dd6d38157213742b048fad63fa4ceec691", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2b25dd6d38157213742b048fad63fa4ceec691", "html_url": "https://github.com/rust-lang/rust/commit/eb2b25dd6d38157213742b048fad63fa4ceec691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb2b25dd6d38157213742b048fad63fa4ceec691/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af25f58ac3da45899ed65b3af965150c8a90dcda", "url": "https://api.github.com/repos/rust-lang/rust/commits/af25f58ac3da45899ed65b3af965150c8a90dcda", "html_url": "https://github.com/rust-lang/rust/commit/af25f58ac3da45899ed65b3af965150c8a90dcda"}], "stats": {"total": 219, "additions": 82, "deletions": 137}, "files": [{"sha": "342d0828f82f1972f36b72ab4f6b223bd3c97869", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=eb2b25dd6d38157213742b048fad63fa4ceec691", "patch": "@@ -10,11 +10,11 @@\n \n //! Logging\n \n+use fmt;\n use option::*;\n use os;\n use rt;\n use rt::logging::{Logger, StdErrLogger};\n-use send_str::SendStrOwned;\n \n /// Turns on logging to stdout globally\n pub fn console_on() {\n@@ -37,7 +37,17 @@ pub fn console_off() {\n     rt::logging::console_off();\n }\n \n-fn newsched_log_str(msg: ~str) {\n+#[cfg(stage0)]\n+#[doc(hidden)]\n+pub fn log(_level: u32, s: ~str) {\n+    // this is a terrible approximation, but it gets the job done (for stage0 at\n+    // least)\n+    ::io::println(s);\n+}\n+\n+#[allow(missing_doc)]\n+#[cfg(not(stage0))]\n+pub fn log(_level: u32, args: &fmt::Arguments) {\n     use rt::task::Task;\n     use rt::local::Local;\n \n@@ -46,20 +56,13 @@ fn newsched_log_str(msg: ~str) {\n         match optional_task {\n             Some(local) => {\n                 // Use the available logger\n-                (*local).logger.log(SendStrOwned(msg));\n+                (*local).logger.log(args);\n             }\n             None => {\n                 // There is no logger anywhere, just write to stderr\n                 let mut logger = StdErrLogger;\n-                logger.log(SendStrOwned(msg));\n+                logger.log(args);\n             }\n         }\n     }\n }\n-\n-// XXX: This will change soon to not require an allocation. This is an unstable\n-//      api which should not be used outside of the macros in ext/expand.\n-#[doc(hidden)]\n-pub fn log(_level: u32, msg: ~str) {\n-    newsched_log_str(msg);\n-}"}, {"sha": "cfbc53ad34e00c8fbf82c7e7f49500f0592edc59", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=eb2b25dd6d38157213742b048fad63fa4ceec691", "patch": "@@ -7,9 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+use fmt;\n use from_str::from_str;\n-use libc::{uintptr_t, exit, STDERR_FILENO};\n+use libc::{uintptr_t, exit};\n use option::{Some, None, Option};\n+use rt;\n use rt::util::dumb_println;\n use rt::crate_map::{ModEntry, iter_crate_map};\n use rt::crate_map::get_crate_map;\n@@ -18,7 +21,6 @@ use str::raw::from_c_str;\n use u32;\n use vec::ImmutableVector;\n use cast::transmute;\n-use send_str::{SendStr, SendStrOwned, SendStrStatic};\n \n struct LogDirective {\n     name: Option<~str>,\n@@ -171,44 +173,33 @@ fn update_log_settings(crate_map: *u8, settings: ~str) {\n }\n \n pub trait Logger {\n-    fn log(&mut self, msg: SendStr);\n+    fn log(&mut self, args: &fmt::Arguments);\n }\n \n pub struct StdErrLogger;\n \n impl Logger for StdErrLogger {\n-    fn log(&mut self, msg: SendStr) {\n-        use io::{Writer, WriterUtil};\n-\n-        if !should_log_console() {\n-            return;\n+    fn log(&mut self, args: &fmt::Arguments) {\n+        if should_log_console() {\n+            fmt::write(self as &mut rt::io::Writer, args);\n         }\n+    }\n+}\n \n-        let s: &str = match msg {\n-            SendStrOwned(ref s) => {\n-                let slc: &str = *s;\n-                slc\n-            },\n-            SendStrStatic(s) => s,\n-        };\n-\n-        // Truncate the string\n-        let buf_bytes = 2048;\n-        if s.len() > buf_bytes {\n-            let s = s.slice(0, buf_bytes) + \"[...]\";\n-            print(s);\n-        } else {\n-            print(s)\n-        };\n-\n-        fn print(s: &str) {\n-            let dbg = STDERR_FILENO as ::io::fd_t;\n-            dbg.write_str(s);\n-            dbg.write_str(\"\\n\");\n-            dbg.flush();\n-        }\n+impl rt::io::Writer for StdErrLogger {\n+    fn write(&mut self, buf: &[u8]) {\n+        // Nothing like swapping between I/O implementations! In theory this\n+        // could use the libuv bindings for writing to file descriptors, but\n+        // that may not necessarily be desirable because logging should work\n+        // outside of the uv loop. (modify with caution)\n+        use io::Writer;\n+        let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n+        dbg.write(buf);\n     }\n+\n+    fn flush(&mut self) {}\n }\n+\n /// Configure logging by traversing the crate map and setting the\n /// per-module global logging flags based on the logging spec\n pub fn init() {"}, {"sha": "b06385cbcf422eddf2ac3ca7ee10ea1149c39183", "filename": "src/libstd/std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=eb2b25dd6d38157213742b048fad63fa4ceec691", "patch": "@@ -224,4 +224,5 @@ mod std {\n     pub use os;\n     pub use fmt;\n     pub use to_bytes;\n+    pub use logging;\n }"}, {"sha": "c38f3525867cc4ca0e10663d67973c897335ff59", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=eb2b25dd6d38157213742b048fad63fa4ceec691", "patch": "@@ -125,37 +125,56 @@ impl FailWithCause for &'static str {\n     }\n }\n \n-// FIXME #4427: Temporary until rt::rt_fail_ goes away\n+// This stage0 version is incredibly wrong.\n+#[cfg(stage0)]\n pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n     use option::{Some, None};\n     use rt::in_green_task_context;\n     use rt::task::Task;\n     use rt::local::Local;\n     use rt::logging::Logger;\n-    use send_str::SendStrOwned;\n+    use str::Str;\n+\n+    unsafe {\n+        let msg = str::raw::from_c_str(msg);\n+        let file = str::raw::from_c_str(file);\n+        if in_green_task_context() {\n+            rterrln!(\"task failed at '%s', %s:%i\", msg, file, line as int);\n+        } else {\n+            rterrln!(\"failed in non-task context at '%s', %s:%i\",\n+                     msg, file, line as int);\n+        }\n+\n+        let task: *mut Task = Local::unsafe_borrow();\n+        if (*task).unwinder.unwinding {\n+            rtabort!(\"unwinding again\");\n+        }\n+        (*task).unwinder.begin_unwind();\n+    }\n+}\n+\n+// FIXME #4427: Temporary until rt::rt_fail_ goes away\n+#[cfg(not(stage0))]\n+pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n+    use rt::in_green_task_context;\n+    use rt::task::Task;\n+    use rt::local::Local;\n+    use rt::logging::Logger;\n     use str::Str;\n \n     unsafe {\n         // XXX: Bad re-allocations. fail! needs some refactoring\n         let msg = str::raw::from_c_str(msg);\n         let file = str::raw::from_c_str(file);\n \n-        // XXX: Logging doesn't work correctly in non-task context because it\n-        // invokes the local heap\n         if in_green_task_context() {\n-            // XXX: Logging doesn't work here - the check to call the log\n-            // function never passes - so calling the log function directly.\n+            // Be careful not to allocate in this block, if we're failing we may\n+            // have been failing due to a lack of memory in the first place...\n             do Local::borrow |task: &mut Task| {\n-                let msg = match task.name {\n-                    Some(ref name) =>\n-                    fmt!(\"task '%s' failed at '%s', %s:%i\",\n-                         name.as_slice(), msg, file, line as int),\n-                    None =>\n-                    fmt!(\"task <unnamed> failed at '%s', %s:%i\",\n-                         msg, file, line as int)\n-                };\n-\n-                task.logger.log(SendStrOwned(msg));\n+                let n = task.name.map(|n| n.as_slice()).unwrap_or(\"<unnamed>\");\n+                format_args!(|args| { task.logger.log(args) },\n+                             \"task '{}' failed at '{}', {}:{}\",\n+                             n, msg.as_slice(), file.as_slice(), line);\n             }\n         } else {\n             rterrln!(\"failed in non-task context at '%s', %s:%i\","}, {"sha": "80cb9424fa10a14fbb22173d36288dfb21c07c24", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=eb2b25dd6d38157213742b048fad63fa4ceec691", "patch": "@@ -813,13 +813,17 @@ pub fn std_macros() -> @str {\n         ($lvl:expr, $arg:expr) => ({\n             let lvl = $lvl;\n             if lvl <= __log_level() {\n-                ::std::logging::log(lvl, fmt!(\\\"%?\\\", $arg))\n+                format_args!(|args| {\n+                    ::std::logging::log(lvl, args)\n+                }, \\\"{}\\\", fmt!(\\\"%?\\\", $arg))\n             }\n         });\n         ($lvl:expr, $($arg:expr),+) => ({\n             let lvl = $lvl;\n             if lvl <= __log_level() {\n-                ::std::logging::log(lvl, fmt!($($arg),+))\n+                format_args!(|args| {\n+                    ::std::logging::log(lvl, args)\n+                }, \\\"{}\\\", fmt!($($arg),+))\n             }\n         })\n     )\n@@ -834,7 +838,9 @@ pub fn std_macros() -> @str {\n         ($lvl:expr, $($arg:tt)+) => ({\n             let lvl = $lvl;\n             if lvl <= __log_level() {\n-                ::std::logging::log(lvl, format!($($arg)+))\n+                format_args!(|args| {\n+                    ::std::logging::log(lvl, args)\n+                }, $($arg)+)\n             }\n         })\n     )"}, {"sha": "58b216e8d119b8d3b78b83bedbcb31fd062debbc", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b25dd6d38157213742b048fad63fa4ceec691/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=eb2b25dd6d38157213742b048fad63fa4ceec691", "patch": "@@ -20,6 +20,5 @@ impl Drop for C {\n \n fn main() {\n     let c = C{ x: 2};\n-    let d = c.clone(); //~ ERROR does not implement any method in scope\n-    error!(\"%?\", d.x);\n+    let _d = c.clone(); //~ ERROR does not implement any method in scope\n }"}, {"sha": "1dd27d7d3ae2004df2fb657ace24283188d9bcb0", "filename": "src/test/run-fail/rt-log-trunc.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/af25f58ac3da45899ed65b3af965150c8a90dcda/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af25f58ac3da45899ed65b3af965150c8a90dcda/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs?ref=af25f58ac3da45899ed65b3af965150c8a90dcda", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that logs add `[...]` to truncated lines\n-// error-pattern:[...]\n-\n-fn main() {\n-    fail!(\"\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          \");\n-}"}]}