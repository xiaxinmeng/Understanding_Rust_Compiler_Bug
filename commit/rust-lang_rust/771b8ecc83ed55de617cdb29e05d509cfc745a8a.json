{"sha": "771b8ecc83ed55de617cdb29e05d509cfc745a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MWI4ZWNjODNlZDU1ZGU2MTdjZGIyOWUwNWQ1MDljZmM3NDVhOGE=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-01-26T19:50:05Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:29Z"}, "message": "extract IntoIter drop/forget used by specialization into separate methods", "tree": {"sha": "15153cb4142aca0a859fc1db5cf263cc564dab51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15153cb4142aca0a859fc1db5cf263cc564dab51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/771b8ecc83ed55de617cdb29e05d509cfc745a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/771b8ecc83ed55de617cdb29e05d509cfc745a8a", "html_url": "https://github.com/rust-lang/rust/commit/771b8ecc83ed55de617cdb29e05d509cfc745a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/771b8ecc83ed55de617cdb29e05d509cfc745a8a/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad133443a7975b2e86a3bbba16da33c769eeabc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad133443a7975b2e86a3bbba16da33c769eeabc", "html_url": "https://github.com/rust-lang/rust/commit/6ad133443a7975b2e86a3bbba16da33c769eeabc"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "97dd04fbe70504273b37df5c8cf43c7e7497bb70", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/771b8ecc83ed55de617cdb29e05d509cfc745a8a/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771b8ecc83ed55de617cdb29e05d509cfc745a8a/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=771b8ecc83ed55de617cdb29e05d509cfc745a8a", "patch": "@@ -2226,9 +2226,9 @@ where\n             return SpecFromNested::from_iter(iterator);\n         }\n \n-        let (src_buf, src_end) = {\n+        let (src_buf, src_end, cap) = {\n             let inner = unsafe { iterator.as_inner().as_into_iter() };\n-            (inner.buf.as_ptr(), inner.end)\n+            (inner.buf.as_ptr(), inner.end, inner.cap)\n         };\n         let dst = src_buf;\n \n@@ -2278,23 +2278,15 @@ where\n         debug_assert_eq!(src_buf, src.buf.as_ptr());\n         debug_assert!(dst as *const _ <= src.ptr, \"InPlaceIterable contract violation\");\n \n-        if mem::needs_drop::<T>() {\n-            // drop tail if iterator was only partially exhausted\n-            unsafe {\n-                ptr::drop_in_place(src.as_mut_slice());\n-            }\n-        }\n+        // drop any remaining values at the tail of the source\n+        src.drop_in_place();\n+        // but prevent drop of the allocation itself once IntoIter goes out of scope\n+        src.forget_in_place();\n \n         let vec = unsafe {\n             let len = dst.offset_from(src_buf) as usize;\n-            Vec::from_raw_parts(src.buf.as_ptr(), len, src.cap)\n+            Vec::from_raw_parts(src_buf, len, cap)\n         };\n-        // prevent drop of the underlying storage by turning the IntoIter into\n-        // the equivalent of Vec::new().into_iter()\n-        src.cap = 0;\n-        src.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };\n-        src.ptr = src.buf.as_ptr();\n-        src.end = src.buf.as_ptr();\n \n         vec\n     }\n@@ -2839,6 +2831,24 @@ impl<T> IntoIter<T> {\n     fn as_raw_mut_slice(&mut self) -> *mut [T] {\n         ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())\n     }\n+\n+    fn drop_in_place(&mut self) {\n+        if mem::needs_drop::<T>() {\n+            unsafe {\n+                ptr::drop_in_place(self.as_mut_slice());\n+            }\n+        }\n+        self.ptr = self.end;\n+    }\n+\n+    /// Relinquishes the backing allocation, equivalent to\n+    /// `ptr::write(&mut self, Vec::new().into_iter())`\n+    fn forget_in_place(&mut self) {\n+        self.cap = 0;\n+        self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };\n+        self.ptr = self.buf.as_ptr();\n+        self.end = self.buf.as_ptr();\n+    }\n }\n \n #[stable(feature = \"vec_intoiter_as_ref\", since = \"1.46.0\")]"}]}