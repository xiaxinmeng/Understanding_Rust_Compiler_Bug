{"sha": "edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYjc0N2NlZWRjZmVjMmViOWY2OThiMGUxMWI3ZTk0ZDkxNzRmMzM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-28T05:08:48Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-28T05:11:58Z"}, "message": "Enforce mutability declarations in classes; correct shapes for classes\n\n1. Enforce mutability declarations on class fields. Don't allow any\nmutation of class fields not declared as mutable (except inside the\nconstructor).\n\n2. Handle classes correctly in shape (treat classes like records).", "tree": {"sha": "4b534b40c5a3a06a14e929c680c2ca9c28d1898e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b534b40c5a3a06a14e929c680c2ca9c28d1898e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "html_url": "https://github.com/rust-lang/rust/commit/edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9102ee7a1e9c01e9befca44a0c0cb474fff89b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9102ee7a1e9c01e9befca44a0c0cb474fff89b4", "html_url": "https://github.com/rust-lang/rust/commit/c9102ee7a1e9c01e9befca44a0c0cb474fff89b4"}], "stats": {"total": 227, "additions": 187, "deletions": 40}, "files": [{"sha": "0146421c689b60658f161e0541fe1fbf984c839e", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -78,6 +78,7 @@ const tag_path_len: uint = 0x41u;\n const tag_path_elt_mod: uint = 0x42u;\n const tag_path_elt_name: uint = 0x43u;\n const tag_item_field: uint = 0x44u;\n+const tag_class_mut: uint = 0x45u;\n \n // used to encode crate_ctxt side tables\n enum astencode_tag { // Reserves 0x50 -- 0x6f"}, {"sha": "0b67a16c0720b0d8e53e83ba102f013f3ba6becd", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -118,6 +118,18 @@ fn class_member_id(d: ebml::doc, cdata: cmd) -> ast::def_id {\n     ret translate_def_id(cdata, parse_def_id(ebml::doc_data(tagdoc)));\n }\n \n+fn field_mutability(d: ebml::doc) -> ast::class_mutability {\n+    // Use maybe_get_doc in case it's a method\n+    option::maybe(ebml::maybe_get_doc(d, tag_class_mut),\n+                  ast::class_immutable,\n+                  {|d|\n+                  alt ebml::doc_as_u8(d) as char {\n+                    'm' { ast::class_mutable }\n+                    _   { ast::class_immutable }\n+                  }\n+                  })\n+}\n+\n fn variant_disr_val(d: ebml::doc) -> option<int> {\n     option::chain(ebml::maybe_get_doc(d, tag_disr_val)) {|val_doc|\n         int::parse_buf(ebml::doc_data(val_doc), 10u)\n@@ -435,9 +447,9 @@ fn get_class_members(cdata: cmd, id: ast::node_id,\n        if p(f) {\n           let name = item_name(an_item);\n           let did = class_member_id(an_item, cdata);\n+          let mt = field_mutability(an_item);\n           result += [{ident: name, id: did, privacy:\n-                  // This won't work for methods, argh\n-                  family_to_privacy(f)}];\n+                  family_to_privacy(f), mutability: mt}];\n        }\n     }\n     result"}, {"sha": "2c67b907923234a95306b9da55dc3b8504fa7238", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -47,6 +47,13 @@ fn encode_named_def_id(ebml_w: ebml::writer, name: str, id: def_id) {\n     }\n }\n \n+fn encode_mutability(ebml_w: ebml::writer, mt: class_mutability) {\n+    ebml_w.wr_tag(tag_class_mut) {||\n+        ebml_w.writer.write([alt mt { class_immutable { 'i' }\n+                class_mutable { 'm' } } as u8]);\n+        }\n+}\n+\n type entry<T> = {val: T, pos: uint};\n \n fn encode_enum_variant_paths(ebml_w: ebml::writer, variants: [variant],\n@@ -370,15 +377,15 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n      /* We encode both private and public fields -- need to include\n         private fields to get the offsets right */\n       alt ci.node.decl {\n-        instance_var(nm, _, _, id) {\n+        instance_var(nm, _, mt, id) {\n           *index += [{val: id, pos: ebml_w.writer.tell()}];\n           ebml_w.start_tag(tag_items_data_item);\n           #debug(\"encode_info_for_class: doing %s %d\", nm, id);\n           encode_privacy(ebml_w, ci.node.privacy);\n           encode_name(ebml_w, nm);\n           encode_path(ebml_w, path, ast_map::path_name(nm));\n           encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n-          /* TODO: mutability */\n+          encode_mutability(ebml_w, mt);\n           encode_def_id(ebml_w, local_def(id));\n           ebml_w.end_tag();\n         }"}, {"sha": "8bebb3b5e681f27b728fd5d60ffe9509b07db4b8", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -57,6 +57,16 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n                     }\n                 }\n               }\n+              ty::ty_class(did, _) {\n+                  util::common::log_expr(*ex);\n+                  for fld: ty::field_ty in ty::lookup_class_fields(tcx, did) {\n+                    #debug(\"%s %?\", fld.ident, fld.mutability);\n+                    if str::eq(ident, fld.ident) {\n+                        is_mutbl = fld.mutability == class_mutable;\n+                    }\n+                    break;\n+                  }\n+              }\n               _ {}\n             }\n             ds += [@{mutbl: is_mutbl, kind: field, outer_t: auto_unbox.t}];\n@@ -114,14 +124,17 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n // Actual mutbl-checking pass\n \n type mutbl_map = std::map::hashmap<node_id, ()>;\n-type ctx = {tcx: ty::ctxt, mutbl_map: mutbl_map};\n+// Keep track of whether we're inside a ctor, so as to\n+// allow mutating immutable fields in the same class\n+type ctx = {tcx: ty::ctxt, mutbl_map: mutbl_map, in_ctor: bool};\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) -> mutbl_map {\n-    let cx = @{tcx: tcx, mutbl_map: std::map::int_hash()};\n-    let v = @{visit_expr: bind visit_expr(cx, _, _, _),\n-              visit_decl: bind visit_decl(cx, _, _, _)\n+    let cx = @{tcx: tcx, mutbl_map: std::map::int_hash(), in_ctor: false};\n+    let v = @{visit_expr: visit_expr,\n+              visit_decl: visit_decl,\n+              visit_item: visit_item\n               with *visit::default_visitor()};\n-    visit::visit_crate(*crate, (), visit::mk_vt(v));\n+    visit::visit_crate(*crate, cx, visit::mk_vt(v));\n     ret cx.mutbl_map;\n }\n \n@@ -135,8 +148,8 @@ fn mk_err(cx: @ctx, span: syntax::codemap::span, msg: msg, name: str) {\n     });\n }\n \n-fn visit_decl(cx: @ctx, d: @decl, &&e: (), v: visit::vt<()>) {\n-    visit::visit_decl(d, e, v);\n+fn visit_decl(d: @decl, &&cx: @ctx, v: visit::vt<@ctx>) {\n+    visit::visit_decl(d, cx, v);\n     alt d.node {\n       decl_local(locs) {\n         for loc in locs {\n@@ -152,7 +165,7 @@ fn visit_decl(cx: @ctx, d: @decl, &&e: (), v: visit::vt<()>) {\n     }\n }\n \n-fn visit_expr(cx: @ctx, ex: @expr, &&e: (), v: visit::vt<()>) {\n+fn visit_expr(ex: @expr, &&cx: @ctx, v: visit::vt<@ctx>) {\n     alt ex.node {\n       expr_call(f, args, _) { check_call(cx, f, args); }\n       expr_bind(f, args) { check_bind(cx, f, args); }\n@@ -179,7 +192,22 @@ fn visit_expr(cx: @ctx, ex: @expr, &&e: (), v: visit::vt<()>) {\n       }\n       _ { }\n     }\n-    visit::visit_expr(ex, e, v);\n+    visit::visit_expr(ex, cx, v);\n+}\n+\n+fn visit_item(item: @item, &&cx: @ctx, v: visit::vt<@ctx>) {\n+    alt item.node {\n+            item_class(tps, items, ctor) {\n+                v.visit_ty_params(tps, cx, v);\n+                vec::map::<@class_item, ()>(items,\n+                      {|i| v.visit_class_item(i.span,\n+                            i.node.privacy, i.node.decl, cx, v); });\n+                v.visit_fn(visit::fk_ctor(item.ident, tps), ctor.node.dec,\n+                           ctor.node.body, ctor.span, ctor.node.id,\n+                           @{in_ctor: true with *cx}, v);\n+            }\n+            _ { visit::visit_item(item, cx, v); }\n+    }\n }\n \n fn check_lval(cx: @ctx, dest: @expr, msg: msg) {\n@@ -277,7 +305,7 @@ fn check_bind(cx: @ctx, f: @expr, args: [option<@expr>]) {\n fn is_illegal_to_modify_def(cx: @ctx, def: def, msg: msg) -> option<str> {\n     alt def {\n       def_fn(_, _) | def_mod(_) | def_native_mod(_) | def_const(_) |\n-      def_use(_) {\n+      def_use(_) | def_class_method(_,_) {\n         some(\"static item\")\n       }\n       def_arg(_, m) {\n@@ -310,6 +338,18 @@ fn is_illegal_to_modify_def(cx: @ctx, def: def, msg: msg) -> option<str> {\n       }\n \n       def_binding(_) { some(\"binding\") }\n+      def_class_field(parent,fld) {\n+          if !cx.in_ctor {\n+             /* Enforce mutability *unless* we're inside a ctor */\n+             alt ty::lookup_class_field(cx.tcx, parent, fld).mutability {\n+               class_mutable { none }\n+               class_immutable { some(\"immutable class field\") }\n+             }\n+          }\n+          else {\n+              none\n+          }\n+      }\n       _ { none }\n     }\n }"}, {"sha": "82eec9b8bd680fd1df8333fc8b1799a54deff9aa", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -2271,11 +2271,7 @@ fn trans_rec_field_inner(bcx: block, val: ValueRef, ty: ty::t,\n             _ { bcx.tcx().sess.span_bug(sp, \"trans_rec_field:\\\n                  base expr has non-record type\"); }\n         };\n-    let ix = alt ty::field_idx(field, fields) {\n-      none { bcx.tcx().sess.span_bug(sp, #fmt(\"trans_rec_field:\\\n-               base expr doesn't appear to have a field named %s\", field));}\n-      some(i) { i }\n-    };\n+    let ix = field_idx_strict(bcx.tcx(), sp, field, fields);\n     let val = GEPi(bcx, val, [0, ix as int]);\n     ret {bcx: bcx, val: val, kind: owned};\n }\n@@ -3666,7 +3662,7 @@ fn raw_block(fcx: fn_ctxt, llbb: BasicBlockRef) -> block {\n // trans_block_cleanups: Go through all the cleanups attached to this\n // block and execute them.\n //\n-// When translating a block that introdces new variables during its scope, we\n+// When translating a block that introduces new variables during its scope, we\n // need to make sure those variables go out of scope when the block ends.  We\n // do that by running a 'cleanup' function for each variable.\n // trans_block_cleanups runs all the cleanup functions for the block.\n@@ -4344,10 +4340,24 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         // wouldn't make sense\n         // So we initialize it here\n         let selfptr = alloc_ty(bcx_top, rslt_ty);\n+        // initialize fields to zero\n+        let fields = ty::class_items_as_fields(bcx_top.tcx(),\n+                                               local_def(item.id));\n+        let mut bcx = bcx_top;\n+        // Initialize fields to zero so init assignments can validly\n+        // drop their LHS\n+        for field in fields {\n+           let ix = field_idx_strict(bcx.tcx(), ctor.span, field.ident,\n+                                     fields);\n+           bcx = zero_alloca(bcx, GEPi(bcx, selfptr, [0, ix]),\n+                                       field.mt.ty);\n+        }\n+\n+        // note we don't want to take *or* drop self.\n         fcx.llself = some({v: selfptr, t: rslt_ty});\n \n         // Translate the body of the ctor\n-        let mut bcx = trans_block(bcx_top, ctor.node.body, ignore);\n+        bcx = trans_block(bcx_top, ctor.node.body, ignore);\n         let lval_res = {bcx: bcx, val: selfptr, kind: owned};\n         // Generate the return expression\n         bcx = store_temp_expr(bcx, INIT, fcx.llretptr, lval_res,"}, {"sha": "fe4b58dc9819c03a5ff32894f52907af78f69cd2", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -884,6 +884,16 @@ fn node_id_type_params(bcx: block, id: ast::node_id) -> [ty::t] {\n     }\n }\n \n+fn field_idx_strict(cx: ty::ctxt, sp: span, ident: ast::ident,\n+                    fields: [ty::field])\n+    -> int {\n+    alt ty::field_idx(ident, fields) {\n+            none { cx.sess.span_bug(sp, #fmt(\"base expr doesn't appear to \\\n+                     have a field named %s\", ident)); }\n+            some(i) { i as int }\n+        }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "3786dbd4e9e3b2fef482f1c553b8b4f2eb0ea1d3", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -57,7 +57,6 @@ const shape_stack_fn: u8 = 26u8;\n const shape_bare_fn: u8 = 27u8;\n const shape_tydesc: u8 = 28u8;\n const shape_send_tydesc: u8 = 29u8;\n-const shape_class: u8 = 30u8;\n const shape_rptr: u8 = 31u8;\n \n fn hash_res_info(ri: res_info) -> uint {\n@@ -370,7 +369,15 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         s\n       }\n       ty::ty_iface(_, _) { [shape_box_fn] }\n-      ty::ty_class(_, _) { [shape_class] }\n+      ty::ty_class(did, _) {\n+        // same as records\n+        let mut s = [shape_struct], sub = [];\n+        for f:field in ty::class_items_as_fields(ccx.tcx, did) {\n+            sub += shape_of(ccx, f.mt.ty, ty_param_map);\n+        }\n+        add_substr(s, sub);\n+        s\n+      }\n       ty::ty_rptr(_, tm) {\n         let mut s = [shape_rptr];\n         add_substr(s, shape_of(ccx, tm.ty, ty_param_map));"}, {"sha": "c642a411d562b29ed1c14d4cafc21302da22e2b7", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -41,7 +41,7 @@ export fm_var, fm_general, fm_rptr;\n export get_element_type;\n export is_binopable;\n export is_pred_ty;\n-export lookup_class_fields;\n+export lookup_class_field, lookup_class_fields;\n export lookup_class_method_by_name;\n export lookup_field_type;\n export lookup_item_type;\n@@ -164,7 +164,8 @@ type mt = {ty: t, mutbl: ast::mutability};\n type field_ty = {\n   ident: ident,\n   id: def_id,\n-  privacy: ast::privacy\n+  privacy: ast::privacy,\n+  mutability: ast::class_mutability\n };\n \n // Contains information needed to resolve types and (in the future) look up\n@@ -864,6 +865,12 @@ fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n         for f in flds { if type_needs_drop(cx, f.mt.ty) { accum = true; } }\n         accum\n       }\n+      ty_class(did,_) {\n+          for f in ty::class_items_as_fields(cx, did)\n+          { if type_needs_drop(cx, f.mt.ty) { accum = true; } }\n+        accum\n+      }\n+\n       ty_tup(elts) {\n         for m in elts { if type_needs_drop(cx, m) { accum = true; } }\n         accum\n@@ -1956,11 +1963,6 @@ fn lookup_item_type(cx: ctxt, did: ast::def_id) -> ty_param_bounds_and_ty {\n // Look up a field ID, whether or not it's local\n fn lookup_field_type(tcx: ctxt, class_id: def_id, id: def_id) -> ty::t {\n     if id.crate == ast::local_crate {\n-            /*\n-        alt items.find(tcx.items, id.node) {\n-           some(ast_map::node_item({node: item_class(_,items,\n-        }\n-            */\n         node_id_to_type(tcx, id.node)\n     }\n     else {\n@@ -1999,6 +2001,15 @@ fn lookup_class_fields(cx: ctxt, did: ast::def_id) -> [field_ty] {\n     }\n }\n \n+fn lookup_class_field(cx: ctxt, parent: ast::def_id, field_id: ast::def_id)\n+    -> field_ty {\n+    alt vec::find(lookup_class_fields(cx, parent))\n+                 {|f| f.id.node == field_id.node} {\n+        some(t) { t }\n+        none { cx.sess.bug(\"class ID not found in parent's fields\"); }\n+    }\n+}\n+\n fn lookup_public_fields(cx: ctxt, did: ast::def_id) -> [field_ty] {\n     vec::filter(lookup_class_fields(cx, did), is_public)\n }\n@@ -2050,9 +2061,9 @@ fn class_field_tys(items: [@class_item]) -> [field_ty] {\n     let mut rslt = [];\n     for it in items {\n        alt it.node.decl {\n-          instance_var(nm, _, _, id) {\n+          instance_var(nm, _, cm, id) {\n               rslt += [{ident: nm, id: ast_util::local_def(id),\n-                          privacy: it.node.privacy}];\n+                          privacy: it.node.privacy, mutability: cm}];\n           }\n           class_method(_) {\n           }"}, {"sha": "3ca2e6a588b524776a0c2bcd8d350a3941069591", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -1684,8 +1684,8 @@ fn parse_let(p: parser) -> @ast::decl {\n fn parse_instance_var(p:parser) -> (ast::class_member, codemap::span) {\n     let mut is_mutbl = ast::class_immutable;\n     let lo = p.span.lo;\n-    if eat_word(p, \"mut\") {\n-            is_mutbl = ast::class_mutable;\n+    if eat_word(p, \"mut\") || eat_word(p, \"mutable\") {\n+        is_mutbl = ast::class_mutable;\n     }\n     if !is_plain_ident(p) {\n         p.fatal(\"expecting ident\");"}, {"sha": "e44a90e5a5c521b2d7558409325c33d42b4772f6", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -12,9 +12,11 @@ class cat {\n     }\n   }\n \n-  let how_hungry : int;\n+  let mutable how_hungry : int;\n+  let name : str;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int, in_name: str)\n+    { meows = in_x; how_hungry = in_y; name = in_name; }\n \n   fn speak() { meow(); }\n "}, {"sha": "edfb5a920582ada1211ad0b89455d89c815f0a94", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -0,0 +1,19 @@\n+// error-pattern:assigning to immutable class field\n+class cat {\n+  priv {\n+    let mutable meows : uint;\n+  }\n+\n+  let how_hungry : int;\n+\n+  fn eat() {\n+    how_hungry -= 5;\n+  }\n+\n+  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+}\n+\n+fn main() {\n+  let nyan : cat = cat(52u, 99);\n+  nyan.eat();\n+}"}, {"sha": "b345c0c80f1d44f588f03f8615dcaf33b55063a4", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -0,0 +1,15 @@\n+// error-pattern:assigning to immutable field\n+class cat {\n+  priv {\n+    let mutable meows : uint;\n+  }\n+\n+  let how_hungry : int;\n+\n+  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+}\n+\n+fn main() {\n+  let nyan : cat = cat(52u, 99);\n+  nyan.how_hungry = 0;\n+}"}, {"sha": "831006a7dfd76f54bc0b32e609aec156614b7aba", "filename": "src/test/run-pass/class-str-field.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -0,0 +1,11 @@\n+class cat {\n+\n+  let name : str;\n+\n+  new(in_name: str)\n+    { name = in_name; }\n+}\n+\n+fn main() {\n+  let nyan = cat(\"nyan\");\n+}\n\\ No newline at end of file"}, {"sha": "3c2efa501e428aef479ceb81168426aeaa23bae1", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -4,7 +4,7 @@ use cci_class_4;\n import cci_class_4::kitties::*;\n \n fn main() {\n-  let nyan = cat(0u, 2);\n+  let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n   uint::range(1u, 10u, {|_i| nyan.speak(); });"}, {"sha": "32add1b606d52c8ad566a5f5475b44a7aa8bab10", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb747ceedcfec2eb9f698b0e11b7e94d9174f33/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=edb747ceedcfec2eb9f698b0e11b7e94d9174f33", "patch": "@@ -10,9 +10,11 @@ class cat {\n     }\n   }\n \n-  let how_hungry : int;\n+  let mutable how_hungry : int;\n+  let name : str;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int, in_name: str)\n+    { meows = in_x; how_hungry = in_y; name = in_name; }\n \n   fn speak() { meow(); }\n \n@@ -30,7 +32,7 @@ class cat {\n }\n \n fn main() {\n-  let nyan = cat(0u, 2);\n+  let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n   uint::range(1u, 10u, {|_i| nyan.speak(); });"}]}