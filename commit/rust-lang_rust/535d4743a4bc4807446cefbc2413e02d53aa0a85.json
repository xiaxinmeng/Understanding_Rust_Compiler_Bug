{"sha": "535d4743a4bc4807446cefbc2413e02d53aa0a85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNWQ0NzQzYTRiYzQ4MDc0NDZjZWZiYzI0MTNlMDJkNTNhYTBhODU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-17T20:55:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-30T19:36:25Z"}, "message": "syntax: Split `ast::Attribute` into container and inner parts", "tree": {"sha": "d222a5c91f712d37cf3efbdfccd47e2d1e8f7b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d222a5c91f712d37cf3efbdfccd47e2d1e8f7b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535d4743a4bc4807446cefbc2413e02d53aa0a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535d4743a4bc4807446cefbc2413e02d53aa0a85", "html_url": "https://github.com/rust-lang/rust/commit/535d4743a4bc4807446cefbc2413e02d53aa0a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535d4743a4bc4807446cefbc2413e02d53aa0a85/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "html_url": "https://github.com/rust-lang/rust/commit/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "2238a56b29d04b150139935aed91f6deaa676067", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -988,10 +988,12 @@ impl<'a> LoweringContext<'a> {\n         // lower attributes (we use the AST version) there is nowhere to keep\n         // the `HirId`s. We don't actually need HIR version of attributes anyway.\n         Attribute {\n+            item: AttrItem {\n+                path: attr.path.clone(),\n+                tokens: self.lower_token_stream(attr.tokens.clone()),\n+            },\n             id: attr.id,\n             style: attr.style,\n-            path: attr.path.clone(),\n-            tokens: self.lower_token_stream(attr.tokens.clone()),\n             is_sugared_doc: attr.is_sugared_doc,\n             span: attr.span,\n         }"}, {"sha": "23a2f115e05e2516fbb0acc8a38106c89812c0ac", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -196,26 +196,27 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Path {\n     }\n }\n \n+impl_stable_hash_for!(struct ::syntax::ast::AttrItem {\n+    path,\n+    tokens,\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Attribute {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         // Make sure that these have been filtered out.\n         debug_assert!(!self.ident().map_or(false, |ident| hcx.is_ignored_attr(ident.name)));\n         debug_assert!(!self.is_sugared_doc);\n \n         let ast::Attribute {\n+            ref item,\n             id: _,\n             style,\n-            ref path,\n-            ref tokens,\n             is_sugared_doc: _,\n             span,\n         } = *self;\n \n+        item.hash_stable(hcx, hasher);\n         style.hash_stable(hcx, hasher);\n-        path.hash_stable(hcx, hasher);\n-        for tt in tokens.trees() {\n-            tt.hash_stable(hcx, hasher);\n-        }\n         span.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "e2c8e37e11c30a21f288e4944a0784e33af07370", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -2139,18 +2139,28 @@ impl rustc_serialize::Decodable for AttrId {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct AttrItem {\n+    pub path: Path,\n+    pub tokens: TokenStream,\n+}\n+\n /// Metadata associated with an item.\n /// Doc-comments are promoted to attributes that have `is_sugared_doc = true`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Attribute {\n+    pub item: AttrItem,\n     pub id: AttrId,\n     pub style: AttrStyle,\n-    pub path: Path,\n-    pub tokens: TokenStream,\n     pub is_sugared_doc: bool,\n     pub span: Span,\n }\n \n+impl std::ops::Deref for Attribute {\n+    type Target = AttrItem;\n+    fn deref(&self) -> &Self::Target { &self.item }\n+}\n+\n /// `TraitRef`s appear in impls.\n ///\n /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all"}, {"sha": "009259352ba682219ea14d44243c9fef391de1db", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -9,7 +9,7 @@ pub use StabilityLevel::*;\n pub use crate::ast::Attribute;\n \n use crate::ast;\n-use crate::ast::{AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n+use crate::ast::{AttrItem, AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n@@ -333,10 +333,9 @@ impl Attribute {\n                 DUMMY_SP,\n             );\n             f(&Attribute {\n+                item: AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n                 id: self.id,\n                 style: self.style,\n-                path: meta.path,\n-                tokens: meta.kind.tokens(meta.span),\n                 is_sugared_doc: true,\n                 span: self.span,\n             })\n@@ -384,10 +383,9 @@ crate fn mk_attr_id() -> AttrId {\n \n pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) -> Attribute {\n     Attribute {\n+        item: AttrItem { path, tokens },\n         id: mk_attr_id(),\n         style,\n-        path,\n-        tokens,\n         is_sugared_doc: false,\n         span,\n     }\n@@ -408,10 +406,12 @@ pub fn mk_sugared_doc_attr(text: Symbol, span: Span) -> Attribute {\n     let lit_kind = LitKind::Str(text, ast::StrStyle::Cooked);\n     let lit = Lit::from_lit_kind(lit_kind, span);\n     Attribute {\n+        item: AttrItem {\n+            path: Path::from_ident(Ident::with_dummy_span(sym::doc).with_span_pos(span)),\n+            tokens: MetaItemKind::NameValue(lit).tokens(span),\n+        },\n         id: mk_attr_id(),\n         style,\n-        path: Path::from_ident(Ident::with_dummy_span(sym::doc).with_span_pos(span)),\n-        tokens: MetaItemKind::NameValue(lit).tokens(span),\n         is_sugared_doc: true,\n         span,\n     }"}, {"sha": "a9a5c3efd06086e60ef03331133ec6736af9f735", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -151,10 +151,9 @@ impl<'a> StripUnconfigured<'a> {\n             //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n             expanded_attrs.into_iter()\n             .flat_map(|(path, tokens, span)| self.process_cfg_attr(ast::Attribute {\n+                item: ast::AttrItem { path, tokens },\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n-                path,\n-                tokens,\n                 is_sugared_doc: false,\n                 span,\n             }))"}, {"sha": "2b0fc5d3677c7def85805be0aed2fdde0c14d83b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -1,4 +1,4 @@\n-use crate::ast::{self, Block, Ident, LitKind, NodeId, PatKind, Path};\n+use crate::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use crate::ast::{MacStmtStyle, StmtKind, ItemKind};\n use crate::attr::{self, HasAttrs};\n use crate::source_map::respan;\n@@ -625,9 +625,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         | Annotatable::Variant(..)\n                             => panic!(\"unexpected annotatable\"),\n                     })), DUMMY_SP).into();\n-                    let input = self.extract_proc_macro_attr_input(attr.tokens, span);\n+                    let input = self.extract_proc_macro_attr_input(attr.item.tokens, span);\n                     let tok_result = expander.expand(self.cx, span, input, item_tok);\n-                    let res = self.parse_ast_fragment(tok_result, fragment_kind, &attr.path, span);\n+                    let res =\n+                        self.parse_ast_fragment(tok_result, fragment_kind, &attr.item.path, span);\n                     self.gate_proc_macro_expansion(span, &res);\n                     res\n                 }\n@@ -1530,11 +1531,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n             let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n             *at = attr::Attribute {\n+                item: AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n                 span: at.span,\n                 id: at.id,\n                 style: at.style,\n-                path: meta.path,\n-                tokens: meta.kind.tokens(meta.span),\n                 is_sugared_doc: false,\n             };\n         } else {"}, {"sha": "4b78282b7873338c5c429588b783767bdbdf2f3c", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -550,7 +550,8 @@ pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n }\n \n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n-    let Attribute { id: _, style: _, path, tokens, is_sugared_doc: _, span } = attr;\n+    let Attribute { item: AttrItem { path, tokens }, id: _, style: _, is_sugared_doc: _, span }\n+        = attr;\n     vis.visit_path(path);\n     vis.visit_tts(tokens);\n     vis.visit_span(span);"}, {"sha": "707f903916c6dde5299f085b71821dbbfae36b64", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d4743a4bc4807446cefbc2413e02d53aa0a85/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=535d4743a4bc4807446cefbc2413e02d53aa0a85", "patch": "@@ -151,10 +151,9 @@ impl<'a> Parser<'a> {\n         };\n \n         Ok(ast::Attribute {\n+            item: ast::AttrItem { path, tokens },\n             id: attr::mk_attr_id(),\n             style,\n-            path,\n-            tokens,\n             is_sugared_doc: false,\n             span,\n         })"}]}