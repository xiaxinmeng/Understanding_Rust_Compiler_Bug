{"sha": "c5990dd8ad83fa1dccbc105102bceca0728977c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTkwZGQ4YWQ4M2ZhMWRjY2JjMTA1MTAyYmNlY2EwNzI4OTc3YzM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-04T20:10:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-04T20:10:34Z"}, "message": "Rollup merge of #81556 - nikomatsakis:forbidden-lint-groups-lint, r=pnkfelix\n\nintroduce future-compatibility warning for forbidden lint groups\n\nWe used to ignore `forbid(group)` scenarios completely. This changed in #78864, but that led to a number of regressions (#80988, #81218).\n\nThis PR introduces a future compatibility warning for the case where a group is forbidden but then an individual lint within that group is allowed. We now issue a FCW when we see the \"allow\", but permit it to take effect.\n\nr? ``@Mark-Simulacrum``", "tree": {"sha": "27ba476a0bf0c21a66ed92779ad5855ea4faad6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27ba476a0bf0c21a66ed92779ad5855ea4faad6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5990dd8ad83fa1dccbc105102bceca0728977c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHFS6CRBK7hj4Ov3rIwAAdHIIAG346lkuihhX1oGF8enqKS6q\nlBRKICPjihXLLu4H9+9KonjPGxnRUhIIMOuAQFYzlKVo1hxBvnvteljpujmknfCB\n5jKaorc0IBMP6Y08IF4pFoAhVSqA85JQ46OOohAyc0vOr5NyuJITIdB0dmjPqECK\nwlbHDKlHceT7S3RF4mu8jio3XShLlOFQP3r91bou6wT5ei7AGStbGKLm9oFNCp6I\nDVE+Og3Y15WOOxNWduiJ0DlsEOG/a/pfy2JEp3qhHR53ZFZFZx2tSuoxrB/zk5i3\n/E0O9ovqP3IZGWr7zFPTXKwuCtNtFjn+jh6MCcKgZoXliXRUECoZ/Y4H6NBmSdg=\n=zTam\n-----END PGP SIGNATURE-----\n", "payload": "tree 27ba476a0bf0c21a66ed92779ad5855ea4faad6c\nparent 5b0acfd049ca205a5a43adde9882f59a97107afd\nparent b6b897b02c080759ec365d440d5df7cf93426657\nauthor Mara Bos <m-ou.se@m-ou.se> 1612469434 +0100\ncommitter GitHub <noreply@github.com> 1612469434 +0100\n\nRollup merge of #81556 - nikomatsakis:forbidden-lint-groups-lint, r=pnkfelix\n\nintroduce future-compatibility warning for forbidden lint groups\n\nWe used to ignore `forbid(group)` scenarios completely. This changed in #78864, but that led to a number of regressions (#80988, #81218).\n\nThis PR introduces a future compatibility warning for the case where a group is forbidden but then an individual lint within that group is allowed. We now issue a FCW when we see the \"allow\", but permit it to take effect.\n\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5990dd8ad83fa1dccbc105102bceca0728977c3", "html_url": "https://github.com/rust-lang/rust/commit/c5990dd8ad83fa1dccbc105102bceca0728977c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5990dd8ad83fa1dccbc105102bceca0728977c3/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0acfd049ca205a5a43adde9882f59a97107afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0acfd049ca205a5a43adde9882f59a97107afd", "html_url": "https://github.com/rust-lang/rust/commit/5b0acfd049ca205a5a43adde9882f59a97107afd"}, {"sha": "b6b897b02c080759ec365d440d5df7cf93426657", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b897b02c080759ec365d440d5df7cf93426657", "html_url": "https://github.com/rust-lang/rust/commit/b6b897b02c080759ec365d440d5df7cf93426657"}], "stats": {"total": 608, "additions": 554, "deletions": 54}, "files": [{"sha": "58a9064b9195bf1fdfc937c3cb332d392c8a1931", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -39,6 +39,7 @@ use rustc_session::SessionLintStore;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use rustc_target::abi::LayoutOf;\n+use tracing::debug;\n \n use std::cell::Cell;\n use std::slice;\n@@ -336,6 +337,20 @@ impl LintStore {\n         }\n     }\n \n+    /// True if this symbol represents a lint group name.\n+    pub fn is_lint_group(&self, lint_name: Symbol) -> bool {\n+        debug!(\n+            \"is_lint_group(lint_name={:?}, lint_groups={:?})\",\n+            lint_name,\n+            self.lint_groups.keys().collect::<Vec<_>>()\n+        );\n+        let lint_name_str = &*lint_name.as_str();\n+        self.lint_groups.contains_key(&lint_name_str) || {\n+            let warnings_name_str = crate::WARNINGS.name_lower();\n+            lint_name_str == &*warnings_name_str\n+        }\n+    }\n+\n     /// Checks the name of a lint for its existence, and whether it was\n     /// renamed or removed. Generates a DiagnosticBuilder containing a\n     /// warning for renamed and removed lints. This is over both lint"}, {"sha": "1fc2bd091675779dfe4861665119f3c9b18f3ae7", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 73, "deletions": 28, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::attr;\n use rustc_ast::unwrap_or;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n@@ -17,11 +17,15 @@ use rustc_middle::lint::{\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::lint::{builtin, Level, Lint, LintId};\n+use rustc_session::lint::{\n+    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    Level, Lint, LintId,\n+};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n+use tracing::debug;\n \n use std::cmp;\n \n@@ -51,6 +55,7 @@ pub struct LintLevelsBuilder<'s> {\n     id_to_set: FxHashMap<HirId, u32>,\n     cur: u32,\n     warn_about_weird_lints: bool,\n+    store: &'s LintStore,\n }\n \n pub struct BuilderPush {\n@@ -59,13 +64,14 @@ pub struct BuilderPush {\n }\n \n impl<'s> LintLevelsBuilder<'s> {\n-    pub fn new(sess: &'s Session, warn_about_weird_lints: bool, store: &LintStore) -> Self {\n+    pub fn new(sess: &'s Session, warn_about_weird_lints: bool, store: &'s LintStore) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n             sets: LintLevelSets::new(),\n             cur: 0,\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n+            store,\n         };\n         builder.process_command_line(sess, store);\n         assert_eq!(builder.sets.list.len(), 1);\n@@ -120,36 +126,75 @@ impl<'s> LintLevelsBuilder<'s> {\n             if let (Level::Forbid, old_src) =\n                 self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess)\n             {\n-                let mut diag_builder = struct_span_err!(\n-                    self.sess,\n-                    src.span(),\n-                    E0453,\n-                    \"{}({}) incompatible with previous forbid\",\n-                    level.as_str(),\n-                    src.name(),\n+                // Backwards compatibility check:\n+                //\n+                // We used to not consider `forbid(lint_group)`\n+                // as preventing `allow(lint)` for some lint `lint` in\n+                // `lint_group`. For now, issue a future-compatibility\n+                // warning for this case.\n+                let id_name = id.lint.name_lower();\n+                let fcw_warning = match old_src {\n+                    LintLevelSource::Default => false,\n+                    LintLevelSource::Node(symbol, _, _) => self.store.is_lint_group(symbol),\n+                    LintLevelSource::CommandLine(symbol, _) => self.store.is_lint_group(symbol),\n+                };\n+                debug!(\n+                    \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n+                    fcw_warning, specs, old_src, id_name\n                 );\n-                diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n-                match old_src {\n-                    LintLevelSource::Default => {\n-                        diag_builder.note(&format!(\n-                            \"`forbid` lint level is the default for {}\",\n-                            id.to_string()\n-                        ));\n-                    }\n-                    LintLevelSource::Node(_, forbid_source_span, reason) => {\n-                        diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n-                        if let Some(rationale) = reason {\n-                            diag_builder.note(&rationale.as_str());\n+\n+                let decorate_diag_builder = |mut diag_builder: DiagnosticBuilder<'_>| {\n+                    diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n+                    match old_src {\n+                        LintLevelSource::Default => {\n+                            diag_builder.note(&format!(\n+                                \"`forbid` lint level is the default for {}\",\n+                                id.to_string()\n+                            ));\n+                        }\n+                        LintLevelSource::Node(_, forbid_source_span, reason) => {\n+                            diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n+                            if let Some(rationale) = reason {\n+                                diag_builder.note(&rationale.as_str());\n+                            }\n+                        }\n+                        LintLevelSource::CommandLine(_, _) => {\n+                            diag_builder.note(\"`forbid` lint level was set on command line\");\n                         }\n                     }\n-                    LintLevelSource::CommandLine(_, _) => {\n-                        diag_builder.note(\"`forbid` lint level was set on command line\");\n-                    }\n+                    diag_builder.emit();\n+                };\n+                if !fcw_warning {\n+                    let diag_builder = struct_span_err!(\n+                        self.sess,\n+                        src.span(),\n+                        E0453,\n+                        \"{}({}) incompatible with previous forbid\",\n+                        level.as_str(),\n+                        src.name(),\n+                    );\n+                    decorate_diag_builder(diag_builder);\n+                } else {\n+                    self.struct_lint(\n+                        FORBIDDEN_LINT_GROUPS,\n+                        Some(src.span().into()),\n+                        |diag_builder| {\n+                            let diag_builder = diag_builder.build(&format!(\n+                                \"{}({}) incompatible with previous forbid\",\n+                                level.as_str(),\n+                                src.name(),\n+                            ));\n+                            decorate_diag_builder(diag_builder);\n+                        },\n+                    );\n                 }\n-                diag_builder.emit();\n \n-                // Retain the forbid lint level\n-                return;\n+                // Retain the forbid lint level, unless we are\n+                // issuing a FCW. In the FCW case, we want to\n+                // respect the new setting.\n+                if !fcw_warning {\n+                    return;\n+                }\n             }\n         }\n         specs.insert(id, (level, src));"}, {"sha": "da62ad3a6b1cdced003d53e394bb85c296174b02", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -5,10 +5,48 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n+// ignore-tidy-filelength\n+\n use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n+declare_lint! {\n+    /// The `forbidden_lint_groups` lint detects violations of\n+    /// `forbid` applied to a lint group. Due to a bug in the compiler,\n+    /// these used to be overlooked entirely. They now generate a warning.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![forbid(warnings)]\n+    /// #![deny(bad_style)]\n+    ///\n+    /// fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Recommended fix\n+    ///\n+    /// If your crate is using `#![forbid(warnings)]`,\n+    /// we recommend that you change to `#![deny(warnings)]`.\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Due to a compiler bug, applying `forbid` to lint groups\n+    /// previously had no effect. The bug is now fixed but instead of\n+    /// enforcing `forbid` we issue this future-compatibility warning\n+    /// to avoid breaking existing crates.\n+    pub FORBIDDEN_LINT_GROUPS,\n+    Warn,\n+    \"applying forbid to lint-groups\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #81670 <https://github.com/rust-lang/rust/issues/81670>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint! {\n     /// The `ill_formed_attribute_input` lint detects ill-formed attribute\n     /// inputs that were previously accepted and used in practice.\n@@ -2888,6 +2926,7 @@ declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n     HardwiredLints => [\n+        FORBIDDEN_LINT_GROUPS,\n         ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n         ARITHMETIC_OVERFLOW,\n         UNCONDITIONAL_PANIC,"}, {"sha": "ca73481b21699bed3d020a79ec8135f674a543d2", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -5,7 +5,10 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n-use rustc_session::lint::{builtin, Level, Lint, LintId};\n+use rustc_session::lint::{\n+    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    Level, Lint, LintId,\n+};\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n@@ -89,7 +92,12 @@ impl LintLevelSets {\n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an\n         // `allow(warnings)` in scope then we want to respect that instead.\n-        if level == Level::Warn {\n+        //\n+        // We exempt `FORBIDDEN_LINT_GROUPS` from this because it specifically\n+        // triggers in cases (like #80988) where you have `forbid(warnings)`,\n+        // and so if we turned that into an error, it'd defeat the purpose of the\n+        // future compatibility warning.\n+        if level == Level::Warn && LintId::of(lint) != LintId::of(FORBIDDEN_LINT_GROUPS) {\n             let (warnings_level, warnings_src) =\n                 self.get_lint_id_level(LintId::of(builtin::WARNINGS), idx, aux);\n             if let Some(configured_warning_level) = warnings_level {"}, {"sha": "80f7db4e56036b99c9c109e2ed354eda5e71db90", "filename": "src/test/ui/lint/forbid-group-group-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,13 @@\n+// Check what happens when we forbid a smaller group but\n+// then allow a superset of that group.\n+\n+#![forbid(nonstandard_style)]\n+\n+// FIXME: Arguably this should be an error, but the WARNINGS group is\n+// treated in a very special (and rather ad-hoc) way and\n+// it fails to trigger.\n+#[allow(warnings)]\n+fn main() {\n+    let A: ();\n+    //~^ ERROR should have a snake case name\n+}"}, {"sha": "fd425e5f74e6fdaaad05baacb273da03f6a628e5", "filename": "src/test/ui/lint/forbid-group-group-1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,15 @@\n+error: variable `A` should have a snake case name\n+  --> $DIR/forbid-group-group-1.rs:11:9\n+   |\n+LL |     let A: ();\n+   |         ^ help: convert the identifier to snake case: `a`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/forbid-group-group-1.rs:4:11\n+   |\n+LL | #![forbid(nonstandard_style)]\n+   |           ^^^^^^^^^^^^^^^^^\n+   = note: `#[forbid(non_snake_case)]` implied by `#[forbid(nonstandard_style)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b12fd72da74946bc5355159eb03887cf8ae4339b", "filename": "src/test/ui/lint/forbid-group-group-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,26 @@\n+// Check what happens when we forbid a bigger group but\n+// then deny a subset of that group.\n+\n+#![forbid(warnings)]\n+#![deny(forbidden_lint_groups)]\n+\n+#[allow(nonstandard_style)]\n+//~^ ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+fn main() {}"}, {"sha": "214e949c11a748990d8b906b48c2b82414d1f3a4", "filename": "src/test/ui/lint/forbid-group-group-2.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,115 @@\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+note: the lint level is defined here\n+  --> $DIR/forbid-group-group-2.rs:5:9\n+   |\n+LL | #![deny(forbidden_lint_groups)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "6f1b2e9f668124a94a726fe7f6266bd6fdc7afb4", "filename": "src/test/ui/lint/forbid-group-member.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,19 @@\n+// Check what happens when we forbid a group but\n+// then allow a member of that group.\n+//\n+// check-pass\n+\n+#![forbid(unused)]\n+\n+#[allow(unused_variables)]\n+//~^ WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+fn main() {\n+    let a: ();\n+}"}, {"sha": "c818d7ff606050529ce2a8589c1e06071d7d4e18", "filename": "src/test/ui/lint/forbid-group-member.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,51 @@\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `#[warn(forbidden_lint_groups)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "3279029a9cbc3fe4d7097d423d589edf640c96ae", "filename": "src/test/ui/lint/forbid-member-group.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,12 @@\n+// Check what happens when we forbid a member of\n+// a group but then allow the group.\n+\n+#![forbid(unused_variables)]\n+\n+#[allow(unused)]\n+//~^ ERROR incompatible with previous forbid\n+//~| ERROR incompatible with previous forbid\n+//~| ERROR incompatible with previous forbid\n+fn main() {\n+    let a: ();\n+}"}, {"sha": "1d8ab4d5edb0ce6019c11b1c9599f7e924c6062e", "filename": "src/test/ui/lint/forbid-member-group.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,30 @@\n+error[E0453]: allow(unused) incompatible with previous forbid\n+  --> $DIR/forbid-member-group.rs:6:9\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ---------------- `forbid` level set here\n+LL | \n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused) incompatible with previous forbid\n+  --> $DIR/forbid-member-group.rs:6:9\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ---------------- `forbid` level set here\n+LL | \n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused) incompatible with previous forbid\n+  --> $DIR/forbid-member-group.rs:6:9\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ---------------- `forbid` level set here\n+LL | \n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "05d7d924c8fabe0aa762309665c09358d27db06f", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -14,14 +14,17 @@\n \n // compile-flags: -Z deduplicate-diagnostics=yes\n \n+#![forbid(forbidden_lint_groups)]\n+\n fn forbid_first(num: i32) -> i32 {\n     #![forbid(unused)]\n     #![deny(unused)]\n     //~^ ERROR: deny(unused) incompatible with previous forbid\n+    //~| WARNING being phased out\n+    //~| ERROR: deny(unused) incompatible with previous forbid\n+    //~| WARNING being phased out\n     #![warn(unused)]\n-    //~^ ERROR: warn(unused) incompatible with previous forbid\n     #![allow(unused)]\n-    //~^ ERROR: allow(unused) incompatible with previous forbid\n \n     num * num\n }"}, {"sha": "475410cecffa30b105a618f9924fa93ef502bb62", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -1,29 +1,29 @@\n-error[E0453]: deny(unused) incompatible with previous forbid\n-  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:19:13\n+error: deny(unused) incompatible with previous forbid\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n    |\n LL |     #![forbid(unused)]\n    |               ------ `forbid` level set here\n LL |     #![deny(unused)]\n    |             ^^^^^^ overruled by previous forbid\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:17:11\n+   |\n+LL | #![forbid(forbidden_lint_groups)]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error[E0453]: warn(unused) incompatible with previous forbid\n+error: deny(unused) incompatible with previous forbid\n   --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n    |\n LL |     #![forbid(unused)]\n    |               ------ `forbid` level set here\n-...\n-LL |     #![warn(unused)]\n+LL |     #![deny(unused)]\n    |             ^^^^^^ overruled by previous forbid\n-\n-error[E0453]: allow(unused) incompatible with previous forbid\n-  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:23:14\n    |\n-LL |     #![forbid(unused)]\n-   |               ------ `forbid` level set here\n-...\n-LL |     #![allow(unused)]\n-   |              ^^^^^^ overruled by previous forbid\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0453`."}, {"sha": "16a041928db73b6814e203331ca5d0d44737edd8", "filename": "src/test/ui/lint/issue-80988.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-80988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-80988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #80988\n+//\n+// check-pass\n+\n+#![forbid(warnings)]\n+\n+#[deny(warnings)]\n+//~^ WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+fn main() {}"}, {"sha": "4cae11f97c0fb1f322aa1c39208082333aec9cf9", "filename": "src/test/ui/lint/issue-80988.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,51 @@\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `#[warn(forbidden_lint_groups)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "f02aa9040ebc50351daff68dd97af117fe9e1abd", "filename": "src/test/ui/lint/issue-81218.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-81218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fissue-81218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81218.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #81218\n+//\n+// check-pass\n+\n+#![forbid(warnings)]\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    // We want to ensure that you don't get an error\n+    // here. The idea is that a derive might generate\n+    // code that would otherwise trigger the \"unused variables\"\n+    // lint, but it is meant to be suppressed.\n+    let x: ();\n+}"}, {"sha": "486ec3c46804fb0f0d01f760baa7c4c4b5cdfaa7", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -15,11 +15,16 @@\n // compile-flags: -Z deduplicate-diagnostics=yes\n \n #![forbid(unused, non_snake_case)]\n+#![forbid(forbidden_lint_groups)]\n \n #[allow(unused_variables)] //~ ERROR incompatible with previous\n+//~^ ERROR incompatible with previous\n+//~| WARNING this was previously accepted by the compiler\n+//~| WARNING this was previously accepted by the compiler\n fn foo() {}\n \n #[allow(unused)] //~ ERROR incompatible with previous\n+//~^ WARNING this was previously accepted by the compiler\n fn bar() {}\n \n #[allow(nonstandard_style)] //~ ERROR incompatible with previous"}, {"sha": "d69157a8bb3adc9d316d331c3810bc4348702c26", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -1,30 +1,53 @@\n-error[E0453]: allow(unused_variables) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:19:9\n+error: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/outer-forbid.rs:20:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n-LL | \n+...\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+note: the lint level is defined here\n+  --> $DIR/outer-forbid.rs:18:11\n+   |\n+LL | #![forbid(forbidden_lint_groups)]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error[E0453]: allow(unused) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:22:9\n+error: allow(unused) incompatible with previous forbid\n+  --> $DIR/outer-forbid.rs:26:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n ...\n LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error[E0453]: allow(nonstandard_style) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:25:9\n+  --> $DIR/outer-forbid.rs:30:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |                   -------------- `forbid` level set here\n ...\n LL | #[allow(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to 3 previous errors\n+error: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/outer-forbid.rs:20:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+...\n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}]}