{"sha": "62d1db1d6c0aaf93323d81b915d8810248c287ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZDFkYjFkNmMwYWFmOTMzMjNkODFiOTE1ZDg4MTAyNDhjMjg3ZWM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-14T00:34:54Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-14T00:34:54Z"}, "message": "Long lines", "tree": {"sha": "c7a267cee1d16dda6fa9d6941ab31464194ca401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7a267cee1d16dda6fa9d6941ab31464194ca401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62d1db1d6c0aaf93323d81b915d8810248c287ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62d1db1d6c0aaf93323d81b915d8810248c287ec", "html_url": "https://github.com/rust-lang/rust/commit/62d1db1d6c0aaf93323d81b915d8810248c287ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62d1db1d6c0aaf93323d81b915d8810248c287ec/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c39b1436f07b3a88daa39a3fc021c4bb3208e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c39b1436f07b3a88daa39a3fc021c4bb3208e5", "html_url": "https://github.com/rust-lang/rust/commit/07c39b1436f07b3a88daa39a3fc021c4bb3208e5"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "17c3c11e572d2ca115500484b2bbd21941f1a6a7", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62d1db1d6c0aaf93323d81b915d8810248c287ec/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d1db1d6c0aaf93323d81b915d8810248c287ec/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=62d1db1d6c0aaf93323d81b915d8810248c287ec", "patch": "@@ -134,7 +134,8 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n  * and destination may overlap.\n  */\n #[inline(always)]\n-pub unsafe fn copy_overlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n+pub unsafe fn copy_overlapping_memory<T>(dst: *mut T, src: *const T,\n+                                         count: uint) {\n     let n = count * sys::size_of::<T>();\n     libc_::memmove(dst as *mut c_void, src as *c_void, n as size_t);\n }"}, {"sha": "9527c85481c276b84ad32dd1816556268f48e45c", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62d1db1d6c0aaf93323d81b915d8810248c287ec/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d1db1d6c0aaf93323d81b915d8810248c287ec/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=62d1db1d6c0aaf93323d81b915d8810248c287ec", "patch": "@@ -2085,7 +2085,8 @@ pub mod raw {\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n       * may overlap.\n       */\n-    pub unsafe fn copy_memory<T>(dst: &[mut T], src: &[const T], count: uint) {\n+    pub unsafe fn copy_memory<T>(dst: &[mut T], src: &[const T],\n+                                 count: uint) {\n         assert dst.len() >= count;\n         assert src.len() >= count;\n \n@@ -2102,7 +2103,8 @@ pub mod raw {\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n       * may overlap.\n       */\n-    pub unsafe fn copy_overlapping_memory<T>(dst: &[mut T], src: &[const T], count: uint) {\n+    pub unsafe fn copy_overlapping_memory<T>(dst: &[mut T], src: &[const T],\n+                                             count: uint) {\n         assert dst.len() >= count;\n         assert src.len() >= count;\n \n@@ -2178,7 +2180,8 @@ pub mod bytes {\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n       * may overlap.\n       */\n-    pub fn copy_overlapping_memory(dst: &[mut u8], src: &[const u8], count: uint) {\n+    pub fn copy_overlapping_memory(dst: &[mut u8], src: &[const u8],\n+                                   count: uint) {\n         // Bound checks are done at vec::raw::copy_overlapping_memory.\n         unsafe { vec::raw::copy_overlapping_memory(dst, src, count) }\n     }"}]}