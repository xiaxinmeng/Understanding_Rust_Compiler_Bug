{"sha": "07ee0317638cf1f290a8dace1c7ccc8fea16a236", "node_id": "C_kwDOAAsO6NoAKDA3ZWUwMzE3NjM4Y2YxZjI5MGE4ZGFjZTFjN2NjYzhmZWExNmEyMzY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-15T17:27:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-17T10:14:42Z"}, "message": "Stop using CRATE_DEF_INDEX.\n\n`CRATE_DEF_ID` and `CrateNum::as_def_id` are almost always what we want.", "tree": {"sha": "059bd5dcde9ee799551fed543e4e8ff474170678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/059bd5dcde9ee799551fed543e4e8ff474170678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ee0317638cf1f290a8dace1c7ccc8fea16a236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ee0317638cf1f290a8dace1c7ccc8fea16a236", "html_url": "https://github.com/rust-lang/rust/commit/07ee0317638cf1f290a8dace1c7ccc8fea16a236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ee0317638cf1f290a8dace1c7ccc8fea16a236/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "url": "https://api.github.com/repos/rust-lang/rust/commits/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "html_url": "https://github.com/rust-lang/rust/commit/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936"}], "stats": {"total": 256, "additions": 109, "deletions": 147}, "files": [{"sha": "7b7c676c26cd12b7f487a99982c8154930b4589b", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,12 +1,10 @@\n use std::collections::hash_map::Entry::*;\n \n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::Node;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n@@ -277,17 +275,6 @@ fn upstream_monomorphizations_provider(\n \n     let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n \n-    let cnum_stable_ids: IndexVec<CrateNum, Fingerprint> = {\n-        let mut cnum_stable_ids = IndexVec::from_elem_n(Fingerprint::ZERO, cnums.len() + 1);\n-\n-        for &cnum in cnums.iter() {\n-            cnum_stable_ids[cnum] =\n-                tcx.def_path_hash(DefId { krate: cnum, index: CRATE_DEF_INDEX }).0;\n-        }\n-\n-        cnum_stable_ids\n-    };\n-\n     let drop_in_place_fn_def_id = tcx.lang_items().drop_in_place_fn();\n \n     for &cnum in cnums.iter() {\n@@ -316,7 +303,7 @@ fn upstream_monomorphizations_provider(\n                     // If there are multiple monomorphizations available,\n                     // we select one deterministically.\n                     let other_cnum = *e.get();\n-                    if cnum_stable_ids[other_cnum] > cnum_stable_ids[cnum] {\n+                    if tcx.stable_crate_id(other_cnum) > tcx.stable_crate_id(cnum) {\n                         e.insert(cnum);\n                     }\n                 }"}, {"sha": "324e110005717ac6517f4f357e4b4dc7c08cc1a2", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,4 +1,4 @@\n-use crate::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::def_id::DefId;\n use crate::hir;\n \n use rustc_ast as ast;\n@@ -124,9 +124,7 @@ impl DefKind {\n     pub fn descr(self, def_id: DefId) -> &'static str {\n         match self {\n             DefKind::Fn => \"function\",\n-            DefKind::Mod if def_id.index == CRATE_DEF_INDEX && def_id.krate != LOCAL_CRATE => {\n-                \"crate\"\n-            }\n+            DefKind::Mod if def_id.is_crate_root() && !def_id.is_local() => \"crate\",\n             DefKind::Mod => \"module\",\n             DefKind::Static(..) => \"static\",\n             DefKind::Enum => \"enum\","}, {"sha": "bce9ba12ac0c424045e391a05f420f714307d4f7", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -353,11 +353,6 @@ impl Definitions {\n         }\n     }\n \n-    /// Retrieves the root definition.\n-    pub fn get_root_def(&self) -> LocalDefId {\n-        LocalDefId { local_def_index: CRATE_DEF_INDEX }\n-    }\n-\n     /// Adds a definition with a parent definition.\n     pub fn create_def(\n         &mut self,"}, {"sha": "e0ff28dff15cd3224ce74ee42f110a1ffc65d6e1", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,4 +1,4 @@\n-use crate::def_id::{LocalDefId, CRATE_DEF_INDEX};\n+use crate::def_id::{LocalDefId, CRATE_DEF_ID};\n use std::fmt;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n@@ -84,8 +84,5 @@ impl ItemLocalId {\n     pub const INVALID: ItemLocalId = ItemLocalId::MAX;\n }\n \n-/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n-pub const CRATE_HIR_ID: HirId = HirId {\n-    owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n-    local_id: ItemLocalId::from_u32(0),\n-};\n+/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_ID`.\n+pub const CRATE_HIR_ID: HirId = HirId { owner: CRATE_DEF_ID, local_id: ItemLocalId::from_u32(0) };"}, {"sha": "9c88171d1756614b27c777c580ab648fde0b51e0", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -5,7 +5,7 @@ use crate::native_libs;\n \n use rustc_ast as ast;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n@@ -324,7 +324,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                     continue;\n                 }\n \n-                bfs_queue.push_back(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n+                bfs_queue.push_back(cnum.as_def_id());\n             }\n \n             let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &ModChild, parent: DefId| {"}, {"sha": "50010fb83cf3b7151858a4e908de97f8d7f24ecc", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1633,7 +1633,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let hir = tcx.hir();\n \n             let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;\n-            let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX));\n+            let stability = tcx.lookup_stability(CRATE_DEF_ID);\n             let macros =\n                 self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));\n             let spans = self.tcx.sess.parse_sess.proc_macro_quoted_spans();"}, {"sha": "8402ca3028cce500665ac2091c230f8cdf91183d", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -60,7 +60,7 @@ use crate::mir::mono::MonoItem;\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n use rustc_query_system::dep_graph::FingerprintStyle;\n@@ -366,7 +366,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n \n     #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n-        let def_id = DefId { krate: *self, index: CRATE_DEF_INDEX };\n+        let def_id = self.as_def_id();\n         def_id.to_fingerprint(tcx)\n     }\n "}, {"sha": "758658c3d8c941c8f07081001c9493590f28b955", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self, HirId};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n@@ -370,8 +370,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             };\n         }\n \n-        let is_staged_api =\n-            self.lookup_stability(DefId { index: CRATE_DEF_INDEX, ..def_id }).is_some();\n+        let is_staged_api = self.lookup_stability(def_id.krate.as_def_id()).is_some();\n         if !is_staged_api {\n             return EvalResult::Allow;\n         }"}, {"sha": "4f4b6cf704fa9d75e147c0a5462ef21dcfcab541", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex}\n \n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::{CtorKind, Namespace};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::{self, GeneratorKind};\n use rustc_hir::{self as hir, HirId};\n use rustc_session::Session;\n@@ -385,7 +385,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n         let mut body = Body {\n             phase: MirPhase::Built,\n-            source: MirSource::item(DefId::local(CRATE_DEF_INDEX)),\n+            source: MirSource::item(CRATE_DEF_ID.to_def_id()),\n             basic_blocks,\n             source_scopes: IndexVec::new(),\n             generator: None,"}, {"sha": "2901772bc74ec35e2129dec57e0f199ba2e0f1f7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_ID};\n use rustc_hir::Node;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n@@ -319,7 +319,7 @@ impl Visibility {\n     pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {\n         match visibility.node {\n             hir::VisibilityKind::Public => Visibility::Public,\n-            hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n+            hir::VisibilityKind::Crate(_) => Visibility::Restricted(CRATE_DEF_ID.to_def_id()),\n             hir::VisibilityKind::Restricted { ref path, .. } => match path.res {\n                 // If there is no resolution, `resolve` will have already reported an error, so\n                 // assume that the visibility is public to avoid reporting more privacy errors.\n@@ -1992,8 +1992,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     fn opt_item_name(self, def_id: DefId) -> Option<Symbol> {\n-        if def_id.index == CRATE_DEF_INDEX {\n-            Some(self.crate_name(def_id.krate))\n+        if let Some(cnum) = def_id.as_crate_root() {\n+            Some(self.crate_name(cnum))\n         } else {\n             let def_key = self.def_key(def_id);\n             match def_key.disambiguated_data.data {"}, {"sha": "d2c5bd1898614a7270b5617efccff6ce6311e118", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n-use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::ItemKind;\n use rustc_session::config::TrimmedDefPaths;\n@@ -336,9 +336,7 @@ pub trait PrettyPrinter<'tcx>:\n \n         // If `def_id` is a direct or injected extern crate, return the\n         // path to the crate followed by the path to the item within the crate.\n-        if def_id.index == CRATE_DEF_INDEX {\n-            let cnum = def_id.krate;\n-\n+        if let Some(cnum) = def_id.as_crate_root() {\n             if cnum == LOCAL_CRATE {\n                 return Ok((self.path_crate(cnum)?, true));\n             }\n@@ -2228,11 +2226,11 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     ty::BrNamed(_, _) => br.kind,\n                     ty::BrAnon(i) => {\n                         let name = region_map[&(i + 1)];\n-                        ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n+                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                     }\n                     ty::BrEnv => {\n                         let name = region_map[&0];\n-                        ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n+                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                     }\n                 };\n                 self.tcx.mk_region(ty::ReLateBound(\n@@ -2258,7 +2256,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                             }\n                         };\n                         do_continue(&mut self, name);\n-                        ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n+                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                     }\n                 };\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n@@ -2693,7 +2691,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n     let mut seen_defs: DefIdSet = Default::default();\n \n     for &cnum in tcx.crates(()).iter() {\n-        let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        let def_id = cnum.as_def_id();\n \n         // Ignore crates that are not direct dependencies.\n         match tcx.extern_crate(def_id) {"}, {"sha": "4ef6ff1835ffd022ccddc0a098c3c2496aec2640", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -10,7 +10,6 @@ use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n-use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n \n use std::fmt;\n@@ -71,7 +70,7 @@ impl fmt::Debug for ty::BoundRegionKind {\n         match *self {\n             ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n             ty::BrNamed(did, name) => {\n-                if did.index == CRATE_DEF_INDEX {\n+                if did.is_crate_root() {\n                     write!(f, \"BrNamed({})\", name)\n                 } else {\n                     write!(f, \"BrNamed({:?}, {})\", did, name)"}, {"sha": "167741988798862b79e05f008190fa65b38f46ae", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -2,7 +2,7 @@ use std::collections::hash_map::Entry;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathDataName;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n@@ -335,10 +335,10 @@ fn compute_codegen_unit_name(\n     let mut cgu_def_id = None;\n     // Walk backwards from the item we want to find the module for.\n     loop {\n-        if current_def_id.index == CRATE_DEF_INDEX {\n+        if current_def_id.is_crate_root() {\n             if cgu_def_id.is_none() {\n                 // If we have not found a module yet, take the crate root.\n-                cgu_def_id = Some(DefId { krate: def_id.krate, index: CRATE_DEF_INDEX });\n+                cgu_def_id = Some(def_id.krate.as_def_id());\n             }\n             break;\n         } else if tcx.def_kind(current_def_id) == DefKind::Mod {"}, {"sha": "db083d0453bc05d7cc9a6924a3a3e3ca845eca8c", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,21 +1,18 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ForeignItem, ImplItem, Item, ItemKind, Node, TraitItem, CRATE_HIR_ID};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::config::{CrateType, EntryFnType};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n \n-struct EntryContext<'a, 'tcx> {\n-    session: &'a Session,\n-\n-    map: Map<'tcx>,\n+struct EntryContext<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n \n     /// The function that has attribute named `main`.\n     attr_main_fn: Option<(LocalDefId, Span)>,\n@@ -28,10 +25,9 @@ struct EntryContext<'a, 'tcx> {\n     non_main_fns: Vec<Span>,\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for EntryContext<'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n-        let def_key = self.map.def_key(item.def_id);\n-        let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n+        let at_root = self.tcx.local_parent(item.def_id) == Some(CRATE_DEF_ID);\n         find_item(item, self, at_root);\n     }\n \n@@ -60,13 +56,8 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n         return None;\n     }\n \n-    let mut ctxt = EntryContext {\n-        session: tcx.sess,\n-        map: tcx.hir(),\n-        attr_main_fn: None,\n-        start_fn: None,\n-        non_main_fns: Vec::new(),\n-    };\n+    let mut ctxt =\n+        EntryContext { tcx, attr_main_fn: None, start_fn: None, non_main_fns: Vec::new() };\n \n     tcx.hir().visit_all_item_likes(&mut ctxt);\n \n@@ -75,11 +66,11 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n \n // Beware, this is duplicated in `librustc_builtin_macros/test_harness.rs`\n // (with `ast::Item`), so make sure to keep them in sync.\n-fn entry_point_type(ctxt: &EntryContext<'_, '_>, item: &Item<'_>, at_root: bool) -> EntryPointType {\n-    let attrs = ctxt.map.attrs(item.hir_id());\n-    if ctxt.session.contains_name(attrs, sym::start) {\n+fn entry_point_type(ctxt: &EntryContext<'_>, item: &Item<'_>, at_root: bool) -> EntryPointType {\n+    let attrs = ctxt.tcx.hir().attrs(item.hir_id());\n+    if ctxt.tcx.sess.contains_name(attrs, sym::start) {\n         EntryPointType::Start\n-    } else if ctxt.session.contains_name(attrs, sym::rustc_main) {\n+    } else if ctxt.tcx.sess.contains_name(attrs, sym::rustc_main) {\n         EntryPointType::MainAttr\n     } else if item.ident.name == sym::main {\n         if at_root {\n@@ -98,16 +89,16 @@ fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n         .emit();\n }\n \n-fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n+fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_>, at_root: bool) {\n     match entry_point_type(ctxt, item, at_root) {\n         EntryPointType::None => (),\n         _ if !matches!(item.kind, ItemKind::Fn(..)) => {\n-            let attrs = ctxt.map.attrs(item.hir_id());\n-            if let Some(attr) = ctxt.session.find_by_name(attrs, sym::start) {\n-                throw_attr_err(&ctxt.session, attr.span, \"start\");\n+            let attrs = ctxt.tcx.hir().attrs(item.hir_id());\n+            if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::start) {\n+                throw_attr_err(&ctxt.tcx.sess, attr.span, \"start\");\n             }\n-            if let Some(attr) = ctxt.session.find_by_name(attrs, sym::rustc_main) {\n-                throw_attr_err(&ctxt.session, attr.span, \"rustc_main\");\n+            if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::rustc_main) {\n+                throw_attr_err(&ctxt.tcx.sess, attr.span, \"rustc_main\");\n             }\n         }\n         EntryPointType::MainNamed => (),\n@@ -119,7 +110,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.attr_main_fn = Some((item.def_id, item.span));\n             } else {\n                 struct_span_err!(\n-                    ctxt.session,\n+                    ctxt.tcx.sess,\n                     item.span,\n                     E0137,\n                     \"multiple functions with a `#[main]` attribute\"\n@@ -133,7 +124,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((item.def_id, item.span));\n             } else {\n-                struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n+                struct_span_err!(ctxt.tcx.sess, item.span, E0138, \"multiple `start` functions\")\n                     .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n@@ -142,7 +133,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     }\n }\n \n-fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(DefId, EntryFnType)> {\n+fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) -> Option<(DefId, EntryFnType)> {\n     if let Some((def_id, _)) = visitor.start_fn {\n         Some((def_id.to_def_id(), EntryFnType::Start))\n     } else if let Some((def_id, _)) = visitor.attr_main_fn {\n@@ -177,7 +168,7 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n     }\n }\n \n-fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n+fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n     let sp = tcx.def_span(CRATE_DEF_ID);\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about"}, {"sha": "379a6827c8aac5d3d41075a5aa1998ee7d4cec24", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n@@ -89,7 +89,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n         self.owner = Some(owner);\n         walk(self);\n \n-        if owner.local_def_index == CRATE_DEF_INDEX {\n+        if owner == CRATE_DEF_ID {\n             return;\n         }\n "}, {"sha": "35a858cb86c3f1851f40e4b266c2571bf0fc5342", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n@@ -703,7 +703,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let Some(cnum) = self.tcx.extern_mod_stmt_cnum(item.def_id) else {\n                     return;\n                 };\n-                let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+                let def_id = cnum.as_def_id();\n                 self.tcx.check_stability(def_id, Some(item.hir_id()), item.span, None);\n             }\n "}, {"sha": "b20aa7b53468aa0f329071cde63314849288ccc1", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,7 +1,7 @@\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_middle::ty::{TyCtxt, WithOptConstParam};\n use rustc_query_system::query::QueryCache;\n@@ -143,7 +143,7 @@ impl SpecIntoSelfProfilingString for CrateNum {\n         &self,\n         builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n     ) -> StringId {\n-        builder.def_id_to_string_id(DefId { krate: *self, index: CRATE_DEF_INDEX })\n+        builder.def_id_to_string_id(self.as_def_id())\n     }\n }\n "}, {"sha": "77995b60a557e7741160bf99d821a9a684b97578", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -23,7 +23,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def::{self, *};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::bug;\n use rustc_middle::metadata::ModChild;\n@@ -140,8 +140,8 @@ impl<'a> Resolver<'a> {\n                     let parent = def_key.parent.map(|index| {\n                         self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })\n                     });\n-                    let name = if def_id.index == CRATE_DEF_INDEX {\n-                        self.cstore().crate_name(def_id.krate)\n+                    let name = if let Some(cnum) = def_id.as_crate_root() {\n+                        self.cstore().crate_name(cnum)\n                     } else {\n                         def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n                     };\n@@ -250,7 +250,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n             ast::VisibilityKind::Crate(..) => {\n-                Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))\n+                Ok(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()))\n             }\n             ast::VisibilityKind::Inherited => {\n                 Ok(match self.parent_scope.module.kind {\n@@ -759,7 +759,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     let mut ctor_vis = if vis == ty::Visibility::Public\n                         && self.r.session.contains_name(&item.attrs, sym::non_exhaustive)\n                     {\n-                        ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))\n+                        ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n                     } else {\n                         vis\n                     };\n@@ -1108,7 +1108,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 root_span: span,\n                 span,\n                 module_path: Vec::new(),\n-                vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),\n+                vis: Cell::new(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())),\n                 used: Cell::new(false),\n             })\n         };\n@@ -1244,7 +1244,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let vis = if is_macro_export {\n                 ty::Visibility::Public\n             } else {\n-                ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))\n+                ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n             };\n             let binding = (res, vis, span, expansion).to_name_binding(self.r.arenas);\n             self.r.set_binding_parent_module(binding, parent_scope.module);\n@@ -1490,7 +1490,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let ctor_vis = if vis == ty::Visibility::Public\n             && self.r.session.contains_name(&variant.attrs, sym::non_exhaustive)\n         {\n-            ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))\n+            ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n         } else {\n             vis\n         };"}, {"sha": "899980a4c08872a103877052297b4c8fbb79537a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_middle::bug;\n use rustc_middle::ty::DefIdTree;\n@@ -1167,7 +1167,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n-                        let res = Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX));\n+                        let res = Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id());\n                         filter_fn(res).then_some(TypoSuggestion::typo_from_res(ident.name, res))\n                     }));\n                 }"}, {"sha": "1a98dd38fc97eb5a7dd62510af61ed2626b1b46f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::{PrimTy, TraitCandidate};\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n@@ -2210,7 +2210,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // trait to resolve.  In that case, we leave the `B`\n                 // segment to be resolved by type-check.\n                 return Ok(Some(PartialRes::with_unresolved_segments(\n-                    Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX)),\n+                    Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id()),\n                     path.len(),\n                 )));\n             }"}, {"sha": "17a9ef4b4db83ce900fe45621793c541289f8466", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -19,7 +19,7 @@ use rustc_errors::{\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::parse::feature_err;\n use rustc_span::edition::Edition;\n@@ -351,7 +351,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 }\n             })\n             .collect::<Vec<_>>();\n-        let crate_def_id = DefId::local(CRATE_DEF_INDEX);\n+        let crate_def_id = CRATE_DEF_ID.to_def_id();\n         if candidates.is_empty() && is_expected(Res::Def(DefKind::Enum, crate_def_id)) {\n             let mut enum_candidates: Vec<_> = self\n                 .r\n@@ -1331,10 +1331,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             names.extend(extern_prelude.iter().flat_map(|(ident, _)| {\n                                 self.r.crate_loader.maybe_process_path_extern(ident.name).and_then(\n                                     |crate_id| {\n-                                        let crate_mod = Res::Def(\n-                                            DefKind::Mod,\n-                                            DefId { krate: crate_id, index: CRATE_DEF_INDEX },\n-                                        );\n+                                        let crate_mod =\n+                                            Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n                                         if filter_fn(crate_mod) {\n                                             Some(TypoSuggestion::typo_from_res("}, {"sha": "5389cb19b58e478b60a6e06ec006f305be2bb2a8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -37,7 +37,7 @@ use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefPathHash, LocalDefId};\n-use rustc_hir::def_id::{CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n@@ -755,7 +755,7 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Module(&ModuleData {\n                 kind: ModuleKind::Def(DefKind::Mod, def_id, _),\n                 ..\n-            }) => def_id.index == CRATE_DEF_INDEX,\n+            }) => def_id.is_crate_root(),\n             _ => false,\n         }\n     }\n@@ -1207,18 +1207,17 @@ impl<'a> Resolver<'a> {\n         );\n \n         let definitions = Definitions::new(session.local_stable_crate_id(), krate.spans.inner_span);\n-        let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();\n         visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);\n \n         let mut def_id_to_node_id = IndexVec::default();\n-        assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);\n+        assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), CRATE_DEF_ID);\n         let mut node_id_to_def_id = FxHashMap::default();\n-        node_id_to_def_id.insert(CRATE_NODE_ID, root);\n+        node_id_to_def_id.insert(CRATE_NODE_ID, CRATE_DEF_ID);\n \n         let mut invocation_parents = FxHashMap::default();\n-        invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));\n+        invocation_parents.insert(LocalExpnId::ROOT, (CRATE_DEF_ID, ImplTraitContext::Existential));\n \n         let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session\n             .opts"}, {"sha": "d5f806308cf41bbca3b16ea67cd7f1fe77278fd5", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -283,8 +283,19 @@ impl DefId {\n         self.as_local().unwrap_or_else(|| panic!(\"DefId::expect_local: `{:?}` isn't local\", self))\n     }\n \n+    #[inline]\n+    pub fn is_crate_root(self) -> bool {\n+        self.index == CRATE_DEF_INDEX\n+    }\n+\n+    #[inline]\n+    pub fn as_crate_root(self) -> Option<CrateNum> {\n+        if self.is_crate_root() { Some(self.krate) } else { None }\n+    }\n+\n+    #[inline]\n     pub fn is_top_level_module(self) -> bool {\n-        self.is_local() && self.index == CRATE_DEF_INDEX\n+        self.is_local() && self.is_crate_root()\n     }\n }\n \n@@ -357,7 +368,7 @@ impl LocalDefId {\n \n     #[inline]\n     pub fn is_top_level_module(self) -> bool {\n-        self.local_def_index == CRATE_DEF_INDEX\n+        self == CRATE_DEF_ID\n     }\n }\n "}, {"sha": "a070cef227252b5b3bf25001bba3fc2ebd82f249", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -15,7 +15,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n@@ -1975,7 +1975,7 @@ fn clean_extern_crate(\n     // this is the ID of the `extern crate` statement\n     let cnum = cx.tcx.extern_mod_stmt_cnum(krate.def_id).unwrap_or(LOCAL_CRATE);\n     // this is the ID of the crate itself\n-    let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+    let crate_def_id = cnum.as_def_id();\n     let attrs = cx.tcx.hir().attrs(krate.hir_id());\n     let ty_vis = cx.tcx.visibility(krate.def_id);\n     let please_inline = ty_vis.is_public()\n@@ -2094,7 +2094,7 @@ fn clean_use_statement(\n     } else {\n         if inline_attr.is_none() {\n             if let Res::Def(DefKind::Mod, did) = path.res {\n-                if !did.is_local() && did.index == CRATE_DEF_INDEX {\n+                if !did.is_local() && did.is_crate_root() {\n                     // if we're `pub use`ing an extern crate root, don't inline it unless we\n                     // were specifically asked for it\n                     denied = true;"}, {"sha": "e30bc6e0a97eec369263796d729ce7daf2e5b565", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyId, Mutability};\n use rustc_index::vec::IndexVec;\n@@ -104,14 +104,6 @@ impl ItemId {\n             ItemId::Primitive(_, krate) => krate,\n         }\n     }\n-\n-    #[inline]\n-    crate fn index(self) -> Option<DefIndex> {\n-        match self {\n-            ItemId::DefId(id) => Some(id.index),\n-            _ => None,\n-        }\n-    }\n }\n \n impl From<DefId> for ItemId {\n@@ -160,7 +152,7 @@ impl ExternalCrate {\n \n     #[inline]\n     crate fn def_id(&self) -> DefId {\n-        DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }\n+        self.crate_num.as_def_id()\n     }\n \n     crate fn src(&self, tcx: TyCtxt<'_>) -> FileName {\n@@ -217,7 +209,7 @@ impl ExternalCrate {\n \n         // Failing that, see if there's an attribute specifying where to find this\n         // external crate\n-        let did = DefId { krate: self.crate_num, index: CRATE_DEF_INDEX };\n+        let did = self.crate_num.as_def_id();\n         tcx.get_attrs(did)\n             .lists(sym::doc)\n             .filter(|a| a.has_name(sym::html_root_url))\n@@ -559,7 +551,7 @@ impl Item {\n     }\n \n     crate fn is_crate(&self) -> bool {\n-        self.is_mod() && self.item_id.as_def_id().map_or(false, |did| did.index == CRATE_DEF_INDEX)\n+        self.is_mod() && self.item_id.as_def_id().map_or(false, |did| did.is_crate_root())\n     }\n     crate fn is_mod(&self) -> bool {\n         self.type_() == ItemType::Module"}, {"sha": "efd1a78a9d9a5d2a0d0f30208ef3549d5bdef79e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,7 +1,7 @@\n use std::mem;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::{sym, Symbol};\n@@ -293,7 +293,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     // A crate has a module at its root, containing all items,\n                     // which should not be indexed. The crate-item itself is\n                     // inserted later on when serializing the search-index.\n-                    if item.item_id.index().map_or(false, |idx| idx != CRATE_DEF_INDEX) {\n+                    if item.item_id.as_def_id().map_or(false, |idx| !idx.is_crate_root()) {\n                         let desc = item.doc_value().map_or_else(String::new, |x| {\n                             short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n                         });"}, {"sha": "6954e2363f5f04c495b9a4849b48ff0628688345", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -18,7 +18,6 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n@@ -1312,7 +1311,7 @@ impl clean::Visibility {\n                 //                 visibility, so it shouldn't matter.\n                 let parent_module = find_nearest_parent_module(cx.tcx(), item_did.expect_def_id());\n \n-                if vis_did.index == CRATE_DEF_INDEX {\n+                if vis_did.is_crate_root() {\n                     \"pub(crate) \".to_owned()\n                 } else if parent_module == Some(vis_did) {\n                     // `pub(in foo)` where `foo` is the parent module\n@@ -1360,7 +1359,7 @@ impl clean::Visibility {\n                 //                 visibility, so it shouldn't matter.\n                 let parent_module = find_nearest_parent_module(tcx, item_did);\n \n-                if vis_did.index == CRATE_DEF_INDEX {\n+                if vis_did.is_crate_root() {\n                     \"pub(crate) \".to_owned()\n                 } else if parent_module == Some(vis_did) {\n                     // `pub(in foo)` where `foo` is the parent module"}, {"sha": "56b02cd848041236e30fab13cfc70fa0de4f62ff", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -10,7 +10,6 @@ use std::fmt;\n use rustc_ast::ast;\n use rustc_hir::{def::CtorKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::Pos;\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n@@ -83,7 +82,7 @@ impl JsonRenderer<'_> {\n         match v {\n             Public => Visibility::Public,\n             Inherited => Visibility::Default,\n-            Restricted(did) if did.index == CRATE_DEF_INDEX => Visibility::Crate,\n+            Restricted(did) if did.is_crate_root() => Visibility::Crate,\n             Restricted(did) => Visibility::Restricted {\n                 parent: from_item_id(did.into()),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),"}, {"sha": "9723cdbe3345f3e1fc572f4c0cea5919de4b9457", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n use rustc_middle::ty::TyCtxt;\n \n@@ -29,7 +29,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit_lib(&mut self, cnum: CrateNum) {\n-        let did = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        let did = cnum.as_def_id();\n         self.update(did, Some(AccessLevel::Public));\n         self.visit_mod(did);\n     }"}, {"sha": "5816a95dcebffe63aa2a9410940e4c372a83260d", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee0317638cf1f290a8dace1c7ccc8fea16a236/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=07ee0317638cf1f290a8dace1c7ccc8fea16a236", "patch": "@@ -10,7 +10,7 @@ use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n@@ -114,8 +114,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let def_key = cx.tcx.hir().def_key(it.def_id);\n-                    if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n+                    let at_root = cx.tcx.local_parent(it.def_id) == Some(CRATE_DEF_ID);\n+                    if at_root {\n                         return;\n                     }\n                 }"}]}