{"sha": "a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmU5MGI2NWY0ZDFiMmUzZDQ5ZjkzNDk0ZTFiZmNmNWY1ZDA1YmY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-09-08T04:08:37Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-09-08T04:08:37Z"}, "message": "(partially fix incoming) More hash function simplification", "tree": {"sha": "ef74e10b4ed62d459edd73372aea2914bdb1054b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef74e10b4ed62d459edd73372aea2914bdb1054b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "html_url": "https://github.com/rust-lang/rust/commit/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bd1f32cd945fab63777b71ef76f23d758e2904c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd1f32cd945fab63777b71ef76f23d758e2904c", "html_url": "https://github.com/rust-lang/rust/commit/3bd1f32cd945fab63777b71ef76f23d758e2904c"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "5f8461519178dae4c38dfa244345135defb949f5", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "patch": "@@ -66,7 +66,7 @@ fn read_line() {\n fn str_set() {\n     let r = rand::Rng();\n \n-    let s = map::hashmap(str::hash, str::eq);\n+    let s = map::hashmap();\n \n     for int::range(0, 1000) |_i| {\n         map::set_add(s, r.gen_str(10));"}, {"sha": "fda121c65961451faaa34bd8f33cce7f4e2bca88", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "patch": "@@ -67,11 +67,9 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n     }\n }\n \n-pure fn node_hash(n: &node_id) -> uint { *n as uint }\n-\n fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n     let graph = do vec::from_fn(N) |_i| {\n-        map::hashmap::<node_id, ()>(node_hash, sys::shape_eq)\n+        map::hashmap::<node_id, ()>()\n     };\n \n     do vec::each(edges) |e| {\n@@ -87,7 +85,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n }\n \n fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n-    let keys = map::hashmap::<node_id, ()>(node_hash, sys::shape_eq);\n+    let keys = map::hashmap::<node_id, ()>();\n     let r = rand::Rng();\n \n     while keys.size() < n {"}, {"sha": "a67bb129482caab04f4eaf784c418ab3c8250ea0", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=a12e90b65f4d1b2e3d49f93494e1bfcf5f5d05bf", "patch": "@@ -39,13 +39,6 @@ trait hash_key {\n     pure fn eq(&&k: self) -> bool;\n }\n \n-fn mk_hash<K: Const hash_key, V: Copy>() -> map::hashmap<K, V> {\n-    pure fn hashfn<K: Const hash_key>(k: &K) -> uint { k.hash() }\n-    pure fn hasheq<K: Const hash_key>(k1: &K, k2: &K) -> bool { k1.eq(*k2) }\n-\n-    map::hashmap(hashfn, hasheq)\n-}\n-\n impl ~str: hash_key {\n     pure fn hash() -> uint { str::hash(&self) }\n     pure fn eq(&&x: ~str) -> bool { self == x }\n@@ -175,11 +168,12 @@ mod map_reduce {\n         input: K1)\n     {\n         // log(error, \"map_task \" + input);\n-        let intermediates = mk_hash();\n+        let intermediates = map::hashmap();\n \n         do map(input) |key, val| {\n             let mut c = None;\n-            match intermediates.find(key) {\n+            let found = intermediates.find(key);\n+            match found {\n               Some(_c) => { c = Some(_c); }\n               None => {\n                 do ctrl.swap |ctrl| {\n@@ -251,7 +245,7 @@ mod map_reduce {\n         // This task becomes the master control task. It task::_spawns\n         // to do the rest.\n \n-        let reducers = mk_hash();\n+        let reducers = map::hashmap();\n         let mut tasks = start_mappers(map, ctrl, inputs);\n         let mut num_mappers = vec::len(inputs) as int;\n "}]}