{"sha": "3a32c2c596d1aaef4ea2c6da4656828869564ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzJjMmM1OTZkMWFhZWY0ZWEyYzZkYTQ2NTY4Mjg4Njk1NjRmZjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-02T12:36:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-02T12:36:48Z"}, "message": "doc markdown lint shows the exact word location", "tree": {"sha": "b66cd553e3d97b7d22e77f69c0a8e07f4ac2bfe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66cd553e3d97b7d22e77f69c0a8e07f4ac2bfe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a32c2c596d1aaef4ea2c6da4656828869564ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a32c2c596d1aaef4ea2c6da4656828869564ff8", "html_url": "https://github.com/rust-lang/rust/commit/3a32c2c596d1aaef4ea2c6da4656828869564ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a32c2c596d1aaef4ea2c6da4656828869564ff8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365644e9e63bc4aa100ad4d84e2212f843a912e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/365644e9e63bc4aa100ad4d84e2212f843a912e4", "html_url": "https://github.com/rust-lang/rust/commit/365644e9e63bc4aa100ad4d84e2212f843a912e4"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "6212a025c2565acc947c4a3558ffc7015bee8487", "filename": "src/doc.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a32c2c596d1aaef4ea2c6da4656828869564ff8/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a32c2c596d1aaef4ea2c6da4656828869564ff8/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=3a32c2c596d1aaef4ea2c6da4656828869564ff8", "patch": "@@ -117,6 +117,15 @@ pub fn check_doc(cx: &EarlyContext, valid_idents: &[String], doc: &str, span: Sp\n         }\n     }\n \n+    #[allow(cast_possible_truncation)]\n+    fn word_span(mut span: Span, begin: usize, end: usize) -> Span {\n+        debug_assert_eq!(end as u32 as usize, end);\n+        debug_assert_eq!(begin as u32 as usize, begin);\n+        span.hi = span.lo + BytePos(end as u32);\n+        span.lo = span.lo + BytePos(begin as u32);\n+        span\n+    }\n+\n     let len = doc.len();\n     let mut chars = doc.char_indices().peekable();\n     let mut current_word_begin = 0;\n@@ -133,6 +142,7 @@ pub fn check_doc(cx: &EarlyContext, valid_idents: &[String], doc: &str, span: Sp\n                     '[' => {\n                         let end = jump_to!(chars, ']', len);\n                         let link_text = &doc[current_word_begin + 1..end];\n+                        let word_span = word_span(span, current_word_begin + 1, end + 1);\n \n                         match chars.peek() {\n                             Some(&(_, c)) => {\n@@ -143,18 +153,18 @@ pub fn check_doc(cx: &EarlyContext, valid_idents: &[String], doc: &str, span: Sp\n                                 match c {\n                                     '(' => { // inline link\n                                         current_word_begin = jump_to!(chars, ')', len);\n-                                        check_doc(cx, valid_idents, link_text, span);\n+                                        check_doc(cx, valid_idents, link_text, word_span);\n                                     }\n                                     '[' => { // reference link\n                                         current_word_begin = jump_to!(chars, ']', len);\n-                                        check_doc(cx, valid_idents, link_text, span);\n+                                        check_doc(cx, valid_idents, link_text, word_span);\n                                     }\n                                     ':' => { // reference link\n                                         current_word_begin = jump_to!(chars, '\\n', len);\n                                     }\n                                     _ => { // automatic reference link\n                                         current_word_begin = jump_to!(@next_char, chars, len);\n-                                        check_doc(cx, valid_idents, link_text, span);\n+                                        check_doc(cx, valid_idents, link_text, word_span);\n                                     }\n                                 }\n                             }\n@@ -166,8 +176,8 @@ pub fn check_doc(cx: &EarlyContext, valid_idents: &[String], doc: &str, span: Sp\n                             Some((end, _)) => end,\n                             None => len,\n                         };\n-\n-                        check_word(cx, valid_idents, &doc[current_word_begin..end], span);\n+                        let word_span = word_span(span, current_word_begin, end);\n+                        check_word(cx, valid_idents, &doc[current_word_begin..end], word_span);\n                         current_word_begin = jump_to!(@next_char, chars, len);\n                     }\n                 }"}]}