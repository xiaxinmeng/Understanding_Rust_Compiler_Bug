{"sha": "73ac5d6a80f26c692f1e084b72d69637d7de2c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYWM1ZDZhODBmMjZjNjkyZjFlMDg0YjcyZDY5NjM3ZDdkZTJjOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-11T12:22:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-11T12:22:54Z"}, "message": "Auto merge of #47180 - varkor:range-iterator-overrides, r=alexcrichton\n\nAdd iterator method specialisations to Range*\n\nAdd specialised implementations of `max` for `Range`, and `last`, `min` and `max` for `RangeInclusive`, all of which lead to significant advantages in the generated assembly on x86.\n\nNote that adding specialisations of `min` and `last` for `Range` led to no benefit, and adding `sum` for `Range` and `RangeInclusive` led to type inference issues (though this is possibly still worthwhile considering the performance gain).\n\nThis addresses some of the concerns in #39975.", "tree": {"sha": "d15437596327bad850bf1ef4f07d3bc5abe26005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d15437596327bad850bf1ef4f07d3bc5abe26005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ac5d6a80f26c692f1e084b72d69637d7de2c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ac5d6a80f26c692f1e084b72d69637d7de2c8c", "html_url": "https://github.com/rust-lang/rust/commit/73ac5d6a80f26c692f1e084b72d69637d7de2c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ac5d6a80f26c692f1e084b72d69637d7de2c8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619ced057842a25f8700237a9c22a6f5c318a954", "url": "https://api.github.com/repos/rust-lang/rust/commits/619ced057842a25f8700237a9c22a6f5c318a954", "html_url": "https://github.com/rust-lang/rust/commit/619ced057842a25f8700237a9c22a6f5c318a954"}, {"sha": "919d643b7953ea1b3b717d31f0735423d97b87ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/919d643b7953ea1b3b717d31f0735423d97b87ca", "html_url": "https://github.com/rust-lang/rust/commit/919d643b7953ea1b3b717d31f0735423d97b87ca"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "66a76a24df45afc983395776ad5c69f83c651d38", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/73ac5d6a80f26c692f1e084b72d69637d7de2c8c/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ac5d6a80f26c692f1e084b72d69637d7de2c8c/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=73ac5d6a80f26c692f1e084b72d69637d7de2c8c", "patch": "@@ -251,6 +251,21 @@ impl<A: Step> Iterator for ops::Range<A> {\n         self.start = self.end.clone();\n         None\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<A> {\n+        self.next_back()\n+    }\n+\n+    #[inline]\n+    fn min(mut self) -> Option<A> {\n+        self.next()\n+    }\n+\n+    #[inline]\n+    fn max(mut self) -> Option<A> {\n+        self.next_back()\n+    }\n }\n \n // These macros generate `ExactSizeIterator` impls for various range types.\n@@ -367,6 +382,21 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         self.end.replace_zero();\n         None\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<A> {\n+        self.next_back()\n+    }\n+\n+    #[inline]\n+    fn min(mut self) -> Option<A> {\n+        self.next()\n+    }\n+\n+    #[inline]\n+    fn max(mut self) -> Option<A> {\n+        self.next_back()\n+    }\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]"}, {"sha": "8997cf9c6bff9d1e50af8d14e7efeb6582b6012a", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/73ac5d6a80f26c692f1e084b72d69637d7de2c8c/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ac5d6a80f26c692f1e084b72d69637d7de2c8c/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=73ac5d6a80f26c692f1e084b72d69637d7de2c8c", "patch": "@@ -1352,6 +1352,51 @@ fn test_range_step() {\n     assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n \n+#[test]\n+fn test_range_last_max() {\n+    assert_eq!((0..20).last(), Some(19));\n+    assert_eq!((-20..0).last(), Some(-1));\n+    assert_eq!((5..5).last(), None);\n+\n+    assert_eq!((0..20).max(), Some(19));\n+    assert_eq!((-20..0).max(), Some(-1));\n+    assert_eq!((5..5).max(), None);\n+}\n+\n+#[test]\n+fn test_range_inclusive_last_max() {\n+    assert_eq!((0..=20).last(), Some(20));\n+    assert_eq!((-20..=0).last(), Some(0));\n+    assert_eq!((5..=5).last(), Some(5));\n+    let mut r = 10..=10;\n+    r.next();\n+    assert_eq!(r.last(), None);\n+\n+    assert_eq!((0..=20).max(), Some(20));\n+    assert_eq!((-20..=0).max(), Some(0));\n+    assert_eq!((5..=5).max(), Some(5));\n+    let mut r = 10..=10;\n+    r.next();\n+    assert_eq!(r.max(), None);\n+}\n+\n+#[test]\n+fn test_range_min() {\n+    assert_eq!((0..20).min(), Some(0));\n+    assert_eq!((-20..0).min(), Some(-20));\n+    assert_eq!((5..5).min(), None);\n+}\n+\n+#[test]\n+fn test_range_inclusive_min() {\n+    assert_eq!((0..=20).min(), Some(0));\n+    assert_eq!((-20..=0).min(), Some(-20));\n+    assert_eq!((5..=5).min(), Some(5));\n+    let mut r = 10..=10;\n+    r.next();\n+    assert_eq!(r.min(), None);\n+}\n+\n #[test]\n fn test_repeat() {\n     let mut it = repeat(42);"}]}