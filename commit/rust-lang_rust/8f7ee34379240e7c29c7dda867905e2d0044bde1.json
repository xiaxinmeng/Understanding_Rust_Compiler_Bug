{"sha": "8f7ee34379240e7c29c7dda867905e2d0044bde1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmN2VlMzQzNzkyNDBlN2MyOWM3ZGRhODY3OTA1ZTJkMDA0NGJkZTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T18:15:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:22:26Z"}, "message": "Tweak type parameter errors to reduce verbosity", "tree": {"sha": "511cfa20d7934d69dc119124f20222311bc3515d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511cfa20d7934d69dc119124f20222311bc3515d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f7ee34379240e7c29c7dda867905e2d0044bde1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7ee34379240e7c29c7dda867905e2d0044bde1", "html_url": "https://github.com/rust-lang/rust/commit/8f7ee34379240e7c29c7dda867905e2d0044bde1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f7ee34379240e7c29c7dda867905e2d0044bde1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9472b4700ed64a42cf8000d182152255bce1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9472b4700ed64a42cf8000d182152255bce1ef", "html_url": "https://github.com/rust-lang/rust/commit/1d9472b4700ed64a42cf8000d182152255bce1ef"}], "stats": {"total": 452, "additions": 78, "deletions": 374}, "files": [{"sha": "9ac27030adeeac0a1e1f11ea6ff5c53e612095c7", "filename": "src/librustc_infer/infer/error_reporting/note.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -10,10 +10,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         origin: &SubregionOrigin<'tcx>,\n     ) {\n+        let mut label_or_note = |span, msg| {\n+            let sub_count = err.children.iter().filter(|d| d.span.is_dummy()).count();\n+            let expanded_sub_count = err.children.iter().filter(|d| !d.span.is_dummy()).count();\n+            let span_is_primary = err.span.primary_spans().iter().all(|&sp| sp == span);\n+            if span_is_primary && sub_count == 0 && expanded_sub_count == 0 {\n+                err.span_label(span, msg);\n+            } else if span_is_primary && expanded_sub_count == 0 {\n+                err.note(msg);\n+            } else {\n+                err.span_note(span, msg);\n+            }\n+        };\n         match *origin {\n             infer::Subtype(ref trace) => {\n                 if let Some((expected, found)) = self.values_str(&trace.values) {\n-                    err.span_note(\n+                    label_or_note(\n                         trace.cause.span,\n                         &format!(\"...so that the {}\", trace.cause.as_requirement_str()),\n                     );\n@@ -24,27 +36,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     // handling of region checking when type errors are present is\n                     // *terrible*.\n \n-                    err.span_note(\n+                    label_or_note(\n                         trace.cause.span,\n                         &format!(\"...so that {}\", trace.cause.as_requirement_str()),\n                     );\n                 }\n             }\n             infer::Reborrow(span) => {\n-                err.span_note(span, \"...so that reference does not outlive borrowed content\");\n+                label_or_note(span, \"...so that reference does not outlive borrowed content\");\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n                 let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                err.span_note(span, &format!(\"...so that closure can access `{}`\", var_name));\n+                label_or_note(span, &format!(\"...so that closure can access `{}`\", var_name));\n             }\n             infer::RelateObjectBound(span) => {\n-                err.span_note(span, \"...so that it can be closed over into an object\");\n+                label_or_note(span, \"...so that it can be closed over into an object\");\n             }\n             infer::CallReturn(span) => {\n-                err.span_note(span, \"...so that return value is valid for the call\");\n+                label_or_note(span, \"...so that return value is valid for the call\");\n             }\n             infer::DataBorrowed(ty, span) => {\n-                err.span_note(\n+                label_or_note(\n                     span,\n                     &format!(\n                         \"...so that the type `{}` is not borrowed for too long\",\n@@ -53,7 +65,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n             }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n-                err.span_note(\n+                label_or_note(\n                     span,\n                     &format!(\n                         \"...so that the reference type `{}` does not outlive the data it points at\",\n@@ -62,7 +74,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n             }\n             infer::RelateParamBound(span, t) => {\n-                err.span_note(\n+                label_or_note(\n                     span,\n                     &format!(\n                         \"...so that the type `{}` will meet its required lifetime bounds\",\n@@ -71,13 +83,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n             }\n             infer::RelateRegionParamBound(span) => {\n-                err.span_note(\n+                label_or_note(\n                     span,\n                     \"...so that the declared lifetime parameter bounds are satisfied\",\n                 );\n             }\n             infer::CompareImplMethodObligation { span, .. } => {\n-                err.span_note(\n+                label_or_note(\n                     span,\n                     \"...so that the definition in impl matches the definition from the trait\",\n                 );"}, {"sha": "2dac4a22ae7136983347e6a7efe0e4fa44805900", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -2,15 +2,9 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/builtin-superkinds-self-type.rs:10:16\n    |\n LL | impl <T: Sync> Foo for T { }\n-   |       --       ^^^\n+   |       --       ^^^ ...so that the type `T` will meet its required lifetime bounds\n    |       |\n    |       help: consider adding an explicit lifetime bound...: `T: 'static +`\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/builtin-superkinds-self-type.rs:10:16\n-   |\n-LL | impl <T: Sync> Foo for T { }\n-   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "2beeba8184a7dfb0b3a7891fa222f6c2819c0ef2", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,13 +4,7 @@ error[E0310]: the parameter type `U` may not live long enough\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:5\n-   |\n-LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "e06977ebbe3df6dbf13b4ee1344f80c6f44fd116", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,11 +5,7 @@ LL |     type A<'a> where Self: 'static = (&'a ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n-note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n-  --> $DIR/impl_bounds.rs:15:5\n-   |\n-LL |     type A<'a> where Self: 'static = (&'a ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n \n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:5"}, {"sha": "0079fabb58d3351b7ea2b492a4b660df9980e641", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -65,15 +65,9 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |                                 --                ^^^^^^^^^^^^^^^^^^^^\n+   |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:51\n-   |\n-LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |                                                   ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "40e50b9922f8d2e9f6269cc113ab756df0ec3cc1", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -2,15 +2,9 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/type_parameters_captured.rs:7:20\n    |\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n-   |        -           ^^^^^^^^^^^^^^^^^^\n+   |        -           ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |        |\n    |        help: consider adding an explicit lifetime bound...: `T: 'static`\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/type_parameters_captured.rs:7:20\n-   |\n-LL | fn foo<T>(x: T) -> impl Any + 'static {\n-   |                    ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d682478db0eeff8b302d2e0f9e54e44ffb3f3193", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,27 +4,15 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     foo: &'static T\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'static T` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:19:5\n-   |\n-LL |     foo: &'static T\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL | trait X<K>: Sized {\n    |         - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |                   ^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n-   |\n-LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |                   ^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n \n error[E0309]: the parameter type `Self` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n@@ -33,51 +21,31 @@ LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n    |                   ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n-note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n-   |\n-LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n \n error[E0309]: the parameter type `L` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |                -     ^^^^^^^^^^^^^^^^\n+   |                -     ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n    |                |\n    |                help: consider adding an explicit lifetime bound...: `L: 'a`\n-   |\n-note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n-   |\n-LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |                      ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n LL | impl<K> Nested<K> {\n    |      - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-   |                                 ^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n-   |\n-LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-   |                                 ^^^^^^^^^^^^^^^^\n+   |                                 ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n \n error[E0309]: the parameter type `M` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n    |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound...: `M: 'a +`\n-   |\n-note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n-   |\n-LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |                                    ^^^^^^^^^^^^^^^^\n+   |                                    |\n+   |                                    ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n \n error: aborting due to 6 previous errors\n "}, {"sha": "eba00c5a9454e613a5d7cb9cf0ead5d1b6b36d35", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,11 +5,7 @@ LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n-note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n-  --> $DIR/projection-where-clause-env-wrong-bound.rs:15:5\n-   |\n-LL |     bar::<T::Output>()\n-   |     ^^^^^^^^^^^^^^^^\n+   = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "34b83859a6bd2e346a996f628c8ceb066db44bee", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,11 +5,7 @@ LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n-note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n-  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n-   |\n-LL |     bar::<<T as MyTrait<'a>>::Output>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "9303e0f8e66432a19d6ba148670cd2be3e65f2b7", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,11 +5,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n-note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n-  --> $DIR/regions-close-associated-type-into-object.rs:15:5\n-   |\n-LL |     Box::new(item)\n-   |     ^^^^^^^^^^^^^^\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:22:5\n@@ -18,11 +14,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n-note: ...so that the type `std::boxed::Box<<T as Iter>::Item>` will meet its required lifetime bounds\n-  --> $DIR/regions-close-associated-type-into-object.rs:22:5\n-   |\n-LL |     Box::new(item)\n-   |     ^^^^^^^^^^^^^^\n+   = note: ...so that the type `std::boxed::Box<<T as Iter>::Item>` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:28:5\n@@ -31,11 +23,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n-note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n-  --> $DIR/regions-close-associated-type-into-object.rs:28:5\n-   |\n-LL |     Box::new(item)\n-   |     ^^^^^^^^^^^^^^\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:35:5\n@@ -44,11 +32,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n-note: ...so that the type `std::boxed::Box<<T as Iter>::Item>` will meet its required lifetime bounds\n-  --> $DIR/regions-close-associated-type-into-object.rs:35:5\n-   |\n-LL |     Box::new(item)\n-   |     ^^^^^^^^^^^^^^\n+   = note: ...so that the type `std::boxed::Box<<T as Iter>::Item>` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e5a80cbd54758c0fd22f4a2eabcec80c1567ea04", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,13 +5,7 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^\n-   |\n-note: ...so that the type `B<'_, T>` will meet its required lifetime bounds\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ ...so that the type `B<'_, T>` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n@@ -20,13 +14,7 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |         ^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |         ^\n+   |         ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n@@ -35,13 +23,7 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n+   |         ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n@@ -50,13 +32,7 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |           ^^^\n-   |\n-note: ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n-  --> $DIR/regions-close-object-into-object-5.rs:17:11\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^\n+   |           ^^^ ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n@@ -65,13 +41,7 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |           ^^^\n-   |\n-note: ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n-  --> $DIR/regions-close-object-into-object-5.rs:17:11\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^\n+   |           ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n@@ -80,13 +50,7 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |           ^^^\n-   |\n-note: ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n-  --> $DIR/regions-close-object-into-object-5.rs:17:11\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^\n+   |           ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n \n error: aborting due to 6 previous errors\n "}, {"sha": "50274b066df60039130b9ba55bd0272b0de0f885", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,27 +4,15 @@ error[E0310]: the parameter type `A` may not live long enough\n LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n    |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     box v as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^\n-   |\n-note: ...so that the type `A` will meet its required lifetime bounds\n-  --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n-   |\n-LL |     box v as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^\n+   |     ^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n    |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     box v as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^\n-   |\n-note: ...so that the type `A` will meet its required lifetime bounds\n-  --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n-   |\n-LL |     box v as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^\n+   |     ^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "705d21078ecd76032b69eeb80727dba0f32d75b2", "filename": "src/test/ui/regions/regions-close-param-into-object.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,13 +5,7 @@ LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n    |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n ...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-close-param-into-object.rs:6:5\n-   |\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:12:5\n@@ -20,13 +14,7 @@ LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n    |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n ...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `std::boxed::Box<T>` will meet its required lifetime bounds\n-  --> $DIR/regions-close-param-into-object.rs:12:5\n-   |\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `std::boxed::Box<T>` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:18:5\n@@ -35,13 +23,7 @@ LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-close-param-into-object.rs:18:5\n-   |\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:24:5\n@@ -50,13 +32,7 @@ LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `std::boxed::Box<T>` will meet its required lifetime bounds\n-  --> $DIR/regions-close-param-into-object.rs:24:5\n-   |\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `std::boxed::Box<T>` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e32a36f72cd14b003a9207d88fe5ee514c2a91e1", "filename": "src/test/ui/regions/regions-enum-not-wf.stderr", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,13 +4,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | enum Ref1<'a, T> {\n    |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>)\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:18:18\n-   |\n-LL |     Ref1Variant1(RequireOutlives<'a, T>)\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:23:25\n@@ -19,13 +13,7 @@ LL | enum Ref2<'a, T> {\n    |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:23:25\n-   |\n-LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:1\n@@ -37,30 +25,15 @@ LL |   enum RefDouble<'a, 'b, T> {\n LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n LL | |\n LL | | }\n-   | |_^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:35:1\n-   |\n-LL | / enum RefDouble<'a, 'b, T> {\n-LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n-LL | |\n-LL | | }\n-   | |_^\n+   | |_^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:36:23\n    |\n LL | enum RefDouble<'a, 'b, T> {\n    |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:36:23\n-   |\n-LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ea59ea11a143c6dd70126b373f9637a370340550", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,13 +5,7 @@ LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n    |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n LL | {\n LL |     wf::<&'x T>();\n-   |          ^^^^^\n-   |\n-note: ...so that the reference type `&'x T` does not outlive the data it points at\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:10\n-   |\n-LL |     wf::<&'x T>();\n-   |          ^^^^^\n+   |          ^^^^^ ...so that the reference type `&'x T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "4ca5ac291d5bef33a6d08e6b3b7edf8638bc378d", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,11 +5,7 @@ LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n-note: ...so that the type `Self` will meet its required lifetime bounds\n-  --> $DIR/regions-infer-bound-from-trait-self.rs:46:9\n-   |\n-LL |         check_bound(x, self)\n-   |         ^^^^^^^^^^^\n+   = note: ...so that the type `Self` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "196ee8ca7c0b59a43d2afab6939ede59a1664593", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,27 +4,15 @@ error[E0309]: the parameter type `A` may not live long enough\n LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n    |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `A` will meet its required lifetime bounds\n-  --> $DIR/regions-infer-bound-from-trait.rs:33:5\n-   |\n-LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n    |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `A` will meet its required lifetime bounds\n-  --> $DIR/regions-infer-bound-from-trait.rs:37:5\n-   |\n-LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2bb51731583a6ffded7c220c0c825f69638b1999", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,13 +4,7 @@ error[E0310]: the parameter type `U` may not live long enough\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^\n-   |\n-note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/dont-infer-static.rs:8:5\n-   |\n-LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "e32a36f72cd14b003a9207d88fe5ee514c2a91e1", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.stderr", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,13 +4,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | enum Ref1<'a, T> {\n    |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>)\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:18:18\n-   |\n-LL |     Ref1Variant1(RequireOutlives<'a, T>)\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:23:25\n@@ -19,13 +13,7 @@ LL | enum Ref2<'a, T> {\n    |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:23:25\n-   |\n-LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:1\n@@ -37,30 +25,15 @@ LL |   enum RefDouble<'a, 'b, T> {\n LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n LL | |\n LL | | }\n-   | |_^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:35:1\n-   |\n-LL | / enum RefDouble<'a, 'b, T> {\n-LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n-LL | |\n-LL | | }\n-   | |_^\n+   | |_^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:36:23\n    |\n LL | enum RefDouble<'a, 'b, T> {\n    |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:36:23\n-   |\n-LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "44812a51778a74d133e47992181a87213bac3e31", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,27 +4,15 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/regions-struct-not-wf.rs:13:5\n-   |\n-LL |     type Out = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:21:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-struct-not-wf.rs:21:5\n-   |\n-LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-struct-not-wf.rs:25:5"}, {"sha": "0bd335e58e52e91405ffdcc14b7e7378db35d23f", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -99,15 +99,9 @@ error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:69:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |            -                               ^^^^^^^^^^^^^^^^^^\n+   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:74:5: 76:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n    |            |\n    |            help: consider adding an explicit lifetime bound...: `G: 'a`\n-   |\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:74:5: 76:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:69:44\n-   |\n-LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |                                            ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "643dac25724972168904f14bebbcc95168c4e2ff", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,13 +5,7 @@ LL | fn foo(d: impl Debug) {\n    |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n LL |\n LL |     bar(d);\n-   |     ^^^\n-   |\n-note: ...so that the type `impl Debug` will meet its required lifetime bounds\n-  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n-   |\n-LL |     bar(d);\n-   |     ^^^\n+   |     ^^^ ...so that the type `impl Debug` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "e2540e424cb19ac9d0990673e6ac6c0f6f56615d", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -22,16 +22,10 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:9:1\n    |\n LL | type WrongGeneric<T> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n ...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:1\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f3b32ad3f7e85d27399c8e9a574d4aad8789606a", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,13 +4,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | impl<'a, T> Foo<'a> for T {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Bar = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/wf-impl-associated-type-region.rs:10:5\n-   |\n-LL |     type Bar = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "a79c446247794ad59a1fdbc56bfd1922059da488", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,13 +5,7 @@ LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: fn() -> &'static T\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'static T` does not outlive the data it points at\n-  --> $DIR/wf-in-fn-type-static.rs:13:5\n-   |\n-LL |     x: fn() -> &'static T\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:18:5\n@@ -20,13 +14,7 @@ LL | struct Bar<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: Copy\n LL |     x: fn(&'static T)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'static T` does not outlive the data it points at\n-  --> $DIR/wf-in-fn-type-static.rs:18:5\n-   |\n-LL |     x: fn(&'static T)\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c0057f3c82977fd990fc09b3251108ec65239106", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,13 +5,7 @@ LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: dyn Object<&'static T>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'static T` does not outlive the data it points at\n-  --> $DIR/wf-in-obj-type-static.rs:14:5\n-   |\n-LL |     x: dyn Object<&'static T>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "4c25ab9593958ddf8d26de9dc9da0e548ebc6d21", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -4,27 +4,15 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a fn(T);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:5\n-   |\n-LL |     type Out = &'a fn(T);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a dyn Baz<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n-   |\n-LL |     type Out = &'a dyn Baz<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ae681ba6c9bb5c573fd8f7e3fe555cdd07370e3b", "filename": "src/test/ui/wf/wf-trait-associated-type-region.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f7ee34379240e7c29c7dda867905e2d0044bde1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr?ref=8f7ee34379240e7c29c7dda867905e2d0044bde1", "patch": "@@ -5,11 +5,7 @@ LL |     type Type2 = &'a Self::Type1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<Self as SomeTrait<'a>>::Type1: 'a`...\n-note: ...so that the reference type `&'a <Self as SomeTrait<'a>>::Type1` does not outlive the data it points at\n-  --> $DIR/wf-trait-associated-type-region.rs:9:5\n-   |\n-LL |     type Type2 = &'a Self::Type1;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the reference type `&'a <Self as SomeTrait<'a>>::Type1` does not outlive the data it points at\n \n error: aborting due to previous error\n "}]}