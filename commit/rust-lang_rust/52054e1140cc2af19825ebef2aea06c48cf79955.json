{"sha": "52054e1140cc2af19825ebef2aea06c48cf79955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDU0ZTExNDBjYzJhZjE5ODI1ZWJlZjJhZWEwNmM0OGNmNzk5NTU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T09:47:13Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T09:47:13Z"}, "message": "Use TypeAscriptionOwner\n\nThis replaces places where we would use node + node.type_ref() with things that\nhave an ascribed type, with using the TypeAscriptionOwner as the trait bound so\nwe can simply pass the node.", "tree": {"sha": "c53644687e6403d6a455965f877f061251673575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53644687e6403d6a455965f877f061251673575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52054e1140cc2af19825ebef2aea06c48cf79955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52054e1140cc2af19825ebef2aea06c48cf79955", "html_url": "https://github.com/rust-lang/rust/commit/52054e1140cc2af19825ebef2aea06c48cf79955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52054e1140cc2af19825ebef2aea06c48cf79955/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb070d6613644b6698a5ce6454d006662c84d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb070d6613644b6698a5ce6454d006662c84d8a", "html_url": "https://github.com/rust-lang/rust/commit/6eb070d6613644b6698a5ce6454d006662c84d8a"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "8b861a81f7be103ef381a7b4eb40b205596cc461", "filename": "crates/ra_hir/src/code_model_impl/konst.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52054e1140cc2af19825ebef2aea06c48cf79955/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52054e1140cc2af19825ebef2aea06c48cf79955/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs?ref=52054e1140cc2af19825ebef2aea06c48cf79955", "patch": "@@ -1,19 +1,16 @@\n use std::sync::Arc;\r\n \r\n-use ra_syntax::ast::{self, NameOwner};\r\n+use ra_syntax::ast::{NameOwner, TypeAscriptionOwner};\r\n \r\n use crate::{\r\n     Name, AsName, Const, ConstSignature, Static,\r\n     type_ref::{TypeRef},\r\n     PersistentHirDatabase,\r\n };\r\n \r\n-fn const_signature_for<N: NameOwner>(\r\n-    node: &N,\r\n-    type_ref: Option<&ast::TypeRef>,\r\n-) -> Arc<ConstSignature> {\r\n+fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstSignature> {\r\n     let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\r\n-    let type_ref = TypeRef::from_ast_opt(type_ref);\r\n+    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\r\n     let sig = ConstSignature { name, type_ref };\r\n     Arc::new(sig)\r\n }\r\n@@ -24,14 +21,14 @@ impl ConstSignature {\n         konst: Const,\r\n     ) -> Arc<ConstSignature> {\r\n         let (_, node) = konst.source(db);\r\n-        const_signature_for(&*node, node.type_ref())\r\n+        const_signature_for(&*node)\r\n     }\r\n \r\n     pub(crate) fn static_signature_query(\r\n         db: &impl PersistentHirDatabase,\r\n         konst: Static,\r\n     ) -> Arc<ConstSignature> {\r\n         let (_, node) = konst.source(db);\r\n-        const_signature_for(&*node, node.type_ref())\r\n+        const_signature_for(&*node)\r\n     }\r\n }\r"}, {"sha": "ec2c9bbc6557b36a2b0d5e1f04ea6e28e8e1ad86", "filename": "crates/ra_ide_api_light/src/structure.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52054e1140cc2af19825ebef2aea06c48cf79955/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52054e1140cc2af19825ebef2aea06c48cf79955/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs?ref=52054e1140cc2af19825ebef2aea06c48cf79955", "patch": "@@ -2,7 +2,7 @@ use crate::TextRange;\n \n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    ast::{self, AttrsOwner, NameOwner, TypeParamsOwner},\n+    ast::{self, AttrsOwner, NameOwner, TypeParamsOwner, TypeAscriptionOwner},\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n };\n \n@@ -45,6 +45,12 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n         decl_with_detail(node, None)\n     }\n \n+    fn decl_with_ascription<N: NameOwner + AttrsOwner + TypeAscriptionOwner>(\n+        node: &N,\n+    ) -> Option<StructureNode> {\n+        decl_with_type_ref(node, node.ascribed_type())\n+    }\n+\n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n         node: &N,\n         type_ref: Option<&ast::TypeRef>,\n@@ -107,14 +113,14 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             decl_with_detail(fn_def, Some(detail))\n         })\n         .visit(decl::<ast::StructDef>)\n-        .visit(|nfd: &ast::NamedFieldDef| decl_with_type_ref(nfd, nfd.type_ref()))\n         .visit(decl::<ast::EnumDef>)\n         .visit(decl::<ast::EnumVariant>)\n         .visit(decl::<ast::TraitDef>)\n         .visit(decl::<ast::Module>)\n         .visit(|td: &ast::TypeAliasDef| decl_with_type_ref(td, td.type_ref()))\n-        .visit(|cd: &ast::ConstDef| decl_with_type_ref(cd, cd.type_ref()))\n-        .visit(|sd: &ast::StaticDef| decl_with_type_ref(sd, sd.type_ref()))\n+        .visit(decl_with_ascription::<ast::NamedFieldDef>)\n+        .visit(decl_with_ascription::<ast::ConstDef>)\n+        .visit(decl_with_ascription::<ast::StaticDef>)\n         .visit(|im: &ast::ImplBlock| {\n             let target_type = im.target_type()?;\n             let target_trait = im.target_trait();"}]}