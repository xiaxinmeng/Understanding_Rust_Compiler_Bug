{"sha": "00cba5b092beedb75db307aaa8fedeae3a9d589a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwY2JhNWIwOTJiZWVkYjc1ZGIzMDdhYWE4ZmVkZWFlM2E5ZDU4OWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T03:37:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T03:37:47Z"}, "message": "Rollup merge of #64809 - davidtwco:issue-64768-target-feature-const, r=varkor\n\nhir: Disallow `target_feature` on constants\n\nFixes #64768.\n\nThis PR fixes an ICE when `#[target_feature]` is applied to constants by disallowing this with the same error as when `#[target_feature]` is applied to other places it shouldn't be.\n\nI couldn't see anything in the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2045-target-feature.md) that suggested that `#[target_feature]` should be applicable to constants or any tests that suggested it should, though I might have missed something - if this is desirable in future, it remains possible to remove this error (but for the time being, I think this error is better than an ICE).\n\nI also added some extra cases to the test for other places where `#[target_feature]` should not be permitted.\n\ncc @gnzlbg", "tree": {"sha": "b7018a29a4d9387ca2db11315d677b306e9a6225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7018a29a4d9387ca2db11315d677b306e9a6225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00cba5b092beedb75db307aaa8fedeae3a9d589a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdjtWMCRBK7hj4Ov3rIwAAdHIIAJ2SHtwQoMSgYDF2Fn0Ozbd1\n/POvMyjPTnYYBoUH9HJA03TTDvOf5m/ib+kLaWd7R67aBkSVy2YmXfBVcVnxXMmn\nvTLXkpTRJWddWQO7NRpCp+GM6PsiXYX0LTLQCyBra2qVFQdL0ryu6GENsA3/JXa0\niJJVoz69UMYDl0CKV9Jqi3LqC0mD2egzRs/UTQu1MdqxkpIv/5kICERHd66HJN00\nlvmycYWR7UpQ8rk2/HPG6Kssfm6OYn/Bb4xGaQIwc6BzaP7r2nDEeL3M8Aw/NS1s\n6LZ9WbwDK7SeDTpgrTMk1q7rvN8dT1uPQX6MPEL1YJj6qwNiTJenFQ1WOy+NMbw=\n=PALI\n-----END PGP SIGNATURE-----\n", "payload": "tree b7018a29a4d9387ca2db11315d677b306e9a6225\nparent 5b6a5801fbe90c029a170555c1ca49b676b243a7\nparent c3368bdfa498f0c8fb2267dfb0cb804df8ec6dbb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569641867 +0200\ncommitter GitHub <noreply@github.com> 1569641867 +0200\n\nRollup merge of #64809 - davidtwco:issue-64768-target-feature-const, r=varkor\n\nhir: Disallow `target_feature` on constants\n\nFixes #64768.\n\nThis PR fixes an ICE when `#[target_feature]` is applied to constants by disallowing this with the same error as when `#[target_feature]` is applied to other places it shouldn't be.\n\nI couldn't see anything in the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2045-target-feature.md) that suggested that `#[target_feature]` should be applicable to constants or any tests that suggested it should, though I might have missed something - if this is desirable in future, it remains possible to remove this error (but for the time being, I think this error is better than an ICE).\n\nI also added some extra cases to the test for other places where `#[target_feature]` should not be permitted.\n\ncc @gnzlbg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00cba5b092beedb75db307aaa8fedeae3a9d589a", "html_url": "https://github.com/rust-lang/rust/commit/00cba5b092beedb75db307aaa8fedeae3a9d589a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00cba5b092beedb75db307aaa8fedeae3a9d589a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b6a5801fbe90c029a170555c1ca49b676b243a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6a5801fbe90c029a170555c1ca49b676b243a7", "html_url": "https://github.com/rust-lang/rust/commit/5b6a5801fbe90c029a170555c1ca49b676b243a7"}, {"sha": "c3368bdfa498f0c8fb2267dfb0cb804df8ec6dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3368bdfa498f0c8fb2267dfb0cb804df8ec6dbb", "html_url": "https://github.com/rust-lang/rust/commit/c3368bdfa498f0c8fb2267dfb0cb804df8ec6dbb"}], "stats": {"total": 275, "additions": 204, "deletions": 71}, "files": [{"sha": "d5e956555bdfb7e4a526027c246af743a10261cf", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "patch": "@@ -93,70 +93,102 @@ struct CheckAttrVisitor<'tcx> {\n impl CheckAttrVisitor<'tcx> {\n     /// Checks any attribute.\n     fn check_attributes(&self, item: &hir::Item, target: Target) {\n-        if target == Target::Fn || target == Target::Const {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(item.hir_id));\n-        } else if let Some(a) = item.attrs.iter().find(|a| a.check_name(sym::target_feature)) {\n-            self.tcx.sess.struct_span_err(a.span, \"attribute should be applied to a function\")\n-                .span_label(item.span, \"not a function\")\n-                .emit();\n-        }\n-\n+        let mut is_valid = true;\n         for attr in &item.attrs {\n-            if attr.check_name(sym::inline) {\n+            is_valid &= if attr.check_name(sym::inline) {\n                 self.check_inline(attr, &item.span, target)\n             } else if attr.check_name(sym::non_exhaustive) {\n                 self.check_non_exhaustive(attr, item, target)\n             } else if attr.check_name(sym::marker) {\n                 self.check_marker(attr, item, target)\n-            }\n+            } else if attr.check_name(sym::target_feature) {\n+                self.check_target_feature(attr, item, target)\n+            } else {\n+                true\n+            };\n+        }\n+\n+        if !is_valid {\n+            return;\n+        }\n+\n+        if target == Target::Fn {\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(item.hir_id));\n         }\n \n         self.check_repr(item, target);\n         self.check_used(item, target);\n     }\n \n-    /// Checks if an `#[inline]` is applied to a function or a closure.\n-    fn check_inline(&self, attr: &hir::Attribute, span: &Span, target: Target) {\n+    /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n+    fn check_inline(&self, attr: &hir::Attribute, span: &Span, target: Target) -> bool {\n         if target != Target::Fn && target != Target::Closure {\n             struct_span_err!(self.tcx.sess,\n                              attr.span,\n                              E0518,\n                              \"attribute should be applied to function or closure\")\n                 .span_label(*span, \"not a function or closure\")\n                 .emit();\n+            false\n+        } else {\n+            true\n         }\n     }\n \n-    /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid.\n-    fn check_non_exhaustive(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n+    /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid. Returns `true` if valid.\n+    fn check_non_exhaustive(\n+        &self,\n+        attr: &hir::Attribute,\n+        item: &hir::Item,\n+        target: Target,\n+    ) -> bool {\n         match target {\n-            Target::Struct | Target::Enum => { /* Valid */ },\n+            Target::Struct | Target::Enum => true,\n             _ => {\n                 struct_span_err!(self.tcx.sess,\n                                  attr.span,\n                                  E0701,\n                                  \"attribute can only be applied to a struct or enum\")\n                     .span_label(item.span, \"not a struct or enum\")\n                     .emit();\n-                return;\n+                false\n             }\n         }\n     }\n \n-    /// Checks if the `#[marker]` attribute on an `item` is valid.\n-    fn check_marker(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n+    /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n+    fn check_marker(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n         match target {\n-            Target::Trait => { /* Valid */ },\n+            Target::Trait => true,\n             _ => {\n                 self.tcx.sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n                     .span_label(item.span, \"not a trait\")\n                     .emit();\n-                return;\n+                false\n             }\n         }\n     }\n \n+    /// Checks if the `#[target_feature]` attribute on `item` is valid. Returns `true` if valid.\n+    fn check_target_feature(\n+        &self,\n+        attr: &hir::Attribute,\n+        item: &hir::Item,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            Target::Fn => true,\n+            _ => {\n+                self.tcx.sess\n+                    .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                    .span_label(item.span, \"not a function\")\n+                    .emit();\n+                false\n+            },\n+        }\n+    }\n+\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(&self, item: &hir::Item, target: Target) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:"}, {"sha": "ae044eb843bd95659b07f0ca3eefac9288070a20", "filename": "src/test/ui/attributes/multiple-invalid.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Fattributes%2Fmultiple-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Fattributes%2Fmultiple-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmultiple-invalid.rs?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "patch": "@@ -0,0 +1,10 @@\n+// This test checks that all expected errors occur when there are multiple invalid attributes\n+// on an item.\n+\n+#[inline]\n+//~^ ERROR attribute should be applied to function or closure [E0518]\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+const FOO: u8 = 0;\n+\n+fn main() { }"}, {"sha": "9bd29f15dbcca9d660159e5795ee0e32deb7bcbc", "filename": "src/test/ui/attributes/multiple-invalid.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Fattributes%2Fmultiple-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Fattributes%2Fmultiple-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmultiple-invalid.stderr?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "patch": "@@ -0,0 +1,21 @@\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/multiple-invalid.rs:4:1\n+   |\n+LL | #[inline]\n+   | ^^^^^^^^^\n+...\n+LL | const FOO: u8 = 0;\n+   | ------------------ not a function or closure\n+\n+error: attribute should be applied to a function\n+  --> $DIR/multiple-invalid.rs:6:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | const FOO: u8 = 0;\n+   | ------------------ not a function\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "47ca5a5ca478c5c0a3a30604712f36a40c2c3c86", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5b6a5801fbe90c029a170555c1ca49b676b243a7/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6a5801fbe90c029a170555c1ca49b676b243a7/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=5b6a5801fbe90c029a170555c1ca49b676b243a7", "patch": "@@ -1,50 +0,0 @@\n-error: malformed `target_feature` attribute input\n-  --> $DIR/target-feature-wrong.rs:16:1\n-   |\n-LL | #[target_feature = \"+sse2\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n-\n-error: the feature named `foo` is not valid for this target\n-  --> $DIR/target-feature-wrong.rs:18:18\n-   |\n-LL | #[target_feature(enable = \"foo\")]\n-   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n-\n-error: malformed `target_feature` attribute input\n-  --> $DIR/target-feature-wrong.rs:21:18\n-   |\n-LL | #[target_feature(bar)]\n-   |                  ^^^ help: must be of the form: `enable = \"..\"`\n-\n-error: malformed `target_feature` attribute input\n-  --> $DIR/target-feature-wrong.rs:23:18\n-   |\n-LL | #[target_feature(disable = \"baz\")]\n-   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n-\n-error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/target-feature-wrong.rs:27:1\n-   |\n-LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n-...\n-LL | fn bar() {}\n-   | ----------- not an `unsafe` function\n-\n-error: attribute should be applied to a function\n-  --> $DIR/target-feature-wrong.rs:33:1\n-   |\n-LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |\n-LL | mod another {}\n-   | -------------- not a function\n-\n-error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/target-feature-wrong.rs:38:1\n-   |\n-LL | #[inline(always)]\n-   | ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "bc7f7caa1076663e66b98ec01872da0c4e11e034", "filename": "src/test/ui/target-feature/gate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "previous_filename": "src/test/ui/target-feature-gate.rs"}, {"sha": "05dbc6e90adc8a054ed5d06133324132402632ec", "filename": "src/test/ui/target-feature/gate.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/target-feature-gate.rs:30:18\n+  --> $DIR/gate.rs:30:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/target-feature-gate.stderr"}, {"sha": "46680336632f905459f4bba3585bf55b180462a9", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "renamed", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "patch": "@@ -35,6 +35,31 @@ fn bar() {}\n mod another {}\n //~^ NOTE not a function\n \n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+const FOO: usize = 7;\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+struct Foo;\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+enum Bar { }\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+union Qux { f1: u16, f2: u16 }\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+trait Baz { }\n+//~^ NOTE not a function\n+\n #[inline(always)]\n //~^ ERROR: cannot use `#[inline(always)]`\n #[target_feature(enable = \"sse2\")]", "previous_filename": "src/test/ui/target-feature-wrong.rs"}, {"sha": "abfe5dd219770c4ed7db515e1a2c0cfeec42a61a", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00cba5b092beedb75db307aaa8fedeae3a9d589a/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=00cba5b092beedb75db307aaa8fedeae3a9d589a", "patch": "@@ -0,0 +1,95 @@\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:16:1\n+   |\n+LL | #[target_feature = \"+sse2\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n+\n+error: the feature named `foo` is not valid for this target\n+  --> $DIR/invalid-attribute.rs:18:18\n+   |\n+LL | #[target_feature(enable = \"foo\")]\n+   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n+\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:21:18\n+   |\n+LL | #[target_feature(bar)]\n+   |                  ^^^ help: must be of the form: `enable = \"..\"`\n+\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:23:18\n+   |\n+LL | #[target_feature(disable = \"baz\")]\n+   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n+\n+error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:27:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+...\n+LL | fn bar() {}\n+   | ----------- not an `unsafe` function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:33:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | mod another {}\n+   | -------------- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:38:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | const FOO: usize = 7;\n+   | --------------------- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:43:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:48:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | enum Bar { }\n+   | ------------ not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:53:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | union Qux { f1: u16, f2: u16 }\n+   | ------------------------------ not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:58:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | trait Baz { }\n+   | ------------- not a function\n+\n+error: cannot use `#[inline(always)]` with `#[target_feature]`\n+  --> $DIR/invalid-attribute.rs:63:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}]}