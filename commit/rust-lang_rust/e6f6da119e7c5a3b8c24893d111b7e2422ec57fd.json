{"sha": "e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjZkYTExOWU3YzVhM2I4YzI0ODkzZDExMWI3ZTI0MjJlYzU3ZmQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-09-14T19:25:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-09-16T06:44:29Z"}, "message": "End of adding error codes in librustc", "tree": {"sha": "d44daf273494e500986e0196bfeeebf47fad738b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d44daf273494e500986e0196bfeeebf47fad738b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "html_url": "https://github.com/rust-lang/rust/commit/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7358a5e8ea7c2ab0aaa76b503ef68161e44681a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7358a5e8ea7c2ab0aaa76b503ef68161e44681a0", "html_url": "https://github.com/rust-lang/rust/commit/7358a5e8ea7c2ab0aaa76b503ef68161e44681a0"}], "stats": {"total": 112, "additions": 92, "deletions": 20}, "files": [{"sha": "cf858e74c8dff49e52aa3ea89a6b629f30aa9c83", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "patch": "@@ -1933,6 +1933,71 @@ you want. Example:\n ```\n \"##,\n \n+E0493: r##\"\n+A type with a destructor was assigned to an invalid type of variable. Erroneous\n+code example:\n+\n+```\n+struct Foo {\n+    a: u32\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+const F : Foo = Foo { a : 0 };\n+// error: constants are not allowed to have destructors\n+static S : Foo = Foo { a : 0 };\n+// error: statics are not allowed to have destructors\n+```\n+\n+To solve this issue, please use a type which does allow the usage of type with\n+destructors.\n+\"##,\n+\n+E0494: r##\"\n+A reference of an interior static was assigned to another const/static.\n+Erroneous code example:\n+\n+```\n+struct Foo {\n+    a: u32\n+}\n+\n+static S : Foo = Foo { a : 0 };\n+static A : &'static u32 = &S.a;\n+// error: cannot refer to the interior of another static, use a\n+//        constant instead\n+```\n+\n+The \"base\" variable has to be a const if you want another static/const variable\n+to refer to one of its fields. Example:\n+\n+```\n+struct Foo {\n+    a: u32\n+}\n+\n+const S : Foo = Foo { a : 0 };\n+static A : &'static u32 = &S.a; // ok!\n+```\n+\"##,\n+\n+E0497: r##\"\n+A stability attribute was used outside of the standard library. Erroneous code\n+example:\n+\n+```\n+#[stable] // error: stability attributes may not be used outside of the\n+          //        standard library\n+fn foo() {}\n+```\n+\n+It is not possible to use stability attributes outside of the standard library.\n+Also, for now, it is not possible to write deprecation messages either.\n+\"##,\n+\n }\n \n \n@@ -1996,4 +2061,8 @@ register_diagnostics! {\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n+    E0492, // cannot borrow a constant which contains interior mutability\n+    E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n+    E0496, // .. name `..` shadows a .. name that is already in scope\n+    E0498, // malformed plugin attribute\n }"}, {"sha": "e1c29531b7d97a1431f928c375c7716d966526ee", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "patch": "@@ -499,9 +499,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 if self.qualif.intersects(ConstQualif::MUTABLE_MEM) && tc.interior_unsafe() {\n                     outer = outer | ConstQualif::NOT_CONST;\n                     if self.mode != Mode::Var {\n-                        self.tcx.sess.span_err(ex.span,\n-                            \"cannot borrow a constant which contains \\\n-                             interior mutability, create a static instead\");\n+                        span_err!(self.tcx.sess, ex.span, E0492,\n+                                  \"cannot borrow a constant which contains \\\n+                                   interior mutability, create a static instead\");\n                     }\n                 }\n                 // If the reference has to be 'static, avoid in-place initialization\n@@ -548,9 +548,9 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         ty::TyEnum(def, _) if def.has_dtor() => {\n             v.add_qualif(ConstQualif::NEEDS_DROP);\n             if v.mode != Mode::Var {\n-                v.tcx.sess.span_err(e.span,\n-                                    &format!(\"{}s are not allowed to have destructors\",\n-                                             v.msg()));\n+                span_err!(v.tcx.sess, e.span, E0493,\n+                          \"{}s are not allowed to have destructors\",\n+                          v.msg());\n             }\n         }\n         _ => {}\n@@ -904,9 +904,9 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                         // Borrowed statics can specifically *only* have their address taken,\n                         // not any number of other borrows such as borrowing fields, reading\n                         // elements of an array, etc.\n-                        self.tcx.sess.span_err(borrow_span,\n-                            \"cannot refer to the interior of another \\\n-                             static, use a constant instead\");\n+                        span_err!(self.tcx.sess, borrow_span, E0494,\n+                                  \"cannot refer to the interior of another \\\n+                                   static, use a constant instead\");\n                     }\n                     break;\n                 }"}, {"sha": "293abde7b782110ddbf7625f3f6457f084bdcf56", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "patch": "@@ -1626,11 +1626,10 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        self.tcx.sess.span_err(\n-            var_origin.span(),\n-            &format!(\"cannot infer an appropriate lifetime{} \\\n-                    due to conflicting requirements\",\n-                    var_description));\n+        span_err!(self.tcx.sess, var_origin.span(), E0495,\n+                  \"cannot infer an appropriate lifetime{} \\\n+                   due to conflicting requirements\",\n+                  var_description);\n     }\n \n     fn note_region_origin(&self, origin: &SubregionOrigin<'tcx>) {"}, {"sha": "c21999c2dbc322d0db4cafa700b2655ad4defe54", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "patch": "@@ -357,10 +357,10 @@ fn signal_shadowing_problem(\n     sess: &Session, name: ast::Name, orig: Original, shadower: Shadower) {\n     if let (ShadowKind::Lifetime, ShadowKind::Lifetime) = (orig.kind, shadower.kind) {\n         // lifetime/lifetime shadowing is an error\n-        sess.span_err(shadower.span,\n-                      &format!(\"{} name `{}` shadows a \\\n-                                {} name that is already in scope\",\n-                               shadower.kind.desc(), name, orig.kind.desc()));\n+        span_err!(sess, shadower.span, E0496,\n+                  \"{} name `{}` shadows a \\\n+                   {} name that is already in scope\",\n+                  shadower.kind.desc(), name, orig.kind.desc());\n     } else {\n         // shadowing involving a label is only a warning, due to issues with\n         // labels and lifetimes not being macro-hygienic."}, {"sha": "288426830efaf38298dcace8c2a84580bb460f90", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6da119e7c5a3b8c24893d111b7e2422ec57fd/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=e6f6da119e7c5a3b8c24893d111b7e2422ec57fd", "patch": "@@ -39,6 +39,10 @@ struct PluginLoader<'a> {\n     plugins: Vec<PluginRegistrar>,\n }\n \n+fn call_malformed_plugin_attribute(a: &Session, b: Span) {\n+    span_err!(a, b, E0498, \"malformed plugin attribute\");\n+}\n+\n /// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n                     addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n@@ -52,14 +56,14 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n         let plugins = match attr.meta_item_list() {\n             Some(xs) => xs,\n             None => {\n-                sess.span_err(attr.span, \"malformed plugin attribute\");\n+                call_malformed_plugin_attribute(sess, attr.span);\n                 continue;\n             }\n         };\n \n         for plugin in plugins {\n             if plugin.value_str().is_some() {\n-                sess.span_err(attr.span, \"malformed plugin attribute\");\n+                call_malformed_plugin_attribute(sess, attr.span);\n                 continue;\n             }\n "}]}