{"sha": "0ea31348d90d24c7a36d0543833b1174083bc7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYTMxMzQ4ZDkwZDI0YzdhMzZkMDU0MzgzM2IxMTc0MDgzYmM3Y2I=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T18:21:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T00:05:58Z"}, "message": "liblog: remove unnecessary `as_slice` calls", "tree": {"sha": "c946924bb69e4ae37c85f58497cd864694540e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c946924bb69e4ae37c85f58497cd864694540e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ea31348d90d24c7a36d0543833b1174083bc7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea31348d90d24c7a36d0543833b1174083bc7cb", "html_url": "https://github.com/rust-lang/rust/commit/0ea31348d90d24c7a36d0543833b1174083bc7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ea31348d90d24c7a36d0543833b1174083bc7cb/comments", "author": null, "committer": null, "parents": [{"sha": "c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "html_url": "https://github.com/rust-lang/rust/commit/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc"}], "stats": {"total": 15, "additions": 3, "deletions": 12}, "files": [{"sha": "d1db0ec89a16bec10112c0ae89114fe5bafa963e", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ea31348d90d24c7a36d0543833b1174083bc7cb/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea31348d90d24c7a36d0543833b1174083bc7cb/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=0ea31348d90d24c7a36d0543833b1174083bc7cb", "patch": "@@ -100,7 +100,6 @@ mod tests {\n     #[test]\n     fn parse_logging_spec_valid() {\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 3);\n         assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_string()));\n         assert_eq!(dirs[0].level, 1);\n@@ -117,7 +116,6 @@ mod tests {\n     fn parse_logging_spec_invalid_crate() {\n         // test parse_logging_spec with multiple = in specification\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1=2,crate2=4\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n         assert_eq!(dirs[0].name, Some(\"crate2\".to_string()));\n         assert_eq!(dirs[0].level, 4);\n@@ -128,7 +126,6 @@ mod tests {\n     fn parse_logging_spec_invalid_log_level() {\n         // test parse_logging_spec with 'noNumber' as log level\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=noNumber,crate2=4\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n         assert_eq!(dirs[0].name, Some(\"crate2\".to_string()));\n         assert_eq!(dirs[0].level, 4);\n@@ -139,7 +136,6 @@ mod tests {\n     fn parse_logging_spec_string_log_level() {\n         // test parse_logging_spec with 'warn' as log level\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=wrong,crate2=warn\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n         assert_eq!(dirs[0].name, Some(\"crate2\".to_string()));\n         assert_eq!(dirs[0].level, ::WARN);\n@@ -150,7 +146,6 @@ mod tests {\n     fn parse_logging_spec_empty_log_level() {\n         // test parse_logging_spec with '' as log level\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=wrong,crate2=\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n         assert_eq!(dirs[0].name, Some(\"crate2\".to_string()));\n         assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n@@ -161,7 +156,6 @@ mod tests {\n     fn parse_logging_spec_global() {\n         // test parse_logging_spec with no crate\n         let (dirs, filter) = parse_logging_spec(\"warn,crate2=4\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 2);\n         assert_eq!(dirs[0].name, None);\n         assert_eq!(dirs[0].level, 2);\n@@ -173,7 +167,6 @@ mod tests {\n     #[test]\n     fn parse_logging_spec_valid_filter() {\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4/abc\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 3);\n         assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_string()));\n         assert_eq!(dirs[0].level, 1);\n@@ -183,26 +176,24 @@ mod tests {\n \n         assert_eq!(dirs[2].name, Some(\"crate2\".to_string()));\n         assert_eq!(dirs[2].level, 4);\n-        assert!(filter.is_some() && filter.unwrap().to_string().as_slice() == \"abc\");\n+        assert!(filter.is_some() && filter.unwrap().to_string() == \"abc\");\n     }\n \n     #[test]\n     fn parse_logging_spec_invalid_crate_filter() {\n         let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1=2,crate2=4/a.c\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n         assert_eq!(dirs[0].name, Some(\"crate2\".to_string()));\n         assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_some() && filter.unwrap().to_string().as_slice() == \"a.c\");\n+        assert!(filter.is_some() && filter.unwrap().to_string() == \"a.c\");\n     }\n \n     #[test]\n     fn parse_logging_spec_empty_with_filter() {\n         let (dirs, filter) = parse_logging_spec(\"crate1/a*c\");\n-        let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n         assert_eq!(dirs[0].name, Some(\"crate1\".to_string()));\n         assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n-        assert!(filter.is_some() && filter.unwrap().to_string().as_slice() == \"a*c\");\n+        assert!(filter.is_some() && filter.unwrap().to_string() == \"a*c\");\n     }\n }"}]}