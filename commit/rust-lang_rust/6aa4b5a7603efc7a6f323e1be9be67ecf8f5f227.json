{"sha": "6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYTRiNWE3NjAzZWZjN2E2ZjMyM2UxYmU5YmU2N2VjZjhmNWYyMjc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-12-11T03:11:12Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:24Z"}, "message": "Add promoted_operand closure to reuse code across different", "tree": {"sha": "8c7767c3c67adce374427b72068905e79e48dadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7767c3c67adce374427b72068905e79e48dadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "html_url": "https://github.com/rust-lang/rust/commit/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32fe47779b169cd8d637cfae3b130e004008e6f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/32fe47779b169cd8d637cfae3b130e004008e6f3", "html_url": "https://github.com/rust-lang/rust/commit/32fe47779b169cd8d637cfae3b130e004008e6f3"}], "stats": {"total": 74, "additions": 20, "deletions": 54}, "files": [{"sha": "1052d037326b4e7a67aebf2e9ef3ca3939ff5c4e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 20, "deletions": 54, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "patch": "@@ -908,6 +908,23 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n             let tcx = self.tcx;\n+            let mut promoted_operand = |ty, span| {\n+                promoted.span = span;\n+                promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n+\n+                Operand::Constant(Box::new(Constant {\n+                    span,\n+                    user_ty: None,\n+                    literal: tcx.mk_const(ty::Const {\n+                        ty,\n+                        val: ty::ConstKind::Unevaluated(\n+                            def_id,\n+                            InternalSubsts::identity_for_item(tcx, def_id),\n+                            Some(promoted_id),\n+                        ),\n+                    }),\n+                }))\n+            };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n                 Candidate::Ref(loc) => {\n@@ -926,10 +943,6 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                                 ty::TypeAndMut { ty, mutbl: borrow_kind.to_mutbl_lossy() },\n                             );\n \n-                            promoted.span = span;\n-                            promoted.local_decls[RETURN_PLACE] =\n-                                LocalDecl::new_return_place(ref_ty, span);\n-\n                             *region = tcx.lifetimes.re_static;\n \n                             let mut projection = vec![PlaceElem::Deref];\n@@ -944,24 +957,11 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n \n-                            let promoted_ref_rvalue =\n-                                Rvalue::Use(Operand::Constant(Box::new(Constant {\n-                                    span,\n-                                    user_ty: None,\n-                                    literal: tcx.mk_const(ty::Const {\n-                                        ty: ref_ty,\n-                                        val: ty::ConstKind::Unevaluated(\n-                                            def_id,\n-                                            InternalSubsts::identity_for_item(tcx, def_id),\n-                                            Some(promoted_id),\n-                                        ),\n-                                    }),\n-                                })));\n                             let promoted_ref_statement = Statement {\n                                 source_info: statement.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n                                     Place::from(promoted_ref),\n-                                    promoted_ref_rvalue,\n+                                    Rvalue::Use(promoted_operand(ref_ty, span)),\n                                 ))),\n                             };\n                             self.extra_statements.push((loc, promoted_ref_statement));\n@@ -988,24 +988,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let ty = operand.ty(local_decls, self.tcx);\n                             let span = statement.source_info.span;\n \n-                            promoted.span = span;\n-                            promoted.local_decls[RETURN_PLACE] =\n-                                LocalDecl::new_return_place(ty, span);\n-\n-                            let promoted_operand = Operand::Constant(Box::new(Constant {\n-                                span,\n-                                user_ty: None,\n-                                literal: tcx.mk_const(ty::Const {\n-                                    ty,\n-                                    val: ty::ConstKind::Unevaluated(\n-                                        def_id,\n-                                        InternalSubsts::identity_for_item(tcx, def_id),\n-                                        Some(promoted_id),\n-                                    ),\n-                                }),\n-                            }));\n-\n-                            Rvalue::Use(mem::replace(operand, promoted_operand))\n+                            Rvalue::Use(mem::replace(operand, promoted_operand(ty, span)))\n                         }\n                         _ => bug!(),\n                     }\n@@ -1017,24 +1000,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let ty = args[index].ty(local_decls, self.tcx);\n                             let span = terminator.source_info.span;\n \n-                            promoted.span = span;\n-                            promoted.local_decls[RETURN_PLACE] =\n-                                LocalDecl::new_return_place(ty, span);\n-\n-                            let promoted_operand = Operand::Constant(Box::new(Constant {\n-                                span,\n-                                user_ty: None,\n-                                literal: tcx.mk_const(ty::Const {\n-                                    ty,\n-                                    val: ty::ConstKind::Unevaluated(\n-                                        def_id,\n-                                        InternalSubsts::identity_for_item(tcx, def_id),\n-                                        Some(promoted_id),\n-                                    ),\n-                                }),\n-                            }));\n-\n-                            Rvalue::Use(mem::replace(&mut args[index], promoted_operand))\n+                            Rvalue::Use(mem::replace(&mut args[index], promoted_operand(ty, span)))\n                         }\n                         // We expected a `TerminatorKind::Call` for which we'd like to promote an\n                         // argument. `qualify_consts` saw a `TerminatorKind::Call` here, but"}]}