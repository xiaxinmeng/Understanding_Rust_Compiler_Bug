{"sha": "c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YmMzZjA1ZjU0OTE1YTk2MjYyMGJmY2I4ZGZmN2FmZjBkODQ5ZjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T22:17:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-19T19:40:28Z"}, "message": "More HashStable.", "tree": {"sha": "d71763cbb97a397c2009440f60f7d3cc584c0694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d71763cbb97a397c2009440f60f7d3cc584c0694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "html_url": "https://github.com/rust-lang/rust/commit/c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e00ebd725fedd721dd39c89affad83ac49f155c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e00ebd725fedd721dd39c89affad83ac49f155c3", "html_url": "https://github.com/rust-lang/rust/commit/e00ebd725fedd721dd39c89affad83ac49f155c3"}], "stats": {"total": 169, "additions": 25, "deletions": 144}, "files": [{"sha": "2b3bc37c87ccbe8a2e4c9f2d9d4c9a73d3f5e601", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -313,11 +313,9 @@ pub enum DefPathData {\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n-         RustcEncodable, RustcDecodable)]\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct DefPathHash(pub Fingerprint);\n \n-impl_stable_hash_for!(tuple_struct DefPathHash { fingerprint });\n-\n impl Borrow<Fingerprint> for DefPathHash {\n     #[inline]\n     fn borrow(&self) -> &Fingerprint {"}, {"sha": "fd8ccce6833522d3368e16704133f4ce220effc0", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::{self, Lift, TyCtxt, Region};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default, HashStable)]\n pub struct FreeRegionMap<'tcx> {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n     //\n@@ -89,10 +89,6 @@ fn is_free_or_static(r: Region<'_>) -> bool {\n     }\n }\n \n-impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n-    relation\n-});\n-\n impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n     type Lifted = FreeRegionMap<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<FreeRegionMap<'tcx>> {"}, {"sha": "d84102ff3c5d8caf07a6b37895cf9b397b210ce7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -543,18 +543,11 @@ impl LintId {\n }\n \n /// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, HashStable)]\n pub enum Level {\n     Allow, Warn, Deny, Forbid,\n }\n \n-impl_stable_hash_for!(enum self::Level {\n-    Allow,\n-    Warn,\n-    Deny,\n-    Forbid\n-});\n-\n impl Level {\n     /// Converts a level to a lower-case string.\n     pub fn as_str(self) -> &'static str {\n@@ -590,7 +583,7 @@ impl Level {\n }\n \n /// How a lint level was set.\n-#[derive(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n pub enum LintSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin.\n@@ -603,12 +596,6 @@ pub enum LintSource {\n     CommandLine(Symbol),\n }\n \n-impl_stable_hash_for!(enum self::LintSource {\n-    Default,\n-    Node(name, span, reason),\n-    CommandLine(text)\n-});\n-\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;"}, {"sha": "7182f031824025ae74579522461e017390f262c1", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -11,17 +11,12 @@ use crate::ty::subst::SubstsRef;\n /// kind of crate, including cdylibs which export very few things.\n /// `Rust` will only be exported if the crate produced is a Rust\n /// dylib.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum SymbolExportLevel {\n     C,\n     Rust,\n }\n \n-impl_stable_hash_for!(enum self::SymbolExportLevel {\n-    C,\n-    Rust\n-});\n-\n impl SymbolExportLevel {\n     pub fn is_below_threshold(self, threshold: SymbolExportLevel) -> bool {\n         threshold == SymbolExportLevel::Rust // export everything from Rust dylibs"}, {"sha": "c13c44c413d776fe45942b409b6ac7e21e2c4958", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -207,20 +207,14 @@ struct NamedRegionMap {\n }\n \n /// See [`NamedRegionMap`].\n-#[derive(Default)]\n+#[derive(Default, HashStable)]\n pub struct ResolveLifetimes {\n     defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n     late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n     object_lifetime_defaults:\n         FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>>,\n }\n \n-impl_stable_hash_for!(struct crate::middle::resolve_lifetime::ResolveLifetimes {\n-    defs,\n-    late_bound,\n-    object_lifetime_defaults\n-});\n-\n struct LifetimeContext<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     map: &'a mut NamedRegionMap,"}, {"sha": "411a47423c5aa7c93f0917e49e0790756f83c63f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -52,7 +52,7 @@ enum AnnotationKind {\n }\n \n /// An entry in the `depr_map`.\n-#[derive(Clone)]\n+#[derive(Clone, HashStable)]\n pub struct DeprecationEntry {\n     /// The metadata of the attribute associated with this entry.\n     pub attr: Deprecation,\n@@ -61,11 +61,6 @@ pub struct DeprecationEntry {\n     origin: Option<HirId>,\n }\n \n-impl_stable_hash_for!(struct self::DeprecationEntry {\n-    attr,\n-    origin\n-});\n-\n impl DeprecationEntry {\n     fn local(attr: Deprecation, id: HirId) -> DeprecationEntry {\n         DeprecationEntry {\n@@ -90,6 +85,7 @@ impl DeprecationEntry {\n }\n \n /// A stability index, giving the stability level for items and methods.\n+#[derive(HashStable)]\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n@@ -103,13 +99,6 @@ pub struct Index<'tcx> {\n     active_features: FxHashSet<Symbol>,\n }\n \n-impl_stable_hash_for!(struct self::Index<'tcx> {\n-    stab_map,\n-    depr_map,\n-    staged_api,\n-    active_features\n-});\n-\n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,"}, {"sha": "f849361e08be9e0b0dbfd36267a8972af043e586", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -4,7 +4,6 @@ use super::{\n     Pointer, InterpResult, AllocId, ScalarMaybeUndef, write_target_uint, read_target_uint, Scalar,\n };\n \n-use crate::mir;\n use crate::ty::layout::{Size, Align};\n \n use rustc_data_structures::sorted_map::SortedMap;\n@@ -787,14 +786,13 @@ type Block = u64;\n \n /// A bitmask where each bit refers to the byte with the same index. If the bit is `true`, the byte\n /// is defined. If it is `false` the byte is undefined.\n-#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct UndefMask {\n     blocks: Vec<Block>,\n     len: Size,\n }\n \n-impl_stable_hash_for!(struct mir::interpret::UndefMask{blocks, len});\n-\n impl UndefMask {\n     pub const BLOCK_SIZE: u64 = 64;\n "}, {"sha": "52c72de7579e1e22f76ecb7c50355e2eba972986", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -458,7 +458,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum ScalarMaybeUndef<Tag = (), Id = AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,\n@@ -583,11 +583,6 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n }\n \n-impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n-    Scalar(v),\n-    Undef\n-});\n-\n /// Gets the bytes of a constant slice value.\n pub fn get_slice_bytes<'tcx>(cx: &impl HasDataLayout, val: ConstValue<'tcx>) -> &'tcx [u8] {\n     if let ConstValue::Slice { data, start, end } = val {"}, {"sha": "79468b68055d4e508a6698e6f32499f25887d576", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -70,7 +70,8 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n /// The various \"big phases\" that MIR goes through.\n ///\n /// Warning: ordering of variants is significant.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable,\n+         Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum MirPhase {\n     Build = 0,\n     Const = 1,\n@@ -86,7 +87,7 @@ impl MirPhase {\n }\n \n /// The lowered representation of a single function.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, TypeFoldable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable, TypeFoldable)]\n pub struct Body<'tcx> {\n     /// A list of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n@@ -412,24 +413,6 @@ pub enum Safety {\n     ExplicitUnsafe(hir::HirId),\n }\n \n-impl_stable_hash_for!(struct Body<'tcx> {\n-    phase,\n-    basic_blocks,\n-    source_scopes,\n-    source_scope_local_data,\n-    yield_ty,\n-    generator_drop,\n-    generator_layout,\n-    local_decls,\n-    user_type_annotations,\n-    arg_count,\n-    __upvar_debuginfo_codegen_only_do_not_use,\n-    spread_arg,\n-    control_flow_destroyed,\n-    span,\n-    cache\n-});\n-\n impl<'tcx> Index<BasicBlock> for Body<'tcx> {\n     type Output = BasicBlockData<'tcx>;\n \n@@ -609,7 +592,7 @@ pub enum LocalKind {\n     ReturnPointer,\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct VarBindingForm<'tcx> {\n     /// Is variable bound via `x`, `mut x`, `ref x`, or `ref mut x`?\n     pub binding_mode: ty::BindingMode,\n@@ -642,7 +625,7 @@ pub enum BindingForm<'tcx> {\n }\n \n /// Represents what type of implicit self a function has, if any.\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum ImplicitSelfKind {\n     /// Represents a `fn x(self);`.\n     Imm,\n@@ -659,28 +642,6 @@ pub enum ImplicitSelfKind {\n \n CloneTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n \n-impl_stable_hash_for!(struct self::VarBindingForm<'tcx> {\n-    binding_mode,\n-    opt_ty_info,\n-    opt_match_place,\n-    pat_span\n-});\n-\n-impl_stable_hash_for!(enum self::ImplicitSelfKind {\n-    Imm,\n-    Mut,\n-    ImmRef,\n-    MutRef,\n-    None\n-});\n-\n-impl_stable_hash_for!(enum self::MirPhase {\n-    Build,\n-    Const,\n-    Validated,\n-    Optimized,\n-});\n-\n mod binding_form_impl {\n     use crate::ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -707,7 +668,7 @@ mod binding_form_impl {\n /// involved in borrow_check errors, e.g., explanations of where the\n /// temporaries come from, when their destructors are run, and/or how\n /// one might revise the code to satisfy the borrow checker's rules.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct BlockTailInfo {\n     /// If `true`, then the value resulting from evaluating this tail\n     /// expression is ignored by the block's expression context.\n@@ -717,8 +678,6 @@ pub struct BlockTailInfo {\n     pub tail_result_is_ignored: bool,\n }\n \n-impl_stable_hash_for!(struct BlockTailInfo { tail_result_is_ignored });\n-\n /// A MIR local.\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n@@ -1746,7 +1705,8 @@ pub enum PlaceBase<'tcx> {\n }\n \n /// We store the normalized type to avoid requiring normalization when reading MIR\n-#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub kind: StaticKind<'tcx>,\n@@ -1768,12 +1728,6 @@ pub enum StaticKind<'tcx> {\n     Static,\n }\n \n-impl_stable_hash_for!(struct Static<'tcx> {\n-    ty,\n-    kind,\n-    def_id\n-});\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub enum ProjectionElem<V, T> {"}, {"sha": "785b4122d087359eee25fab69bd84cdc02c73ccf", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -79,7 +79,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, Default, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<GenericArg<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n@@ -114,7 +114,7 @@ impl<'tcx> DropckOutlivesResult<'tcx> {\n \n /// A set of constraints that need to be satisfied in order for\n /// a type to be valid for destruction.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct DtorckConstraint<'tcx> {\n     /// Types that are required to be alive in order for this\n     /// type to be valid for destruction.\n@@ -152,15 +152,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n         result\n     }\n }\n-impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n-    kinds, overflows\n-});\n-\n-impl_stable_hash_for!(struct DtorckConstraint<'tcx> {\n-    outlives,\n-    dtorck_types,\n-    overflows\n-});\n \n /// This returns true if the type `ty` is \"trivial\" for\n /// dropck-outlives -- that is, if it doesn't require any types to"}, {"sha": "be846287e290c1a5a4b993efb3beacda8ba7fe40", "filename": "src/librustc/traits/query/method_autoderef.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::sync::Lrc;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::Ty;\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct CandidateStep<'tcx> {\n     pub self_ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,\n     pub autoderefs: usize,\n@@ -15,7 +15,7 @@ pub struct CandidateStep<'tcx> {\n     pub unsize: bool,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct MethodAutoderefStepsResult<'tcx> {\n     /// The valid autoderef steps that could be find.\n     pub steps: Lrc<Vec<CandidateStep<'tcx>>>,\n@@ -26,20 +26,8 @@ pub struct MethodAutoderefStepsResult<'tcx> {\n     pub reached_recursion_limit: bool,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct MethodAutoderefBadTy<'tcx> {\n     pub reached_raw_pointer: bool,\n     pub ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,\n }\n-\n-impl_stable_hash_for!(struct MethodAutoderefBadTy<'tcx> {\n-    reached_raw_pointer, ty\n-});\n-\n-impl_stable_hash_for!(struct MethodAutoderefStepsResult<'tcx> {\n-    reached_recursion_limit, steps, opt_bad_ty\n-});\n-\n-impl_stable_hash_for!(struct CandidateStep<'tcx> {\n-    self_ty, autoderefs, from_unsafe_deref, unsize\n-});"}, {"sha": "09c7f45c22b0a32f364de4dcda1b3b658950f4e3", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bc3f05f54915a962620bfcb8dff7aff0d849f5/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n }\n \n /// Result from the `normalize_projection_ty` query.\n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct NormalizationResult<'tcx> {\n     /// Result of normalization.\n     pub normalized_ty: Ty<'tcx>,\n@@ -193,7 +193,3 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         constant.eval(self.infcx.tcx, self.param_env)\n     }\n }\n-\n-impl_stable_hash_for!(struct NormalizationResult<'tcx> {\n-    normalized_ty\n-});"}]}