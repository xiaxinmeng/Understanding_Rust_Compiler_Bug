{"sha": "dae90c195989b09475b6c0225a3018cbd7afa587", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZTkwYzE5NTk4OWIwOTQ3NWI2YzAyMjVhMzAxOGNiZDdhZmE1ODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T03:39:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T03:39:04Z"}, "message": "Auto merge of #71716 - alexcrichton:bitcode-follow-up, r=nnethercote\n\nRename `bitcode-in-rlib` option to `embed-bitcode`\n\nThis commit finishes work first pioneered in #70458 and started in #71528.\nThe `-C bitcode-in-rlib` option, which has not yet reached stable, is\nrenamed to `-C embed-bitcode` since that more accurately reflects what\nit does now anyway. Various tests and such are updated along the way as\nwell.\n\nThis'll also need to be backported to the beta channel to ensure we\ndon't accidentally stabilize `-Cbitcode-in-rlib` as well.", "tree": {"sha": "635fbd4dd6c04108732b55e2be01cbff64df0046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635fbd4dd6c04108732b55e2be01cbff64df0046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae90c195989b09475b6c0225a3018cbd7afa587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae90c195989b09475b6c0225a3018cbd7afa587", "html_url": "https://github.com/rust-lang/rust/commit/dae90c195989b09475b6c0225a3018cbd7afa587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae90c195989b09475b6c0225a3018cbd7afa587/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ae74d0d0e864bfc5c809e47af3a903d3fc2cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ae74d0d0e864bfc5c809e47af3a903d3fc2cf1", "html_url": "https://github.com/rust-lang/rust/commit/19ae74d0d0e864bfc5c809e47af3a903d3fc2cf1"}, {"sha": "e1832fa4e4700a5f8935ac3e88f7688a15e17df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1832fa4e4700a5f8935ac3e88f7688a15e17df0", "html_url": "https://github.com/rust-lang/rust/commit/e1832fa4e4700a5f8935ac3e88f7688a15e17df0"}], "stats": {"total": 87, "additions": 39, "deletions": 48}, "files": [{"sha": "0a193d91244a55592fa297a2ac58fa5212ea27ec", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -232,16 +232,16 @@ pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, ca\n         }\n     }\n \n-    // By default, rustc uses `-Cbitcode-in-rlib=yes`, and Cargo overrides that\n-    // with `-Cbitcode-in-rlib=no` for non-LTO builds. However, libstd must be\n+    // By default, rustc uses `-Cembed-bitcode=yes`, and Cargo overrides that\n+    // with `-Cembed-bitcode=no` for non-LTO builds. However, libstd must be\n     // built with bitcode so that the produced rlibs can be used for both LTO\n     // builds (which use bitcode) and non-LTO builds (which use object code).\n     // So we override the override here!\n     //\n     // But we don't bother for the stage 0 compiler because it's never used\n     // with LTO.\n     if stage >= 1 {\n-        cargo.rustflag(\"-Cbitcode-in-rlib=yes\");\n+        cargo.rustflag(\"-Cembed-bitcode=yes\");\n     }\n }\n "}, {"sha": "08b5ab108170421b49b4125aeb0a4947636b7aa8", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -7,32 +7,6 @@ a version of this list for your exact compiler by running `rustc -C help`.\n \n This option is deprecated and does nothing.\n \n-## bitcode-in-rlib\n-\n-This flag controls whether or not the compiler puts LLVM bitcode into generated\n-rlibs. It takes one of the following values:\n-\n-* `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n-* `n`, `no`, or `off`: omit bitcode from rlibs.\n-\n-LLVM bitcode is only needed when link-time optimization (LTO) is being\n-performed, but it is enabled by default for backwards compatibility reasons.\n-\n-The use of `-C bitcode-in-rlib=no` can significantly improve compile times and\n-reduce generated file sizes. For these reasons, Cargo uses `-C\n-bitcode-in-rlib=no` whenever possible. Likewise, if you are building directly\n-with `rustc` we recommend using `-C bitcode-in-rlib=no` whenever you are not\n-using LTO.\n-\n-If combined with `-C lto`, `-C bitcode-in-rlib=no` will cause `rustc` to abort\n-at start-up, because the combination is invalid.\n-\n-> **Note**: the implementation of this flag today is to enable the\n-> `-Zembed-bitcode` option. When bitcode is embedded into an rlib then all\n-> object files within the rlib will have a special section (typically named\n-> `.llvmbc`, depends on the platform though) which contains LLVM bytecode. This\n-> section of the object file will not appear in the final linked artifact.\n-\n ## code-model\n \n This option lets you choose which code model to use.\n@@ -86,6 +60,26 @@ It takes one of the following values:\n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n \n+## embed-bitcode\n+\n+This flag controls whether or not the compiler puts LLVM bitcode into generated\n+rlibs. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n+* `n`, `no`, or `off`: omit bitcode from rlibs.\n+\n+LLVM bitcode is only needed when link-time optimization (LTO) is being\n+performed, but it is enabled by default for backwards compatibility reasons.\n+\n+The use of `-C embed-bitcode=no` can significantly improve compile times and\n+reduce generated file sizes. For these reasons, Cargo uses `-C\n+embed-bitcode=no` whenever possible. Likewise, if you are building directly\n+with `rustc` we recommend using `-C embed-bitcode=no` whenever you are not\n+using LTO.\n+\n+If combined with `-C lto`, `-C embed-bitcode=no` will cause `rustc` to abort\n+at start-up, because the combination is invalid.\n+\n ## extra-filename\n \n This option allows you to put extra data in each output filename. It takes a\n@@ -355,21 +349,21 @@ Supported values for this option are:\n - `static` - non-relocatable code, machine instructions may use absolute addressing modes.\n \n - `pic` - fully relocatable position independent code,\n-machine instructions need to use relative addressing modes.  \n+machine instructions need to use relative addressing modes.  \\\n Equivalent to the \"uppercase\" `-fPIC` or `-fPIE` options in other compilers,\n-depending on the produced crate types.  \n+depending on the produced crate types.  \\\n This is the default model for majority of supported targets.\n \n #### Special relocation models\n \n-- `dynamic-no-pic` - relocatable external references, non-relocatable code.  \n-Only makes sense on Darwin and is rarely used.  \n+- `dynamic-no-pic` - relocatable external references, non-relocatable code.  \\\n+Only makes sense on Darwin and is rarely used.  \\\n If StackOverflow tells you to use this as an opt-out of PIC or PIE, don't believe it,\n use `-C relocation-model=static` instead.\n - `ropi`, `rwpi` and `ropi-rwpi` - relocatable code and read-only data, relocatable read-write data,\n-and combination of both, respectively.  \n+and combination of both, respectively.  \\\n Only makes sense for certain embedded ARM targets.\n-- `default` - relocation model default to the current target.  \n+- `default` - relocation model default to the current target.  \\\n Only makes sense as an override for some other explicitly specified relocation model\n previously set on the command line.\n \n@@ -380,7 +374,7 @@ Supported values can also be discovered by running `rustc --print relocation-mod\n In addition to codegen effects, `relocation-model` has effects during linking.\n \n If the relocation model is `pic` and the current target supports position-independent executables\n-(PIE), the linker will be instructed (`-pie`) to produce one.  \n+(PIE), the linker will be instructed (`-pie`) to produce one.  \\\n If the target doesn't support both position-independent and statically linked executables,\n then `-C target-feature=+crt-static` \"wins\" over `-C relocation-model=pic`,\n and the linker is instructed (`-static`) to produce a statically linked"}, {"sha": "31bf064ad917981e672f75916532b49f94041f6f", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -148,7 +148,7 @@ impl ModuleConfig {\n             || sess.opts.cg.linker_plugin_lto.enabled()\n         {\n             EmitObj::Bitcode\n-        } else if sess.opts.debugging_opts.embed_bitcode || need_crate_bitcode_for_rlib(sess) {\n+        } else if need_crate_bitcode_for_rlib(sess) {\n             let force_full = need_crate_bitcode_for_rlib(sess);\n             match sess.opts.optimize {\n                 config::OptLevel::No | config::OptLevel::Less if !force_full => {\n@@ -374,7 +374,7 @@ pub struct CompiledModules {\n }\n \n fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n-    sess.opts.cg.bitcode_in_rlib\n+    sess.opts.cg.embed_bitcode\n         && sess.crate_types.borrow().contains(&config::CrateType::Rlib)\n         && sess.opts.output_types.contains_key(&OutputType::Exe)\n }"}, {"sha": "0a200426e38ea88d8d0ed8c2712ade7899d24984", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -410,10 +410,10 @@ fn test_codegen_options_tracking_hash() {\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n-    tracked!(bitcode_in_rlib, false);\n     tracked!(code_model, Some(String::from(\"code model\")));\n     tracked!(debug_assertions, Some(true));\n     tracked!(debuginfo, 0xdeadbeef);\n+    tracked!(embed_bitcode, false);\n     tracked!(force_frame_pointers, Some(false));\n     tracked!(inline_threshold, Some(0xf007ba11));\n     tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n@@ -529,7 +529,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);\n     tracked!(dual_proc_macros, true);\n-    tracked!(embed_bitcode, true);\n     tracked!(fewer_names, true);\n     tracked!(force_overflow_checks, Some(true));\n     tracked!(force_unstable_if_unmarked, true);"}, {"sha": "8a690621a6e8f044df921bca724fe27d574f15ba", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -1677,12 +1677,12 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n-    if !cg.bitcode_in_rlib {\n+    if !cg.embed_bitcode {\n         match cg.lto {\n             LtoCli::No | LtoCli::Unspecified => {}\n             LtoCli::Yes | LtoCli::NoParam | LtoCli::Thin | LtoCli::Fat => early_error(\n                 error_format,\n-                \"options `-C bitcode-in-rlib=no` and `-C lto` are incompatible\",\n+                \"options `-C embed-bitcode=no` and `-C lto` are incompatible\",\n             ),\n         }\n     }"}, {"sha": "b03fc00d93db28a879e475cbce5faf55858aa0a0", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -651,8 +651,6 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n \n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n-    bitcode_in_rlib: bool = (true, parse_bool, [TRACKED],\n-        \"emit bitcode in rlibs (default: yes)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n@@ -664,6 +662,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         2 = full debug info with variable and type information; default: 0)\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n         \"allow the linker to link its default libraries (default: no)\"),\n+    embed_bitcode: bool = (true, parse_bool, [TRACKED],\n+        \"emit bitcode in rlibs (default: yes)\"),\n     extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n         \"extra data to put in each output filename\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -806,8 +806,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"exclude the pass number when dumping MIR (used in tests) (default: no)\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n         \"in addition to `.mir` files, create graphviz `.dot` files (default: no)\"),\n-    embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-        \"embed LLVM bitcode in object files (default: no)\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emit a section containing stack size metadata (default: no)\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],"}, {"sha": "f381240e70a44d037c40208ffa95a74d304456b9", "filename": "src/test/ui/lto-and-no-bitcode-in-rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.rs?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -1,3 +1,3 @@\n-// compile-flags: -C lto -C bitcode-in-rlib=no\n+// compile-flags: -C lto -C embed-bitcode=no\n \n fn main() {}"}, {"sha": "11e370e914c8e51a11d6cccffd123652e5da1b4c", "filename": "src/test/ui/lto-and-no-bitcode-in-rlib.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae90c195989b09475b6c0225a3018cbd7afa587/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.stderr?ref=dae90c195989b09475b6c0225a3018cbd7afa587", "patch": "@@ -1,2 +1,2 @@\n-error: options `-C bitcode-in-rlib=no` and `-C lto` are incompatible\n+error: options `-C embed-bitcode=no` and `-C lto` are incompatible\n "}]}