{"sha": "016d92d6ed5ae8a3785b65aa300768abbc26f818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmQ5MmQ2ZWQ1YWU4YTM3ODViNjVhYTMwMDc2OGFiYmMyNmY4MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-10T14:26:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-10T14:26:31Z"}, "message": "Auto merge of #3733 - Zoxc:rustc-interface, r=oli-obk\n\nUse the new rustc interface\n\nShows the changes required to compile with https://github.com/rust-lang/rust/pull/56732", "tree": {"sha": "7eff161d9fcbeb499629b691853e54d2fa9f6983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eff161d9fcbeb499629b691853e54d2fa9f6983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016d92d6ed5ae8a3785b65aa300768abbc26f818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016d92d6ed5ae8a3785b65aa300768abbc26f818", "html_url": "https://github.com/rust-lang/rust/commit/016d92d6ed5ae8a3785b65aa300768abbc26f818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016d92d6ed5ae8a3785b65aa300768abbc26f818/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9308df75076ae6f1617e09abddafd12ca9d28abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9308df75076ae6f1617e09abddafd12ca9d28abb", "html_url": "https://github.com/rust-lang/rust/commit/9308df75076ae6f1617e09abddafd12ca9d28abb"}, {"sha": "1388f2488e09ae30a32eaf40f83d64c766ffa1e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1388f2488e09ae30a32eaf40f83d64c766ffa1e6", "html_url": "https://github.com/rust-lang/rust/commit/1388f2488e09ae30a32eaf40f83d64c766ffa1e6"}], "stats": {"total": 117, "additions": 63, "deletions": 54}, "files": [{"sha": "e592565365555575cf88c8f1f068f463d324b83d", "filename": "src/driver.rs", "status": "modified", "additions": 63, "deletions": 54, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/016d92d6ed5ae8a3785b65aa300768abbc26f818/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016d92d6ed5ae8a3785b65aa300768abbc26f818/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=016d92d6ed5ae8a3785b65aa300768abbc26f818", "patch": "@@ -8,10 +8,11 @@\n #[allow(unused_extern_crates)]\n extern crate rustc_driver;\n #[allow(unused_extern_crates)]\n+extern crate rustc_interface;\n+#[allow(unused_extern_crates)]\n extern crate rustc_plugin;\n-use self::rustc_driver::{driver::CompileController, Compilation};\n \n-use std::convert::TryInto;\n+use rustc_interface::interface;\n use std::path::Path;\n use std::process::{exit, Command};\n \n@@ -60,10 +61,62 @@ fn test_arg_value() {\n }\n \n #[allow(clippy::too_many_lines)]\n+\n+struct ClippyCallbacks;\n+\n+impl rustc_driver::Callbacks for ClippyCallbacks {\n+    fn after_parsing(&mut self, compiler: &interface::Compiler) -> bool {\n+        let sess = compiler.session();\n+        let mut registry = rustc_plugin::registry::Registry::new(\n+            sess,\n+            compiler\n+                .parse()\n+                .expect(\n+                    \"at this compilation stage \\\n+                     the crate must be parsed\",\n+                )\n+                .peek()\n+                .span,\n+        );\n+        registry.args_hidden = Some(Vec::new());\n+\n+        let conf = clippy_lints::read_conf(&registry);\n+        clippy_lints::register_plugins(&mut registry, &conf);\n+\n+        let rustc_plugin::registry::Registry {\n+            early_lint_passes,\n+            late_lint_passes,\n+            lint_groups,\n+            llvm_passes,\n+            attributes,\n+            ..\n+        } = registry;\n+        let mut ls = sess.lint_store.borrow_mut();\n+        for pass in early_lint_passes {\n+            ls.register_early_pass(Some(sess), true, false, pass);\n+        }\n+        for pass in late_lint_passes {\n+            ls.register_late_pass(Some(sess), true, pass);\n+        }\n+\n+        for (name, (to, deprecated_name)) in lint_groups {\n+            ls.register_group(Some(sess), true, name, deprecated_name, to);\n+        }\n+        clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n+        clippy_lints::register_renamed(&mut ls);\n+\n+        sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+        sess.plugin_attributes.borrow_mut().extend(attributes);\n+\n+        // Continue execution\n+        true\n+    }\n+}\n+\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     exit(\n-        rustc_driver::run(move || {\n+        rustc_driver::report_ices_to_stderr_if_any(move || {\n             use std::env;\n \n             if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -144,58 +197,14 @@ pub fn main() {\n                 }\n             }\n \n-            let mut controller = CompileController::basic();\n-            if clippy_enabled {\n-                controller.after_parse.callback = Box::new(move |state| {\n-                    let mut registry = rustc_plugin::registry::Registry::new(\n-                        state.session,\n-                        state\n-                            .krate\n-                            .as_ref()\n-                            .expect(\n-                                \"at this compilation stage \\\n-                                 the crate must be parsed\",\n-                            )\n-                            .span,\n-                    );\n-                    registry.args_hidden = Some(Vec::new());\n-\n-                    let conf = clippy_lints::read_conf(&registry);\n-                    clippy_lints::register_plugins(&mut registry, &conf);\n-\n-                    let rustc_plugin::registry::Registry {\n-                        early_lint_passes,\n-                        late_lint_passes,\n-                        lint_groups,\n-                        llvm_passes,\n-                        attributes,\n-                        ..\n-                    } = registry;\n-                    let sess = &state.session;\n-                    let mut ls = sess.lint_store.borrow_mut();\n-                    for pass in early_lint_passes {\n-                        ls.register_early_pass(Some(sess), true, false, pass);\n-                    }\n-                    for pass in late_lint_passes {\n-                        ls.register_late_pass(Some(sess), true, pass);\n-                    }\n-\n-                    for (name, (to, deprecated_name)) in lint_groups {\n-                        ls.register_group(Some(sess), true, name, deprecated_name, to);\n-                    }\n-                    clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n-                    clippy_lints::register_renamed(&mut ls);\n-\n-                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-                    sess.plugin_attributes.borrow_mut().extend(attributes);\n-                });\n-            }\n-            controller.compilation_done.stop = Compilation::Stop;\n-\n+            let mut clippy = ClippyCallbacks;\n+            let mut default = rustc_driver::DefaultCallbacks;\n+            let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n+                if clippy_enabled { &mut clippy } else { &mut default };\n             let args = args;\n-            rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n+            rustc_driver::run_compiler(&args, callbacks, None, None)\n         })\n-        .try_into()\n-        .expect(\"exit code too large\"),\n+        .and_then(|result| result)\n+        .is_err() as i32,\n     )\n }"}]}