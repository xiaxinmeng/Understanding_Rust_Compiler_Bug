{"sha": "c75f21008de0679d15ee412043dacd14cee0cdb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWYyMTAwOGRlMDY3OWQxNWVlNDEyMDQzZGFjZDE0Y2VlMGNkYjQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-16T16:26:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-16T16:26:21Z"}, "message": "Rollup merge of #78364 - XAMPPRocky:relnote-1.48.0, r=pietroalbini\n\nUpdate RELEASES.md for 1.48.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/relnote-1.48.0/RELEASES.md)\n\nr? `@Mark-Simulacrum`\ncc `@rust-lang/release`", "tree": {"sha": "26174a5d2f4ac14a42ac46b1ccb14938fc0cd49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26174a5d2f4ac14a42ac46b1ccb14938fc0cd49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75f21008de0679d15ee412043dacd14cee0cdb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsqguCRBK7hj4Ov3rIwAAdHIIACbFJV7lbOLi4FhLDYvn2le1\nfzJAAAeROWit1zyTNFzSeZf9ZZ16toYAk480hUDaB/HZYej3NCmUyP5lseEx5Dlh\nfUNovCK3/wuXsCrnDlJ6IfUL+UPLL/uEZuOOMnEEX6tuVpASoFEYV5iLh9WDjLU0\nkCG/ioVewNTyVlF9DMs15Yi0jabbB7nnqYNcfv0cBNsnco5n6sfWqww8xsTsGghE\ncgVDa16tEqG+0aHHDM8CL1MPln6JHP8MGELeOnmfnPTs4Tk9S5ZlumM0yWGKZk0i\nOXQdBFw1+WDIEDEFQ3D1L5wQFVJ+/9JyVPMPNKXnZmNyGfm3Bn4eyrxkdID+TZo=\n=qTS/\n-----END PGP SIGNATURE-----\n", "payload": "tree 26174a5d2f4ac14a42ac46b1ccb14938fc0cd49e\nparent 5bbf75da78393343b155c8bfcf1ef9c0234d9ab1\nparent a81a64e42cffec5d126e9afe092f51f822ac4ff1\nauthor Mara Bos <m-ou.se@m-ou.se> 1605543981 +0100\ncommitter GitHub <noreply@github.com> 1605543981 +0100\n\nRollup merge of #78364 - XAMPPRocky:relnote-1.48.0, r=pietroalbini\n\nUpdate RELEASES.md for 1.48.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/relnote-1.48.0/RELEASES.md)\n\nr? `@Mark-Simulacrum`\ncc `@rust-lang/release`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75f21008de0679d15ee412043dacd14cee0cdb4", "html_url": "https://github.com/rust-lang/rust/commit/c75f21008de0679d15ee412043dacd14cee0cdb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75f21008de0679d15ee412043dacd14cee0cdb4/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "html_url": "https://github.com/rust-lang/rust/commit/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1"}, {"sha": "a81a64e42cffec5d126e9afe092f51f822ac4ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81a64e42cffec5d126e9afe092f51f822ac4ff1", "html_url": "https://github.com/rust-lang/rust/commit/a81a64e42cffec5d126e9afe092f51f822ac4ff1"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "9fd796fd775bf995f9d8a624704a36f1bbbabe7d", "filename": "RELEASES.md", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c75f21008de0679d15ee412043dacd14cee0cdb4/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/c75f21008de0679d15ee412043dacd14cee0cdb4/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=c75f21008de0679d15ee412043dacd14cee0cdb4", "patch": "@@ -1,3 +1,143 @@\n+Version 1.48.0 (2020-11-19)\n+==========================\n+\n+Language\n+--------\n+\n+- [The `unsafe` keyword is now syntactically permitted on modules.][75857] This\n+  is still rejected *semantically*, but can now be parsed by procedural macros.\n+\n+Compiler\n+--------\n+- [Stabilised the `-C link-self-contained=<yes|no>` compiler flag.][76158] This tells\n+  `rustc` whether to link its own C runtime and libraries or to rely on a external \n+  linker to find them. (Supported only on `windows-gnu`, `linux-musl`, and `wasi` platforms.)\n+- [You can now use `-C target-feature=+crt-static` on `linux-gnu` targets.][77386]\n+  Note: If you're using cargo you must explicitly pass the `--target` flag.\n+- [Added tier 2\\* support for `aarch64-unknown-linux-musl`.][76420]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+- [`io::Write` is now implemented for `&ChildStdin` `&Sink`, `&Stdout`,\n+  and `&Stderr`.][76275]\n+- [All arrays of any length now implement `TryFrom<Vec<T>>`.][76310]\n+- [The `matches!` macro now supports having a trailing comma.][74880]\n+- [`Vec<A>` now implements `PartialEq<[B]>` where `A: PartialEq<B>`.][74194]\n+- [The `RefCell::{replace, replace_with, clone}` methods now all use `#[track_caller]`.][77055]\n+\n+Stabilized APIs\n+---------------\n+- [`slice::as_ptr_range`]\n+- [`slice::as_mut_ptr_range`]\n+- [`VecDeque::make_contiguous`]\n+- [`future::pending`]\n+- [`future::ready`]\n+\n+The following previously stable methods are now `const fn`'s:\n+\n+- [`Option::is_some`]\n+- [`Option::is_none`]\n+- [`Option::as_ref`]\n+- [`Result::is_ok`]\n+- [`Result::is_err`]\n+- [`Result::as_ref`]\n+- [`Ordering::reverse`]\n+- [`Ordering::then`]\n+\n+Cargo\n+-----\n+\n+Rustdoc\n+-------\n+- [You can now link to items in `rustdoc` using the intra-doc link\n+  syntax.][74430] E.g. ``/// Uses [`std::future`]`` will automatically generate\n+  a link to `std::future`'s documentation. See [\"Linking to items by\n+  name\"][intradoc-links] for more information.\n+- [You can now specify `#[doc(alias = \"<alias>\")]` on items to add search aliases\n+  when searching through `rustdoc`'s UI.][75740]\n+\n+Compatibility Notes\n+-------------------\n+- [Promotion of references to `'static` lifetime inside `const fn` now follows the\n+  same rules as inside a `fn` body.][75502] In particular, `&foo()` will not be\n+  promoted to `'static` lifetime any more inside `const fn`s.\n+- [Associated type bindings on trait objects are now verified to meet the bounds\n+  declared on the trait when checking that they implement the trait.][27675]\n+- [When trait bounds on associated types or opaque types are ambiguous, the\n+  compiler no longer makes an arbitrary choice on which bound to use.][54121]\n+- [Fixed recursive nonterminals not being expanded in macros during\n+  pretty-print/reparse check.][77153] This may cause errors if your macro wasn't\n+  correctly handling recursive nonterminal tokens.\n+- [`&mut` references to non zero-sized types are no longer promoted.][75585]\n+- [`rustc` will now warn if you use attributes like `#[link_name]` or `#[cold]`\n+  in places where they have no effect.][73461]\n+- [Updated `_mm256_extract_epi8` and `_mm256_extract_epi16` signatures in\n+  `arch::{x86, x86_64}` to return `i32` to match the vendor signatures.][73166]\n+- [`mem::uninitialized` will now panic if any inner types inside a struct or enum\n+  disallow zero-initialization.][71274]\n+- [`#[target_feature]` will now error if used in a place where it has no effect.][78143]\n+- [Foreign exceptions are now caught by `catch_unwind` and will cause an abort.][70212]\n+  Note: This behaviour is not guaranteed and is still considered undefined behaviour,\n+  see the [`catch_unwind`] documentation for further information.\n+  \n+\n+\n+Internal Only\n+-------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc and\n+related tools.\n+\n+- [Building `rustc` from source now uses `ninja` by default over `make`.][74922]\n+  You can continue building with `make` by setting `ninja=false` in\n+  your `config.toml`.\n+- [cg_llvm: `fewer_names` in `uncached_llvm_type`][76030]\n+- [Made `ensure_sufficient_stack()` non-generic][76680]\n+\n+[78143]: https://github.com/rust-lang/rust/issues/78143\n+[76680]: https://github.com/rust-lang/rust/pull/76680/\n+[76030]: https://github.com/rust-lang/rust/pull/76030/\n+[70212]: https://github.com/rust-lang/rust/pull/70212/\n+[27675]: https://github.com/rust-lang/rust/issues/27675/\n+[54121]: https://github.com/rust-lang/rust/issues/54121/  \n+[71274]: https://github.com/rust-lang/rust/pull/71274/\n+[77386]: https://github.com/rust-lang/rust/pull/77386/\n+[77153]: https://github.com/rust-lang/rust/pull/77153/\n+[77055]: https://github.com/rust-lang/rust/pull/77055/\n+[76275]: https://github.com/rust-lang/rust/pull/76275/\n+[76310]: https://github.com/rust-lang/rust/pull/76310/\n+[76420]: https://github.com/rust-lang/rust/pull/76420/\n+[76158]: https://github.com/rust-lang/rust/pull/76158/\n+[75857]: https://github.com/rust-lang/rust/pull/75857/\n+[75585]: https://github.com/rust-lang/rust/pull/75585/\n+[75740]: https://github.com/rust-lang/rust/pull/75740/\n+[75502]: https://github.com/rust-lang/rust/pull/75502/\n+[74880]: https://github.com/rust-lang/rust/pull/74880/\n+[74922]: https://github.com/rust-lang/rust/pull/74922/\n+[74430]: https://github.com/rust-lang/rust/pull/74430/\n+[74194]: https://github.com/rust-lang/rust/pull/74194/\n+[73461]: https://github.com/rust-lang/rust/pull/73461/\n+[73166]: https://github.com/rust-lang/rust/pull/73166/\n+[intradoc-links]: https://doc.rust-lang.org/rustdoc/linking-to-items-by-name.html\n+[`catch_unwind`]: https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\n+[`Option::is_some`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some\n+[`Option::is_none`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none\n+[`Option::as_ref`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\n+[`Result::is_ok`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok\n+[`Result::is_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err\n+[`Result::as_ref`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.as_ref\n+[`Ordering::reverse`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.reverse\n+[`Ordering::then`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\n+[`slice::as_ptr_range`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr_range\n+[`slice::as_mut_ptr_range`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr_range\n+[`VecDeque::make_contiguous`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.make_contiguous\n+[`future::pending`]: https://doc.rust-lang.org/std/future/fn.pending.html\n+[`future::ready`]: https://doc.rust-lang.org/std/future/fn.ready.html\n+\n+\n Version 1.47.0 (2020-10-08)\n ==========================\n \n@@ -90,6 +230,7 @@ Compatibility Notes\n \n Internal Only\n --------\n+\n - [Improved default settings for bootstrapping in `x.py`.][73964] You can read details about this change in the [\"Changes to `x.py` defaults\"](https://blog.rust-lang.org/inside-rust/2020/08/30/changes-to-x-py-defaults.html) post on the Inside Rust blog.\n \n [1.47.0-cfg]: https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard"}]}