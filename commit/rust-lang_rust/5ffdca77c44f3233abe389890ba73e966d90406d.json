{"sha": "5ffdca77c44f3233abe389890ba73e966d90406d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZmRjYTc3YzQ0ZjMyMzNhYmUzODk4OTBiYTczZTk2NmQ5MDQwNmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-26T16:56:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-26T16:56:45Z"}, "message": "Rollup merge of #62828 - nikic:fadd-mul-reductions, r=eddyb\n\nRemove vector fadd/fmul reduction workarounds\n\nThe bugs that this was working around have been fixed in LLVM 9.\n\nr? @gnzlbg", "tree": {"sha": "344be2baa95685490075cd8589764deb7ecb329e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344be2baa95685490075cd8589764deb7ecb329e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffdca77c44f3233abe389890ba73e966d90406d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOzDNCRBK7hj4Ov3rIwAAdHIIAA3gI0J1I+IEq5AvjDbMz9i9\n3T0YpjkcPU1yUDjTmScNa/aek53D1/an1Jh9xPObIsbUEQgRZgFDs445h6+tZGNP\nA8rru+1zFwIByZNXOoPYFe5GuYg2MJCMmrTSvEHKmwKRcy96totqMzzwCmJmpJ8v\n/A3e54wwMDcL4ac5JjgMBktQKB8ZnyTIyqJ41N4yOl5EzCvXcNSg+QixKZFL0MIM\nCj4S8btcBackErgg0lLFYox9m3rGeEfkw+w+lB0SvtfYJFo6w9R6Us7zGYuHbWxb\n+eqlvsEdXI7HsM3luBYGdHfoF3kMsPuqyHeJOuJvxyPb+iRL+xiL2qW1VenZWl4=\n=P4b/\n-----END PGP SIGNATURE-----\n", "payload": "tree 344be2baa95685490075cd8589764deb7ecb329e\nparent 632ce7402f01cad14d6039f3102134978ab25e01\nparent 6fae7db65d5f772cfbf116fbb9e5944447725289\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564160205 +0200\ncommitter GitHub <noreply@github.com> 1564160205 +0200\n\nRollup merge of #62828 - nikic:fadd-mul-reductions, r=eddyb\n\nRemove vector fadd/fmul reduction workarounds\n\nThe bugs that this was working around have been fixed in LLVM 9.\n\nr? @gnzlbg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffdca77c44f3233abe389890ba73e966d90406d", "html_url": "https://github.com/rust-lang/rust/commit/5ffdca77c44f3233abe389890ba73e966d90406d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffdca77c44f3233abe389890ba73e966d90406d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632ce7402f01cad14d6039f3102134978ab25e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/632ce7402f01cad14d6039f3102134978ab25e01", "html_url": "https://github.com/rust-lang/rust/commit/632ce7402f01cad14d6039f3102134978ab25e01"}, {"sha": "6fae7db65d5f772cfbf116fbb9e5944447725289", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fae7db65d5f772cfbf116fbb9e5944447725289", "html_url": "https://github.com/rust-lang/rust/commit/6fae7db65d5f772cfbf116fbb9e5944447725289"}], "stats": {"total": 139, "additions": 37, "deletions": 102}, "files": [{"sha": "894e5c2fd3d93049d53f513039659813952b593b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -1153,21 +1153,21 @@ impl Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    pub fn vector_reduce_fadd(&mut self, acc: &'ll Value, src: &'ll Value) -> &'ll Value {\n+        unsafe { llvm::LLVMRustBuildVectorReduceFAdd(self.llbuilder, acc, src) }\n+    }\n+    pub fn vector_reduce_fmul(&mut self, acc: &'ll Value, src: &'ll Value) -> &'ll Value {\n+        unsafe { llvm::LLVMRustBuildVectorReduceFMul(self.llbuilder, acc, src) }\n+    }\n     pub fn vector_reduce_fadd_fast(&mut self, acc: &'ll Value, src: &'ll Value) -> &'ll Value {\n         unsafe {\n-            // FIXME: add a non-fast math version once\n-            // https://bugs.llvm.org/show_bug.cgi?id=36732\n-            // is fixed.\n             let instr = llvm::LLVMRustBuildVectorReduceFAdd(self.llbuilder, acc, src);\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n     }\n     pub fn vector_reduce_fmul_fast(&mut self, acc: &'ll Value, src: &'ll Value) -> &'ll Value {\n         unsafe {\n-            // FIXME: add a non-fast math version once\n-            // https://bugs.llvm.org/show_bug.cgi?id=36732\n-            // is fixed.\n             let instr = llvm::LLVMRustBuildVectorReduceFMul(self.llbuilder, acc, src);\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr"}, {"sha": "f00624f3811f189fc91f1780f7bd9f1996052a20", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -166,25 +166,6 @@ impl CodegenCx<'ll, 'tcx> {\n             r\n         }\n     }\n-\n-    pub fn const_get_real(&self, v: &'ll Value) -> Option<(f64, bool)> {\n-        unsafe {\n-            if self.is_const_real(v) {\n-                let mut loses_info: llvm::Bool = 0;\n-                let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info);\n-                let loses_info = if loses_info == 1 { true } else { false };\n-                Some((r, loses_info))\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-\n-    fn is_const_real(&self, v: &'ll Value) -> bool {\n-        unsafe {\n-            llvm::LLVMIsAConstantFP(v).is_some()\n-        }\n-    }\n }\n \n impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {"}, {"sha": "44b3eff2ac5c9d91a8e3c5aba4f279b13e9c600a", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -1640,29 +1640,11 @@ fn generic_simd_intrinsic(\n                         }\n                     },\n                     ty::Float(f) => {\n-                        // ordered arithmetic reductions take an accumulator\n                         let acc = if $ordered {\n-                            let acc = args[1].immediate();\n-                            // FIXME: https://bugs.llvm.org/show_bug.cgi?id=36734\n-                            // * if the accumulator of the fadd isn't 0, incorrect\n-                            //   code is generated\n-                            // * if the accumulator of the fmul isn't 1, incorrect\n-                            //   code is generated\n-                            match bx.const_get_real(acc) {\n-                                None => return_error!(\"accumulator of {} is not a constant\", $name),\n-                                Some((v, loses_info)) => {\n-                                    if $name.contains(\"mul\") && v != 1.0_f64 {\n-                                        return_error!(\"accumulator of {} is not 1.0\", $name);\n-                                    } else if $name.contains(\"add\") && v != 0.0_f64 {\n-                                        return_error!(\"accumulator of {} is not 0.0\", $name);\n-                                    } else if loses_info {\n-                                        return_error!(\"accumulator of {} loses information\", $name);\n-                                    }\n-                                }\n-                            }\n-                            acc\n+                            // ordered arithmetic reductions take an accumulator\n+                            args[1].immediate()\n                         } else {\n-                            // unordered arithmetic reductions do not:\n+                            // unordered arithmetic reductions use the identity accumulator\n                             let identity_acc = if $name.contains(\"mul\") { 1.0 } else { 0.0 };\n                             match f.bit_width() {\n                                 32 => bx.const_real(bx.type_f32(), identity_acc),\n@@ -1688,8 +1670,8 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         }\n     }\n \n-    arith_red!(\"simd_reduce_add_ordered\": vector_reduce_add, vector_reduce_fadd_fast, true);\n-    arith_red!(\"simd_reduce_mul_ordered\": vector_reduce_mul, vector_reduce_fmul_fast, true);\n+    arith_red!(\"simd_reduce_add_ordered\": vector_reduce_add, vector_reduce_fadd, true);\n+    arith_red!(\"simd_reduce_mul_ordered\": vector_reduce_mul, vector_reduce_fmul, true);\n     arith_red!(\"simd_reduce_add_unordered\": vector_reduce_add, vector_reduce_fadd_fast, false);\n     arith_red!(\"simd_reduce_mul_unordered\": vector_reduce_mul, vector_reduce_fmul_fast, false);\n "}, {"sha": "8c6ea00eb8c872646147e37257e4c20ab66a029c", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -719,7 +719,6 @@ extern \"C\" {\n     pub fn LLVMConstIntGetZExtValue(ConstantVal: &Value) -> c_ulonglong;\n     pub fn LLVMRustConstInt128Get(ConstantVal: &Value, SExt: bool,\n                                   high: &mut u64, low: &mut u64) -> bool;\n-    pub fn LLVMConstRealGetDouble (ConstantVal: &Value, losesInfo: &mut Bool) -> f64;\n \n \n     // Operations on composite constants\n@@ -1663,7 +1662,6 @@ extern \"C\" {\n     pub fn LLVMRustWriteValueToString(value_ref: &Value, s: &RustString);\n \n     pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&Value>;\n-    pub fn LLVMIsAConstantFP(value_ref: &Value) -> Option<&Value>;\n \n     pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;"}, {"sha": "4195444a73f671ba607ae9c57e25dd9014b20b75", "filename": "src/test/run-pass/simd/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -2,7 +2,7 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n-// ignore-aarch64 FIXME: https://github.com/rust-lang/rust/issues/54510\n+// min-system-llvm-version: 9.0\n \n // Test that the simd_reduce_{op} intrinsics produce the correct results.\n \n@@ -124,14 +124,14 @@ fn main() {\n         assert_eq!(r, 6_f32);\n         let r: f32 = simd_reduce_mul_unordered(x);\n         assert_eq!(r, -24_f32);\n-        // FIXME: only works correctly for accumulator, 0:\n-        // https://bugs.llvm.org/show_bug.cgi?id=36734\n         let r: f32 = simd_reduce_add_ordered(x, 0.);\n         assert_eq!(r, 6_f32);\n-        // FIXME: only works correctly for accumulator, 1:\n-        // https://bugs.llvm.org/show_bug.cgi?id=36734\n         let r: f32 = simd_reduce_mul_ordered(x, 1.);\n         assert_eq!(r, -24_f32);\n+        let r: f32 = simd_reduce_add_ordered(x, 1.);\n+        assert_eq!(r, 7_f32);\n+        let r: f32 = simd_reduce_mul_ordered(x, 2.);\n+        assert_eq!(r, -48_f32);\n \n         let r: f32 = simd_reduce_min(x);\n         assert_eq!(r, -2_f32);"}, {"sha": "9a6dbe9d9ab1d05be647f8fe17d30bb9fb4d853f", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.rs?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -30,13 +30,10 @@ fn main() {\n     let z = f32x4(0.0, 0.0, 0.0, 0.0);\n \n     unsafe {\n-        simd_reduce_add_ordered(z, 0_f32);\n-        simd_reduce_mul_ordered(z, 1_f32);\n-\n-        simd_reduce_add_ordered(z, 2_f32);\n-        //~^ ERROR accumulator of simd_reduce_add_ordered is not 0.0\n-        simd_reduce_mul_ordered(z, 3_f32);\n-        //~^ ERROR accumulator of simd_reduce_mul_ordered is not 1.0\n+        simd_reduce_add_ordered(z, 0);\n+        //~^ ERROR expected return type `f32` (element of input `f32x4`), found `i32`\n+        simd_reduce_mul_ordered(z, 1);\n+        //~^ ERROR expected return type `f32` (element of input `f32x4`), found `i32`\n \n         let _: f32 = simd_reduce_and(x);\n         //~^ ERROR expected return type `u32` (element of input `u32x4`), found `f32`\n@@ -56,16 +53,5 @@ fn main() {\n         //~^ ERROR unsupported simd_reduce_all from `f32x4` with element `f32` to `bool`\n         let _: bool = simd_reduce_any(z);\n         //~^ ERROR unsupported simd_reduce_any from `f32x4` with element `f32` to `bool`\n-\n-        foo(0_f32);\n     }\n }\n-\n-#[inline(never)]\n-unsafe fn foo(x: f32) {\n-    let z = f32x4(0.0, 0.0, 0.0, 0.0);\n-    simd_reduce_add_ordered(z, x);\n-    //~^ ERROR accumulator of simd_reduce_add_ordered is not a constant\n-    simd_reduce_mul_ordered(z, x);\n-    //~^ ERROR accumulator of simd_reduce_mul_ordered is not a constant\n-}"}, {"sha": "3863eeac3f3949747544a2cfe65f9633d92a51cb", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-reduction.stderr", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ffdca77c44f3233abe389890ba73e966d90406d/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.stderr?ref=5ffdca77c44f3233abe389890ba73e966d90406d", "patch": "@@ -1,74 +1,62 @@\n-error[E0511]: invalid monomorphization of `simd_reduce_add_ordered` intrinsic: accumulator of simd_reduce_add_ordered is not 0.0\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:36:9\n+error[E0511]: invalid monomorphization of `simd_reduce_add_ordered` intrinsic: expected return type `f32` (element of input `f32x4`), found `i32`\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:33:9\n    |\n-LL |         simd_reduce_add_ordered(z, 2_f32);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_reduce_add_ordered(z, 0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_reduce_mul_ordered` intrinsic: accumulator of simd_reduce_mul_ordered is not 1.0\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:38:9\n+error[E0511]: invalid monomorphization of `simd_reduce_mul_ordered` intrinsic: expected return type `f32` (element of input `f32x4`), found `i32`\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:35:9\n    |\n-LL |         simd_reduce_mul_ordered(z, 3_f32);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_reduce_mul_ordered(z, 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_and` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:41:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:38:22\n    |\n LL |         let _: f32 = simd_reduce_and(x);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_or` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:43:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:40:22\n    |\n LL |         let _: f32 = simd_reduce_or(x);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_xor` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:45:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:42:22\n    |\n LL |         let _: f32 = simd_reduce_xor(x);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_and` intrinsic: unsupported simd_reduce_and from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:48:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:45:22\n    |\n LL |         let _: f32 = simd_reduce_and(z);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_or` intrinsic: unsupported simd_reduce_or from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:50:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:47:22\n    |\n LL |         let _: f32 = simd_reduce_or(z);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_xor` intrinsic: unsupported simd_reduce_xor from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:52:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:49:22\n    |\n LL |         let _: f32 = simd_reduce_xor(z);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_all` intrinsic: unsupported simd_reduce_all from `f32x4` with element `f32` to `bool`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:55:23\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:52:23\n    |\n LL |         let _: bool = simd_reduce_all(z);\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_any` intrinsic: unsupported simd_reduce_any from `f32x4` with element `f32` to `bool`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:57:23\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:54:23\n    |\n LL |         let _: bool = simd_reduce_any(z);\n    |                       ^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_reduce_add_ordered` intrinsic: accumulator of simd_reduce_add_ordered is not a constant\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:67:5\n-   |\n-LL |     simd_reduce_add_ordered(z, x);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0511]: invalid monomorphization of `simd_reduce_mul_ordered` intrinsic: accumulator of simd_reduce_mul_ordered is not a constant\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:69:5\n-   |\n-LL |     simd_reduce_mul_ordered(z, x);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 10 previous errors\n "}]}