{"sha": "cf5246915b838b49778bc25cc68e8b1863a05362", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNTI0NjkxNWI4MzhiNDk3NzhiYzI1Y2M2OGU4YjE4NjNhMDUzNjI=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-02-28T00:44:17Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-03-06T20:50:20Z"}, "message": "Remove Item::kind, use tagged enum. Rename variants to match", "tree": {"sha": "606a806a1be24117254a8f1b78d524e33f053c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/606a806a1be24117254a8f1b78d524e33f053c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5246915b838b49778bc25cc68e8b1863a05362", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmBD6xMACgkQfsyTL4ss\ncx5CvxAAvx3dxRdH4ZMqnzqAJ03XwD+RqJMafCd/4BXJ2IkD9jchjxL8sKMkmvAx\nVgfEyHmpnUEnny9Rov7KGiElEtZSSXqtor28J758c9Tz1ewheuqhzi5+5GhpDsy8\ndcah6DCZMWA9bTStTM0n82OuY5HAQeGyISwSHD8B1t9rYjmkLOk4EYn+23FNoiqU\netXTsxgXoWgtgmBzs6UdBgRCgyUtplH4C5R3zXL0wX2JGPn9PpVbRdry70/aqrrb\nrwpU01uP60Bsfzlx+HEYZpP2bMbLJ6ez/d6ApPhG+ondQKY+Fxi9cZadLMxZouss\nEFHOAeGiXqzyLDeZ1fxB9PmxXykFL0IIhdPJxOWA187O3DaKiAfuvQ+ia4aPqcgH\njCxktaD7OMBttV1lga20Bg+en+EUA8yM+FQrvWcvs9uN6R2YLz+qv+PyGx3ovlbO\nwtlmXAQoMAdQxEE6eHHTkvx5udSJM3E0bfeFT0E1aOCOJqc2lG5DSKrKsFbP5YA+\n45f8X8txaiVkJcA7TLqN2TjJmlNUTw4z3fB9TuRwoodrYgYvwmWm6wUuwleMHTQc\nQb6/bqEHwATJvMOMFvfpj0R4NtLM1//Dg9gKqK+PHjiqYwQ9q3ves3P3BhM9yZ8P\njt0fwXXs0pPa5k/FO4p6IhzXk7oqqiQRci4Qm4ZyZFBOxFduuCI=\n=muVF\n-----END PGP SIGNATURE-----", "payload": "tree 606a806a1be24117254a8f1b78d524e33f053c90\nparent 51748a8fc77283914d4135f31b5966a407208187\nauthor Rune Tynan <runetynan@gmail.com> 1614473057 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1615063820 -0500\n\nRemove Item::kind, use tagged enum. Rename variants to match\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5246915b838b49778bc25cc68e8b1863a05362", "html_url": "https://github.com/rust-lang/rust/commit/cf5246915b838b49778bc25cc68e8b1863a05362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5246915b838b49778bc25cc68e8b1863a05362/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51748a8fc77283914d4135f31b5966a407208187", "url": "https://api.github.com/repos/rust-lang/rust/commits/51748a8fc77283914d4135f31b5966a407208187", "html_url": "https://github.com/rust-lang/rust/commit/51748a8fc77283914d4135f31b5966a407208187"}], "stats": {"total": 109, "additions": 53, "deletions": 56}, "files": [{"sha": "063d8aab1ec3e4206f1de8b5d04e3f6cd734b8c8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cf5246915b838b49778bc25cc68e8b1863a05362/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5246915b838b49778bc25cc68e8b1863a05362/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=cf5246915b838b49778bc25cc68e8b1863a05362", "patch": "@@ -23,7 +23,6 @@ use std::collections::HashSet;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n-        let item_type = ItemType::from(&item);\n         let deprecation = item.deprecation(self.tcx);\n         let clean::Item { source, name, attrs, kind, visibility, def_id } = item;\n         let inner = match *kind {\n@@ -50,7 +49,6 @@ impl JsonRenderer<'_> {\n                 .map(rustc_ast_pretty::pprust::attribute_to_string)\n                 .collect(),\n             deprecation: deprecation.map(from_deprecation),\n-            kind: item_type.into(),\n             inner,\n         })\n     }\n@@ -154,38 +152,38 @@ crate fn from_def_id(did: DefId) -> Id {\n fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Symbol>) -> ItemEnum {\n     use clean::ItemKind::*;\n     match item {\n-        ModuleItem(m) => ItemEnum::ModuleItem(m.into()),\n-        ImportItem(i) => ItemEnum::ImportItem(i.into()),\n-        StructItem(s) => ItemEnum::StructItem(s.into()),\n-        UnionItem(u) => ItemEnum::UnionItem(u.into()),\n-        StructFieldItem(f) => ItemEnum::StructFieldItem(f.into()),\n-        EnumItem(e) => ItemEnum::EnumItem(e.into()),\n-        VariantItem(v) => ItemEnum::VariantItem(v.into()),\n-        FunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n-        ForeignFunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n-        TraitItem(t) => ItemEnum::TraitItem(t.into()),\n-        TraitAliasItem(t) => ItemEnum::TraitAliasItem(t.into()),\n-        MethodItem(m, _) => ItemEnum::MethodItem(from_function_method(m, true)),\n-        TyMethodItem(m) => ItemEnum::MethodItem(from_function_method(m, false)),\n-        ImplItem(i) => ItemEnum::ImplItem(i.into()),\n-        StaticItem(s) => ItemEnum::StaticItem(from_clean_static(s, tcx)),\n-        ForeignStaticItem(s) => ItemEnum::StaticItem(from_clean_static(s, tcx)),\n-        ForeignTypeItem => ItemEnum::ForeignTypeItem,\n-        TypedefItem(t, _) => ItemEnum::TypedefItem(t.into()),\n-        OpaqueTyItem(t) => ItemEnum::OpaqueTyItem(t.into()),\n-        ConstantItem(c) => ItemEnum::ConstantItem(c.into()),\n-        MacroItem(m) => ItemEnum::MacroItem(m.source),\n-        ProcMacroItem(m) => ItemEnum::ProcMacroItem(m.into()),\n-        AssocConstItem(t, s) => ItemEnum::AssocConstItem { type_: t.into(), default: s },\n-        AssocTypeItem(g, t) => ItemEnum::AssocTypeItem {\n+        ModuleItem(m) => ItemEnum::Module(m.into()),\n+        ImportItem(i) => ItemEnum::Import(i.into()),\n+        StructItem(s) => ItemEnum::Struct(s.into()),\n+        UnionItem(u) => ItemEnum::Union(u.into()),\n+        StructFieldItem(f) => ItemEnum::StructField(f.into()),\n+        EnumItem(e) => ItemEnum::Enum(e.into()),\n+        VariantItem(v) => ItemEnum::Variant(v.into()),\n+        FunctionItem(f) => ItemEnum::Function(f.into()),\n+        ForeignFunctionItem(f) => ItemEnum::Function(f.into()),\n+        TraitItem(t) => ItemEnum::Trait(t.into()),\n+        TraitAliasItem(t) => ItemEnum::TraitAlias(t.into()),\n+        MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true)),\n+        TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false)),\n+        ImplItem(i) => ItemEnum::Impl(i.into()),\n+        StaticItem(s) => ItemEnum::Static(from_clean_static(s, tcx)),\n+        ForeignStaticItem(s) => ItemEnum::Static(from_clean_static(s, tcx)),\n+        ForeignTypeItem => ItemEnum::ForeignType,\n+        TypedefItem(t, _) => ItemEnum::Typedef(t.into()),\n+        OpaqueTyItem(t) => ItemEnum::OpaqueTy(t.into()),\n+        ConstantItem(c) => ItemEnum::Constant(c.into()),\n+        MacroItem(m) => ItemEnum::Macro(m.source),\n+        ProcMacroItem(m) => ItemEnum::ProcMacro(m.into()),\n+        AssocConstItem(t, s) => ItemEnum::AssocConst { type_: t.into(), default: s },\n+        AssocTypeItem(g, t) => ItemEnum::AssocType {\n             bounds: g.into_iter().map(Into::into).collect(),\n             default: t.map(Into::into),\n         },\n         StrippedItem(inner) => from_clean_item_kind(*inner, tcx, name),\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }\n-        ExternCrateItem { ref src } => ItemEnum::ExternCrateItem {\n+        ExternCrateItem { ref src } => ItemEnum::ExternCrate {\n             name: name.as_ref().unwrap().to_string(),\n             rename: src.map(|x| x.to_string()),\n         },"}, {"sha": "8b0c049c05bc7186962364946b0355d45f2c1e7a", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf5246915b838b49778bc25cc68e8b1863a05362/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5246915b838b49778bc25cc68e8b1863a05362/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=cf5246915b838b49778bc25cc68e8b1863a05362", "patch": "@@ -108,8 +108,7 @@ impl JsonRenderer<'tcx> {\n                                 .last()\n                                 .map(Clone::clone),\n                             visibility: types::Visibility::Public,\n-                            kind: types::ItemKind::Trait,\n-                            inner: types::ItemEnum::TraitItem(trait_item.clone().into()),\n+                            inner: types::ItemEnum::Trait(trait_item.clone().into()),\n                             source: None,\n                             docs: Default::default(),\n                             links: Default::default(),\n@@ -158,11 +157,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let id = item.def_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n-            if let types::ItemEnum::TraitItem(ref mut t) = new_item.inner {\n+            if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n                 t.implementors = self.get_trait_implementors(id)\n-            } else if let types::ItemEnum::StructItem(ref mut s) = new_item.inner {\n+            } else if let types::ItemEnum::Struct(ref mut s) = new_item.inner {\n                 s.impls = self.get_impls(id)\n-            } else if let types::ItemEnum::EnumItem(ref mut e) = new_item.inner {\n+            } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {\n                 e.impls = self.get_impls(id)\n             }\n             let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());"}, {"sha": "01f929c5d08ad87aa3fa9c8c88715aad821463e6", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cf5246915b838b49778bc25cc68e8b1863a05362/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5246915b838b49778bc25cc68e8b1863a05362/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=cf5246915b838b49778bc25cc68e8b1863a05362", "patch": "@@ -76,7 +76,7 @@ pub struct Item {\n     /// Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)\n     pub attrs: Vec<String>,\n     pub deprecation: Option<Deprecation>,\n-    pub kind: ItemKind,\n+    #[serde(flatten)]\n     pub inner: ItemEnum,\n }\n \n@@ -185,48 +185,48 @@ pub enum ItemKind {\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n-#[serde(untagged)]\n+#[serde(tag = \"kind\", content = \"inner\", rename_all = \"snake_case\")]\n pub enum ItemEnum {\n-    ModuleItem(Module),\n-    ExternCrateItem {\n+    Module(Module),\n+    ExternCrate {\n         name: String,\n         rename: Option<String>,\n     },\n-    ImportItem(Import),\n+    Import(Import),\n \n-    UnionItem(Union),\n-    StructItem(Struct),\n-    StructFieldItem(Type),\n-    EnumItem(Enum),\n-    VariantItem(Variant),\n+    Union(Union),\n+    Struct(Struct),\n+    StructField(Type),\n+    Enum(Enum),\n+    Variant(Variant),\n \n-    FunctionItem(Function),\n+    Function(Function),\n \n-    TraitItem(Trait),\n-    TraitAliasItem(TraitAlias),\n-    MethodItem(Method),\n-    ImplItem(Impl),\n+    Trait(Trait),\n+    TraitAlias(TraitAlias),\n+    Method(Method),\n+    Impl(Impl),\n \n-    TypedefItem(Typedef),\n-    OpaqueTyItem(OpaqueTy),\n-    ConstantItem(Constant),\n+    Typedef(Typedef),\n+    OpaqueTy(OpaqueTy),\n+    Constant(Constant),\n \n-    StaticItem(Static),\n+    Static(Static),\n \n     /// `type`s from an extern block\n-    ForeignTypeItem,\n+    ForeignType,\n \n     /// Declarative macro_rules! macro\n-    MacroItem(String),\n-    ProcMacroItem(ProcMacro),\n+    Macro(String),\n+    ProcMacro(ProcMacro),\n \n-    AssocConstItem {\n+    AssocConst {\n         #[serde(rename = \"type\")]\n         type_: Type,\n         /// e.g. `const X: usize = 5;`\n         default: Option<String>,\n     },\n-    AssocTypeItem {\n+    AssocType {\n         bounds: Vec<GenericBound>,\n         /// e.g. `type X = usize;`\n         default: Option<Type>,"}]}