{"sha": "28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "node_id": "C_kwDOAAsO6NoAKDI4YmRmODkyZDZjMmZjM2EzOGQ4ZmM0MGZhYjAxM2Q4MTBmYjMyNjk", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T03:54:37Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T03:54:37Z"}, "message": "rustdoc: Use `DocVisitor` for sources collection", "tree": {"sha": "5d88275dcbabe235de7bd7b12fa4e5eb075aa87a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d88275dcbabe235de7bd7b12fa4e5eb075aa87a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "html_url": "https://github.com/rust-lang/rust/commit/28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28bdf892d6c2fc3a38d8fc40fab013d810fb3269/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "html_url": "https://github.com/rust-lang/rust/commit/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "74fcd22adf8542f5021d003ccff122c5eb1efac0", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28bdf892d6c2fc3a38d8fc40fab013d810fb3269/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28bdf892d6c2fc3a38d8fc40fab013d810fb3269/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "patch": "@@ -1,11 +1,11 @@\n use crate::clean;\n use crate::docfs::PathError;\n use crate::error::Error;\n-use crate::fold::DocFolder;\n use crate::html::format::Buffer;\n use crate::html::highlight;\n use crate::html::layout;\n use crate::html::render::{Context, BASIC_KEYWORDS};\n+use crate::visit::DocVisitor;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n@@ -18,10 +18,13 @@ use std::path::{Component, Path, PathBuf};\n \n crate fn render(cx: &mut Context<'_>, krate: clean::Crate) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n+\n     let dst = cx.dst.join(\"src\").join(&*krate.name(cx.tcx()).as_str());\n     cx.shared.ensure_dir(&dst)?;\n-    let mut folder = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };\n-    Ok(folder.fold_crate(krate))\n+\n+    let mut collector = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };\n+    collector.visit_crate(&krate);\n+    Ok(krate)\n }\n \n crate fn collect_local_sources<'tcx>(\n@@ -30,8 +33,7 @@ crate fn collect_local_sources<'tcx>(\n     krate: clean::Crate,\n ) -> (clean::Crate, FxHashMap<PathBuf, String>) {\n     let mut lsc = LocalSourcesCollector { tcx, local_sources: FxHashMap::default(), src_root };\n-\n-    let krate = lsc.fold_crate(krate);\n+    lsc.visit_crate(&krate);\n     (krate, lsc.local_sources)\n }\n \n@@ -79,13 +81,13 @@ impl LocalSourcesCollector<'_, '_> {\n     }\n }\n \n-impl DocFolder for LocalSourcesCollector<'_, '_> {\n-    fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n-        self.add_local_source(&item);\n+impl DocVisitor for LocalSourcesCollector<'_, '_> {\n+    fn visit_item(&mut self, item: &clean::Item) {\n+        self.add_local_source(item);\n \n         // FIXME: if `include_sources` isn't set and DocFolder didn't require consuming the crate by value,\n         // we could return None here without having to walk the rest of the crate.\n-        Some(self.fold_item_recur(item))\n+        self.visit_item_recur(item)\n     }\n }\n \n@@ -98,8 +100,8 @@ struct SourceCollector<'a, 'tcx> {\n     emitted_local_sources: FxHashSet<PathBuf>,\n }\n \n-impl DocFolder for SourceCollector<'_, '_> {\n-    fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+impl DocVisitor for SourceCollector<'_, '_> {\n+    fn visit_item(&mut self, item: &clean::Item) {\n         let tcx = self.cx.tcx();\n         let span = item.span(tcx);\n         let sess = tcx.sess;\n@@ -134,7 +136,7 @@ impl DocFolder for SourceCollector<'_, '_> {\n         }\n         // FIXME: if `include_sources` isn't set and DocFolder didn't require consuming the crate by value,\n         // we could return None here without having to walk the rest of the crate.\n-        Some(self.fold_item_recur(item))\n+        self.visit_item_recur(item)\n     }\n }\n "}]}