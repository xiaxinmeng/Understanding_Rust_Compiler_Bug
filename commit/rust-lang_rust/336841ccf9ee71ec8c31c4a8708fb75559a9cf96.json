{"sha": "336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNjg0MWNjZjllZTcxZWM4YzMxYzRhODcwOGZiNzU1NTlhOWNmOTY=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-24T17:35:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-24T17:35:29Z"}, "message": "Rollup merge of #35920 - GuillaumeGomez:err_codes, r=jonathandturner\n\nErr codes\n\nr? @jonathandturner", "tree": {"sha": "8f2d965d4d8ab0dc5aaa5d045bc2c2188b69e1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2d965d4d8ab0dc5aaa5d045bc2c2188b69e1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "html_url": "https://github.com/rust-lang/rust/commit/336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c661aae6fbf31be031c94399712ff48ccbf6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c661aae6fbf31be031c94399712ff48ccbf6a9", "html_url": "https://github.com/rust-lang/rust/commit/95c661aae6fbf31be031c94399712ff48ccbf6a9"}, {"sha": "5c5f483b40d6b7d125e110a82d928b07220230f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5f483b40d6b7d125e110a82d928b07220230f3", "html_url": "https://github.com/rust-lang/rust/commit/5c5f483b40d6b7d125e110a82d928b07220230f3"}], "stats": {"total": 194, "additions": 180, "deletions": 14}, "files": [{"sha": "ba68686c551171a9be5220915ccd3defb12a88c7", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -1527,6 +1527,37 @@ fn main() {\n ```\n \"##,\n \n+E0478: r##\"\n+A lifetime bound was not satisfied.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0478\n+// Check that the explicit lifetime bound (`'SnowWhite`, in this example) must\n+// outlive all the superbounds from the trait (`'kiss`, in this example).\n+\n+trait Wedding<'t>: 't { }\n+\n+struct Prince<'kiss, 'SnowWhite> {\n+    child: Box<Wedding<'kiss> + 'SnowWhite>,\n+    // error: lifetime bound not satisfied\n+}\n+```\n+\n+In this example, the `'SnowWhite` lifetime is supposed to outlive the `'kiss`\n+lifetime but the declaration of the `Prince` struct doesn't enforce it. To fix\n+this issue, you need to specify it:\n+\n+```\n+trait Wedding<'t>: 't { }\n+\n+struct Prince<'kiss, 'SnowWhite: 'kiss> { // You say here that 'kiss must live\n+                                          // longer than 'SnowWhite.\n+    child: Box<Wedding<'kiss> + 'SnowWhite>, // And now it's all good!\n+}\n+```\n+\"##,\n+\n E0496: r##\"\n A lifetime name is shadowing another lifetime name. Erroneous code example:\n \n@@ -1715,7 +1746,6 @@ register_diagnostics! {\n     E0475, // index of slice outside its lifetime\n     E0476, // lifetime of the source pointer does not outlive lifetime bound...\n     E0477, // the type `..` does not fulfill the required lifetime...\n-    E0478, // lifetime bound not satisfied\n     E0479, // the type `..` (provided as the value of a type parameter) is...\n     E0480, // lifetime of method receiver does not outlive the method call\n     E0481, // lifetime of function argument does not outlive the function call"}, {"sha": "eb16812af9b0225fa5714dcca15928b114e859a1", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -18,7 +18,7 @@ for the entire lifetime of a program. Creating a boxed value allocates memory on\n the heap at runtime, and therefore cannot be done at compile time. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0010\n #![feature(box_syntax)]\n \n const CON : Box<i32> = box 0;\n@@ -30,7 +30,7 @@ Static and const variables can refer to other const variables. But a const\n variable cannot refer to a static variable. For example, `Y` cannot refer to\n `X` here:\n \n-```compile_fail\n+```compile_fail,E0013\n static X: i32 = 42;\n const Y: i32 = X;\n ```\n@@ -66,7 +66,7 @@ E0016: r##\"\n Blocks in constants may only contain items (such as constant, function\n definition, etc...) and a tail expression. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0016\n const FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n ```\n \n@@ -81,7 +81,7 @@ E0017: r##\"\n References in statics and constants may only refer to immutable values.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0017\n static X: i32 = 1;\n const C: i32 = 2;\n \n@@ -107,7 +107,7 @@ vary.\n \n For example, if you write:\n \n-```compile_fail\n+```compile_fail,E0018\n static MY_STATIC: u32 = 42;\n static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n@@ -152,7 +152,7 @@ impl Test {\n fn main() {\n     const FOO: Test = Test::V1;\n \n-    const A: i32 = FOO.test(); // You can't call Test::func() here !\n+    const A: i32 = FOO.test(); // You can't call Test::func() here!\n }\n ```\n \n@@ -214,14 +214,13 @@ static B: &'static u32 = &A; // ok!\n ```\n \"##,\n \n-\n E0395: r##\"\n The value assigned to a constant scalar must be known at compile time,\n which is not the case when comparing raw pointers.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0395\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n@@ -250,7 +249,7 @@ The value behind a raw pointer can't be determined at compile-time\n (or even link-time), which means it can't be used in a constant\n expression. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0396\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n@@ -272,7 +271,7 @@ E0492: r##\"\n A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0492\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n \n const A: AtomicUsize = ATOMIC_USIZE_INIT;\n@@ -299,7 +298,7 @@ static B: &'static AtomicUsize = &A; // ok!\n \n You can also have this error while using a cell type:\n \n-```compile_fail\n+```compile_fail,E0492\n #![feature(const_fn)]\n \n use std::cell::Cell;\n@@ -351,7 +350,7 @@ E0493: r##\"\n A type with a destructor was assigned to an invalid type of variable. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0493\n struct Foo {\n     a: u32\n }\n@@ -374,7 +373,7 @@ E0494: r##\"\n A reference of an interior static was assigned to another const/static.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0494\n struct Foo {\n     a: u32\n }"}, {"sha": "8eb4003fc9734fcd0010c4157508e727be4500ef", "filename": "src/test/compile-fail/E0478.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0478.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Wedding<'t>: 't { }\n+\n+struct Prince<'kiss, 'SnowWhite> {\n+    child: Box<Wedding<'kiss> + 'SnowWhite>, //~ ERROR E0478\n+}\n+\n+fn main() {\n+}"}, {"sha": "8e4964c97c593036fcc67ddb8576ff4595b51a73", "filename": "src/test/compile-fail/E0492.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0492.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static B: &'static AtomicUsize = &A; //~ ERROR E0492\n+\n+fn main() {\n+}"}, {"sha": "689f469533d969fc115efa7e025d388f5710f1dc", "filename": "src/test/compile-fail/E0493.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0493.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    a: u32\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+const F : Foo = Foo { a : 0 }; //~ ERROR E0493\n+\n+fn main() {\n+}"}, {"sha": "5f8632ac1c23d29b5e918382384938a60b1b5fa4", "filename": "src/test/compile-fail/E0494.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0494.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    a: u32\n+}\n+\n+static S : Foo = Foo { a : 0 };\n+static A : &'static u32 = &S.a; //~ ERROR E0494\n+\n+fn main() {\n+}"}, {"sha": "4ca3cd9c13da60a26586e54da1fe11ada301b509", "filename": "src/test/compile-fail/E0496.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0496.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    a: &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn f<'a>(x: &'a i32) { //~ ERROR E0496\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "9a64bfe2ea9e7e36617ff2cb54e37165990fb3e0", "filename": "src/test/compile-fail/E0499.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0499.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut i = 0;\n+    let mut x = &mut i;\n+    let mut a = &mut i; //~ ERROR E0499\n+}"}, {"sha": "04678b96c8d088b10f2c09bb5b4f141f981d6359", "filename": "src/test/compile-fail/E0501.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336841ccf9ee71ec8c31c4a8708fb75559a9cf96/src%2Ftest%2Fcompile-fail%2FE0501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0501.rs?ref=336841ccf9ee71ec8c31c4a8708fb75559a9cf96", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn inside_closure(x: &mut i32) {\n+}\n+\n+fn outside_closure(x: &mut i32) {\n+}\n+\n+fn foo(a: &mut i32) {\n+    let bar = || {\n+        inside_closure(a)\n+    };\n+    outside_closure(a); //~ ERROR E0501\n+}\n+\n+fn main() {\n+}"}]}