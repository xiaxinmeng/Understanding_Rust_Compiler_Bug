{"sha": "f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYzRhOTIyZmUwMGNkMjM2YmI0MzYwZjVmYjcwNzdkNzBhMWU2NzU=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-10-02T13:48:57Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-14T17:56:26Z"}, "message": "stub out trait aliases in resolve", "tree": {"sha": "a5175b402898a4a8a271fecaa522b7533a2d3e26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5175b402898a4a8a271fecaa522b7533a2d3e26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "html_url": "https://github.com/rust-lang/rust/commit/f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c4a922fe00cd236bb4360f5fb7077d70a1e675/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a28268cc1c8314f0de2519c78ff97696486a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a28268cc1c8314f0de2519c78ff97696486a36", "html_url": "https://github.com/rust-lang/rust/commit/d4a28268cc1c8314f0de2519c78ff97696486a36"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "3b20c1e74cd39216753de979076e42ac475cdfa0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1c4a922fe00cd236bb4360f5fb7077d70a1e675/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c4a922fe00cd236bb4360f5fb7077d70a1e675/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "patch": "@@ -344,6 +344,11 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n+            ItemKind::TraitAlias(..) => {\n+                let def = Def::TraitAlias(self.definitions.local_def_id(item.id));\n+                self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n+            }\n+\n             // These items live in both the type and value namespaces.\n             ItemKind::Struct(ref struct_def, _) => {\n                 // Define a name in the type namespace.\n@@ -411,6 +416,7 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.current_module = module;\n             }\n+\n             ItemKind::MacroDef(..) | ItemKind::Mac(_) => unreachable!(),\n         }\n     }"}, {"sha": "377c70f642d012c789697740a6cbd9bd160a07de", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1c4a922fe00cd236bb4360f5fb7077d70a1e675/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c4a922fe00cd236bb4360f5fb7077d70a1e675/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "patch": "@@ -474,6 +474,7 @@ impl<'a> PathSource<'a> {\n             },\n             PathSource::Trait => match def {\n                 Def::Trait(..) => true,\n+                Def::TraitAlias(..) => true,\n                 _ => false,\n             },\n             PathSource::Expr(..) => match def {\n@@ -1935,6 +1936,17 @@ impl<'a> Resolver<'a> {\n                 });\n             }\n \n+            ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                // Create a new rib for the trait-wide type parameters.\n+                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                    let local_def_id = this.definitions.local_def_id(item.id);\n+                    this.with_self_rib(Def::SelfTy(Some(local_def_id), None), |this| {\n+                        this.visit_generics(generics);\n+                        walk_list!(this, visit_ty_param_bound, bounds);\n+                    });\n+                });\n+            }\n+\n             ItemKind::Mod(_) | ItemKind::ForeignMod(_) => {\n                 self.with_scope(item.id, |this| {\n                     visit::walk_item(this, item);"}]}