{"sha": "d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzJiOTI0MDk5MDJkOWNlY2E4Y2QwNjQwMjZjZmNjMWYzNTdjZjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T12:05:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T12:13:00Z"}, "message": "Refactor parameter count tracking", "tree": {"sha": "8ce9fd29435ef3bf1fe568fd889c3f1ab8307ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce9fd29435ef3bf1fe568fd889c3f1ab8307ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "html_url": "https://github.com/rust-lang/rust/commit/d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9837df21942ca12a5aece0a868ea46eb405742", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9837df21942ca12a5aece0a868ea46eb405742", "html_url": "https://github.com/rust-lang/rust/commit/8e9837df21942ca12a5aece0a868ea46eb405742"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "d557962b4fec50fefe45ea52e29b044c9a8d4bf6", "filename": "crates/ra_hir_ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs?ref=d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "patch": "@@ -55,7 +55,7 @@ fn deref_by_trait(\n     let target = db.trait_data(deref_trait).associated_type_by_name(&name::TARGET_TYPE)?;\n \n     let generic_params = generics(db, target.into());\n-    if generic_params.count_params_including_parent() != 1 {\n+    if generic_params.len() != 1 {\n         // the Target type + Deref trait should only have one generic parameter,\n         // namely Deref's Self type\n         return None;"}, {"sha": "2c296987c8a612c82196bd89e305c8e22fb382e8", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "patch": "@@ -660,10 +660,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         generic_args: Option<&GenericArgs>,\n         receiver_ty: &Ty,\n     ) -> Substs {\n-        let (parent_param_count, param_count) = def_generics\n-            .as_ref()\n-            .map_or((0, 0), |g| (g.count_parent_params(), g.params.params.len()));\n-        let mut substs = Vec::with_capacity(parent_param_count + param_count);\n+        let (total_len, _parent_len, child_len) =\n+            def_generics.as_ref().map_or((0, 0, 0), |g| g.len_split());\n+        let mut substs = Vec::with_capacity(total_len);\n         // Parent arguments are unknown, except for the receiver type\n         if let Some(parent_generics) = def_generics.as_ref().map(|p| p.iter_parent()) {\n             for (_id, param) in parent_generics {\n@@ -677,7 +676,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // handle provided type arguments\n         if let Some(generic_args) = generic_args {\n             // if args are provided, it should be all of them, but we can't rely on that\n-            for arg in generic_args.args.iter().take(param_count) {\n+            for arg in generic_args.args.iter().take(child_len) {\n                 match arg {\n                     GenericArg::Type(type_ref) => {\n                         let ty = self.make_ty(type_ref);\n@@ -687,10 +686,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n         };\n         let supplied_params = substs.len();\n-        for _ in supplied_params..parent_param_count + param_count {\n+        for _ in supplied_params..total_len {\n             substs.push(Ty::Unknown);\n         }\n-        assert_eq!(substs.len(), parent_param_count + param_count);\n+        assert_eq!(substs.len(), total_len);\n         Substs(substs.into())\n     }\n \n@@ -709,9 +708,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     CallableDef::FunctionId(f) => {\n                         if let ContainerId::TraitId(trait_) = f.lookup(self.db).container {\n                             // construct a TraitDef\n-                            let substs = a_ty.parameters.prefix(\n-                                generics(self.db, trait_.into()).count_params_including_parent(),\n-                            );\n+                            let substs =\n+                                a_ty.parameters.prefix(generics(self.db, trait_.into()).len());\n                             self.obligations.push(Obligation::Trait(TraitRef {\n                                 trait_: trait_.into(),\n                                 substs,"}, {"sha": "036d3a589a8287fb600f208e08b032798ee0db1b", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "patch": "@@ -167,15 +167,15 @@ impl TypeCtor {\n             => 1,\n             TypeCtor::Adt(adt) => {\n                 let generic_params = generics(db, AdtId::from(adt).into());\n-                generic_params.count_params_including_parent()\n+                generic_params.len()\n             }\n             TypeCtor::FnDef(callable) => {\n                 let generic_params = generics(db, callable.into());\n-                generic_params.count_params_including_parent()\n+                generic_params.len()\n             }\n             TypeCtor::AssociatedType(type_alias) => {\n                 let generic_params = generics(db, type_alias.into());\n-                generic_params.count_params_including_parent()\n+                generic_params.len()\n             }\n             TypeCtor::FnPtr { num_args } => num_args as usize + 1,\n             TypeCtor::Tuple { cardinality } => cardinality as usize,\n@@ -378,12 +378,12 @@ impl Substs {\n     pub fn build_for_def(db: &impl HirDatabase, def: impl Into<GenericDefId>) -> SubstsBuilder {\n         let def = def.into();\n         let params = generics(db, def);\n-        let param_count = params.count_params_including_parent();\n+        let param_count = params.len();\n         Substs::builder(param_count)\n     }\n \n     pub(crate) fn build_for_generics(generic_params: &Generics) -> SubstsBuilder {\n-        Substs::builder(generic_params.count_params_including_parent())\n+        Substs::builder(generic_params.len())\n     }\n \n     pub fn build_for_type_ctor(db: &impl HirDatabase, type_ctor: TypeCtor) -> SubstsBuilder {"}, {"sha": "eab91229e3e41f1754cecc508077d9f39bf6f2c1", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "patch": "@@ -321,9 +321,8 @@ pub(super) fn substs_from_path_segment(\n     let mut substs = Vec::new();\n     let def_generics = def_generic.map(|def| generics(db, def.into()));\n \n-    let (parent_param_count, param_count) =\n-        def_generics.map_or((0, 0), |g| (g.count_parent_params(), g.params.params.len()));\n-    substs.extend(iter::repeat(Ty::Unknown).take(parent_param_count));\n+    let (total_len, parent_len, child_len) = def_generics.map_or((0, 0, 0), |g| g.len_split());\n+    substs.extend(iter::repeat(Ty::Unknown).take(parent_len));\n     if add_self_param {\n         // FIXME this add_self_param argument is kind of a hack: Traits have the\n         // Self type as an implicit first type parameter, but it can't be\n@@ -334,8 +333,8 @@ pub(super) fn substs_from_path_segment(\n     if let Some(generic_args) = &segment.args_and_bindings {\n         // if args are provided, it should be all of them, but we can't rely on that\n         let self_param_correction = if add_self_param { 1 } else { 0 };\n-        let param_count = param_count - self_param_correction;\n-        for arg in generic_args.args.iter().take(param_count) {\n+        let child_len = child_len + self_param_correction;\n+        for arg in generic_args.args.iter().take(child_len) {\n             match arg {\n                 GenericArg::Type(type_ref) => {\n                     let ty = Ty::from_hir(db, resolver, type_ref);\n@@ -346,10 +345,10 @@ pub(super) fn substs_from_path_segment(\n     }\n     // add placeholders for args that were not provided\n     let supplied_params = substs.len();\n-    for _ in supplied_params..parent_param_count + param_count {\n+    for _ in supplied_params..total_len {\n         substs.push(Ty::Unknown);\n     }\n-    assert_eq!(substs.len(), parent_param_count + param_count);\n+    assert_eq!(substs.len(), total_len);\n \n     // handle defaults\n     if let Some(def_generic) = def_generic {"}, {"sha": "1e7ff93d596dec6241537fc7d5f2178f8132f4a7", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "patch": "@@ -557,7 +557,7 @@ pub(crate) fn associated_ty_data_query(\n         trait_id: trait_.to_chalk(db),\n         id,\n         name: lalrpop_intern::intern(&db.type_alias_data(type_alias).name.to_string()),\n-        binders: make_binders(bound_data, generic_params.count_params_including_parent()),\n+        binders: make_binders(bound_data, generic_params.len()),\n     };\n     Arc::new(datum)\n }"}, {"sha": "936cfe25e089abbf3f154399268bc16b729c6ac3", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2b92409902d9ceca8cd064026cfcc1f357cf6/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=d6c2b92409902d9ceca8cd064026cfcc1f357cf6", "patch": "@@ -117,13 +117,14 @@ impl Generics {\n             .map(|(i, (_local_id, p))| (i as u32, p))\n     }\n \n-    pub(crate) fn count_parent_params(&self) -> usize {\n-        self.parent_generics.as_ref().map_or(0, |p| p.count_params_including_parent())\n+    pub(crate) fn len(&self) -> usize {\n+        self.len_split().0\n     }\n-\n-    pub(crate) fn count_params_including_parent(&self) -> usize {\n-        let parent_count = self.count_parent_params();\n-        parent_count + self.params.params.len()\n+    /// (total, parents, child)\n+    pub(crate) fn len_split(&self) -> (usize, usize, usize) {\n+        let parent = self.parent_generics.as_ref().map_or(0, |p| p.len());\n+        let child = self.params.params.len();\n+        (parent + child, parent, child)\n     }\n     pub(crate) fn param_idx(&self, param: GenericParamId) -> u32 {\n         self.find_param(param).0\n@@ -140,8 +141,8 @@ impl Generics {\n                 .enumerate()\n                 .find(|(_, (idx, _))| *idx == param.local_id)\n                 .unwrap();\n-\n-            return ((self.count_parent_params() + idx) as u32, data);\n+            let (_total, parent_len, _child) = self.len_split();\n+            return ((parent_len + idx) as u32, data);\n         }\n         self.parent_generics.as_ref().unwrap().find_param(param)\n     }"}]}