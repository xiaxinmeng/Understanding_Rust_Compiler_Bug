{"sha": "482c761704b9f7d08d00b6cf4c567db427da7ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MmM3NjE3MDRiOWY3ZDA4ZDAwYjZjZjRjNTY3ZGI0MjdkYTdlYzc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-01-22T15:22:46Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-02-01T10:26:45Z"}, "message": "Use BufWriter", "tree": {"sha": "9e2a71b3c8987033aff1a2a0af367d28ed312d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2a71b3c8987033aff1a2a0af367d28ed312d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/482c761704b9f7d08d00b6cf4c567db427da7ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/482c761704b9f7d08d00b6cf4c567db427da7ec7", "html_url": "https://github.com/rust-lang/rust/commit/482c761704b9f7d08d00b6cf4c567db427da7ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/482c761704b9f7d08d00b6cf4c567db427da7ec7/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd41ea5fc37d1ba879fd52743bde35fde4a89df", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd41ea5fc37d1ba879fd52743bde35fde4a89df", "html_url": "https://github.com/rust-lang/rust/commit/cdd41ea5fc37d1ba879fd52743bde35fde4a89df"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "0fd83dad56b1af78c5975cb59535ab9fb054f2c9", "filename": "src/librustc_data_structures/obligation_forest/graphviz.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs?ref=482c761704b9f7d08d00b6cf4c567db427da7ec7", "patch": "@@ -2,6 +2,7 @@ use crate::obligation_forest::{ForestObligation, ObligationForest};\n use graphviz as dot;\n use std::env::var_os;\n use std::fs::File;\n+use std::io::BufWriter;\n use std::path::Path;\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n@@ -31,7 +32,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         let file_path = dir.as_ref().join(format!(\"{:010}_{}.gv\", counter, description));\n \n-        let mut gv_file = File::create(file_path).unwrap();\n+        let mut gv_file = BufWriter::new(File::create(file_path).unwrap());\n \n         dot::render(&self, &mut gv_file).unwrap();\n     }"}, {"sha": "51cc091b6c0af24285afe2452559b9aa3127c4fd", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=482c761704b9f7d08d00b6cf4c567db427da7ec7", "patch": "@@ -49,7 +49,7 @@ use syntax::ast;\n \n use std::env;\n use std::fs::{self, File};\n-use std::io::Write;\n+use std::io::{BufWriter, Write};\n \n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n@@ -235,7 +235,7 @@ fn dump_graph(tcx: TyCtxt<'_>) {\n     {\n         // dump a .txt file with just the edges:\n         let txt_path = format!(\"{}.txt\", path);\n-        let mut file = File::create(&txt_path).unwrap();\n+        let mut file = BufWriter::new(File::create(&txt_path).unwrap());\n         for &(ref source, ref target) in &edges {\n             write!(file, \"{:?} -> {:?}\\n\", source, target).unwrap();\n         }"}, {"sha": "6af83a4c5abc188dc36a77772c35d1b510adc334", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=482c761704b9f7d08d00b6cf4c567db427da7ec7", "patch": "@@ -49,7 +49,7 @@ use tempfile::Builder as TempFileBuilder;\n use std::any::Any;\n use std::cell::RefCell;\n use std::ffi::OsString;\n-use std::io::{self, Write};\n+use std::io::{self, BufWriter, Write};\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::{env, fs, iter, mem};\n@@ -575,7 +575,7 @@ fn write_out_deps(\n             });\n         }\n \n-        let mut file = fs::File::create(&deps_filename)?;\n+        let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n         for path in out_filenames {\n             writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n         }"}, {"sha": "827ccb1c85733badb2a585cdb9dc897f18820d33", "filename": "src/librustc_mir/borrow_check/facts.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs?ref=482c761704b9f7d08d00b6cf4c567db427da7ec7", "patch": "@@ -8,7 +8,7 @@ use rustc_index::vec::Idx;\n use std::error::Error;\n use std::fmt::Debug;\n use std::fs::{self, File};\n-use std::io::Write;\n+use std::io::{BufWriter, Write};\n use std::path::Path;\n \n #[derive(Copy, Clone, Debug)]\n@@ -117,7 +117,7 @@ impl<'w> FactWriter<'w> {\n         T: FactRow,\n     {\n         let file = &self.dir.join(file_name);\n-        let mut file = File::create(file)?;\n+        let mut file = BufWriter::new(File::create(file)?);\n         for row in rows {\n             row.write(&mut file, self.location_table)?;\n         }\n@@ -126,11 +126,19 @@ impl<'w> FactWriter<'w> {\n }\n \n trait FactRow {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>>;\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>>;\n }\n \n impl FactRow for RegionVid {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[self])\n     }\n }\n@@ -140,7 +148,11 @@ where\n     A: FactCell,\n     B: FactCell,\n {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[&self.0, &self.1])\n     }\n }\n@@ -151,7 +163,11 @@ where\n     B: FactCell,\n     C: FactCell,\n {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[&self.0, &self.1, &self.2])\n     }\n }\n@@ -163,7 +179,11 @@ where\n     C: FactCell,\n     D: FactCell,\n {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[&self.0, &self.1, &self.2, &self.3])\n     }\n }"}, {"sha": "5dec2c6df99dcf6991488c8eb4435f533cdbab26", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=482c761704b9f7d08d00b6cf4c567db427da7ec7", "patch": "@@ -61,7 +61,7 @@ pub fn on_mir_pass<'tcx>(\n \n pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n-    let mut f = File::create(&path)?;\n+    let mut f = io::BufWriter::new(File::create(&path)?);\n     mir_util::write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())\n }"}, {"sha": "b12ad1e4c15cca55f8bee1d39e1690a8de49ebc9", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482c761704b9f7d08d00b6cf4c567db427da7ec7/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=482c761704b9f7d08d00b6cf4c567db427da7ec7", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::work_queue::WorkQueue;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use std::fs;\n-use std::io::{self, Write};\n+use std::io::{self, BufWriter, Write};\n use std::path::{Path, PathBuf};\n \n pub type LiveVarSet = BitSet<Local>;\n@@ -288,7 +288,8 @@ fn dump_matched_mir_node<'tcx>(\n     let item_id = tcx.hir().as_local_hir_id(source.def_id()).unwrap();\n     let file_name = format!(\"rustc.node{}{}-liveness.mir\", item_id, pass_name);\n     file_path.push(&file_name);\n-    let _ = fs::File::create(&file_path).and_then(|mut file| {\n+    let _ = fs::File::create(&file_path).and_then(|file| {\n+        let mut file = BufWriter::new(file);\n         writeln!(file, \"// MIR local liveness analysis for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n         writeln!(file, \"// pass_name = {}\", pass_name)?;"}]}