{"sha": "c67a85ada1c949005d030e5cf916aa01c8984f5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2N2E4NWFkYTFjOTQ5MDA1ZDAzMGU1Y2Y5MTZhYTAxYzg5ODRmNWY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-17T02:03:58Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-17T02:05:05Z"}, "message": "Remove each_permutation_ref", "tree": {"sha": "1864a8f3feef71fd33d92e11ba8dc1f568985349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1864a8f3feef71fd33d92e11ba8dc1f568985349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67a85ada1c949005d030e5cf916aa01c8984f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67a85ada1c949005d030e5cf916aa01c8984f5f", "html_url": "https://github.com/rust-lang/rust/commit/c67a85ada1c949005d030e5cf916aa01c8984f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67a85ada1c949005d030e5cf916aa01c8984f5f/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c99d1de85bcc7fff69b6ad4f3159fef8707d304b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c99d1de85bcc7fff69b6ad4f3159fef8707d304b", "html_url": "https://github.com/rust-lang/rust/commit/c99d1de85bcc7fff69b6ad4f3159fef8707d304b"}], "stats": {"total": 60, "additions": 0, "deletions": 60}, "files": [{"sha": "0822fe11f0d07c1c8f931c866fb8183db9d6c3b8", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c67a85ada1c949005d030e5cf916aa01c8984f5f/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67a85ada1c949005d030e5cf916aa01c8984f5f/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=c67a85ada1c949005d030e5cf916aa01c8984f5f", "patch": "@@ -1824,26 +1824,6 @@ pub fn each_permutation<T:Copy>(values: &[T], fun: &fn(perm : &[T]) -> bool) {\n     }\n }\n \n-/**\n- * Iterate over all permutations of vector `values`.\n- *\n- * This is an alternative to each_permutation that uses references to\n- * avoid copying the elements of the values vector.\n- *\n- * To avoid copying, the iterator will be passed a reference to a vector\n- * containing references to the elements in the original `values` vector.\n- *\n- * # Arguments\n- *\n- * * `values` - A vector of values from which the permutations are chosen\n- *\n- * * `fun` - The function to iterate over the permutations\n- */\n-#[cfg(not(stage0))]\n-pub fn each_permutation_ref<T>(values : &[T], fun : &fn(perm : &[&T]) -> bool) {\n-    each_permutation(vec::from_fn(values.len(), |i| &values[i]), fun);\n-}\n-\n /**\n  * Iterate over all contiguous windows of length `n` of the vector `v`.\n  *\n@@ -4827,16 +4807,6 @@ mod tests {\n         assert_eq!(v, ~[~[]]);\n     }\n \n-    #[test]\n-    fn test_permutations0_ref() {\n-        let values = [];\n-        let mut v : ~[~[int]] = ~[];\n-        for each_permutation_ref(values) |p| {\n-            v.push(p.to_owned());\n-        }\n-        assert_eq!(v, ~[~[]]);\n-    }\n-\n     #[test]\n     fn test_permutations1() {\n         let values = [1];\n@@ -4847,16 +4817,6 @@ mod tests {\n         assert_eq!(v, ~[~[1]]);\n     }\n \n-    #[test]\n-    fn test_permutations1_ref() {\n-        let values = [1];\n-        let mut v : ~[~[int]] = ~[];\n-        for each_permutation_ref(values) |p| {\n-            v.push(p.to_owned());\n-        }\n-        assert_eq!(v, ~[~[1]]);\n-    }\n-\n     #[test]\n     fn test_permutations2() {\n         let values = [1,2];\n@@ -4867,16 +4827,6 @@ mod tests {\n         assert_eq!(v, ~[~[1,2],~[2,1]]);\n     }\n \n-    #[test]\n-    fn test_permutations2_ref() {\n-        let values = [1,2];\n-        let mut v : ~[~[int]] = ~[];\n-        for each_permutation_ref(values) |p| {\n-            v.push(p.to_owned());\n-        }\n-        assert_eq!(v, ~[~[1,2],~[2,1]]);\n-    }\n-\n     #[test]\n     fn test_permutations3() {\n         let values = [1,2,3];\n@@ -4887,16 +4837,6 @@ mod tests {\n         assert_eq!(v, ~[~[1,2,3],~[1,3,2],~[2,1,3],~[2,3,1],~[3,1,2],~[3,2,1]]);\n     }\n \n-    #[test]\n-    fn test_permutations3_ref() {\n-        let values = [1,2,3];\n-        let mut v : ~[~[int]] = ~[];\n-        for each_permutation_ref(values) |p| {\n-            v.push(p.to_owned());\n-        }\n-        assert_eq!(v, ~[~[1,2,3],~[1,3,2],~[2,1,3],~[2,3,1],~[3,1,2],~[3,2,1]]);\n-    }\n-\n     #[test]\n     fn test_each_val() {\n         use old_iter::CopyableNonstrictIter;"}]}