{"sha": "be76bdf9058172dd22a67332b45c0ab93268b3b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzZiZGY5MDU4MTcyZGQyMmE2NzMzMmI0NWMwYWI5MzI2OGIzYjM=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-16T00:54:50Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-16T00:54:50Z"}, "message": "Remove ToPredicate impls that use Binder::dummy", "tree": {"sha": "d316d7e0607b1afc3e4da59d485e2c26e7fdf3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d316d7e0607b1afc3e4da59d485e2c26e7fdf3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be76bdf9058172dd22a67332b45c0ab93268b3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be76bdf9058172dd22a67332b45c0ab93268b3b3", "html_url": "https://github.com/rust-lang/rust/commit/be76bdf9058172dd22a67332b45c0ab93268b3b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be76bdf9058172dd22a67332b45c0ab93268b3b3/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7bc5e33c25e29058cbafefe680da8d5e9220e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7bc5e33c25e29058cbafefe680da8d5e9220e9", "html_url": "https://github.com/rust-lang/rust/commit/2c7bc5e33c25e29058cbafefe680da8d5e9220e9"}], "stats": {"total": 184, "additions": 99, "deletions": 85}, "files": [{"sha": "e77619882228139f12a99e700b8d289e4856837c", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -89,10 +89,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n     ) {\n         self.prove_predicates(\n-            Some(ty::PredicateKind::Trait(ty::TraitPredicate {\n+            Some(ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n                 trait_ref,\n                 constness: ty::BoundConstness::NotConst,\n-            })),\n+            }))),\n             locations,\n             category,\n         );"}, {"sha": "1184a7aa0ac9f847c3297f39ad1e4830e2f305e7", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -1078,7 +1078,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n \n                     self.prove_predicate(\n-                        ty::PredicateKind::WellFormed(inferred_ty.into()).to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))\n+                            .to_predicate(self.tcx()),\n                         Locations::All(span),\n                         ConstraintCategory::TypeAnnotation,\n                     );\n@@ -1314,7 +1315,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     obligations.obligations.push(traits::Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        ty::PredicateKind::WellFormed(revealed_ty.into()).to_predicate(infcx.tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(revealed_ty.into()))\n+                            .to_predicate(infcx.tcx),\n                     ));\n                     obligations.add(\n                         infcx\n@@ -1584,7 +1586,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_call_dest(body, term, &sig, destination, term_location);\n \n                 self.prove_predicates(\n-                    sig.inputs_and_output.iter().map(|ty| ty::PredicateKind::WellFormed(ty.into())),\n+                    sig.inputs_and_output\n+                        .iter()\n+                        .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),\n                     term_location.to_locations(),\n                     ConstraintCategory::Boring,\n                 );"}, {"sha": "b5c0307255771d3a4d9da59c21e6ca98df076488", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -669,8 +669,10 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         self.obligations.push(Obligation {\n             cause: self.cause.clone(),\n             param_env: self.param_env,\n-            predicate: ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(sup, sub))\n-                .to_predicate(self.infcx.tcx),\n+            predicate: ty::Binder::dummy(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n+                sup, sub,\n+            )))\n+            .to_predicate(self.infcx.tcx),\n             recursion_depth: 0,\n         });\n     }"}, {"sha": "7deded0282cd3f987135280c290cc13b690b8281", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -360,7 +360,8 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             self.obligations.push(Obligation::new(\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::PredicateKind::WellFormed(b_ty.into()).to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))\n+                    .to_predicate(self.infcx.tcx),\n             ));\n         }\n \n@@ -463,7 +464,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         self.obligations.push(Obligation::new(\n             self.trace.cause.clone(),\n             self.param_env,\n-            predicate.to_predicate(self.tcx()),\n+            ty::Binder::dummy(predicate).to_predicate(self.tcx()),\n         ));\n     }\n }"}, {"sha": "8ef0d132cf09fc5692a956adcd3c0c9bfe0da086", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -97,11 +97,11 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n                 self.fields.obligations.push(Obligation::new(\n                     self.fields.trace.cause.clone(),\n                     self.fields.param_env,\n-                    ty::PredicateKind::Subtype(ty::SubtypePredicate {\n+                    ty::Binder::dummy(ty::PredicateKind::Subtype(ty::SubtypePredicate {\n                         a_is_expected: self.a_is_expected,\n                         a,\n                         b,\n-                    })\n+                    }))\n                     .to_predicate(self.tcx()),\n                 ));\n "}, {"sha": "a4509c69b3c0565553c2eab2b77a35e207f6584e", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -34,7 +34,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n                 cause,\n                 recursion_depth: 0,\n                 param_env,\n-                predicate: trait_ref.without_const().to_predicate(infcx.tcx),\n+                predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(infcx.tcx),\n             },\n         );\n     }"}, {"sha": "30d5613d5820d8664817bab71e3ed0d836ada1f1", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -231,6 +231,7 @@ impl Elaborator<'tcx> {\n                                 None\n                             }\n                         })\n+                        .map(ty::Binder::dummy)\n                         .map(|predicate_kind| predicate_kind.to_predicate(tcx))\n                         .filter(|&predicate| visited.insert(predicate))\n                         .map(|predicate| {"}, {"sha": "ab27bd6caa7df8033662c5b9a7e4dff5f310e1ce", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -792,23 +792,6 @@ impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     }\n }\n \n-impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n-    #[inline(always)]\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        tcx.mk_predicate(Binder::dummy(self))\n-    }\n-}\n-\n-impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::Trait(ty::TraitPredicate {\n-            trait_ref: self.value,\n-            constness: self.constness,\n-        })\n-        .to_predicate(tcx)\n-    }\n-}\n-\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.value"}, {"sha": "a89796f172c5a588c398ce440034b07936bd2857", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let obligation = traits::Obligation::new(\n             cause.clone(),\n             self.param_env,\n-            trait_ref.without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");"}, {"sha": "8fb4eb641c26a913af2e04053b1e591babf53452", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -120,7 +120,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n             cause: traits::ObligationCause::dummy(),\n             param_env,\n             recursion_depth: 0,\n-            predicate: trait_ref.without_const().to_predicate(self.tcx),\n+            predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx),\n         };\n         self.evaluate_obligation(&obligation).unwrap_or(traits::EvaluationResult::EvaluatedToErr)\n     }"}, {"sha": "1f4bdb316ad3a3e2b19bb3a7dca3c3b6f4eb33e5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -724,7 +724,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let new_obligation = Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                new_trait_ref.without_const().to_predicate(self.tcx),\n+                ty::Binder::dummy(new_trait_ref).without_const().to_predicate(self.tcx),\n             );\n \n             if self.predicate_must_hold_modulo_regions(&new_obligation) {"}, {"sha": "788c55276ad361f4e1aa5ff02fb11d853df81eb3", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -405,7 +405,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 | ty::PredicateKind::Coerce(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => {\n-                    let pred = infcx.replace_bound_vars_with_placeholders(binder);\n+                    let pred =\n+                        ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![\n                         obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))"}, {"sha": "baa26cb9ef877359fc3731034c1dcd838dd3237f", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -139,7 +139,8 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         infcx.tcx.def_path_str(def_id)\n     );\n \n-    let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n+    let trait_ref =\n+        ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n     let obligation = Obligation {\n         param_env,\n         cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),"}, {"sha": "8bc67f0d17df60a44fe65eb1f1e046edcaaf516b", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -671,10 +671,10 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::TraitRef {\n+        let unsize_predicate = ty::Binder::dummy(ty::TraitRef {\n             def_id: unsize_did,\n             substs: tcx.mk_substs_trait(tcx.types.self_param, &[unsized_self_ty.into()]),\n-        }\n+        })\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -689,7 +689,9 @@ fn receiver_is_dispatchable<'tcx>(\n                     }\n                 });\n \n-            ty::TraitRef { def_id: unsize_did, substs }.without_const().to_predicate(tcx)\n+            ty::Binder::dummy(ty::TraitRef { def_id: unsize_did, substs })\n+                .without_const()\n+                .to_predicate(tcx)\n         };\n \n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n@@ -703,10 +705,10 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::TraitRef {\n+        let predicate = ty::Binder::dummy(ty::TraitRef {\n             def_id: dispatch_from_dyn_did,\n             substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n-        }\n+        })\n         .without_const()\n         .to_predicate(tcx);\n "}, {"sha": "4e86807ba183e5677089d350c094423acefe04c5", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -646,7 +646,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)\n+                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind))\n                     .to_predicate(self.tcx()),\n             ));\n         }\n@@ -898,10 +898,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::TraitRef::new(\n+                let tr = ty::Binder::dummy(ty::TraitRef::new(\n                     tcx.require_lang_item(LangItem::Sized, None),\n                     tcx.mk_substs_trait(source, &[]),\n-                );\n+                ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "ed49abbbedc92dfe8415a16f377c45f0c84ba567", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -248,7 +248,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n         cause,\n         param_env,\n         recursion_depth,\n-        predicate: trait_ref.without_const().to_predicate(tcx),\n+        predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n     }\n }\n "}, {"sha": "68081646391b348b1616c82d746d3918353b47ae", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -349,7 +349,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         new_cause,\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n                     )\n                 }),\n         );\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n                     )\n                 }),\n         );\n@@ -416,7 +416,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 cause,\n                 self.recursion_depth,\n                 self.param_env,\n-                trait_ref.without_const().to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.infcx.tcx),\n             ));\n         }\n     }\n@@ -443,9 +443,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let obligations = self.nominal_obligations(uv.def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(\n+                            let predicate = ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n                                 ty::Unevaluated::new(uv.def, substs),\n-                            )\n+                            ))\n                             .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth(\n@@ -469,8 +469,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                     cause,\n                                     self.recursion_depth,\n                                     self.param_env,\n-                                    ty::PredicateKind::WellFormed(resolved_constant.into())\n-                                        .to_predicate(self.tcx()),\n+                                    ty::Binder::dummy(ty::PredicateKind::WellFormed(\n+                                        resolved_constant.into(),\n+                                    ))\n+                                    .to_predicate(self.tcx()),\n                                 ));\n                             }\n                         }\n@@ -556,8 +558,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             cause,\n                             depth,\n                             param_env,\n-                            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(rty, r))\n-                                .to_predicate(self.tcx()),\n+                            ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(rty, r),\n+                            ))\n+                            .to_predicate(self.tcx()),\n                         ));\n                     }\n                 }\n@@ -646,7 +650,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 cause.clone(),\n                                 depth,\n                                 param_env,\n-                                ty::PredicateKind::ObjectSafe(did).to_predicate(tcx),\n+                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did))\n+                                    .to_predicate(tcx),\n                             )\n                         }));\n                     }\n@@ -673,7 +678,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             cause,\n                             self.recursion_depth,\n                             param_env,\n-                            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+                            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n+                                .to_predicate(self.tcx()),\n                         ));\n                     } else {\n                         // Yes, resolved, proceed with the result."}, {"sha": "f954cab240ca20db69d31a7f38a8c328db404583", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -156,7 +156,8 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n             self.relate(self_ty, Variance::Invariant, impl_self_ty)?;\n \n             self.prove_predicate(\n-                ty::PredicateKind::WellFormed(impl_self_ty.into()).to_predicate(self.tcx()),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(impl_self_ty.into()))\n+                    .to_predicate(self.tcx()),\n                 span,\n             );\n         }\n@@ -173,7 +174,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         // type were ill-formed but did not appear in `ty`,\n         // which...could happen with normalization...\n         self.prove_predicate(\n-            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())).to_predicate(self.tcx()),\n             span,\n         );\n         Ok(())"}, {"sha": "6a231e719e66462a9751bd69392442e3648a124a", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -524,13 +524,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for o in obligations {\n                     match o.predicate.kind().skip_binder() {\n                         ty::PredicateKind::Trait(t) => {\n-                            let pred = ty::PredicateKind::Trait(ty::TraitPredicate {\n-                                trait_ref: ty::TraitRef {\n-                                    def_id: t.def_id(),\n-                                    substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n-                                },\n-                                constness: t.constness,\n-                            });\n+                            let pred =\n+                                ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n+                                    trait_ref: ty::TraitRef {\n+                                        def_id: t.def_id(),\n+                                        substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n+                                    },\n+                                    constness: t.constness,\n+                                }));\n                             let obl = Obligation::new(\n                                 o.cause.clone(),\n                                 self.param_env,"}, {"sha": "d6ba40654db828fc3021a79aba739449e6ffca4c", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -273,10 +273,10 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     obligations.push(Obligation::new(\n                         self.cause.clone(),\n                         self.param_env,\n-                        ty::PredicateKind::Coerce(ty::CoercePredicate {\n+                        ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {\n                             a: source_ty,\n                             b: target_ty,\n-                        })\n+                        }))\n                         .to_predicate(self.tcx()),\n                     ));\n                 }"}, {"sha": "59c1e97d13ff1b5825fe5e318b6db426b386e664", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.register_predicate(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(arg).to_predicate(self.tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx),\n         ));\n     }\n "}, {"sha": "8c547c74426e6488209f3d8d191dc8bb4d59ab6f", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -412,7 +412,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         obligations.push(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(method_ty.into()).to_predicate(tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())).to_predicate(tcx),\n         ));\n \n         let callee = MethodCallee { def_id, substs: trait_ref.substs, sig: fn_sig };"}, {"sha": "bf83191ad57b177d35038590bf412d52df9c3cd4", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -1470,7 +1470,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    let predicate = trait_ref.without_const().to_predicate(self.tcx);\n+                    let predicate =\n+                        ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx);\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         result = ProbeResult::NoMatch;"}, {"sha": "fba3eb3f5e2a338af57329ff7342b5ea1c32b282", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -541,10 +541,10 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n                         ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n                         discr_substs,\n-                    ))\n+                    )))\n                     .to_predicate(tcx),\n                 ));\n             }\n@@ -1290,10 +1290,10 @@ fn receiver_is_implemented(\n     cause: ObligationCause<'tcx>,\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n-    let trait_ref = ty::TraitRef {\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n         def_id: receiver_trait_def_id,\n         substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n-    };\n+    });\n \n     let obligation = traits::Obligation::new(\n         cause,"}, {"sha": "1ec094d6ef953b2dee8296e7e3d08bd3b89e021f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -607,7 +607,8 @@ fn type_param_predicates(\n                 ItemKind::Trait(_, _, ref generics, ..) => {\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_hir_id {\n-                        let identity_trait_ref = ty::TraitRef::identity(tcx, item_def_id);\n+                        let identity_trait_ref =\n+                            ty::Binder::dummy(ty::TraitRef::identity(tcx, item_def_id));\n                         extend =\n                             Some((identity_trait_ref.without_const().to_predicate(tcx), item.span));\n                     }\n@@ -2002,11 +2003,14 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n             // *current* state of an external file.\n             span = tcx.sess.source_map().guess_head_span(span);\n         }\n-        result.predicates =\n-            tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n-                ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(tcx),\n+        result.predicates = tcx.arena.alloc_from_iter(\n+            result.predicates.iter().copied().chain(std::iter::once((\n+                ty::Binder::dummy(ty::TraitRef::identity(tcx, def_id))\n+                    .without_const()\n+                    .to_predicate(tcx),\n                 span,\n-            ))));\n+            ))),\n+        );\n     }\n     debug!(\"predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n@@ -2238,8 +2242,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         }\n                         _ => bug!(),\n                     };\n-                    let pred = ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n-                        .to_predicate(icx.tcx);\n+                    let pred = ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n+                        ty::OutlivesPredicate(r1, r2),\n+                    ))\n+                    .to_predicate(icx.tcx);\n \n                     (pred, span)\n                 }))\n@@ -2304,7 +2310,8 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(uv.shrink()).to_predicate(self.tcx),\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                        .to_predicate(self.tcx),\n                     span,\n                 ));\n             }"}, {"sha": "39bcf8999323d7fb7a9a877cda60ee0d4b355bdb", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -83,7 +83,8 @@ fn diagnostic_hir_wf_check<'tcx>(\n                     traits::Obligation::new(\n                         cause,\n                         self.param_env,\n-                        ty::PredicateKind::WellFormed(tcx_ty.into()).to_predicate(self.tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into()))\n+                            .to_predicate(self.tcx),\n                     ),\n                 );\n "}, {"sha": "9c6efffdaf0fe3d1d043d784c58143ac4281f2aa", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76bdf9058172dd22a67332b45c0ab93268b3b3/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=be76bdf9058172dd22a67332b45c0ab93268b3b3", "patch": "@@ -104,13 +104,15 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some((\n-                            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty1, region2))\n-                                .to_predicate(tcx),\n+                            ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(ty1, region2),\n+                            ))\n+                            .to_predicate(tcx),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n-                            ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n-                                region1, region2,\n+                            ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n+                                ty::OutlivesPredicate(region1, region2),\n                             ))\n                             .to_predicate(tcx),\n                             span,"}]}