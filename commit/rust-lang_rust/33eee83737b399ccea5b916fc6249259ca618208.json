{"sha": "33eee83737b399ccea5b916fc6249259ca618208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZWVlODM3MzdiMzk5Y2NlYTViOTE2ZmM2MjQ5MjU5Y2E2MTgyMDg=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-30T12:24:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "Removed code duplication for CommonWriteMethods", "tree": {"sha": "36bc8f81b34af106a96612b26913bb7e63609190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36bc8f81b34af106a96612b26913bb7e63609190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33eee83737b399ccea5b916fc6249259ca618208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33eee83737b399ccea5b916fc6249259ca618208", "html_url": "https://github.com/rust-lang/rust/commit/33eee83737b399ccea5b916fc6249259ca618208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33eee83737b399ccea5b916fc6249259ca618208/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc18d3de50b6540e53ddcfefb88dee9ed991264", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc18d3de50b6540e53ddcfefb88dee9ed991264", "html_url": "https://github.com/rust-lang/rust/commit/4cc18d3de50b6540e53ddcfefb88dee9ed991264"}], "stats": {"total": 78, "additions": 36, "deletions": 42}, "files": [{"sha": "24f58ac59c15ca244880c284de920531d9c9e178", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33eee83737b399ccea5b916fc6249259ca618208/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33eee83737b399ccea5b916fc6249259ca618208/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=33eee83737b399ccea5b916fc6249259ca618208", "patch": "@@ -24,7 +24,7 @@ use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Sanitize\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n-use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic, BasicBlock, True};\n+use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic, BasicBlock};\n use llvm_util;\n use {CodegenResults, ModuleCodegen, CompiledModule, ModuleKind, // ModuleLlvm,\n      CachedModuleCodegen};\n@@ -47,6 +47,7 @@ use syntax_pos::symbol::Symbol;\n use type_::Type;\n use context::{is_pie_binary, get_reloc_model};\n use interfaces::{Backend, CommonWriteMethods};\n+use common;\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n use value::Value;\n@@ -437,16 +438,11 @@ impl<'ll> Backend for CodegenContext<'ll> {\n \n impl CommonWriteMethods for CodegenContext<'ll> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n-        unsafe {\n-            llvm::LLVMTypeOf(v)\n-        }\n+        common::val_ty(v)\n     }\n \n     fn c_bytes_in_context(&self, llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n-        unsafe {\n-            let ptr = bytes.as_ptr() as *const c_char;\n-            return llvm::LLVMConstStringInContext(llcx, ptr, bytes.len() as c_uint, True);\n-        }\n+        common::c_bytes_in_context(llcx, bytes)\n     }\n \n     fn c_struct_in_context(\n@@ -455,11 +451,7 @@ impl CommonWriteMethods for CodegenContext<'ll> {\n         elts: &[&'a Value],\n         packed: bool,\n     ) -> &'a Value {\n-        unsafe {\n-            llvm::LLVMConstStructInContext(llcx,\n-                                           elts.as_ptr(), elts.len() as c_uint,\n-                                           packed as llvm::Bool)\n-        }\n+        common::c_struct_in_context(llcx, elts, packed)\n     }\n }\n "}, {"sha": "80f8bbeabda38c063250581716cd521f5f6cb52b", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/33eee83737b399ccea5b916fc6249259ca618208/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33eee83737b399ccea5b916fc6249259ca618208/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=33eee83737b399ccea5b916fc6249259ca618208", "patch": "@@ -399,18 +399,38 @@ impl<'ll, 'tcx : 'll> CommonMethods for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n+pub fn val_ty(v: &'ll Value) -> &'ll Type {\n+    unsafe {\n+        llvm::LLVMTypeOf(v)\n+    }\n+}\n+\n+pub fn c_bytes_in_context(llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n+    unsafe {\n+        let ptr = bytes.as_ptr() as *const c_char;\n+        return llvm::LLVMConstStringInContext(llcx, ptr, bytes.len() as c_uint, True);\n+    }\n+}\n+\n+pub fn c_struct_in_context(\n+    llcx: &'a llvm::Context,\n+    elts: &[&'a Value],\n+    packed: bool,\n+) -> &'a Value {\n+    unsafe {\n+        llvm::LLVMConstStructInContext(llcx,\n+                                       elts.as_ptr(), elts.len() as c_uint,\n+                                       packed as Bool)\n+    }\n+}\n+\n impl<'ll, 'tcx : 'll> CommonWriteMethods for CodegenCx<'ll, 'tcx> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n-        unsafe {\n-            llvm::LLVMTypeOf(v)\n-        }\n+        val_ty(v)\n     }\n \n     fn c_bytes_in_context(&self, llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n-        unsafe {\n-            let ptr = bytes.as_ptr() as *const c_char;\n-            return llvm::LLVMConstStringInContext(llcx, ptr, bytes.len() as c_uint, True);\n-        }\n+        c_bytes_in_context(llcx, bytes)\n     }\n \n     fn c_struct_in_context(\n@@ -419,11 +439,7 @@ impl<'ll, 'tcx : 'll> CommonWriteMethods for CodegenCx<'ll, 'tcx> {\n         elts: &[&'a Value],\n         packed: bool,\n     ) -> &'a Value {\n-        unsafe {\n-            llvm::LLVMConstStructInContext(llcx,\n-                                           elts.as_ptr(), elts.len() as c_uint,\n-                                           packed as Bool)\n-        }\n+        c_struct_in_context(llcx, elts, packed)\n     }\n }\n "}, {"sha": "e228dc044f17700932801aa23adddcc8f3574474", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33eee83737b399ccea5b916fc6249259ca618208/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33eee83737b399ccea5b916fc6249259ca618208/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=33eee83737b399ccea5b916fc6249259ca618208", "patch": "@@ -76,7 +76,6 @@ pub use llvm_util::target_features;\n use std::any::Any;\n use std::sync::mpsc;\n use std::marker::PhantomData;\n-use libc::{c_uint, c_char};\n use rustc_data_structures::sync::Lrc;\n \n use rustc::dep_graph::DepGraph;\n@@ -361,20 +360,11 @@ impl ModuleLlvm<'ll> {\n \n impl CommonWriteMethods for ModuleLlvm<'ll> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n-        unsafe {\n-            llvm::LLVMTypeOf(v)\n-        }\n+        common::val_ty(v)\n     }\n \n     fn c_bytes_in_context(&self, llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n-        unsafe {\n-            let ptr = bytes.as_ptr() as *const c_char;\n-            return llvm::LLVMConstStringInContext(\n-                llcx,\n-                ptr,\n-                bytes.len() as c_uint,\n-                llvm::True);\n-        }\n+        common::c_bytes_in_context(llcx, bytes)\n     }\n \n     fn c_struct_in_context(\n@@ -383,11 +373,7 @@ impl CommonWriteMethods for ModuleLlvm<'ll> {\n         elts: &[&'a Value],\n         packed: bool,\n     ) -> &'a Value {\n-        unsafe {\n-            llvm::LLVMConstStructInContext(llcx,\n-                                           elts.as_ptr(), elts.len() as c_uint,\n-                                           packed as llvm::Bool)\n-        }\n+        common::c_struct_in_context(llcx, elts, packed)\n     }\n }\n "}]}