{"sha": "c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZGRmNWExZGQ1NGViZTE4ZmZiNzk0ZTA5NmMyOGE0ZWQ4ZTFkMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-11T01:28:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-11T01:28:16Z"}, "message": "Auto merge of #58784 - oli-obk:accidental_promotion, r=eddyb\n\nDon't promote function calls to nonpromotable things\n\nfixes https://github.com/rust-lang/rust/issues/58767 and fixes https://github.com/rust-lang/rust/issues/58634\n\nr? @eddyb\n\nshould we additionally check the function call return type? It might be a promotable function (or any `const fn` inside a `const fn`), but its return type might contain interior mutability.", "tree": {"sha": "a660ad702e541881d16e20426197ce2ef8a69680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a660ad702e541881d16e20426197ce2ef8a69680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16", "html_url": "https://github.com/rust-lang/rust/commit/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d71ec1358ac063fe6ff1eaed0ba6ed3cedde610", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d71ec1358ac063fe6ff1eaed0ba6ed3cedde610", "html_url": "https://github.com/rust-lang/rust/commit/9d71ec1358ac063fe6ff1eaed0ba6ed3cedde610"}, {"sha": "8c16507045a76ef616533ec29626f6ce6be40a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c16507045a76ef616533ec29626f6ce6be40a6c", "html_url": "https://github.com/rust-lang/rust/commit/8c16507045a76ef616533ec29626f6ce6be40a6c"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "97d566e586e867dc5c7c28e44db725d3f54f41a9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16", "patch": "@@ -499,6 +499,8 @@ impl Qualif for IsNotConst {\n \n // Refers to temporaries which cannot be promoted as\n // promote_consts decided they weren't simple enough.\n+// FIXME(oli-obk,eddyb): Remove this flag entirely and\n+// solely process this information via `IsNotConst`.\n struct IsNotPromotable;\n \n impl Qualif for IsNotPromotable {\n@@ -507,7 +509,7 @@ impl Qualif for IsNotPromotable {\n     fn in_call(\n         cx: &ConstCx<'_, 'tcx>,\n         callee: &Operand<'tcx>,\n-        _args: &[Operand<'tcx>],\n+        args: &[Operand<'tcx>],\n         _return_ty: Ty<'tcx>,\n     ) -> bool {\n         if cx.mode == Mode::Fn {\n@@ -520,10 +522,7 @@ impl Qualif for IsNotPromotable {\n             }\n         }\n \n-        // FIXME(eddyb) do we need \"not promotable\" in anything\n-        // other than `Mode::Fn` by any chance?\n-\n-        false\n+        Self::in_operand(cx, callee) || args.iter().any(|arg| Self::in_operand(cx, arg))\n     }\n }\n "}, {"sha": "f98406e50e9aef7c917a0ee276f8909b3418131d", "filename": "src/test/ui/consts/invalid_promotion.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16/src%2Ftest%2Fui%2Fconsts%2Finvalid_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16/src%2Ftest%2Fui%2Fconsts%2Finvalid_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid_promotion.rs?ref=c2ddf5a1dd54ebe18ffb794e096c28a4ed8e1d16", "patch": "@@ -0,0 +1,18 @@\n+// compile-pass\n+// note this was only reproducible with lib crates\n+// compile-flags: --crate-type=lib\n+\n+pub struct Hz;\n+\n+impl Hz {\n+    pub const fn num(&self) -> u32 {\n+        42\n+    }\n+    pub const fn normalized(&self) -> Hz {\n+        Hz\n+    }\n+\n+    pub const fn as_u32(&self) -> u32 {\n+        self.normalized().num() // this used to promote the `self.normalized()`\n+    }\n+}"}]}