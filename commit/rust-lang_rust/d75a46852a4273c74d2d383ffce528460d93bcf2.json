{"sha": "d75a46852a4273c74d2d383ffce528460d93bcf2", "node_id": "C_kwDOAAsO6NoAKGQ3NWE0Njg1MmE0MjczYzc0ZDJkMzgzZmZjZTUyODQ2MGQ5M2JjZjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-12T13:05:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-12T13:05:45Z"}, "message": "Merge #11686\n\n11686: feat: Enum variant field completion, enum variant / struct consistency r=Veykril a=m0rg-dev\n\nThis addresses several related inconsistencies:\r\n - tuple structs use tab stops instead of placeholders\r\n - tuple structs display in the completion menu as `Struct {\u2026}` instead of `Struct(\u2026)`\r\n - enum variants don't receive field completions at all\r\n - enum variants display differently from structs in the completion menu\r\n\r\nAlso, structs now display their type in the completion detail rather than the raw snippet text to be inserted.\r\n\r\nAs far as what's user-visible, that looks like this:\r\n\r\n| | Menu | Completion | Detail |\r\n|-|-|-|-|\r\n| Record struct (old) | `Struct {\u2026}` | `Struct { x: ${1:()}, y: ${2:()} }$0` | `Struct { x: ${1:()}, y: ${2:()} }$0` |\r\n| Record struct (new) | `Struct {\u2026}` | `Struct { x: ${1:()}, y: ${2:()} }$0` | `Struct { x: i32, y: i32 }` |\r\n| Tuple struct (old) | `Struct {\u2026}`  | `Struct($1, $2)$0` | `Struct($1, $2)` |\r\n| Tuple struct (new) | `Struct(\u2026)` | `Struct(${1:()}, ${2:()})$0` | `Struct(i32, i32)` |\r\n| Unit variant (old) | `Variant` | `Variant` | `()` |\r\n| Unit variant (new) | `Variant` | `Variant$0` | `Variant` |\r\n| Record variant (old) | `Variant` | `Variant` | `{x: i32, y: i32}` |\r\n| Record variant (new) | `Variant {\u2026}` | `Variant { x: ${1:()}, y: ${2:()} }$0` | `Variant { x: i32, y: i32 }` |\r\n| Tuple variant (old) | `Variant(\u2026)` | `Variant($0)` | `(i32, i32)` |\r\n| Tuple variant (new) | `Variant(\u2026)` | `Variant(${1:()}, ${2:()})$0` | `Variant(i32, i32)` |\r\n\r\nAdditionally, tuple variants no longer set `triggers_call_info` because it conflicts with placeholder generation, and tuple variants that require a qualified path should now use the qualified path.\r\n\r\nInternally, this also lets us break the general \"format an item with fields on it\" code out into a shared module, so that means it'll be a lot easier to implement features like #11568.\r\n\n\nCo-authored-by: Morgan Thomas <corp@m0rg.dev>", "tree": {"sha": "54379772b4157bebfd74c936a0bd6714fb82cb38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54379772b4157bebfd74c936a0bd6714fb82cb38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75a46852a4273c74d2d383ffce528460d93bcf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLJqpCRBK7hj4Ov3rIwAAEHEIADW0Vt6OR/1UacET/v2CwgV9\n0YYv/+kp3+x83Z3Sm9Uu2ipRjBQt2PaFZU15zoBvNp5RqtyykEUp2NCoXlIjw0h/\nL5dW2BbD7K2L/G2MEsrBqe1NHW0d3GZxGD09qyrIGh0aFKUAwbl2ug69t13CM0jF\njEMwK2FGo2XAZW/+IoyFUA23uzRMaHKXPSuV/pZixGXNPaB0lPxJfivSltM8BdfT\nicCuuhSNGWkWAvVu9lxwpQzjd5NhWLyH3jX8vKUwyniC+qVY+dOWSI2T9q8i8kTJ\nZEBA1JxQ7ZG//3/V2ITLd8jdvm+L40n8lkUggDqAWzL2E3PiZGGH7oxEyCCqfYI=\n=oqFM\n-----END PGP SIGNATURE-----\n", "payload": "tree 54379772b4157bebfd74c936a0bd6714fb82cb38\nparent 36e87fdb985c65dcc36a794e7004f1f79e8977d8\nparent f27c0ef1cf41ad381ac4168bb291442b68a4932b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647090345 +0000\ncommitter GitHub <noreply@github.com> 1647090345 +0000\n\nMerge #11686\n\n11686: feat: Enum variant field completion, enum variant / struct consistency r=Veykril a=m0rg-dev\n\nThis addresses several related inconsistencies:\r\n - tuple structs use tab stops instead of placeholders\r\n - tuple structs display in the completion menu as `Struct {\u2026}` instead of `Struct(\u2026)`\r\n - enum variants don't receive field completions at all\r\n - enum variants display differently from structs in the completion menu\r\n\r\nAlso, structs now display their type in the completion detail rather than the raw snippet text to be inserted.\r\n\r\nAs far as what's user-visible, that looks like this:\r\n\r\n| | Menu | Completion | Detail |\r\n|-|-|-|-|\r\n| Record struct (old) | `Struct {\u2026}` | `Struct { x: ${1:()}, y: ${2:()} }$0` | `Struct { x: ${1:()}, y: ${2:()} }$0` |\r\n| Record struct (new) | `Struct {\u2026}` | `Struct { x: ${1:()}, y: ${2:()} }$0` | `Struct { x: i32, y: i32 }` |\r\n| Tuple struct (old) | `Struct {\u2026}`  | `Struct($1, $2)$0` | `Struct($1, $2)` |\r\n| Tuple struct (new) | `Struct(\u2026)` | `Struct(${1:()}, ${2:()})$0` | `Struct(i32, i32)` |\r\n| Unit variant (old) | `Variant` | `Variant` | `()` |\r\n| Unit variant (new) | `Variant` | `Variant$0` | `Variant` |\r\n| Record variant (old) | `Variant` | `Variant` | `{x: i32, y: i32}` |\r\n| Record variant (new) | `Variant {\u2026}` | `Variant { x: ${1:()}, y: ${2:()} }$0` | `Variant { x: i32, y: i32 }` |\r\n| Tuple variant (old) | `Variant(\u2026)` | `Variant($0)` | `(i32, i32)` |\r\n| Tuple variant (new) | `Variant(\u2026)` | `Variant(${1:()}, ${2:()})$0` | `Variant(i32, i32)` |\r\n\r\nAdditionally, tuple variants no longer set `triggers_call_info` because it conflicts with placeholder generation, and tuple variants that require a qualified path should now use the qualified path.\r\n\r\nInternally, this also lets us break the general \"format an item with fields on it\" code out into a shared module, so that means it'll be a lot easier to implement features like #11568.\r\n\n\nCo-authored-by: Morgan Thomas <corp@m0rg.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75a46852a4273c74d2d383ffce528460d93bcf2", "html_url": "https://github.com/rust-lang/rust/commit/d75a46852a4273c74d2d383ffce528460d93bcf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75a46852a4273c74d2d383ffce528460d93bcf2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e87fdb985c65dcc36a794e7004f1f79e8977d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e87fdb985c65dcc36a794e7004f1f79e8977d8", "html_url": "https://github.com/rust-lang/rust/commit/36e87fdb985c65dcc36a794e7004f1f79e8977d8"}, {"sha": "f27c0ef1cf41ad381ac4168bb291442b68a4932b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27c0ef1cf41ad381ac4168bb291442b68a4932b", "html_url": "https://github.com/rust-lang/rust/commit/f27c0ef1cf41ad381ac4168bb291442b68a4932b"}], "stats": {"total": 346, "additions": 186, "deletions": 160}, "files": [{"sha": "86b1f534b273861c9897f78364e507b32f0a5f67", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -580,8 +580,8 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                ev Bar    ()\n-                ev Baz    ()\n+                ev Bar    Bar\n+                ev Baz    Baz\n                 me foo(\u2026) fn(self)\n             \"#]],\n         );\n@@ -626,7 +626,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                ev Bar ()\n+                ev Bar Bar\n             \"#]],\n         );\n     }"}, {"sha": "e8ebb3e33746f3f2e95132e6254f28d79dee0f7f", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -8,6 +8,7 @@ pub(crate) mod const_;\n pub(crate) mod pattern;\n pub(crate) mod type_alias;\n pub(crate) mod struct_literal;\n+pub(crate) mod compound;\n \n mod builder_ext;\n \n@@ -428,22 +429,22 @@ fn main() { Foo::Fo$0 }\n             expect![[r#\"\n                 [\n                     CompletionItem {\n-                        label: \"Foo\",\n+                        label: \"Foo {\u2026}\",\n                         source_range: 54..56,\n                         delete: 54..56,\n-                        insert: \"Foo\",\n+                        insert: \"Foo { x: ${1:()}, y: ${2:()} }$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"{x: i32, y: i32}\",\n+                        detail: \"Foo { x: i32, y: i32 }\",\n                     },\n                 ]\n             \"#]],\n         );\n     }\n \n     #[test]\n-    fn enum_detail_doesnt_include_tuple_fields() {\n+    fn enum_detail_includes_tuple_fields() {\n         check(\n             r#\"\n enum Foo { Foo (i32, i32) }\n@@ -457,13 +458,11 @@ fn main() { Foo::Fo$0 }\n                         label: \"Foo(\u2026)\",\n                         source_range: 46..48,\n                         delete: 46..48,\n-                        insert: \"Foo($0)\",\n+                        insert: \"Foo(${1:()}, ${2:()})$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        lookup: \"Foo\",\n-                        detail: \"(i32, i32)\",\n-                        trigger_call_info: true,\n+                        detail: \"Foo(i32, i32)\",\n                     },\n                 ]\n             \"#]],\n@@ -510,7 +509,7 @@ fn main() { fo$0 }\n     }\n \n     #[test]\n-    fn enum_detail_just_parentheses_for_unit() {\n+    fn enum_detail_just_name_for_unit() {\n         check(\n             r#\"\n enum Foo { Foo }\n@@ -524,11 +523,11 @@ fn main() { Foo::Fo$0 }\n                         label: \"Foo\",\n                         source_range: 35..37,\n                         delete: 35..37,\n-                        insert: \"Foo\",\n+                        insert: \"Foo$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"()\",\n+                        detail: \"Foo\",\n                     },\n                 ]\n             \"#]],\n@@ -572,15 +571,15 @@ fn main() { let _: m::Spam = S$0 }\n                         ),\n                     },\n                     CompletionItem {\n-                        label: \"Spam::Bar(\u2026)\",\n+                        label: \"m::Spam::Bar(\u2026)\",\n                         source_range: 75..76,\n                         delete: 75..76,\n-                        insert: \"Spam::Bar($0)\",\n+                        insert: \"m::Spam::Bar(${1:()})$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n                         lookup: \"Spam::Bar\",\n-                        detail: \"(i32)\",\n+                        detail: \"m::Spam::Bar(i32)\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: false,\n                             type_match: Some(\n@@ -591,18 +590,17 @@ fn main() { let _: m::Spam = S$0 }\n                             is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n-                        trigger_call_info: true,\n                     },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,\n                         delete: 75..76,\n-                        insert: \"m::Spam::Foo\",\n+                        insert: \"m::Spam::Foo$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n                         lookup: \"Spam::Foo\",\n-                        detail: \"()\",\n+                        detail: \"m::Spam::Foo\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: false,\n                             type_match: Some(\n@@ -787,11 +785,11 @@ use self::E::*;\n                         label: \"V\",\n                         source_range: 10..12,\n                         delete: 10..12,\n-                        insert: \"V\",\n+                        insert: \"V$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"()\",\n+                        detail: \"V\",\n                         documentation: Documentation(\n                             \"variant docs\",\n                         ),"}, {"sha": "70767a2a9ccadc69b989efbf2283d83a4146fb6a", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -8,6 +8,7 @@ use crate::{context::PathKind, item::Builder, patterns::ImmediateLocation, Compl\n #[derive(Debug)]\n pub(super) enum Params {\n     Named(Option<hir::SelfParam>, Vec<hir::Param>),\n+    #[allow(dead_code)]\n     Anonymous(usize),\n }\n "}, {"sha": "c7f3bd1f79a92685178b98a40ec46c7c9bf5567a", "filename": "crates/ide_completion/src/render/compound.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -0,0 +1,95 @@\n+//! Code common to structs, unions, and enum variants.\n+\n+use crate::render::RenderContext;\n+use hir::{db::HirDatabase, HasAttrs, HasVisibility, HirDisplay, StructKind};\n+use ide_db::SnippetCap;\n+use itertools::Itertools;\n+use syntax::SmolStr;\n+\n+/// A rendered struct, union, or enum variant, split into fields for actual\n+/// auto-completion (`literal`, using `field: ()`) and display in the\n+/// completions menu (`detail`, using `field: type`).\n+pub(crate) struct RenderedCompound {\n+    pub(crate) literal: String,\n+    pub(crate) detail: String,\n+}\n+\n+/// Render a record type (or sub-type) to a `RenderedCompound`. Use `None` for\n+/// the `name` argument for an anonymous type.\n+pub(crate) fn render_record(\n+    db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n+    fields: &[hir::Field],\n+    name: Option<&str>,\n+) -> RenderedCompound {\n+    let completions = fields.iter().enumerate().format_with(\", \", |(idx, field), f| {\n+        if snippet_cap.is_some() {\n+            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n+        } else {\n+            f(&format_args!(\"{}: ()\", field.name(db)))\n+        }\n+    });\n+\n+    let types = fields.iter().format_with(\", \", |field, f| {\n+        f(&format_args!(\"{}: {}\", field.name(db), field.ty(db).display(db)))\n+    });\n+\n+    RenderedCompound {\n+        literal: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), completions),\n+        detail: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), types),\n+    }\n+}\n+\n+/// Render a tuple type (or sub-type) to a `RenderedCompound`. Use `None` for\n+/// the `name` argument for an anonymous type.\n+pub(crate) fn render_tuple(\n+    db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n+    fields: &[hir::Field],\n+    name: Option<&str>,\n+) -> RenderedCompound {\n+    let completions = fields.iter().enumerate().format_with(\", \", |(idx, _), f| {\n+        if snippet_cap.is_some() {\n+            f(&format_args!(\"${{{}:()}}\", idx + 1))\n+        } else {\n+            f(&format_args!(\"()\"))\n+        }\n+    });\n+\n+    let types = fields.iter().format_with(\", \", |field, f| f(&field.ty(db).display(db)));\n+\n+    RenderedCompound {\n+        literal: format!(\"{}({})\", name.unwrap_or(\"\"), completions),\n+        detail: format!(\"{}({})\", name.unwrap_or(\"\"), types),\n+    }\n+}\n+\n+/// Find all the visible fields in a given list. Returns the list of visible\n+/// fields, plus a boolean for whether the list is comprehensive (contains no\n+/// private fields and its item is not marked `#[non_exhaustive]`).\n+pub(crate) fn visible_fields(\n+    ctx: &RenderContext<'_>,\n+    fields: &[hir::Field],\n+    item: impl HasAttrs,\n+) -> Option<(Vec<hir::Field>, bool)> {\n+    let module = ctx.completion.module?;\n+    let n_fields = fields.len();\n+    let fields = fields\n+        .iter()\n+        .filter(|field| field.is_visible_from(ctx.db(), module))\n+        .copied()\n+        .collect::<Vec<_>>();\n+\n+    let fields_omitted =\n+        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    Some((fields, fields_omitted))\n+}\n+\n+/// Format a struct, etc. literal option for display in the completions menu.\n+pub(crate) fn format_literal_label(name: &str, kind: StructKind) -> SmolStr {\n+    match kind {\n+        StructKind::Tuple => SmolStr::from_iter([name, \"(\u2026)\"]),\n+        StructKind::Record => SmolStr::from_iter([name, \" {\u2026}\"]),\n+        StructKind::Unit => name.into(),\n+    }\n+}"}, {"sha": "5b485005d3fae5ce337d6412dc0ea0b4a893e75e", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 34, "deletions": 57, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -1,13 +1,15 @@\n //! Renderer for `enum` variants.\n \n-use hir::{db::HirDatabase, HasAttrs, HirDisplay, StructKind};\n+use hir::{HasAttrs, StructKind};\n use ide_db::SymbolKind;\n-use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n     item::{CompletionItem, ImportEdit},\n-    render::{builder_ext::Params, compute_ref_match, compute_type_match, RenderContext},\n+    render::{\n+        compound::{format_literal_label, render_record, render_tuple, RenderedCompound},\n+        compute_ref_match, compute_type_match, RenderContext,\n+    },\n     CompletionRelevance,\n };\n \n@@ -46,20 +48,42 @@ fn render(\n     let qualified_name = qualified_name.to_string();\n     let short_qualified_name: SmolStr = short_qualified_name.to_string().into();\n \n-    let mut item = CompletionItem::new(SymbolKind::Variant, ctx.source_range(), qualified_name);\n+    let mut rendered = match variant_kind {\n+        StructKind::Tuple => {\n+            render_tuple(db, ctx.snippet_cap(), &variant.fields(db), Some(&qualified_name))\n+        }\n+        StructKind::Record => {\n+            render_record(db, ctx.snippet_cap(), &variant.fields(db), Some(&qualified_name))\n+        }\n+        StructKind::Unit => {\n+            RenderedCompound { literal: qualified_name.clone(), detail: qualified_name.clone() }\n+        }\n+    };\n+\n+    if ctx.snippet_cap().is_some() {\n+        rendered.literal.push_str(\"$0\");\n+    }\n+\n+    let mut item = CompletionItem::new(\n+        SymbolKind::Variant,\n+        ctx.source_range(),\n+        format_literal_label(&qualified_name, variant_kind),\n+    );\n+\n     item.set_documentation(variant.docs(db))\n         .set_deprecated(ctx.is_deprecated(variant))\n-        .detail(detail(db, variant, variant_kind));\n+        .detail(rendered.detail);\n+\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, rendered.literal),\n+        None => item.insert_text(rendered.literal),\n+    };\n \n     if let Some(import_to_add) = import_to_add {\n         item.add_import(import_to_add);\n     }\n \n-    if variant_kind == hir::StructKind::Tuple {\n-        cov_mark::hit!(inserts_parens_for_tuple_enums);\n-        let params = Params::Anonymous(variant.fields(db).len());\n-        item.add_call_parens(completion, short_qualified_name, params);\n-    } else if qualified {\n+    if qualified {\n         item.lookup_by(short_qualified_name);\n     }\n \n@@ -75,50 +99,3 @@ fn render(\n \n     item.build()\n }\n-\n-fn detail(db: &dyn HirDatabase, variant: hir::Variant, variant_kind: StructKind) -> String {\n-    let detail_types = variant.fields(db).into_iter().map(|field| (field.name(db), field.ty(db)));\n-\n-    match variant_kind {\n-        hir::StructKind::Tuple | hir::StructKind::Unit => {\n-            format!(\"({})\", detail_types.format_with(\", \", |(_, t), f| f(&t.display(db))))\n-        }\n-        hir::StructKind::Record => {\n-            format!(\n-                \"{{{}}}\",\n-                detail_types.format_with(\", \", |(n, t), f| {\n-                    f(&n)?;\n-                    f(&\": \")?;\n-                    f(&t.display(db))\n-                }),\n-            )\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::check_edit;\n-\n-    #[test]\n-    fn inserts_parens_for_tuple_enums() {\n-        cov_mark::check!(inserts_parens_for_tuple_enums);\n-        check_edit(\n-            \"Some\",\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main() -> Option<i32> {\n-    Som$0\n-}\n-\"#,\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main() -> Option<i32> {\n-    Some($0)\n-}\n-\"#,\n-        );\n-    }\n-}"}, {"sha": "a686be669135dc257fc421ea0ea00ed4cd509052", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 24, "deletions": 69, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -1,11 +1,15 @@\n //! Renderer for `struct` literal.\n \n-use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n-use ide_db::SnippetCap;\n-use itertools::Itertools;\n+use hir::{HasAttrs, Name, StructKind};\n use syntax::SmolStr;\n \n-use crate::{render::RenderContext, CompletionItem, CompletionItemKind};\n+use crate::{\n+    render::compound::{\n+        format_literal_label, render_record, render_tuple, visible_fields, RenderedCompound,\n+    },\n+    render::RenderContext,\n+    CompletionItem, CompletionItemKind,\n+};\n \n pub(crate) fn render_struct_literal(\n     ctx: RenderContext<'_>,\n@@ -25,29 +29,31 @@ pub(crate) fn render_struct_literal(\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n \n-    let literal = render_literal(&ctx, path, &name, strukt.kind(ctx.db()), &visible_fields)?;\n+    let rendered = render_literal(&ctx, path, &name, strukt.kind(ctx.db()), &visible_fields)?;\n \n-    Some(build_completion(ctx, name, literal, strukt))\n+    Some(build_completion(&ctx, name, rendered, strukt.kind(ctx.db()), strukt))\n }\n \n fn build_completion(\n-    ctx: RenderContext<'_>,\n+    ctx: &RenderContext<'_>,\n     name: SmolStr,\n-    literal: String,\n+    rendered: RenderedCompound,\n+    kind: StructKind,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n     let mut item = CompletionItem::new(\n         CompletionItemKind::Snippet,\n         ctx.source_range(),\n-        SmolStr::from_iter([&name, \" {\u2026}\"]),\n+        format_literal_label(&name, kind),\n     );\n+\n     item.set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n-        .detail(&literal)\n+        .detail(&rendered.detail)\n         .set_relevance(ctx.completion_relevance());\n     match ctx.snippet_cap() {\n-        Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n-        None => item.insert_text(literal),\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, rendered.literal),\n+        None => item.insert_text(rendered.literal),\n     };\n     item.build()\n }\n@@ -58,7 +64,7 @@ fn render_literal(\n     name: &str,\n     kind: StructKind,\n     fields: &[hir::Field],\n-) -> Option<String> {\n+) -> Option<RenderedCompound> {\n     let path_string;\n \n     let qualified_name = if let Some(path) = path {\n@@ -68,69 +74,18 @@ fn render_literal(\n         name\n     };\n \n-    let mut literal = match kind {\n+    let mut rendered = match kind {\n         StructKind::Tuple if ctx.snippet_cap().is_some() => {\n-            render_tuple_as_literal(fields, qualified_name)\n+            render_tuple(ctx.db(), ctx.snippet_cap(), fields, Some(qualified_name))\n         }\n         StructKind::Record => {\n-            render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, qualified_name)\n+            render_record(ctx.db(), ctx.snippet_cap(), fields, Some(qualified_name))\n         }\n         _ => return None,\n     };\n \n     if ctx.snippet_cap().is_some() {\n-        literal.push_str(\"$0\");\n+        rendered.literal.push_str(\"$0\");\n     }\n-    Some(literal)\n-}\n-\n-fn render_record_as_literal(\n-    db: &dyn HirDatabase,\n-    snippet_cap: Option<SnippetCap>,\n-    fields: &[hir::Field],\n-    name: &str,\n-) -> String {\n-    let fields = fields.iter();\n-    if snippet_cap.is_some() {\n-        format!(\n-            \"{name} {{ {} }}\",\n-            fields\n-                .enumerate()\n-                .map(|(idx, field)| format!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n-                .format(\", \"),\n-            name = name\n-        )\n-    } else {\n-        format!(\n-            \"{name} {{ {} }}\",\n-            fields.map(|field| format!(\"{}: ()\", field.name(db))).format(\", \"),\n-            name = name\n-        )\n-    }\n-}\n-\n-fn render_tuple_as_literal(fields: &[hir::Field], name: &str) -> String {\n-    format!(\n-        \"{name}({})\",\n-        fields.iter().enumerate().map(|(idx, _)| format!(\"${}\", idx + 1)).format(\", \"),\n-        name = name\n-    )\n-}\n-\n-fn visible_fields(\n-    ctx: &RenderContext<'_>,\n-    fields: &[hir::Field],\n-    item: impl HasAttrs,\n-) -> Option<(Vec<hir::Field>, bool)> {\n-    let module = ctx.completion.module?;\n-    let n_fields = fields.len();\n-    let fields = fields\n-        .iter()\n-        .filter(|field| field.is_visible_from(ctx.db(), module))\n-        .copied()\n-        .collect::<Vec<_>>();\n-\n-    let fields_omitted =\n-        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n-    Some((fields, fields_omitted))\n+    Some(rendered)\n }"}, {"sha": "bb8b34b79a337db482ec17aa182aee99d25d0214", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -61,7 +61,7 @@ fn baz() {\n             fn function()    fn()\n             sc STATIC\n             un Union\n-            ev TupleV(\u2026)     (u32)\n+            ev TupleV(\u2026)     TupleV(u32)\n             ct CONST\n         \"#]],\n     )\n@@ -171,7 +171,7 @@ impl Unit {\n             fn function()   fn()\n             sc STATIC\n             un Union\n-            ev TupleV(\u2026)    (u32)\n+            ev TupleV(\u2026)    TupleV(u32)\n             ct CONST\n         \"#]],\n     );\n@@ -200,7 +200,7 @@ impl Unit {\n             fn function() fn()\n             sc STATIC\n             un Union\n-            ev TupleV(\u2026)  (u32)\n+            ev TupleV(\u2026)  TupleV(u32)\n             ct CONST\n         \"#]],\n     );\n@@ -543,9 +543,9 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleV(\u2026)   (u32)\n-            ev RecordV     {field: u32}\n-            ev UnitV       ()\n+            ev TupleV(\u2026)   TupleV(u32)\n+            ev RecordV {\u2026} RecordV { field: u32 }\n+            ev UnitV       UnitV\n             ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n             ta AssocType   type AssocType = ()"}, {"sha": "7767f2463272f997416cf09fc1fdf75d0fa2cfb2", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -218,7 +218,7 @@ fn foo() {\n         expect![[r#\"\n             kw ref\n             kw mut\n-            ev E::X  ()\n+            ev E::X  E::X\n             en E\n             ma m!(\u2026) macro_rules! m\n         \"#]],\n@@ -291,9 +291,9 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleV(\u2026) (u32)\n-            ev RecordV   {field: u32}\n-            ev UnitV     ()\n+            ev TupleV(\u2026)   TupleV(u32)\n+            ev RecordV {\u2026} RecordV { field: u32 }\n+            ev UnitV       UnitV\n         \"#]],\n     );\n }"}, {"sha": "87d0d853b6f0e787d53722ab11cfbd74aa783d1e", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -166,7 +166,7 @@ fn main() {\n             kw true\n             kw false\n             kw return\n-            sn Foo {\u2026}              Foo { foo1: ${1:()}, foo2: ${2:()} }$0\n+            sn Foo {\u2026}              Foo { foo1: u32, foo2: u32 }\n             fd ..Default::default()\n             fd foo1                 u32\n             fd foo2                 u32"}, {"sha": "ca06cc376ff795c10ee2ba282b281b784e92fc68", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75a46852a4273c74d2d383ffce528460d93bcf2/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=d75a46852a4273c74d2d383ffce528460d93bcf2", "patch": "@@ -167,7 +167,7 @@ impl Foo {\n }\n \"#,\n         expect![[r#\"\n-            ev Variant ()\n+            ev Variant Variant\n         \"#]],\n     );\n }"}]}