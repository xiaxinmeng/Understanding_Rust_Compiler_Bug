{"sha": "4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "node_id": "C_kwDOAAsO6NoAKDRmOTc1NDA0MzI0NDVjN2UwZGM0ZWI1MWUzYWM1ZmQ5MTVkMjI1YWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-27T20:50:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T15:59:21Z"}, "message": "Reinstate confusion note.", "tree": {"sha": "6da25472b6de8d1c7da37c7a8cb408880d779891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da25472b6de8d1c7da37c7a8cb408880d779891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "html_url": "https://github.com/rust-lang/rust/commit/4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8ed585f2ba5ce3f5a1208dc19c9b07ba0b0cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8ed585f2ba5ce3f5a1208dc19c9b07ba0b0cee", "html_url": "https://github.com/rust-lang/rust/commit/4d8ed585f2ba5ce3f5a1208dc19c9b07ba0b0cee"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "f346cd48347022b49b9f5ecc0986fef9bace6f65", "filename": "compiler/rustc_mir_build/messages.ftl", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/compiler%2Frustc_mir_build%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/compiler%2Frustc_mir_build%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fmessages.ftl?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -347,15 +347,13 @@ mir_build_inform_irrefutable = `let` bindings require an \"irrefutable pattern\",\n \n mir_build_more_information = for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n \n-mir_build_res_defined_here = {$res} defined here\n-\n mir_build_adt_defined_here = `{$ty}` defined here\n \n mir_build_variant_defined_here = not covered\n \n mir_build_interpreted_as_const = introduce a variable instead\n \n-mir_build_confused = missing patterns are not covered because `{$variable}` is interpreted as {$article} {$res} pattern, not a new variable\n+mir_build_confused = missing patterns are not covered because `{$variable}` is interpreted as a constant pattern, not a new variable\n \n mir_build_suggest_if_let = you might want to use `if let` to ignore the {$count ->\n         [one] variant that isn't"}, {"sha": "6a05f35bdf33098f0aacb8c6ef30abc342157a16", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::{\n     error_code, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n     Handler, IntoDiagnostic, MultiSpan, SubdiagnosticMessage,\n };\n-use rustc_hir::def::Res;\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::thir::Pat;\n use rustc_middle::ty::{self, Ty};\n@@ -795,8 +794,6 @@ pub(crate) struct PatternNotCovered<'s, 'tcx> {\n     pub let_suggestion: Option<SuggestLet>,\n     #[subdiagnostic]\n     pub misc_suggestion: Option<MiscPatternSuggestion>,\n-    #[subdiagnostic]\n-    pub res_defined_here: Option<ResDefinedHere>,\n }\n \n #[derive(Subdiagnostic)]\n@@ -830,14 +827,6 @@ impl<'tcx> AddToDiagnostic for AdtDefinedHere<'tcx> {\n     }\n }\n \n-#[derive(Subdiagnostic)]\n-#[label(mir_build_res_defined_here)]\n-pub struct ResDefinedHere {\n-    #[primary_span]\n-    pub def_span: Span,\n-    pub res: Res,\n-}\n-\n #[derive(Subdiagnostic)]\n #[suggestion(\n     mir_build_interpreted_as_const,\n@@ -848,9 +837,7 @@ pub struct ResDefinedHere {\n pub struct InterpretedAsConst {\n     #[primary_span]\n     pub span: Span,\n-    pub article: &'static str,\n     pub variable: String,\n-    pub res: Res,\n }\n \n #[derive(Subdiagnostic)]"}, {"sha": "4fb8e915220a10606ea1b9110af0777644ef65d1", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -424,29 +424,38 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         let inform = sp.is_some().then_some(Inform);\n         let mut let_suggestion = None;\n         let mut misc_suggestion = None;\n-        if let Some(span) = sp && self.tcx.sess.source_map().is_span_accessible(span) {\n-            let mut bindings= vec![];\n-            pat.each_binding(|name, _, _, _| {\n-                bindings.push(name);\n-            });\n-            let semi_span = span.shrink_to_hi();\n-            let start_span = span.shrink_to_lo();\n-            let end_span = semi_span.shrink_to_lo();\n-            let count = witnesses.len();\n-\n+        let mut interpreted_as_const = None;\n+        if let PatKind::Constant { .. } = pat.kind\n+            && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(pat.span)\n+        {\n             // If the pattern to match is an integer literal:\n-            if bindings.is_empty()\n-                && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(pat.span)\n-                && snippet.chars().all(|c| c.is_digit(10))\n-            {\n+            if snippet.chars().all(|c| c.is_digit(10)) {\n                 // Then give a suggestion, the user might've meant to create a binding instead.\n                 misc_suggestion = Some(MiscPatternSuggestion::AttemptedIntegerLiteral {\n                     start_span: pat.span.shrink_to_lo()\n                 });\n+            } else if snippet.chars().all(|c| c.is_alphanumeric() || c == '_') {\n+                interpreted_as_const = Some(InterpretedAsConst {\n+                    span: pat.span,\n+                    variable: snippet,\n+                });\n             }\n+        }\n+\n+        if let Some(span) = sp\n+            && self.tcx.sess.source_map().is_span_accessible(span)\n+            && interpreted_as_const.is_none()\n+        {\n+            let mut bindings = vec![];\n+            pat.each_binding(|name, _, _, _| bindings.push(name));\n+\n+            let semi_span = span.shrink_to_hi();\n+            let start_span = span.shrink_to_lo();\n+            let end_span = semi_span.shrink_to_lo();\n+            let count = witnesses.len();\n \n             let_suggestion = Some(if bindings.is_empty() {\n-                SuggestLet::If {start_span, semi_span, count }\n+                SuggestLet::If { start_span, semi_span, count }\n             } else {\n                 SuggestLet::Else { end_span, count }\n             });\n@@ -469,12 +478,11 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             origin,\n             uncovered: Uncovered::new(pat.span, &cx, witnesses),\n             inform,\n-            interpreted_as_const: None,\n+            interpreted_as_const,\n             _p: (),\n             pattern_ty,\n             let_suggestion,\n             misc_suggestion,\n-            res_defined_here: None,\n             adt_defined_here,\n         });\n     }"}, {"sha": "61bdf57ffdb9445890321d9ff29c25f2f114bc59", "filename": "tests/ui/consts/const-pattern-irrefutable.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -12,14 +12,17 @@ fn main() {\n     let a = 4;\n     //~^ ERROR refutable pattern in local binding\n     //~| patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n-    //~| HELP you might want to use `if let` to ignore the variants that aren't matched\n+    //~| missing patterns are not covered because `a` is interpreted as a constant pattern, not a new variable\n+    //~| HELP introduce a variable instead\n     let c = 4;\n     //~^ ERROR refutable pattern in local binding\n     //~| patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n-    //~| HELP you might want to use `if let` to ignore the variants that aren't matched\n+    //~| missing patterns are not covered because `c` is interpreted as a constant pattern, not a new variable\n+    //~| HELP introduce a variable instead\n     let d = 4;\n     //~^ ERROR refutable pattern in local binding\n     //~| patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n-    //~| HELP you might want to use `if let` to ignore the variants that aren't matched\n+    //~| missing patterns are not covered because `d` is interpreted as a constant pattern, not a new variable\n+    //~| HELP introduce a variable instead\n     fn f() {} // Check that the `NOTE`s still work with an item here (cf. issue #35115).\n }"}, {"sha": "2aed68bdd6433333bd26d6093fe4e14c1fdc8130", "filename": "tests/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -2,43 +2,43 @@ error[E0005]: refutable pattern in local binding\n   --> $DIR/const-pattern-irrefutable.rs:12:9\n    |\n LL |     let a = 4;\n-   |         ^ patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n+   |         ^\n+   |         |\n+   |         patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n+   |         missing patterns are not covered because `a` is interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `a_var`\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `u8`\n-help: you might want to use `if let` to ignore the variants that aren't matched\n-   |\n-LL |     if let a = 4 { todo!() };\n-   |     ++           +++++++++++\n \n error[E0005]: refutable pattern in local binding\n-  --> $DIR/const-pattern-irrefutable.rs:16:9\n+  --> $DIR/const-pattern-irrefutable.rs:17:9\n    |\n LL |     let c = 4;\n-   |         ^ patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n+   |         ^\n+   |         |\n+   |         patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n+   |         missing patterns are not covered because `c` is interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `c_var`\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `u8`\n-help: you might want to use `if let` to ignore the variants that aren't matched\n-   |\n-LL |     if let c = 4 { todo!() };\n-   |     ++           +++++++++++\n \n error[E0005]: refutable pattern in local binding\n-  --> $DIR/const-pattern-irrefutable.rs:20:9\n+  --> $DIR/const-pattern-irrefutable.rs:22:9\n    |\n LL |     let d = 4;\n-   |         ^ patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n+   |         ^\n+   |         |\n+   |         patterns `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n+   |         missing patterns are not covered because `d` is interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `d_var`\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `u8`\n-help: you might want to use `if let` to ignore the variants that aren't matched\n-   |\n-LL |     if let d = 4 { todo!() };\n-   |     ++           +++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ab3f6f69fb161358f4d25f0bcc59041d196b83c6", "filename": "tests/ui/pattern/usefulness/refutable-pattern-in-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -5,6 +5,10 @@ LL |     let f = |3: isize| println!(\"hello\");\n    |              ^ pattern `_` not covered\n    |\n    = note: the matched value is of type `isize`\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     let f = |_3: isize| println!(\"hello\");\n+   |              +\n \n error: aborting due to previous error\n "}, {"sha": "af47ba8baa3fe7b52a33c01fdd2221babee4750e", "filename": "tests/ui/suggestions/const-pat-non-exaustive-let-new-var.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -2,7 +2,9 @@ fn main() {\n     let A = 3;\n     //~^ ERROR refutable pattern in local binding\n     //~| patterns `i32::MIN..=1_i32` and `3_i32..=i32::MAX` not covered\n-    //~| HELP you might want to use `if let` to ignore the variants that aren't matched\n+    //~| missing patterns are not covered because `A` is interpreted as a constant pattern, not a new variable\n+    //~| HELP introduce a variable instead\n+    //~| SUGGESTION A_var\n \n     const A: i32 = 2;\n }"}, {"sha": "9ee3e6eb2c827d71ee041365f7c69bb52e894d5b", "filename": "tests/ui/suggestions/const-pat-non-exaustive-let-new-var.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f97540432445c7e0dc4eb51e3ac5fd915d225ad/tests%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr?ref=4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "patch": "@@ -2,15 +2,15 @@ error[E0005]: refutable pattern in local binding\n   --> $DIR/const-pat-non-exaustive-let-new-var.rs:2:9\n    |\n LL |     let A = 3;\n-   |         ^ patterns `i32::MIN..=1_i32` and `3_i32..=i32::MAX` not covered\n+   |         ^\n+   |         |\n+   |         patterns `i32::MIN..=1_i32` and `3_i32..=i32::MAX` not covered\n+   |         missing patterns are not covered because `A` is interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `A_var`\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n    = note: the matched value is of type `i32`\n-help: you might want to use `if let` to ignore the variants that aren't matched\n-   |\n-LL |     if let A = 3 { todo!() };\n-   |     ++           +++++++++++\n \n error: aborting due to previous error\n "}]}