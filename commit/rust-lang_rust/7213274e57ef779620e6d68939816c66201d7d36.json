{"sha": "7213274e57ef779620e6d68939816c66201d7d36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTMyNzRlNTdlZjc3OTYyMGU2ZDY4OTM5ODE2YzY2MjAxZDdkMzY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-01T22:58:04Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-04T16:54:03Z"}, "message": "Make how lint handles unknown warn directives configurable by lint (default to warn). Closes #2480.", "tree": {"sha": "bbbd652356885ef816aaad8584d6d7e3c7baeb46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbd652356885ef816aaad8584d6d7e3c7baeb46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7213274e57ef779620e6d68939816c66201d7d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7213274e57ef779620e6d68939816c66201d7d36", "html_url": "https://github.com/rust-lang/rust/commit/7213274e57ef779620e6d68939816c66201d7d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7213274e57ef779620e6d68939816c66201d7d36/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be94f66509677ed41431369d89260c7218956eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be94f66509677ed41431369d89260c7218956eb", "html_url": "https://github.com/rust-lang/rust/commit/9be94f66509677ed41431369d89260c7218956eb"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "ebdccf59c530cccffedd0f60c77594b2df494c6f", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7213274e57ef779620e6d68939816c66201d7d36/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213274e57ef779620e6d68939816c66201d7d36/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=7213274e57ef779620e6d68939816c66201d7d36", "patch": "@@ -406,8 +406,10 @@ fn build_session_options(match: getopts::match,\n     let lint_dict = lint::get_lint_dict();\n     let lint_opts = vec::map(lint_flags) {|flag|\n         alt lint::lookup_lint(lint_dict, flag) {\n-          none { early_error(demitter, #fmt(\"unknown warning: %s\", flag)) }\n-          some(x) { x }\n+          (flag, none) {\n+            early_error(demitter, #fmt(\"unknown warning: %s\", flag))\n+          }\n+          (_, some(x)) { x }\n         }\n     };\n "}, {"sha": "88444f9a0f14f80f83300fd74c58726afca60aca", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7213274e57ef779620e6d68939816c66201d7d36/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213274e57ef779620e6d68939816c66201d7d36/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=7213274e57ef779620e6d68939816c66201d7d36", "patch": "@@ -37,6 +37,7 @@ enum lint {\n     while_true,\n     path_statement,\n     old_vecs,\n+    unrecognized_warning,\n }\n \n // This is pretty unfortunate. We really want some sort of \"deriving Enum\"\n@@ -48,6 +49,7 @@ fn int_to_lint(i: int) -> lint {\n       2 { while_true }\n       3 { path_statement }\n       4 { old_vecs }\n+      5 { unrecognized_warning }\n     }\n }\n \n@@ -90,7 +92,12 @@ fn get_lint_dict() -> lint_dict {\n         (\"old_vecs\",\n          @{lint: old_vecs,\n            desc: \"old (deprecated) vectors and strings\",\n-           default: ignore})\n+           default: ignore}),\n+\n+        (\"unrecognized_warning\",\n+         @{lint: unrecognized_warning,\n+           desc: \"unrecognized warning attribute\",\n+           default: warn})\n \n     ];\n     hash_from_strs(v)\n@@ -188,12 +195,13 @@ impl methods for ctxt {\n                     alt meta.node {\n                       ast::meta_word(lintname) {\n                         alt lookup_lint(self.dict, lintname) {\n-                          none {\n-                            self.tcx.sess.span_err(\n+                          (name, none) {\n+                            self.span_lint(\n+                                self.get_level(unrecognized_warning),\n                                 meta.span,\n-                                #fmt(\"unknown warning: '%s'\", lintname));\n+                                #fmt(\"unknown warning: '%s'\", name));\n                           }\n-                          some((lint, new_level)) {\n+                          (_, some((lint, new_level))) {\n                             // we do multiple unneeded copies of the map\n                             // if many attributes are set, but this shouldn't\n                             // actually be a problem...\n@@ -225,7 +233,7 @@ impl methods for ctxt {\n \n \n fn lookup_lint(dict: lint_dict, s: str)\n-    -> option<(lint, level)> {\n+    -> (str, option<(lint, level)>) {\n     let s = str::replace(s, \"-\", \"_\");\n     let (name, level) = if s.starts_with(\"no_\") {\n         (s.substr(3u, s.len() - 3u), ignore)\n@@ -234,10 +242,11 @@ fn lookup_lint(dict: lint_dict, s: str)\n     } else {\n         (s, warn)\n     };\n-    alt dict.find(name) {\n-      none { none }\n-      some(spec) { some((spec.lint, level)) }\n-    }\n+    (name,\n+     alt dict.find(name) {\n+         none { none }\n+         some(spec) { some((spec.lint, level)) }\n+     })\n }\n \n fn check_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n@@ -249,6 +258,7 @@ fn check_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n               while_true { check_item_while_true(cx, level, i); }\n               path_statement { check_item_path_statement(cx, level, i); }\n               old_vecs { check_item_old_vecs(cx, level, i); }\n+              unrecognized_warning { /* this is checked elsewhere */ }\n             }\n         }\n         if !cx.is_default {"}]}