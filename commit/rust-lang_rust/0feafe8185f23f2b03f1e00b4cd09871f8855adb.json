{"sha": "0feafe8185f23f2b03f1e00b4cd09871f8855adb", "node_id": "C_kwDOAAsO6NoAKDBmZWFmZTgxODVmMjNmMmIwM2YxZTAwYjRjZDA5ODcxZjg4NTVhZGI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-04T13:36:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-04T13:36:34Z"}, "message": "Merge #11411\n\n11411: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ad655dac5c5472e5717ae30ba070c210748397fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad655dac5c5472e5717ae30ba070c210748397fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0feafe8185f23f2b03f1e00b4cd09871f8855adb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/SviCRBK7hj4Ov3rIwAAh/cIABVan+JP+TLK1gKBP1P1wCUp\n8O0Y1TXhG5uHEtu9RCwcvJiBxSI31eFXcCEiKYRCFkJ6r7krsw3X/SoheF0UcMNa\nylniG5iyymESJHo6P65FH0dyUIZyYcrHfuzv49gmpstK8W4gfr12H/o5zciQoqc6\nHJ1mOt2ZC5LFAzwLSACpkcXfqAkBsKZcTVs8vEUowyRIrMBGOJvr0Q+Po6bLIsWG\n3dAiMGbvb7/JPRHNRQJMBo0ARUw1hpM99KDWw/Ro2vsJwv9/f5DbLA7k9i6YkC3u\nN0iE8se3HwkpgVcJj2/CzQbL6I40uAnZDCZuq9ZbjQaIn+uiBT8mX0vgpa8at9s=\n=kV0n\n-----END PGP SIGNATURE-----\n", "payload": "tree ad655dac5c5472e5717ae30ba070c210748397fa\nparent 9597e55e9b933b82d190607f0fcf59654cdaccee\nparent ec677e35d0070e18ba3f94af1c61fe3d512c94e2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643981794 +0000\ncommitter GitHub <noreply@github.com> 1643981794 +0000\n\nMerge #11411\n\n11411: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0feafe8185f23f2b03f1e00b4cd09871f8855adb", "html_url": "https://github.com/rust-lang/rust/commit/0feafe8185f23f2b03f1e00b4cd09871f8855adb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0feafe8185f23f2b03f1e00b4cd09871f8855adb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9597e55e9b933b82d190607f0fcf59654cdaccee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9597e55e9b933b82d190607f0fcf59654cdaccee", "html_url": "https://github.com/rust-lang/rust/commit/9597e55e9b933b82d190607f0fcf59654cdaccee"}, {"sha": "ec677e35d0070e18ba3f94af1c61fe3d512c94e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec677e35d0070e18ba3f94af1c61fe3d512c94e2", "html_url": "https://github.com/rust-lang/rust/commit/ec677e35d0070e18ba3f94af1c61fe3d512c94e2"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "80067dcc5d565bb23486d42719eb267d1ffc2ad3", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0feafe8185f23f2b03f1e00b4cd09871f8855adb/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0feafe8185f23f2b03f1e00b4cd09871f8855adb/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=0feafe8185f23f2b03f1e00b4cd09871f8855adb", "patch": "@@ -16,15 +16,12 @@ pub mod quote;\n pub mod eager;\n pub mod mod_path;\n \n-use base_db::ProcMacroKind;\n-use either::Either;\n-\n pub use mbe::{ExpandError, ExpandResult, Origin};\n-use mod_path::ModPath;\n \n use std::{hash::Hash, iter, sync::Arc};\n \n-use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n+use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange, ProcMacroKind};\n+use either::Either;\n use syntax::{\n     algo::{self, skip_trivia_token},\n     ast::{self, AstNode, HasDocComments},\n@@ -37,6 +34,7 @@ use crate::{\n     builtin_derive_macro::BuiltinDeriveExpander,\n     builtin_fn_macro::{BuiltinFnLikeExpander, EagerExpander},\n     db::TokenExpander,\n+    mod_path::ModPath,\n     proc_macro::ProcMacroExpander,\n };\n \n@@ -61,11 +59,13 @@ enum HirFileIdRepr {\n     FileId(FileId),\n     MacroFile(MacroFile),\n }\n+\n impl From<FileId> for HirFileId {\n     fn from(id: FileId) -> Self {\n         HirFileId(HirFileIdRepr::FileId(id))\n     }\n }\n+\n impl From<MacroFile> for HirFileId {\n     fn from(id: MacroFile) -> Self {\n         HirFileId(HirFileIdRepr::MacroFile(id))\n@@ -151,8 +151,8 @@ impl HirFileId {\n             HirFileIdRepr::FileId(file_id) => file_id,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n-                let file_id = match &loc.eager {\n-                    Some(EagerCallInfo { included_file: Some(file), .. }) => (*file).into(),\n+                let file_id = match loc.eager {\n+                    Some(EagerCallInfo { included_file: Some(file), .. }) => file.into(),\n                     _ => loc.kind.file_id(),\n                 };\n                 file_id.original_file(db)\n@@ -249,10 +249,7 @@ impl HirFileId {\n             HirFileIdRepr::FileId(_) => false,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n-                match loc.def.kind {\n-                    MacroDefKind::ProcMacro(_, ProcMacroKind::CustomDerive, _) => true,\n-                    _ => false,\n-                }\n+                matches!(loc.def.kind, MacroDefKind::ProcMacro(_, ProcMacroKind::CustomDerive, _))\n             }\n         }\n     }\n@@ -302,15 +299,15 @@ impl MacroDefId {\n     }\n \n     pub fn ast_id(&self) -> Either<AstId<ast::Macro>, AstId<ast::Fn>> {\n-        let id = match &self.kind {\n-            MacroDefKind::ProcMacro(.., id) => return Either::Right(*id),\n+        let id = match self.kind {\n+            MacroDefKind::ProcMacro(.., id) => return Either::Right(id),\n             MacroDefKind::Declarative(id)\n             | MacroDefKind::BuiltIn(_, id)\n             | MacroDefKind::BuiltInAttr(_, id)\n             | MacroDefKind::BuiltInDerive(_, id)\n             | MacroDefKind::BuiltInEager(_, id) => id,\n         };\n-        Either::Left(*id)\n+        Either::Left(id)\n     }\n \n     pub fn is_proc_macro(&self) -> bool {\n@@ -359,20 +356,15 @@ impl MacroCallKind {\n     /// get only the specific derive that is being referred to.\n     pub fn original_call_range(self, db: &dyn db::AstDatabase) -> FileRange {\n         let mut kind = self;\n-        loop {\n+        let file_id = loop {\n             match kind.file_id().0 {\n                 HirFileIdRepr::MacroFile(file) => {\n                     kind = db.lookup_intern_macro_call(file.macro_call_id).kind;\n                 }\n-                _ => break,\n+                HirFileIdRepr::FileId(file_id) => break file_id,\n             }\n-        }\n-\n-        // `call_id` is now the outermost macro call, so its location is in a real file.\n-        let file_id = match kind.file_id().0 {\n-            HirFileIdRepr::FileId(it) => it,\n-            HirFileIdRepr::MacroFile(_) => unreachable!(\"encountered unexpected macro file\"),\n         };\n+\n         let range = match kind {\n             MacroCallKind::FnLike { ast_id, .. } => ast_id.to_node(db).syntax().text_range(),\n             MacroCallKind::Derive { ast_id, derive_attr_index, .. } => {\n@@ -574,7 +566,6 @@ impl ExpansionInfo {\n /// `AstId` points to an AST node in any file.\n ///\n /// It is stable across reparses, and can be used as salsa key/value.\n-// FIXME: isn't this just a `Source<FileAstId<N>>` ?\n pub type AstId<N> = InFile<FileAstId<N>>;\n \n impl<N: AstNode> AstId<N> {\n@@ -602,7 +593,6 @@ impl<T> InFile<T> {\n         InFile { file_id, value }\n     }\n \n-    // Similarly, naming here is stupid...\n     pub fn with_value<U>(&self, value: U) -> InFile<U> {\n         InFile::new(self.file_id, value)\n     }"}]}