{"sha": "85e67b9a5917bc82bdba0aaa3a18595904cee629", "node_id": "C_kwDOAAsO6NoAKDg1ZTY3YjlhNTkxN2JjODJiZGJhMGFhYTNhMTg1OTU5MDRjZWU2Mjk", "commit": {"author": {"name": "lightning1141", "email": "lightning1141@gmail.com", "date": "2022-02-26T03:55:07Z"}, "committer": {"name": "lightning1141", "email": "lightning1141@gmail.com", "date": "2022-03-24T18:53:30Z"}, "message": "Fix ice when error reporting recursion errors\n\nFixes: #90319, #92148, #93955", "tree": {"sha": "e6e53b1afb7cad5a3c825668afcb96cd98cf503d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e53b1afb7cad5a3c825668afcb96cd98cf503d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e67b9a5917bc82bdba0aaa3a18595904cee629", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEBee+RmwpKs5jQhxNEJTTH1cTDmgFAmI8vjAACgkQEJTTH1cT\nDmjHUQf/aoGY94+fbH0znJHUbry89CaC9jcl6vumeTGHDYj49BGfW74z19JcaQAX\nHsq5Rm0JoCIgg5bVA4sfFVeJ8BIFPrNDaSrOF3SUMBUcy95HWLDohshXqCnfOqf/\nJOPUR7/ppnbbvNnKNV63dPP/MXNI5l3y2GHI1cQXmezfeXCfWnM+uRYQ9GyVoJ4R\nUYGjtNBQZtVGBuLU2oN0q+yUO/+Z5hQKGxDl0Aws8JtNC8+XF02shogW6wTMCYyH\nsJYgidM+K5JJypHFL7HsvftrJlBv4gyN3jcz9L5VDwLz4x5CM0alz5Di8r5PSPV0\ncTP3Ipzx3ASuRp0Xitb93VpOH7AcTA==\n=YoQy\n-----END PGP SIGNATURE-----", "payload": "tree e6e53b1afb7cad5a3c825668afcb96cd98cf503d\nparent 37b55c8a0cafdb60b9168da34f904acc70157df8\nauthor lightning1141 <lightning1141@gmail.com> 1645847707 +0800\ncommitter lightning1141 <lightning1141@gmail.com> 1648148010 +0800\n\nFix ice when error reporting recursion errors\n\nFixes: #90319, #92148, #93955\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e67b9a5917bc82bdba0aaa3a18595904cee629", "html_url": "https://github.com/rust-lang/rust/commit/85e67b9a5917bc82bdba0aaa3a18595904cee629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e67b9a5917bc82bdba0aaa3a18595904cee629/comments", "author": {"login": "light4", "id": 1318472, "node_id": "MDQ6VXNlcjEzMTg0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1318472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/light4", "html_url": "https://github.com/light4", "followers_url": "https://api.github.com/users/light4/followers", "following_url": "https://api.github.com/users/light4/following{/other_user}", "gists_url": "https://api.github.com/users/light4/gists{/gist_id}", "starred_url": "https://api.github.com/users/light4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/light4/subscriptions", "organizations_url": "https://api.github.com/users/light4/orgs", "repos_url": "https://api.github.com/users/light4/repos", "events_url": "https://api.github.com/users/light4/events{/privacy}", "received_events_url": "https://api.github.com/users/light4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "light4", "id": 1318472, "node_id": "MDQ6VXNlcjEzMTg0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1318472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/light4", "html_url": "https://github.com/light4", "followers_url": "https://api.github.com/users/light4/followers", "following_url": "https://api.github.com/users/light4/following{/other_user}", "gists_url": "https://api.github.com/users/light4/gists{/gist_id}", "starred_url": "https://api.github.com/users/light4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/light4/subscriptions", "organizations_url": "https://api.github.com/users/light4/orgs", "repos_url": "https://api.github.com/users/light4/repos", "events_url": "https://api.github.com/users/light4/events{/privacy}", "received_events_url": "https://api.github.com/users/light4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b55c8a0cafdb60b9168da34f904acc70157df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b55c8a0cafdb60b9168da34f904acc70157df8", "html_url": "https://github.com/rust-lang/rust/commit/37b55c8a0cafdb60b9168da34f904acc70157df8"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "0707fa2efea70a4a588e5a7bc5f96b32571dbd99", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -478,7 +478,7 @@ pub enum SelectionError<'tcx> {\n     /// A given constant couldn't be evaluated.\n     NotConstEvaluatable(NotConstEvaluatable),\n     /// Exceeded the recursion depth during type projection.\n-    Overflow,\n+    Overflow(OverflowError),\n     /// Signaling that an error has already been emitted, to avoid\n     /// multiple errors being shown.\n     ErrorReporting,"}, {"sha": "5297825a92fcc225d78905463dea68a09421b9c9", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -5,6 +5,7 @@\n use self::EvaluationResult::*;\n \n use super::{SelectionError, SelectionResult};\n+use rustc_errors::ErrorGuaranteed;\n \n use crate::ty;\n \n@@ -264,14 +265,26 @@ impl EvaluationResult {\n /// Indicates that trait evaluation caused overflow and in which pass.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub enum OverflowError {\n+    Error(ErrorGuaranteed),\n     Canonical,\n     ErrorReporting,\n }\n \n+impl From<ErrorGuaranteed> for OverflowError {\n+    fn from(e: ErrorGuaranteed) -> OverflowError {\n+        OverflowError::Error(e)\n+    }\n+}\n+\n+TrivialTypeFoldableAndLiftImpls! {\n+    OverflowError,\n+}\n+\n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     fn from(overflow_error: OverflowError) -> SelectionError<'tcx> {\n         match overflow_error {\n-            OverflowError::Canonical => SelectionError::Overflow,\n+            OverflowError::Error(e) => SelectionError::Overflow(OverflowError::Error(e)),\n+            OverflowError::Canonical => SelectionError::Overflow(OverflowError::Canonical),\n             OverflowError::ErrorReporting => SelectionError::ErrorReporting,\n         }\n     }"}, {"sha": "5e220173caeeac0cf5f191a9b15f33d1d425f625", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -22,6 +22,7 @@ use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n+use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n@@ -928,8 +929,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.tcx.sess.delay_span_bug(span, \"`ErrorGuaranteed` without an error\");\n                 return;\n             }\n-\n-            Overflow => {\n+            // Already reported.\n+            Overflow(OverflowError::Error(_)) => {\n+                self.tcx.sess.delay_span_bug(span, \"`OverflowError` has been reported\");\n+                return;\n+            }\n+            Overflow(_) => {\n                 bug!(\"overflow should be handled before the `report_selection_error` path\");\n             }\n             SelectionError::ErrorReporting => {"}, {"sha": "b61e68735712bee38fae0cf0a226dc9b1e279089", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -27,6 +27,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n+use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n@@ -1139,7 +1140,9 @@ fn project<'cx, 'tcx>(\n     if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {\n         // This should really be an immediate error, but some existing code\n         // relies on being able to recover from this.\n-        return Err(ProjectionError::TraitSelectionError(SelectionError::Overflow));\n+        return Err(ProjectionError::TraitSelectionError(SelectionError::Overflow(\n+            OverflowError::Canonical,\n+        )));\n     }\n \n     if obligation.predicate.references_error() {"}, {"sha": "db45ee3fed7db17fb2a0842e3685631dd2d225c8", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -108,9 +108,11 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n                         )\n                     }\n                     OverflowError::ErrorReporting => EvaluationResult::EvaluatedToErr,\n+                    OverflowError::Error(_) => EvaluationResult::EvaluatedToErr,\n                 })\n             }\n             Err(OverflowError::ErrorReporting) => EvaluationResult::EvaluatedToErr,\n+            Err(OverflowError::Error(_)) => EvaluationResult::EvaluatedToErr,\n         }\n     }\n }"}, {"sha": "3e7a2252318be550f92a4f808e9b5c3ee300ed2c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -164,8 +164,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))\n                 }\n                 Ok(_) => Ok(None),\n-                Err(OverflowError::Canonical) => Err(Overflow),\n+                Err(OverflowError::Canonical) => Err(Overflow(OverflowError::Canonical)),\n                 Err(OverflowError::ErrorReporting) => Err(ErrorReporting),\n+                Err(OverflowError::Error(e)) => Err(Overflow(OverflowError::Error(e))),\n             })\n             .flat_map(Result::transpose)\n             .collect::<Result<Vec<_>, _>>()?;"}, {"sha": "a988a51c83964f42d6cbfa1b64034343d38a8155", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -29,7 +29,7 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::Diagnostic;\n+use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n@@ -320,11 +320,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n     ) -> SelectionResult<'tcx, Selection<'tcx>> {\n         let candidate = match self.select_from_obligation(obligation) {\n-            Err(SelectionError::Overflow) => {\n+            Err(SelectionError::Overflow(OverflowError::Canonical)) => {\n                 // In standard mode, overflow must have been caught and reported\n                 // earlier.\n                 assert!(self.query_mode == TraitQueryMode::Canonical);\n-                return Err(SelectionError::Overflow);\n+                return Err(SelectionError::Overflow(OverflowError::Canonical));\n             }\n             Err(SelectionError::Ambiguous(_)) => {\n                 return Ok(None);\n@@ -339,9 +339,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         match self.confirm_candidate(obligation, candidate) {\n-            Err(SelectionError::Overflow) => {\n+            Err(SelectionError::Overflow(OverflowError::Canonical)) => {\n                 assert!(self.query_mode == TraitQueryMode::Canonical);\n-                Err(SelectionError::Overflow)\n+                Err(SelectionError::Overflow(OverflowError::Canonical))\n             }\n             Err(e) => Err(e),\n             Ok(candidate) => {\n@@ -958,7 +958,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             Ok(Some(c)) => self.evaluate_candidate(stack, &c),\n             Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),\n             Ok(None) => Ok(EvaluatedToAmbig),\n-            Err(Overflow) => Err(OverflowError::Canonical),\n+            Err(Overflow(OverflowError::Canonical)) => Err(OverflowError::Canonical),\n             Err(ErrorReporting) => Err(OverflowError::ErrorReporting),\n             Err(..) => Ok(EvaluatedToErr),\n         }\n@@ -1117,7 +1117,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n                     if self.infcx.is_tainted_by_errors() {\n-                        return Err(OverflowError::ErrorReporting);\n+                        return Err(OverflowError::Error(\n+                            ErrorGuaranteed::unchecked_claim_error_was_emitted(),\n+                        ));\n                     }\n                     self.infcx.report_overflow_error(error_obligation, true);\n                 }\n@@ -1353,7 +1355,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         if self.can_use_global_caches(param_env) {\n-            if let Err(Overflow) = candidate {\n+            if let Err(Overflow(OverflowError::Canonical)) = candidate {\n                 // Don't cache overflow globally; we only produce this in certain modes.\n             } else if !pred.needs_infer() {\n                 if !candidate.needs_infer() {"}, {"sha": "57e6ac7cf34f52d4b63e8753bf37e8b50aece5dc", "filename": "src/test/ui/typeck/issue-90319.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/src%2Ftest%2Fui%2Ftypeck%2Fissue-90319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/src%2Ftest%2Fui%2Ftypeck%2Fissue-90319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90319.rs?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -0,0 +1,17 @@\n+struct Wrapper<T>(T);\n+\n+trait Trait {\n+    fn method(&self) {}\n+}\n+\n+impl<'a, T> Trait for Wrapper<&'a T> where Wrapper<T>: Trait {}\n+\n+fn get<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let thing = get::<Thing>();//~ERROR cannot find type `Thing` in this scope [E0412]\n+    let wrapper = Wrapper(thing);\n+    Trait::method(&wrapper);\n+}"}, {"sha": "61549dd701e747e2721683e8e02fa3e0acf2c33a", "filename": "src/test/ui/typeck/issue-90319.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85e67b9a5917bc82bdba0aaa3a18595904cee629/src%2Ftest%2Fui%2Ftypeck%2Fissue-90319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85e67b9a5917bc82bdba0aaa3a18595904cee629/src%2Ftest%2Fui%2Ftypeck%2Fissue-90319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90319.stderr?ref=85e67b9a5917bc82bdba0aaa3a18595904cee629", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `Thing` in this scope\n+  --> $DIR/issue-90319.rs:14:23\n+   |\n+LL |     let thing = get::<Thing>();\n+   |                       ^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}