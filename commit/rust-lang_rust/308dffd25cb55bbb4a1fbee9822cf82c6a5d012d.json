{"sha": "308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "node_id": "C_kwDOAAsO6NoAKDMwOGRmZmQyNWNiNTViYmI0YTFmYmVlOTgyMmNmODJjNmE1ZDAxMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T19:40:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T19:40:13Z"}, "message": "Auto merge of #89179 - the8472:rollup-moxrtaj, r=the8472\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89036 (Fix missing `no_global_oom_handling` cfg-gating)\n - #89041 (Work around invalid DWARF bugs for fat LTO)\n - #89046 (\"Fix\" an overflow in byte position math)\n - #89127 (Re-enable the `src/test/debuginfo/mutex.rs` test on Windows)\n - #89133 (Fix ICE with `--cap-lints=allow` and `-Zfuel=...=0`)\n - #89162 (rustc_index: Add some map-like APIs to `IndexVec`)\n - #89164 (Document `--show-type-layout` in the rustdoc book)\n - #89170 (Disable the leak sanitizer on Macos aarch64 for now)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "73d3e17944183d82799540460c59c291baba211a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d3e17944183d82799540460c59c291baba211a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "html_url": "https://github.com/rust-lang/rust/commit/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfff31bc833070a00578bd6178160aeed56f28ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfff31bc833070a00578bd6178160aeed56f28ba", "html_url": "https://github.com/rust-lang/rust/commit/cfff31bc833070a00578bd6178160aeed56f28ba"}, {"sha": "26c783811858dca1ac37d7ee113e0bd13891420a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c783811858dca1ac37d7ee113e0bd13891420a", "html_url": "https://github.com/rust-lang/rust/commit/26c783811858dca1ac37d7ee113e0bd13891420a"}], "stats": {"total": 186, "additions": 130, "deletions": 56}, "files": [{"sha": "9f879494d7374ff574afb02f34f18597744cb89b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -474,9 +474,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         res\n                     } else {\n                         // Associate an HirId to both ids even if there is no resolution.\n-                        self.node_id_to_hir_id.ensure_contains_elem(new_node_id, || None);\n-                        debug_assert!(self.node_id_to_hir_id[new_node_id].is_none());\n-                        self.node_id_to_hir_id[new_node_id] = Some(hir::HirId::make_owner(new_id));\n+                        let _old = self\n+                            .node_id_to_hir_id\n+                            .insert(new_node_id, hir::HirId::make_owner(new_id));\n+                        debug_assert!(_old.is_none());\n                         continue;\n                     };\n                     let ident = *ident;"}, {"sha": "3c75089a760f32fb9cc74c78391d8b32cc7fabac", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -469,11 +469,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let def_id = self.resolver.local_def_id(owner);\n \n         // Always allocate the first `HirId` for the owner itself.\n-        self.node_id_to_hir_id.ensure_contains_elem(owner, || None);\n-        if let Some(_lowered) = self.node_id_to_hir_id[owner] {\n-            panic!(\"with_hir_id_owner must not be called multiple times on owner {:?}\", def_id);\n-        }\n-        self.node_id_to_hir_id[owner] = Some(hir::HirId::make_owner(def_id));\n+        let _old = self.node_id_to_hir_id.insert(owner, hir::HirId::make_owner(def_id));\n+        debug_assert_eq!(_old, None);\n \n         let current_owner = std::mem::replace(&mut self.current_hir_id_owner, def_id);\n         let current_local_counter =\n@@ -484,8 +481,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.current_hir_id_owner = current_owner;\n         self.item_local_id_counter = current_local_counter;\n \n-        self.owners.ensure_contains_elem(def_id, || None);\n-        self.owners[def_id] = Some(item);\n+        let _old = self.owners.insert(def_id, item);\n+        debug_assert!(_old.is_none());\n \n         def_id\n     }\n@@ -499,18 +496,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n-        self.node_id_to_hir_id.ensure_contains_elem(ast_node_id, || None);\n-        if let Some(existing_hir_id) = self.node_id_to_hir_id[ast_node_id] {\n-            existing_hir_id\n-        } else {\n+        *self.node_id_to_hir_id.get_or_insert_with(ast_node_id, || {\n             // Generate a new `HirId`.\n             let owner = self.current_hir_id_owner;\n             let local_id = self.item_local_id_counter;\n             self.item_local_id_counter.increment_by(1);\n-            let hir_id = hir::HirId { owner, local_id };\n-            self.node_id_to_hir_id[ast_node_id] = Some(hir_id);\n-            hir_id\n-        }\n+            hir::HirId { owner, local_id }\n+        })\n     }\n \n     fn next_id(&mut self) -> hir::HirId {"}, {"sha": "99b30264d09580bc858644f00670d3250d83b659", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -325,6 +325,20 @@ fn fat_lto(\n         drop(linker);\n         save_temp_bitcode(&cgcx, &module, \"lto.input\");\n \n+        // Fat LTO also suffers from the invalid DWARF issue similar to Thin LTO.\n+        // Here we rewrite all `DICompileUnit` pointers if there is only one `DICompileUnit`.\n+        // This only works around the problem when codegen-units = 1.\n+        // Refer to the comments in the `optimize_thin_module` function for more details.\n+        let mut cu1 = ptr::null_mut();\n+        let mut cu2 = ptr::null_mut();\n+        unsafe { llvm::LLVMRustLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2) };\n+        if !cu2.is_null() {\n+            let _timer =\n+                cgcx.prof.generic_activity_with_arg(\"LLVM_fat_lto_patch_debuginfo\", &*module.name);\n+            unsafe { llvm::LLVMRustLTOPatchDICompileUnit(llmod, cu1) };\n+            save_temp_bitcode(cgcx, &module, \"fat-lto-after-patch\");\n+        }\n+\n         // Internalize everything below threshold to help strip out more modules and such.\n         unsafe {\n             let ptr = symbols_below_threshold.as_ptr();\n@@ -748,7 +762,7 @@ pub unsafe fn optimize_thin_module(\n         // an error.\n         let mut cu1 = ptr::null_mut();\n         let mut cu2 = ptr::null_mut();\n-        llvm::LLVMRustThinLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n+        llvm::LLVMRustLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n         if !cu2.is_null() {\n             let msg = \"multiple source DICompileUnits found\";\n             return Err(write::llvm_err(&diag_handler, msg));\n@@ -847,7 +861,7 @@ pub unsafe fn optimize_thin_module(\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_thin_lto_patch_debuginfo\", thin_module.name());\n-            llvm::LLVMRustThinLTOPatchDICompileUnit(llmod, cu1);\n+            llvm::LLVMRustLTOPatchDICompileUnit(llmod, cu1);\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-patch\");\n         }\n "}, {"sha": "d8c2a345fb03cc5771214aa5806be877c8aa5ab9", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -2377,12 +2377,8 @@ extern \"C\" {\n         len: usize,\n         out_len: &mut usize,\n     ) -> *const u8;\n-    pub fn LLVMRustThinLTOGetDICompileUnit(\n-        M: &Module,\n-        CU1: &mut *mut c_void,\n-        CU2: &mut *mut c_void,\n-    );\n-    pub fn LLVMRustThinLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n+    pub fn LLVMRustLTOGetDICompileUnit(M: &Module, CU1: &mut *mut c_void, CU2: &mut *mut c_void);\n+    pub fn LLVMRustLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n \n     pub fn LLVMRustLinkerNew(M: &'a Module) -> &'a mut Linker<'a>;\n     pub fn LLVMRustLinkerAdd("}, {"sha": "60a48b5a2d9c17ecf6e4ce6ba253007f5f015c80", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -13,9 +13,11 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub use emitter::ColorConfig;\n \n-use tracing::debug;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};"}, {"sha": "5b1add4cfc6117c65baf25e3da754f4699c237a8", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -1072,13 +1072,9 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n     }\n \n     fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {\n-        // Instantiate any missing rows up to and including row `row` with an\n-        // empty HybridBitSet.\n-        self.rows.ensure_contains_elem(row, || None);\n-\n+        // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.\n         // Then replace row `row` with a full HybridBitSet if necessary.\n-        let num_columns = self.num_columns;\n-        self.rows[row].get_or_insert_with(|| HybridBitSet::new_empty(num_columns))\n+        self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))\n     }\n \n     /// Sets the cell at `(row, column)` to true. Put another way, insert"}, {"sha": "8535a7c866d96bb255a9565cf4195b1c46161778", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -720,6 +720,21 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n }\n \n+/// `IndexVec` is often used as a map, so it provides some map-like APIs.\n+impl<I: Idx, T> IndexVec<I, Option<T>> {\n+    #[inline]\n+    pub fn insert(&mut self, index: I, value: T) -> Option<T> {\n+        self.ensure_contains_elem(index, || None);\n+        self[index].replace(value)\n+    }\n+\n+    #[inline]\n+    pub fn get_or_insert_with(&mut self, index: I, value: impl FnOnce() -> T) -> &mut T {\n+        self.ensure_contains_elem(index, || None);\n+        self[index].get_or_insert_with(value)\n+    }\n+}\n+\n impl<I: Idx, T: Clone> IndexVec<I, T> {\n     #[inline]\n     pub fn resize(&mut self, new_len: usize, value: T) {"}, {"sha": "1a0cfd5888593799f9d228380476cdaee2a51e68", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -1747,7 +1747,7 @@ LLVMRustGetBitcodeSliceFromObjectData(const char *data,\n // Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n // the comment in `back/lto.rs` for why this exists.\n extern \"C\" void\n-LLVMRustThinLTOGetDICompileUnit(LLVMModuleRef Mod,\n+LLVMRustLTOGetDICompileUnit(LLVMModuleRef Mod,\n                                 DICompileUnit **A,\n                                 DICompileUnit **B) {\n   Module *M = unwrap(Mod);\n@@ -1765,7 +1765,7 @@ LLVMRustThinLTOGetDICompileUnit(LLVMModuleRef Mod,\n // Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n // the comment in `back/lto.rs` for why this exists.\n extern \"C\" void\n-LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n+LLVMRustLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n   Module *M = unwrap(Mod);\n \n   // If the original source module didn't have a `DICompileUnit` then try to"}, {"sha": "a40f47f895bbea170b52ab030ce1b0fbf333f075", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -6,6 +6,9 @@\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_ast as ast;\n use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{self, AttributesData, CanSynthesizeMissingTokens, LazyTokenStream};"}, {"sha": "fe0468c69568a6658a0f7da80a9ba7760b7d86e7", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -1084,6 +1084,7 @@ impl<'a> Parser<'a> {\n \n     /// If we encounter a parser state that looks like the user has written a `struct` literal with\n     /// parentheses instead of braces, recover the parser state and provide suggestions.\n+    #[instrument(skip(self, seq, snapshot), level = \"trace\")]\n     fn maybe_recover_struct_lit_bad_delims(\n         &mut self,\n         lo: Span,"}, {"sha": "27215556045be2fe15eddda96a73f816f532262b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -902,7 +902,12 @@ impl Session {\n                 let mut fuel = self.optimization_fuel.lock();\n                 ret = fuel.remaining != 0;\n                 if fuel.remaining == 0 && !fuel.out_of_fuel {\n-                    self.warn(&format!(\"optimization-fuel-exhausted: {}\", msg()));\n+                    if self.diagnostic().can_emit_warnings() {\n+                        // We only call `msg` in case we can actually emit warnings.\n+                        // Otherwise, this could cause a `delay_good_path_bug` to\n+                        // trigger (issue #79546).\n+                        self.warn(&format!(\"optimization-fuel-exhausted: {}\", msg()));\n+                    }\n                     fuel.out_of_fuel = true;\n                 } else if fuel.remaining > 0 {\n                     fuel.remaining -= 1;"}, {"sha": "032ae73bbf3c61fe503de4442584f5fc658a0e2b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -25,6 +25,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_data_structures::AtomicRef;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -782,13 +785,30 @@ impl Span {\n     ///     ^^^^^^^^^^^^^^^^^\n     /// ```\n     pub fn until(self, end: Span) -> Span {\n-        let span = self.data();\n-        let end = end.data();\n+        // Most of this function's body is copied from `to`.\n+        // We can't just do `self.to(end.shrink_to_lo())`,\n+        // because to also does some magic where it uses min/max so\n+        // it can handle overlapping spans. Some advanced mis-use of\n+        // `until` with different ctxts makes this visible.\n+        let span_data = self.data();\n+        let end_data = end.data();\n+        // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).\n+        // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n+        // have an incomplete span than a completely nonsensical one.\n+        if span_data.ctxt != end_data.ctxt {\n+            if span_data.ctxt == SyntaxContext::root() {\n+                return end;\n+            } else if end_data.ctxt == SyntaxContext::root() {\n+                return self;\n+            }\n+            // Both spans fall within a macro.\n+            // FIXME(estebank): check if it is the *same* macro.\n+        }\n         Span::new(\n-            span.lo,\n-            end.lo,\n-            if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },\n-            if span.parent == end.parent { span.parent } else { None },\n+            span_data.lo,\n+            end_data.lo,\n+            if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },\n+            if span_data.parent == end_data.parent { span_data.parent } else { None },\n         )\n     }\n "}, {"sha": "b79f00a8a36425f7dea49abd4ce50b97ee866847", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -474,11 +474,12 @@ impl SourceMap {\n         f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())\n     }\n \n+    #[instrument(skip(self), level = \"trace\")]\n     pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {\n         let lo = self.lookup_char_pos(sp.lo());\n-        debug!(\"span_to_lines: lo={:?}\", lo);\n+        trace!(?lo);\n         let hi = self.lookup_char_pos(sp.hi());\n-        debug!(\"span_to_lines: hi={:?}\", hi);\n+        trace!(?hi);\n         if lo.file.start_pos != hi.file.start_pos {\n             return Err(SpanLinesError::DistinctSources(DistinctSources {\n                 begin: (lo.file.name.clone(), lo.file.start_pos),"}, {"sha": "dc91f1230964921d22bd30924373df7fc78744cf", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -4,7 +4,9 @@ pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"apple-a12\".to_string();\n     base.max_atomic_width = Some(128);\n-    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::THREAD;\n+\n+    // FIXME: The leak sanitizer currently fails the tests, see #88132.\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::THREAD;\n \n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());"}, {"sha": "2b3a18a439fc92c56d2b6f530c73e85ce03db3c9", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -1086,6 +1086,7 @@ unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Box<T> {\n     /// Creates a `Box<T>`, with the `Default` value for T.\n@@ -1394,6 +1395,7 @@ impl<A: Allocator> From<Box<str, A>> for Box<[u8], A> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_array\", since = \"1.45.0\")]\n impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// Converts a `[T; N]` into a `Box<[T]>`"}, {"sha": "2f6887229e7a30e744a0a31e32c5a13d2a472b35", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -2841,6 +2841,7 @@ impl<T: Clone> From<&mut [T]> for Vec<T> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\n impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     #[cfg(not(test))]"}, {"sha": "917959976411cf700b4781bfb6d7cc73ed61fb75", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -209,6 +209,22 @@ some consideration for their stability, and names that end in a number). Giving\n `rustdoc` will disable this sorting and instead make it print the items in the order they appear in\n the source.\n \n+### `--show-type-layout`: add a section to each type's docs describing its memory layout\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --show-type-layout\n+```\n+\n+When this flag is passed, rustdoc will add a \"Layout\" section at the bottom of\n+each type's docs page that includes a summary of the type's memory layout as\n+computed by rustc. For example, rustdoc will show the size in bytes that a value\n+of that type will take in memory.\n+\n+Note that most layout information is **completely unstable** and may even differ\n+between compilations.\n+\n ### `--resource-suffix`: modifying the name of CSS/JavaScript in crate docs\n \n Using this flag looks like this:\n@@ -333,7 +349,7 @@ Some methodology notes about what rustdoc counts in this metric:\n Public items that are not documented can be seen with the built-in `missing_docs` lint. Private\n items that are not documented can be seen with Clippy's `missing_docs_in_private_items` lint.\n \n-## `-w`/`--output-format`: output format\n+### `-w`/`--output-format`: output format\n \n When using\n [`--show-coverage`](https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html#--show-coverage-get-statistics-about-code-documentation-coverage),"}, {"sha": "3104cb3a3dd0153a626a3d30084fd07347b143c2", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -1663,7 +1663,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n             writeln!(\n                 w,\n                 \"<div class=\\\"warning\\\"><p><strong>Note:</strong> Most layout information is \\\n-                 completely unstable and may be different between compiler versions and platforms. \\\n+                 <strong>completely unstable</strong> and may even differ between compilations. \\\n                  The only exception is types with certain <code>repr(...)</code> attributes. \\\n                  Please see the Rust Reference\u2019s \\\n                  <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\"}, {"sha": "00dccf5f9064a3dfa00f9d2d98c59dc5ed82e436", "filename": "src/test/debuginfo/mutex.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutex.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -3,8 +3,6 @@\n // cdb-only\n // min-cdb-version: 10.0.21287.1005\n // compile-flags:-g\n-// FIXME: Failed on update to 10.0.22000.1\n-// ignore-windows\n \n // === CDB TESTS ==================================================================================\n //\n@@ -14,17 +12,17 @@\n // cdb-check:m,d              [Type: std::sync::mutex::Mutex<i32>]\n // cdb-check:    [...] inner            [Type: std::sys_common::mutex::MovableMutex]\n // cdb-check:    [...] poison           [Type: std::sync::poison::Flag]\n-// cdb-check:    [...] data             [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] data             : 0 [Type: core::cell::UnsafeCell<i32>]\n \n //\n // cdb-command:dx m.data,d\n-// cdb-check:m.data,d         [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 0 [Type: int]\n+// cdb-check:m.data,d         : 0 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n //\n // cdb-command:dx lock,d\n-// cdb-check:lock,d           : Ok [Type: enum$<core::result::Result<std::sync::mutex::MutexGuard<i32>, enum$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32> >, 0, 1, Poisoned> > >]\n-// cdb-check:    [...] variant$         : Ok (0) [Type: core::result::Result]\n+// cdb-check:lock,d           : Ok [Type: enum$<core::result::Result<std::sync::mutex::MutexGuard<i32>,enum$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32> >, 0, 1, Poisoned> > >]\n+// cdb-check:    [variant]        : Ok\n // cdb-check:    [...] __0              [Type: std::sync::mutex::MutexGuard<i32>]\n \n use std::sync::Mutex;"}, {"sha": "0e9f54088b8e9f0db9c2af822adb6eab8190b933", "filename": "src/test/ui/lint/issue-79546-fuel-ice.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftest%2Fui%2Flint%2Fissue-79546-fuel-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftest%2Fui%2Flint%2Fissue-79546-fuel-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-79546-fuel-ice.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for the ICE described in #79546.\n+\n+// compile-flags: --cap-lints=allow -Zfuel=issue79546=0\n+// check-pass\n+#![crate_name=\"issue79546\"]\n+\n+struct S;\n+fn main() {}"}, {"sha": "a37a806a15749e449cf26e99dc64ee9f56c8dad2", "filename": "src/test/ui/parser/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -26,7 +26,7 @@ LL |         bar {  }\n help: if `bar` is a function, use the arguments directly\n    |\n LL -         bar(baz: $rest)\n-LL +         bar(true);\n+LL +         bar(: $rest)\n    | \n \n error: aborting due to 2 previous errors"}, {"sha": "d03c21dc5086fe499e14d94d00e366669467955a", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "patch": "@@ -96,7 +96,8 @@ pub const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n ];\n \n pub const LSAN_SUPPORTED_TARGETS: &[&str] = &[\n-    \"aarch64-apple-darwin\",\n+    // FIXME: currently broken, see #88132\n+    // \"aarch64-apple-darwin\",\n     \"aarch64-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-unknown-linux-gnu\","}]}