{"sha": "8e163f9dce5da0c8badc365bba85b85b93850517", "node_id": "C_kwDOAAsO6NoAKDhlMTYzZjlkY2U1ZGEwYzhiYWRjMzY1YmJhODViODViOTM4NTA1MTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-14T20:32:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-14T20:32:51Z"}, "message": "Rename const error methods for consistency", "tree": {"sha": "172304aee3f78b44ac0498b0f31bf802aff74a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172304aee3f78b44ac0498b0f31bf802aff74a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e163f9dce5da0c8badc365bba85b85b93850517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e163f9dce5da0c8badc365bba85b85b93850517", "html_url": "https://github.com/rust-lang/rust/commit/8e163f9dce5da0c8badc365bba85b85b93850517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e163f9dce5da0c8badc365bba85b85b93850517/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d59fa3d23f021a18289416caf79fdf050bbc3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d59fa3d23f021a18289416caf79fdf050bbc3b0", "html_url": "https://github.com/rust-lang/rust/commit/7d59fa3d23f021a18289416caf79fdf050bbc3b0"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "7e591fd25bfe6a2b7078cd01810e82278e0e1e36", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -464,7 +464,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.astconv.ct_infer(ty, Some(param), inf.span).into()\n                         } else {\n                             self.inferred_params.push(inf.span);\n-                            tcx.const_error(ty).into()\n+                            tcx.const_error_misc(ty).into()\n                         }\n                     }\n                     _ => unreachable!(),\n@@ -518,7 +518,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .no_bound_vars()\n                             .expect(\"const parameter types cannot be generic\");\n                         if let Err(guar) = ty.error_reported() {\n-                            return tcx.const_error_with_guaranteed(ty, guar).into();\n+                            return tcx.const_error(ty, guar).into();\n                         }\n                         if !infer_args && has_default {\n                             tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n@@ -527,7 +527,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()\n                             } else {\n                                 // We've already errored above about the mismatch.\n-                                tcx.const_error(ty).into()\n+                                tcx.const_error_misc(ty).into()\n                             }\n                         }\n                     }\n@@ -1387,7 +1387,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         term = match def_kind {\n                             hir::def::DefKind::AssocTy => tcx.ty_error(reported).into(),\n                             hir::def::DefKind::AssocConst => tcx\n-                                .const_error_with_guaranteed(\n+                                .const_error(\n                                     tcx.type_of(assoc_item_def_id)\n                                         .subst(tcx, projection_ty.skip_binder().substs),\n                                     reported,"}, {"sha": "59bee69cfffacf447c512160393dd6f44cfeb6ab", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -836,7 +836,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.interner().const_error_with_guaranteed(ct.ty(), e)\n+                self.interner().const_error(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "3f385c47f1990e6308a9b17d555a4af802cc0022", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -209,11 +209,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             // HACK: equating both sides with `[const error]` eagerly prevents us\n             // from leaving unconstrained inference vars during things like impl\n             // matching in the solver.\n-            let a_error = self.tcx.const_error_with_guaranteed(a.ty(), guar);\n+            let a_error = self.tcx.const_error(a.ty(), guar);\n             if let ty::ConstKind::Infer(InferConst::Var(vid)) = a.kind() {\n                 return self.unify_const_variable(vid, a_error);\n             }\n-            let b_error = self.tcx.const_error_with_guaranteed(b.ty(), guar);\n+            let b_error = self.tcx.const_error(b.ty(), guar);\n             if let ty::ConstKind::Infer(InferConst::Var(vid)) = b.kind() {\n                 return self.unify_const_variable(vid, b_error);\n             }"}, {"sha": "e5d1d1f1c2dc8bd7781af08369143075633dd951", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -2313,7 +2313,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 if let Some(val) = c.kind().try_eval_for_mir(tcx, param_env) {\n                     match val {\n                         Ok(val) => Self::Val(val, c.ty()),\n-                        Err(_) => Self::Ty(tcx.const_error(self.ty())),\n+                        Err(guar) => Self::Ty(tcx.const_error(self.ty(), guar)),\n                     }\n                 } else {\n                     self\n@@ -2325,9 +2325,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n                     Err(ErrorHandled::TooGeneric) => self,\n-                    Err(ErrorHandled::Reported(guar)) => {\n-                        Self::Ty(tcx.const_error_with_guaranteed(ty, guar))\n-                    }\n+                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar)),\n                 }\n             }\n         }"}, {"sha": "a39631da93666b3ff3f4ccd15dd4da83a81fa025", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             fn fold_const(&mut self, c: Const<'tcx>) -> Const<'tcx> {\n                 let ct = match c.kind() {\n                     ty::ConstKind::Unevaluated(uv) => match self.tcx.thir_abstract_const(uv.def) {\n-                        Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n+                        Err(e) => self.tcx.const_error(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);\n                             let bac = bac.subst(self.tcx, substs);"}, {"sha": "0a5792a9c4713c8874365acf53d1a52871007814", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -142,9 +142,7 @@ impl<'tcx> Const<'tcx> {\n                         ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n                         param_ty,\n                     )),\n-                    Some(rbv::ResolvedArg::Error(guar)) => {\n-                        Some(tcx.const_error_with_guaranteed(param_ty, guar))\n-                    }\n+                    Some(rbv::ResolvedArg::Error(guar)) => Some(tcx.const_error(param_ty, guar)),\n                     arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n                 }\n             }\n@@ -228,7 +226,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.kind().try_eval_for_typeck(tcx, param_env) {\n             match val {\n                 Ok(val) => tcx.mk_const(val, self.ty()),\n-                Err(guar) => tcx.const_error_with_guaranteed(self.ty(), guar),\n+                Err(guar) => tcx.const_error(self.ty(), guar),\n             }\n         } else {\n             // Either the constant isn't evaluatable or ValTree creation failed."}, {"sha": "495a7807e8b3f63cf2d4b4253b4ece66c8219695", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -735,17 +735,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n     #[track_caller]\n-    pub fn const_error_with_guaranteed(\n-        self,\n-        ty: Ty<'tcx>,\n-        reported: ErrorGuaranteed,\n-    ) -> Const<'tcx> {\n+    pub fn const_error(self, ty: Ty<'tcx>, reported: ErrorGuaranteed) -> Const<'tcx> {\n         self.mk_const(ty::ConstKind::Error(reported), ty)\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n     #[track_caller]\n-    pub fn const_error(self, ty: Ty<'tcx>) -> Const<'tcx> {\n+    pub fn const_error_misc(self, ty: Ty<'tcx>) -> Const<'tcx> {\n         self.const_error_with_message(\n             ty,\n             DUMMY_SP,"}, {"sha": "99174bae3f657d97e90e5d79abec40251ea500c5", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -103,7 +103,7 @@ impl GenericParamDef {\n             ty::GenericParamDefKind::Lifetime => tcx.mk_re_error_misc().into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error_misc().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n-                tcx.const_error(tcx.type_of(self.def_id).subst(tcx, preceding_substs)).into()\n+                tcx.const_error_misc(tcx.type_of(self.def_id).subst(tcx, preceding_substs)).into()\n             }\n         }\n     }"}, {"sha": "1b336b7bfc6ebf3c4471e8b2e3930b5be0440c61", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -207,14 +207,16 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                     Some(GenericArgKind::Const(c1)) => c1,\n                     Some(u) => panic!(\"const mapped to unexpected kind: {:?}\", u),\n                     None => {\n-                        if !self.ignore_errors {\n-                            self.tcx.sess.emit_err(ConstNotUsedTraitAlias {\n+                        let guar = self\n+                            .tcx\n+                            .sess\n+                            .create_err(ConstNotUsedTraitAlias {\n                                 ct: ct.to_string(),\n                                 span: self.span,\n-                            });\n-                        }\n+                            })\n+                            .emit_unless(self.ignore_errors);\n \n-                        self.interner().const_error(ct.ty())\n+                        self.interner().const_error(ct.ty(), guar)\n                     }\n                 }\n             }"}, {"sha": "4d99ab4b0ec2902879388989c8f18082616ebffd", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -52,7 +52,7 @@ pub fn as_constant_inner<'tcx>(\n                 match lit_to_mir_constant(tcx, LitToConstInput { lit: &lit.node, ty, neg }) {\n                     Ok(c) => c,\n                     Err(LitToConstError::Reported(guar)) => {\n-                        ConstantKind::Ty(tcx.const_error_with_guaranteed(ty, guar))\n+                        ConstantKind::Ty(tcx.const_error(ty, guar))\n                     }\n                     Err(LitToConstError::TypeError) => {\n                         bug!(\"encountered type error in `lit_to_mir_constant`\")"}, {"sha": "10a17d962b32a778ca1bb4443c2631cbcbc0b193", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e163f9dce5da0c8badc365bba85b85b93850517/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=8e163f9dce5da0c8badc365bba85b85b93850517", "patch": "@@ -115,9 +115,7 @@ fn recurse_build<'tcx>(\n             let sp = node.span;\n             match tcx.at(sp).lit_to_const(LitToConstInput { lit: &lit.node, ty: node.ty, neg }) {\n                 Ok(c) => c,\n-                Err(LitToConstError::Reported(guar)) => {\n-                    tcx.const_error_with_guaranteed(node.ty, guar)\n-                }\n+                Err(LitToConstError::Reported(guar)) => tcx.const_error(node.ty, guar),\n                 Err(LitToConstError::TypeError) => {\n                     bug!(\"encountered type error in lit_to_const\")\n                 }"}]}