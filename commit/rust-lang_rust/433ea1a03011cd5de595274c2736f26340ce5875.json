{"sha": "433ea1a03011cd5de595274c2736f26340ce5875", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzM2VhMWEwMzAxMWNkNWRlNTk1Mjc0YzI3MzZmMjYzNDBjZTU4NzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T11:34:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T11:34:34Z"}, "message": "Rollup merge of #65295 - estebank:gotta-go-fast, r=nnethercote\n\nMove diagnostics code out of the critical path\n\nFollow up to #65077.\n\nr? @nnethercote", "tree": {"sha": "7da20c73bf20ade679e3fbbf4f5a6310831cd04e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7da20c73bf20ade679e3fbbf4f5a6310831cd04e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/433ea1a03011cd5de595274c2736f26340ce5875", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdowvLCRBK7hj4Ov3rIwAAdHIIACzapiwZtvivN+wkA5bFbCUO\nLTA3VMHjXhvDMZm7KEA6h8aDpk6Ofb6BLe7TznSTi6xQDa10D75SGuqDvOD+0MN0\nm0IWGEFaWeEtWnsU2wtNDvqqaEzhFdMt8FqKbJVAVpaL0q5kloFOQJJDsLK7MVpI\nIfzLutDfH56FBHzMmRy6f0vGNHdWyLqzRjFClGU7foow8TziveYpHrTbHQ00x6hZ\nRWQ7R547oLBqv/dWlThT7SX9WiDwFx/2DkGhp4ldhYUAOLeC5ECv/WkkUZZzwM6j\nG1cBCQoH7jZv3/eyQ/UWaXf67T4md90c2RdfDx92m/YqyL5TLJ07ElnfKRRq39s=\n=grlw\n-----END PGP SIGNATURE-----\n", "payload": "tree 7da20c73bf20ade679e3fbbf4f5a6310831cd04e\nparent 540278c5ae8a0a395619c3879c96ce5cd5ae7b04\nparent 5bb0a03fa77e3f08724e9a4745703a1774f43921\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570966474 +0200\ncommitter GitHub <noreply@github.com> 1570966474 +0200\n\nRollup merge of #65295 - estebank:gotta-go-fast, r=nnethercote\n\nMove diagnostics code out of the critical path\n\nFollow up to #65077.\n\nr? @nnethercote\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/433ea1a03011cd5de595274c2736f26340ce5875", "html_url": "https://github.com/rust-lang/rust/commit/433ea1a03011cd5de595274c2736f26340ce5875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/433ea1a03011cd5de595274c2736f26340ce5875/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540278c5ae8a0a395619c3879c96ce5cd5ae7b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/540278c5ae8a0a395619c3879c96ce5cd5ae7b04", "html_url": "https://github.com/rust-lang/rust/commit/540278c5ae8a0a395619c3879c96ce5cd5ae7b04"}, {"sha": "5bb0a03fa77e3f08724e9a4745703a1774f43921", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb0a03fa77e3f08724e9a4745703a1774f43921", "html_url": "https://github.com/rust-lang/rust/commit/5bb0a03fa77e3f08724e9a4745703a1774f43921"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "e57cc809c347989488f7ba5e150ec4b05782141c", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/433ea1a03011cd5de595274c2736f26340ce5875/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433ea1a03011cd5de595274c2736f26340ce5875/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=433ea1a03011cd5de595274c2736f26340ce5875", "patch": "@@ -213,27 +213,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             segment,\n         );\n \n-        let mut needs_mut = false;\n-        if let ty::Ref(region, t_type, mutability) = self_ty.kind {\n-            let trait_type = self.tcx.mk_ref(region, ty::TypeAndMut {\n-                ty: t_type,\n-                mutbl: mutability.invert(),\n-            });\n-            match self.lookup_probe(\n-                span,\n-                segment.ident,\n-                trait_type,\n-                call_expr,\n-                ProbeScope::TraitsInScope\n-            ) {\n-                Ok(ref new_pick) if *new_pick != pick => {\n-                    needs_mut = true;\n+        if result.illegal_sized_bound {\n+            let mut needs_mut = false;\n+            if let ty::Ref(region, t_type, mutability) = self_ty.kind {\n+                let trait_type = self.tcx.mk_ref(region, ty::TypeAndMut {\n+                    ty: t_type,\n+                    mutbl: mutability.invert(),\n+                });\n+                // We probe again to see if there might be a borrow mutability discrepancy.\n+                match self.lookup_probe(\n+                    span,\n+                    segment.ident,\n+                    trait_type,\n+                    call_expr,\n+                    ProbeScope::TraitsInScope\n+                ) {\n+                    Ok(ref new_pick) if *new_pick != pick => {\n+                        needs_mut = true;\n+                    }\n+                    _ => {}\n                 }\n-                _ => {}\n             }\n-        }\n \n-        if result.illegal_sized_bound {\n             // We probe again, taking all traits into account (not only those in scope).\n             let candidates = match self.lookup_probe(\n                 span,"}]}