{"sha": "a6fc84440f3353b1090dc52d7859136880db89ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZmM4NDQ0MGYzMzUzYjEwOTBkYzUyZDc4NTkxMzY4ODBkYjg5ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-25T04:55:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-25T04:55:57Z"}, "message": "Auto merge of #46914 - mikeyhew:raw_pointer_self, r=arielb1\n\nConvert warning about `*const _` to a future-compat lint\n\n#46664 was merged before I could convert the soft warning about method lookup on `*const _` into a future-compatibility lint. This PR makes that change.\n\nfixes #46837\ntracking issue for the future-compatibility lint: #46906\n\nr? @arielb1", "tree": {"sha": "ae9034dfdbd3fa7ad9b228758573a9d5b1f2b584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9034dfdbd3fa7ad9b228758573a9d5b1f2b584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6fc84440f3353b1090dc52d7859136880db89ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fc84440f3353b1090dc52d7859136880db89ec", "html_url": "https://github.com/rust-lang/rust/commit/a6fc84440f3353b1090dc52d7859136880db89ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6fc84440f3353b1090dc52d7859136880db89ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae65dcc30f421fd91b9e2d67cf77c86bfb20ee3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae65dcc30f421fd91b9e2d67cf77c86bfb20ee3a", "html_url": "https://github.com/rust-lang/rust/commit/ae65dcc30f421fd91b9e2d67cf77c86bfb20ee3a"}, {"sha": "60e66290451644e81323daa7cf03c337a6569c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e66290451644e81323daa7cf03c337a6569c83", "html_url": "https://github.com/rust-lang/rust/commit/60e66290451644e81323daa7cf03c337a6569c83"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "7f7246df8f2a72d2d6a97f4730ea15a6cefd347c", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -1829,7 +1829,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n-    ///     let mut dst = Vec::with_capacity(elts);\n+    ///     let mut dst: Vec<T> = Vec::with_capacity(elts);\n     ///     dst.set_len(elts);\n     ///     dst.as_mut_ptr().copy_from(ptr, elts);\n     ///     dst\n@@ -1868,7 +1868,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n-    ///     let mut dst = Vec::with_capacity(elts);\n+    ///     let mut dst: Vec<T> = Vec::with_capacity(elts);\n     ///     dst.set_len(elts);\n     ///     dst.as_mut_ptr().copy_from_nonoverlapping(ptr, elts);\n     ///     dst"}, {"sha": "7410386c6f45b67f9fac90286149f5061571b45d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -240,6 +240,12 @@ declare_lint! {\n    \"detects single use lifetimes\"\n }\n \n+declare_lint! {\n+    pub TYVAR_BEHIND_RAW_POINTER,\n+    Warn,\n+    \"raw pointer to an inference variable\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -284,7 +290,8 @@ impl LintPass for HardwiredLints {\n             UNUSED_UNSAFE,\n             UNUSED_MUT,\n             COERCE_NEVER,\n-            SINGLE_USE_LIFETIME\n+            SINGLE_USE_LIFETIME,\n+            TYVAR_BEHIND_RAW_POINTER\n         )\n     }\n }"}, {"sha": "57fc78ef531107fa58d73f25f7e8c842eb9eea74", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -138,7 +138,7 @@ impl<A: Array> ArrayVec<A> {\n             // Use the borrow in the IterMut to indicate borrowing behavior of the\n             // whole Drain iterator (like &mut T).\n             let range_slice = {\n-                let arr = &mut self.values as &mut [ManuallyDrop<_>];\n+                let arr = &mut self.values as &mut [ManuallyDrop<<A as Array>::Element>];\n                 slice::from_raw_parts_mut(arr.as_mut_ptr().offset(start as isize),\n                                           end - start)\n             };\n@@ -255,12 +255,13 @@ impl<'a, A: Array> Drop for Drain<'a, A> {\n \n         if self.tail_len > 0 {\n             unsafe {\n-                let source_array_vec = self.array_vec.as_mut();\n+                let source_array_vec: &mut ArrayVec<A> = self.array_vec.as_mut();\n                 // memmove back untouched tail, update to new length\n                 let start = source_array_vec.len();\n                 let tail = self.tail_start;\n                 {\n-                    let arr = &mut source_array_vec.values as &mut [ManuallyDrop<_>];\n+                    let arr =\n+                        &mut source_array_vec.values as &mut [ManuallyDrop<<A as Array>::Element>];\n                     let src = arr.as_ptr().offset(tail as isize);\n                     let dst = arr.as_mut_ptr().offset(start as isize);\n                     ptr::copy(src, dst, self.tail_len);"}, {"sha": "3d7f05afefc1f65c0be2690906a0a1c131391b60", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -255,6 +255,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(COERCE_NEVER),\n             reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n+            reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "53bb0e577a4b68405b95b9318cf1197e0af24e30", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -27,6 +27,7 @@ use syntax::ast;\n use syntax::util::lev_distance::{lev_distance, find_best_match_for_name};\n use syntax_pos::Span;\n use rustc::hir;\n+use rustc::lint;\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -249,7 +250,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // think cause spurious errors. Really though this part should\n         // take place in the `self.probe` below.\n         let steps = if mode == Mode::MethodCall {\n-            match self.create_steps(span, self_ty, is_suggestion) {\n+            match self.create_steps(span, scope_expr_id, self_ty, is_suggestion) {\n                 Some(steps) => steps,\n                 None => {\n                     return Err(MethodError::NoMatch(NoMatchData::new(Vec::new(),\n@@ -291,6 +292,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn create_steps(&self,\n                     span: Span,\n+                    scope_expr_id: ast::NodeId,\n                     self_ty: Ty<'tcx>,\n                     is_suggestion: IsSuggestion)\n                     -> Option<Vec<CandidateStep<'tcx>>> {\n@@ -318,18 +320,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match final_ty.sty {\n             ty::TyInfer(ty::TyVar(_)) => {\n                 // Ended in an inference variable. If we are doing\n-                // a real method lookup, this is a hard error (it's an\n-                // ambiguity and we can't make progress).\n+                // a real method lookup, this is a hard error because it's\n+                // possible that there will be multiple applicable methods.\n                 if !is_suggestion.0 {\n                     if reached_raw_pointer\n                     && !self.tcx.sess.features.borrow().arbitrary_self_types {\n-                        // only produce a warning in this case, because inference variables used to\n-                        // be allowed here in some cases for raw pointers\n-                        struct_span_warn!(self.tcx.sess, span, E0619,\n-                            \"the type of this value must be known in this context\")\n-                        .note(\"this will be made into a hard error in a future version of \\\n-                               the compiler\")\n-                        .emit();\n+                        // this case used to be allowed by the compiler,\n+                        // so we do a future-compat lint here\n+                        // (see https://github.com/rust-lang/rust/issues/46906)\n+                        self.tcx.lint_node(\n+                            lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n+                            scope_expr_id,\n+                            span,\n+                            &format!(\"the type of this value must be known in this context\"));\n                     } else {\n                         let t = self.structurally_resolved_type(span, final_ty);\n                         assert_eq!(t, self.tcx.types.err);"}, {"sha": "a46e855b4a6f4ed4febec988f3753e6712e9c44a", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -453,7 +453,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n         ENV_LOCK.lock();\n-        let s = libc::getenv(k.as_ptr()) as *const _;\n+        let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n         } else {"}, {"sha": "165e1b0609b68c8ce9d09c7008fef87d462e7e43", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -770,7 +770,7 @@ fn symlink_junction_inner(target: &Path, junction: &Path) -> io::Result<()> {\n         let mut data = [0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n         let db = data.as_mut_ptr()\n                     as *mut c::REPARSE_MOUNTPOINT_DATA_BUFFER;\n-        let buf = &mut (*db).ReparseTarget as *mut _;\n+        let buf = &mut (*db).ReparseTarget as *mut c::WCHAR;\n         let mut i = 0;\n         // FIXME: this conversion is very hacky\n         let v = br\"\\??\\\";"}, {"sha": "6ad3af6aee1d5cf42d329694e7b1257a2d2c6224", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -73,7 +73,7 @@ pub fn resolve_symname<F>(frame: Frame,\n                 \"failed to allocate libbacktrace state\")\n             )\n         }\n-        let mut data = ptr::null();\n+        let mut data: *const libc::c_char = ptr::null();\n         let data_addr = &mut data as *mut *const libc::c_char;\n         let ret = unsafe {\n             backtrace_syminfo(state,"}, {"sha": "d0ee55c092b284476ad1a48e7facb0432266ae91", "filename": "src/test/ui/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6fc84440f3353b1090dc52d7859136880db89ec/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr?ref=a6fc84440f3353b1090dc52d7859136880db89ec", "patch": "@@ -1,8 +1,10 @@\n-warning[E0619]: the type of this value must be known in this context\n+warning: the type of this value must be known in this context\n   --> $DIR/inference-variable-behind-raw-pointer.rs:18:13\n    |\n 18 |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n-   = note: this will be made into a hard error in a future version of the compiler\n+   = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}]}