{"sha": "12d11e9a35ccb380388c0568ed1d8735d89f51c3", "node_id": "C_kwDOAAsO6NoAKDEyZDExZTlhMzVjY2IzODAzODhjMDU2OGVkMWQ4NzM1ZDg5ZjUxYzM", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-11T02:36:15Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-11T02:36:15Z"}, "message": "implement `is_accessible_span`", "tree": {"sha": "62bf8f362ae877f3f2caf533cfc4d7767321832f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62bf8f362ae877f3f2caf533cfc4d7767321832f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d11e9a35ccb380388c0568ed1d8735d89f51c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d11e9a35ccb380388c0568ed1d8735d89f51c3", "html_url": "https://github.com/rust-lang/rust/commit/12d11e9a35ccb380388c0568ed1d8735d89f51c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d11e9a35ccb380388c0568ed1d8735d89f51c3/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17355a3b9f30e16870a1890033bd13463c664f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/17355a3b9f30e16870a1890033bd13463c664f81", "html_url": "https://github.com/rust-lang/rust/commit/17355a3b9f30e16870a1890033bd13463c664f81"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "ed628f35148ef965aef8cb6447b57b14e88f3217", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -309,7 +309,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ));\n \n                 // Check first whether the source is accessible (issue #87060)\n-                if self.infcx.tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                if self.infcx.tcx.sess.source_map().is_accessible_span(deref_target) {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n             }"}, {"sha": "3ecf259935a59b655833ee182859697231b959c3", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -975,14 +975,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if self.fn_self_span_reported.insert(fn_span) {\n                         err.span_note(\n                             // Check whether the source is accessible\n-                            if self\n-                                .infcx\n-                                .tcx\n-                                .sess\n-                                .source_map()\n-                                .span_to_snippet(self_arg.span)\n-                                .is_ok()\n-                            {\n+                            if self.infcx.tcx.sess.source_map().is_accessible_span(self_arg.span) {\n                                 self_arg.span\n                             } else {\n                                 fn_call_span"}, {"sha": "631a646b2bcb73dfb4e0b7ebb4898b461821bac6", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 err.note(&format!(\"attempting to deref into `{}`\", deref_target_ty));\n \n                 // Check first whether the source is accessible (issue #87060)\n-                if tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                if tcx.sess.source_map().is_accessible_span(deref_target) {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n "}, {"sha": "f4624c07636030f86cc18a76f81b239f2a9f7db6", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -1558,7 +1558,7 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     insertion_span: Span,\n ) {\n     diag.span_label(path_span, format!(\"expected lifetime parameter{}\", pluralize!(n)));\n-    if source_map.span_to_snippet(insertion_span).is_err() {\n+    if !source_map.is_accessible_span(insertion_span) {\n         // Do not try to suggest anything if generated by a proc-macro.\n         return;\n     }"}, {"sha": "f3d0002563f0eda06a672bdfb7cb0e6ce1322eb8", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -432,7 +432,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 \"`let` bindings require an \\\"irrefutable pattern\\\", like a `struct` or \\\n                  an `enum` with only one variant\",\n             );\n-            if self.tcx.sess.source_map().span_to_snippet(span).is_ok() {\n+            if self.tcx.sess.source_map().is_accessible_span(span) {\n                 let semi_span = span.shrink_to_hi().with_lo(span.hi() - BytePos(1));\n                 let start_span = span.shrink_to_lo();\n                 let end_span = semi_span.shrink_to_lo();"}, {"sha": "eb2de140441db384fce122b5414292dd603a1fe6", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -1650,7 +1650,7 @@ impl<'a> Resolver<'a> {\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {\n         let res = b.res();\n-        if b.span.is_dummy() || self.session.source_map().span_to_snippet(b.span).is_err() {\n+        if b.span.is_dummy() || !self.session.source_map().is_accessible_span(b.span) {\n             // These already contain the \"built-in\" prefix or look bad with it.\n             let add_built_in =\n                 !matches!(b.res(), Res::NonMacroAttr(..) | Res::PrimTy(..) | Res::ToolMod);"}, {"sha": "66ed32dced69e067439a8f1f253f17bf14ef9d59", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -597,6 +597,13 @@ impl SourceMap {\n         local_begin.sf.src.is_some() && local_end.sf.src.is_some()\n     }\n \n+    pub fn is_accessible_span(&self, sp: Span) -> bool {\n+        self.span_to_source(sp, |src, start_index, end_index| {\n+            Ok(src.get(start_index..end_index).is_some())\n+        })\n+        .map_or(false, |is_accessible| is_accessible)\n+    }\n+\n     /// Returns the source snippet as `String` corresponding to the given `Span`.\n     pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, end_index| {"}, {"sha": "af30526b35a7e0892f3f7c5b73cc57d225a1cba2", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -760,7 +760,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if let Some(call_span) =\n                         iter::successors(Some(expr.span), |s| s.parent_callsite())\n                             .find(|&s| sp.contains(s))\n-                        && sm.span_to_snippet(call_span).is_ok()\n+                        && sm.is_accessible_span(call_span)\n                     {\n                         return Some((\n                             sp.with_hi(call_span.lo()),\n@@ -773,7 +773,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return None;\n                 }\n                 if sp.contains(expr.span)\n-                    && sm.span_to_snippet(expr.span).is_ok()\n+                    && sm.is_accessible_span(expr.span)\n                 {\n                     return Some((\n                         sp.with_hi(expr.span.lo()),"}, {"sha": "23af72bf56271184f6f9b10d6329309dcff1fa9a", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d11e9a35ccb380388c0568ed1d8735d89f51c3/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=12d11e9a35ccb380388c0568ed1d8735d89f51c3", "patch": "@@ -812,7 +812,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// Builds the `type defined here` message.\n     fn show_definition(&self, err: &mut Diagnostic) {\n         let mut spans: MultiSpan = if let Some(def_span) = self.tcx.def_ident_span(self.def_id) {\n-            if self.tcx.sess.source_map().span_to_snippet(def_span).is_ok() {\n+            if self.tcx.sess.source_map().is_accessible_span(def_span) {\n                 def_span.into()\n             } else {\n                 return;"}]}