{"sha": "8e9a5d928a035a13fea5d134eaa7c1657407692d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWE1ZDkyOGEwMzVhMTNmZWE1ZDEzNGVhYTdjMTY1NzQwNzY5MmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-22T10:16:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-04T05:20:58Z"}, "message": "typeck/type_of: let wfcheck handle concrete types in opaque types' substs.", "tree": {"sha": "6c235d36eab9d2e682b81ff7a534b34b4aedec37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c235d36eab9d2e682b81ff7a534b34b4aedec37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9a5d928a035a13fea5d134eaa7c1657407692d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9a5d928a035a13fea5d134eaa7c1657407692d", "html_url": "https://github.com/rust-lang/rust/commit/8e9a5d928a035a13fea5d134eaa7c1657407692d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9a5d928a035a13fea5d134eaa7c1657407692d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "html_url": "https://github.com/rust-lang/rust/commit/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb"}], "stats": {"total": 132, "additions": 71, "deletions": 61}, "files": [{"sha": "43bf7660ac29c76021ba6d29980f677ec148329b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -864,13 +864,15 @@ fn check_opaque_types<'fcx, 'tcx>(\n                 trace!(\"check_opaque_types: opaque_ty, {:?}, {:?}\", def_id, substs);\n                 let generics = tcx.generics_of(def_id);\n                 // Only check named `impl Trait` types defined in this crate.\n+                // FIXME(eddyb) is  `generics.parent.is_none()` correct? It seems\n+                // potentially risky wrt associated types in `impl`s.\n                 if generics.parent.is_none() && def_id.is_local() {\n                     let opaque_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n                     if may_define_opaque_type(tcx, fn_def_id, opaque_hir_id) {\n                         trace!(\"check_opaque_types: may define, generics={:#?}\", generics);\n                         let mut seen: FxHashMap<_, Vec<_>> = FxHashMap::default();\n-                        for (subst, param) in substs.iter().zip(&generics.params) {\n-                            match subst.unpack() {\n+                        for (i, &arg) in substs.iter().enumerate() {\n+                            match arg.unpack() {\n                                 ty::subst::GenericArgKind::Type(ty) => match ty.kind {\n                                     ty::Param(..) => {}\n                                     // Prevent `fn foo() -> Foo<u32>` from being defining.\n@@ -882,9 +884,9 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                                  in defining scope\",\n                                             )\n                                             .span_note(\n-                                                tcx.def_span(param.def_id),\n+                                                tcx.def_span(generics.param_at(i, tcx).def_id),\n                                                 &format!(\n-                                                    \"used non-generic type {} for \\\n+                                                    \"used non-generic type `{}` for \\\n                                                      generic parameter\",\n                                                     ty,\n                                                 ),\n@@ -894,7 +896,6 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                 },\n \n                                 ty::subst::GenericArgKind::Lifetime(region) => {\n-                                    let param_span = tcx.def_span(param.def_id);\n                                     if let ty::ReStatic = region {\n                                         tcx.sess\n                                             .struct_span_err(\n@@ -903,14 +904,14 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                                  in defining scope\",\n                                             )\n                                             .span_label(\n-                                                param_span,\n+                                                tcx.def_span(generics.param_at(i, tcx).def_id),\n                                                 \"cannot use static lifetime; use a bound lifetime \\\n                                                  instead or remove the lifetime parameter from the \\\n                                                  opaque type\",\n                                             )\n                                             .emit();\n                                     } else {\n-                                        seen.entry(region).or_default().push(param_span);\n+                                        seen.entry(region).or_default().push(i);\n                                     }\n                                 }\n \n@@ -924,20 +925,24 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                                  in defining scope\",\n                                             )\n                                             .span_note(\n-                                                tcx.def_span(param.def_id),\n+                                                tcx.def_span(generics.param_at(i, tcx).def_id),\n                                                 &format!(\n-                                                    \"used non-generic const {} for \\\n+                                                    \"used non-generic const `{}` for \\\n                                                      generic parameter\",\n-                                                    ty,\n+                                                    ct,\n                                                 ),\n                                             )\n                                             .emit();\n                                     }\n                                 },\n-                            } // match subst\n-                        } // for (subst, param)\n-                        for (_, spans) in seen {\n-                            if spans.len() > 1 {\n+                            } // match arg\n+                        } // for (arg, param)\n+                        for (_, indices) in seen {\n+                            if indices.len() > 1 {\n+                                let spans: Vec<_> = indices\n+                                    .into_iter()\n+                                    .map(|i| tcx.def_span(generics.param_at(i, tcx).def_id))\n+                                    .collect();\n                                 tcx.sess\n                                     .struct_span_err(\n                                         span,"}, {"sha": "43fd8ae0fff571b2d4ce6b66bd3fb6b741aeeaa6", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -424,7 +424,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             }\n                         } else {\n                             let param = opaque_generics.param_at(i, self.tcx);\n-                            self.tcx.sess.span_err(\n+                            self.tcx.sess.delay_span_bug(\n                                 span,\n                                 &format!(\n                                     \"defining opaque type use does not fully define opaque type: \\"}, {"sha": "0a4cc9b7fe8be4bf40046a9142bcf805d6537722", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -14,6 +14,6 @@ trait Trait<U> {}\n \n impl<W> Trait<W> for () {}\n \n-fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR does not fully define\n+fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n     ()\n }"}, {"sha": "b871f79aa1dc57e9c1decc7f252ad6d31d8cbab4", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -9,14 +9,6 @@ help: consider further restricting this bound\n LL | fn foo_desugared<T: TraitWithAssoc + TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n    |                                    ^^^^^^^^^^^^^^^^\n \n-error: defining opaque type use does not fully define opaque type: generic parameter `V` is specified as concrete type `<T as TraitWithAssoc>::Assoc`\n-  --> $DIR/bound_reduction2.rs:17:1\n-   |\n-LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-LL | |     ()\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "6e922a6911f53ceed5d651b6ad3316ec729227c5", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -7,6 +7,6 @@ type Cmp<T> = impl 'static;\n \n \n // not a defining use, because it doesn't define *all* possible generics\n-fn cmp() -> Cmp<u32> { //~ ERROR defining opaque type use does not fully define\n+fn cmp() -> Cmp<u32> { //~ ERROR non-defining opaque type use in defining scope\n     5u32\n }"}, {"sha": "2e3de7d8c6e2a7147de55f693fa4d3a94dfe90da", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -4,13 +4,17 @@ error: at least one trait must be specified\n LL | type Cmp<T> = impl 'static;\n    |               ^^^^^^^^^^^^\n \n-error: defining opaque type use does not fully define opaque type: generic parameter `T` is specified as concrete type `u32`\n-  --> $DIR/generic_nondefining_use.rs:10:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:10:13\n    |\n-LL | / fn cmp() -> Cmp<u32> {\n-LL | |     5u32\n-LL | | }\n-   | |_^\n+LL | fn cmp() -> Cmp<u32> {\n+   |             ^^^^^^^^\n+   |\n+note: used non-generic type `u32` for generic parameter\n+  --> $DIR/generic_nondefining_use.rs:5:10\n+   |\n+LL | type Cmp<T> = impl 'static;\n+   |          ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4eb7f7836d8691cdac91a83858297fc0440dfe94", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -17,7 +17,8 @@ where\n {\n     type BitsIter = IterBitsIter<T, E, u8>;\n     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-    //~^ ERROR defining opaque type use does not fully define opaque type\n+    //~^ ERROR non-defining opaque type use in defining scope\n+    //~| ERROR non-defining opaque type use in defining scope\n         (0u8..n)\n             .rev()\n             .map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())"}, {"sha": "55984609437b09652f285c88aba21f48e96e8403", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -1,13 +1,26 @@\n-error: defining opaque type use does not fully define opaque type: generic parameter `I` is specified as concrete type `u8`\n-  --> $DIR/issue-60564.rs:19:5\n-   |\n-LL | /     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-LL | |\n-LL | |         (0u8..n)\n-LL | |             .rev()\n-LL | |             .map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n-LL | |     }\n-   | |_____^\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-60564.rs:19:34\n+   |\n+LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n+   |                                  ^^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `_` for generic parameter\n+  --> $DIR/issue-60564.rs:8:22\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                      ^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-60564.rs:19:34\n+   |\n+LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n+   |                                  ^^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `u8` for generic parameter\n+  --> $DIR/issue-60564.rs:8:25\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                         ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "3b6decbe9c65e5cf5e5d75123246fc66ebd33a01", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -6,7 +6,7 @@\n trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n fn f<'a>() -> Alias<'a, ()> {}\n-//~^ ERROR defining opaque type use does not fully define opaque type: generic parameter `U`\n+//~^ ERROR non-defining opaque type use in defining scope\n \n fn main() {}\n "}, {"sha": "c2fa54f50f881214050a05d210964a8c152bd080", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -1,8 +1,14 @@\n-error: defining opaque type use does not fully define opaque type: generic parameter `U` is specified as concrete type `()`\n-  --> $DIR/issue-68368-non-defining-use.rs:8:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-68368-non-defining-use.rs:8:15\n    |\n LL | fn f<'a>() -> Alias<'a, ()> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `()` for generic parameter\n+  --> $DIR/issue-68368-non-defining-use.rs:7:16\n+   |\n+LL | type Alias<'a, U> = impl Trait<U>;\n+   |                ^\n \n error: aborting due to previous error\n "}, {"sha": "02485b24e7b8a5fc3d0c04658a2dc880b71fd28e", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -7,7 +7,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn two<T: Debug>(t: T) -> Two<T, u32> {\n-    //~^ ERROR defining opaque type use does not fully define opaque type\n     (t, 4i8)\n }\n "}, {"sha": "cce861b76c95e8b717b276b790c8b47c0d5dda8f", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9a5d928a035a13fea5d134eaa7c1657407692d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=8e9a5d928a035a13fea5d134eaa7c1657407692d", "patch": "@@ -1,14 +1,5 @@\n-error: defining opaque type use does not fully define opaque type: generic parameter `U` is specified as concrete type `u32`\n-  --> $DIR/not_a_defining_use.rs:9:1\n-   |\n-LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n-LL | |\n-LL | |     (t, 4i8)\n-LL | | }\n-   | |_^\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/not_a_defining_use.rs:30:1\n+  --> $DIR/not_a_defining_use.rs:29:1\n    |\n LL | / fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n LL | |     (t, <U as Bar>::FOO)\n@@ -19,10 +10,9 @@ note: previous use here\n   --> $DIR/not_a_defining_use.rs:9:1\n    |\n LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n-LL | |\n LL | |     (t, 4i8)\n LL | | }\n    | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}