{"sha": "e65c741637cd7971fa41e05989bc922ed20dbf63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NWM3NDE2MzdjZDc5NzFmYTQxZTA1OTg5YmM5MjJlZDIwZGJmNjM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2017-12-18T18:38:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2017-12-18T18:38:35Z"}, "message": "Add `delay_span_bug` and increase idiomaticity", "tree": {"sha": "5862e0339246ec40773bfde44f6d2c4644a7f4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5862e0339246ec40773bfde44f6d2c4644a7f4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65c741637cd7971fa41e05989bc922ed20dbf63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65c741637cd7971fa41e05989bc922ed20dbf63", "html_url": "https://github.com/rust-lang/rust/commit/e65c741637cd7971fa41e05989bc922ed20dbf63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65c741637cd7971fa41e05989bc922ed20dbf63/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55b0f148902dd3ca07cbb4ca4262c00b8b414dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b0f148902dd3ca07cbb4ca4262c00b8b414dda", "html_url": "https://github.com/rust-lang/rust/commit/55b0f148902dd3ca07cbb4ca4262c00b8b414dda"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "40f5a004e6e49cc82baa9ce0d51bcb91d4657f29", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e65c741637cd7971fa41e05989bc922ed20dbf63/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65c741637cd7971fa41e05989bc922ed20dbf63/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=e65c741637cd7971fa41e05989bc922ed20dbf63", "patch": "@@ -558,9 +558,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n             ty::TyError => { }\n             _ => {\n-                let type_dependent_defs = self.mc.tables.type_dependent_defs();\n-                if type_dependent_defs.contains_key(call.hir_id) {\n-                    let def_id = type_dependent_defs[call.hir_id].def_id();\n+                if let Some(def) = self.mc.tables.type_dependent_defs().get(call.hir_id) {\n+                    let def_id = def.def_id();\n                     let call_scope = region::Scope::Node(call.hir_id.local_id);\n                     match OverloadedCallType::from_method_id(self.tcx(), def_id) {\n                         FnMutOverloadedCall => {\n@@ -579,6 +578,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                         }\n                         FnOnceOverloadedCall => self.consume_expr(callee),\n                     }\n+                } else {\n+                    self.tcx().sess.delay_span_bug(call.span, \"no type-dependent def for overloaded call\");\n                 }\n             }\n         }"}]}