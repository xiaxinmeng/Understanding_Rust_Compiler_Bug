{"sha": "3368f5c820f5fc1700eb22ea2ed45fa057eab83a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNjhmNWM4MjBmNWZjMTcwMGViMjJlYTJlZDQ1ZmEwNTdlYWI4M2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-03T00:22:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-03T00:22:13Z"}, "message": "Rollup merge of #76243 - ama0:patch-1, r=jonas-schievink\n\nFix typos in vec try_reserve(_exact) docs\n\n`try_reserve` and `try_reserve_exact` docs refer to calling `reserve` and `reserve_exact`.\n`try_reserve_exact` example uses `try_reserve` method instead of `try_reserve_exact`.", "tree": {"sha": "b766f1fb6f5dc2dec980598726945924cb4f128f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b766f1fb6f5dc2dec980598726945924cb4f128f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3368f5c820f5fc1700eb22ea2ed45fa057eab83a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfUDc1CRBK7hj4Ov3rIwAAdHIIAKpStYlvphodhYVou8+uizW7\nKrgifIaHcz7jyRQLxAFM4wV3rDaJtZXbYLV4R4KEUQIjgO5Thm/LXZEQICbOFKVy\nGgFb/jirx4od5/4u52l1csmK+DUOVPogUIL/FwmeFsQU8/IRCr52ffM0JJ3SoXtt\n5Kg9S4PjXHFlihfLPbXucjbwHYn3/Tnjmp7OBXzxBxS0sonKqN3oSZRMGY3zgxg6\nziJLIe1VzuEpSLDfvk2iBoYuRGkvU1LgdwnuR2HShq8PAWfyJ151xWB9iN+RT74Z\nRASdo7XZmkf3QFa0yZVQm1TtCJbJOeSaYDEU45R3Yunjqp2Cj/wOJn+hPlBVC8I=\n=WhEk\n-----END PGP SIGNATURE-----\n", "payload": "tree b766f1fb6f5dc2dec980598726945924cb4f128f\nparent 6d2b885112f991149476df7a30359abb91374113\nparent dbe50f5c24547c64f377bf727b55982dbceda80c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599092533 +0200\ncommitter GitHub <noreply@github.com> 1599092533 +0200\n\nRollup merge of #76243 - ama0:patch-1, r=jonas-schievink\n\nFix typos in vec try_reserve(_exact) docs\n\n`try_reserve` and `try_reserve_exact` docs refer to calling `reserve` and `reserve_exact`.\n`try_reserve_exact` example uses `try_reserve` method instead of `try_reserve_exact`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3368f5c820f5fc1700eb22ea2ed45fa057eab83a", "html_url": "https://github.com/rust-lang/rust/commit/3368f5c820f5fc1700eb22ea2ed45fa057eab83a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3368f5c820f5fc1700eb22ea2ed45fa057eab83a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d2b885112f991149476df7a30359abb91374113", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2b885112f991149476df7a30359abb91374113", "html_url": "https://github.com/rust-lang/rust/commit/6d2b885112f991149476df7a30359abb91374113"}, {"sha": "dbe50f5c24547c64f377bf727b55982dbceda80c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe50f5c24547c64f377bf727b55982dbceda80c", "html_url": "https://github.com/rust-lang/rust/commit/dbe50f5c24547c64f377bf727b55982dbceda80c"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "52b9f73ba8825da7f4efd760f7deb2d3cf2eaee9", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3368f5c820f5fc1700eb22ea2ed45fa057eab83a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3368f5c820f5fc1700eb22ea2ed45fa057eab83a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=3368f5c820f5fc1700eb22ea2ed45fa057eab83a", "patch": "@@ -685,7 +685,7 @@ impl<T> VecDeque<T> {\n     }\n \n     /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,\n+    /// be inserted in the given `VecDeque<T>`. After calling `try_reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n@@ -727,7 +727,7 @@ impl<T> VecDeque<T> {\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n     /// in the given `VecDeque<T>`. The collection may reserve more space to avoid\n-    /// frequent reallocations. After calling `reserve`, capacity will be\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n     ///"}, {"sha": "27eefb058421689cffcaaf6c1781e4d1f8e6c160", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3368f5c820f5fc1700eb22ea2ed45fa057eab83a/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3368f5c820f5fc1700eb22ea2ed45fa057eab83a/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=3368f5c820f5fc1700eb22ea2ed45fa057eab83a", "patch": "@@ -523,7 +523,7 @@ impl<T> Vec<T> {\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n     /// in the given `Vec<T>`. The collection may reserve more space to avoid\n-    /// frequent reallocations. After calling `reserve`, capacity will be\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n     ///\n@@ -559,7 +559,7 @@ impl<T> Vec<T> {\n     }\n \n     /// Tries to reserves the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n+    /// be inserted in the given `Vec<T>`. After calling `try_reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n@@ -582,7 +582,7 @@ impl<T> Vec<T> {\n     ///     let mut output = Vec::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n-    ///     output.try_reserve(data.len())?;\n+    ///     output.try_reserve_exact(data.len())?;\n     ///\n     ///     // Now we know this can't OOM in the middle of our complex work\n     ///     output.extend(data.iter().map(|&val| {"}]}