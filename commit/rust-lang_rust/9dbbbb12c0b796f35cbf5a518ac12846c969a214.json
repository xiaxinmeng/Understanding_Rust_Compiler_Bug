{"sha": "9dbbbb12c0b796f35cbf5a518ac12846c969a214", "node_id": "C_kwDOAAsO6NoAKDlkYmJiYjEyYzBiNzk2ZjM1Y2JmNWE1MThhYzEyODQ2Yzk2OWEyMTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T02:52:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T02:52:32Z"}, "message": "Auto merge of #83846 - torhovland:issue-10971, r=davidtwco\n\nAdded the --temps-dir option\n\nFixes #10971.\n\nThe new `--temps-dir` option puts intermediate files in a user-specified directory. This provides a fix for the issue where parallel invocations of rustc would overwrite each other's intermediate files.\n\nNo files are kept in the intermediate directory unless `-C save-temps=yes`.\n\nIf additional files are specifically requested using `--emit asm,llvm-bc,llvm-ir,obj,metadata,link,dep-info,mir`, these will be put in the output directory rather than the intermediate directory.\n\nThis is a backward-compatible change, i.e. if `--temps-dir` is not specified, the behavior is the same as before.", "tree": {"sha": "7c95c3e7250903ac35f7beb00ab83aca33ad38e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c95c3e7250903ac35f7beb00ab83aca33ad38e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbbbb12c0b796f35cbf5a518ac12846c969a214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbbbb12c0b796f35cbf5a518ac12846c969a214", "html_url": "https://github.com/rust-lang/rust/commit/9dbbbb12c0b796f35cbf5a518ac12846c969a214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbbbb12c0b796f35cbf5a518ac12846c969a214/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e0293137f895a417fa043b9817c455150769406", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0293137f895a417fa043b9817c455150769406", "html_url": "https://github.com/rust-lang/rust/commit/8e0293137f895a417fa043b9817c455150769406"}, {"sha": "1793a7acc74f5581febf5822923f8f38c63e8f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1793a7acc74f5581febf5822923f8f38c63e8f2a", "html_url": "https://github.com/rust-lang/rust/commit/1793a7acc74f5581febf5822923f8f38c63e8f2a"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "09fe3a552a0a624df7a317ffef7209f6a0b91ca2", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -267,6 +267,7 @@ fn run_compiler(\n                         None,\n                         compiler.output_dir(),\n                         compiler.output_file(),\n+                        compiler.temps_dir(),\n                     );\n \n                     if should_stop == Compilation::Stop {\n@@ -295,6 +296,7 @@ fn run_compiler(\n             Some(compiler.input()),\n             compiler.output_dir(),\n             compiler.output_file(),\n+            compiler.temps_dir(),\n         )\n         .and_then(|| {\n             RustcDefaultCalls::list_metadata(\n@@ -647,6 +649,7 @@ impl RustcDefaultCalls {\n         input: Option<&Input>,\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n+        temps_dir: &Option<PathBuf>,\n     ) -> Compilation {\n         use rustc_session::config::PrintRequest::*;\n         // PrintRequest::NativeStaticLibs is special - printed during linking\n@@ -685,7 +688,7 @@ impl RustcDefaultCalls {\n                     });\n                     let attrs = attrs.as_ref().unwrap();\n                     let t_outputs = rustc_interface::util::build_output_filenames(\n-                        input, odir, ofile, attrs, sess,\n+                        input, odir, ofile, temps_dir, attrs, sess,\n                     );\n                     let id = rustc_session::output::find_crate_name(sess, attrs, input);\n                     if *req == PrintRequest::CrateName {"}, {"sha": "2904b3f5b7071bd5f54ed664a200d1bb0b1ac353", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -36,6 +36,7 @@ pub struct Compiler {\n     pub(crate) input_path: Option<PathBuf>,\n     pub(crate) output_dir: Option<PathBuf>,\n     pub(crate) output_file: Option<PathBuf>,\n+    pub(crate) temps_dir: Option<PathBuf>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n@@ -57,6 +58,9 @@ impl Compiler {\n     pub fn output_file(&self) -> &Option<PathBuf> {\n         &self.output_file\n     }\n+    pub fn temps_dir(&self) -> &Option<PathBuf> {\n+        &self.temps_dir\n+    }\n     pub fn register_lints(&self) -> &Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>> {\n         &self.register_lints\n     }\n@@ -65,7 +69,14 @@ impl Compiler {\n         sess: &Session,\n         attrs: &[ast::Attribute],\n     ) -> OutputFilenames {\n-        util::build_output_filenames(&self.input, &self.output_dir, &self.output_file, attrs, sess)\n+        util::build_output_filenames(\n+            &self.input,\n+            &self.output_dir,\n+            &self.output_file,\n+            &self.temps_dir,\n+            attrs,\n+            sess,\n+        )\n     }\n }\n \n@@ -186,13 +197,16 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         );\n     }\n \n+    let temps_dir = sess.opts.debugging_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n+\n     let compiler = Compiler {\n         sess,\n         codegen_backend,\n         input: config.input,\n         input_path: config.input_path,\n         output_dir: config.output_dir,\n         output_file: config.output_file,\n+        temps_dir,\n         register_lints: config.register_lints,\n         override_queries: config.override_queries,\n     };"}, {"sha": "b073ee9682fbdfeef72fb6c9ad20f0fca95a9184", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -692,6 +692,7 @@ pub fn prepare_outputs(\n         &compiler.input,\n         &compiler.output_dir,\n         &compiler.output_file,\n+        &compiler.temps_dir,\n         &krate.attrs,\n         sess,\n     );\n@@ -722,6 +723,13 @@ pub fn prepare_outputs(\n         }\n     }\n \n+    if let Some(ref dir) = compiler.temps_dir {\n+        if fs::create_dir_all(dir).is_err() {\n+            sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n+            return Err(ErrorReported);\n+        }\n+    }\n+\n     write_out_deps(sess, boxed_resolver, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)"}, {"sha": "eed2e07e890e72799ad76ad692c4148106dea7ca", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -685,6 +685,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(span_debug, true);\n     untracked!(span_free_formats, true);\n     untracked!(strip, Strip::Debuginfo);\n+    untracked!(temps_dir, Some(String::from(\"abc\")));\n     untracked!(terminal_width, Some(80));\n     untracked!(threads, 99);\n     untracked!(time, true);"}, {"sha": "04e183a9ba57ea944dce65b104efd12871237af1", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -604,6 +604,7 @@ pub fn build_output_filenames(\n     input: &Input,\n     odir: &Option<PathBuf>,\n     ofile: &Option<PathBuf>,\n+    temps_dir: &Option<PathBuf>,\n     attrs: &[ast::Attribute],\n     sess: &Session,\n ) -> OutputFilenames {\n@@ -626,6 +627,7 @@ pub fn build_output_filenames(\n                 dirpath,\n                 stem,\n                 None,\n+                temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )\n@@ -654,6 +656,7 @@ pub fn build_output_filenames(\n                 out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n                 out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n                 ofile,\n+                temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )"}, {"sha": "3afe094733928e0337843927531357c5892417f6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -578,6 +578,7 @@ pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n     filestem: String,\n     pub single_output_file: Option<PathBuf>,\n+    pub temps_directory: Option<PathBuf>,\n     pub outputs: OutputTypes,\n }\n \n@@ -592,12 +593,14 @@ impl OutputFilenames {\n         out_directory: PathBuf,\n         out_filestem: String,\n         single_output_file: Option<PathBuf>,\n+        temps_directory: Option<PathBuf>,\n         extra: String,\n         outputs: OutputTypes,\n     ) -> Self {\n         OutputFilenames {\n             out_directory,\n             single_output_file,\n+            temps_directory,\n             outputs,\n             filestem: format!(\"{}{}\", out_filestem, extra),\n         }\n@@ -608,7 +611,14 @@ impl OutputFilenames {\n             .get(&flavor)\n             .and_then(|p| p.to_owned())\n             .or_else(|| self.single_output_file.clone())\n-            .unwrap_or_else(|| self.temp_path(flavor, None))\n+            .unwrap_or_else(|| self.output_path(flavor))\n+    }\n+\n+    /// Gets the output path where a compilation artifact of the given type\n+    /// should be placed on disk.\n+    pub fn output_path(&self, flavor: OutputType) -> PathBuf {\n+        let extension = flavor.extension();\n+        self.with_directory_and_extension(&self.out_directory, &extension)\n     }\n \n     /// Gets the path where a compilation artifact of the given type for the\n@@ -643,11 +653,17 @@ impl OutputFilenames {\n             extension.push_str(ext);\n         }\n \n-        self.with_extension(&extension)\n+        let temps_directory = self.temps_directory.as_ref().unwrap_or(&self.out_directory);\n+\n+        self.with_directory_and_extension(&temps_directory, &extension)\n     }\n \n     pub fn with_extension(&self, extension: &str) -> PathBuf {\n-        let mut path = self.out_directory.join(&self.filestem);\n+        self.with_directory_and_extension(&self.out_directory, extension)\n+    }\n+\n+    fn with_directory_and_extension(&self, directory: &PathBuf, extension: &str) -> PathBuf {\n+        let mut path = directory.join(&self.filestem);\n         path.set_extension(extension);\n         path\n     }"}, {"sha": "d1d8606a75a45db4af76e2dbc01f3f5fe26ba76a", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -1331,6 +1331,8 @@ options! {\n         \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n+    temps_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"the directory the intermediate files are written to\"),\n     terminal_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current terminal width\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],"}, {"sha": "e25011f71197b4fd6a67811de9092ad6be521b9c", "filename": "src/doc/unstable-book/src/compiler-flags/temps-dir.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftemps-dir.md", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftemps-dir.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftemps-dir.md?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -0,0 +1,10 @@\n+# `temps-dir`\n+\n+--------------------\n+\n+The `-Ztemps-dir` compiler flag specifies the directory to write the\n+intermediate files in. If not set, the output directory is used. This option is\n+useful if you are running more than one instance of `rustc` (e.g. with different\n+`--crate-type` settings), and you need to make sure they are not overwriting\n+each other's intermediate files. No files are kept unless `-C save-temps=yes` is\n+also set."}, {"sha": "5ce27192603e2ee91805a88ea0fd346ad7c83cd3", "filename": "src/test/run-make/issue-10971-temps-dir/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbbb12c0b796f35cbf5a518ac12846c969a214/src%2Ftest%2Frun-make%2Fissue-10971-temps-dir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbbb12c0b796f35cbf5a518ac12846c969a214/src%2Ftest%2Frun-make%2Fissue-10971-temps-dir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-10971-temps-dir%2FMakefile?ref=9dbbbb12c0b796f35cbf5a518ac12846c969a214", "patch": "@@ -0,0 +1,10 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# Regression test for issue #10971\n+# Running two invocations in parallel would overwrite each other's temp files.\n+\n+all:\n+\ttouch $(TMPDIR)/lib.rs\n+\n+\t$(RUSTC) --crate-type=lib -Z temps-dir=$(TMPDIR)/temp1 $(TMPDIR)/lib.rs & \\\n+\t$(RUSTC) --crate-type=staticlib -Z temps-dir=$(TMPDIR)/temp2 $(TMPDIR)/lib.rs"}]}