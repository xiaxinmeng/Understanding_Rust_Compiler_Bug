{"sha": "3d81f785441799edfbd005304a7ff56089a258c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODFmNzg1NDQxNzk5ZWRmYmQwMDUzMDRhN2ZmNTYwODlhMjU4YzY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-30T05:23:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:42Z"}, "message": "Add a comment", "tree": {"sha": "e2adbcfcc373cb877370b7e8c05a0134eb2c2535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2adbcfcc373cb877370b7e8c05a0134eb2c2535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d81f785441799edfbd005304a7ff56089a258c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d81f785441799edfbd005304a7ff56089a258c6", "html_url": "https://github.com/rust-lang/rust/commit/3d81f785441799edfbd005304a7ff56089a258c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d81f785441799edfbd005304a7ff56089a258c6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba43c228b55d9620d3d480246ee2d9295484a336", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba43c228b55d9620d3d480246ee2d9295484a336", "html_url": "https://github.com/rust-lang/rust/commit/ba43c228b55d9620d3d480246ee2d9295484a336"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "c2fbcf3159630b362bacb88bad9f7492cd71f91c", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3d81f785441799edfbd005304a7ff56089a258c6/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d81f785441799edfbd005304a7ff56089a258c6/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=3d81f785441799edfbd005304a7ff56089a258c6", "patch": "@@ -8,7 +8,52 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Lowers the AST to the HIR\n+// Lowers the AST to the HIR.\n+//\n+// Since the AST and HIR are fairly similar, this is mostly a simple procedure,\n+// much like a fold. Where lowering involves a bit more work things get more\n+// interesting and there are some invariants you should know about. These mostly\n+// concern spans and ids.\n+//\n+// Spans are assigned to AST nodes during parsing and then are modified during\n+// expansion to indicate the origin of a node and the process it went through\n+// being expanded. Ids are assigned to AST nodes just before lowering.\n+//\n+// For the simpler lowering steps, ids and spans should be preserved. Unlike\n+// expansion we do not preserve the process of lowering in the spans, so spans\n+// should not be modified here. When creating a new node (as opposed to\n+// 'folding' an existing one), then you create a new id using `next_id()`.\n+//\n+// You must ensure that ids are unique. That means that you should only use the\n+// is from an AST node in a single HIR node (you can assume that AST node ids\n+// are unique). Every new node must have a unique id. Avoid cloning HIR nodes.\n+// If you do, you must then set one of the node's id to a fresh one.\n+//\n+// Lowering must be reproducable (the compiler only lowers once, but tools and\n+// custom lints may lower an AST node to a HIR node to interact with the\n+// compiler). The only interesting bit of this is ids - if you lower an AST node\n+// and create new HIR nodes with fresh ids, when re-lowering the same node, you\n+// must ensure you get the same ids! To do this, we keep track of the next id\n+// when we translate a node which requires new ids. By checking this cache and\n+// using node ids starting with the cached id, we ensure ids are reproducible.\n+// To use this system, you just need to hold on to a CachedIdSetter object\n+// whilst lowering. This is an RAII object that takes care of setting and\n+// restoring the cached id, etc.\n+//\n+// This whole system relies on node ids being incremented one at a time and\n+// all increments being for lowering. This means that you should not call any\n+// non-lowering function which will use new node ids.\n+//\n+// Spans are used for error messages and for tools to map semantics back to\n+// source code. It is therefore not as important with spans as ids to be strict\n+// about use (you can't break the compiler by screwing up a span). Obviously, a\n+// HIR node can only have a single span. But multiple nodes can have the same\n+// span and spans don't need to be kept in order, etc. Where code is preserved\n+// by lowering, it should have the same span as in the AST. Where HIR nodes are\n+// new it is probably best to give a span for the whole AST node being lowered.\n+// All nodes should have real spans, don't use dummy spans. Tools are likely to\n+// get confused if the spans from leaf AST nodes occur in multiple places\n+// in the HIR, especially for multiple identifiers.\n \n use hir;\n \n@@ -25,8 +70,12 @@ use std::cell::{Cell, RefCell};\n \n pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,\n+    // Map AST ids to ids used for expanded nodes.\n     id_cache: RefCell<HashMap<NodeId, NodeId>>,\n+    // Use if there are no cached ids for the current node.\n     id_assigner: &'a NodeIdAssigner,\n+    // 0 == no cached id. Must be incremented to align with previous id\n+    // incrementing.\n     cached_id: Cell<u32>,\n }\n "}]}