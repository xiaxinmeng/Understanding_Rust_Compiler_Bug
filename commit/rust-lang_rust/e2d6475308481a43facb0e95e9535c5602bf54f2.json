{"sha": "e2d6475308481a43facb0e95e9535c5602bf54f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDY0NzUzMDg0ODFhNDNmYWNiMGU5NWU5NTM1YzU2MDJiZjU0ZjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T18:10:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T18:11:21Z"}, "message": "rustc: Store cached crate metadata in the session", "tree": {"sha": "7953ea0a80b10457168af8a4e2411863bf6cc122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7953ea0a80b10457168af8a4e2411863bf6cc122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d6475308481a43facb0e95e9535c5602bf54f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d6475308481a43facb0e95e9535c5602bf54f2", "html_url": "https://github.com/rust-lang/rust/commit/e2d6475308481a43facb0e95e9535c5602bf54f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d6475308481a43facb0e95e9535c5602bf54f2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca7acb1f3455f76a7991ce675a46aaa228aa497", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca7acb1f3455f76a7991ce675a46aaa228aa497", "html_url": "https://github.com/rust-lang/rust/commit/9ca7acb1f3455f76a7991ce675a46aaa228aa497"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "f6ad590f17fca65db3cf2bf8e5d4d26fa9cdeb05", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=e2d6475308481a43facb0e95e9535c5602bf54f2", "patch": "@@ -77,6 +77,10 @@ obj session(cfg targ, map.hashmap[int, crate_metadata] crates) {\n     fn set_external_crate(int num, &crate_metadata metadata) {\n         crates.insert(num, metadata);\n     }\n+\n+    fn has_external_crate(int num) -> bool {\n+        ret crates.contains_key(num);\n+    }\n }\n \n "}, {"sha": "70b3320d780cd13f82cef9c4975d3e7504aed44f", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=e2d6475308481a43facb0e95e9535c5602bf54f2", "patch": "@@ -21,7 +21,6 @@ type ty_param = rec(ident ident, def_id id);\n // Annotations added during successive passes.\n tag ann {\n     ann_none;\n-    ann_crate(@external_crate_info);\n     ann_type(@middle.ty.t, option.t[vec[@middle.ty.t]] /* ty param substs */);\n }\n \n@@ -359,7 +358,7 @@ type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n type view_item = spanned[view_item_];\n tag view_item_ {\n-    view_item_use(ident, vec[@meta_item], def_id, ann);\n+    view_item_use(ident, vec[@meta_item], def_id, option.t[int]);\n     view_item_import(ident, vec[ident], def_id, option.t[def]);\n     view_item_export(ident);\n }\n@@ -382,8 +381,6 @@ tag native_item_ {\n                    fn_decl, vec[ty_param], def_id, ann);\n }\n \n-type external_crate_info = rec(vec[u8] data);\n-\n fn index_view_item(mod_index index, @view_item it) {\n     alt (it.node) {\n         case(ast.view_item_use(?id, _, _, _)) {"}, {"sha": "4a5f28ff8865e38feee0b7c92f48ced8169465c3", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=e2d6475308481a43facb0e95e9535c5602bf54f2", "patch": "@@ -17,14 +17,16 @@ import std._str;\n import std._vec;\n import std.fs;\n import std.option;\n+import std.option.some;\n import std.os;\n import std.map.hashmap;\n \n // TODO: map to a real type here.\n type env = @rec(\n     session.session sess,\n-    @hashmap[str, @ast.external_crate_info] crate_cache,\n-    vec[str] library_search_paths\n+    @hashmap[str, int] crate_cache,\n+    vec[str] library_search_paths,\n+    mutable int next_crate_num\n );\n \n // Type decoding\n@@ -215,7 +217,7 @@ impure fn parse_ty_fn(@pstate st, str_def sd) -> tup(vec[ty.arg], @ty.t) {\n \n fn load_crate(session.session sess,\n               ast.ident ident,\n-              vec[str] library_search_paths) -> @ast.external_crate_info {\n+              vec[str] library_search_paths) {\n     auto filename = parser.default_native_name(sess, ident);\n     for (str library_search_path in library_search_paths) {\n         auto path = fs.connect(library_search_path, filename);\n@@ -232,8 +234,9 @@ fn load_crate(session.session sess,\n                     auto cbuf = llvmext.LLVMGetSectionContents(si.llsi);\n                     auto csz = llvmext.LLVMGetSectionSize(si.llsi);\n                     auto cvbuf = cbuf as _vec.vbuf;\n-                    ret @rec(data=_vec.vec_from_vbuf[u8](cvbuf, csz));\n+                    ret;\n                 }\n+                llvmext.LLVMMoveToNextSection(si.llsi);\n             }\n         }\n     }\n@@ -244,18 +247,19 @@ fn load_crate(session.session sess,\n }\n \n fn fold_view_item_use(&env e, &span sp, ast.ident ident,\n-        vec[@ast.meta_item] meta_items, ast.def_id id, ast.ann orig_ann)\n+        vec[@ast.meta_item] meta_items, ast.def_id id, option.t[int] cnum_opt)\n         -> @ast.view_item {\n-    auto external_crate;\n+    auto cnum;\n     if (!e.crate_cache.contains_key(ident)) {\n-        external_crate = load_crate(e.sess, ident, e.library_search_paths);\n-        e.crate_cache.insert(ident, external_crate);\n+        load_crate(e.sess, ident, e.library_search_paths);\n+        cnum = e.next_crate_num;\n+        e.crate_cache.insert(ident, e.next_crate_num);\n+        e.next_crate_num += 1;\n     } else {\n-        external_crate = e.crate_cache.get(ident);\n+        cnum = e.crate_cache.get(ident);\n     }\n \n-    auto ann = ast.ann_crate(external_crate);\n-    auto viu = ast.view_item_use(ident, meta_items, id, ann);\n+    auto viu = ast.view_item_use(ident, meta_items, id, some[int](cnum));\n     ret @fold.respan[ast.view_item_](sp, viu);\n }\n \n@@ -265,18 +269,18 @@ fn read_crates(session.session sess,\n                vec[str] library_search_paths) -> @ast.crate {\n     auto e = @rec(\n         sess=sess,\n-        crate_cache=@common.new_str_hash[@ast.external_crate_info](),\n-        library_search_paths=library_search_paths\n+        crate_cache=@common.new_str_hash[int](),\n+        library_search_paths=library_search_paths,\n+        mutable next_crate_num=1\n     );\n \n     auto f = fold_view_item_use;\n     auto fld = @rec(fold_view_item_use=f with *fold.new_identity_fold[env]());\n     ret fold.fold_crate[env](e, fld, crate);\n }\n \n-fn lookup_def(&span sp,\n-              @ast.external_crate_info cinfo,\n-              vec[ast.ident] path) -> ast.def {\n+fn lookup_def(session.session sess, &span sp, int cnum, vec[ast.ident] path)\n+    -> ast.def {\n   // FIXME: fill in.\n   fail;\n }"}, {"sha": "6a37128b93c9b4ef5dbc7a17ddc6aa873ae9b86f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=e2d6475308481a43facb0e95e9535c5602bf54f2", "patch": "@@ -2204,7 +2204,7 @@ impure fn parse_use(parser p) -> @ast.view_item {\n     auto metadata = parse_optional_meta(p);\n     expect(p, token.SEMI);\n     auto use_decl = ast.view_item_use(ident, metadata, p.next_def_id(),\n-                                      ast.ann_none);\n+                                      none[int]);\n     ret @spanned(lo, hi, use_decl);\n }\n "}, {"sha": "da898f4d01e911704ae9095e4894ba8714ba1140", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=e2d6475308481a43facb0e95e9535c5602bf54f2", "patch": "@@ -265,7 +265,7 @@ type ast_fold[ENV] =\n      // View Item folds.\n      (fn(&ENV e, &span sp, ident ident,\n          vec[@meta_item] meta_items,\n-         def_id id, ann a) -> @view_item)         fold_view_item_use,\n+         def_id id, option.t[int]) -> @view_item) fold_view_item_use,\n \n      (fn(&ENV e, &span sp, ident i, vec[ident] idents,\n          def_id id, option.t[def]) -> @view_item) fold_view_item_import,\n@@ -883,9 +883,9 @@ fn fold_view_item[ENV](&ENV env, ast_fold[ENV] fld, @view_item vi)\n     }\n \n     alt (vi.node) {\n-        case (ast.view_item_use(?ident, ?meta_items, ?def_id, ?ann)) {\n+        case (ast.view_item_use(?ident, ?meta_items, ?def_id, ?cnum)) {\n             ret fld.fold_view_item_use(env_, vi.span, ident, meta_items,\n-                                       def_id, ann);\n+                                       def_id, cnum);\n         }\n         case (ast.view_item_import(?def_ident, ?idents, ?def_id,\n                                    ?target_def)) {\n@@ -1400,8 +1400,9 @@ fn identity_fold_item_obj[ENV](&ENV e, &span sp, ident i,\n \n fn identity_fold_view_item_use[ENV](&ENV e, &span sp, ident i,\n                                     vec[@meta_item] meta_items,\n-                                    def_id id, ann a) -> @view_item {\n-    ret @respan(sp, ast.view_item_use(i, meta_items, id, a));\n+                                    def_id id, option.t[int] cnum)\n+    -> @view_item {\n+    ret @respan(sp, ast.view_item_use(i, meta_items, id, cnum));\n }\n \n fn identity_fold_view_item_import[ENV](&ENV e, &span sp, ident i,"}, {"sha": "2c378c8f3af83417b69d11db3daefc0f09298997", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6475308481a43facb0e95e9535c5602bf54f2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=e2d6475308481a43facb0e95e9535c5602bf54f2", "patch": "@@ -137,11 +137,10 @@ fn find_final_def(&env e, import_map index,\n         }\n \n         fn found_crate(&env e, &import_map index, &span sp,\n-                       vec[ident] idents,\n-                       @ast.external_crate_info cinfo) -> def_wrap {\n+                       vec[ident] idents, int cnum) -> def_wrap {\n             auto len = _vec.len[ident](idents);\n             auto rest_idents = _vec.slice[ident](idents, 1u, len);\n-            auto def = creader.lookup_def(sp, cinfo, rest_idents);\n+            auto def = creader.lookup_def(e.sess, sp, cnum, rest_idents);\n             ret def_wrap_other(def);\n         }\n \n@@ -171,12 +170,9 @@ fn find_final_def(&env e, import_map index,\n             }\n             case (def_wrap_use(?vi)) {\n                 alt (vi.node) {\n-                    case (ast.view_item_use(_, _, _, ?ann)) {\n-                        alt (ann) {\n-                            case (ast.ann_crate(?cinfo)) {\n-                                ret found_crate(e, index, sp, idents, cinfo);\n-                            }\n-                        }\n+                    case (ast.view_item_use(_, _, _, ?cnum_opt)) {\n+                        auto cnum = option.get[int](cnum_opt);\n+                        ret found_crate(e, index, sp, idents, cnum);\n                     }\n                 }\n             }"}]}