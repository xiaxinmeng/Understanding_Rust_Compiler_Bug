{"sha": "d7ff4f51957d634a487e3a79b1cc6e1446d89527", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZmY0ZjUxOTU3ZDYzNGE0ODdlM2E3OWIxY2M2ZTE0NDZkODk1Mjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-14T17:55:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-14T17:55:55Z"}, "message": "rollup merge of #24391: nrc/visit-vis", "tree": {"sha": "eb4fed2abb6c379061066682c13ca7ee59ae81b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4fed2abb6c379061066682c13ca7ee59ae81b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ff4f51957d634a487e3a79b1cc6e1446d89527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ff4f51957d634a487e3a79b1cc6e1446d89527", "html_url": "https://github.com/rust-lang/rust/commit/d7ff4f51957d634a487e3a79b1cc6e1446d89527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ff4f51957d634a487e3a79b1cc6e1446d89527/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10be64e344e67e22354c840800c3c29b4a89dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10be64e344e67e22354c840800c3c29b4a89dd0", "html_url": "https://github.com/rust-lang/rust/commit/d10be64e344e67e22354c840800c3c29b4a89dd0"}, {"sha": "01678acf5066e2c4d29f3617ac5892acedf3ddbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/01678acf5066e2c4d29f3617ac5892acedf3ddbe", "html_url": "https://github.com/rust-lang/rust/commit/01678acf5066e2c4d29f3617ac5892acedf3ddbe"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "b3188f260b906d69b5aa7bdf11672e94005645a8", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n                 span: codemap::Span, id: ast::NodeId) {\n         // Have to warn method here because methods are not ast::Item\n         match fk {\n-            visit::FkMethod(name, _) => {\n+            visit::FkMethod(name, _, _) => {\n                 if !self.symbol_is_live(id, None) {\n                     self.warn_dead_code(id, span, name.name, \"method\");\n                 }"}, {"sha": "b6a070c9332fda45b3e894ec19eab99a20252319", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -87,9 +87,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 block: &'v ast::Block, span: Span, _: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            visit::FkItemFn(_, _, fn_style, _) =>\n+            visit::FkItemFn(_, _, fn_style, _, _) =>\n                 (true, fn_style == ast::Unsafety::Unsafe),\n-            visit::FkMethod(_, sig) =>\n+            visit::FkMethod(_, sig, _) =>\n                 (true, sig.unsafety == ast::Unsafety::Unsafe),\n             _ => (false, false),\n         };"}, {"sha": "53ed3b919488737a7a4f8c683639d68717e6d488", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -142,12 +142,12 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, s: Span, _: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(_, generics, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _) => {\n                 self.visit_early_late(subst::FnSpace, generics, |this| {\n                     visit::walk_fn(this, fk, fd, b, s)\n                 })\n             }\n-            visit::FkMethod(_, sig) => {\n+            visit::FkMethod(_, sig, _) => {\n                 self.visit_early_late(subst::FnSpace, &sig.generics, |this| {\n                     visit::walk_fn(this, fk, fd, b, s)\n                 })"}, {"sha": "72c679e8833a2b25bf7426c59e97ff41f6f4fd2b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -957,7 +957,7 @@ impl LintPass for NonSnakeCase {\n                 fk: visit::FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkMethod(ident, _) => match method_context(cx, id, span) {\n+            visit::FkMethod(ident, _, _) => match method_context(cx, id, span) {\n                 MethodContext::PlainImpl => {\n                     self.check_snake_case(cx, \"method\", ident, span)\n                 },\n@@ -966,7 +966,7 @@ impl LintPass for NonSnakeCase {\n                 },\n                 _ => (),\n             },\n-            visit::FkItemFn(ident, _, _, _) => {\n+            visit::FkItemFn(ident, _, _, _, _) => {\n                 self.check_snake_case(cx, \"function\", ident, span)\n             },\n             _ => (),\n@@ -1290,10 +1290,10 @@ impl LintPass for UnsafeCode {\n     fn check_fn(&mut self, cx: &Context, fk: visit::FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, _: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(_, _, ast::Unsafety::Unsafe, _) =>\n+            visit::FkItemFn(_, _, ast::Unsafety::Unsafe, _, _) =>\n                 cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n-            visit::FkMethod(_, sig) => {\n+            visit::FkMethod(_, sig, _) => {\n                 if sig.unsafety == ast::Unsafety::Unsafe {\n                     cx.span_lint(UNSAFE_CODE, span, \"implementation of an `unsafe` method\")\n                 }\n@@ -1818,8 +1818,8 @@ impl LintPass for UnconditionalRecursion {\n                               ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;\n \n         let (name, checker) = match fn_kind {\n-            visit::FkItemFn(name, _, _, _) => (name, id_refers_to_this_fn as F),\n-            visit::FkMethod(name, _) => (name, id_refers_to_this_method as F),\n+            visit::FkItemFn(name, _, _, _, _) => (name, id_refers_to_this_fn as F),\n+            visit::FkMethod(name, _, _) => (name, id_refers_to_this_method as F),\n             // closures can't recur, so they don't matter.\n             visit::FkFnBlock => return\n         };"}, {"sha": "6fd59a205323c38ccffb6b14d3d64ce7826e3ccc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -242,11 +242,11 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            visit::FkItemFn(_, generics, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }\n-            visit::FkMethod(_, sig) => {\n+            visit::FkMethod(_, sig, _) => {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind"}, {"sha": "1505d1e91b8206a9e44b8b4b5b938b16f35b6d06", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -121,6 +121,7 @@ struct ItemFnParts<'a> {\n     decl:     &'a ast::FnDecl,\n     unsafety: ast::Unsafety,\n     abi:      abi::Abi,\n+    vis:      ast::Visibility,\n     generics: &'a ast::Generics,\n     body:     &'a Block,\n     id:       ast::NodeId,\n@@ -155,65 +156,71 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn body(self) -> &'a Block {\n         self.handle(|i: ItemFnParts<'a>|  &*i.body,\n-                    |_, _, _: &'a ast::MethodSig, body: &'a ast::Block, _|  body,\n+                    |_, _, _: &'a ast::MethodSig, _, body: &'a ast::Block, _|  body,\n                     |c: ClosureParts<'a>| c.body)\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n         self.handle(|i: ItemFnParts<'a>|  &*i.decl,\n-                    |_, _, sig: &'a ast::MethodSig, _, _|  &sig.decl,\n+                    |_, _, sig: &'a ast::MethodSig, _, _, _|  &sig.decl,\n                     |c: ClosureParts<'a>| c.decl)\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(|i: ItemFnParts|     i.span,\n-                    |_, _, _: &'a ast::MethodSig, _, span| span,\n+                    |_, _, _: &'a ast::MethodSig, _, _, span| span,\n                     |c: ClosureParts|    c.span)\n     }\n \n     pub fn id(self) -> NodeId {\n         self.handle(|i: ItemFnParts|     i.id,\n-                    |id, _, _: &'a ast::MethodSig, _, _| id,\n+                    |id, _, _: &'a ast::MethodSig, _, _, _| id,\n                     |c: ClosureParts|    c.id)\n     }\n \n     pub fn kind(self) -> visit::FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n-            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi)\n+            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n             visit::FkFnBlock\n         };\n-        let method = |_, ident, sig: &'a ast::MethodSig, _, _| {\n-            visit::FkMethod(ident, sig)\n+        let method = |_, ident, sig: &'a ast::MethodSig, vis, _, _| {\n+            visit::FkMethod(ident, sig, vis)\n         };\n         self.handle(item, method, closure)\n     }\n \n     fn handle<A, I, M, C>(self, item_fn: I, method: M, closure: C) -> A where\n         I: FnOnce(ItemFnParts<'a>) -> A,\n-        M: FnOnce(NodeId, ast::Ident, &'a ast::MethodSig, &'a ast::Block, Span) -> A,\n+        M: FnOnce(NodeId,\n+                  ast::Ident,\n+                  &'a ast::MethodSig,\n+                  Option<ast::Visibility>,\n+                  &'a ast::Block,\n+                  Span)\n+                  -> A,\n         C: FnOnce(ClosureParts<'a>) -> A,\n     {\n         match self.node {\n             ast_map::NodeItem(i) => match i.node {\n                 ast::ItemFn(ref decl, unsafety, abi, ref generics, ref block) =>\n                     item_fn(ItemFnParts{\n                         ident: i.ident, decl: &**decl, unsafety: unsafety, body: &**block,\n-                        generics: generics, abi: abi, id: i.id, span: i.span\n+                        generics: generics, abi: abi, vis: i.vis, id: i.id, span: i.span\n                     }),\n                 _ => panic!(\"item FnLikeNode that is not fn-like\"),\n             },\n             ast_map::NodeTraitItem(ti) => match ti.node {\n                 ast::MethodTraitItem(ref sig, Some(ref body)) => {\n-                    method(ti.id, ti.ident, sig, body, ti.span)\n+                    method(ti.id, ti.ident, sig, None, body, ti.span)\n                 }\n                 _ => panic!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n             ast_map::NodeImplItem(ii) => {\n                 match ii.node {\n                     ast::MethodImplItem(ref sig, ref body) => {\n-                        method(ii.id, ii.ident, sig, body, ii.span)\n+                        method(ii.id, ii.ident, sig, Some(ii.vis), body, ii.span)\n                     }\n                     ast::TypeImplItem(_) |\n                     ast::MacImplItem(_) => {"}, {"sha": "0ad75c5ec8cbcddba43adf03c83500b18e06f297", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -440,10 +440,10 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n         self.operation.visit_id(node_id);\n \n         match function_kind {\n-            visit::FkItemFn(_, generics, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n-            visit::FkMethod(_, sig) => {\n+            visit::FkMethod(_, sig, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n             visit::FkFnBlock => {}"}, {"sha": "a6f8a718b3381f01b14f0a76122f84f0822b6fa0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -644,13 +644,13 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 span: Span,\n                 _node_id: NodeId) {\n         match fn_kind {\n-            visit::FkItemFn(_, _, _, abi) if abi == Abi::RustIntrinsic => {\n+            visit::FkItemFn(_, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n                 self.gate_feature(\"intrinsics\",\n                                   span,\n                                   \"intrinsics are subject to change\")\n             }\n-            visit::FkItemFn(_, _, _, abi) |\n-            visit::FkMethod(_, &ast::MethodSig { abi, .. }) if abi == Abi::RustCall => {\n+            visit::FkItemFn(_, _, _, abi, _) |\n+            visit::FkMethod(_, &ast::MethodSig { abi, .. }, _) if abi == Abi::RustCall => {\n                 self.gate_feature(\"unboxed_closures\",\n                                   span,\n                                   \"rust-call ABI is subject to change\")"}, {"sha": "4c70fc9f81fb93ce267563a3253b1fe0614e51cc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ff4f51957d634a487e3a79b1cc6e1446d89527/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d7ff4f51957d634a487e3a79b1cc6e1446d89527", "patch": "@@ -35,10 +35,10 @@ use owned_slice::OwnedSlice;\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    FkItemFn(Ident, &'a Generics, Unsafety, Abi),\n+    FkItemFn(Ident, &'a Generics, Unsafety, Abi, Visibility),\n \n     /// fn foo(&self)\n-    FkMethod(Ident, &'a MethodSig),\n+    FkMethod(Ident, &'a MethodSig, Option<Visibility>),\n \n     /// |x, y| ...\n     /// proc(x, y) ...\n@@ -247,7 +247,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_expr(&**expr);\n         }\n         ItemFn(ref declaration, fn_style, abi, ref generics, ref body) => {\n-            visitor.visit_fn(FkItemFn(item.ident, generics, fn_style, abi),\n+            visitor.visit_fn(FkItemFn(item.ident, generics, fn_style, abi, item.vis),\n                              &**declaration,\n                              &**body,\n                              item.span,\n@@ -600,10 +600,10 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n     walk_fn_decl(visitor, function_declaration);\n \n     match function_kind {\n-        FkItemFn(_, generics, _, _) => {\n+        FkItemFn(_, generics, _, _, _) => {\n             visitor.visit_generics(generics);\n         }\n-        FkMethod(_, sig) => {\n+        FkMethod(_, sig, _) => {\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n@@ -625,7 +625,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         MethodTraitItem(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FkMethod(trait_item.ident, sig), &sig.decl,\n+            visitor.visit_fn(FkMethod(trait_item.ident, sig, None), &sig.decl,\n                              body, trait_item.span, trait_item.id);\n         }\n         TypeTraitItem(ref bounds, ref default) => {\n@@ -642,7 +642,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     }\n     match impl_item.node {\n         MethodImplItem(ref sig, ref body) => {\n-            visitor.visit_fn(FkMethod(impl_item.ident, sig), &sig.decl,\n+            visitor.visit_fn(FkMethod(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n                              body, impl_item.span, impl_item.id);\n         }\n         TypeImplItem(ref ty) => {"}]}