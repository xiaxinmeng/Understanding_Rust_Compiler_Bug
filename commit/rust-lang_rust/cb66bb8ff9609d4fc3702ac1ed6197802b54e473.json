{"sha": "cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjZiYjhmZjk2MDlkNGZjMzcwMmFjMWVkNjE5NzgwMmI1NGU0NzM=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2020-12-08T18:47:20Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2020-12-08T18:47:20Z"}, "message": "Remove this semicolon", "tree": {"sha": "bebe4b12adb6916a5a5eefdc50be523028368987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebe4b12adb6916a5a5eefdc50be523028368987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAl/PyjkACgkQ2MS9WuTZ\nzE1rSgf/WnJGWbwp/apznjVTm5+uInzbKCjmXExyzaowEUeafTHXyjXBwuLyLYYk\nWkPlVB7dtRFFYbwjczmBnZF4RiL+79avCdJhbJKYwjZ3U8+xDXLg80QixCRcDeSw\n3MMzxJbH/+PCWSAVcRbPbAcNWdW+xyHRnaimgo3LezZhyo8t4dcS/I3r9/4hiVO4\nUEAPWfrsLfRCeMejOjjFcezl+fiFrdbwlVmFFhc/7HO5R/xOKzobq9kNfSgN1gKP\nlNzNrfVgNNQZ43EX3FxYTHo06bwbpDTaNkQC/GFYIbMxavBtT70Qb0obhD6c6t5x\nWGINDAqLfQp160oYj+nm59mzyWI4eA==\n=G+lF\n-----END PGP SIGNATURE-----", "payload": "tree bebe4b12adb6916a5a5eefdc50be523028368987\nparent e2e6b709e60f22279b755ceae74e579520c9ae3b\nauthor ivan770 <leshenko.ivan770@gmail.com> 1607453240 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1607453240 +0200\n\nRemove this semicolon\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "html_url": "https://github.com/rust-lang/rust/commit/cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e6b709e60f22279b755ceae74e579520c9ae3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e6b709e60f22279b755ceae74e579520c9ae3b", "html_url": "https://github.com/rust-lang/rust/commit/e2e6b709e60f22279b755ceae74e579520c9ae3b"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "0f2ed4bb1c877ee280cdfe5dfb1d9d1fd91e8bf6", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "patch": "@@ -5,5 +5,5 @@ pub use hir_expand::diagnostics::{\n };\n pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,\n-    NoSuchField,\n+    NoSuchField, RemoveThisSemicolon\n };"}, {"sha": "e59487e544b869e6d3992da8075e7da453d23bbc", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "patch": "@@ -216,6 +216,30 @@ impl Diagnostic for MissingOkInTailExpr {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct RemoveThisSemicolon {\n+    pub file: HirFileId,\n+    pub expr: AstPtr<ast::Expr>,\n+}\n+\n+impl Diagnostic for RemoveThisSemicolon {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"remove-this-semicolon\")\n+    }\n+\n+    fn message(&self) -> String {\n+        \"Remove this semicolon\".to_string()\n+    }\n+\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n+    }\n+\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n // Diagnostic: break-outside-of-loop\n //\n // This diagnostic is triggered if `break` keyword is used outside of a loop."}, {"sha": "313422968c71fbcfa904ee33633cabe68a8b9e90", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{path::path, resolver::HasResolver, AdtId, DefWithBodyId};\n+use hir_def::{AdtId, DefWithBodyId, expr::Statement, path::path, resolver::HasResolver};\n use hir_expand::diagnostics::DiagnosticSink;\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstPtr};\n@@ -23,6 +23,8 @@ pub(crate) use hir_def::{\n     LocalFieldId, VariantId,\n };\n \n+use super::RemoveThisSemicolon;\n+\n pub(super) struct ExprValidator<'a, 'b: 'a> {\n     owner: DefWithBodyId,\n     infer: Arc<InferenceResult>,\n@@ -78,6 +80,12 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let body_expr = &body[body.body_expr];\n         if let Expr::Block { tail: Some(t), .. } = body_expr {\n             self.validate_results_in_tail_expr(body.body_expr, *t, db);\n+        } else {\n+            if let Expr::Block { statements, .. } = body_expr {\n+                if let Some(Statement::Expr(id)) = statements.last() {\n+                    self.validate_missing_tail_expr(body.body_expr, *id, db);\n+                }\n+            }\n         }\n     }\n \n@@ -317,6 +325,23 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             }\n         }\n     }\n+\n+    fn validate_missing_tail_expr(&mut self, body_id: ExprId, possible_tail_id: ExprId, db: &dyn HirDatabase) {\n+        let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n+            Some(m) => m,\n+            None => return,\n+        };\n+\n+        if let Some(possible_tail_ty) = self.infer.type_of_expr.get(possible_tail_id) {\n+            if mismatch.actual == Ty::unit() && mismatch.expected == *possible_tail_ty {\n+                let (_, source_map) = db.body_with_source_map(self.owner.into());\n+\n+                if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n+                    self.sink.push(RemoveThisSemicolon { file: source_ptr.file_id, expr: source_ptr.value });\n+                }\n+            }\n+        }\n+    }\n }\n \n pub fn record_literal_missing_fields("}, {"sha": "9157704dca454b823259e0dbf44ff550be3b466e", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "patch": "@@ -131,6 +131,9 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n+        .on::<hir::diagnostics::RemoveThisSemicolon, _>(|d| {\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+        })\n         .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n             res.borrow_mut().push(warning_with_fix(d, &sema));\n         })"}, {"sha": "cb4d49ad90dfe3be26625fb067f7e3adc47f06bf", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66bb8ff9609d4fc3702ac1ed6197802b54e473/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=cb66bb8ff9609d4fc3702ac1ed6197802b54e473", "patch": "@@ -4,7 +4,7 @@ use hir::{\n     db::AstDatabase,\n     diagnostics::{\n         Diagnostic, IncorrectCase, MissingFields, MissingOkInTailExpr, NoSuchField,\n-        UnresolvedModule,\n+        RemoveThisSemicolon, UnresolvedModule,\n     },\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n@@ -13,11 +13,7 @@ use ide_db::{\n     source_change::{FileSystemEdit, SourceFileEdit},\n     RootDatabase,\n };\n-use syntax::{\n-    algo,\n-    ast::{self, edit::IndentLevel, make},\n-    AstNode,\n-};\n+use syntax::{AstNode, Direction, T, algo, ast::{self, ExprStmt, edit::IndentLevel, make}};\n use text_edit::TextEdit;\n \n use crate::{diagnostics::Fix, references::rename::rename_with_semantics, FilePosition};\n@@ -102,6 +98,24 @@ impl DiagnosticWithFix for MissingOkInTailExpr {\n     }\n }\n \n+impl DiagnosticWithFix for RemoveThisSemicolon {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let root = sema.db.parse_or_expand(self.file)?;\n+\n+        let semicolon = self.expr.to_node(&root)\n+            .syntax()\n+            .siblings_with_tokens(Direction::Next)\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == T![;])?\n+            .text_range();\n+\n+        let edit = TextEdit::delete(semicolon);\n+        let source_change = SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+\n+        Some(Fix::new(\"Remove this semicolon\", source_change, semicolon))\n+    }\n+}\n+\n impl DiagnosticWithFix for IncorrectCase {\n     fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;"}]}