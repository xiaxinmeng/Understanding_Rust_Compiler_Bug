{"sha": "b609d022c4df307e4d68499b063c81a9ecb1e9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MDlkMDIyYzRkZjMwN2U0ZDY4NDk5YjA2M2M4MWE5ZWNiMWU5Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-08T08:05:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-08T08:05:59Z"}, "message": "auto merge of #9035 : alexcrichton/rust/fewer-clownshoes, r=huonw\n\nThis removes another large chunk of this odd 'clownshoes' identifier showing up\r\nin symbol names. These all originated from external crates because the encoded\r\nitems were encoded independently of the paths calculated in ast_map. The\r\nencoding of these paths now uses the helper function in ast_map to calculate the\r\n\"pretty name\" for an impl block.\r\n\r\nUnfortunately there is still no information about generics in the symbol name,\r\nbut it's certainly vastly better than before\r\n\r\n    hash::__extensions__::write::_version::v0.8\r\n\r\nbecomes\r\n\r\n    hash::Writer$SipState::write::hversion::v0.8\r\n\r\nThis also fixes bugs in which lots of methods would show up as `meth_XXX`, they\r\nnow only show up as `meth` and throw some extra characters onto the version\r\nstring.", "tree": {"sha": "d241f3b7721b5eb5e32e690b2f3f26aed1723f14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d241f3b7721b5eb5e32e690b2f3f26aed1723f14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b609d022c4df307e4d68499b063c81a9ecb1e9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b609d022c4df307e4d68499b063c81a9ecb1e9cf", "html_url": "https://github.com/rust-lang/rust/commit/b609d022c4df307e4d68499b063c81a9ecb1e9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b609d022c4df307e4d68499b063c81a9ecb1e9cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5591dce52eb35730e89070c7e104e1f1bf0a8ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5591dce52eb35730e89070c7e104e1f1bf0a8ab3", "html_url": "https://github.com/rust-lang/rust/commit/5591dce52eb35730e89070c7e104e1f1bf0a8ab3"}, {"sha": "13d33064a6c8b8f9c167250ec9a84fc8daaf56d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d33064a6c8b8f9c167250ec9a84fc8daaf56d5", "html_url": "https://github.com/rust-lang/rust/commit/13d33064a6c8b8f9c167250ec9a84fc8daaf56d5"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "18a7e65a6dd7af2f5d2bf1e950a098b6c61963c7", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -39,7 +39,6 @@ use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n use syntax::attr;\n use syntax::attr::{AttrMetaMethods};\n use syntax::print::pprust;\n-use syntax::parse::token;\n \n #[deriving(Clone, Eq)]\n pub enum output_type {\n@@ -678,8 +677,8 @@ pub fn symbol_hash(tcx: ty::ctxt,\n     write_string(symbol_hasher, \"-\");\n     write_string(symbol_hasher, encoder::encoded_ty(tcx, t));\n     let mut hash = truncated_hash_result(symbol_hasher);\n-    // Prefix with _ so that it never blends into adjacent digits\n-    hash.unshift_char('_');\n+    // Prefix with 'h' so that it never blends into adjacent digits\n+    hash.unshift_char('h');\n     // tjc: allocation is unfortunate; need to change std::hash\n     hash.to_managed()\n }\n@@ -722,7 +721,7 @@ pub fn sanitize(s: &str) -> ~str {\n             'a' .. 'z'\n             | 'A' .. 'Z'\n             | '0' .. '9'\n-            | '_' | '.' => result.push_char(c),\n+            | '_' | '.' | '$' => result.push_char(c),\n \n             _ => {\n                 let mut tstr = ~\"\";\n@@ -847,28 +846,25 @@ pub fn mangle_internal_name_by_type_and_seq(ccx: &mut CrateContext,\n                                             name: &str) -> ~str {\n     let s = ppaux::ty_to_str(ccx.tcx, t);\n     let hash = get_symbol_hash(ccx, t);\n+    let (_, name) = gensym_name(name);\n     return mangle(ccx.sess,\n-                  ~[path_name(ccx.sess.ident_of(s)),\n-                    path_name(gensym_name(name))],\n+                  ~[path_name(ccx.sess.ident_of(s)), name],\n                   Some(hash.as_slice()),\n                   None);\n }\n \n pub fn mangle_internal_name_by_path_and_seq(ccx: &mut CrateContext,\n                                             mut path: path,\n                                             flav: &str) -> ~str {\n-    path.push(path_name(gensym_name(flav)));\n+    let (_, name) = gensym_name(flav);\n+    path.push(name);\n     mangle(ccx.sess, path, None, None)\n }\n \n pub fn mangle_internal_name_by_path(ccx: &mut CrateContext, path: path) -> ~str {\n     mangle(ccx.sess, path, None, None)\n }\n \n-pub fn mangle_internal_name_by_seq(_ccx: &mut CrateContext, flav: &str) -> ~str {\n-    return fmt!(\"%s_%u\", flav, token::gensym(flav));\n-}\n-\n \n pub fn output_dll_filename(os: session::Os, lm: LinkMeta) -> ~str {\n     let (dll_prefix, dll_suffix) = match os {"}, {"sha": "d1eb959055b331cca3a9b1abde3b11d2c4e41de6", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -1063,12 +1063,13 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             let impl_vtables = ty::lookup_impl_vtables(tcx, def_id);\n             encode_impl_vtables(ebml_w, ecx, &impl_vtables);\n         }\n-        encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n+        let elt = ast_map::impl_pretty_name(opt_trait, ty, item.ident);\n+        encode_path(ecx, ebml_w, path, elt);\n         ebml_w.end_tag();\n \n         // >:-<\n         let mut impl_path = vec::append(~[], path);\n-        impl_path.push(ast_map::path_name(item.ident));\n+        impl_path.push(elt);\n \n         // Iterate down the methods, emitting them. We rely on the\n         // assumption that all of the actually implemented methods"}, {"sha": "bbdb9730e955090ff572ddc7c4595f8006a992ff", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -39,15 +39,17 @@ use std::hashmap::{HashMap};\n use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use std::vec;\n use syntax::ast::Ident;\n-use syntax::ast_map::{path, path_elt};\n+use syntax::ast_map::{path, path_elt, path_pretty_name};\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::{ast, ast_map};\n \n pub use middle::trans::context::CrateContext;\n \n-pub fn gensym_name(name: &str) -> Ident {\n-    token::str_to_ident(fmt!(\"%s_%u\", name, token::gensym(name)))\n+pub fn gensym_name(name: &str) -> (Ident, path_elt) {\n+    let name = token::gensym(name);\n+    let ident = Ident::new(name);\n+    (ident, path_pretty_name(ident, name as u64))\n }\n \n pub struct tydesc_info {"}, {"sha": "21bde8e388b80614dd46f9d2c1eca2c362503011", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -69,6 +69,7 @@ use std::ptr;\n use std::vec;\n use syntax::codemap::Span;\n use syntax::{ast, codemap, ast_util, ast_map, opt_vec};\n+use syntax::parse::token;\n use syntax::parse::token::special_idents;\n \n static DW_LANG_RUST: c_uint = 0x9000;\n@@ -513,7 +514,8 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n         ast_map::node_expr(ref expr) => {\n             match expr.node {\n                 ast::ExprFnBlock(ref fn_decl, ref top_level_block) => {\n-                    let name = gensym_name(\"fn\");\n+                    let name = fmt!(\"fn%u\", token::gensym(\"fn\"));\n+                    let name = token::str_to_ident(name);\n                     (name, fn_decl,\n                         // This is not quite right. It should actually inherit the generics of the\n                         // enclosing function."}, {"sha": "06d88f66323feeab7f3919721a66c298d23f89ed", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -37,6 +37,7 @@ use std::vec;\n use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};\n+use syntax::parse::token;\n use syntax::visit;\n \n /**\n@@ -568,8 +569,8 @@ pub fn make_vtable(ccx: &mut CrateContext,\n         }\n \n         let tbl = C_struct(components);\n-        let vtable = ccx.sess.str_of(gensym_name(\"vtable\"));\n-        let vt_gvar = do vtable.with_c_str |buf| {\n+        let sym = token::gensym(\"vtable\");\n+        let vt_gvar = do fmt!(\"vtable%u\", sym).with_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(vt_gvar, tbl);"}, {"sha": "2bdff6c8567fea52cf4e3c14fb7e7026b866fa69", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -31,7 +31,6 @@ use util::ppaux::{Repr,ty_to_str};\n \n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n \n pub fn monomorphic_fn(ccx: @mut CrateContext,\n@@ -194,7 +193,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     }\n     ccx.monomorphizing.insert(fn_id, depth + 1);\n \n-    let elt = path_name(gensym_name(ccx.sess.str_of(name)));\n+    let (_, elt) = gensym_name(ccx.sess.str_of(name));\n     let mut pt = (*pt).clone();\n     pt.push(elt);\n     let s = mangle_exported_name(ccx, pt.clone(), mono_ty);"}, {"sha": "16e80560cc85ca1f288d4690f573df64e1f926e4", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -72,6 +72,28 @@ pub fn path_elt_to_str(pe: path_elt, itr: @ident_interner) -> ~str {\n     }\n }\n \n+pub fn impl_pretty_name(trait_ref: &Option<trait_ref>,\n+                        ty: &Ty, default: Ident) -> path_elt {\n+    let itr = get_ident_interner();\n+    let ty_ident = match ty.node {\n+        ty_path(ref path, _, _) => path.segments.last().identifier,\n+        _ => default\n+    };\n+    let hash = (trait_ref, ty).hash();\n+    match *trait_ref {\n+        None => path_pretty_name(ty_ident, hash),\n+        Some(ref trait_ref) => {\n+            // XXX: this dollar sign is actually a relic of being one of the\n+            //      very few valid symbol names on unix. These kinds of\n+            //      details shouldn't be exposed way up here in the ast.\n+            let s = fmt!(\"%s$%s\",\n+                         itr.get(trait_ref.path.segments.last().identifier.name),\n+                         itr.get(ty_ident.name));\n+            path_pretty_name(Ident::new(itr.gensym(s)), hash)\n+        }\n+    }\n+}\n+\n #[deriving(Clone)]\n pub enum ast_node {\n     node_item(@item, @path),\n@@ -216,28 +238,6 @@ impl Ctx {\n \n         visit::walk_pat(self, pat, ());\n     }\n-\n-    fn impl_pretty_name(&self, trait_ref: &Option<trait_ref>,\n-                        ty: &Ty, default: Ident) -> path_elt {\n-        let itr = get_ident_interner();\n-        let ty_ident = match ty.node {\n-            ty_path(ref path, _, _) => path.segments.last().identifier,\n-            _ => default\n-        };\n-        let hash = (trait_ref, ty).hash();\n-        match *trait_ref {\n-            None => path_pretty_name(ty_ident, hash),\n-            Some(ref trait_ref) => {\n-                // XXX: this dollar sign is actually a relic of being one of the\n-                //      very few valid symbol names on unix. These kinds of\n-                //      details shouldn't be exposed way up here in the ast.\n-                let s = fmt!(\"%s$%s\",\n-                             itr.get(trait_ref.path.segments.last().identifier.name),\n-                             itr.get(ty_ident.name));\n-                path_pretty_name(Ident::new(itr.gensym(s)), hash)\n-            }\n-        }\n-    }\n }\n \n impl Visitor<()> for Ctx {\n@@ -250,7 +250,7 @@ impl Visitor<()> for Ctx {\n                 // Right now the ident on impls is __extensions__ which isn't\n                 // very pretty when debugging, so attempt to select a better\n                 // name to use.\n-                let elt = self.impl_pretty_name(maybe_trait, ty, i.ident);\n+                let elt = impl_pretty_name(maybe_trait, ty, i.ident);\n \n                 let impl_did = ast_util::local_def(i.id);\n                 for m in ms.iter() {"}, {"sha": "8cbad27ff4965faa3c32e7c1fb080fc8296ec602", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b609d022c4df307e4d68499b063c81a9ecb1e9cf/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=b609d022c4df307e4d68499b063c81a9ecb1e9cf", "patch": "@@ -17,4 +17,4 @@ trait me {\n }\n impl me for uint { fn me(&self) -> uint { *self } } //~ NOTE is `me$uint::me`\n fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope\n-//~^ NOTE is `ambig_impl_2_lib::__extensions__::me`\n+//~^ NOTE is `ambig_impl_2_lib::me$uint::me`"}]}