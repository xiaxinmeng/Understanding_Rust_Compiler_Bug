{"sha": "78ce616490c085f479fb08604f7016d8ce54a58b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Y2U2MTY0OTBjMDg1ZjQ3OWZiMDg2MDRmNzAxNmQ4Y2U1NGE1OGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T09:35:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T10:01:20Z"}, "message": "implement float_to_int_unchecked", "tree": {"sha": "bbeab27265a284cdb16f1a2e4115b7fb2e041df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbeab27265a284cdb16f1a2e4115b7fb2e041df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78ce616490c085f479fb08604f7016d8ce54a58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78ce616490c085f479fb08604f7016d8ce54a58b", "html_url": "https://github.com/rust-lang/rust/commit/78ce616490c085f479fb08604f7016d8ce54a58b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78ce616490c085f479fb08604f7016d8ce54a58b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1f5336c2dda92b007e8a4306315f7e81c76424", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1f5336c2dda92b007e8a4306315f7e81c76424", "html_url": "https://github.com/rust-lang/rust/commit/8d1f5336c2dda92b007e8a4306315f7e81c76424"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "8f4bda404d72c367bee44b9c33150fd1dbd30689", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/78ce616490c085f479fb08604f7016d8ce54a58b/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ce616490c085f479fb08604f7016d8ce54a58b/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=78ce616490c085f479fb08604f7016d8ce54a58b", "patch": "@@ -1,9 +1,10 @@\n use std::iter;\n use std::convert::TryFrom;\n \n+use rustc_ast::ast::FloatTy;\n use rustc_middle::{mir, ty};\n-use rustc_apfloat::Float;\n-use rustc_target::abi::{Align, LayoutOf};\n+use rustc_apfloat::{Float, FloatConvert, Round, ieee::{Double, Single}};\n+use rustc_target::abi::{Align, LayoutOf, Size};\n \n use crate::*;\n \n@@ -279,6 +280,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_u64(f.powi(i).to_bits()), dest)?;\n             }\n \n+            \"float_to_int_unchecked\" => {\n+                let val = this.read_immediate(args[0])?;\n+\n+                let res = match val.layout.ty.kind {\n+                    ty::Float(FloatTy::F32) => {\n+                        this.float_to_int_unchecked(val.to_scalar()?.to_f32()?, dest.layout.ty)?\n+                    }\n+                    ty::Float(FloatTy::F64) => {\n+                        this.float_to_int_unchecked(val.to_scalar()?.to_f64()?, dest.layout.ty)?\n+                    }\n+                    _ => bug!(\"`float_to_int_unchecked` called with non-float input type {:?}\", val.layout.ty),\n+                };\n+\n+                this.write_scalar(res, dest)?;\n+            }\n+\n             // Atomic operations\n             #[rustfmt::skip]\n             | \"atomic_load\"\n@@ -491,4 +508,55 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.go_to_block(ret);\n         Ok(())\n     }\n+\n+    fn float_to_int_unchecked<F>(\n+        &self,\n+        f: F,\n+        dest_ty: ty::Ty<'tcx>,\n+    ) -> InterpResult<'tcx, Scalar<Tag>>\n+    where\n+        F: Float + Into<Scalar<Tag>> + FloatConvert<Single> + FloatConvert<Double>,\n+    {\n+        let this = self.eval_context_ref();\n+\n+        // Step 1: cut off the fractional part of `f`. The result of this is\n+        // guaranteed to be precisely representable in IEEE floats.\n+        let f = f.round_to_integral(Round::TowardZero).value;\n+\n+        // Step 2: Cast the truncated float to the target integer type and see if we lose any information in this step.\n+        Ok(match dest_ty.kind {\n+            // Unsigned\n+            ty::Uint(t) => {\n+                let width = t.bit_width().unwrap_or_else(|| this.pointer_size().bits());\n+                let res = f.to_u128(usize::try_from(width).unwrap());\n+                if res.status.is_empty() {\n+                    // No status flags means there was no further rounding or other loss of precision.\n+                    Scalar::from_uint(res.value, Size::from_bits(width))\n+                } else {\n+                    // `f` was not representable in this integer type.\n+                    throw_ub_format!(\n+                        \"`float_to_int_unchecked` intrinsic called on {} which cannot be represented in target type `{:?}`\",\n+                        f, dest_ty,\n+                    );\n+                }\n+            }\n+            // Signed\n+            ty::Int(t) => {\n+                let width = t.bit_width().unwrap_or_else(|| this.pointer_size().bits());\n+                let res = f.to_i128(usize::try_from(width).unwrap());\n+                if res.status.is_empty() {\n+                    // No status flags means there was no further rounding or other loss of precision.\n+                    Scalar::from_int(res.value, Size::from_bits(width))\n+                } else {\n+                    // `f` was not representable in this integer type.\n+                    throw_ub_format!(\n+                        \"`float_to_int_unchecked` intrinsic called on {} which cannot be represented in target type `{:?}`\",\n+                        f, dest_ty,\n+                    );\n+                }\n+            }\n+            // Nothing else\n+            _ => bug!(\"`float_to_int_unchecked` called with non-int output type {:?}\", dest_ty),\n+        })\n+    }\n }"}, {"sha": "3f86a21d18e218d007f557c0e498e83126da05ac", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78ce616490c085f479fb08604f7016d8ce54a58b/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ce616490c085f479fb08604f7016d8ce54a58b/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=78ce616490c085f479fb08604f7016d8ce54a58b", "patch": "@@ -146,9 +146,9 @@ fn casts() {\n     test_cast::<f32, u32>(4294967040.0, 0u32.wrapping_sub(256));\n     test_cast::<f32, u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666), 0);\n     test_cast::<f32, u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff), 0);\n-    test_cast::<f32, u32>((u32::MAX-127) as f32, u32::MAX); // rounding loss\n     test_cast::<f32, u32>((u32::MAX-128) as f32, u32::MAX-255); // rounding loss\n     // unrepresentable casts\n+    assert_eq::<u32>((u32::MAX-127) as f32 as u32, u32::MAX); // rounds up and then becomes unrepresentable\n     assert_eq::<u32>(4294967296.0f32 as u32, u32::MAX);\n     assert_eq::<u32>(-5.0f32 as u32, 0);\n     assert_eq::<u32>(f32::MAX as u32, u32::MAX);\n@@ -211,12 +211,12 @@ fn casts() {\n     test_cast::<f64, u64>(0.0, 0);\n     test_cast::<f64, u64>(-0.0, 0);\n     test_cast::<f64, u64>(5.0, 5);\n-    test_cast::<f64, u64>(-5.0, 0);\n     test_cast::<f64, u64>(1e16, 10000000000000000);\n-    test_cast::<f64, u64>((u64::MAX-1023) as f64, u64::MAX); // rounding loss\n     test_cast::<f64, u64>((u64::MAX-1024) as f64, u64::MAX-2047); // rounding loss\n     test_cast::<f64, u64>(9223372036854775808.0, 9223372036854775808);\n     // unrepresentable casts\n+    assert_eq::<u64>(-5.0f64 as u64, 0);\n+    assert_eq::<u64>((u64::MAX-1023) as f64 as u64, u64::MAX); // rounds up and then becomes unrepresentable\n     assert_eq::<u64>(18446744073709551616.0f64 as u64, u64::MAX);\n     assert_eq::<u64>(f64::MAX as u64, u64::MAX);\n     assert_eq::<u64>(f64::MIN as u64, 0);"}]}