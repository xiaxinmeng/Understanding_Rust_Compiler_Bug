{"sha": "02c1862fb55c6ae4198038b1b317bcdd06e395d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzE4NjJmYjU1YzZhZTQxOTgwMzhiMWIzMTdiY2RkMDZlMzk1ZDE=", "commit": {"author": {"name": "Kyle Huey", "email": "khuey@kylehuey.com", "date": "2017-12-04T04:45:12Z"}, "committer": {"name": "Kyle Huey", "email": "khuey@kylehuey.com", "date": "2017-12-04T04:45:12Z"}, "message": "Add a specialization of read_exact for Cursor.\n\nThe read_exact implementation for &[u8] is optimized and usually allows LLVM to reduce a read_exact call for small numbers of bytes to a bounds check and a register load instead of a generic memcpy.  On a workload I have that decompresses, deserializes (via bincode), and processes some data, this leads to a 40% speedup by essentially eliminating the deserialization overhead entirely.", "tree": {"sha": "3dc542449e75d299a09217a504cae3b3e6f0aef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dc542449e75d299a09217a504cae3b3e6f0aef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c1862fb55c6ae4198038b1b317bcdd06e395d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c1862fb55c6ae4198038b1b317bcdd06e395d1", "html_url": "https://github.com/rust-lang/rust/commit/02c1862fb55c6ae4198038b1b317bcdd06e395d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c1862fb55c6ae4198038b1b317bcdd06e395d1/comments", "author": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "html_url": "https://github.com/rust-lang/rust/commit/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "b5ea5531b65a72db087b4a306d4441ef2765119b", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/02c1862fb55c6ae4198038b1b317bcdd06e395d1/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1862fb55c6ae4198038b1b317bcdd06e395d1/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=02c1862fb55c6ae4198038b1b317bcdd06e395d1", "patch": "@@ -230,6 +230,13 @@ impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n         Ok(n)\n     }\n \n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        let n = buf.len();\n+        Read::read_exact(&mut self.fill_buf()?, buf)?;\n+        self.pos += n as u64;\n+        Ok(())\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -475,6 +482,24 @@ mod tests {\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn test_read_exact() {\n+        let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n+        let reader = &mut &in_buf[..];\n+        let mut buf = [];\n+        assert!(reader.read_exact(&mut buf).is_ok());\n+        let mut buf = [8];\n+        assert!(reader.read_exact(&mut buf).is_ok());\n+        assert_eq!(buf[0], 0);\n+        assert_eq!(reader.len(), 7);\n+        let mut buf = [0, 0, 0, 0, 0, 0, 0];\n+        assert!(reader.read_exact(&mut buf).is_ok());\n+        assert_eq!(buf, [1, 2, 3, 4, 5, 6, 7]);\n+        assert_eq!(reader.len(), 0);\n+        let mut buf = [0];\n+        assert!(reader.read_exact(&mut buf).is_err());\n+    }\n+\n     #[test]\n     fn test_buf_reader() {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];"}]}