{"sha": "3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZTQzZjM3ZDJiYTAzM2ZmN2Y0YmZkZGZmNmVkYzU5ZmY4YWFiYzY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-13T19:19:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-16T22:56:31Z"}, "message": "Fix pre-existing problem with filemap line positions always starting at 0. Fix error line output to only retrieve up to the nearest newline.", "tree": {"sha": "513ea9f06ae36077cd597e223c9e26413ccb0434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513ea9f06ae36077cd597e223c9e26413ccb0434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6", "html_url": "https://github.com/rust-lang/rust/commit/3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ac8f16db58f586b868d8612e38f01bdf2dd97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ac8f16db58f586b868d8612e38f01bdf2dd97e", "html_url": "https://github.com/rust-lang/rust/commit/a5ac8f16db58f586b868d8612e38f01bdf2dd97e"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "4b6aa40327a555a55131b6141b70b9a1264f477a", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=3ce43f37d2ba033ff7f4bfddff6edc59ff8aabc6", "patch": "@@ -26,7 +26,7 @@ fn new_codemap() -> codemap {\n }\n \n fn new_filemap(filename filename, uint start_pos) -> filemap {\n-    ret @rec(name=filename, start_pos=start_pos, mutable lines=~[0u]);\n+    ret @rec(name=filename, start_pos=start_pos, mutable lines=[start_pos]);\n }\n \n fn next_line(filemap file, uint pos) { file.lines += ~[pos]; }\n@@ -170,10 +170,18 @@ fn span_to_lines(span sp, codemap::codemap cm) -> @file_lines {\n fn get_line(filemap fm, int line, &str file) -> str {\n     let uint begin = fm.lines.(line) - fm.start_pos;\n     let uint end;\n-    if ((line as uint) + 1u >= ivec::len(fm.lines)) {\n-        end = str::byte_len(file);\n-    } else {\n+    if (line as uint < ivec::len(fm.lines) - 1u) {\n         end = fm.lines.(line + 1) - fm.start_pos;\n+    } else {\n+        // If we're not done parsing the file, we're at the limit of what's\n+        // parsed. If we just slice the rest of the string, we'll print out\n+        // the remainder of the file, which is undesirable.\n+        end = str::byte_len(file);\n+        auto rest = str::slice(file, begin, end);\n+        auto newline = str::index(rest, '\\n' as u8);\n+        if (newline != -1) {\n+            end = begin + (newline as uint);\n+        }\n     }\n     ret str::slice(file, begin, end);\n }"}]}