{"sha": "d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZjdmZWJlOTMzMDY2NDA0MWQ4ZDc3OTBhYTQ5N2JkN2Y5YjhkNWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:51Z"}, "message": "Rollup merge of #47883 - yurydelendik:wasm-map, r=alexcrichton\n\nExport wasm source map when debug information is enabled\n\nWe use binaryen's linker to produce a wasm file (via s2wasm). The wasm writer has capabilities to export source maps. The pilot support for source maps is added to Firefox.\n\nThe produced source map contains references to the original file, that might require additional source map file processing to include / package original files with it.\n\n/cc @alexcrichton", "tree": {"sha": "6ce398e858635f23b0124c923fc70ca285c80b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce398e858635f23b0124c923fc70ca285c80b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeym7CRBK7hj4Ov3rIwAAdHIIAGfN9iiE+01ncOknmniBVy0L\nFBRnFuzptdeLue78njecdn0vp1cP/QsijpX/cnfTQGeb84JDGzBgX03A3wimFJGQ\n8haTz7s5bWXAyoTgPRWs6/41iLSEkeGj/RpdlPBJWl5zF/OwQFQ6+XzZ3bOY8eKU\nKUg2DNQvqZhvDAmgEKjQZQ5iCqsO0418aKpNNojYg2dNkZTVngsFxT7l0t4zKMLc\nFuyOKMelX+gdFZk3QW/lhwQqi9FnFwrB3XPTjaKdLXzQENOYRZmbNO1IAHADIJYd\nnlK20jTCIXsGuBZxFp0VkyVzxlrw27K0sELjyeBkNEhT98BABNBEI6Z1hjVoSY8=\n=AE7E\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ce398e858635f23b0124c923fc70ca285c80b28\nparent 185f258801984637e508ea54ae211e6a62c02911\nparent cfe53c066646857a19046ebaf0cdc410c3d9f034\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021051 -0800\ncommitter GitHub <noreply@github.com> 1518021051 -0800\n\nRollup merge of #47883 - yurydelendik:wasm-map, r=alexcrichton\n\nExport wasm source map when debug information is enabled\n\nWe use binaryen's linker to produce a wasm file (via s2wasm). The wasm writer has capabilities to export source maps. The pilot support for source maps is added to Firefox.\n\nThe produced source map contains references to the original file, that might require additional source map file processing to include / package original files with it.\n\n/cc @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "html_url": "https://github.com/rust-lang/rust/commit/d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "185f258801984637e508ea54ae211e6a62c02911", "url": "https://api.github.com/repos/rust-lang/rust/commits/185f258801984637e508ea54ae211e6a62c02911", "html_url": "https://github.com/rust-lang/rust/commit/185f258801984637e508ea54ae211e6a62c02911"}, {"sha": "cfe53c066646857a19046ebaf0cdc410c3d9f034", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe53c066646857a19046ebaf0cdc410c3d9f034", "html_url": "https://github.com/rust-lang/rust/commit/cfe53c066646857a19046ebaf0cdc410c3d9f034"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "55f11665f6d0ba83a157680b9ce433bfeab5f02a", "filename": "src/librustc_binaryen/BinaryenWrapper.cpp", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp?ref=d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "patch": "@@ -14,6 +14,7 @@\n \n #include <stdint.h>\n #include <string>\n+#include <sstream>\n #include <stdlib.h>\n \n #include \"s2wasm.h\"\n@@ -24,6 +25,7 @@ using namespace wasm;\n \n struct BinaryenRustModule {\n   BufferWithRandomAccess buffer;\n+  std::string sourceMapJSON;\n };\n \n struct BinaryenRustModuleOptions {\n@@ -36,6 +38,7 @@ struct BinaryenRustModuleOptions {\n   bool ignoreUnknownSymbols;\n   bool debugInfo;\n   std::string startFunction;\n+  std::string sourceMapUrl;\n \n   BinaryenRustModuleOptions() :\n     globalBase(0),\n@@ -46,7 +49,8 @@ struct BinaryenRustModuleOptions {\n     importMemory(false),\n     ignoreUnknownSymbols(false),\n     debugInfo(false),\n-    startFunction(\"\")\n+    startFunction(\"\"),\n+    sourceMapUrl(\"\")\n   {}\n \n };\n@@ -73,6 +77,12 @@ BinaryenRustModuleOptionsSetStart(BinaryenRustModuleOptions *options,\n   options->startFunction = start;\n }\n \n+extern \"C\" void\n+BinaryenRustModuleOptionsSetSourceMapUrl(BinaryenRustModuleOptions *options,\n+                                         char *sourceMapUrl) {\n+  options->sourceMapUrl = sourceMapUrl;\n+}\n+\n extern \"C\" void\n BinaryenRustModuleOptionsSetStackAllocation(BinaryenRustModuleOptions *options,\n                                             uint64_t stack) {\n@@ -106,12 +116,20 @@ BinaryenRustModuleCreate(const BinaryenRustModuleOptions *options,\n   {\n     WasmBinaryWriter writer(&linker.getOutput().wasm, ret->buffer, options->debug);\n     writer.setNamesSection(options->debugInfo);\n-    // FIXME: support source maps?\n-    // writer.setSourceMap(sourceMapStream.get(), sourceMapUrl);\n+\n+    std::unique_ptr<std::ostringstream> sourceMapStream = nullptr;\n+    {\n+      sourceMapStream = make_unique<std::ostringstream>();\n+      writer.setSourceMap(sourceMapStream.get(), options->sourceMapUrl);\n+    }\n \n     // FIXME: support symbol maps?\n     // writer.setSymbolMap(symbolMap);\n     writer.write();\n+\n+    if (sourceMapStream) {\n+      ret->sourceMapJSON = sourceMapStream->str();\n+    }\n   }\n   return ret.release();\n }\n@@ -126,6 +144,16 @@ BinaryenRustModuleLen(const BinaryenRustModule *M) {\n   return M->buffer.size();\n }\n \n+extern \"C\" const char*\n+BinaryenRustModuleSourceMapPtr(const BinaryenRustModule *M) {\n+  return M->sourceMapJSON.data();\n+}\n+\n+extern \"C\" size_t\n+BinaryenRustModuleSourceMapLen(const BinaryenRustModule *M) {\n+  return M->sourceMapJSON.length();\n+}\n+\n extern \"C\" void\n BinaryenRustModuleFree(BinaryenRustModule *M) {\n   delete M;"}, {"sha": "36174e11ba04a988012f7724e537dd41c0bfb339", "filename": "src/librustc_binaryen/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/src%2Flibrustc_binaryen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/src%2Flibrustc_binaryen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2Flib.rs?ref=d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "patch": "@@ -51,6 +51,15 @@ impl Module {\n             slice::from_raw_parts(ptr, len)\n         }\n     }\n+\n+    /// Returns the data of the source map JSON.\n+    pub fn source_map(&self) -> &[u8] {\n+        unsafe {\n+            let ptr = BinaryenRustModuleSourceMapPtr(self.ptr);\n+            let len = BinaryenRustModuleSourceMapLen(self.ptr);\n+            slice::from_raw_parts(ptr, len)\n+        }\n+    }\n }\n \n impl Drop for Module {\n@@ -94,6 +103,15 @@ impl ModuleOptions {\n         self\n     }\n \n+    /// Configures a `sourceMappingURL` custom section value for the module.\n+    pub fn source_map_url(&mut self, url: &str) -> &mut Self {\n+        let url = CString::new(url).unwrap();\n+        unsafe {\n+            BinaryenRustModuleOptionsSetSourceMapUrl(self.ptr, url.as_ptr());\n+        }\n+        self\n+    }\n+\n     /// Configures how much stack is initially allocated for the module. 1MB is\n     /// probably good enough for now.\n     pub fn stack(&mut self, amt: u64) -> &mut Self {\n@@ -130,6 +148,8 @@ extern {\n         -> *mut BinaryenRustModule;\n     fn BinaryenRustModulePtr(module: *const BinaryenRustModule) -> *const u8;\n     fn BinaryenRustModuleLen(module: *const BinaryenRustModule) -> usize;\n+    fn BinaryenRustModuleSourceMapPtr(module: *const BinaryenRustModule) -> *const u8;\n+    fn BinaryenRustModuleSourceMapLen(module: *const BinaryenRustModule) -> usize;\n     fn BinaryenRustModuleFree(module: *mut BinaryenRustModule);\n \n     fn BinaryenRustModuleOptionsCreate()\n@@ -138,6 +158,8 @@ extern {\n                                              debuginfo: bool);\n     fn BinaryenRustModuleOptionsSetStart(module: *mut BinaryenRustModuleOptions,\n                                          start: *const libc::c_char);\n+    fn BinaryenRustModuleOptionsSetSourceMapUrl(module: *mut BinaryenRustModuleOptions,\n+                                                sourceMapUrl: *const libc::c_char);\n     fn BinaryenRustModuleOptionsSetStackAllocation(\n         module: *mut BinaryenRustModuleOptions,\n         stack: u64,"}, {"sha": "ded9a296817b3f85dd8cd80da98de7d132b86787", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7febe9330664041d8d7790aa497bd7f9b8d5c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "patch": "@@ -759,7 +759,10 @@ unsafe fn codegen(cgcx: &CodegenContext,\n \n         if asm2wasm && config.emit_obj {\n             let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-            binaryen_assemble(cgcx, diag_handler, &assembly, &obj_out);\n+            let suffix = \".wasm.map\"; // FIXME use target suffix\n+            let map = cgcx.output_filenames.path(OutputType::Exe)\n+                .with_extension(&suffix[1..]);\n+            binaryen_assemble(cgcx, diag_handler, &assembly, &obj_out, &map);\n             timeline.record(\"binaryen\");\n \n             if !config.emit_asm {\n@@ -814,7 +817,8 @@ unsafe fn codegen(cgcx: &CodegenContext,\n fn binaryen_assemble(cgcx: &CodegenContext,\n                      handler: &Handler,\n                      assembly: &Path,\n-                     object: &Path) {\n+                     object: &Path,\n+                     map: &Path) {\n     use rustc_binaryen::{Module, ModuleOptions};\n \n     let input = fs::read(&assembly).and_then(|contents| {\n@@ -823,6 +827,8 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n     let mut options = ModuleOptions::new();\n     if cgcx.debuginfo != config::NoDebugInfo {\n         options.debuginfo(true);\n+        let map_file_name = map.file_name().unwrap();\n+        options.source_map_url(map_file_name.to_str().unwrap());\n     }\n \n     options.stack(1024 * 1024);\n@@ -832,7 +838,13 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n             .map_err(|e| io::Error::new(io::ErrorKind::Other, e))\n     });\n     let err = assembled.and_then(|binary| {\n-        fs::write(&object, binary.data())\n+        fs::write(&object, binary.data()).and_then(|()| {\n+            if cgcx.debuginfo != config::NoDebugInfo {\n+                fs::write(map, binary.source_map())\n+            } else {\n+                Ok(())\n+            }\n+        })\n     });\n     if let Err(e) = err {\n         handler.err(&format!(\"failed to run binaryen assembler: {}\", e));"}]}