{"sha": "cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMGM5ZGQ0ZmI5ZWFhNmYxYWVhZjAyMDBmNzg0MjQ4ODgwM2JlMjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T00:47:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T00:47:40Z"}, "message": "Start bringing in LLVM bindings.", "tree": {"sha": "d38db3b77eb4126e23eaf1b1625cabf576e13461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38db3b77eb4126e23eaf1b1625cabf576e13461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26", "html_url": "https://github.com/rust-lang/rust/commit/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5860a255488b5a15f13c044ec6ab39116ce53093", "url": "https://api.github.com/repos/rust-lang/rust/commits/5860a255488b5a15f13c044ec6ab39116ce53093", "html_url": "https://github.com/rust-lang/rust/commit/5860a255488b5a15f13c044ec6ab39116ce53093"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "b19284be648e8ab3577d484ed3dcb0901ef96a41", "filename": "src/comp/lib/llvm.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26", "patch": "@@ -0,0 +1,117 @@\n+import std._str.rustrt.sbuf;\n+import std._vec.rustrt.vbuf;\n+\n+type Bool = int;\n+\n+native mod llvm = \"libLLVM-2.7.so\" {\n+\n+  type ModuleRef;\n+  type ContextRef;\n+  type TypeRef;\n+  type TypeHandleRef;\n+  type ValueRef;\n+  type BasicBlockRef;\n+  type BuilderRef;\n+  type ModuleProviderRef;\n+  type MemoryBufferRef;\n+  type PassManagerRef;\n+  type UseRef;\n+\n+  fn ModuleCreateWithName(sbuf ModuleID) -> ModuleRef;\n+  fn DisposeModule(ModuleRef M);\n+\n+  fn GetDataLayout(ModuleRef M) -> sbuf;\n+  fn SetDataLayout(ModuleRef M, sbuf Triple);\n+\n+  fn GetTarget(ModuleRef M) -> sbuf;\n+  fn SetTarget(ModuleRef M, sbuf Triple);\n+\n+  fn AddTypeName(ModuleRef M, sbuf Name, TypeRef Ty) -> Bool;\n+  fn DeleteTypeName(ModuleRef M, sbuf Name);\n+  fn GetTypeByName(ModuleRef M, sbuf Name) -> TypeRef;\n+\n+  fn DumpModule(ModuleRef M);\n+\n+  fn GetTypeContext(TypeRef Ty) -> ContextRef;\n+\n+  fn Int1TypeInContext(ContextRef C) -> TypeRef;\n+  fn Int8TypeInContext(ContextRef C) -> TypeRef;\n+  fn Int16TypeInContext(ContextRef C) -> TypeRef;\n+  fn Int32TypeInContext(ContextRef C) -> TypeRef;\n+  fn Int64TypeInContext(ContextRef C) -> TypeRef;\n+  fn IntTypeInContext(ContextRef C, uint NumBits) -> TypeRef;\n+\n+  fn Int1Type() -> TypeRef;\n+  fn Int8Type() -> TypeRef;\n+  fn Int16Type() -> TypeRef;\n+  fn Int32Type() -> TypeRef;\n+  fn Int64Type() -> TypeRef;\n+  fn IntType(uint NumBits) -> TypeRef;\n+  fn GetIntTypeWidth(TypeRef IntegerTy) -> uint;\n+\n+  fn FloatTypeInContext(ContextRef C) -> TypeRef;\n+  fn DoubleTypeInContext(ContextRef C) -> TypeRef;\n+  fn X86FP80TypeInContext(ContextRef C) -> TypeRef;\n+  fn FP128TypeInContext(ContextRef C) -> TypeRef;\n+  fn PPCFP128TypeInContext(ContextRef C) -> TypeRef;\n+\n+  fn FloatType() -> TypeRef;\n+  fn DoubleType() -> TypeRef;\n+  fn X86FP80Type() -> TypeRef;\n+  fn FP128Type() -> TypeRef;\n+  fn PPCFP128Type() -> TypeRef;\n+\n+  fn FunctionType(TypeRef ReturnType, vbuf ParamTypes,\n+                  uint ParamCount, Bool IsVarArg) -> TypeRef;\n+  fn IsFunctionVarArg(TypeRef FunctionTy) -> Bool;\n+  fn GetReturnType(TypeRef FunctionTy) -> TypeRef;\n+  fn CountParamTypes(TypeRef FunctionTy) -> uint;\n+  fn GetParamTypes(TypeRef FunctionTy, vbuf Dest);\n+\n+  fn StructTypeInContext(ContextRef C, vbuf ElementTypes,\n+                         uint ElementCount, Bool Packed) -> TypeRef;\n+  fn StructType(vbuf ElementTypes, uint ElementCount,\n+                Bool Packed) -> TypeRef;\n+  fn CountStructElementTypes(TypeRef StructTy) -> uint;\n+  fn GetStructElementTypes(TypeRef StructTy, vbuf Dest);\n+  fn IsPackedStruct(TypeRef StructTy) -> Bool;\n+\n+  fn UnionTypeInContext(ContextRef C, vbuf ElementTypes,\n+                        uint ElementCount) -> TypeRef;\n+  fn UnionType(vbuf ElementTypes, uint ElementCount) -> TypeRef;\n+  fn CountUnionElementTypes(TypeRef UnionTy) -> uint;\n+  fn GetUnionElementTypes(TypeRef UnionTy, vbuf Dest);\n+\n+  fn ArrayType(TypeRef ElementType, uint ElementCount) -> TypeRef;\n+  fn PointerType(TypeRef ElementType, uint AddressSpace) -> TypeRef;\n+  fn VectorType(TypeRef ElementType, uint ElementCount) -> TypeRef;\n+\n+  fn GetElementType(TypeRef Ty) -> TypeRef;\n+  fn GetArrayLength(TypeRef ArrayTy) -> uint;\n+  fn GetPointerAddressSpace(TypeRef PointerTy) -> uint;\n+  fn GetVectorSize(TypeRef VectorTy) -> uint;\n+\n+  fn VoidTypeInContext(ContextRef C) -> TypeRef;\n+  fn LabelTypeInContext(ContextRef C) -> TypeRef;\n+  fn OpaqueTypeInContext(ContextRef C) -> TypeRef;\n+\n+  fn VoidType() -> TypeRef;\n+  fn LabelType() -> TypeRef;\n+  fn OpaqueType() -> TypeRef;\n+\n+  fn CreateTypeHandle(TypeRef PotentiallyAbstractTy) -> TypeHandleRef;\n+  fn RefineType(TypeRef AbstractTy, TypeRef ConcreteTy);\n+  fn ResolveTypeHandle(TypeHandleRef TypeHandle) -> TypeRef;\n+  fn DisposeTypeHandle(TypeHandleRef TypeHandle);\n+\n+  fn TypeOf(ValueRef Val) -> TypeRef;\n+  fn GetValueName(ValueRef Val) -> sbuf;\n+  fn SetValueName(ValueRef Val, sbuf Name);\n+  fn DumpValue(ValueRef Val);\n+  fn ReplaceAllUsesWith(ValueRef OldVal, ValueRef NewVal);\n+  fn HasMetadata(ValueRef Val) -> int;\n+  fn GetMetadata(ValueRef Val, uint KindID) -> ValueRef;\n+  fn SetMetadata(ValueRef Val, uint KindID, ValueRef Node);\n+\n+\n+}\n\\ No newline at end of file"}, {"sha": "7b1f92361734855d387e116e5304e73a5117a086", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=cd0c9dd4fb9eaa6f1aeaf0200f7842488803be26", "patch": "@@ -12,6 +12,10 @@ mod driver {\n     mod rustc;\n }\n \n+mod lib {\n+    mod llvm;\n+}\n+\n // Local Variables:\n // fill-column: 78;\n // indent-tabs-mode: nil"}]}