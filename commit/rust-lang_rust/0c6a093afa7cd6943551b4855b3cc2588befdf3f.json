{"sha": "0c6a093afa7cd6943551b4855b3cc2588befdf3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmEwOTNhZmE3Y2Q2OTQzNTUxYjQ4NTViM2NjMjU4OGJlZmRmM2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-11T09:06:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-11T09:06:41Z"}, "message": "Unix RwLock: avoid racy access to write_locked", "tree": {"sha": "6a7b88bf44711ff079be6a344bf7f9c7a1ddcf17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7b88bf44711ff079be6a344bf7f9c7a1ddcf17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6a093afa7cd6943551b4855b3cc2588befdf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6a093afa7cd6943551b4855b3cc2588befdf3f", "html_url": "https://github.com/rust-lang/rust/commit/0c6a093afa7cd6943551b4855b3cc2588befdf3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6a093afa7cd6943551b4855b3cc2588befdf3f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8f9029762da90a88c8ca6f8ff7690177ec696a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b8f9029762da90a88c8ca6f8ff7690177ec696a", "html_url": "https://github.com/rust-lang/rust/commit/9b8f9029762da90a88c8ca6f8ff7690177ec696a"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "8c385ae7760af76420b62e9c12a4196e27206ebe", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6a093afa7cd6943551b4855b3cc2588befdf3f/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6a093afa7cd6943551b4855b3cc2588befdf3f/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=0c6a093afa7cd6943551b4855b3cc2588befdf3f", "patch": "@@ -14,7 +14,7 @@ use sync::atomic::{AtomicUsize, Ordering};\n \n pub struct RWLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n-    write_locked: UnsafeCell<bool>,\n+    write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n@@ -52,7 +52,7 @@ impl RWLock {\n         // allow that because it could lead to aliasing issues.\n         if r == libc::EAGAIN {\n             panic!(\"rwlock maximum reader count exceeded\");\n-        } else if r == libc::EDEADLK || *self.write_locked.get() {\n+        } else if r == libc::EDEADLK || (r == 0 && *self.write_locked.get()) {\n             if r == 0 {\n                 self.raw_unlock();\n             }"}]}