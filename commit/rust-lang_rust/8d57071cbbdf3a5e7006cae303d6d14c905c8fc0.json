{"sha": "8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTcwNzFjYmJkZjNhNWU3MDA2Y2FlMzAzZDZkMTRjOTA1YzhmYzA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-24T17:26:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-24T17:26:32Z"}, "message": "Rollup merge of #49162 - tmandry:stabilize-termination-trait, r=nikomatsakis\n\nStabilize termination_trait, split out termination_trait_test\n\nFor #48453.\n\nFirst time contribution, so I'd really appreciate any feedback on how this PR can be better.\n\nNot sure exactly what kind of documentation update is needed. If there is no PR to update the reference, I can try doing that this week as I have time.", "tree": {"sha": "229615e8e20c9c83ea7588b1edfbd374273d867b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/229615e8e20c9c83ea7588b1edfbd374273d867b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatopICRBK7hj4Ov3rIwAAdHIIAC6lNUEstkRk0KPEjETOrwR5\nFIFx+TgBNZDfpe1x5znhus9umQn1M+j456GypyfyewITynr5EUMwD97zkz1pFD1t\nHoy7UiXkIMOqD1ztvRIhur1WLTLHzOjmK9Qq0KiXyqz+VleAMPQKi8e/nzAqraiB\nF3qUrzthSW4ATUxBmffjN4RUIvHDgdXe7am1ruThE1BijWS/DfqL3yj90w1uBlve\nwevwzDZVv2Xwn6Oa7fcyXKD0gP2j89cqiL9E5699M/gz4mbgceoSaRvF9RulRLwg\nnwBG5afeybQTrss4HYdFTzMs4UvCkVI+iNgKh5L6dyl41H+rVOM6GrmYqhtHahA=\n=WC4m\n-----END PGP SIGNATURE-----\n", "payload": "tree 229615e8e20c9c83ea7588b1edfbd374273d867b\nparent c892e683872725b9d9b4ed0ed5bd53281313bc38\nparent 2b13d95da02d318c12814261dd36edd91ae6879e\nauthor kennytm <kennytm@gmail.com> 1521912392 +0800\ncommitter GitHub <noreply@github.com> 1521912392 +0800\n\nRollup merge of #49162 - tmandry:stabilize-termination-trait, r=nikomatsakis\n\nStabilize termination_trait, split out termination_trait_test\n\nFor #48453.\n\nFirst time contribution, so I'd really appreciate any feedback on how this PR can be better.\n\nNot sure exactly what kind of documentation update is needed. If there is no PR to update the reference, I can try doing that this week as I have time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "html_url": "https://github.com/rust-lang/rust/commit/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c892e683872725b9d9b4ed0ed5bd53281313bc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c892e683872725b9d9b4ed0ed5bd53281313bc38", "html_url": "https://github.com/rust-lang/rust/commit/c892e683872725b9d9b4ed0ed5bd53281313bc38"}, {"sha": "2b13d95da02d318c12814261dd36edd91ae6879e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b13d95da02d318c12814261dd36edd91ae6879e", "html_url": "https://github.com/rust-lang/rust/commit/2b13d95da02d318c12814261dd36edd91ae6879e"}], "stats": {"total": 146, "additions": 85, "deletions": 61}, "files": [{"sha": "e22e2b557039483b10e51e58f2a6c9f28f3b23c3", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -1764,12 +1764,12 @@ The `main` function was incorrectly declared.\n Erroneous code example:\n \n ```compile_fail,E0580\n-fn main() -> i32 { // error: main function has wrong type\n-    0\n+fn main(x: i32) { // error: main function has wrong type\n+    println!(\"{}\", x);\n }\n ```\n \n-The `main` function prototype should never take arguments or return type.\n+The `main` function prototype should never take arguments.\n Example:\n \n ```"}, {"sha": "e640cc315c44d2fa4b6e2d0902cb692b6e114ea3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -595,20 +595,23 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          trait_ref.to_predicate(), post_message)\n                             }));\n \n+                        let explanation =\n+                            if obligation.cause.code == ObligationCauseCode::MainFunctionType {\n+                                \"consider using `()`, or a `Result`\".to_owned()\n+                            } else {\n+                                format!(\"{}the trait `{}` is not implemented for `{}`\",\n+                                        pre_message,\n+                                        trait_ref,\n+                                        trait_ref.self_ty())\n+                            };\n+\n                         if let Some(ref s) = label {\n                             // If it has a custom \"#[rustc_on_unimplemented]\"\n                             // error message, let's display it as the label!\n                             err.span_label(span, s.as_str());\n-                            err.help(&format!(\"{}the trait `{}` is not implemented for `{}`\",\n-                                              pre_message,\n-                                              trait_ref,\n-                                              trait_ref.self_ty()));\n+                            err.help(&explanation);\n                         } else {\n-                            err.span_label(span,\n-                                           &*format!(\"{}the trait `{}` is not implemented for `{}`\",\n-                                                     pre_message,\n-                                                     trait_ref,\n-                                                     trait_ref.self_ty()));\n+                            err.span_label(span, explanation);\n                         }\n                         if let Some(ref s) = note {\n                             // If it has a custom \"#[rustc_on_unimplemented]\" note, let's display it"}, {"sha": "f820b0ba16b3004a864d4f0f5354e14960699fb1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -1130,25 +1130,23 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     }\n     fcx.demand_suptype(span, ret_ty, actual_return_ty);\n \n-    if fcx.tcx.features().termination_trait {\n-        // If the termination trait language item is activated, check that the main return type\n-        // implements the termination trait.\n-        if let Some(term_id) = fcx.tcx.lang_items().termination() {\n-            if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n-                if id == fn_id {\n-                    match fcx.sess().entry_type.get() {\n-                        Some(config::EntryMain) => {\n-                            let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n-                            let trait_ref = ty::TraitRef::new(term_id, substs);\n-                            let cause = traits::ObligationCause::new(\n-                                span, fn_id, ObligationCauseCode::MainFunctionType);\n-\n-                            inherited.register_predicate(\n-                                traits::Obligation::new(\n-                                    cause, param_env, trait_ref.to_predicate()));\n-                        },\n-                        _ => {},\n-                    }\n+    // Check that the main return type implements the termination trait.\n+    if let Some(term_id) = fcx.tcx.lang_items().termination() {\n+        if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n+            if id == fn_id {\n+                match fcx.sess().entry_type.get() {\n+                    Some(config::EntryMain) => {\n+                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n+                        let trait_ref = ty::TraitRef::new(term_id, substs);\n+                        let return_ty_span = decl.output.span();\n+                        let cause = traits::ObligationCause::new(\n+                            return_ty_span, fn_id, ObligationCauseCode::MainFunctionType);\n+\n+                        inherited.register_predicate(\n+                            traits::Obligation::new(\n+                                cause, param_env, trait_ref.to_predicate()));\n+                    },\n+                    _ => {},\n                 }\n             }\n         }"}, {"sha": "cd21d53b837b2a5239b11db6dc23192b87efd823", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -208,8 +208,7 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n \n             let actual = tcx.fn_sig(main_def_id);\n-            let expected_return_type = if tcx.lang_items().termination().is_some()\n-                && tcx.features().termination_trait {\n+            let expected_return_type = if tcx.lang_items().termination().is_some() {\n                 // we take the return type of the given main function, the real check is done\n                 // in `check_fn`\n                 actual.output().skip_binder()"}, {"sha": "0b06c5d4d656e03ad5d5d898ae7a8c0096dfc4f8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -308,7 +308,6 @@\n #![feature(str_char)]\n #![feature(str_internals)]\n #![feature(str_utf16)]\n-#![feature(termination_trait)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n@@ -325,6 +324,7 @@\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n #![cfg_attr(stage0, feature(never_type))]\n+#![cfg_attr(stage0, feature(termination_trait))]\n \n #![default_lib_allocator]\n "}, {"sha": "c877bf6aa35cdb1734ea9ebeb881fa5fba69650a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -1442,8 +1442,9 @@ pub fn id() -> u32 {\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n #[cfg_attr(not(test), lang = \"termination\")]\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-#[rustc_on_unimplemented =\n-  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n+#[rustc_on_unimplemented(\n+  message=\"`main` has invalid return type `{Self}`\",\n+  label=\"`main` can only return types that implement {Termination}\")]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system."}, {"sha": "35642312e6dd57a996bf9e5f2dfce5f09ace92cb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -428,8 +428,8 @@ declare_features! (\n     // `foo.rs` as an alternative to `foo/mod.rs`\n     (active, non_modrs_mods, \"1.24.0\", Some(44660), None),\n \n-    // Termination trait in main (RFC 1937)\n-    (active, termination_trait, \"1.24.0\", Some(43301), None),\n+    // Termination trait in tests (RFC 1937)\n+    (active, termination_trait_test, \"1.24.0\", Some(48854), None),\n \n     // Allows use of the :lifetime macro fragment specifier\n     (active, macro_lifetime_matcher, \"1.24.0\", Some(46895), None),\n@@ -565,6 +565,8 @@ declare_features! (\n     (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n     // allow `..=` in patterns (RFC 1192)\n     (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n+    // Termination trait in main (RFC 1937)\n+    (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "6c01171d1003e95424b5bb7f526752fb56deb0eb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -332,7 +332,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n             ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n                 // If the termination trait is active, the compiler will check that the output\n                 // type implements the `Termination` trait as `libtest` enforces that.\n-                let output_matches = if cx.features.termination_trait {\n+                let output_matches = if cx.features.termination_trait_test {\n                     true\n                 } else {\n                     let no_output = match decl.output {\n@@ -359,7 +359,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n         match has_test_signature(cx, i) {\n             Yes => true,\n             No => {\n-                if cx.features.termination_trait {\n+                if cx.features.termination_trait_test {\n                     diag.span_err(i.span, \"functions used as tests can not have any arguments\");\n                 } else {\n                     diag.span_err(i.span, \"functions used as tests must have signature fn() -> ()\");\n@@ -388,7 +388,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n \n                 // If the termination trait is active, the compiler will check that the output\n                 // type implements the `Termination` trait as `libtest` enforces that.\n-                let output_matches = if cx.features.termination_trait {\n+                let output_matches = if cx.features.termination_trait_test {\n                     true\n                 } else {\n                     let no_output = match decl.output {\n@@ -416,7 +416,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     if has_bench_attr && !has_bench_signature {\n         let diag = cx.span_diagnostic;\n \n-        if cx.features.termination_trait {\n+        if cx.features.termination_trait_test {\n             diag.span_err(i.span, \"functions used as benches must have signature \\\n                                    `fn(&mut Bencher) -> impl Termination`\");\n         } else {"}, {"sha": "4af7e94671627c67e216ebff9e5c1620ad31fded", "filename": "src/test/compile-fail/feature-gate-termination_trait_test.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait_test.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+fn main() {}\n+\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn it_works() -> Result<(), ()> {\n+    //~^ ERROR functions used as tests must have signature fn() -> ()\n+        Ok(())\n+    }\n+}"}, {"sha": "0e6ddf7c92f1a3629af50350f79e02ef4716faba", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-i32.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() -> i32 { //~ ERROR main function has wrong type [E0580]\n+fn main() -> i32 {\n+//~^ ERROR `main` has invalid return type `i32`\n+//~| NOTE `main` can only return types that implement std::process::Termination\n+//~| HELP consider using `()`, or a `Result`\n     0\n }", "previous_filename": "src/test/compile-fail/feature-gate-termination_trait.rs"}, {"sha": "b5f5472b492902f94eaecdf16b1b8a50ada303da", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-not-satisfied.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(termination_trait)]\n-\n struct ReturnType {}\n \n-fn main() -> ReturnType { //~ ERROR `ReturnType: std::process::Termination` is not satisfied\n+fn main() -> ReturnType { //~ ERROR `main` has invalid return type `ReturnType`\n     ReturnType {}\n }"}, {"sha": "863de85af88fbee024d7f4df8f35c284ec796915", "filename": "src/test/run-fail/rfc-1937-termination-trait/termination-trait-for-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-never.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(termination_trait)]\n-\n // error-pattern:oh, dear\n \n fn main() -> ! {"}, {"sha": "0c6cb4de9567d8955d8ef2f618e4cc383d7fec05", "filename": "src/test/run-fail/rfc-1937-termination-trait/termination-trait-for-result-box-error_err.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_err.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -11,8 +11,6 @@\n // must-compile-successfully\n // failure-status: 1\n \n-#![feature(termination_trait)]\n-\n use std::io::{Error, ErrorKind};\n \n fn main() -> Result<(), Box<Error>> {"}, {"sha": "046d27a9f0fe55586ed5f82a1533900e04e6b1ec", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-empty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-empty.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(termination_trait)]\n-\n fn main() {}"}, {"sha": "4aa7d8c3a77d2fd594538bc4c8bcc776893aec6b", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-exitcode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(termination_trait)]\n #![feature(process_exitcode_placeholder)]\n \n use std::process::ExitCode;"}, {"sha": "33686ed0b8fa23b5dcbf8a038a23fbfebf815da9", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-result-box-error_ok.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_ok.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(termination_trait)]\n-\n use std::io::Error;\n \n fn main() -> Result<(), Box<Error>> {"}, {"sha": "1c87e31e763e9f9bee733e568431872dcf599dee", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-result.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(termination_trait)]\n-\n use std::io::Error;\n \n fn main() -> Result<(), Error> {"}, {"sha": "11997eb6917287cb82abe42033d9f87a12f543d4", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: --test\n \n-#![feature(termination_trait)]\n+#![feature(termination_trait_test)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "425f51ca2fb5498dea17498877f5002b815a82c6", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-main-wrong-type.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -7,9 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(termination_trait)]\n \n-fn main() -> char {\n-//~^ ERROR: the trait bound `char: std::process::Termination` is not satisfied\n+fn main() -> char { //~ ERROR\n     ' '\n }", "previous_filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-wrong-type.rs"}, {"sha": "5109d9275c58b573b0eeac5f46380e7e4b983406", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-main-wrong-type.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr?ref=8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: `main` has invalid return type `char`\n+  --> $DIR/termination-trait-main-wrong-type.rs:11:14\n+   |\n+LL | fn main() -> char { //~ ERROR\n+   |              ^^^^ `main` can only return types that implement std::process::Termination\n+   |\n+   = help: consider using `()`, or a `Result`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}