{"sha": "59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTM3MzMyYjBkMmQwYzVlNDNiZWExMTg0ZWMwMzg3ZmIwN2NjODA=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T23:28:23Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T23:28:23Z"}, "message": "Add `BREAK` too, and improve the comments", "tree": {"sha": "fc6596cfe62cd26c69ddc37acd580b186690a2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6596cfe62cd26c69ddc37acd580b186690a2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "html_url": "https://github.com/rust-lang/rust/commit/59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac272688e9d561b1fff71621323682d23e4c31d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac272688e9d561b1fff71621323682d23e4c31d", "html_url": "https://github.com/rust-lang/rust/commit/fac272688e9d561b1fff71621323682d23e4c31d"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "bc3d1ce53bac5d2ebaf840513f36cf142e836c41", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "patch": "@@ -286,7 +286,7 @@ where\n         prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n         match prior_status {\n-            Some(NodeStatus::Visited) => ControlFlow::Break(()),\n+            Some(NodeStatus::Visited) => ControlFlow::BREAK,\n             _ => ControlFlow::CONTINUE,\n         }\n     }"}, {"sha": "ceeae2371e130ffa34f580896831491ef5d4e40e", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "patch": "@@ -2086,10 +2086,10 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n+                if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n             }\n         }\n-        self.try_fold((), check(f)) == ControlFlow::Continue(())\n+        self.try_fold((), check(f)) == ControlFlow::CONTINUE\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -2139,11 +2139,11 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n+                if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n             }\n         }\n \n-        self.try_fold((), check(f)) == ControlFlow::Break(())\n+        self.try_fold((), check(f)) == ControlFlow::BREAK\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -2201,7 +2201,7 @@ pub trait Iterator {\n             mut predicate: impl FnMut(&T) -> bool,\n         ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n         }\n \n@@ -2236,7 +2236,7 @@ pub trait Iterator {\n         ) -> impl FnMut((), T) -> ControlFlow<(), B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::Continue(()),\n+                None => ControlFlow::CONTINUE,\n             }\n         }\n \n@@ -2278,7 +2278,7 @@ pub trait Iterator {\n             R: Try<Ok = bool>,\n         {\n             move |(), x| match f(&x).into_result() {\n-                Ok(false) => ControlFlow::Continue(()),\n+                Ok(false) => ControlFlow::CONTINUE,\n                 Ok(true) => ControlFlow::Break(Ok(x)),\n                 Err(x) => ControlFlow::Break(Err(x)),\n             }"}, {"sha": "b0c7dc1a518758b70df7ac8a3f6263e194c8887c", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e37332b0d2d0c5e43bea1184ec0387fb07cc80/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=59e37332b0d2d0c5e43bea1184ec0387fb07cc80", "patch": "@@ -69,6 +69,42 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n impl<B> ControlFlow<(), B> {\n     /// It's frequently the case that there's no value needed with `Continue`,\n     /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let mut partial_sum = 0;\n+    /// let last_used = (1..10).chain(20..25).try_for_each(|x| {\n+    ///     partial_sum += x;\n+    ///     if partial_sum > 100 { ControlFlow::Break(x) }\n+    ///     else { ControlFlow::CONTINUE }\n+    /// });\n+    /// assert_eq!(last_used.break_value(), Some(22));\n+    /// ```\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     pub const CONTINUE: Self = ControlFlow::Continue(());\n }\n+\n+impl<C> ControlFlow<C, ()> {\n+    /// APIs like `try_for_each` don't need values with `Break`,\n+    /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let mut partial_sum = 0;\n+    /// (1..10).chain(20..25).try_for_each(|x| {\n+    ///     if partial_sum > 100 { ControlFlow::BREAK }\n+    ///     else { partial_sum += x; ControlFlow::CONTINUE }\n+    /// });\n+    /// assert_eq!(partial_sum, 108);\n+    /// ```\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub const BREAK: Self = ControlFlow::Break(());\n+}"}]}