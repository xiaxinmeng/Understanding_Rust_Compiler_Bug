{"sha": "ea0c22ea4f58f181d6739fbe624329e576ce7994", "node_id": "C_kwDOAAsO6NoAKGVhMGMyMmVhNGY1OGYxODFkNjczOWZiZTYyNDMyOWU1NzZjZTc5OTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T04:50:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T04:50:28Z"}, "message": "Auto merge of #106621 - ozkanonur:enable-elided-lifetimes-for-doctests, r=Mark-Simulacrum\n\nenable `rust_2018_idioms` lint group for doctests\n\nWith this change, `rust_2018_idioms` lint group will be enabled for compiler/libstd doctests.\n\nResolves #106086\nResolves #99144\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "5e3dea659dd2ed390720bb92f62ef287b1c8e41f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3dea659dd2ed390720bb92f62ef287b1c8e41f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea0c22ea4f58f181d6739fbe624329e576ce7994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0c22ea4f58f181d6739fbe624329e576ce7994", "html_url": "https://github.com/rust-lang/rust/commit/ea0c22ea4f58f181d6739fbe624329e576ce7994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea0c22ea4f58f181d6739fbe624329e576ce7994/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c53444dff325a0a3a4cb88cb952fbf341861ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c53444dff325a0a3a4cb88cb952fbf341861ec", "html_url": "https://github.com/rust-lang/rust/commit/04c53444dff325a0a3a4cb88cb952fbf341861ec"}, {"sha": "4e7c14fe9f03dd0189f954bd9cb97c3c513e7eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7c14fe9f03dd0189f954bd9cb97c3c513e7eed", "html_url": "https://github.com/rust-lang/rust/commit/4e7c14fe9f03dd0189f954bd9cb97c3c513e7eed"}], "stats": {"total": 226, "additions": 125, "deletions": 101}, "files": [{"sha": "0d21c8a84d028e88b236c3b1de9171a120ed2c6b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -1477,20 +1477,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Given a function definition like:\n     ///\n     /// ```rust\n+    /// use std::fmt::Debug;\n+    ///\n     /// fn test<'a, T: Debug>(x: &'a T) -> impl Debug + 'a {\n     ///     x\n     /// }\n     /// ```\n     ///\n     /// we will create a TAIT definition in the HIR like\n     ///\n-    /// ```\n+    /// ```rust,ignore (pseudo-Rust)\n     /// type TestReturn<'a, T, 'x> = impl Debug + 'x\n     /// ```\n     ///\n     /// and return a type like `TestReturn<'static, T, 'a>`, so that the function looks like:\n     ///\n-    /// ```rust\n+    /// ```rust,ignore (pseudo-Rust)\n     /// fn test<'a, T: Debug>(x: &'a T) -> TestReturn<'static, T, 'a>\n     /// ```\n     ///"}, {"sha": "caced3d64472424159950b32052c5ef4b213f0cd", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -1038,7 +1038,7 @@ impl<'a> MethodDef<'a> {\n     /// `&self.x` because that might cause an unaligned ref. So for any trait\n     /// method that takes a reference, we use a local block to force a copy.\n     /// This requires that the field impl `Copy`.\n-    /// ```\n+    /// ```rust,ignore (example)\n     /// # struct A { x: u8, y: u8 }\n     /// impl PartialEq for A {\n     ///     fn eq(&self, other: &A) -> bool {"}, {"sha": "5d86d895817554a79496229867ce85f8f26d14ed", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -167,7 +167,7 @@\n //!     fn node_label(&self, n: &Nd) -> dot::LabelText<'_> {\n //!         dot::LabelText::LabelStr(self.nodes[*n].into())\n //!     }\n-//!     fn edge_label<'b>(&'b self, _: &Ed) -> dot::LabelText<'b> {\n+//!     fn edge_label(&self, _: &Ed<'_>) -> dot::LabelText<'_> {\n //!         dot::LabelText::LabelStr(\"&sube;\".into())\n //!     }\n //! }\n@@ -177,8 +177,8 @@\n //!     type Edge = Ed<'a>;\n //!     fn nodes(&self) -> dot::Nodes<'a,Nd> { (0..self.nodes.len()).collect() }\n //!     fn edges(&'a self) -> dot::Edges<'a,Ed<'a>> { self.edges.iter().collect() }\n-//!     fn source(&self, e: &Ed) -> Nd { let & &(s,_) = e; s }\n-//!     fn target(&self, e: &Ed) -> Nd { let & &(_,t) = e; t }\n+//!     fn source(&self, e: &Ed<'_>) -> Nd { let & &(s,_) = e; s }\n+//!     fn target(&self, e: &Ed<'_>) -> Nd { let & &(_,t) = e; t }\n //! }\n //!\n //! # pub fn main() { render_to(&mut Vec::new()) }\n@@ -226,11 +226,11 @@\n //!     fn node_id(&'a self, n: &Nd<'a>) -> dot::Id<'a> {\n //!         dot::Id::new(format!(\"N{}\", n.0)).unwrap()\n //!     }\n-//!     fn node_label<'b>(&'b self, n: &Nd<'b>) -> dot::LabelText<'b> {\n+//!     fn node_label(&self, n: &Nd<'_>) -> dot::LabelText<'_> {\n //!         let &(i, _) = n;\n //!         dot::LabelText::LabelStr(self.nodes[i].into())\n //!     }\n-//!     fn edge_label<'b>(&'b self, _: &Ed<'b>) -> dot::LabelText<'b> {\n+//!     fn edge_label(&self, _: &Ed<'_>) -> dot::LabelText<'_> {\n //!         dot::LabelText::LabelStr(\"&sube;\".into())\n //!     }\n //! }"}, {"sha": "8bf1e0e84a4fa869cfec816b4fdaffe4e4d14457", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -60,19 +60,21 @@ pub(super) fn compare_impl_method<'tcx>(\n     };\n }\n \n-/// This function is best explained by example. Consider a trait:\n+/// This function is best explained by example. Consider a trait with it's implementation:\n ///\n-///     trait Trait<'t, T> {\n-///         // `trait_m`\n-///         fn method<'a, M>(t: &'t T, m: &'a M) -> Self;\n-///     }\n+/// ```rust\n+/// trait Trait<'t, T> {\n+///     // `trait_m`\n+///     fn method<'a, M>(t: &'t T, m: &'a M) -> Self;\n+/// }\n ///\n-/// And an impl:\n+/// struct Foo;\n ///\n-///     impl<'i, 'j, U> Trait<'j, &'i U> for Foo {\n-///          // `impl_m`\n-///          fn method<'b, N>(t: &'j &'i U, m: &'b N) -> Foo;\n-///     }\n+/// impl<'i, 'j, U> Trait<'j, &'i U> for Foo {\n+///     // `impl_m`\n+///     fn method<'b, N>(t: &'j &'i U, m: &'b N) -> Foo { Foo }\n+/// }\n+/// ```\n ///\n /// We wish to decide if those two method types are compatible.\n /// For this we have to show that, assuming the bounds of the impl hold, the\n@@ -82,7 +84,9 @@ pub(super) fn compare_impl_method<'tcx>(\n /// type parameters to impl type parameters. This is taken from the\n /// impl trait reference:\n ///\n-///     trait_to_impl_substs = {'t => 'j, T => &'i U, Self => Foo}\n+/// ```rust,ignore (pseudo-Rust)\n+/// trait_to_impl_substs = {'t => 'j, T => &'i U, Self => Foo}\n+/// ```\n ///\n /// We create a mapping `dummy_substs` that maps from the impl type\n /// parameters to fresh types and regions. For type parameters,\n@@ -91,13 +95,17 @@ pub(super) fn compare_impl_method<'tcx>(\n /// regions (Note: but only early-bound regions, i.e., those\n /// declared on the impl or used in type parameter bounds).\n ///\n-///     impl_to_placeholder_substs = {'i => 'i0, U => U0, N => N0 }\n+/// ```rust,ignore (pseudo-Rust)\n+/// impl_to_placeholder_substs = {'i => 'i0, U => U0, N => N0 }\n+/// ```\n ///\n /// Now we can apply `placeholder_substs` to the type of the impl method\n /// to yield a new function type in terms of our fresh, placeholder\n /// types:\n ///\n-///     <'b> fn(t: &'i0 U0, m: &'b) -> Foo\n+/// ```rust,ignore (pseudo-Rust)\n+/// <'b> fn(t: &'i0 U0, m: &'b) -> Foo\n+/// ```\n ///\n /// We now want to extract and substitute the type of the *trait*\n /// method and compare it. To do so, we must create a compound\n@@ -106,11 +114,15 @@ pub(super) fn compare_impl_method<'tcx>(\n /// type parameters. We extend the mapping to also include\n /// the method parameters.\n ///\n-///     trait_to_placeholder_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n+/// ```rust,ignore (pseudo-Rust)\n+/// trait_to_placeholder_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n+/// ```\n ///\n /// Applying this to the trait method type yields:\n ///\n-///     <'a> fn(t: &'i0 U0, m: &'a) -> Foo\n+/// ```rust,ignore (pseudo-Rust)\n+/// <'a> fn(t: &'i0 U0, m: &'a) -> Foo\n+/// ```\n ///\n /// This type is also the same but the name of the bound region (`'a`\n /// vs `'b`). However, the normal subtyping rules on fn types handle\n@@ -1163,7 +1175,7 @@ fn compare_self_type<'tcx>(\n /// as the number of generics on the respective assoc item in the trait definition.\n ///\n /// For example this code emits the errors in the following code:\n-/// ```\n+/// ```rust,compile_fail\n /// trait Trait {\n ///     fn foo();\n ///     type Assoc<T>;\n@@ -1547,7 +1559,7 @@ fn compare_synthetic_generics<'tcx>(\n /// the same kind as the respective generic parameter in the trait def.\n ///\n /// For example all 4 errors in the following code are emitted here:\n-/// ```\n+/// ```rust,ignore (pseudo-Rust)\n /// trait Foo {\n ///     fn foo<const N: u8>();\n ///     type bar<const N: u8>;"}, {"sha": "821567c1d884e2bc62e5e34b5905731cff26e3cc", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -1923,7 +1923,7 @@ fn is_late_bound_map(\n     /// handles cycle detection as we go through the query system.\n     ///\n     /// This is necessary in the first place for the following case:\n-    /// ```\n+    /// ```rust,ignore (pseudo-Rust)\n     /// type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n     /// fn foo<'a>(_: Alias<'a, ()>) -> Alias<'a, ()> { ... }\n     /// ```"}, {"sha": "5000b0139df285228fd04ff79a416459a320f895", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -31,7 +31,7 @@ pub enum TypeAnnotationNeeded {\n     /// ```\n     E0282,\n     /// An implementation cannot be chosen unambiguously because of lack of information.\n-    /// ```compile_fail,E0283\n+    /// ```compile_fail,E0790\n     /// let _ = Default::default();\n     /// ```\n     E0283,"}, {"sha": "1a60bab18dbda7aa0ce61fcc15f5011cc2789d68", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ///\n     /// Consider a case where we have\n     ///\n-    /// ```compile_fail,E0623\n+    /// ```compile_fail\n     /// fn foo(x: &mut Vec<&u8>, y: &u8) {\n     ///     x.push(y);\n     /// }"}, {"sha": "0df417d095013d5d704e9994c95942ddbbaef361", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::{self, Region, TyCtxt};\n /// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n ///\n /// # Example\n-/// ```compile_fail,E0623\n+/// ```compile_fail\n /// fn foo(x: &mut Vec<&u8>, y: &u8)\n ///    { x.push(y); }\n /// ```"}, {"sha": "75ce0f83fd63fb8b43e8c8640f5b9b82b5ca9f6e", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -13,9 +13,11 @@ use crate::infer::region_constraints::VerifyIfEq;\n \n /// Given a \"verify-if-eq\" type test like:\n ///\n-///     exists<'a...> {\n-///         verify_if_eq(some_type, bound_region)\n-///     }\n+/// ```rust,ignore (pseudo-Rust)\n+/// exists<'a...> {\n+///     verify_if_eq(some_type, bound_region)\n+/// }\n+/// ```\n ///\n /// and the type `test_ty` that the type test is being tested against,\n /// returns:"}, {"sha": "c2bf0f3db253ce5a7819860f6f91a23c3d2b672c", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -277,7 +277,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     ///\n     /// It will not, however, work for higher-ranked bounds like:\n     ///\n-    /// ```compile_fail,E0311\n+    /// ```ignore(this does compile today, previously was marked as `compile_fail,E0311`)\n     /// trait Foo<'a, 'b>\n     /// where for<'x> <Self as Foo<'x, 'b>>::Bar: 'x\n     /// {"}, {"sha": "c7a307b89e414d8dc76ac3482b6730e42c9fbe1f", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -217,7 +217,7 @@ pub enum VerifyBound<'tcx> {\n /// and supplies a bound if it ended up being relevant. It's used in situations\n /// like this:\n ///\n-/// ```rust\n+/// ```rust,ignore (pseudo-Rust)\n /// fn foo<'a, 'b, T: SomeTrait<'a>>\n /// where\n ///    <T as SomeTrait<'a>>::Item: 'b\n@@ -232,7 +232,7 @@ pub enum VerifyBound<'tcx> {\n /// In the [`VerifyBound`], this struct is enclosed in `Binder` to account\n /// for cases like\n ///\n-/// ```rust\n+/// ```rust,ignore (pseudo-Rust)\n /// where for<'a> <T as SomeTrait<'a>::Item: 'a\n /// ```\n ///"}, {"sha": "6e9dc880a7deecbf2e2f62b028450d52e2555f97", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -333,6 +333,7 @@ declare_lint! {\n     ///\n     /// ```rust,compile_fail\n     /// #![deny(unused_extern_crates)]\n+    /// #![deny(warnings)]\n     /// extern crate proc_macro;\n     /// ```\n     ///\n@@ -1667,6 +1668,7 @@ declare_lint! {\n     ///\n     /// ```rust,compile_fail\n     /// #![deny(elided_lifetimes_in_paths)]\n+    /// #![deny(warnings)]\n     /// struct Foo<'a> {\n     ///     x: &'a u32\n     /// }\n@@ -2158,6 +2160,7 @@ declare_lint! {\n     /// ```rust,compile_fail\n     /// # #![allow(unused)]\n     /// #![deny(explicit_outlives_requirements)]\n+    /// #![deny(warnings)]\n     ///\n     /// struct SharedRef<'a, T>\n     /// where"}, {"sha": "84331eba2d49dc08a92b1effd363a810d88383ac", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -115,7 +115,7 @@ where\n /// ```\n /// use std::borrow::Cow;\n ///\n-/// fn abs_all(input: &mut Cow<[i32]>) {\n+/// fn abs_all(input: &mut Cow<'_, [i32]>) {\n ///     for i in 0..input.len() {\n ///         let v = input[i];\n ///         if v < 0 {\n@@ -145,7 +145,7 @@ where\n /// ```\n /// use std::borrow::Cow;\n ///\n-/// struct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {\n+/// struct Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {\n ///     values: Cow<'a, [X]>,\n /// }\n ///\n@@ -267,7 +267,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     ///\n     /// assert_eq!(\n     ///   cow,\n-    ///   Cow::Owned(String::from(\"FOO\")) as Cow<str>\n+    ///   Cow::Owned(String::from(\"FOO\")) as Cow<'_, str>\n     /// );\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -311,7 +311,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     /// use std::borrow::Cow;\n     ///\n     /// let s = \"Hello world!\";\n-    /// let cow: Cow<str> = Cow::Owned(String::from(s));\n+    /// let cow: Cow<'_, str> = Cow::Owned(String::from(s));\n     ///\n     /// assert_eq!(\n     ///   cow.into_owned(),"}, {"sha": "fb8d00e8d8730d7a34df042c955cc6708a559672", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -363,7 +363,7 @@\n //! # use std::fmt;\n //! # struct Foo; // our custom type\n //! # impl fmt::Display for Foo {\n-//! fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+//! fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n //! # write!(f, \"testing, testing\")\n //! # } }\n //! ```\n@@ -399,7 +399,7 @@\n //! }\n //!\n //! impl fmt::Display for Vector2D {\n-//!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+//!     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n //!         // The `f` value implements the `Write` trait, which is what the\n //!         // write! macro is expecting. Note that this formatting ignores the\n //!         // various flags provided to format strings.\n@@ -410,7 +410,7 @@\n //! // Different traits allow different forms of output of a type. The meaning\n //! // of this format is to print the magnitude of a vector.\n //! impl fmt::Binary for Vector2D {\n-//!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+//!     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n //!         let magnitude = (self.x * self.x + self.y * self.y) as f64;\n //!         let magnitude = magnitude.sqrt();\n //!\n@@ -517,7 +517,7 @@\n //! let mut some_writer = io::stdout();\n //! write!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n //!\n-//! fn my_fmt_fn(args: fmt::Arguments) {\n+//! fn my_fmt_fn(args: fmt::Arguments<'_>) {\n //!     write!(&mut io::stdout(), \"{args}\");\n //! }\n //! my_fmt_fn(format_args!(\", or a {} too\", \"function\"));"}, {"sha": "38a711ac7509f721ebce446519cece257862d998", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -2039,7 +2039,7 @@ where\n     /// ```rust\n     /// # use std::rc::Rc;\n     /// # use std::borrow::Cow;\n-    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// let cow: Cow<'_, str> = Cow::Borrowed(\"eggplant\");\n     /// let shared: Rc<str> = Rc::from(cow);\n     /// assert_eq!(\"eggplant\", &shared[..]);\n     /// ```"}, {"sha": "088139a6907b8bf44482de608901e93b78e9d04d", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -2741,7 +2741,7 @@ impl<'a> From<Cow<'a, str>> for String {\n     /// ```\n     /// # use std::borrow::Cow;\n     /// // If the string is not owned...\n-    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// let cow: Cow<'_, str> = Cow::Borrowed(\"eggplant\");\n     /// // It will allocate on the heap and copy the string.\n     /// let owned: String = String::from(cow);\n     /// assert_eq!(&owned[..], \"eggplant\");"}, {"sha": "7347980abbc99110cfbc4e56aa917987d98d15b9", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -2768,7 +2768,7 @@ where\n     /// ```rust\n     /// # use std::sync::Arc;\n     /// # use std::borrow::Cow;\n-    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// let cow: Cow<'_, str> = Cow::Borrowed(\"eggplant\");\n     /// let shared: Arc<str> = Arc::from(cow);\n     /// assert_eq!(\"eggplant\", &shared[..]);\n     /// ```"}, {"sha": "f0b63759ac70f8701beebd52f87858e0ed45d90a", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -16,7 +16,7 @@ use super::Vec;\n ///\n /// ```\n /// let mut v = vec![0, 1, 2];\n-/// let iter: std::vec::Drain<_> = v.drain(..);\n+/// let iter: std::vec::Drain<'_, _> = v.drain(..);\n /// ```\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<"}, {"sha": "21b0902346206aaef0dccefc37f4d8dfdc4a1298", "filename": "library/alloc/src/vec/drain_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -16,7 +16,7 @@ use super::Vec;\n /// #![feature(drain_filter)]\n ///\n /// let mut v = vec![0, 1, 2];\n-/// let iter: std::vec::DrainFilter<_, _> = v.drain_filter(|x| *x % 2 == 0);\n+/// let iter: std::vec::DrainFilter<'_, _, _> = v.drain_filter(|x| *x % 2 == 0);\n /// ```\n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n #[derive(Debug)]"}, {"sha": "97da6f06b700fae1482c9abd002d2d40ce503abd", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -3142,8 +3142,8 @@ where\n     ///\n     /// ```\n     /// # use std::borrow::Cow;\n-    /// let o: Cow<[i32]> = Cow::Owned(vec![1, 2, 3]);\n-    /// let b: Cow<[i32]> = Cow::Borrowed(&[1, 2, 3]);\n+    /// let o: Cow<'_, [i32]> = Cow::Owned(vec![1, 2, 3]);\n+    /// let b: Cow<'_, [i32]> = Cow::Borrowed(&[1, 2, 3]);\n     /// assert_eq!(Vec::from(o), Vec::from(b));\n     /// ```\n     fn from(s: Cow<'a, [T]>) -> Vec<T> {"}, {"sha": "852fdcc3f5ce7b685e7370996283ab0d794b9c5e", "filename": "library/alloc/src/vec/splice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -14,7 +14,7 @@ use super::{Drain, Vec};\n /// ```\n /// let mut v = vec![0, 1, 2];\n /// let new = [7, 8];\n-/// let iter: std::vec::Splice<_> = v.splice(1.., new);\n+/// let iter: std::vec::Splice<'_, _> = v.splice(1.., new);\n /// ```\n #[derive(Debug)]\n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "a96dfafd9c48948360f8b44f25f4dccf14dfbe10", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -115,7 +115,7 @@\n //!     let shared_map: Rc<RefCell<_>> = Rc::new(RefCell::new(HashMap::new()));\n //!     // Create a new block to limit the scope of the dynamic borrow\n //!     {\n-//!         let mut map: RefMut<_> = shared_map.borrow_mut();\n+//!         let mut map: RefMut<'_, _> = shared_map.borrow_mut();\n //!         map.insert(\"africa\", 92388);\n //!         map.insert(\"kyoto\", 11837);\n //!         map.insert(\"piccadilly\", 11826);\n@@ -1435,8 +1435,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// use std::cell::{RefCell, Ref};\n     ///\n     /// let c = RefCell::new((5, 'b'));\n-    /// let b1: Ref<(u32, char)> = c.borrow();\n-    /// let b2: Ref<u32> = Ref::map(b1, |t| &t.0);\n+    /// let b1: Ref<'_, (u32, char)> = c.borrow();\n+    /// let b2: Ref<'_, u32> = Ref::map(b1, |t| &t.0);\n     /// assert_eq!(*b2, 5)\n     /// ```\n     #[stable(feature = \"cell_map\", since = \"1.8.0\")]\n@@ -1464,8 +1464,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// use std::cell::{RefCell, Ref};\n     ///\n     /// let c = RefCell::new(vec![1, 2, 3]);\n-    /// let b1: Ref<Vec<u32>> = c.borrow();\n-    /// let b2: Result<Ref<u32>, _> = Ref::filter_map(b1, |v| v.get(1));\n+    /// let b1: Ref<'_, Vec<u32>> = c.borrow();\n+    /// let b2: Result<Ref<'_, u32>, _> = Ref::filter_map(b1, |v| v.get(1));\n     /// assert_eq!(*b2.unwrap(), 2);\n     /// ```\n     #[stable(feature = \"cell_filter_map\", since = \"1.63.0\")]\n@@ -1577,8 +1577,8 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     ///\n     /// let c = RefCell::new((5, 'b'));\n     /// {\n-    ///     let b1: RefMut<(u32, char)> = c.borrow_mut();\n-    ///     let mut b2: RefMut<u32> = RefMut::map(b1, |t| &mut t.0);\n+    ///     let b1: RefMut<'_, (u32, char)> = c.borrow_mut();\n+    ///     let mut b2: RefMut<'_, u32> = RefMut::map(b1, |t| &mut t.0);\n     ///     assert_eq!(*b2, 5);\n     ///     *b2 = 42;\n     /// }\n@@ -1612,8 +1612,8 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// let c = RefCell::new(vec![1, 2, 3]);\n     ///\n     /// {\n-    ///     let b1: RefMut<Vec<u32>> = c.borrow_mut();\n-    ///     let mut b2: Result<RefMut<u32>, _> = RefMut::filter_map(b1, |v| v.get_mut(1));\n+    ///     let b1: RefMut<'_, Vec<u32>> = c.borrow_mut();\n+    ///     let mut b2: Result<RefMut<'_, u32>, _> = RefMut::filter_map(b1, |v| v.get_mut(1));\n     ///\n     ///     if let Ok(mut b2) = b2 {\n     ///         *b2 += 2;"}, {"sha": "36f49d51ca6d3ec690697daa5c2496f9cc5c892b", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -60,7 +60,7 @@ impl fmt::Write for PadAdapter<'_, '_> {\n /// }\n ///\n /// impl fmt::Debug for Foo {\n-///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         fmt.debug_struct(\"Foo\")\n ///            .field(\"bar\", &self.bar)\n ///            .field(\"baz\", &self.baz)\n@@ -249,7 +249,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n /// struct Foo(i32, String);\n ///\n /// impl fmt::Debug for Foo {\n-///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         fmt.debug_tuple(\"Foo\")\n ///            .field(&self.0)\n ///            .field(&self.1)\n@@ -418,7 +418,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n /// struct Foo(Vec<i32>);\n ///\n /// impl fmt::Debug for Foo {\n-///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         fmt.debug_set().entries(self.0.iter()).finish()\n ///     }\n /// }\n@@ -548,7 +548,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n /// struct Foo(Vec<i32>);\n ///\n /// impl fmt::Debug for Foo {\n-///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         fmt.debug_list().entries(self.0.iter()).finish()\n ///     }\n /// }\n@@ -678,7 +678,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n /// struct Foo(Vec<(String, i32)>);\n ///\n /// impl fmt::Debug for Foo {\n-///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n ///     }\n /// }"}, {"sha": "aa829edd5b05e1f684a558ead08e68193cbc0c68", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -381,7 +381,7 @@ impl<'a> Arguments<'a> {\n     ///\n     /// fn write_str(_: &str) { /* ... */ }\n     ///\n-    /// fn write_fmt(args: &Arguments) {\n+    /// fn write_fmt(args: &Arguments<'_>) {\n     ///     if let Some(s) = args.as_str() {\n     ///         write_str(s)\n     ///     } else {\n@@ -1228,7 +1228,7 @@ impl<'a> Formatter<'a> {\n     /// }\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         // We need to remove \"-\" from the number output.\n     ///         let tmp = self.nb.abs().to_string();\n     ///\n@@ -1328,7 +1328,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo;\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         formatter.pad(\"Foo\")\n     ///     }\n     /// }\n@@ -1510,7 +1510,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo;\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         formatter.write_str(\"Foo\")\n     ///         // This is equivalent to:\n     ///         // write!(formatter, \"Foo\")\n@@ -1535,7 +1535,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(i32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         formatter.write_fmt(format_args!(\"Foo {}\", self.0))\n     ///     }\n     /// }\n@@ -1570,7 +1570,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo;\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         let c = formatter.fill();\n     ///         if let Some(width) = formatter.width() {\n     ///             for _ in 0..width {\n@@ -1598,14 +1598,12 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```\n-    /// extern crate core;\n-    ///\n     /// use std::fmt::{self, Alignment};\n     ///\n     /// struct Foo;\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         let s = if let Some(s) = formatter.align() {\n     ///             match s {\n     ///                 Alignment::Left    => \"left\",\n@@ -1645,7 +1643,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(i32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         if let Some(width) = formatter.width() {\n     ///             // If we received a width, we use it\n     ///             write!(formatter, \"{:width$}\", format!(\"Foo({})\", self.0), width = width)\n@@ -1676,7 +1674,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(f32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         if let Some(precision) = formatter.precision() {\n     ///             // If we received a precision, we use it.\n     ///             write!(formatter, \"Foo({1:.*})\", precision, self.0)\n@@ -1706,7 +1704,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(i32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         if formatter.sign_plus() {\n     ///             write!(formatter,\n     ///                    \"Foo({}{})\",\n@@ -1738,7 +1736,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(i32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         if formatter.sign_minus() {\n     ///             // You want a minus sign? Have one!\n     ///             write!(formatter, \"-Foo({})\", self.0)\n@@ -1767,7 +1765,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(i32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         if formatter.alternate() {\n     ///             write!(formatter, \"Foo({})\", self.0)\n     ///         } else {\n@@ -1795,7 +1793,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(i32);\n     ///\n     /// impl fmt::Display for Foo {\n-    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         assert!(formatter.sign_aware_zero_pad());\n     ///         assert_eq!(formatter.width(), Some(4));\n     ///         // We ignore the formatter's options.\n@@ -1839,7 +1837,7 @@ impl<'a> Formatter<'a> {\n     /// }\n     ///\n     /// impl fmt::Debug for Foo {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         fmt.debug_struct(\"Foo\")\n     ///             .field(\"bar\", &self.bar)\n     ///             .field(\"baz\", &self.baz)\n@@ -1997,7 +1995,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo<T>(i32, String, PhantomData<T>);\n     ///\n     /// impl<T> fmt::Debug for Foo<T> {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         fmt.debug_tuple(\"Foo\")\n     ///             .field(&self.0)\n     ///             .field(&self.1)\n@@ -2129,7 +2127,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(Vec<i32>);\n     ///\n     /// impl fmt::Debug for Foo {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         fmt.debug_list().entries(self.0.iter()).finish()\n     ///     }\n     /// }\n@@ -2152,7 +2150,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(Vec<i32>);\n     ///\n     /// impl fmt::Debug for Foo {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         fmt.debug_set().entries(self.0.iter()).finish()\n     ///     }\n     /// }\n@@ -2168,14 +2166,14 @@ impl<'a> Formatter<'a> {\n     /// ```rust\n     /// use std::fmt;\n     ///\n-    /// struct Arm<'a, L: 'a, R: 'a>(&'a (L, R));\n-    /// struct Table<'a, K: 'a, V: 'a>(&'a [(K, V)], V);\n+    /// struct Arm<'a, L, R>(&'a (L, R));\n+    /// struct Table<'a, K, V>(&'a [(K, V)], V);\n     ///\n     /// impl<'a, L, R> fmt::Debug for Arm<'a, L, R>\n     /// where\n     ///     L: 'a + fmt::Debug, R: 'a + fmt::Debug\n     /// {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         L::fmt(&(self.0).0, fmt)?;\n     ///         fmt.write_str(\" => \")?;\n     ///         R::fmt(&(self.0).1, fmt)\n@@ -2186,7 +2184,7 @@ impl<'a> Formatter<'a> {\n     /// where\n     ///     K: 'a + fmt::Debug, V: 'a + fmt::Debug\n     /// {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         fmt.debug_set()\n     ///         .entries(self.0.iter().map(Arm))\n     ///         .entry(&Arm(&(format_args!(\"_\"), &self.1)))\n@@ -2210,7 +2208,7 @@ impl<'a> Formatter<'a> {\n     /// struct Foo(Vec<(String, i32)>);\n     ///\n     /// impl fmt::Debug for Foo {\n-    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n     ///     }\n     /// }"}, {"sha": "b4639c07c351c820fd7197d267e37469d194c79b", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -15,7 +15,6 @@\n //! ```rust\n //! #![feature(core_intrinsics, custom_mir)]\n //!\n-//! extern crate core;\n //! use core::intrinsics::mir::*;\n //!\n //! #[custom_mir(dialect = \"built\")]\n@@ -65,7 +64,6 @@\n //! ```rust\n //! #![feature(core_intrinsics, custom_mir)]\n //!\n-//! extern crate core;\n //! use core::intrinsics::mir::*;\n //!\n //! #[custom_mir(dialect = \"built\")]\n@@ -317,7 +315,6 @@ define!(\n     /// ```rust\n     /// #![feature(custom_mir, core_intrinsics)]\n     ///\n-    /// extern crate core;\n     /// use core::intrinsics::mir::*;\n     ///\n     /// #[custom_mir(dialect = \"built\")]"}, {"sha": "26aa959e6da3f0ba80ffdb161af59c006d54d83c", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -15,7 +15,7 @@ use crate::ops::Try;\n ///\n /// let a1 = [1, 2, 3];\n /// let a2 = [4, 5, 6];\n-/// let iter: Chain<Iter<_>, Iter<_>> = a1.iter().chain(a2.iter());\n+/// let iter: Chain<Iter<'_, _>, Iter<'_, _>> = a1.iter().chain(a2.iter());\n /// ```\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]"}, {"sha": "b24882ddb179f12ecef4887faafa4b0a2a1a87cd", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -498,7 +498,6 @@ macro_rules! r#try {\n /// In a `no_std` setup you are responsible for the implementation details of the components.\n ///\n /// ```no_run\n-/// # extern crate core;\n /// use core::fmt::Write;\n ///\n /// struct Example;"}, {"sha": "97f9d01e0168c42d7427f30f7693dd71a16423c0", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -688,7 +688,7 @@ impl<T: ?Sized> !Sync for *mut T {}\n /// use std::marker::PhantomData;\n ///\n /// # #[allow(dead_code)]\n-/// struct Slice<'a, T: 'a> {\n+/// struct Slice<'a, T> {\n ///     start: *const T,\n ///     end: *const T,\n ///     phantom: PhantomData<&'a T>,\n@@ -704,7 +704,7 @@ impl<T: ?Sized> !Sync for *mut T {}\n /// ```\n /// # #![allow(dead_code)]\n /// # use std::marker::PhantomData;\n-/// # struct Slice<'a, T: 'a> {\n+/// # struct Slice<'a, T> {\n /// #     start: *const T,\n /// #     end: *const T,\n /// #     phantom: PhantomData<&'a T>,"}, {"sha": "840c8cd2fe8d07a50894a5753f4bbe0a44725c4a", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -517,7 +517,7 @@ div_impl_float! { f32 f64 }\n /// use std::ops::Rem;\n ///\n /// #[derive(PartialEq, Debug)]\n-/// struct SplitSlice<'a, T: 'a> {\n+/// struct SplitSlice<'a, T> {\n ///     slice: &'a [T],\n /// }\n ///"}, {"sha": "8266e899011cb99f878b29c9a3276a7488a8aefb", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -550,6 +550,7 @@ impl Copy for () {\n ///\n /// ```\n /// # #![feature(rustc_private)]\n+/// #[allow(unused_extern_crates)]\n /// extern crate libc;\n ///\n /// use std::mem;"}, {"sha": "eb46f4e54bb675a43c34da83dadddeae9094361b", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -2287,7 +2287,7 @@ mod use_keyword {}\n /// # #![allow(dead_code)]\n /// pub enum Cow<'a, B>\n /// where\n-///     B: 'a + ToOwned + ?Sized,\n+///     B: ToOwned + ?Sized,\n /// {\n ///     Borrowed(&'a B),\n ///     Owned(<B as ToOwned>::Owned),"}, {"sha": "1e1c3693105474338564aa7620a2a426eb33a1af", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -368,7 +368,7 @@ pub trait OpenOptionsExt {\n     ///\n     /// ```no_run\n     /// # #![feature(rustc_private)]\n-    /// extern crate libc;\n+    /// use libc;\n     /// use std::fs::OpenOptions;\n     /// use std::os::unix::fs::OpenOptionsExt;\n     ///"}, {"sha": "43203c5824dad5cdfe0cd33a7558396e07ee99a2", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -117,7 +117,7 @@ use crate::sys::path::{is_sep_byte, is_verbatim_sep, parse_prefix, MAIN_SEP_STR}\n /// use std::path::Prefix::*;\n /// use std::ffi::OsStr;\n ///\n-/// fn get_path_prefix(s: &str) -> Prefix {\n+/// fn get_path_prefix(s: &str) -> Prefix<'_> {\n ///     let path = Path::new(s);\n ///     match path.components().next().unwrap() {\n ///         Component::Prefix(prefix_component) => prefix_component.kind(),"}, {"sha": "8266e899011cb99f878b29c9a3276a7488a8aefb", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -550,6 +550,7 @@ impl Copy for () {\n ///\n /// ```\n /// # #![feature(rustc_private)]\n+/// #[allow(unused_extern_crates)]\n /// extern crate libc;\n ///\n /// use std::mem;"}, {"sha": "9da74a5ddb574787510ccf47c0c523ee67e921da", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -1842,7 +1842,7 @@ impl ExitCode {\n     /// # use std::fmt;\n     /// # enum UhOhError { GenericProblem, Specific, WithCode { exit_code: ExitCode, _x: () } }\n     /// # impl fmt::Display for UhOhError {\n-    /// #     fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result { unimplemented!() }\n+    /// #     fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result { unimplemented!() }\n     /// # }\n     /// // there's no way to gracefully recover from an UhOhError, so we just\n     /// // print a message and exit"}, {"sha": "45f2975f5f50a6a5ec57fc24d53bcb47510cdab2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -2158,6 +2158,10 @@ impl<'a> Builder<'a> {\n #[cfg(test)]\n mod tests;\n \n+/// Represents flag values in `String` form with whitespace delimiter to pass it to the compiler later.\n+///\n+/// `-Z crate-attr` flags will be applied recursively on the target code using the `rustc_parse::parser::Parser`.\n+/// See `rustc_builtin_macros::cmdline_attrs::inject` for more information.\n #[derive(Debug, Clone)]\n struct Rustflags(String, TargetSelection);\n "}, {"sha": "33addb90da3721f5b682bdc4e19d16cf6983f364", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea0c22ea4f58f181d6739fbe624329e576ce7994/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0c22ea4f58f181d6739fbe624329e576ce7994/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ea0c22ea4f58f181d6739fbe624329e576ce7994", "patch": "@@ -412,6 +412,8 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         format!(\"-Zcrate-attr=doc(html_root_url=\\\"{}/\\\")\", builder.doc_rust_lang_org_channel(),);\n     cargo.rustflag(&html_root);\n     cargo.rustdocflag(&html_root);\n+\n+    cargo.rustdocflag(\"-Zcrate-attr=warn(rust_2018_idioms)\");\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -810,6 +812,9 @@ pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelec\n         .arg(builder.rustc_features(builder.kind))\n         .arg(\"--manifest-path\")\n         .arg(builder.src.join(\"compiler/rustc/Cargo.toml\"));\n+\n+    cargo.rustdocflag(\"-Zcrate-attr=warn(rust_2018_idioms)\");\n+\n     rustc_cargo_env(builder, cargo, target, stage);\n }\n "}]}