{"sha": "bc031d4c744f0a1542ce2706f25b843aba205f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDMxZDRjNzQ0ZjBhMTU0MmNlMjcwNmYyNWI4NDNhYmEyMDVmOGM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-07T12:48:00Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-05-14T11:57:48Z"}, "message": "Properly hash enums", "tree": {"sha": "4fd61d6e5107ad74ea33108ac341b285e05e6147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fd61d6e5107ad74ea33108ac341b285e05e6147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc031d4c744f0a1542ce2706f25b843aba205f8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAlzarTwACgkQAcg2tkD/\n37EUeRAAl8Ekox3QxwBrQbLmPHM3bfMGl/vmUQbvtnavL7FSw23sdoKW9RHNs2Li\nxIhzG8VtOcvRMkUe+hVMmOrWKaye0PdtLxll6zxA2wLz83q77eq9n2YWJLvUcULF\nRFY5GFxCkL13eON623ppzzXac6LGeLd1wPTPet0nNdvFkZNnP12DnFgbA8bjpZds\nfRifQo1s1Sl+dcFesE8X9/fCAcQy95TiwfIGe+S0pMB3ez3kE6KQ3UzPuYAAgQAO\n9lDureR5D0VKsTsqzxa3sEP/NegryGPJl6zoNL+wwK3sSVLbaOAOhxH5n6iPB6up\nQ1hKK3DvzhH8aTAN3i3JYZvK0XYAiAcofugSJh4sLqUwXRXa3wEg23DwgpAt1ntG\n7nw6lxcewM78Ipg/Gwpw4KkYFlB4MADXcDBoYpbsU7Zqok1/UTUPkqHvfapUDh6W\niqY41PlZqO3Nq+nYVWeQDuGHSVJSswh/HOpAOSG28bCvzacabZCeiesMHNLgQZSO\n3xXn5KHv5fPE8Y+tuhB47LboM8L02vKaOGWrK9GdpztMr2epWMnyQy0b6bKoEQzJ\n7gWprFpJkI1qpmQpCmDCPYZ6du8ev72kOn03nXc7q6dBEq7rQpX9tF6tfLOvHX4X\nUe2KbjsAw55CBCawmgCSFyF3K93S7gOKK/GDM9Uc2y1GLEnoZrw=\n=wHfw\n-----END PGP SIGNATURE-----", "payload": "tree 4fd61d6e5107ad74ea33108ac341b285e05e6147\nparent 501830bf01422ddbaa3e2014b48c6ec7788e7835\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1557233280 +0200\ncommitter flip1995 <hello@philkrones.com> 1557835068 +0200\n\nProperly hash enums\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc031d4c744f0a1542ce2706f25b843aba205f8c", "html_url": "https://github.com/rust-lang/rust/commit/bc031d4c744f0a1542ce2706f25b843aba205f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc031d4c744f0a1542ce2706f25b843aba205f8c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "501830bf01422ddbaa3e2014b48c6ec7788e7835", "url": "https://api.github.com/repos/rust-lang/rust/commits/501830bf01422ddbaa3e2014b48c6ec7788e7835", "html_url": "https://github.com/rust-lang/rust/commit/501830bf01422ddbaa3e2014b48c6ec7788e7835"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "cbc10768bbc1604dc7b24e0fd395750a5616a9cd", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc031d4c744f0a1542ce2706f25b843aba205f8c/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc031d4c744f0a1542ce2706f25b843aba205f8c/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=bc031d4c744f0a1542ce2706f25b843aba205f8c", "patch": "@@ -81,6 +81,7 @@ impl Hash for Constant {\n     where\n         H: Hasher,\n     {\n+        std::mem::discriminant(self).hash(state);\n         match *self {\n             Constant::Str(ref s) => {\n                 s.hash(state);"}, {"sha": "88b88c2c74ab717dcbded590bd584874d3d88012", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc031d4c744f0a1542ce2706f25b843aba205f8c/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc031d4c744f0a1542ce2706f25b843aba205f8c/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=bc031d4c744f0a1542ce2706f25b843aba205f8c", "patch": "@@ -389,10 +389,18 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n \n     #[allow(clippy::many_single_char_names, clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr) {\n-        if let Some(e) = constant_simple(self.cx, self.tables, e) {\n+        let simple_const = constant_simple(self.cx, self.tables, e);\n+\n+        // const hashing may result in the same hash as some unrelated node, so add a sort of\n+        // discriminant depending on which path we're choosing next\n+        simple_const.is_some().hash(&mut self.s);\n+\n+        if let Some(e) = simple_const {\n             return e.hash(&mut self.s);\n         }\n \n+        std::mem::discriminant(&e.node).hash(&mut self.s);\n+\n         match e.node {\n             ExprKind::AddrOf(m, ref e) => {\n                 let c: fn(_, _) -> _ = ExprKind::AddrOf;"}]}