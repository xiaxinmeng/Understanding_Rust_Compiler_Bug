{"sha": "6af7acab1c6976933c90b07a58450567227b4719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjdhY2FiMWM2OTc2OTMzYzkwYjA3YTU4NDUwNTY3MjI3YjQ3MTk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-14T00:39:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-19T22:13:35Z"}, "message": "Separate def collection and hir map making even further", "tree": {"sha": "1ccaf88d4747995815046b830bbeddff4a3f6b0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ccaf88d4747995815046b830bbeddff4a3f6b0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af7acab1c6976933c90b07a58450567227b4719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af7acab1c6976933c90b07a58450567227b4719", "html_url": "https://github.com/rust-lang/rust/commit/6af7acab1c6976933c90b07a58450567227b4719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af7acab1c6976933c90b07a58450567227b4719/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6bcc04c521bcdf82b7727ec35e3f6ce0cbb5b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bcc04c521bcdf82b7727ec35e3f6ce0cbb5b0f", "html_url": "https://github.com/rust-lang/rust/commit/d6bcc04c521bcdf82b7727ec35e3f6ce0cbb5b0f"}], "stats": {"total": 76, "additions": 33, "deletions": 43}, "files": [{"sha": "974791f62bbc4a236ba2a1b2a4d00965ea2b6aa0", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=6af7acab1c6976933c90b07a58450567227b4719", "patch": "@@ -18,16 +18,14 @@ use syntax::ast::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n /// Creates def ids for nodes in the HIR.\n pub struct DefCollector<'ast> {\n     pub krate: &'ast Crate,\n-    pub map: &'ast [MapEntry<'ast>],\n     pub definitions: Definitions,\n     pub parent_def: Option<DefIndex>,\n }\n \n impl<'ast> DefCollector<'ast> {\n-    pub fn root(krate: &'ast Crate, map: &'ast [MapEntry<'ast>]) -> DefCollector<'ast> {\n+    pub fn root(krate: &'ast Crate) -> DefCollector<'ast> {\n         let mut collector = DefCollector {\n             krate: krate,\n-            map: map,\n             definitions: Definitions::new(),\n             parent_def: None,\n         };\n@@ -43,12 +41,10 @@ impl<'ast> DefCollector<'ast> {\n                   parent_node: NodeId,\n                   parent_def_path: DefPath,\n                   parent_def_id: DefId,\n-                  map: &'ast [MapEntry<'ast>],\n                   definitions: Definitions)\n                   -> DefCollector<'ast> {\n         let mut collector = DefCollector {\n             krate: krate,\n-            map: map,\n             parent_def: None,\n             definitions: definitions,\n         };"}, {"sha": "70071c224f870c2d806d7c9f80fdce2938a7e651", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=6af7acab1c6976933c90b07a58450567227b4719", "patch": "@@ -782,19 +782,16 @@ impl<F: FoldOps> Folder for IdAndSpanUpdater<F> {\n     }\n }\n \n-pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> {\n-    let (map, definitions) = {\n-        let mut collector = NodeCollector::root(&forest.krate);\n-        intravisit::walk_crate(&mut collector, &forest.krate);\n-\n-        let definitions = {\n-            let mut def_collector = DefCollector::root(&forest.krate, &collector.map);\n-            intravisit::walk_crate(&mut def_collector, &forest.krate);\n-            def_collector.definitions\n-        };\n+pub fn collect_definitions<'ast>(forest: &'ast mut Forest) -> Definitions {\n+    let mut def_collector = DefCollector::root(&forest.krate);\n+    intravisit::walk_crate(&mut def_collector, &forest.krate);\n+    def_collector.definitions    \n+}\n \n-        (collector.map, definitions)\n-    };\n+pub fn map_crate<'ast>(forest: &'ast mut Forest, definitions: Definitions) -> Map<'ast> {\n+    let mut collector = NodeCollector::root(&forest.krate);\n+    intravisit::walk_crate(&mut collector, &forest.krate);\n+    let map = collector.map;\n \n     if log_enabled!(::log::DEBUG) {\n         // This only makes sense for ordered stores; note the\n@@ -843,28 +840,24 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n     };\n \n     let ii = map.forest.inlined_items.alloc(ii);\n-\n     let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n+\n+    let defs = mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new());\n+    let mut def_collector = DefCollector::extend(map.krate(),\n+                                                 ii_parent_id,\n+                                                 parent_def_path.clone(),\n+                                                 parent_def_id,\n+                                                 defs);\n+    ii.visit(&mut def_collector);\n+    *map.definitions.borrow_mut() = def_collector.definitions;\n+\n     let mut collector = NodeCollector::extend(map.krate(),\n                                               ii,\n                                               ii_parent_id,\n-                                              parent_def_path.clone(),\n+                                              parent_def_path,\n                                               parent_def_id,\n                                               mem::replace(&mut *map.map.borrow_mut(), vec![]));\n     ii.visit(&mut collector);\n-\n-    {\n-        let defs = mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new());\n-        let mut def_collector = DefCollector::extend(map.krate(),\n-                                                     ii_parent_id,\n-                                                     parent_def_path,\n-                                                     parent_def_id,\n-                                                     &collector.map,\n-                                                     defs);\n-        ii.visit(&mut def_collector);\n-        *map.definitions.borrow_mut() = def_collector.definitions;\n-    }\n-\n     *map.map.borrow_mut() = collector.map;\n \n     ii"}, {"sha": "d63cf8756325af5c434e28ef897ec019a391bc05", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6af7acab1c6976933c90b07a58450567227b4719", "patch": "@@ -156,7 +156,16 @@ pub fn compile_input(sess: &Session,\n         }\n \n         let arenas = ty::CtxtArenas::new();\n-        let hir_map = make_map(sess, &mut hir_forest);\n+        // Collect defintions for def ids.\n+        let defs = time(sess.time_passes(),\n+                        \"collecting defs\",\n+                        move || hir_map::collect_defs(hir_forest));\n+\n+        // Construct the HIR map\n+        let hir_map = time(sess.time_passes(),\n+                           \"indexing hir\",\n+                           move || hir_map::map_crate(hir_forest, defs));\n+\n \n         write_out_deps(sess, &outputs, &id);\n \n@@ -746,15 +755,6 @@ pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n     krate\n }\n \n-pub fn make_map<'ast>(sess: &Session,\n-                      forest: &'ast mut hir_map::Forest)\n-                      -> hir_map::Map<'ast> {\n-    // Construct the HIR map\n-    time(sess.time_passes(),\n-         \"indexing hir\",\n-         move || hir_map::map_crate(forest))\n-}\n-\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis."}, {"sha": "228cb8d75afef07f19edf3ec22216b0bd9b7d711", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af7acab1c6976933c90b07a58450567227b4719/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=6af7acab1c6976933c90b07a58450567227b4719", "patch": "@@ -738,7 +738,8 @@ pub fn pretty_print_input(sess: Session,\n     let _ignore = dep_graph.in_ignore();\n     let ast_map = if compute_ast_map {\n         hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate), dep_graph.clone());\n-        let map = driver::make_map(&sess, &mut hir_forest);\n+        let defs = hir_map::collect_defs(hir_forest);\n+        let map = hir_map::map_crate(hir_forest, defs);\n         Some(map)\n     } else {\n         None"}]}