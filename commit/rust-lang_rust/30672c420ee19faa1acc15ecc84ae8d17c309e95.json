{"sha": "30672c420ee19faa1acc15ecc84ae8d17c309e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjcyYzQyMGVlMTlmYWExYWNjMTVlY2M4NGFlOGQxN2MzMDllOTU=", "commit": {"author": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-13T17:00:55Z"}, "committer": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-13T17:03:48Z"}, "message": "scopes resolution is more granular", "tree": {"sha": "8e55559457b8c27fb4e33425a92644aa805209bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e55559457b8c27fb4e33425a92644aa805209bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30672c420ee19faa1acc15ecc84ae8d17c309e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30672c420ee19faa1acc15ecc84ae8d17c309e95", "html_url": "https://github.com/rust-lang/rust/commit/30672c420ee19faa1acc15ecc84ae8d17c309e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30672c420ee19faa1acc15ecc84ae8d17c309e95/comments", "author": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4", "html_url": "https://github.com/rust-lang/rust/commit/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "cd9d8b058f77298fd608c14b2167189509d08ddf", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30672c420ee19faa1acc15ecc84ae8d17c309e95/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30672c420ee19faa1acc15ecc84ae8d17c309e95/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=30672c420ee19faa1acc15ecc84ae8d17c309e95", "patch": "@@ -108,14 +108,17 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 match name_kind {\n                     Some(name_kind) => highlight_name(db, name_kind),\n                     None => name.syntax().parent().map_or(\"function\", |x| match x.kind() {\n-                        TYPE_PARAM | STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n+                        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n+                        TYPE_PARAM => \"type.param\",\n                         RECORD_FIELD_DEF => \"field\",\n                         _ => \"function\",\n                     }),\n                 }\n             }\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n-            LIFETIME => \"parameter\",\n+            INT_NUMBER | FLOAT_NUMBER => \"literal.numeric\",\n+            BYTE => \"literal.byte\",\n+            CHAR => \"literal.char\",\n+            LIFETIME => \"lifetime\",\n             T![unsafe] => \"keyword.unsafe\",\n             k if is_control_keyword(k) => \"keyword.control\",\n             k if k.is_keyword() => \"keyword\",\n@@ -215,17 +218,18 @@ fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n         Field(_) => \"field\",\n         AssocItem(hir::AssocItem::Function(_)) => \"function\",\n         AssocItem(hir::AssocItem::Const(_)) => \"constant\",\n-        AssocItem(hir::AssocItem::TypeAlias(_)) => \"type\",\n+        AssocItem(hir::AssocItem::TypeAlias(_)) => \"type.alias\",\n         Def(hir::ModuleDef::Module(_)) => \"module\",\n         Def(hir::ModuleDef::Function(_)) => \"function\",\n         Def(hir::ModuleDef::Adt(_)) => \"type\",\n         Def(hir::ModuleDef::EnumVariant(_)) => \"constant\",\n         Def(hir::ModuleDef::Const(_)) => \"constant\",\n         Def(hir::ModuleDef::Static(_)) => \"constant\",\n-        Def(hir::ModuleDef::Trait(_)) => \"type\",\n-        Def(hir::ModuleDef::TypeAlias(_)) => \"type\",\n-        Def(hir::ModuleDef::BuiltinType(_)) => \"type\",\n-        SelfType(_) | TypeParam(_) => \"type\",\n+        Def(hir::ModuleDef::Trait(_)) => \"type.trait\",\n+        Def(hir::ModuleDef::TypeAlias(_)) => \"type.alias\",\n+        Def(hir::ModuleDef::BuiltinType(_)) => \"type.builtin\",\n+        SelfType(_) => \"type.self\",\n+        TypeParam(_) => \"type.param\",\n         Local(local) => {\n             if local.is_mut(db) {\n                 \"variable.mut\""}]}