{"sha": "4e8401af4128ee533f82fe52cf4afb1ebc91603a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODQwMWFmNDEyOGVlNTMzZjgyZmU1MmNmNGFmYjFlYmM5MTYwM2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-04T14:38:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-04T14:38:19Z"}, "message": "Merge #6467\n\n6467: Don't stack overflow on circular modules r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c1843c7a793f81c06fad8ceb8bfdbf908a727647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1843c7a793f81c06fad8ceb8bfdbf908a727647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e8401af4128ee533f82fe52cf4afb1ebc91603a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJforzbCRBK7hj4Ov3rIwAAdHIIAKx3Nw/bJsI2P2hsR9uT31Qy\np7IO0BglvVX1D4NjhGBzub3jAlkoxJjj3dBs0lJZSCn0x7R8/oXE2fgM6biq78aY\nQmH0eiS9IRvqmtjzngQ4EJGWv++q9kNRPtSsz8V8XdlK8UjIfnPS2VfGES8HSFrH\nn/yAK8R6dTa3YK4+WT6DZgced0tgDYF3XBcnM6SNch7XW258tM/MuG62o/xEK/IO\n2xy5idXh/SctmnP0vuKcmKD/HV3NHAI8zzJNvPDBMk84d3uURs9d507d2NOU8fPo\neA9xRtWbXJmgW2HFzVpTmnN8MRLFZW5pobwL4rPs0syHvzJvmpd9o42rR/FoVxs=\n=wHpI\n-----END PGP SIGNATURE-----\n", "payload": "tree c1843c7a793f81c06fad8ceb8bfdbf908a727647\nparent bd6eeffb2fe47b4b352d6f53e874cabfec04213c\nparent 2b108133ac35b6886c0bd2c7e7bda83e18ba3b79\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604500699 +0000\ncommitter GitHub <noreply@github.com> 1604500699 +0000\n\nMerge #6467\n\n6467: Don't stack overflow on circular modules r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8401af4128ee533f82fe52cf4afb1ebc91603a", "html_url": "https://github.com/rust-lang/rust/commit/4e8401af4128ee533f82fe52cf4afb1ebc91603a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e8401af4128ee533f82fe52cf4afb1ebc91603a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "html_url": "https://github.com/rust-lang/rust/commit/bd6eeffb2fe47b4b352d6f53e874cabfec04213c"}, {"sha": "2b108133ac35b6886c0bd2c7e7bda83e18ba3b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b108133ac35b6886c0bd2c7e7bda83e18ba3b79", "html_url": "https://github.com/rust-lang/rust/commit/2b108133ac35b6886c0bd2c7e7bda83e18ba3b79"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "386287518a54356b5b7de47f64a26df7e4cfb16b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4e8401af4128ee533f82fe52cf4afb1ebc91603a", "patch": "@@ -1116,17 +1116,20 @@ impl ModCollector<'_, '_> {\n                     &self.item_tree[module.visibility],\n                 );\n \n-                ModCollector {\n-                    def_collector: &mut *self.def_collector,\n-                    macro_depth: self.macro_depth,\n-                    module_id,\n-                    file_id: self.file_id,\n-                    item_tree: self.item_tree,\n-                    mod_dir: self.mod_dir.descend_into_definition(&module.name, path_attr),\n-                }\n-                .collect(&*items);\n-                if is_macro_use {\n-                    self.import_all_legacy_macros(module_id);\n+                if let Some(mod_dir) = self.mod_dir.descend_into_definition(&module.name, path_attr)\n+                {\n+                    ModCollector {\n+                        def_collector: &mut *self.def_collector,\n+                        macro_depth: self.macro_depth,\n+                        module_id,\n+                        file_id: self.file_id,\n+                        item_tree: self.item_tree,\n+                        mod_dir,\n+                    }\n+                    .collect(&*items);\n+                    if is_macro_use {\n+                        self.import_all_legacy_macros(module_id);\n+                    }\n                 }\n             }\n             // out of line module, resolve, parse and recurse"}, {"sha": "c0c789caef0f715d4e5f14da75fc3d7f09190ac6", "filename": "crates/hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=4e8401af4128ee533f82fe52cf4afb1ebc91603a", "patch": "@@ -2,9 +2,12 @@\n use base_db::FileId;\n use hir_expand::name::Name;\n use syntax::SmolStr;\n+use test_utils::mark;\n \n use crate::{db::DefDatabase, HirFileId};\n \n+const MOD_DEPTH_LIMIT: u32 = 32;\n+\n #[derive(Clone, Debug)]\n pub(super) struct ModDir {\n     /// `` for `mod.rs`, `lib.rs`\n@@ -14,18 +17,28 @@ pub(super) struct ModDir {\n     dir_path: DirPath,\n     /// inside `./foo.rs`, mods with `#[path]` should *not* be relative to `./foo/`\n     root_non_dir_owner: bool,\n+    depth: u32,\n }\n \n impl ModDir {\n     pub(super) fn root() -> ModDir {\n-        ModDir { dir_path: DirPath::empty(), root_non_dir_owner: false }\n+        ModDir { dir_path: DirPath::empty(), root_non_dir_owner: false, depth: 0 }\n+    }\n+    fn child(&self, dir_path: DirPath, root_non_dir_owner: bool) -> Option<ModDir> {\n+        let depth = self.depth + 1;\n+        if depth > MOD_DEPTH_LIMIT {\n+            log::error!(\"MOD_DEPTH_LIMIT exceeded\");\n+            mark::hit!(circular_mods);\n+            return None;\n+        }\n+        Some(ModDir { dir_path, root_non_dir_owner, depth })\n     }\n \n     pub(super) fn descend_into_definition(\n         &self,\n         name: &Name,\n         attr_path: Option<&SmolStr>,\n-    ) -> ModDir {\n+    ) -> Option<ModDir> {\n         let path = match attr_path.map(|it| it.as_str()) {\n             None => {\n                 let mut path = self.dir_path.clone();\n@@ -40,7 +53,7 @@ impl ModDir {\n                 DirPath::new(path)\n             }\n         };\n-        ModDir { dir_path: path, root_non_dir_owner: false }\n+        self.child(path, false)\n     }\n \n     pub(super) fn resolve_declaration(\n@@ -72,7 +85,9 @@ impl ModDir {\n                 } else {\n                     (DirPath::new(format!(\"{}/\", name)), true)\n                 };\n-                return Ok((file_id, is_mod_rs, ModDir { dir_path, root_non_dir_owner }));\n+                if let Some(mod_dir) = self.child(dir_path, root_non_dir_owner) {\n+                    return Ok((file_id, is_mod_rs, mod_dir));\n+                }\n             }\n         }\n         Err(candidate_files.remove(0))"}, {"sha": "a4d1fb8f31d922282dadcdd575b3ec75bd69db22", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=4e8401af4128ee533f82fe52cf4afb1ebc91603a", "patch": "@@ -20,9 +20,8 @@ fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n }\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let db = TestDB::with_files(ra_fixture);\n-    let krate = db.crate_graph().iter().next().unwrap();\n-    let actual = db.crate_def_map(krate).dump();\n+    let def_map = compute_crate_def_map(ra_fixture);\n+    let actual = def_map.dump();\n     expect.assert_eq(&actual);\n }\n "}, {"sha": "ba295fd9e040271644fa64ab394fb897d8c9b82b", "filename": "crates/hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8401af4128ee533f82fe52cf4afb1ebc91603a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=4e8401af4128ee533f82fe52cf4afb1ebc91603a", "patch": "@@ -771,3 +771,30 @@ struct X;\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn circular_mods() {\n+    mark::check!(circular_mods);\n+    compute_crate_def_map(\n+        r#\"\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+#[path = \"./foo.rs\"]\n+mod foo;\n+\"#,\n+    );\n+\n+    compute_crate_def_map(\n+        r#\"\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+#[path = \"./bar.rs\"]\n+mod bar;\n+//- /bar.rs\n+#[path = \"./foo.rs\"]\n+mod foo;\n+\"#,\n+    );\n+}"}]}