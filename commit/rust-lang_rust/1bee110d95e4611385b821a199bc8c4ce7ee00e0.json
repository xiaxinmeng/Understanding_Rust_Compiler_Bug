{"sha": "1bee110d95e4611385b821a199bc8c4ce7ee00e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZWUxMTBkOTVlNDYxMTM4NWI4MjFhMTk5YmM4YzRjZTdlZTAwZTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-18T14:19:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-18T14:19:33Z"}, "message": "Let codegen_get_discriminant accept CValue instead of CPlace", "tree": {"sha": "c4d519e458475f5189349323201b98a1b18df6e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d519e458475f5189349323201b98a1b18df6e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bee110d95e4611385b821a199bc8c4ce7ee00e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bee110d95e4611385b821a199bc8c4ce7ee00e0", "html_url": "https://github.com/rust-lang/rust/commit/1bee110d95e4611385b821a199bc8c4ce7ee00e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bee110d95e4611385b821a199bc8c4ce7ee00e0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b818e5e0f93e3870312aa3a780cb33ad95ad7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b818e5e0f93e3870312aa3a780cb33ad95ad7a7", "html_url": "https://github.com/rust-lang/rust/commit/5b818e5e0f93e3870312aa3a780cb33ad95ad7a7"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "8064b83d728110593737e643d9281819ebccbd52", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bee110d95e4611385b821a199bc8c4ce7ee00e0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bee110d95e4611385b821a199bc8c4ce7ee00e0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1bee110d95e4611385b821a199bc8c4ce7ee00e0", "patch": "@@ -367,10 +367,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             _ => unreachable!(\"cast adt {} -> {}\", from_ty, to_ty),\n                         }\n \n-                        // FIXME avoid forcing to stack\n-                        let place =\n-                            CPlace::for_addr(operand.force_stack(fx), operand.layout());\n-                        let discr = crate::discriminant::codegen_get_discriminant(fx, place, fx.layout_of(to_ty));\n+                        let discr = crate::discriminant::codegen_get_discriminant(fx, operand, fx.layout_of(to_ty));\n                         lval.write_cvalue(fx, discr);\n                     } else {\n                         let to_clif_ty = fx.clif_type(to_ty).unwrap();\n@@ -405,7 +402,8 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 }\n                 Rvalue::Discriminant(place) => {\n                     let place = trans_place(fx, place);\n-                    let discr = crate::discriminant::codegen_get_discriminant(fx, place, dest_layout);\n+                    let value = place.to_cvalue(fx);\n+                    let discr = crate::discriminant::codegen_get_discriminant(fx, value, dest_layout);\n                     lval.write_cvalue(fx, discr);\n                 }\n                 Rvalue::Repeat(operand, times) => {"}, {"sha": "674486076de723ed3df115091480c450e60b0b3f", "filename": "src/discriminant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bee110d95e4611385b821a199bc8c4ce7ee00e0/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bee110d95e4611385b821a199bc8c4ce7ee00e0/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=1bee110d95e4611385b821a199bc8c4ce7ee00e0", "patch": "@@ -58,10 +58,10 @@ pub fn codegen_set_discriminant<'tcx>(\n \n pub fn codegen_get_discriminant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    place: CPlace<'tcx>,\n+    value: CValue<'tcx>,\n     dest_layout: TyLayout<'tcx>,\n ) -> CValue<'tcx> {\n-    let layout = place.layout();\n+    let layout = value.layout();\n \n     if layout.abi == layout::Abi::Uninhabited {\n         return trap_unreachable_ret_value(fx, dest_layout, \"[panic] Tried to get discriminant for uninhabited type.\");\n@@ -82,7 +82,7 @@ pub fn codegen_get_discriminant<'tcx>(\n         }\n     };\n \n-    let discr = place.place_field(fx, mir::Field::new(discr_index)).to_cvalue(fx);\n+    let discr = value.value_field(fx, mir::Field::new(discr_index));\n     let discr_ty = discr.layout().ty;\n     let lldiscr = discr.load_scalar(fx);\n     match discr_kind {"}, {"sha": "580d79fb223cd8ef2910154265a7cbf1ed9c9c52", "filename": "src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bee110d95e4611385b821a199bc8c4ce7ee00e0/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bee110d95e4611385b821a199bc8c4ce7ee00e0/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=1bee110d95e4611385b821a199bc8c4ce7ee00e0", "patch": "@@ -374,10 +374,10 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n             }\n         };\n-        discriminant_value, (c val) {\n-            let pointee_layout = fx.layout_of(val.layout().ty.builtin_deref(true).unwrap().ty);\n-            let place = CPlace::for_addr(val.load_scalar(fx), pointee_layout);\n-            let discr = crate::discriminant::codegen_get_discriminant(fx, place, ret.layout());\n+        discriminant_value, (c ptr) {\n+            let pointee_layout = fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n+            let val = CValue::by_ref(ptr.load_scalar(fx), pointee_layout);\n+            let discr = crate::discriminant::codegen_get_discriminant(fx, val, ret.layout());\n             ret.write_cvalue(fx, discr);\n         };\n         size_of, <T> () {"}]}