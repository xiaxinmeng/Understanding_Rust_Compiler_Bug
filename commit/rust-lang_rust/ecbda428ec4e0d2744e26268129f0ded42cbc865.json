{"sha": "ecbda428ec4e0d2744e26268129f0ded42cbc865", "node_id": "C_kwDOAAsO6NoAKGVjYmRhNDI4ZWM0ZTBkMjc0NGUyNjI2ODEyOWYwZGVkNDJjYmM4NjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T18:13:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T18:16:11Z"}, "message": "Correct comment.", "tree": {"sha": "acaf1be9f4f63a0b9d5cbc3fdc1dde50b661a9cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acaf1be9f4f63a0b9d5cbc3fdc1dde50b661a9cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecbda428ec4e0d2744e26268129f0ded42cbc865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbda428ec4e0d2744e26268129f0ded42cbc865", "html_url": "https://github.com/rust-lang/rust/commit/ecbda428ec4e0d2744e26268129f0ded42cbc865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecbda428ec4e0d2744e26268129f0ded42cbc865/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde7bff5740134c98edfa38090dab1e7cbdc29a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde7bff5740134c98edfa38090dab1e7cbdc29a6", "html_url": "https://github.com/rust-lang/rust/commit/dde7bff5740134c98edfa38090dab1e7cbdc29a6"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "f4318044c00f3811ccf07175ee6e1efa0d46c954", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecbda428ec4e0d2744e26268129f0ded42cbc865/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbda428ec4e0d2744e26268129f0ded42cbc865/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ecbda428ec4e0d2744e26268129f0ded42cbc865", "patch": "@@ -1996,6 +1996,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n+    /// Look up the name of a definition across crates. This does not look at HIR.\n     fn opt_item_name(self, def_id: DefId) -> Option<Symbol> {\n         if let Some(cnum) = def_id.as_crate_root() {\n             Some(self.crate_name(cnum))\n@@ -2016,16 +2017,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Look up the name of a definition across crates. This does not look at HIR.\n     ///\n-    /// When possible, this function should be used for cross-crate lookups over\n-    /// [`opt_item_name`] to avoid invalidating the incremental cache. If you\n-    /// need to handle items without a name, or HIR items that will not be\n-    /// serialized cross-crate, or if you need the span of the item, use\n+    /// This method will ICE if the corresponding item does not have a name.  In these cases, use\n     /// [`opt_item_name`] instead.\n     ///\n     /// [`opt_item_name`]: Self::opt_item_name\n     pub fn item_name(self, id: DefId) -> Symbol {\n-        // Look at cross-crate items first to avoid invalidating the incremental cache\n-        // unless we have to.\n         self.opt_item_name(id).unwrap_or_else(|| {\n             bug!(\"item_name: no name for {:?}\", self.def_path(id));\n         })"}]}