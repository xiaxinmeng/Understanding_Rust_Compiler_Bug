{"sha": "467454b0d2577795a579968ebd7bfa3bf9753404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzQ1NGIwZDI1Nzc3OTVhNTc5OTY4ZWJkN2JmYTNiZjk3NTM0MDQ=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-09-25T23:55:43Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-09-26T00:14:34Z"}, "message": "Incorporate review comments.", "tree": {"sha": "524efa7f408f9fb5272f9f3d81ba52ceeb939b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524efa7f408f9fb5272f9f3d81ba52ceeb939b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467454b0d2577795a579968ebd7bfa3bf9753404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467454b0d2577795a579968ebd7bfa3bf9753404", "html_url": "https://github.com/rust-lang/rust/commit/467454b0d2577795a579968ebd7bfa3bf9753404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467454b0d2577795a579968ebd7bfa3bf9753404/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f7ace2135bccc97d6c2f9fd89eb9d8cdb03643", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f7ace2135bccc97d6c2f9fd89eb9d8cdb03643", "html_url": "https://github.com/rust-lang/rust/commit/f2f7ace2135bccc97d6c2f9fd89eb9d8cdb03643"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "0c7c387b67ea3c33aeb4791dda6a9ffd7da14351", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=467454b0d2577795a579968ebd7bfa3bf9753404", "patch": "@@ -489,7 +489,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// Cache for layouts computed from types.\n     pub layout_cache: RefCell<FnvHashMap<Ty<'tcx>, &'tcx Layout>>,\n \n-    //Used to prevent layout from recursing too deeply.\n+    /// Used to prevent layout from recursing too deeply.\n     pub layout_depth: Cell<usize>,\n \n     /// Map from function to the `#[derive]` mode that it's defining. Only used"}, {"sha": "ed945534e1e5f4014187bb4831ac33a6a97ba621", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=467454b0d2577795a579968ebd7bfa3bf9753404", "patch": "@@ -328,7 +328,6 @@ pub enum Integer {\n }\n \n impl Integer {\n-\n     pub fn size(&self) -> Size {\n         match *self {\n             I1 => Size::from_bits(1),\n@@ -350,7 +349,7 @@ impl Integer {\n     }\n \n     pub fn to_ty<'a, 'tcx>(&self, tcx: &ty::TyCtxt<'a, 'tcx, 'tcx>,\n-                       signed: bool) -> Ty<'tcx> {\n+                           signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I1, false) => tcx.types.u8,\n             (I8, false) => tcx.types.u8,\n@@ -387,7 +386,7 @@ impl Integer {\n         }\n     }\n \n-    //Find the smallest integer with the given alignment.\n+    /// Find the smallest integer with the given alignment.\n     pub fn for_abi_align(dl: &TargetDataLayout, align: Align) -> Option<Integer> {\n         let wanted = align.abi();\n         for &candidate in &[I8, I16, I32, I64] {\n@@ -1030,7 +1029,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     });\n                 }\n \n-                if def.variants.len() == 1 {\n+                if !def.is_enum() || def.variants.len() == 1 && hint == attr::ReprAny {\n                     // Struct, or union, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n \n@@ -1061,16 +1060,6 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     }\n                 }\n \n-                if def.variants.len() == 1 && hint == attr::ReprAny{\n-                    // Equivalent to a struct/tuple/newtype.\n-                    let fields = def.variants[0].fields.iter().map(|field| {\n-                        field.ty(tcx, substs).layout(infcx)\n-                    });\n-                    let mut st = Struct::new(dl, false);\n-                    st.extend(dl, fields, ty)?;\n-                    return success(Univariant { variant: st, non_zero: false });\n-                }\n-\n                 // Cache the substituted and normalized variant field types.\n                 let variants = def.variants.iter().map(|v| {\n                     v.fields.iter().map(|field| field.ty(tcx, substs)).collect::<Vec<_>>()"}, {"sha": "8c6074fdaf9aa3ccbdcde1d740934c9415e5b000", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=467454b0d2577795a579968ebd7bfa3bf9753404", "patch": "@@ -94,10 +94,10 @@ impl MaybeSizedValue {\n     }\n }\n \n-//Given an enum, struct, closure, or tuple, extracts fields.\n-//treats closures as a struct with one variant.\n-//`empty_if_no_variants` is a switch to deal with empty enums.\n-//if true, `variant_index` is disregarded and an empty Vec returned in this case.\n+/// Given an enum, struct, closure, or tuple, extracts fields.\n+/// Treats closures as a struct with one variant.\n+/// `empty_if_no_variants` is a switch to deal with empty enums.\n+/// If true, `variant_index` is disregarded and an empty Vec returned in this case.\n fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n                             variant_index: usize,\n                             empty_if_no_variants: bool) -> Vec<Ty<'tcx>> {\n@@ -156,11 +156,9 @@ pub fn finish_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         layout::CEnum { .. } | layout::General { .. }\n         | layout::UntaggedUnion { .. } | layout::RawNullablePointer { .. } => { }\n         layout::Univariant { ..}\n-        | layout::StructWrappedNullablePointer { .. }\n-        | layout::Vector { .. } => {\n+        | layout::StructWrappedNullablePointer { .. } => {\n             let (nonnull_variant, packed) = match *l {\n                 layout::Univariant { ref variant, .. } => (0, variant.packed),\n-                layout::Vector { .. } => (0, true),\n                 layout::StructWrappedNullablePointer { nndiscr, ref nonnull, .. } =>\n                     (nndiscr, nonnull.packed),\n                 _ => unreachable!()\n@@ -206,8 +204,8 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             }\n         }\n         layout::Univariant { ref variant, .. } => {\n-            //note that this case also handles empty enums.\n-            //Thus the true as the final parameter here.\n+            // Note that this case also handles empty enums.\n+            // Thus the true as the final parameter here.\n             let fields = compute_fields(cx, t, 0, true);\n             match name {\n                 None => {\n@@ -425,7 +423,7 @@ pub fn trans_case<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, value: Disr)\n             C_integral(Type::from_integer(bcx.ccx(), discr), value.0, true)\n         }\n         layout::RawNullablePointer { .. } |\n-layout::StructWrappedNullablePointer { .. } => {\n+        layout::StructWrappedNullablePointer { .. } => {\n             assert!(value == Disr(0) || value == Disr(1));\n             C_bool(bcx.ccx(), value != Disr(0))\n         }\n@@ -774,10 +772,8 @@ fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // offset of current value\n     let mut offset = 0;\n     let mut cfields = Vec::new();\n-    for (&val, target_offset) in\n-        vals.iter().zip(\n-        offset_after_field.iter().map(|i| i.bytes())\n-    ) {\n+    let target_offsets = offset_after_field.iter().map(|i| i.bytes());\n+    for (&val, target_offset) in vals.iter().zip(target_offsets) {\n         assert!(!is_undef(val));\n         cfields.push(val);\n         offset += machine::llsize_of_alloc(ccx, val_ty(val));"}, {"sha": "a441800795b96c1ab13b779464eda70c4934eab4", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=467454b0d2577795a579968ebd7bfa3bf9753404", "patch": "@@ -1293,7 +1293,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n         let adt = &self.enum_type.ty_adt_def().unwrap();\n         let substs = match self.enum_type.sty {\n             ty::TyAdt(def, ref s) if def.adt_kind() == AdtKind::Enum => s,\n-            ref t @ _ => bug!(\"{} is not an enum\", t)\n+            _ => bug!(\"{} is not an enum\", self.enum_type)\n         };\n         match *self.type_rep {\n             layout::General { ref variants, .. } => {"}, {"sha": "b74d56ce368a9cb64eddc86559f0c5fd721dc76b", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=467454b0d2577795a579968ebd7bfa3bf9753404", "patch": "@@ -733,7 +733,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n \n                 let base = match tr_lvalue.base {\n                     Base::Value(llval) => {\n-                        //Fixme: may be wrong for &*(&simd_vec as &fmt::Debug)\n+                        // FIXME: may be wrong for &*(&simd_vec as &fmt::Debug)\n                         let align = if type_is_sized(self.ccx.tcx(), ty) {\n                             type_of::align_of(self.ccx, ty)\n                         } else {"}, {"sha": "03a71827b473b8675850fc6db006326ec53cb1d4", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467454b0d2577795a579968ebd7bfa3bf9753404/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=467454b0d2577795a579968ebd7bfa3bf9753404", "patch": "@@ -301,7 +301,7 @@ impl Type {\n         }\n     }\n \n-    pub fn from_integer(cx: &CrateContext, i: layout::Integer)->Type {\n+    pub fn from_integer(cx: &CrateContext, i: layout::Integer) -> Type {\n         use rustc::ty::layout::Integer::*;\n         match i {\n             I1 => Type::i1(cx),\n@@ -312,7 +312,7 @@ impl Type {\n         }\n     }\n \n-    pub fn from_primitive(ccx: &CrateContext, p: layout::Primitive)->Type {\n+    pub fn from_primitive(ccx: &CrateContext, p: layout::Primitive) -> Type {\n         match p {\n             layout::Int(i) => Type::from_integer(ccx, i),\n             layout::F32 => Type::f32(ccx),"}]}