{"sha": "71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZWY4NDE0YmQ4NmNiZDc5YjI5ZjhiMWEwMTQ1ZGE5NmUyZjJmMDk=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-26T09:00:02Z"}, "committer": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-26T09:06:18Z"}, "message": "Add checks and tests for computing abs(offset_bytes)\n\nThe previous code paniced if offset_bytes == i64::MIN. This commit:\n  - Properly computes the absoulte value to avoid this panic\n  - Adds a test for this edge case\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "2b38328d2118540ee6bef35088a29382b4ea985c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b38328d2118540ee6bef35088a29382b4ea985c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "html_url": "https://github.com/rust-lang/rust/commit/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6367b544b781889abee296d34d2b7d353a6ae0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6367b544b781889abee296d34d2b7d353a6ae0f8", "html_url": "https://github.com/rust-lang/rust/commit/6367b544b781889abee296d34d2b7d353a6ae0f8"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "239115076bc4bf802be1e5043238a4a10d7f64cc", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "patch": "@@ -7,7 +7,7 @@ use std::convert::TryFrom;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n-    interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n+    interpret::{uabs, ConstValue, GlobalId, InterpResult, Scalar},\n     BinOp,\n };\n use rustc_middle::ty;\n@@ -438,6 +438,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         pointee_ty: Ty<'tcx>,\n         offset_count: i64,\n     ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n+        // We cannot overflow i64 as a type's size must be <= isize::MAX.\n         let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n         // The computed offset, in bytes, cannot overflow an isize.\n         let offset_bytes = offset_count\n@@ -450,7 +451,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // memory between these pointers must be accessible. Note that we do not require the\n         // pointers to be properly aligned (unlike a read/write operation).\n         let min_ptr = if offset_bytes >= 0 { ptr } else { offset_ptr };\n-        let size = offset_bytes.checked_abs().unwrap();\n+        let size: u64 = uabs(offset_bytes);\n         // This call handles checking for integer/NULL pointers.\n         self.memory.check_ptr_access_align(\n             min_ptr,"}, {"sha": "4f943ed9ad194867f4d96894b0a5d762fb0bd602", "filename": "src/test/ui/consts/offset_ub.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs?ref=71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "patch": "@@ -19,4 +19,7 @@ pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr()\n // Right now, a zero offset from null is UB\n pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) }; //~NOTE\n \n+// Make sure that we don't panic when computing abs(offset*size_of::<T>())\n+pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) }; //~NOTE\n+\n fn main() {}"}, {"sha": "e808939682f304aba924fbd59c7db8085fe2dec3", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "patch": "@@ -150,5 +150,20 @@ LL |         intrinsics::offset(self, count)\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n    | -------------------------------------------------------------------------------\n \n-error: aborting due to 10 previous errors\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         intrinsics::offset(self, count)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         unable to turn bytes into a pointer\n+   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |         inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:23:47\n+   | \n+  ::: $DIR/offset_ub.rs:23:1\n+   |\n+LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n+   | ---------------------------------------------------------------------------------------------\n+\n+error: aborting due to 11 previous errors\n "}]}