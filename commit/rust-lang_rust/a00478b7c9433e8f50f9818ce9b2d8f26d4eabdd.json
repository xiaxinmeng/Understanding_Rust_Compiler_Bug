{"sha": "a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMDQ3OGI3Yzk0MzNlOGY1MGY5ODE4Y2U5YjJkOGYyNmQ0ZWFiZGQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-11T18:21:59Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-11T18:36:37Z"}, "message": "word-count-generic now generates random words in benchmark mode.", "tree": {"sha": "584584ea71cd077a99f39af6b2f0e3f2fda49d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584584ea71cd077a99f39af6b2f0e3f2fda49d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd", "html_url": "https://github.com/rust-lang/rust/commit/a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51f259ff02b566ed5ca55b0fe76bd452fbf0400", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51f259ff02b566ed5ca55b0fe76bd452fbf0400", "html_url": "https://github.com/rust-lang/rust/commit/e51f259ff02b566ed5ca55b0fe76bd452fbf0400"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "034767a8e5f0576de763ae142944966091976322", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=a00478b7c9433e8f50f9818ce9b2d8f26d4eabdd", "patch": "@@ -30,6 +30,10 @@ import comm::recv;\n import comm::send;\n import comm::methods;\n \n+trait word_reader {\n+    fn read_word() -> option<str>;\n+}\n+\n // These used to be in task, but they disappeard.\n type joinable_task = port<()>;\n fn spawn_joinable(+f: fn~()) -> joinable_task {\n@@ -46,14 +50,21 @@ fn join(t: joinable_task) {\n     t.recv()\n }\n \n-fn map(&&filename: str, emit: map_reduce::putter<str, int>) {\n-    let f = alt io::file_reader(filename) {\n-      result::ok(f) { f }\n+impl of word_reader for io::reader {\n+    fn read_word() -> option<str> { read_word(self) }\n+}\n+\n+fn file_word_reader(filename: str) -> word_reader {\n+    alt io::file_reader(filename) {\n+      result::ok(f) { f as word_reader }\n       result::err(e) { fail #fmt(\"%?\", e) }\n-    };\n+    }\n+}\n \n+fn map(f: fn~() -> word_reader, emit: map_reduce::putter<str, int>) {\n+    let f = f();\n     loop {\n-        alt read_word(f) {\n+        alt f.read_word() {\n           some(w) { emit(w, 1); }\n           none { break; }\n         }\n@@ -230,20 +241,31 @@ mod map_reduce {\n }\n \n fn main(argv: ~[str]) {\n-    if vec::len(argv) < 2u {\n+    if vec::len(argv) < 2u && !os::getenv(\"RUST_BENCH\").is_some() {\n         let out = io::stdout();\n \n         out.write_line(#fmt[\"Usage: %s <filename> ...\", argv[0]]);\n \n-        // FIXME (#2815): run something just to make sure the code hasn't\n-        // broken yet. This is the unit test mode of this program.\n-\n         ret;\n     }\n \n+    let readers: ~[fn~() -> word_reader]  = if argv.len() >= 2 {\n+        vec::view(argv, 1u, argv.len()).map(\n+            |f| fn~() -> word_reader { file_word_reader(f) } )\n+    }\n+    else {\n+        let num_readers = 50;\n+        let words_per_reader = 400;\n+        vec::from_fn(\n+            num_readers,\n+            |_i| fn~() -> word_reader {\n+                random_word_reader(words_per_reader) as word_reader\n+            })\n+    };\n+\n     let start = time::precise_time_ns();\n \n-    map_reduce::map_reduce(map, reduce, vec::slice(argv, 1u, argv.len()));\n+    map_reduce::map_reduce(map, reduce, readers);\n     let stop = time::precise_time_ns();\n \n     let elapsed = (stop - start) / 1000000u64;\n@@ -264,5 +286,24 @@ fn read_word(r: io::reader) -> option<str> {\n     }\n     ret none;\n }\n+\n fn is_word_char(c: char) -> bool {\n-    char::is_alphabetic(c) || char::is_digit(c) || c == '_' }\n+    char::is_alphabetic(c) || char::is_digit(c) || c == '_'\n+}\n+\n+class random_word_reader: word_reader {\n+    let mut remaining: uint;\n+    let rng: rand::rng;\n+    new(count: uint) {\n+        self.remaining = count;\n+        self.rng = rand::rng();\n+    }\n+\n+    fn read_word() -> option<str> {\n+        if self.remaining > 0 {\n+            self.remaining -= 1;\n+            some(self.rng.gen_str(5))\n+        }\n+        else { none }\n+    }\n+}"}]}