{"sha": "caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZWUzYjZjMmQ5YTdkYmNmNjc4Y2MwNmQwYzE4MzJhNGJmMTliZTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T19:26:37Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:08:55Z"}, "message": "Replace some `fold` calls", "tree": {"sha": "df770a02d0474c985cfb283c4386fb3711bae80f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df770a02d0474c985cfb283c4386fb3711bae80f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "html_url": "https://github.com/rust-lang/rust/commit/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25b147e8604f62a5620a5833112e358ebeeb287", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25b147e8604f62a5620a5833112e358ebeeb287", "html_url": "https://github.com/rust-lang/rust/commit/b25b147e8604f62a5620a5833112e358ebeeb287"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "c3d9e81c3bc7964cea3c8ac6e9dbe4c8f583ac93", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "patch": "@@ -118,21 +118,10 @@ impl<'a, 'b> Canonicalizer<'a, 'b> {\n \n impl<T: HasInterner<Interner = Interner>> Canonicalized<T> {\n     pub(super) fn decanonicalize_ty(&self, ty: Ty) -> Ty {\n-        ty.fold_binders(\n-            &mut |ty, binders| {\n-                if let TyKind::BoundVar(bound) = ty.kind(&Interner) {\n-                    if bound.debruijn >= binders {\n-                        let (v, k) = self.free_vars[bound.index];\n-                        TyKind::InferenceVar(v, k).intern(&Interner)\n-                    } else {\n-                        ty\n-                    }\n-                } else {\n-                    ty\n-                }\n-            },\n-            DebruijnIndex::INNERMOST,\n-        )\n+        crate::fold_free_vars(ty, |bound, _binders| {\n+            let (v, k) = self.free_vars[bound.index];\n+            TyKind::InferenceVar(v, k).intern(&Interner)\n+        })\n     }\n \n     pub(super) fn apply_solution("}, {"sha": "60680ec86ee39a4003eada5ac7e6fedade66f911", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "patch": "@@ -302,3 +302,29 @@ pub fn dummy_usize_const() -> Const {\n     }\n     .intern(&Interner)\n }\n+\n+pub(crate) fn fold_free_vars<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n+    t: T,\n+    f: impl FnMut(BoundVar, DebruijnIndex) -> Ty,\n+) -> T::Result {\n+    use chalk_ir::{fold::Folder, Fallible};\n+    struct FreeVarFolder<F>(F);\n+    impl<'i, F: FnMut(BoundVar, DebruijnIndex) -> Ty + 'i> Folder<'i, Interner> for FreeVarFolder<F> {\n+        fn as_dyn(&mut self) -> &mut dyn Folder<'i, Interner> {\n+            self\n+        }\n+\n+        fn interner(&self) -> &'i Interner {\n+            &Interner\n+        }\n+\n+        fn fold_free_var_ty(\n+            &mut self,\n+            bound_var: BoundVar,\n+            outer_binder: DebruijnIndex,\n+        ) -> Fallible<Ty> {\n+            Ok(self.0(bound_var, outer_binder))\n+        }\n+    }\n+    t.fold_with(&mut FreeVarFolder(f), DebruijnIndex::INNERMOST).expect(\"fold failed unexpectedly\")\n+}"}, {"sha": "109157a5eb5ed84103d50c73b9b0d0f2fdd08ba3", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "patch": "@@ -1016,22 +1016,16 @@ pub(crate) fn generic_defaults_query(\n                 p.default.as_ref().map_or(TyKind::Error.intern(&Interner), |t| ctx.lower_ty(t));\n \n             // Each default can only refer to previous parameters.\n-            ty = ty.fold_binders(\n-                &mut |ty, binders| match ty.kind(&Interner) {\n-                    TyKind::BoundVar(BoundVar { debruijn, index }) if *debruijn == binders => {\n-                        if *index >= idx {\n-                            // type variable default referring to parameter coming\n-                            // after it. This is forbidden (FIXME: report\n-                            // diagnostic)\n-                            TyKind::Error.intern(&Interner)\n-                        } else {\n-                            ty\n-                        }\n-                    }\n-                    _ => ty,\n-                },\n-                DebruijnIndex::INNERMOST,\n-            );\n+            ty = crate::fold_free_vars(ty, |bound, binders| {\n+                if bound.index >= idx && bound.debruijn == DebruijnIndex::INNERMOST {\n+                    // type variable default referring to parameter coming\n+                    // after it. This is forbidden (FIXME: report\n+                    // diagnostic)\n+                    TyKind::Error.intern(&Interner)\n+                } else {\n+                    bound.shifted_in_from(binders).to_ty(&Interner)\n+                }\n+            });\n \n             crate::make_only_type_binders(idx, ty)\n         })"}, {"sha": "766880b14a44d144663d47d8140326ed80eaeffe", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=caee3b6c2d9a7dbcf678cc06d0c1832a4bf19be4", "patch": "@@ -6,7 +6,11 @@ use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n+use chalk_ir::{\n+    cast::Cast,\n+    fold::{Fold, Folder},\n+    Fallible, Mutability, UniverseIndex,\n+};\n use hir_def::{\n     lang_item::LangItemTarget, nameres::DefMap, AssocContainerId, AssocItemId, FunctionId,\n     GenericDefId, HasModule, ImplId, Lookup, ModuleId, TraitId,\n@@ -21,7 +25,7 @@ use crate::{\n     primitive::{self, FloatTy, IntTy, UintTy},\n     static_lifetime,\n     utils::all_super_traits,\n-    AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n+    AdtId, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n     InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder,\n     TyExt, TyKind, TypeWalk,\n };\n@@ -757,20 +761,13 @@ pub(crate) fn inherent_impl_substs(\n /// This replaces any 'free' Bound vars in `s` (i.e. those with indices past\n /// num_vars_to_keep) by `TyKind::Unknown`.\n fn fallback_bound_vars(s: Substitution, num_vars_to_keep: usize) -> Substitution {\n-    s.fold_binders(\n-        &mut |ty, binders| {\n-            if let TyKind::BoundVar(bound) = ty.kind(&Interner) {\n-                if bound.index >= num_vars_to_keep && bound.debruijn >= binders {\n-                    TyKind::Error.intern(&Interner)\n-                } else {\n-                    ty\n-                }\n-            } else {\n-                ty\n-            }\n-        },\n-        DebruijnIndex::INNERMOST,\n-    )\n+    crate::fold_free_vars(s, |bound, binders| {\n+        if bound.index >= num_vars_to_keep && bound.debruijn == DebruijnIndex::INNERMOST {\n+            TyKind::Error.intern(&Interner)\n+        } else {\n+            bound.shifted_in_from(binders).to_ty(&Interner)\n+        }\n+    })\n }\n \n fn transform_receiver_ty("}]}