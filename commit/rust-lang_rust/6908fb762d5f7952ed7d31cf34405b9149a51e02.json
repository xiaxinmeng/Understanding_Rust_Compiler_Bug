{"sha": "6908fb762d5f7952ed7d31cf34405b9149a51e02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MDhmYjc2MmQ1Zjc5NTJlZDdkMzFjZjM0NDA1YjkxNDlhNTFlMDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:54Z"}, "message": "Rollup merge of #48014 - Manishearth:stealing-chickens-on-the-internet, r=nikomatsakis\n\nImplement RFC 2052 (Epochs)\n\nThis adds -Zepochs and uses it for tyvar_behind_raw_pointer (#46906)\n\nWhen we move this to --epoch=XXX, we'll need to gate the 2018 epoch on nightly, but not the 2015 one. I can make these changes here itself though it's kinda pointless given that the entire flag is nightly-only.\n\nr? @nikomatsakis @aturon\n\ncc #44581 (epoch tracking)\ncc #46906 (tyvar_behind_raw_pointer)", "tree": {"sha": "cbefa7d88a4c300e8af4c0db2fc12ff882251a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbefa7d88a4c300e8af4c0db2fc12ff882251a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6908fb762d5f7952ed7d31cf34405b9149a51e02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeym/CRBK7hj4Ov3rIwAAdHIIAB3GAzXJquchaxHgtZ4xoNGi\nWLlMrniJBhqHilSScZPed4mnrDQOrHebAsePSd53EgTWyX/EqpN6x9b265JvsW+h\n1uFNdDP4xI8ADePSl9Ic/W1yvOgwD8ST6w5wcsIQagDDx2feFtRb4/p4qFse0aKa\nRL/hOyk5bt8XSpEUOUdZw7D86QLTkiSTvY9QcBikiFBzCUolZNNZB++euXrYmeTv\nJsdusQLdQfQrYBs4S5kjwNNE7FVaN0LacVbCqaEZqeONn19VjA5j2q/tLuvmXkcV\ncVly333FlfFb9MtglNnCktuow9rBUFBqogQdppLI3MD20oGJSre+ul2MvumWb2o=\n=eJn9\n-----END PGP SIGNATURE-----\n", "payload": "tree cbefa7d88a4c300e8af4c0db2fc12ff882251a2b\nparent da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f\nparent b8aa8cadd6e868e74becaffaae17b64aeb66d004\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021054 -0800\ncommitter GitHub <noreply@github.com> 1518021054 -0800\n\nRollup merge of #48014 - Manishearth:stealing-chickens-on-the-internet, r=nikomatsakis\n\nImplement RFC 2052 (Epochs)\n\nThis adds -Zepochs and uses it for tyvar_behind_raw_pointer (#46906)\n\nWhen we move this to --epoch=XXX, we'll need to gate the 2018 epoch on nightly, but not the 2015 one. I can make these changes here itself though it's kinda pointless given that the entire flag is nightly-only.\n\nr? @nikomatsakis @aturon\n\ncc #44581 (epoch tracking)\ncc #46906 (tyvar_behind_raw_pointer)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6908fb762d5f7952ed7d31cf34405b9149a51e02", "html_url": "https://github.com/rust-lang/rust/commit/6908fb762d5f7952ed7d31cf34405b9149a51e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6908fb762d5f7952ed7d31cf34405b9149a51e02/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "html_url": "https://github.com/rust-lang/rust/commit/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f"}, {"sha": "b8aa8cadd6e868e74becaffaae17b64aeb66d004", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8aa8cadd6e868e74becaffaae17b64aeb66d004", "html_url": "https://github.com/rust-lang/rust/commit/b8aa8cadd6e868e74becaffaae17b64aeb66d004"}], "stats": {"total": 165, "additions": 156, "deletions": 9}, "files": [{"sha": "a7a261950593164b3f4736bd86c8e073a722c8d5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -58,6 +58,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n #![feature(never_type)]\n+#![feature(non_exhaustive)]\n #![feature(nonzero)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]"}, {"sha": "8b9a08dda87effe890bf8e362b46a80f6ef2bb09", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -112,6 +112,31 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+/// The epoch of the compiler (RFC 2052)\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq)]\n+#[non_exhaustive]\n+pub enum Epoch {\n+    // epochs must be kept in order, newest to oldest\n+\n+    /// The 2015 epoch\n+    Epoch2015,\n+    /// The 2018 epoch\n+    Epoch2018,\n+\n+    // when adding new epochs, be sure to update:\n+    //\n+    // - the list in the `parse_epoch` static\n+    // - the match in the `parse_epoch` function\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // When -Zepoch becomes --epoch, there will\n+    // also be a check for the epoch being nightly-only\n+    // somewhere. That will need to be updated\n+    // whenever we're stabilizing/introducing a new epoch\n+    // as well as changing the default Cargo template.\n+}\n+\n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n     Assembly,\n@@ -783,11 +808,13 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n+        pub const parse_epoch: Option<&'static str> =\n+            Some(\"one of: `2015`, `2018`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto, Epoch};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -991,6 +1018,15 @@ macro_rules! options {\n             };\n             true\n         }\n+\n+        fn parse_epoch(slot: &mut Epoch, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"2015\") => *slot = Epoch::Epoch2015,\n+                Some(\"2018\") => *slot = Epoch::Epoch2018,\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1278,6 +1314,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n+    epoch: Epoch = (Epoch::Epoch2015, parse_epoch, [TRACKED],\n+        \"The epoch to build Rust with. Newer epochs may include features\n+         that require breaking changes. The default epoch is 2015 (the first\n+         epoch). Crates compiled with different epochs can be linked together.\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -2069,7 +2109,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel, Lto,\n-                OutputTypes, Externs, ErrorOutputType, Sanitizer};\n+                OutputTypes, Externs, ErrorOutputType, Sanitizer, Epoch};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n \n@@ -2131,6 +2171,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n+    impl_dep_tracking_hash_via_hash!(Epoch);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "9d7a9acc3d533bdb97375b6cc3d569a4885ce694", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -19,7 +19,7 @@ use lint;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{BorrowckMode, DebugInfoLevel, OutputType};\n+use session::config::{BorrowckMode, DebugInfoLevel, OutputType, Epoch};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -864,6 +864,11 @@ impl Session {\n     pub fn teach(&self, code: &DiagnosticId) -> bool {\n         self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n     }\n+\n+    /// Are we allowed to use features from the Rust 2018 epoch?\n+    pub fn rust_2018(&self) -> bool {\n+        self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "e8c3966f23f08c495f1721f6e4076e6ab5467a0f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -326,13 +326,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if reached_raw_pointer\n                     && !self.tcx.sess.features.borrow().arbitrary_self_types {\n                         // this case used to be allowed by the compiler,\n-                        // so we do a future-compat lint here\n+                        // so we do a future-compat lint here for the 2015 epoch\n                         // (see https://github.com/rust-lang/rust/issues/46906)\n-                        self.tcx.lint_node(\n-                            lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n-                            scope_expr_id,\n-                            span,\n-                            &format!(\"the type of this value must be known in this context\"));\n+                        if self.tcx.sess.rust_2018() {\n+                          span_err!(self.tcx.sess, span, E0908,\n+                                    \"the type of this value must be known \\\n+                                     to call a method on a raw pointer on it\");\n+                        } else {\n+                            self.tcx.lint_node(\n+                                lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n+                                scope_expr_id,\n+                                span,\n+                                &format!(\"the type of this value must be known in this context\"));\n+                        }\n                     } else {\n                         let t = self.structurally_resolved_type(span, final_ty);\n                         assert_eq!(t, self.tcx.types.err);"}, {"sha": "f59948e9fc42f5a7fd69a0852a102acc09c516bf", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -4698,6 +4698,55 @@ element type `T`. Also note that the error is conservatively reported even when\n the alignment of the zero-sized type is less than or equal to the data field's\n alignment.\n \"##,\n+\n+\n+E0908: r##\"\n+A method was called on a raw pointer whose inner type wasn't completely known.\n+\n+For example, you may have done something like:\n+\n+```compile_fail\n+# #![deny(warnings)]\n+let foo = &1;\n+let bar = foo as *const _;\n+if bar.is_null() {\n+    // ...\n+}\n+```\n+\n+Here, the type of `bar` isn't known; it could be a pointer to anything. Instead,\n+specify a type for the pointer (preferably something that makes sense for the\n+thing you're pointing to):\n+\n+```\n+let foo = &1;\n+let bar = foo as *const i32;\n+if bar.is_null() {\n+    // ...\n+}\n+```\n+\n+Even though `is_null()` exists as a method on any raw pointer, Rust shows this\n+error because  Rust allows for `self` to have arbitrary types (behind the\n+arbitrary_self_types feature flag).\n+\n+This means that someone can specify such a function:\n+\n+```ignore (cannot-doctest-feature-doesnt-exist-yet)\n+impl Foo {\n+    fn is_null(self: *const Self) -> bool {\n+        // do something else\n+    }\n+}\n+```\n+\n+and now when you call `.is_null()` on a raw pointer to `Foo`, there's ambiguity.\n+\n+Given that we don't know what type the pointer is, and there's potential\n+ambiguity for some types, we disallow calling methods on raw pointers when\n+the type is unknown.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "a71db040b50e786b791983550ba9ef7013070e87", "filename": "src/test/compile-fail/epoch-raw-pointer-method-2015.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2015.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -Zepoch=2015 -Zunstable-options\n+\n+// tests that epochs work with the tyvar warning-turned-error\n+\n+#[deny(warnings)]\n+fn main() {\n+    let x = 0;\n+    let y = &x as *const _;\n+    let _ = y.is_null();\n+    //~^ error: the type of this value must be known in this context [tyvar_behind_raw_pointer]\n+    //~^^ warning: this was previously accepted\n+}"}, {"sha": "c4815de2306e97bff524c4e60872bfa179f21e7f", "filename": "src/test/compile-fail/epoch-raw-pointer-method-2018.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6908fb762d5f7952ed7d31cf34405b9149a51e02/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2018.rs?ref=6908fb762d5f7952ed7d31cf34405b9149a51e02", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -Zepoch=2018 -Zunstable-options\n+\n+// tests that epochs work with the tyvar warning-turned-error\n+\n+#[deny(warnings)]\n+fn main() {\n+    let x = 0;\n+    let y = &x as *const _;\n+    let _ = y.is_null();\n+    //~^ error: the type of this value must be known to call a method on a raw pointer on it [E0908]\n+}"}]}