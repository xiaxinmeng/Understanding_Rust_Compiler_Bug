{"sha": "14b96659e4e9b2f31431df48f47c219957e2666a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Yjk2NjU5ZTRlOWIyZjMxNDMxZGY0OGY0N2MyMTk5NTdlMjY2NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T16:12:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T16:12:24Z"}, "message": "Auto merge of #57088 - euclio:non-camel-case-early-lint, r=estebank\n\nmake non_camel_case_types an early lint\n\nThis allows us to catch these kinds of style violations much earlier, as evidenced by the large number of tests that had to be updated for this change.", "tree": {"sha": "289cbc9d86f117c0e40af354c74145e8bed2254a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289cbc9d86f117c0e40af354c74145e8bed2254a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b96659e4e9b2f31431df48f47c219957e2666a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b96659e4e9b2f31431df48f47c219957e2666a", "html_url": "https://github.com/rust-lang/rust/commit/14b96659e4e9b2f31431df48f47c219957e2666a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b96659e4e9b2f31431df48f47c219957e2666a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a25df2e21026a3b032899e63de33b0b11aafbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a25df2e21026a3b032899e63de33b0b11aafbb", "html_url": "https://github.com/rust-lang/rust/commit/27a25df2e21026a3b032899e63de33b0b11aafbb"}, {"sha": "6474de904c1aca3a6eb131edc0e4e869ecabeb90", "url": "https://api.github.com/repos/rust-lang/rust/commits/6474de904c1aca3a6eb131edc0e4e869ecabeb90", "html_url": "https://github.com/rust-lang/rust/commit/6474de904c1aca3a6eb131edc0e4e869ecabeb90"}], "stats": {"total": 1760, "additions": 885, "deletions": 875}, "files": [{"sha": "e044bddef330793ea8a80d8cbcc9338e47c06b7e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -125,6 +125,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedDocComment,\n                        BadRepr,\n                        EllipsisInclusiveRangePatterns,\n+                       NonCamelCaseTypes,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -140,7 +141,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         UnusedAttributes: UnusedAttributes,\n         PathStatements: PathStatements,\n         UnusedResults: UnusedResults,\n-        NonCamelCaseTypes: NonCamelCaseTypes,\n         NonSnakeCase: NonSnakeCase,\n         NonUpperCaseGlobals: NonUpperCaseGlobals,\n         NonShorthandFieldPatterns: NonShorthandFieldPatterns,"}, {"sha": "fd12345d8e00e946f478c6951b1fb44213c8a579", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -13,8 +13,8 @@ use rustc::hir::def::Def;\n use rustc::hir::intravisit::FnKind;\n use rustc::ty;\n use rustc_target::spec::abi::Abi;\n-use lint::{LateContext, LintContext, LintArray};\n-use lint::{LintPass, LateLintPass};\n+use lint::{EarlyContext, LateContext, LintContext, LintArray};\n+use lint::{EarlyLintPass, LintPass, LateLintPass};\n use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;\n@@ -50,7 +50,7 @@ declare_lint! {\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n-    fn check_case(&self, cx: &LateContext, sort: &str, name: ast::Name, span: Span) {\n+    fn check_case(&self, cx: &EarlyContext, sort: &str, name: ast::Name, span: Span) {\n         fn char_has_case(c: char) -> bool {\n             c.is_lowercase() || c.is_uppercase()\n         }\n@@ -114,12 +114,12 @@ impl LintPass for NonCamelCaseTypes {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+impl EarlyLintPass for NonCamelCaseTypes {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         let has_repr_c = it.attrs\n             .iter()\n             .any(|attr| {\n-                attr::find_repr_attrs(&cx.tcx.sess.parse_sess, attr)\n+                attr::find_repr_attrs(&cx.sess.parse_sess, attr)\n                     .iter()\n                     .any(|r| r == &attr::ReprC)\n             });\n@@ -129,27 +129,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n         }\n \n         match it.node {\n-            hir::ItemKind::Ty(..) |\n-            hir::ItemKind::Enum(..) |\n-            hir::ItemKind::Struct(..) |\n-            hir::ItemKind::Union(..) => self.check_case(cx, \"type\", it.name, it.span),\n-            hir::ItemKind::Trait(..) => self.check_case(cx, \"trait\", it.name, it.span),\n+            ast::ItemKind::Ty(..) |\n+            ast::ItemKind::Enum(..) |\n+            ast::ItemKind::Struct(..) |\n+            ast::ItemKind::Union(..) => self.check_case(cx, \"type\", it.ident.name, it.span),\n+            ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", it.ident.name, it.span),\n             _ => (),\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n-        self.check_case(cx, \"variant\", v.node.name, v.span);\n+    fn check_variant(&mut self, cx: &EarlyContext, v: &ast::Variant, _: &ast::Generics) {\n+        self.check_case(cx, \"variant\", v.node.ident.name, v.span);\n     }\n \n-    fn check_generic_param(&mut self, cx: &LateContext, param: &hir::GenericParam) {\n-        match param.kind {\n-            GenericParamKind::Lifetime { .. } => {}\n-            GenericParamKind::Type { synthetic, .. } => {\n-                if synthetic.is_none() {\n-                    self.check_case(cx, \"type parameter\", param.name.ident().name, param.span);\n-                }\n-            }\n+    fn check_generic_param(&mut self, cx: &EarlyContext, param: &ast::GenericParam) {\n+        if let ast::GenericParamKind::Type { .. } = param.kind {\n+            self.check_case(cx, \"type parameter\", param.ident.name, param.ident.span);\n         }\n     }\n }"}, {"sha": "96aacd476f440976d454a3860ebef36071294465", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,17 +1,17 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/access-mode-in-closures.rs:19:15\n+  --> $DIR/access-mode-in-closures.rs:18:15\n    |\n-LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n-   |               ^^       - data moved here\n+LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+   |               ^^     - data moved here\n    |               |\n    |               cannot move out of borrowed content\n    |               help: consider removing the `*`: `s`\n    |\n note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/access-mode-in-closures.rs:19:24\n+  --> $DIR/access-mode-in-closures.rs:18:22\n    |\n-LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n-   |                        ^\n+LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+   |                      ^\n \n error: aborting due to previous error\n "}, {"sha": "6a707f5bebff6154bd5629bba6acb4689d42b966", "filename": "src/test/ui/access-mode-in-closures.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct S(Vec<isize>);\n \n-struct sty(Vec<isize> );\n-\n-fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<isize> {}\n+fn unpack<F>(_unpack: F) where F: FnOnce(&S) -> Vec<isize> {}\n \n fn main() {\n     let _foo = unpack(|s| {\n         // Test that `s` is moved here.\n-        match *s { sty(v) => v } //~ ERROR cannot move out\n+        match *s { S(v) => v } //~ ERROR cannot move out\n     });\n }"}, {"sha": "5e7f31d82af182977958dc47491705da37f56b2d", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/access-mode-in-closures.rs:19:15\n+  --> $DIR/access-mode-in-closures.rs:18:15\n    |\n-LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n-   |               ^^       - hint: to prevent move, use `ref v` or `ref mut v`\n+LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+   |               ^^     - hint: to prevent move, use `ref v` or `ref mut v`\n    |               |\n    |               cannot move out of borrowed content\n "}, {"sha": "e84a87772ae761d0401f5500e44714b29318a6c8", "filename": "src/test/ui/assign-to-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct cat {\n+struct Cat {\n   meows : usize,\n \n   how_hungry : isize,\n }\n \n-impl cat {\n+impl Cat {\n     pub fn speak(&self) { self.meows += 1; }\n }\n \n-fn cat(in_x : usize, in_y : isize) -> cat {\n-    cat {\n+fn cat(in_x : usize, in_y : isize) -> Cat {\n+    Cat {\n         meows: in_x,\n         how_hungry: in_y\n     }\n }\n \n fn main() {\n-  let nyan : cat = cat(52, 99);\n+  let nyan : Cat = cat(52, 99);\n   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "583927c6f845543892710b62132f1abdd33188c5", "filename": "src/test/ui/assign-to-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,4 +1,4 @@\n-error[E0615]: attempted to take value of method `speak` on type `cat`\n+error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:30:8\n    |\n LL |   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method"}, {"sha": "3d763c7a5849a7a0d62be940f94f55d15c5e56d8", "filename": "src/test/ui/autoderef-full-lval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,24 +10,24 @@\n \n #![feature(box_syntax)]\n \n-struct clam {\n+struct Clam {\n     x: Box<isize>,\n     y: Box<isize>,\n }\n \n-struct fish {\n+struct Fish {\n     a: Box<isize>,\n }\n \n fn main() {\n-    let a: clam = clam{x: box 1, y: box 2};\n-    let b: clam = clam{x: box 10, y: box 20};\n+    let a: Clam = Clam{x: box 1, y: box 2};\n+    let b: Clam = Clam{x: box 10, y: box 20};\n     let z: isize = a.x + b.y;\n     //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n     println!(\"{}\", z);\n     assert_eq!(z, 21);\n-    let forty: fish = fish{a: box 40};\n-    let two: fish = fish{a: box 2};\n+    let forty: Fish = Fish{a: box 40};\n+    let two: Fish = Fish{a: box 2};\n     let answer: isize = forty.a + two.a;\n     //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n     println!(\"{}\", answer);"}, {"sha": "3a364caae3437dad98a9b49cfe5c141ecdf9ec60", "filename": "src/test/ui/bad/bad-method-typaram-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,11 +12,11 @@ fn foo<T:'static>() {\n     1.bar::<T>(); //~ ERROR `T` cannot be sent between threads safely\n }\n \n-trait bar {\n+trait Bar {\n     fn bar<T:Send>(&self);\n }\n \n-impl bar for usize {\n+impl Bar for usize {\n     fn bar<T:Send>(&self) {\n     }\n }"}, {"sha": "730bcc7a529de793aac8320d667671fe130c67ef", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -16,13 +16,13 @@ impl Drop for X {\n     }\n }\n \n-enum double_option<T,U> { some2(T,U), none2 }\n+enum DoubleOption<T,U> { Some2(T,U), None2 }\n \n fn main() {\n-    let x = double_option::some2(X { x: () }, X { x: () });\n+    let x = DoubleOption::Some2(X { x: () }, X { x: () });\n     match x {\n-        double_option::some2(ref _y, _z) => { },\n+        DoubleOption::Some2(ref _y, _z) => { },\n         //~^ ERROR cannot bind by-move and by-ref in the same pattern\n-        double_option::none2 => panic!()\n+        DoubleOption::None2 => panic!()\n     }\n }"}, {"sha": "75cf6f1ed023a9e67839ccad85cafa82306b9da7", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,10 +1,10 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-3.rs:24:38\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-3.rs:24:37\n    |\n-LL |         double_option::some2(ref _y, _z) => { },\n-   |                              ------  ^^ by-move pattern here\n-   |                              |\n-   |                              both by-ref and by-move used\n+LL |         DoubleOption::Some2(ref _y, _z) => { },\n+   |                             ------  ^^ by-move pattern here\n+   |                             |\n+   |                             both by-ref and by-move used\n \n error: aborting due to previous error\n "}, {"sha": "5e1d5c32bd625808e48b724a099f49ff563e742e", "filename": "src/test/ui/blind/blind-item-block-middle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_camel_case_types)]\n+\n mod foo { pub struct bar; }\n \n fn main() {"}, {"sha": "72d4109adad1dab5a0eeb2dfa6e6b5c2997e14b6", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/blind-item-block-middle.rs:14:9\n+  --> $DIR/blind-item-block-middle.rs:16:9\n    |\n LL |     let bar = 5;\n    |         ^^^ expected integral variable, found struct `foo::bar`"}, {"sha": "6be4658252d1cc1616182904b3287ffa5b737354", "filename": "src/test/ui/block-result/block-must-not-have-result-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct r;\n+struct R;\n \n-impl Drop for r {\n+impl Drop for R {\n     fn drop(&mut self) {\n         true //~  ERROR mismatched types\n     }"}, {"sha": "5aeb5051be5e88b2ca92d1fb213629e7567bb599", "filename": "src/test/ui/bogus-tag.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n+enum Color { Rgb(isize, isize, isize), Rgba(isize, isize, isize, isize), }\n \n fn main() {\n-    let red: color = color::rgb(255, 0, 0);\n+    let red: Color = Color::Rgb(255, 0, 0);\n     match red {\n-      color::rgb(r, g, b) => { println!(\"rgb\"); }\n-      color::hsl(h, s, l) => { println!(\"hsl\"); }\n+      Color::Rgb(r, g, b) => { println!(\"rgb\"); }\n+      Color::Hsl(h, s, l) => { println!(\"hsl\"); }\n       //~^ ERROR no variant\n     }\n }"}, {"sha": "cf8281cd866f13b5e0f16669e97fb3e0a22f872c", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: no variant named `hsl` found for type `color` in the current scope\n-  --> $DIR/bogus-tag.rs:18:7\n+error[E0599]: no variant named `Hsl` found for type `Color` in the current scope\n+  --> $DIR/bogus-tag.rs:17:7\n    |\n-LL | enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n-   | ---------- variant `hsl` not found here\n+LL | enum Color { Rgb(isize, isize, isize), Rgba(isize, isize, isize, isize), }\n+   | ---------- variant `Hsl` not found here\n ...\n-LL |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n-   |       ^^^^^^^^^^^^^^^^^^^ variant not found in `color`\n+LL |       Color::Hsl(h, s, l) => { println!(\"hsl\"); }\n+   |       ^^^^^^^^^^^^^^^^^^^ variant not found in `Color`\n \n error: aborting due to previous error\n "}, {"sha": "a28024151c88f65008532f0b5bb10edf84791154", "filename": "src/test/ui/borrowck/borrowck-assign-comp.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -15,7 +15,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p` occurs here\n-LL |     p = point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+LL |     p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n ...\n LL |     *q; // stretch loan"}, {"sha": "60439ca096c68aa019945139c486f261cfb8beee", "filename": "src/test/ui/borrowck/borrowck-assign-comp.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,7 +12,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |              --- borrow of `p` occurs here\n-LL |     p = point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+LL |     p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n \n error[E0506]: cannot assign to `p.y` because it is borrowed"}, {"sha": "a28024151c88f65008532f0b5bb10edf84791154", "filename": "src/test/ui/borrowck/borrowck-assign-comp.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -15,7 +15,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p` occurs here\n-LL |     p = point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+LL |     p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n ...\n LL |     *q; // stretch loan"}, {"sha": "aefa9d80bd7ff464505b158df43661bfec6be5d0", "filename": "src/test/ui/borrowck/borrowck-assign-comp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -11,10 +11,10 @@\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-struct point { x: isize, y: isize }\n+struct Point { x: isize, y: isize }\n \n fn a() {\n-    let mut p = point {x: 3, y: 4};\n+    let mut p = Point {x: 3, y: 4};\n     let q = &p;\n \n     // This assignment is illegal because the field x is not\n@@ -29,9 +29,9 @@ fn c() {\n     // this is sort of the opposite.  We take a loan to the interior of `p`\n     // and then try to overwrite `p` as a whole.\n \n-    let mut p = point {x: 3, y: 4};\n+    let mut p = Point {x: 3, y: 4};\n     let q = &p.y;\n-    p = point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+    p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n                            //[mir]~^ ERROR cannot assign to `p` because it is borrowed\n     p.x; // silence warning\n     *q; // stretch loan\n@@ -41,7 +41,7 @@ fn d() {\n     // just for completeness's sake, the easy case, where we take the\n     // address of a subcomponent and then modify that subcomponent:\n \n-    let mut p = point {x: 3, y: 4};\n+    let mut p = Point {x: 3, y: 4};\n     let q = &p.y;\n     p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n              //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed"}, {"sha": "037d9c90c81a6ae644d3890d597457100effd418", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:32:20\n+  --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:30:20\n    |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n+LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                    |\n    |                    creates a temporary which is freed while still in use"}, {"sha": "1a3f4be11323f6e661962e1030732114b23bf869", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,27 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: borrowed value does not live long enough\n-\n-struct defer<'a> {\n+struct Defer<'a> {\n     x: &'a [&'a str],\n }\n \n-impl<'a> Drop for defer<'a> {\n+impl<'a> Drop for Defer<'a> {\n     fn drop(&mut self) {\n         unsafe {\n             println!(\"{:?}\", self.x);\n         }\n     }\n }\n \n-fn defer<'r>(x: &'r [&'r str]) -> defer<'r> {\n-    defer {\n+fn defer<'r>(x: &'r [&'r str]) -> Defer<'r> {\n+    Defer {\n         x: x\n     }\n }\n \n fn main() {\n-    let x = defer(&vec![\"Goodbye\", \"world!\"]);\n+    let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n     x.x[0];\n }"}, {"sha": "b6a98283e268d34d0b448865e3ab3a2cb4d6a20f", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:32:20\n+  --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:30:20\n    |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n+LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                    |\n    |                    temporary value does not live long enough"}, {"sha": "14a01d8efb9fd8c391e5088b6e9e333d977f6466", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n error[E0381]: use of possibly uninitialized variable: `origin`\n   --> $DIR/borrowck-init-in-fru.rs:22:5\n    |\n-LL |     origin = point {x: 10,.. origin};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`\n+LL |     origin = Point { x: 10, ..origin };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`\n \n error: aborting due to previous error\n "}, {"sha": "8bc92948b8ea5010f2192a3e5a7420ed3af78aa2", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.ast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n error[E0381]: use of possibly uninitialized variable: `origin.y`\n-  --> $DIR/borrowck-init-in-fru.rs:22:30\n+  --> $DIR/borrowck-init-in-fru.rs:22:31\n    |\n-LL |     origin = point {x: 10,.. origin};\n-   |                              ^^^^^^ use of possibly uninitialized `origin.y`\n+LL |     origin = Point { x: 10, ..origin };\n+   |                               ^^^^^^ use of possibly uninitialized `origin.y`\n \n error: aborting due to previous error\n "}, {"sha": "14a01d8efb9fd8c391e5088b6e9e333d977f6466", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n error[E0381]: use of possibly uninitialized variable: `origin`\n   --> $DIR/borrowck-init-in-fru.rs:22:5\n    |\n-LL |     origin = point {x: 10,.. origin};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`\n+LL |     origin = Point { x: 10, ..origin };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`\n \n error: aborting due to previous error\n "}, {"sha": "9b18005323bc511e448f025a8956828180a02474", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,14 +12,14 @@\n //[mir]compile-flags: -Z borrowck=mir\n \n #[derive(Clone)]\n-struct point {\n+struct Point {\n     x: isize,\n     y: isize,\n }\n \n fn main() {\n-    let mut origin: point;\n-    origin = point {x: 10,.. origin};\n+    let mut origin: Point;\n+    origin = Point { x: 10, ..origin };\n     //[ast]~^ ERROR use of possibly uninitialized variable: `origin.y` [E0381]\n     //[mir]~^^ ERROR [E0381]\n     origin.clone();"}, {"sha": "1f12caabe62f0ea3f2d8fcabf51fd0630fdcdca2", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -6,7 +6,7 @@ LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n    |               |\n    |               value moved here\n    |\n-   = note: move occurs because `x` has type `foo`, which does not implement the `Copy` trait\n+   = note: move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "a9d9816ff94b50a8b3ca6e3a9e65c10adc476d2c", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -14,20 +14,20 @@\n use std::ops::Add;\n \n #[derive(Clone)]\n-struct foo(Box<usize>);\n+struct Foo(Box<usize>);\n \n-impl Add for foo {\n-    type Output = foo;\n+impl Add for Foo {\n+    type Output = Foo;\n \n-    fn add(self, f: foo) -> foo {\n-        let foo(box i) = self;\n-        let foo(box j) = f;\n-        foo(box (i + j))\n+    fn add(self, f: Foo) -> Foo {\n+        let Foo(box i) = self;\n+        let Foo(box j) = f;\n+        Foo(box (i + j))\n     }\n }\n \n fn main() {\n-    let x = foo(box 3);\n+    let x = Foo(box 3);\n     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n     //~^ ERROR use of moved value: `x`\n }"}, {"sha": "ef077fbe6c65aaccc21e3b7658a13f51887b7d74", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -6,7 +6,7 @@ LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n    |               |\n    |               value moved here\n    |\n-   = note: move occurs because `x` has type `foo`, which does not implement the `Copy` trait\n+   = note: move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "90126159ffb9a5e97a413024c8a7c0f4c824a71d", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-loan-rcvr.rs:34:14\n+  --> $DIR/borrowck-loan-rcvr.rs:33:14\n    |\n LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n    |     - ------ ^^ mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |         p.x = 10;\n    |         - second borrow occurs due to use of `p` in closure\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-loan-rcvr.rs:45:5\n+  --> $DIR/borrowck-loan-rcvr.rs:44:5\n    |\n LL |     let l = &mut p;\n    |             ------ mutable borrow occurs here"}, {"sha": "9ca9bd4bff658d884af2f217fc12e4f1d6341382", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,23 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Point { x: isize, y: isize }\n \n-struct point { x: isize, y: isize }\n-\n-trait methods {\n+trait Methods {\n     fn impurem(&self);\n     fn blockm<F>(&self, f: F) where F: FnOnce();\n }\n \n-impl methods for point {\n+impl Methods for Point {\n     fn impurem(&self) {\n     }\n \n     fn blockm<F>(&self, f: F) where F: FnOnce() { f() }\n }\n \n fn a() {\n-    let mut p = point {x: 3, y: 4};\n+    let mut p = Point {x: 3, y: 4};\n \n     // Here: it's ok to call even though receiver is mutable, because we\n     // can loan it out.\n@@ -37,7 +36,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut p = point {x: 3, y: 4};\n+    let mut p = Point {x: 3, y: 4};\n \n     // Here I create an outstanding loan and check that we get conflicts:\n "}, {"sha": "81cb6da79cc3b67ca017205de6e15327042c62d5", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-loan-rcvr.rs:34:14\n+  --> $DIR/borrowck-loan-rcvr.rs:33:14\n    |\n LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n    |     -        ^^ mutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     })\n    |      - immutable borrow ends here\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-loan-rcvr.rs:45:5\n+  --> $DIR/borrowck-loan-rcvr.rs:44:5\n    |\n LL |     let l = &mut p;\n    |                  - mutable borrow occurs here"}, {"sha": "3235cc17201de5a40a605011e87725bfdbcb843a", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/borrowck-no-cycle-in-exchange-heap.rs:26:15\n    |\n-LL |       cycle::node(ref mut y) => {\n+LL |       Cycle::Node(ref mut y) => {\n    |                   --------- borrow of `x.0` occurs here\n LL |         y.a = x; //~ ERROR cannot move out of\n    |         ---   ^ move out of `x` occurs here"}, {"sha": "3b89dfbcab7d9d4e2aa59e62e86baee43130b4d3", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,21 +10,21 @@\n \n #![feature(box_syntax)]\n \n-struct node_ {\n-    a: Box<cycle>\n+struct Node_ {\n+    a: Box<Cycle>\n }\n \n-enum cycle {\n-    node(node_),\n-    empty\n+enum Cycle {\n+    Node(Node_),\n+    Empty,\n }\n fn main() {\n-    let mut x: Box<_> = box cycle::node(node_ {a: box cycle::empty});\n+    let mut x: Box<_> = box Cycle::Node(Node_ {a: box Cycle::Empty});\n     // Create a cycle!\n     match *x {\n-      cycle::node(ref mut y) => {\n+      Cycle::Node(ref mut y) => {\n         y.a = x; //~ ERROR cannot move out of\n       }\n-      cycle::empty => {}\n+      Cycle::Empty => {}\n     };\n }"}, {"sha": "619f1f7866b078c321f6f1b29b04abca77c407f8", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/borrowck-no-cycle-in-exchange-heap.rs:26:15\n    |\n-LL |       cycle::node(ref mut y) => {\n+LL |       Cycle::Node(ref mut y) => {\n    |                   --------- borrow of `x.0` occurs here\n LL |         y.a = x; //~ ERROR cannot move out of\n    |               ^ move out of `x` occurs here"}, {"sha": "2fff59b93fcf66723843afd1429a4af1e863ef22", "filename": "src/test/ui/class-cast-to-trait.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,18 +10,18 @@\n \n #![feature(box_syntax)]\n \n-trait noisy {\n+trait Noisy {\n   fn speak(&self);\n }\n \n-struct cat {\n+struct Cat {\n   meows : usize,\n \n   how_hungry : isize,\n   name : String,\n }\n \n-impl cat {\n+impl Cat {\n   pub fn eat(&self) -> bool {\n     if self.how_hungry > 0 {\n         println!(\"OM NOM NOM\");\n@@ -35,12 +35,12 @@ impl cat {\n   }\n }\n \n-impl noisy for cat {\n+impl Noisy for Cat {\n   fn speak(&self) { self.meow(); }\n \n }\n \n-impl cat {\n+impl Cat {\n     fn meow(&self) {\n       println!(\"Meow\");\n       self.meows += 1;\n@@ -50,15 +50,15 @@ impl cat {\n     }\n }\n \n-fn cat(in_x : usize, in_y : isize, in_name: String) -> cat {\n-    cat {\n+fn cat(in_x : usize, in_y : isize, in_name: String) -> Cat {\n+    Cat {\n         meows: in_x,\n         how_hungry: in_y,\n         name: in_name\n     }\n }\n \n fn main() {\n-  let nyan: Box<noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<noisy>;\n+  let nyan: Box<Noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<Noisy>;\n   nyan.eat(); //~ ERROR no method named `eat` found\n }"}, {"sha": "9cc84795b2bfcd71c0acc7d9ae704b7f3d5e9528", "filename": "src/test/ui/class-cast-to-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `eat` found for type `std::boxed::Box<dyn noisy>` in the current scope\n+error[E0599]: no method named `eat` found for type `std::boxed::Box<dyn Noisy>` in the current scope\n   --> $DIR/class-cast-to-trait.rs:63:8\n    |\n LL |   nyan.eat(); //~ ERROR no method named `eat` found"}, {"sha": "2fc708bd59279cec8a2347aadd004dd177f47247", "filename": "src/test/ui/class-method-missing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-method-missing.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait animal {\n+trait Animal {\n   fn eat(&self);\n }\n \n-struct cat {\n+struct Cat {\n   meows: usize,\n }\n \n-impl animal for cat {\n+impl Animal for Cat {\n     //~^ ERROR not all trait items implemented, missing: `eat`\n }\n \n-fn cat(in_x : usize) -> cat {\n-    cat {\n+fn cat(in_x : usize) -> Cat {\n+    Cat {\n         meows: in_x\n     }\n }"}, {"sha": "3f69e3b89b10dec92cec406a3a302e117a91bffa", "filename": "src/test/ui/class-method-missing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-method-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-method-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-method-missing.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `eat`\n LL |   fn eat(&self);\n    |   -------------- `eat` from trait\n ...\n-LL | impl animal for cat {\n+LL | impl Animal for Cat {\n    | ^^^^^^^^^^^^^^^^^^^ missing `eat` in implementation\n \n error: aborting due to previous error"}, {"sha": "9ee332b5eff0e98a38e7040e3845d1d7057441dc", "filename": "src/test/ui/class-missing-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-missing-self.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct cat {\n+struct Cat {\n   meows : usize,\n }\n \n-impl cat {\n+impl Cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");"}, {"sha": "c9cf52e3e18bd3a0d4e57522b1cafbcaede0d752", "filename": "src/test/ui/copy-a-resource.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n #[derive(Debug)]\n-struct foo {\n+struct Foo {\n   i: isize,\n }\n \n-impl Drop for foo {\n+impl Drop for Foo {\n     fn drop(&mut self) {}\n }\n \n-fn foo(i:isize) -> foo {\n-    foo {\n+fn foo(i:isize) -> Foo {\n+    Foo {\n         i: i\n     }\n }"}, {"sha": "36bbd5ce2a447554cd7a556a1c42ba24e076398c", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n-error[E0599]: no method named `clone` found for type `foo` in the current scope\n+error[E0599]: no method named `clone` found for type `Foo` in the current scope\n   --> $DIR/copy-a-resource.rs:28:16\n    |\n-LL | struct foo {\n+LL | struct Foo {\n    | ---------- method `clone` not found for this\n ...\n LL |     let _y = x.clone();"}, {"sha": "d0c737c05d0895bd8bee4997a6c76a00ef1a82f5", "filename": "src/test/ui/enum/enum-in-scope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fenum%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fenum%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-in-scope.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_camel_case_types)]\n+\n struct hello(isize);\n \n fn main() {"}, {"sha": "36a5ca9768db101c1b65f589cce803363b7a6941", "filename": "src/test/ui/enum/enum-in-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fenum%2Fenum-in-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fenum%2Fenum-in-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-in-scope.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0530]: let bindings cannot shadow tuple structs\n-  --> $DIR/enum-in-scope.rs:14:9\n+  --> $DIR/enum-in-scope.rs:16:9\n    |\n LL | struct hello(isize);\n    | -------------------- the tuple struct `hello` is defined here"}, {"sha": "d771103f9b334f33c2fa29a6ec694793af03fba0", "filename": "src/test/ui/error-codes/E0252.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_camel_case_types)]\n+\n use foo::baz;\n use bar::baz; //~ ERROR E0252\n "}, {"sha": "4ef6490bf051bb2abf2d3f2a6be2f7f063d5114a", "filename": "src/test/ui/error-codes/E0252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0252]: the name `baz` is defined multiple times\n-  --> $DIR/E0252.rs:12:5\n+  --> $DIR/E0252.rs:14:5\n    |\n LL | use foo::baz;\n    |     -------- previous import of the type `baz` here"}, {"sha": "31edf176f2f8ac2b1fd197d2c591ada4f07d7f80", "filename": "src/test/ui/error-codes/E0254.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n-#![allow(unused_extern_crates)]\n+#![allow(unused_extern_crates, non_camel_case_types)]\n \n extern crate alloc;\n "}, {"sha": "e69181d05d7e78a5e0dccee86c03e1bb468e7e4d", "filename": "src/test/ui/error-codes/E0440.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0440.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0440.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0440.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct f64x2(f64, f64);"}, {"sha": "c13a4bb9135ca466e9213cd8be2440dc8dc400bf", "filename": "src/test/ui/error-codes/E0440.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0440.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0440.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0440.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0440]: platform-specific intrinsic has wrong number of type parameters: found 1, expected 0\n-  --> $DIR/E0440.rs:18:5\n+  --> $DIR/E0440.rs:19:5\n    |\n LL |     fn x86_mm_movemask_pd<T>(x: f64x2) -> i32; //~ ERROR E0440\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "52f969be26d2e5dbc641a7c235a1c7840a4fc47d", "filename": "src/test/ui/error-codes/E0441.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0441.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);"}, {"sha": "3874edcc02871660f077f8423c3f02ba42a3c9d9", "filename": "src/test/ui/error-codes/E0441.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0441.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0441]: unrecognized platform-specific intrinsic function: `x86_mm_adds_ep16`\n-  --> $DIR/E0441.rs:18:5\n+  --> $DIR/E0441.rs:19:5\n    |\n LL |     fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8; //~ ERROR E0441\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "30019eb53b9207cafa47afb260f5e7cfdd210abe", "filename": "src/test/ui/error-codes/E0442.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0442.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,"}, {"sha": "d96c6ab2449335e9a2f677c2b548e63aece11e31", "filename": "src/test/ui/error-codes/E0442.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0442.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,17 +1,17 @@\n error[E0442]: intrinsic argument 1 has wrong type: found vector with length 16, expected length 8\n-  --> $DIR/E0442.rs:23:5\n+  --> $DIR/E0442.rs:24:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 2 has wrong type: found vector with length 4, expected length 8\n-  --> $DIR/E0442.rs:23:5\n+  --> $DIR/E0442.rs:24:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic return value has wrong type: found vector with length 2, expected length 8\n-  --> $DIR/E0442.rs:23:5\n+  --> $DIR/E0442.rs:24:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "aa2e1896edb740d1703e2bc4805817b492d58bb6", "filename": "src/test/ui/error-codes/E0443.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0443.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);"}, {"sha": "90910bc5d16da89fa784f5d3fd2a0e4bde9cedf9", "filename": "src/test/ui/error-codes/E0443.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0443.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0443]: intrinsic return value has wrong type: found `i64x8`, expected `i16x8` which was used for this vector type previously in this signature\n-  --> $DIR/E0443.rs:20:5\n+  --> $DIR/E0443.rs:21:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8; //~ ERROR E0443\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "88c8cb344ac9aa93512e6bdf8ea7684e4ede205d", "filename": "src/test/ui/error-codes/E0444.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0444.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct f64x2(f64, f64);"}, {"sha": "8f18a5e2de860c40d2780ec13dab2d720da6221e", "filename": "src/test/ui/error-codes/E0444.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ferror-codes%2FE0444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0444.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0444]: platform-specific intrinsic has invalid number of arguments: found 3, expected 1\n-  --> $DIR/E0444.rs:18:5\n+  --> $DIR/E0444.rs:19:5\n    |\n LL |     fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ ERROR E0444\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fca8a51f9aed90efcc3635d05e854bc56f452abb", "filename": "src/test/ui/export-tag-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport-tag-variant.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -11,7 +11,7 @@\n mod foo {\n     pub fn x() { }\n \n-    enum y { y1, }\n+    enum Y { Y1 }\n }\n \n-fn main() { let z = foo::y::y1; } //~ ERROR: enum `y` is private\n+fn main() { let z = foo::Y::Y1; } //~ ERROR: enum `Y` is private"}, {"sha": "f4de408cabc5217c372d6823dbda41627896bf05", "filename": "src/test/ui/export-tag-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fexport-tag-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fexport-tag-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport-tag-variant.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n-error[E0603]: enum `y` is private\n+error[E0603]: enum `Y` is private\n   --> $DIR/export-tag-variant.rs:17:26\n    |\n-LL | fn main() { let z = foo::y::y1; } //~ ERROR: enum `y` is private\n+LL | fn main() { let z = foo::Y::Y1; } //~ ERROR: enum `Y` is private\n    |                          ^\n \n error: aborting due to previous error"}, {"sha": "f714341225c8d880a81bc0be8bf751a4593484ef", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -11,19 +11,19 @@\n // Test that we use fully-qualified type names in error messages.\n \n mod x {\n-    pub enum foo { }\n+    pub enum Foo { }\n }\n \n mod y {\n-    pub enum foo { }\n+    pub enum Foo { }\n }\n \n-fn bar(x: x::foo) -> y::foo {\n+fn bar(x: x::Foo) -> y::Foo {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected type `y::foo`\n-    //~| found type `x::foo`\n-    //~| expected enum `y::foo`, found enum `x::foo`\n+    //~| expected type `y::Foo`\n+    //~| found type `x::Foo`\n+    //~| expected enum `y::Foo`, found enum `x::Foo`\n }\n \n fn main() {"}, {"sha": "a08488bca4dca267e7138561dc1c6068bd037649", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/fully-qualified-type-name2.rs:22:12\n    |\n LL |     return x;\n-   |            ^ expected enum `y::foo`, found enum `x::foo`\n+   |            ^ expected enum `y::Foo`, found enum `x::Foo`\n    |\n-   = note: expected type `y::foo`\n-              found type `x::foo`\n+   = note: expected type `y::Foo`\n+              found type `x::Foo`\n \n error: aborting due to previous error\n "}, {"sha": "9bb8dcdb47d7a24f46c85b95352608e35d3cc4d2", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum mlist { cons(isize, mlist), nil, }\n-//~^ ERROR recursive type `mlist` has infinite size\n+enum MList { Cons(isize, MList), Nil }\n+//~^ ERROR recursive type `MList` has infinite size\n \n-fn main() { let a = mlist::cons(10, mlist::cons(11, mlist::nil)); }\n+fn main() { let a = MList::Cons(10, MList::Cons(11, MList::Nil)); }"}, {"sha": "d33021df4c309a7636352115d43b70fdc45af29c", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,12 +1,12 @@\n-error[E0072]: recursive type `mlist` has infinite size\n+error[E0072]: recursive type `MList` has infinite size\n   --> $DIR/infinite-tag-type-recursion.rs:11:1\n    |\n-LL | enum mlist { cons(isize, mlist), nil, }\n+LL | enum MList { Cons(isize, MList), Nil }\n    | ^^^^^^^^^^               ----- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `mlist` representable\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `MList` representable\n \n error: aborting due to previous error\n "}, {"sha": "8febcd4ccf00f67c16aa74f64d747c416c54138a", "filename": "src/test/ui/infinite/infinite-vec-type-recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type x = Vec<x>;\n+type X = Vec<X>;\n //~^ ERROR cycle detected\n \n-fn main() { let b: x = Vec::new(); }\n+fn main() { let b: X = Vec::new(); }"}, {"sha": "5df371030d8eb5839371709fc4e3fee77530dd26", "filename": "src/test/ui/infinite/infinite-vec-type-recursion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,10 +1,10 @@\n-error[E0391]: cycle detected when processing `x`\n+error[E0391]: cycle detected when processing `X`\n   --> $DIR/infinite-vec-type-recursion.rs:11:14\n    |\n-LL | type x = Vec<x>;\n+LL | type X = Vec<X>;\n    |              ^\n    |\n-   = note: ...which again requires processing `x`, completing the cycle\n+   = note: ...which again requires processing `X`, completing the cycle\n \n error: aborting due to previous error\n "}, {"sha": "cb9fc8056a1869208f6294f3d00d56bc3de14cbe", "filename": "src/test/ui/intrinsic-invalid-number-of-arguments.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,6 +12,7 @@\n // This is the error E0444\n \n #![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct f64x2(f64, f64);"}, {"sha": "bee71da84be3cabcb86f8190078eaecc49cc9f20", "filename": "src/test/ui/intrinsic-invalid-number-of-arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0444]: platform-specific intrinsic has invalid number of arguments: found 3, expected 1\n-  --> $DIR/intrinsic-invalid-number-of-arguments.rs:20:5\n+  --> $DIR/intrinsic-invalid-number-of-arguments.rs:21:5\n    |\n LL |     fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ platform-specific intrinsic\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c09df2a588b2c1913438834c38e70db48fc62b79", "filename": "src/test/ui/issues/issue-12511.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-12511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-12511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12511.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait t1 : t2 {\n+trait T1 : T2 {\n //~^ ERROR cycle detected\n }\n \n-trait t2 : t1 {\n+trait T2 : T1 {\n }\n \n fn main() { }"}, {"sha": "e24434710ac1b42b1fdfaafe6d2f6ecc41d1807f", "filename": "src/test/ui/issues/issue-12511.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,15 +1,15 @@\n-error[E0391]: cycle detected when computing the supertraits of `t1`\n+error[E0391]: cycle detected when computing the supertraits of `T1`\n   --> $DIR/issue-12511.rs:11:12\n    |\n-LL | trait t1 : t2 {\n+LL | trait T1 : T2 {\n    |            ^^\n    |\n-note: ...which requires computing the supertraits of `t2`...\n+note: ...which requires computing the supertraits of `T2`...\n   --> $DIR/issue-12511.rs:15:12\n    |\n-LL | trait t2 : t1 {\n+LL | trait T2 : T1 {\n    |            ^^\n-   = note: ...which again requires computing the supertraits of `t1`, completing the cycle\n+   = note: ...which again requires computing the supertraits of `T1`, completing the cycle\n \n error: aborting due to previous error\n "}, {"sha": "e19311bd7e3e39c5904e54c0c9d30eb8a310b207", "filename": "src/test/ui/issues/issue-14541.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct vec2 { y: f32 }\n-struct vec3 { y: f32, z: f32 }\n+struct Vec2 { y: f32 }\n+struct Vec3 { y: f32, z: f32 }\n \n-fn make(v: vec2) {\n-    let vec3 { y: _, z: _ } = v;\n+fn make(v: Vec2) {\n+    let Vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n-    //~| expected type `vec2`\n-    //~| found type `vec3`\n-    //~| expected struct `vec2`, found struct `vec3`\n+    //~| expected type `Vec2`\n+    //~| found type `Vec3`\n+    //~| expected struct `Vec2`, found struct `Vec3`\n }\n \n fn main() { }"}, {"sha": "94d260538c3e6b76152c838e0c17104bf1ca54ac", "filename": "src/test/ui/issues/issue-14541.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-14541.rs:15:9\n    |\n-LL |     let vec3 { y: _, z: _ } = v;\n-   |         ^^^^^^^^^^^^^^^^^^^ expected struct `vec2`, found struct `vec3`\n+LL |     let Vec3 { y: _, z: _ } = v;\n+   |         ^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found struct `Vec3`\n    |\n-   = note: expected type `vec2`\n-              found type `vec3`\n+   = note: expected type `Vec2`\n+              found type `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "6232cfdde430572fbdc15926f3260dc0bd79fd7b", "filename": "src/test/ui/issues/issue-19707.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(dead_code)]\n \n-type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n+type Foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n \n fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n "}, {"sha": "eafda42acd3b3739b963557406b026dd0105670b", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:13:28\n    |\n-LL | type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n+LL | type Foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n    |                            ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2"}, {"sha": "b034153423b37df5166f2e7198884bb36ae1f3b7", "filename": "src/test/ui/issues/issue-2149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2149.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait vec_monad<A> {\n+trait VecMonad<A> {\n     fn bind<B, F>(&self, f: F) where F: FnMut(A) -> Vec<B>;\n }\n \n-impl<A> vec_monad<A> for Vec<A> {\n+impl<A> VecMonad<A> for Vec<A> {\n     fn bind<B, F>(&self, mut f: F) where F: FnMut(A) -> Vec<B> {\n         let mut r = panic!();\n         for elt in self { r = r + f(*elt); }"}, {"sha": "abe375d91271c986f7637eacfdb9d1587d43a7ff", "filename": "src/test/ui/issues/issue-2149.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2149.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2149.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2149.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -14,7 +14,7 @@ LL |     [\"hi\"].bind(|x| [x] );\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `bind`, perhaps you need to implement it:\n-           candidate #1: `vec_monad`\n+           candidate #1: `VecMonad`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5d23b3c6c0a86d405e6756cc3a2a6f98959331e8", "filename": "src/test/ui/issues/issue-2330.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2330.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum chan { }\n+enum Chan { }\n \n-trait channel<T> {\n+trait Channel<T> {\n     fn send(&self, v: T);\n }\n \n-// `chan` is not a trait, it's an enum\n-impl chan for isize { //~ ERROR expected trait, found enum `chan`\n+// `Chan` is not a trait, it's an enum\n+impl Chan for isize { //~ ERROR expected trait, found enum `Chan`\n     fn send(&self, v: isize) { panic!() }\n }\n "}, {"sha": "ca58b08b368946c858ccb6aa92b5b8c65edd707f", "filename": "src/test/ui/issues/issue-2330.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2330.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n-error[E0404]: expected trait, found enum `chan`\n+error[E0404]: expected trait, found enum `Chan`\n   --> $DIR/issue-2330.rs:18:6\n    |\n-LL | impl chan for isize { //~ ERROR expected trait, found enum `chan`\n+LL | impl Chan for isize { //~ ERROR expected trait, found enum `Chan`\n    |      ^^^^ not a trait\n \n error: aborting due to previous error"}, {"sha": "769e537323860f6e6c4e4623bbf3756e2536bf37", "filename": "src/test/ui/issues/issue-25396.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-25396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-25396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25396.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_camel_case_types)]\n+\n use foo::baz;\n use bar::baz; //~ ERROR the name `baz` is defined multiple times\n "}, {"sha": "2e08e7070c4a4e80a8d278b734dc1f96957fb703", "filename": "src/test/ui/issues/issue-25396.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-25396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-25396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25396.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0252]: the name `baz` is defined multiple times\n-  --> $DIR/issue-25396.rs:12:5\n+  --> $DIR/issue-25396.rs:14:5\n    |\n LL | use foo::baz;\n    |     -------- previous import of the module `baz` here\n@@ -13,7 +13,7 @@ LL | use bar::baz as other_baz; //~ ERROR the name `baz` is defined multiple tim\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `Quux` is defined multiple times\n-  --> $DIR/issue-25396.rs:15:5\n+  --> $DIR/issue-25396.rs:17:5\n    |\n LL | use foo::Quux;\n    |     --------- previous import of the trait `Quux` here\n@@ -27,7 +27,7 @@ LL | use bar::Quux as OtherQuux; //~ ERROR the name `Quux` is defined multiple t\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `blah` is defined multiple times\n-  --> $DIR/issue-25396.rs:18:5\n+  --> $DIR/issue-25396.rs:20:5\n    |\n LL | use foo::blah;\n    |     --------- previous import of the type `blah` here\n@@ -41,7 +41,7 @@ LL | use bar::blah as other_blah; //~ ERROR the name `blah` is defined multiple\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `WOMP` is defined multiple times\n-  --> $DIR/issue-25396.rs:21:5\n+  --> $DIR/issue-25396.rs:23:5\n    |\n LL | use foo::WOMP;\n    |     --------- previous import of the value `WOMP` here"}, {"sha": "58cf53cd164773b954d584405b4f9c86acfdbc9a", "filename": "src/test/ui/issues/issue-2590.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-2590.rs:22:9\n+  --> $DIR/issue-2590.rs:21:9\n    |\n LL |         self.tokens //~ ERROR cannot move out of borrowed content\n    |         ^^^^^^^^^^^ cannot move out of borrowed content"}, {"sha": "b994c3ae4eafe9969c4d2cfb07b2255c8f066442", "filename": "src/test/ui/issues/issue-2590.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,16 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-struct parser {\n+struct Parser {\n     tokens: Vec<isize> ,\n }\n \n-trait parse {\n+trait Parse {\n     fn parse(&self) -> Vec<isize> ;\n }\n \n-impl parse for parser {\n+impl Parse for Parser {\n     fn parse(&self) -> Vec<isize> {\n         self.tokens //~ ERROR cannot move out of borrowed content\n     }"}, {"sha": "db82f61f39dff48cb15d2c2e7f19238d958c41f9", "filename": "src/test/ui/issues/issue-2590.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2590.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2590.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-2590.rs:22:9\n+  --> $DIR/issue-2590.rs:21:9\n    |\n LL |         self.tokens //~ ERROR cannot move out of borrowed content\n    |         ^^^^ cannot move out of borrowed content"}, {"sha": "6b91405d40b7b5dfe75b8ef127ec41d745442ee9", "filename": "src/test/ui/issues/issue-2718-a.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct send_packet<T> {\n+pub struct SendPacket<T> {\n     p: T\n }\n \n mod pingpong {\n-    use send_packet;\n-    pub type ping = send_packet<pong>;\n-    pub struct pong(send_packet<ping>);\n-    //~^ ERROR recursive type `pingpong::pong` has infinite size\n+    use SendPacket;\n+    pub type Ping = SendPacket<Pong>;\n+    pub struct Pong(SendPacket<Ping>);\n+    //~^ ERROR recursive type `pingpong::Pong` has infinite size\n }\n \n fn main() {}"}, {"sha": "16b863d87f18ba7e79216edc0408b3a656672393", "filename": "src/test/ui/issues/issue-2718-a.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n-error[E0072]: recursive type `pingpong::pong` has infinite size\n+error[E0072]: recursive type `pingpong::Pong` has infinite size\n   --> $DIR/issue-2718-a.rs:18:5\n    |\n-LL |     pub struct pong(send_packet<ping>);\n-   |     ^^^^^^^^^^^^^^^^-----------------^^\n+LL |     pub struct Pong(SendPacket<Ping>);\n+   |     ^^^^^^^^^^^^^^^^----------------^^\n    |     |               |\n    |     |               recursive without indirection\n    |     recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `pingpong::pong` representable\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `pingpong::Pong` representable\n \n error: aborting due to previous error\n "}, {"sha": "2eac4e67346171d575499d6839efa15224289ee1", "filename": "src/test/ui/issues/issue-2848.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2848.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)]\n+\n mod bar {\n     pub enum foo {\n         alpha,"}, {"sha": "024ae84617e359c8bbacd7532b43102a01229599", "filename": "src/test/ui/issues/issue-2848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2848.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0408]: variable `beta` is not bound in all patterns\n-  --> $DIR/issue-2848.rs:22:7\n+  --> $DIR/issue-2848.rs:24:7\n    |\n LL |       alpha | beta => {} //~  ERROR variable `beta` is not bound in all patterns\n    |       ^^^^^   ---- variable not in all patterns"}, {"sha": "01989086d4958072e96ac0a4e7b057780e036431", "filename": "src/test/ui/issues/issue-2849.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2849.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo { alpha, beta(isize) }\n+enum Foo { Alpha, Beta(isize) }\n \n fn main() {\n-    match foo::alpha {\n-      foo::alpha | foo::beta(i) => {}\n+    match Foo::Alpha {\n+      Foo::Alpha | Foo::Beta(i) => {}\n       //~^ ERROR variable `i` is not bound in all patterns\n     }\n }"}, {"sha": "e2c68ece705323d010792fc975c313f13fc4343c", "filename": "src/test/ui/issues/issue-2849.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-2849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2849.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0408]: variable `i` is not bound in all patterns\n   --> $DIR/issue-2849.rs:15:7\n    |\n-LL |       foo::alpha | foo::beta(i) => {}\n+LL |       Foo::Alpha | Foo::Beta(i) => {}\n    |       ^^^^^^^^^^             - variable not in all patterns\n    |       |\n    |       pattern doesn't bind `i`"}, {"sha": "b6039263b2f8f582a6d6f941ac75fd49d8445a2d", "filename": "src/test/ui/issues/issue-29124.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,22 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct ret;\n-struct obj;\n+struct Ret;\n+struct Obj;\n \n-impl obj {\n-    fn func() -> ret {\n-        ret\n+impl Obj {\n+    fn func() -> Ret {\n+        Ret\n     }\n }\n \n-fn func() -> ret {\n-    ret\n+fn func() -> Ret {\n+    Ret\n }\n \n fn main() {\n-    obj::func.x();\n-    //~^ ERROR no method named `x` found for type `fn() -> ret {obj::func}` in the current scope\n+    Obj::func.x();\n+    //~^ ERROR no method named `x` found for type `fn() -> Ret {Obj::func}` in the current scope\n     func.x();\n-    //~^ ERROR no method named `x` found for type `fn() -> ret {func}` in the current scope\n+    //~^ ERROR no method named `x` found for type `fn() -> Ret {func}` in the current scope\n }"}, {"sha": "3adc4234c8fa85ae2321881d2168a608d8183910", "filename": "src/test/ui/issues/issue-29124.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,12 +1,12 @@\n-error[E0599]: no method named `x` found for type `fn() -> ret {obj::func}` in the current scope\n+error[E0599]: no method named `x` found for type `fn() -> Ret {Obj::func}` in the current scope\n   --> $DIR/issue-29124.rs:25:15\n    |\n-LL |     obj::func.x();\n+LL |     Obj::func.x();\n    |               ^\n    |\n-   = note: obj::func is a function, perhaps you wish to call it\n+   = note: Obj::func is a function, perhaps you wish to call it\n \n-error[E0599]: no method named `x` found for type `fn() -> ret {func}` in the current scope\n+error[E0599]: no method named `x` found for type `fn() -> Ret {func}` in the current scope\n   --> $DIR/issue-29124.rs:27:10\n    |\n LL |     func.x();"}, {"sha": "f06dbe8b3424a291eb27034dc32539babd8938e9", "filename": "src/test/ui/issues/issue-3008-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo { foo_(bar) }\n-struct bar { x: bar }\n+enum Foo { Foo_(Bar) }\n+struct Bar { x: Bar }\n //~^ ERROR E0072\n \n fn main() {"}, {"sha": "adfce44eae6a1fa9cc0f996d7c5fe3048efa8d89", "filename": "src/test/ui/issues/issue-3008-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,12 +1,12 @@\n-error[E0072]: recursive type `bar` has infinite size\n+error[E0072]: recursive type `Bar` has infinite size\n   --> $DIR/issue-3008-2.rs:12:1\n    |\n-LL | struct bar { x: bar }\n+LL | struct Bar { x: Bar }\n    | ^^^^^^^^^^   ------ recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `bar` representable\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n \n error: aborting due to previous error\n "}, {"sha": "6c872f3563c7de9a536c68d6ce66350adb639069", "filename": "src/test/ui/issues/issue-3021-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-b.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,11 +10,11 @@\n \n fn siphash(k0 : u64) {\n \n-    struct siphash {\n+    struct SipHash {\n         v0: u64,\n     }\n \n-    impl siphash {\n+    impl SipHash {\n         pub fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n         }"}, {"sha": "a79cae16c1d00db742f16b550acf270524f49104", "filename": "src/test/ui/issues/issue-3021-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,7 +10,7 @@\n \n fn siphash<T>() {\n \n-    trait t {\n+    trait U {\n         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n         //~^ ERROR can't use type parameters from outer function\n     }"}, {"sha": "ef20c8cf5c2eb7f1bd56bbed6c69a4845c272975", "filename": "src/test/ui/issues/issue-3021-d.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-d.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait siphash {\n+trait SipHash {\n     fn result(&self) -> u64;\n     fn reset(&self);\n }\n@@ -26,7 +26,7 @@ fn siphash(k0 : u64, k1 : u64) {\n         return v0 ^ v1;\n     }\n \n-   impl siphash for SipState {\n+   impl SipHash for SipState {\n         fn reset(&self) {\n             self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n             self.v1 = k1 ^ 0x646f72616e646f6d; //~ ERROR can't capture dynamic environment"}, {"sha": "cdd410a3e02f2608ab2c60f151f5db8ab8d226d5", "filename": "src/test/ui/issues/issue-3038.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3038.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,23 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum f { g(isize, isize) }\n+enum F { G(isize, isize) }\n \n-enum h { i(j, k) }\n+enum H { I(J, K) }\n \n-enum j { l(isize, isize) }\n-enum k { m(isize, isize) }\n+enum J { L(isize, isize) }\n+enum K { M(isize, isize) }\n \n fn main()\n {\n \n-    let _z = match f::g(1, 2) {\n-      f::g(x, x) => { println!(\"{}\", x + x); }\n+    let _z = match F::G(1, 2) {\n+      F::G(x, x) => { println!(\"{}\", x + x); }\n       //~^ ERROR identifier `x` is bound more than once in the same pattern\n     };\n \n-    let _z = match h::i(j::l(1, 2), k::m(3, 4)) {\n-      h::i(j::l(x, _), k::m(_, x))\n+    let _z = match H::I(J::L(1, 2), K::M(3, 4)) {\n+      H::I(J::L(x, _), K::M(_, x))\n       //~^ ERROR identifier `x` is bound more than once in the same pattern\n         => { println!(\"{}\", x + x); }\n     };"}, {"sha": "3da3031d645838492b8479ef3d76a3415ab01249", "filename": "src/test/ui/issues/issue-3038.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3038.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n error[E0416]: identifier `x` is bound more than once in the same pattern\n   --> $DIR/issue-3038.rs:22:15\n    |\n-LL |       f::g(x, x) => { println!(\"{}\", x + x); }\n+LL |       F::G(x, x) => { println!(\"{}\", x + x); }\n    |               ^ used in a pattern more than once\n \n error[E0416]: identifier `x` is bound more than once in the same pattern\n   --> $DIR/issue-3038.rs:27:32\n    |\n-LL |       h::i(j::l(x, _), k::m(_, x))\n+LL |       H::I(J::L(x, _), K::M(_, x))\n    |                                ^ used in a pattern more than once\n \n error[E0416]: identifier `x` is bound more than once in the same pattern"}, {"sha": "322210c5b40c12b381cabcc0ee22a2c47ec8c89c", "filename": "src/test/ui/issues/issue-3080.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct x(());\n-impl x {\n+struct X(());\n+impl X {\n     pub unsafe fn with(&self) { }\n }\n \n fn main() {\n-    x(()).with(); //~ ERROR requires unsafe function or block\n+    X(()).with(); //~ ERROR requires unsafe function or block\n }"}, {"sha": "72ce37d8b4afd640fc701eba8293821c35750fcf", "filename": "src/test/ui/issues/issue-3080.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-3080.rs:17:5\n    |\n-LL |     x(()).with(); //~ ERROR requires unsafe function or block\n+LL |     X(()).with(); //~ ERROR requires unsafe function or block\n    |     ^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior"}, {"sha": "c1e7c8729e7dbe564fd777342ff235f256f2a800", "filename": "src/test/ui/issues/issue-3096-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum bottom { }\n+enum Bottom { }\n \n fn main() {\n-    let x = &() as *const () as *const bottom;\n+    let x = &() as *const () as *const Bottom;\n     match x { } //~ ERROR non-exhaustive patterns\n }"}, {"sha": "e582820eeda1061d8bc53c180cf6440df50796f8", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type `*const bottom` is non-empty\n+error[E0004]: non-exhaustive patterns: type `*const Bottom` is non-empty\n   --> $DIR/issue-3096-2.rs:15:11\n    |\n LL |     match x { } //~ ERROR non-exhaustive patterns"}, {"sha": "2b4adec29b5d4b99ddb6e7dcef4f7109442d448a", "filename": "src/test/ui/issues/issue-3099-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum a { b, c }\n+enum A { B, C }\n \n-enum a { d, e } //~ ERROR the name `a` is defined multiple times\n+enum A { D, E } //~ ERROR the name `A` is defined multiple times\n \n fn main() {}"}, {"sha": "c0011754a883ed292346b8e67af09919107cbb7f", "filename": "src/test/ui/issues/issue-3099-a.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n-error[E0428]: the name `a` is defined multiple times\n+error[E0428]: the name `A` is defined multiple times\n   --> $DIR/issue-3099-a.rs:13:1\n    |\n-LL | enum a { b, c }\n-   | ------ previous definition of the type `a` here\n+LL | enum A { B, C }\n+   | ------ previous definition of the type `A` here\n LL | \n-LL | enum a { d, e } //~ ERROR the name `a` is defined multiple times\n-   | ^^^^^^ `a` redefined here\n+LL | enum A { D, E } //~ ERROR the name `A` is defined multiple times\n+   | ^^^^^^ `A` redefined here\n    |\n-   = note: `a` must be defined only once in the type namespace of this module\n+   = note: `A` must be defined only once in the type namespace of this module\n \n error: aborting due to previous error\n "}, {"sha": "9e387ce24a7a21697d4983914d7483bdbfcb3d8e", "filename": "src/test/ui/issues/issue-3154.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3154.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct thing<'a, Q:'a> {\n+struct Thing<'a, Q:'a> {\n     x: &'a Q\n }\n \n-fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n-    thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the type of `x` [E0621]\n+fn thing<'a,Q>(x: &Q) -> Thing<'a,Q> {\n+    Thing { x: x } //~ ERROR explicit lifetime required in the type of `x` [E0621]\n }\n \n fn main() {"}, {"sha": "f8a575cd6ce3d5866ead12ab3dae85f2e3063b58", "filename": "src/test/ui/issues/issue-3154.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3154.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,10 +1,10 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/issue-3154.rs:16:5\n    |\n-LL | fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n+LL | fn thing<'a,Q>(x: &Q) -> Thing<'a,Q> {\n    |                   -- help: add explicit lifetime `'a` to the type of `x`: `&'a Q`\n-LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the type of `x` [E0621]\n-   |     ^^^^^^^^^^^^^ lifetime `'a` required\n+LL |     Thing { x: x } //~ ERROR explicit lifetime required in the type of `x` [E0621]\n+   |     ^^^^^^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "d451a8944b43af07dab788a3f514fddec06a300e", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n fn foo<T>() {\n-    struct foo {\n+    struct Foo {\n         x: T, //~ ERROR can't use type parameters from outer function\n     }\n \n-    impl<T> Drop for foo<T> {\n+    impl<T> Drop for Foo<T> {\n         //~^ ERROR wrong number of type arguments\n         fn drop(&mut self) {}\n     }"}, {"sha": "01d959b3aea9b4a0e264c12a3aa61324bf05d47b", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -5,14 +5,14 @@ LL | fn foo<T>() {\n    |    --- - type variable from outer function\n    |    |\n    |    try adding a local type parameter in this method instead\n-LL |     struct foo {\n+LL |     struct Foo {\n LL |         x: T, //~ ERROR can't use type parameters from outer function\n    |            ^ use of type variable from outer function\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/issue-3214.rs:16:26\n    |\n-LL |     impl<T> Drop for foo<T> {\n+LL |     impl<T> Drop for Foo<T> {\n    |                          ^ unexpected type argument\n \n error: aborting due to 2 previous errors"}, {"sha": "7dd4450235b3b614de39192e7c3046656403b3af", "filename": "src/test/ui/issues/issue-3344.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3344.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #[derive(PartialEq)]\n-struct thing(usize);\n-impl PartialOrd for thing { //~ ERROR not all trait items implemented, missing: `partial_cmp`\n-    fn le(&self, other: &thing) -> bool { true }\n-    fn ge(&self, other: &thing) -> bool { true }\n+struct Thing(usize);\n+impl PartialOrd for Thing { //~ ERROR not all trait items implemented, missing: `partial_cmp`\n+    fn le(&self, other: &Thing) -> bool { true }\n+    fn ge(&self, other: &Thing) -> bool { true }\n }\n fn main() {}"}, {"sha": "cc1c36b7e54f8a0d3993f37bcca68a9cbcc42728", "filename": "src/test/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0046]: not all trait items implemented, missing: `partial_cmp`\n   --> $DIR/issue-3344.rs:13:1\n    |\n-LL | impl PartialOrd for thing { //~ ERROR not all trait items implemented, missing: `partial_cmp`\n+LL | impl PartialOrd for Thing { //~ ERROR not all trait items implemented, missing: `partial_cmp`\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n    = note: `partial_cmp` from trait: `fn(&Self, &Rhs) -> std::option::Option<std::cmp::Ordering>`"}, {"sha": "033b3802b33d846e2318b4fad9e34e180b7cda0d", "filename": "src/test/ui/issues/issue-4366-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -18,12 +18,12 @@ mod foo {\n mod a {\n     pub mod b {\n         use foo::foo;\n-        type bar = isize;\n+        type Bar = isize;\n     }\n     pub mod sub {\n         use a::b::*;\n-        fn sub() -> bar { 1 }\n-        //~^ ERROR cannot find type `bar` in this scope\n+        fn sub() -> Bar { 1 }\n+        //~^ ERROR cannot find type `Bar` in this scope\n     }\n }\n "}, {"sha": "06b7dda0b47a3a63c09f0980af30c77bdf305a0d", "filename": "src/test/ui/issues/issue-4366-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n-error[E0412]: cannot find type `bar` in this scope\n+error[E0412]: cannot find type `Bar` in this scope\n   --> $DIR/issue-4366-2.rs:25:21\n    |\n-LL |         fn sub() -> bar { 1 }\n+LL |         fn sub() -> Bar { 1 }\n    |                     ^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-LL |         use a::b::bar;\n+LL |         use a::b::Bar;\n    |\n \n error[E0423]: expected function, found module `foo`"}, {"sha": "cdeef6d1d132f0277dffa826546c3d50f9e4a867", "filename": "src/test/ui/issues/issue-4366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fissues%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -21,7 +21,7 @@ mod foo {\n mod a {\n     pub mod b {\n         use foo::foo;\n-        type bar = isize;\n+        type Bar = isize;\n     }\n     pub mod sub {\n         use a::b::*;"}, {"sha": "c76882eabebf9abb13cf45a2578602f9eff147cf", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,3 +1,16 @@\n+warning: type `snake_case` should have a camel case name such as `SnakeCase`\n+  --> $DIR/lint-group-nonstandard-style.rs:32:9\n+   |\n+LL |         struct snake_case; //~ WARN should have a camel\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-group-nonstandard-style.rs:28:17\n+   |\n+LL |         #![warn(nonstandard_style)]\n+   |                 ^^^^^^^^^^^^^^^^^\n+   = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n+\n error: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-nonstandard-style.rs:14:1\n    |\n@@ -50,18 +63,5 @@ LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n    = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n \n-warning: type `snake_case` should have a camel case name such as `SnakeCase`\n-  --> $DIR/lint-group-nonstandard-style.rs:32:9\n-   |\n-LL |         struct snake_case; //~ WARN should have a camel\n-   |         ^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-group-nonstandard-style.rs:28:17\n-   |\n-LL |         #![warn(nonstandard_style)]\n-   |                 ^^^^^^^^^^^^^^^^^\n-   = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n-\n error: aborting due to 3 previous errors\n "}, {"sha": "40a5b6877bded0dd53444af06ffb751c68777434", "filename": "src/test/ui/liveness/liveness-use-after-send.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,18 +10,18 @@\n \n use std::marker;\n \n-fn send<T:Send + std::fmt::Debug>(ch: _chan<T>, data: T) {\n+fn send<T:Send + std::fmt::Debug>(ch: Chan<T>, data: T) {\n     println!(\"{:?}\", ch);\n     println!(\"{:?}\", data);\n     panic!();\n }\n \n #[derive(Debug)]\n-struct _chan<T>(isize, marker::PhantomData<T>);\n+struct Chan<T>(isize, marker::PhantomData<T>);\n \n // Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it\n-fn test00_start(ch: _chan<Box<isize>>, message: Box<isize>, _count: Box<isize>) {\n+fn test00_start(ch: Chan<Box<isize>>, message: Box<isize>, _count: Box<isize>) {\n     send(ch, message);\n     println!(\"{}\", message); //~ ERROR use of moved value: `message`\n }"}, {"sha": "729146d78d92dd8d4420127ab93dad0f3439089c", "filename": "src/test/ui/match/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n fn main() {\n-    enum color {\n-        rgb(usize, usize, usize),\n-        cmyk(usize, usize, usize, usize),\n-        no_color,\n+    enum Color {\n+        Rgb(usize, usize, usize),\n+        Cmyk(usize, usize, usize, usize),\n+        NoColor,\n     }\n \n-    fn foo(c: color) {\n+    fn foo(c: Color) {\n         match c {\n-          color::rgb(_, _, _) => { }\n-          color::cmyk(_, _, _, _) => { }\n-          color::no_color(_) => { }\n-          //~^ ERROR expected tuple struct/variant, found unit variant `color::no_color`\n+          Color::Rgb(_, _, _) => { }\n+          Color::Cmyk(_, _, _, _) => { }\n+          Color::NoColor(_) => { }\n+          //~^ ERROR expected tuple struct/variant, found unit variant `Color::NoColor`\n         }\n     }\n }"}, {"sha": "3500ece6c89825f5ddc83934f767956a66c3109a", "filename": "src/test/ui/match/match-pattern-field-mismatch-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected tuple struct/variant, found unit variant `color::no_color`\n+error[E0532]: expected tuple struct/variant, found unit variant `Color::NoColor`\n   --> $DIR/match-pattern-field-mismatch-2.rs:22:11\n    |\n-LL |           color::no_color(_) => { }\n-   |           ^^^^^^^^^^^^^^^ not a tuple struct/variant\n+LL |           Color::NoColor(_) => { }\n+   |           ^^^^^^^^^^^^^^ not a tuple struct/variant\n \n error: aborting due to previous error\n "}, {"sha": "d85d9288523479885dfc658e37af8d2f3d3a33a6", "filename": "src/test/ui/match/match-pattern-field-mismatch.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n fn main() {\n-    enum color {\n-        rgb(usize, usize, usize),\n-        cmyk(usize, usize, usize, usize),\n-        no_color,\n+    enum Color {\n+        Rgb(usize, usize, usize),\n+        Cmyk(usize, usize, usize, usize),\n+        NoColor,\n     }\n \n-    fn foo(c: color) {\n+    fn foo(c: Color) {\n         match c {\n-          color::rgb(_, _) => { }\n+          Color::Rgb(_, _) => { }\n           //~^ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n-          color::cmyk(_, _, _, _) => { }\n-          color::no_color => { }\n+          Color::Cmyk(_, _, _, _) => { }\n+          Color::NoColor => { }\n         }\n     }\n }"}, {"sha": "7dd94712b7abdada238fe89fd70d96ba25d7766b", "filename": "src/test/ui/match/match-pattern-field-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/match-pattern-field-mismatch.rs:20:11\n    |\n-LL |           color::rgb(_, _) => { }\n+LL |           Color::Rgb(_, _) => { }\n    |           ^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n \n error: aborting due to previous error"}, {"sha": "065811127675ce4390f8434532d046b57e7d66c7", "filename": "src/test/ui/match/match-tag-nullary.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mismatched types\n+enum A { A }\n+enum B { B }\n \n-enum a { A, }\n-enum b { B, }\n-\n-fn main() { let x: a = a::A; match x { b::B => { } } }\n+fn main() { let x: A = A::A; match x { B::B => { } } } //~ ERROR mismatched types"}, {"sha": "446f4f15ea2b70b82354c476280d9a797cf1ff35", "filename": "src/test/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-tag-nullary.rs:16:40\n+  --> $DIR/match-tag-nullary.rs:14:40\n    |\n-LL | fn main() { let x: a = a::A; match x { b::B => { } } }\n-   |                                        ^^^^ expected enum `a`, found enum `b`\n+LL | fn main() { let x: A = A::A; match x { B::B => { } } } //~ ERROR mismatched types\n+   |                                        ^^^^ expected enum `A`, found enum `B`\n    |\n-   = note: expected type `a`\n-              found type `b`\n+   = note: expected type `A`\n+              found type `B`\n \n error: aborting due to previous error\n "}, {"sha": "07b0929ddefa4010d03d994ee4bfc90b22df0ad5", "filename": "src/test/ui/match/match-tag-unary.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mismatched types\n+enum A { A(isize) }\n+enum B { B(isize) }\n \n-enum a { A(isize), }\n-enum b { B(isize), }\n-\n-fn main() { let x: a = a::A(0); match x { b::B(y) => { } } }\n+fn main() { let x: A = A::A(0); match x { B::B(y) => { } } } //~ ERROR mismatched types"}, {"sha": "3584d4044bbbc3c3c12d5887f9282a5567303cae", "filename": "src/test/ui/match/match-tag-unary.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-tag-unary.rs:16:43\n+  --> $DIR/match-tag-unary.rs:14:43\n    |\n-LL | fn main() { let x: a = a::A(0); match x { b::B(y) => { } } }\n-   |                                           ^^^^^^^ expected enum `a`, found enum `b`\n+LL | fn main() { let x: A = A::A(0); match x { B::B(y) => { } } } //~ ERROR mismatched types\n+   |                                           ^^^^^^^ expected enum `A`, found enum `B`\n    |\n-   = note: expected type `a`\n-              found type `b`\n+   = note: expected type `A`\n+              found type `B`\n \n error: aborting due to previous error\n "}, {"sha": "f505994a52edab7afbf84dd52b17533e962800fd", "filename": "src/test/ui/methods/auxiliary/ambig_impl_2_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fambig_impl_2_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fambig_impl_2_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fauxiliary%2Fambig_impl_2_lib.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait me {\n+pub trait Me {\n     fn me(&self) -> usize;\n }\n-impl me for usize { fn me(&self) -> usize { *self } }\n+impl Me for usize { fn me(&self) -> usize { *self } }"}, {"sha": "c77b589d32fe97a5c94bab6250babef9d3f75459", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we invoking `foo()` successfully resolves to the trait `foo`\n+// Test that we invoking `foo()` successfully resolves to the trait `Foo`\n // (prompting the mismatched types error) but does not influence the choice\n // of what kind of `Vec` we have, eventually leading to a type error.\n \n-trait foo {\n+trait Foo {\n     fn foo(&self) -> isize;\n }\n \n-impl foo for Vec<usize> {\n+impl Foo for Vec<usize> {\n     fn foo(&self) -> isize {1}\n }\n \n-impl foo for Vec<isize> {\n+impl Foo for Vec<isize> {\n     fn foo(&self) -> isize {2}\n }\n "}, {"sha": "24b42333c4f8ded133175bbb7b3d174c3896e16c", "filename": "src/test/ui/methods/method-ambig-two-traits-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -13,9 +13,9 @@\n \n // aux-build:ambig_impl_2_lib.rs\n extern crate ambig_impl_2_lib;\n-use ambig_impl_2_lib::me;\n-trait me2 {\n+use ambig_impl_2_lib::Me;\n+trait Me2 {\n     fn me(&self) -> usize;\n }\n-impl me2 for usize { fn me(&self) -> usize { *self } }\n+impl Me2 for usize { fn me(&self) -> usize { *self } }\n fn main() { 1_usize.me(); } //~ ERROR E0034"}, {"sha": "35e918f258dc6b56423d4522ea12caf50bb40dec", "filename": "src/test/ui/methods/method-ambig-two-traits-cross-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,12 +4,12 @@ error[E0034]: multiple applicable items in scope\n LL | fn main() { 1_usize.me(); } //~ ERROR E0034\n    |                     ^^ multiple `me` found\n    |\n-note: candidate #1 is defined in an impl of the trait `me2` for the type `usize`\n+note: candidate #1 is defined in an impl of the trait `Me2` for the type `usize`\n   --> $DIR/method-ambig-two-traits-cross-crate.rs:20:22\n    |\n-LL | impl me2 for usize { fn me(&self) -> usize { *self } }\n+LL | impl Me2 for usize { fn me(&self) -> usize { *self } }\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n-   = note: candidate #2 is defined in an impl of the trait `ambig_impl_2_lib::me` for the type `usize`\n+   = note: candidate #2 is defined in an impl of the trait `ambig_impl_2_lib::Me` for the type `usize`\n \n error: aborting due to previous error\n "}, {"sha": "4eaf3ceee0fb5f255c8bd5250664cc331feba49e", "filename": "src/test/ui/mismatched_types/issue-35030.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n+#![allow(non_camel_case_types)]\n \n trait Parser<T> {\n     fn parse(text: &str) -> Option<T>;"}, {"sha": "67c13cd60809a36a8693436a490c37ba382749f1", "filename": "src/test/ui/mut/mutable-class-fields-2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,27 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct cat {\n+struct Cat {\n   meows : usize,\n \n   how_hungry : isize,\n }\n \n-impl cat {\n+impl Cat {\n   pub fn eat(&self) {\n     self.how_hungry -= 5; //~ ERROR cannot assign\n   }\n \n }\n \n-fn cat(in_x : usize, in_y : isize) -> cat {\n-    cat {\n+fn cat(in_x : usize, in_y : isize) -> Cat {\n+    Cat {\n         meows: in_x,\n         how_hungry: in_y\n     }\n }\n \n fn main() {\n-  let nyan : cat = cat(52, 99);\n+  let nyan : Cat = cat(52, 99);\n   nyan.eat();\n }"}, {"sha": "a3ac01d3d24f9aa0883c795fd19d8558fe0e04c8", "filename": "src/test/ui/mut/mutable-class-fields.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as mutable\n   --> $DIR/mutable-class-fields.rs:28:3\n    |\n-LL |   let nyan : cat = cat(52, 99);\n+LL |   let nyan : Cat = cat(52, 99);\n    |       ---- help: consider changing this to be mutable: `mut nyan`\n LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n    |   ^^^^^^^^^^^^^^^^^^^ cannot assign"}, {"sha": "cf67f2d674d3f4d26228b3a7e9f71291f4a08420", "filename": "src/test/ui/mut/mutable-class-fields.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.ast.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to field `nyan.how_hungry` of immutable binding\n   --> $DIR/mutable-class-fields.rs:28:3\n    |\n-LL |   let nyan : cat = cat(52, 99);\n+LL |   let nyan : Cat = cat(52, 99);\n    |       ---- help: make this binding mutable: `mut nyan`\n LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n    |   ^^^^^^^^^^^^^^^^^^^ cannot mutably borrow field of immutable binding"}, {"sha": "a3ac01d3d24f9aa0883c795fd19d8558fe0e04c8", "filename": "src/test/ui/mut/mutable-class-fields.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.mir.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as mutable\n   --> $DIR/mutable-class-fields.rs:28:3\n    |\n-LL |   let nyan : cat = cat(52, 99);\n+LL |   let nyan : Cat = cat(52, 99);\n    |       ---- help: consider changing this to be mutable: `mut nyan`\n LL |   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n    |   ^^^^^^^^^^^^^^^^^^^ cannot assign"}, {"sha": "03ff362aa4e03735e13ba1b5e31f2f79e427570c", "filename": "src/test/ui/mut/mutable-class-fields.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -11,20 +11,20 @@\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-struct cat {\n+struct Cat {\n   meows : usize,\n   how_hungry : isize,\n }\n \n-fn cat(in_x : usize, in_y : isize) -> cat {\n-    cat {\n+fn cat(in_x : usize, in_y : isize) -> Cat {\n+    Cat {\n         meows: in_x,\n         how_hungry: in_y\n     }\n }\n \n fn main() {\n-  let nyan : cat = cat(52, 99);\n+  let nyan : Cat = cat(52, 99);\n   nyan.how_hungry = 0; //[ast]~ ERROR cannot assign\n   //[mir]~^ ERROR cannot assign\n }"}, {"sha": "ebe6b9d20739aad9d751a667c6e2f0c35a25aa6d", "filename": "src/test/ui/nll/type-alias-free-regions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -3,30 +3,30 @@\n \n #![feature(nll)]\n \n-type a<'a> = &'a isize;\n-type b<'a> = Box<a<'a>>;\n+type A<'a> = &'a isize;\n+type B<'a> = Box<A<'a>>;\n \n-struct c<'a> {\n-    f: Box<b<'a>>\n+struct C<'a> {\n+    f: Box<B<'a>>\n }\n \n trait FromBox<'a> {\n-    fn from_box(b: Box<b>) -> Self;\n+    fn from_box(b: Box<B>) -> Self;\n }\n \n-impl<'a> FromBox<'a> for c<'a> {\n-    fn from_box(b: Box<b>) -> Self {\n-        c { f: b } //~ ERROR\n+impl<'a> FromBox<'a> for C<'a> {\n+    fn from_box(b: Box<B>) -> Self {\n+        C { f: b } //~ ERROR\n     }\n }\n \n trait FromTuple<'a> {\n-    fn from_tuple( b: (b,)) -> Self;\n+    fn from_tuple( b: (B,)) -> Self;\n }\n \n-impl<'a> FromTuple<'a> for c<'a> {\n-    fn from_tuple(b: (b,)) -> Self {\n-        c { f: Box::new(b.0) } //~ ERROR\n+impl<'a> FromTuple<'a> for C<'a> {\n+    fn from_tuple(b: (B,)) -> Self {\n+        C { f: Box::new(b.0) } //~ ERROR\n     }\n }\n "}, {"sha": "6b3bb60d51d3b39f968fe437639b7dd47b25591b", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,21 +1,21 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/type-alias-free-regions.rs:19:9\n    |\n-LL | impl<'a> FromBox<'a> for c<'a> {\n+LL | impl<'a> FromBox<'a> for C<'a> {\n    |      -- lifetime `'a` defined here\n-LL |     fn from_box(b: Box<b>) -> Self {\n+LL |     fn from_box(b: Box<B>) -> Self {\n    |                 - has type `std::boxed::Box<std::boxed::Box<&'1 isize>>`\n-LL |         c { f: b } //~ ERROR\n+LL |         C { f: b } //~ ERROR\n    |         ^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/type-alias-free-regions.rs:29:9\n    |\n-LL | impl<'a> FromTuple<'a> for c<'a> {\n+LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      -- lifetime `'a` defined here\n-LL |     fn from_tuple(b: (b,)) -> Self {\n+LL |     fn from_tuple(b: (B,)) -> Self {\n    |                   - has type `(std::boxed::Box<&'1 isize>,)`\n-LL |         c { f: Box::new(b.0) } //~ ERROR\n+LL |         C { f: Box::new(b.0) } //~ ERROR\n    |         ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n \n error: aborting due to 2 previous errors"}, {"sha": "6d09658ecc79cde8a92a512f9afb299fa6ffdec3", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -16,16 +16,16 @@ struct Port<T>(Rc<T>);\n \n fn main() {\n     #[derive(Debug)]\n-    struct foo {\n+    struct Foo {\n       _x: Port<()>,\n     }\n \n-    impl Drop for foo {\n+    impl Drop for Foo {\n         fn drop(&mut self) {}\n     }\n \n-    fn foo(x: Port<()>) -> foo {\n-        foo {\n+    fn foo(x: Port<()>) -> Foo {\n+        Foo {\n             _x: x\n         }\n     }"}, {"sha": "dc334b716a65a0758a6abcc09cc8b57113ab4314", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,10 +4,10 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n LL |     thread::spawn(move|| {\n    |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:35:19: 39:6 x:main::foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:35:19: 39:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n-   = note: required because it appears within the type `main::foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:35:19: 39:6 x:main::foo]`\n+   = note: required because it appears within the type `main::Foo`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:35:19: 39:6 x:main::Foo]`\n    = note: required by `std::thread::spawn`\n \n error: aborting due to previous error"}, {"sha": "5da80ebc23ec1b0047df0eafe47ed7199bc77b02", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match-nested.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,8 +10,8 @@\n \n #![feature(slice_patterns)]\n \n-enum t { a(u), b }\n-enum u { c, d }\n+enum T { A(U), B }\n+enum U { C, D }\n \n fn match_nested_vecs<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -> &'static str {\n     match (l1, l2) { //~ ERROR non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n@@ -23,9 +23,9 @@ fn match_nested_vecs<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -> &'s\n }\n \n fn main() {\n-    let x = t::a(u::c);\n-    match x { //~ ERROR non-exhaustive patterns: `a(c)` not covered\n-        t::a(u::d) => { panic!(\"hello\"); }\n-        t::b => { panic!(\"goodbye\"); }\n+    let x = T::A(U::C);\n+    match x { //~ ERROR non-exhaustive patterns: `A(C)` not covered\n+        T::A(U::D) => { panic!(\"hello\"); }\n+        T::B => { panic!(\"goodbye\"); }\n     }\n }"}, {"sha": "e9e2f6f012c0f4f1ebef5a54659f5ed81086a004", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,11 +4,11 @@ error[E0004]: non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n LL |     match (l1, l2) { //~ ERROR non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n \n-error[E0004]: non-exhaustive patterns: `a(c)` not covered\n+error[E0004]: non-exhaustive patterns: `A(C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:27:11\n    |\n-LL |     match x { //~ ERROR non-exhaustive patterns: `a(c)` not covered\n-   |           ^ pattern `a(c)` not covered\n+LL |     match x { //~ ERROR non-exhaustive patterns: `A(C)` not covered\n+   |           ^ pattern `A(C)` not covered\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb5adf0bead5365cb02ef35c27092ff0807ed3f6", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -11,11 +11,11 @@\n #![feature(slice_patterns)]\n #![allow(illegal_floating_point_literal_pattern)]\n \n-enum t { a, b, }\n+enum T { A, B }\n \n fn main() {\n-    let x = t::a;\n-    match x { t::b => { } } //~ ERROR non-exhaustive patterns: `a` not covered\n+    let x = T::A;\n+    match x { T::B => { } } //~ ERROR non-exhaustive patterns: `A` not covered\n     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n       true => {}\n     }\n@@ -26,18 +26,18 @@ fn main() {\n                       //  and `(_, _, 5i32..=2147483647i32)` not covered\n       (_, _, 4) => {}\n     }\n-    match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n-      (t::a, t::b) => {}\n-      (t::b, t::a) => {}\n+    match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` not covered\n+      (T::A, T::B) => {}\n+      (T::B, T::A) => {}\n     }\n-    match t::a { //~ ERROR non-exhaustive patterns: `b` not covered\n-      t::a => {}\n+    match T::A { //~ ERROR non-exhaustive patterns: `B` not covered\n+      T::A => {}\n     }\n     // This is exhaustive, though the algorithm got it wrong at one point\n-    match (t::a, t::b) {\n-      (t::a, _) => {}\n-      (_, t::a) => {}\n-      (t::b, t::b) => {}\n+    match (T::A, T::B) {\n+      (T::A, _) => {}\n+      (_, T::A) => {}\n+      (T::B, T::B) => {}\n     }\n     let vec = vec![Some(42), None, Some(21)];\n     let vec: &[Option<isize>] = &vec;"}, {"sha": "fef78ce7d3cd1ba8d018e48e9d0f4d948e564ab0", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `a` not covered\n+error[E0004]: non-exhaustive patterns: `A` not covered\n   --> $DIR/non-exhaustive-match.rs:18:11\n    |\n-LL |     match x { t::b => { } } //~ ERROR non-exhaustive patterns: `a` not covered\n-   |           ^ pattern `a` not covered\n+LL |     match x { T::B => { } } //~ ERROR non-exhaustive patterns: `A` not covered\n+   |           ^ pattern `A` not covered\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:19:11\n@@ -22,17 +22,17 @@ error[E0004]: non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)` and `(_,\n LL |     match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n    |           ^^^^^^^^^ patterns `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n \n-error[E0004]: non-exhaustive patterns: `(a, a)` not covered\n+error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n   --> $DIR/non-exhaustive-match.rs:29:11\n    |\n-LL |     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n-   |           ^^^^^^^^^^^^ pattern `(a, a)` not covered\n+LL |     match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` not covered\n+   |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n \n-error[E0004]: non-exhaustive patterns: `b` not covered\n+error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/non-exhaustive-match.rs:33:11\n    |\n-LL |     match t::a { //~ ERROR non-exhaustive patterns: `b` not covered\n-   |           ^^^^ pattern `b` not covered\n+LL |     match T::A { //~ ERROR non-exhaustive patterns: `B` not covered\n+   |           ^^^^ pattern `B` not covered\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n   --> $DIR/non-exhaustive-match.rs:44:11"}, {"sha": "3c64ec4ca14899669dc2bd445412d3ad80356edd", "filename": "src/test/ui/noncopyable-class.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,28 +12,28 @@\n // copied\n \n #[derive(Debug)]\n-struct bar {\n+struct Bar {\n   x: isize,\n }\n \n-impl Drop for bar {\n+impl Drop for Bar {\n     fn drop(&mut self) {}\n }\n \n-fn bar(x:isize) -> bar {\n-    bar {\n+fn bar(x:isize) -> Bar {\n+    Bar {\n         x: x\n     }\n }\n \n #[derive(Debug)]\n-struct foo {\n+struct Foo {\n   i: isize,\n-  j: bar,\n+  j: Bar,\n }\n \n-fn foo(i:isize) -> foo {\n-    foo {\n+fn foo(i:isize) -> Foo {\n+    Foo {\n         i: i,\n         j: bar(5)\n     }"}, {"sha": "6131ddbfcff223181cc825b7569559e2c916c08f", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n-error[E0599]: no method named `clone` found for type `foo` in the current scope\n+error[E0599]: no method named `clone` found for type `Foo` in the current scope\n   --> $DIR/noncopyable-class.rs:44:16\n    |\n-LL | struct foo {\n+LL | struct Foo {\n    | ---------- method `clone` not found for this\n ...\n LL |     let _y = x.clone(); //~ ERROR no method named `clone` found"}, {"sha": "ce290f3d276f67762c4dbdfd72cf617291b6fb60", "filename": "src/test/ui/nonscalar-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnonscalar-cast.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n #[derive(Debug)]\n-struct foo {\n+struct Foo {\n     x: isize\n }\n \n fn main() {\n-    println!(\"{}\", foo{ x: 1 } as isize); //~ non-primitive cast: `foo` as `isize` [E0605]\n+    println!(\"{}\", Foo { x: 1 } as isize); //~ non-primitive cast: `Foo` as `isize` [E0605]\n }"}, {"sha": "719cdbfaf4433f8a2a5377b572dbf835d0895ae8", "filename": "src/test/ui/nonscalar-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnonscalar-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fnonscalar-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnonscalar-cast.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,8 +1,8 @@\n-error[E0605]: non-primitive cast: `foo` as `isize`\n+error[E0605]: non-primitive cast: `Foo` as `isize`\n   --> $DIR/nonscalar-cast.rs:17:20\n    |\n-LL |     println!(\"{}\", foo{ x: 1 } as isize); //~ non-primitive cast: `foo` as `isize` [E0605]\n-   |                    ^^^^^^^^^^^^^^^^^^^^\n+LL |     println!(\"{}\", Foo { x: 1 } as isize); //~ non-primitive cast: `Foo` as `isize` [E0605]\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n "}, {"sha": "0bb308c72d6d9091fa7e680ef9571383516f1417", "filename": "src/test/ui/occurs-check-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Foccurs-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Foccurs-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-3.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types\n // From Issue #778\n-enum clam<T> { a(T), }\n-fn main() { let c; c = clam::a(c); match c { clam::a::<isize>(_) => { } } }\n+\n+enum Clam<T> { A(T) }\n+fn main() { let c; c = Clam::A(c); match c { Clam::A::<isize>(_) => { } } }\n+//~^ ERROR mismatched types"}, {"sha": "e5221ce641f77f5327170b8fba75f74b1eac86b5", "filename": "src/test/ui/occurs-check-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Foccurs-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Foccurs-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-3.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/occurs-check-3.rs:14:24\n    |\n-LL | fn main() { let c; c = clam::a(c); match c { clam::a::<isize>(_) => { } } }\n+LL | fn main() { let c; c = Clam::A(c); match c { Clam::A::<isize>(_) => { } } }\n    |                        ^^^^^^^^^^ cyclic type of infinite size\n \n error: aborting due to previous error"}, {"sha": "43d368375d510f7cc3fcba431e381125b5947401", "filename": "src/test/ui/or-pattern-mismatch.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2For-pattern-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2For-pattern-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-pattern-mismatch.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mismatched types\n+enum Blah { A(isize, isize, usize), B(isize, isize) }\n \n-enum blah { a(isize, isize, usize), b(isize, isize), }\n-\n-fn main() { match blah::a(1, 1, 2) { blah::a(_, x, y) | blah::b(x, y) => { } } }\n+fn main() { match Blah::A(1, 1, 2) { Blah::A(_, x, y) | Blah::B(x, y) => { } } }\n+//~^ ERROR mismatched types", "previous_filename": "src/test/ui/or-patter-mismatch.rs"}, {"sha": "d7bad10e253b686e2a459987594fd4a34350ce6b", "filename": "src/test/ui/or-pattern-mismatch.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2For-pattern-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2For-pattern-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-pattern-mismatch.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n-  --> $DIR/or-patter-mismatch.rs:15:68\n+  --> $DIR/or-pattern-mismatch.rs:13:68\n    |\n-LL | fn main() { match blah::a(1, 1, 2) { blah::a(_, x, y) | blah::b(x, y) => { } } }\n+LL | fn main() { match Blah::A(1, 1, 2) { Blah::A(_, x, y) | Blah::B(x, y) => { } } }\n    |                                                                    ^ expected usize, found isize\n    |\n    = note: expected type `usize`", "previous_filename": "src/test/ui/or-patter-mismatch.stderr"}, {"sha": "c3b88971155411ff07a8a2a975a62f73f3de6fcf", "filename": "src/test/ui/pattern/pat-shadow-in-nested-binding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-shadow-in-nested-binding.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)]\n struct foo(usize);\n \n fn main() {"}, {"sha": "51f2094dc19b9ed09a57917977b5369cb2b60b16", "filename": "src/test/ui/pattern/pat-shadow-in-nested-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpat-shadow-in-nested-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpat-shadow-in-nested-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-shadow-in-nested-binding.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0530]: let bindings cannot shadow tuple structs\n-  --> $DIR/pat-shadow-in-nested-binding.rs:14:10\n+  --> $DIR/pat-shadow-in-nested-binding.rs:15:10\n    |\n LL | struct foo(usize);\n    | ------------------ the tuple struct `foo` is defined here"}, {"sha": "25d34d7b3b399af69d991410271237eb00b704b0", "filename": "src/test/ui/pattern/pattern-tyvar-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum bar { t1((), Option<Vec<isize>>), t2, }\n+enum Bar { T1((), Option<Vec<isize>>), T2, }\n \n-// n.b. my change changes this error message, but I think it's right -- tjc\n-fn foo(t: bar) -> isize { match t { bar::t1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n+fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n //~^ ERROR binary operation `*` cannot be applied to\n \n fn main() { }"}, {"sha": "3544e01ef6600bb6e7eae5ee235119c72ae068f3", "filename": "src/test/ui/pattern/pattern-tyvar-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0369]: binary operation `*` cannot be applied to type `std::vec::Vec<isize>`\n-  --> $DIR/pattern-tyvar-2.rs:14:69\n+  --> $DIR/pattern-tyvar-2.rs:13:69\n    |\n-LL | fn foo(t: bar) -> isize { match t { bar::t1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n+LL | fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n    |                                                                     ^^^^^\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `std::vec::Vec<isize>`"}, {"sha": "505bacf2fee1329e6db581236849c1d5084e45ef", "filename": "src/test/ui/pattern/pattern-tyvar.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mismatched types\n+enum Bar { T1((), Option<Vec<isize>>), T2 }\n \n-enum bar { t1((), Option<Vec<isize> >), t2, }\n-\n-fn foo(t: bar) {\n+fn foo(t: Bar) {\n     match t {\n-      bar::t1(_, Some::<isize>(x)) => {\n+      Bar::T1(_, Some::<isize>(x)) => { //~ ERROR mismatched types\n         println!(\"{}\", x);\n       }\n       _ => { panic!(); }"}, {"sha": "3b98e9a52f73063f890f63ce2376d8d9c1392d3f", "filename": "src/test/ui/pattern/pattern-tyvar.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n-  --> $DIR/pattern-tyvar.rs:17:18\n+  --> $DIR/pattern-tyvar.rs:15:18\n    |\n-LL |       bar::t1(_, Some::<isize>(x)) => {\n+LL |       Bar::T1(_, Some::<isize>(x)) => { //~ ERROR mismatched types\n    |                  ^^^^^^^^^^^^^^^^ expected struct `std::vec::Vec`, found isize\n    |\n    = note: expected type `std::option::Option<std::vec::Vec<isize>>`"}, {"sha": "cee3360ae1601d4d31c0d7f932d0268cbb0eb6a9", "filename": "src/test/ui/privacy/private-method.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,28 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:method `nap` is private\n-\n mod kitties {\n-    pub struct cat {\n+    pub struct Cat {\n         meows : usize,\n \n         how_hungry : isize,\n     }\n \n-    impl cat {\n+    impl Cat {\n         fn nap(&self) {}\n     }\n \n-    pub fn cat(in_x : usize, in_y : isize) -> cat {\n-        cat {\n+    pub fn cat(in_x : usize, in_y : isize) -> Cat {\n+        Cat {\n             meows: in_x,\n             how_hungry: in_y\n         }\n     }\n }\n \n fn main() {\n-  let nyan : kitties::cat = kitties::cat(52, 99);\n-  nyan.nap();\n+  let nyan : kitties::Cat = kitties::cat(52, 99);\n+  nyan.nap(); //~ ERROR method `nap` is private\n }"}, {"sha": "06cdf1d9f076780c6d688a6f8056eff79a914744", "filename": "src/test/ui/privacy/private-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0624]: method `nap` is private\n-  --> $DIR/private-method.rs:34:8\n+  --> $DIR/private-method.rs:32:8\n    |\n-LL |   nyan.nap();\n+LL |   nyan.nap(); //~ ERROR method `nap` is private\n    |        ^^^\n \n error: aborting due to previous error"}, {"sha": "ce0d451e3f9e037f4abc1eba59f9bec3940e6695", "filename": "src/test/ui/recursion/recursive-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum list<T> { cons(T, list<T>), nil }\n-//~^ ERROR recursive type `list` has infinite size\n+enum List<T> { Cons(T, List<T>), Nil }\n+//~^ ERROR recursive type `List` has infinite size\n \n fn main() {}"}, {"sha": "f709ba6ff0a01adf84fc742545851bfc3fa4330b", "filename": "src/test/ui/recursion/recursive-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,12 +1,12 @@\n-error[E0072]: recursive type `list` has infinite size\n+error[E0072]: recursive type `List` has infinite size\n   --> $DIR/recursive-enum.rs:11:1\n    |\n-LL | enum list<T> { cons(T, list<T>), nil }\n+LL | enum List<T> { Cons(T, List<T>), Nil }\n    | ^^^^^^^^^^^^           ------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `list` representable\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `List` representable\n \n error: aborting due to previous error\n "}, {"sha": "c606d0c65cf72ca8ee705bf36a977c968a617d54", "filename": "src/test/ui/regions/regions-addr-of-self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct dog {\n+struct Dog {\n     cats_chased: usize,\n }\n \n-impl dog {\n+impl Dog {\n     pub fn chase_cat(&mut self) {\n         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n         *p += 1;\n@@ -24,8 +24,8 @@ impl dog {\n     }\n }\n \n-fn dog() -> dog {\n-    dog {\n+fn dog() -> Dog {\n+    Dog {\n         cats_chased: 0\n     }\n }"}, {"sha": "47073535eda3d77057226c31e20cb5aad3278f06", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,11 +10,11 @@\n \n use std::usize;\n \n-struct dog {\n+struct Dog {\n     food: usize,\n }\n \n-impl dog {\n+impl Dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer"}, {"sha": "b646bc8835f2dbb170e7d6742924b0ed04ea91c5", "filename": "src/test/ui/regions/regions-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,14 +12,14 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n-struct an_enum<'a>(&'a isize);\n-struct a_class<'a> { x:&'a isize }\n+struct TupleStruct<'a>(&'a isize);\n+struct Struct<'a> { x:&'a isize }\n \n-fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n+fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n     return e; //~ ERROR mismatched types\n }\n \n-fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n+fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n     return e; //~ ERROR mismatched types\n }\n "}, {"sha": "f21b2aebc20675635f73af4c1f3922525a566955", "filename": "src/test/ui/regions/regions-bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     return e; //~ ERROR mismatched types\n    |            ^ lifetime mismatch\n    |\n-   = note: expected type `an_enum<'b>`\n-              found type `an_enum<'a>`\n+   = note: expected type `TupleStruct<'b>`\n+              found type `TupleStruct<'a>`\n note: the lifetime 'a as defined on the function body at 18:10...\n   --> $DIR/regions-bounds.rs:18:10\n    |\n-LL | fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n+LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          ^^\n note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 18:13\n   --> $DIR/regions-bounds.rs:18:13\n    |\n-LL | fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n+LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |             ^^\n \n error[E0308]: mismatched types\n@@ -23,17 +23,17 @@ error[E0308]: mismatched types\n LL |     return e; //~ ERROR mismatched types\n    |            ^ lifetime mismatch\n    |\n-   = note: expected type `a_class<'b>`\n-              found type `a_class<'a>`\n+   = note: expected type `Struct<'b>`\n+              found type `Struct<'a>`\n note: the lifetime 'a as defined on the function body at 22:10...\n   --> $DIR/regions-bounds.rs:22:10\n    |\n-LL | fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n+LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          ^^\n note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 22:13\n   --> $DIR/regions-bounds.rs:22:13\n    |\n-LL | fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n+LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |             ^^\n \n error: aborting due to 2 previous errors"}, {"sha": "8a004543d94d16157bff18c33a471040962dfb08", "filename": "src/test/ui/regions/regions-creating-enums.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return reference to temporary value\n   --> $DIR/regions-creating-enums.rs:33:16\n    |\n-LL |         return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n+LL |         return &Ast::Num((*f)(x)); //~ ERROR borrowed value does not live long enough\n    |                ^-----------------\n    |                ||\n    |                |temporary value created here\n@@ -10,7 +10,7 @@ LL |         return &ast::num((*f)(x)); //~ ERROR borrowed value does not live l\n error[E0515]: cannot return reference to temporary value\n   --> $DIR/regions-creating-enums.rs:38:16\n    |\n-LL |         return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n+LL |         return &Ast::Add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n    |                ^------------------\n    |                ||\n    |                |temporary value created here"}, {"sha": "555c0e008a203d671526bf617a77a025af358806", "filename": "src/test/ui/regions/regions-creating-enums.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,34 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum ast<'a> {\n-    num(usize),\n-    add(&'a ast<'a>, &'a ast<'a>)\n+enum Ast<'a> {\n+    Num(usize),\n+    Add(&'a Ast<'a>, &'a Ast<'a>)\n }\n \n fn build() {\n-    let x = ast::num(3);\n-    let y = ast::num(4);\n-    let z = ast::add(&x, &y);\n+    let x = Ast::Num(3);\n+    let y = Ast::Num(4);\n+    let z = Ast::Add(&x, &y);\n     compute(&z);\n }\n \n-fn compute(x: &ast) -> usize {\n+fn compute(x: &Ast) -> usize {\n     match *x {\n-      ast::num(x) => { x }\n-      ast::add(x, y) => { compute(x) + compute(y) }\n+      Ast::Num(x) => { x }\n+      Ast::Add(x, y) => { compute(x) + compute(y) }\n     }\n }\n \n-fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n+fn map_nums<'a,'b, F>(x: &Ast, f: &mut F) -> &'a Ast<'b> where F: FnMut(usize) -> usize {\n     match *x {\n-      ast::num(x) => {\n-        return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n+      Ast::Num(x) => {\n+        return &Ast::Num((*f)(x)); //~ ERROR borrowed value does not live long enough\n       }\n-      ast::add(x, y) => {\n+      Ast::Add(x, y) => {\n         let m_x = map_nums(x, f);\n         let m_y = map_nums(y, f);\n-        return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n+        return &Ast::Add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n       }\n     }\n }"}, {"sha": "216f8dbbf70e5318736ff251ce81d3363ea3a97c", "filename": "src/test/ui/regions/regions-creating-enums.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,30 +1,30 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/regions-creating-enums.rs:33:17\n    |\n-LL |         return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n+LL |         return &Ast::Num((*f)(x)); //~ ERROR borrowed value does not live long enough\n    |                 ^^^^^^^^^^^^^^^^^- temporary value only lives until here\n    |                 |\n    |                 temporary value does not live long enough\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 30:13...\n   --> $DIR/regions-creating-enums.rs:30:13\n    |\n-LL | fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n+LL | fn map_nums<'a,'b, F>(x: &Ast, f: &mut F) -> &'a Ast<'b> where F: FnMut(usize) -> usize {\n    |             ^^\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n   --> $DIR/regions-creating-enums.rs:38:17\n    |\n-LL |         return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n+LL |         return &Ast::Add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n    |                 ^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n    |                 |\n    |                 temporary value does not live long enough\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 30:13...\n   --> $DIR/regions-creating-enums.rs:30:13\n    |\n-LL | fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n+LL | fn map_nums<'a,'b, F>(x: &Ast, f: &mut F) -> &'a Ast<'b> where F: FnMut(usize) -> usize {\n    |             ^^\n    = note: consider using a `let` binding to increase its lifetime\n "}, {"sha": "d179f825d081f7d818cd1f7069126794f5eec73c", "filename": "src/test/ui/regions/regions-creating-enums3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum ast<'a> {\n-    num(usize),\n-    add(&'a ast<'a>, &'a ast<'a>)\n+enum Ast<'a> {\n+    Num(usize),\n+    Add(&'a Ast<'a>, &'a Ast<'a>)\n }\n \n-fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n-    ast::add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n+fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n+    Ast::Add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n }\n \n fn main() {"}, {"sha": "6431f27e587a75b97b41b2b5a7f0eb1f1fa072da", "filename": "src/test/ui/regions/regions-creating-enums3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n error[E0623]: lifetime mismatch\n   --> $DIR/regions-creating-enums3.rs:17:5\n    |\n-LL | fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n+LL | fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n    |                                          -----------     -------\n    |                                          |\n    |                                          this parameter and the return type are declared with different lifetimes...\n-LL |     ast::add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n+LL |     Ast::Add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n    |     ^^^^^^^^^^^^^^ ...but data from `y` is returned here\n \n error: aborting due to previous error"}, {"sha": "e6b8bbe47adf713b2ccb4a44d74848a90fd41b21", "filename": "src/test/ui/regions/regions-creating-enums4.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum ast<'a> {\n-    num(usize),\n-    add(&'a ast<'a>, &'a ast<'a>)\n+enum Ast<'a> {\n+    Num(usize),\n+    Add(&'a Ast<'a>, &'a Ast<'a>)\n }\n \n-fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n-    ast::add(x, y) //~ ERROR cannot infer\n+fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n+    Ast::Add(x, y) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "97573504e3ea25817ac38f983df1193f0592211f", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,25 +1,25 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/regions-creating-enums4.rs:17:5\n    |\n-LL |     ast::add(x, y) //~ ERROR cannot infer\n+LL |     Ast::Add(x, y) //~ ERROR cannot infer\n    |     ^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 16:16...\n   --> $DIR/regions-creating-enums4.rs:16:16\n    |\n-LL | fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n+LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                ^^\n    = note: ...so that the expression is assignable:\n-           expected &ast<'_>\n-              found &ast<'a>\n+           expected &Ast<'_>\n+              found &Ast<'a>\n note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 16:19...\n   --> $DIR/regions-creating-enums4.rs:16:19\n    |\n-LL | fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n+LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                   ^^\n    = note: ...so that the expression is assignable:\n-           expected ast<'b>\n-              found ast<'_>\n+           expected Ast<'b>\n+              found Ast<'_>\n \n error: aborting due to previous error\n "}, {"sha": "070ea7be95e4ab8bc680e754516923c55967e092", "filename": "src/test/ui/regions/regions-in-enums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -11,19 +11,19 @@\n // Test that lifetimes must be declared for use on enums.\n // See also regions-undeclared.rs\n \n-enum yes0<'lt> {\n+enum Yes0<'lt> {\n     X3(&'lt usize)\n }\n \n-enum yes1<'a> {\n+enum Yes1<'a> {\n     X4(&'a usize)\n }\n \n-enum no0 {\n+enum No0 {\n     X5(&'foo usize) //~ ERROR use of undeclared lifetime name `'foo`\n }\n \n-enum no1 {\n+enum No1 {\n     X6(&'a usize) //~ ERROR use of undeclared lifetime name `'a`\n }\n "}, {"sha": "263543177010431254a97599dfad79b82e6dcfb4", "filename": "src/test/ui/regions/regions-in-structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct yes1<'a> {\n+struct Yes1<'a> {\n   x: &'a usize,\n }\n \n-struct yes2<'a> {\n+struct Yes2<'a> {\n   x: &'a usize,\n }\n "}, {"sha": "d2bfd9603253f92d3dc79af90a5375f1d99761ab", "filename": "src/test/ui/regions/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-at-fn-not-param.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,22 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct parameterized1<'a> {\n+struct Parameterized1<'a> {\n     g: Box<FnMut() + 'a>\n }\n \n-struct not_parameterized1 {\n+struct NotParameterized1 {\n     g: Box<FnMut() + 'static>\n }\n \n-struct not_parameterized2 {\n+struct NotParameterized2 {\n     g: Box<FnMut() + 'static>\n }\n \n-fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }\n+fn take1<'a>(p: Parameterized1) -> Parameterized1<'a> { p }\n //~^ ERROR explicit lifetime required in the type of `p`\n \n-fn take3(p: not_parameterized1) -> not_parameterized1 { p }\n-fn take4(p: not_parameterized2) -> not_parameterized2 { p }\n+fn take3(p: NotParameterized1) -> NotParameterized1 { p }\n+fn take4(p: NotParameterized2) -> NotParameterized2 { p }\n \n fn main() {}"}, {"sha": "ddc7ebcd4edcac3845f3c4e327149fbbf2772041", "filename": "src/test/ui/regions/regions-infer-at-fn-not-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-at-fn-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-at-fn-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-at-fn-not-param.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,10 +1,10 @@\n error[E0621]: explicit lifetime required in the type of `p`\n   --> $DIR/regions-infer-at-fn-not-param.rs:23:57\n    |\n-LL | fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }\n+LL | fn take1<'a>(p: Parameterized1) -> Parameterized1<'a> { p }\n    |                 --------------                          ^ lifetime `'a` required\n    |                 |\n-   |                 help: add explicit lifetime `'a` to the type of `p`: `parameterized1<'a>`\n+   |                 help: add explicit lifetime `'a` to the type of `p`: `Parameterized1<'a>`\n \n error: aborting due to previous error\n "}, {"sha": "eb1128f8e0ed386f7f3257dd8786e27e47e90c7f", "filename": "src/test/ui/regions/regions-infer-borrow-scope-too-big.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing local data `*p`\n-  --> $DIR/regions-infer-borrow-scope-too-big.rs:24:12\n+  --> $DIR/regions-infer-borrow-scope-too-big.rs:23:12\n    |\n LL |     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n    |                      --- `*p` is borrowed here"}, {"sha": "9937970a9bf74f983d67409e0cf40f8ff0aa1896", "filename": "src/test/ui/regions/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,17 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-struct point {\n+struct Point {\n     x: isize,\n     y: isize,\n }\n \n-fn x_coord<'r>(p: &'r point) -> &'r isize {\n+fn x_coord<'r>(p: &'r Point) -> &'r isize {\n     return &p.x;\n }\n \n-fn foo<'a>(p: Box<point>) -> &'a isize {\n+fn foo<'a>(p: Box<Point>) -> &'a isize {\n     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n     assert_eq!(*xc, 3);\n     return xc;"}, {"sha": "6a66cd256c1d18438b866569f8c233141bab4f7e", "filename": "src/test/ui/regions/regions-infer-borrow-scope-too-big.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,16 +1,16 @@\n error[E0597]: `*p` does not live long enough\n-  --> $DIR/regions-infer-borrow-scope-too-big.rs:22:23\n+  --> $DIR/regions-infer-borrow-scope-too-big.rs:21:23\n    |\n LL |     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n    |                       ^^ borrowed value does not live long enough\n ...\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:8...\n-  --> $DIR/regions-infer-borrow-scope-too-big.rs:21:8\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 20:8...\n+  --> $DIR/regions-infer-borrow-scope-too-big.rs:20:8\n    |\n-LL | fn foo<'a>(p: Box<point>) -> &'a isize {\n+LL | fn foo<'a>(p: Box<Point>) -> &'a isize {\n    |        ^^\n \n error: aborting due to previous error"}, {"sha": "14d32f8e4703d8f529b831b51b4da103d80b5d9f", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,15 +10,15 @@\n \n use std::marker;\n \n-struct invariant<'a> {\n+struct Invariant<'a> {\n     marker: marker::PhantomData<*mut &'a()>\n }\n \n-fn to_same_lifetime<'r>(b_isize: invariant<'r>) {\n-    let bj: invariant<'r> = b_isize;\n+fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n+    let bj: Invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n     b_isize //~ ERROR mismatched types\n }\n "}, {"sha": "23ada7067f57227278562c6071461cae7a5bd369", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,12 +4,12 @@ error[E0308]: mismatched types\n LL |     b_isize //~ ERROR mismatched types\n    |     ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `invariant<'static>`\n-              found type `invariant<'r>`\n+   = note: expected type `Invariant<'static>`\n+              found type `Invariant<'r>`\n note: the lifetime 'r as defined on the function body at 21:23...\n   --> $DIR/regions-infer-invariance-due-to-decl.rs:21:23\n    |\n-LL | fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       ^^\n    = note: ...does not necessarily outlive the static lifetime\n "}, {"sha": "9949c2fc28597728874942689411e430a51540c4", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n \n-struct invariant<'a> {\n+struct Invariant<'a> {\n     f: Box<FnOnce(&mut &'a isize) + 'static>,\n }\n \n-fn to_same_lifetime<'r>(b_isize: invariant<'r>) {\n-    let bj: invariant<'r> = b_isize;\n+fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n+    let bj: Invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n     b_isize //~ ERROR mismatched types\n }\n "}, {"sha": "3a9060d7c72779a9e4e631ea859821eac2a96563", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -4,12 +4,12 @@ error[E0308]: mismatched types\n LL |     b_isize //~ ERROR mismatched types\n    |     ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `invariant<'static>`\n-              found type `invariant<'r>`\n+   = note: expected type `Invariant<'static>`\n+              found type `Invariant<'r>`\n note: the lifetime 'r as defined on the function body at 20:23...\n   --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:20:23\n    |\n-LL | fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       ^^\n    = note: ...does not necessarily outlive the static lifetime\n "}, {"sha": "4e5bf5ad83faff28be16ad11652508488969a517", "filename": "src/test/ui/regions/regions-infer-not-param.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,29 +8,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct direct<'a> {\n+struct Direct<'a> {\n     f: &'a isize\n }\n \n-struct indirect1 {\n+struct Indirect1 {\n     // Here the lifetime parameter of direct is bound by the fn()\n-    g: Box<FnOnce(direct) + 'static>\n+    g: Box<FnOnce(Direct) + 'static>\n }\n \n-struct indirect2<'a> {\n+struct Indirect2<'a> {\n     // But here it is set to 'a\n-    g: Box<FnOnce(direct<'a>) + 'static>\n+    g: Box<FnOnce(Direct<'a>) + 'static>\n }\n \n-fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n+fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p } //~ ERROR mismatched types\n \n-fn take_indirect1(p: indirect1) -> indirect1 { p }\n+fn take_indirect1(p: Indirect1) -> Indirect1 { p }\n \n-fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n-//~| expected type `indirect2<'b>`\n-//~| found type `indirect2<'a>`\n+fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n+//~| expected type `Indirect2<'b>`\n+//~| found type `Indirect2<'a>`\n //~| ERROR mismatched types\n-//~| expected type `indirect2<'b>`\n-//~| found type `indirect2<'a>`\n+//~| expected type `Indirect2<'b>`\n+//~| found type `Indirect2<'a>`\n \n fn main() {}"}, {"sha": "d7b95408f96d993eecf39c554168c3ea8ab8ec39", "filename": "src/test/ui/regions/regions-infer-not-param.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,58 +1,58 @@\n error[E0308]: mismatched types\n   --> $DIR/regions-infer-not-param.rs:25:54\n    |\n-LL | fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n+LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p } //~ ERROR mismatched types\n    |                                                      ^ lifetime mismatch\n    |\n-   = note: expected type `direct<'b>`\n-              found type `direct<'a>`\n+   = note: expected type `Direct<'b>`\n+              found type `Direct<'a>`\n note: the lifetime 'a as defined on the function body at 25:16...\n   --> $DIR/regions-infer-not-param.rs:25:16\n    |\n-LL | fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n+LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p } //~ ERROR mismatched types\n    |                ^^\n note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 25:19\n   --> $DIR/regions-infer-not-param.rs:25:19\n    |\n-LL | fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n+LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p } //~ ERROR mismatched types\n    |                   ^^\n \n error[E0308]: mismatched types\n   --> $DIR/regions-infer-not-param.rs:29:63\n    |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n    |                                                               ^ lifetime mismatch\n    |\n-   = note: expected type `indirect2<'b>`\n-              found type `indirect2<'a>`\n+   = note: expected type `Indirect2<'b>`\n+              found type `Indirect2<'a>`\n note: the lifetime 'a as defined on the function body at 29:19...\n   --> $DIR/regions-infer-not-param.rs:29:19\n    |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n    |                   ^^\n note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 29:22\n   --> $DIR/regions-infer-not-param.rs:29:22\n    |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n    |                      ^^\n \n error[E0308]: mismatched types\n   --> $DIR/regions-infer-not-param.rs:29:63\n    |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n    |                                                               ^ lifetime mismatch\n    |\n-   = note: expected type `indirect2<'b>`\n-              found type `indirect2<'a>`\n+   = note: expected type `Indirect2<'b>`\n+              found type `Indirect2<'a>`\n note: the lifetime 'b as defined on the function body at 29:22...\n   --> $DIR/regions-infer-not-param.rs:29:22\n    |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n    |                      ^^\n note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 29:19\n   --> $DIR/regions-infer-not-param.rs:29:19\n    |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p } //~ ERROR mismatched types\n    |                   ^^\n \n error: aborting due to 3 previous errors"}, {"sha": "3ccaa894b81dca122492c5a3eb471004d9cbfd14", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,24 +12,24 @@\n // Check that we correctly infer that b and c must be region\n // parameterized because they reference a which requires a region.\n \n-type a<'a> = &'a isize;\n-type b<'a> = Box<a<'a>>;\n+type A<'a> = &'a isize;\n+type B<'a> = Box<A<'a>>;\n \n-struct c<'a> {\n-    f: Box<b<'a>>\n+struct C<'a> {\n+    f: Box<B<'a>>\n }\n \n-trait set_f<'a> {\n-    fn set_f_ok(&mut self, b: Box<b<'a>>);\n-    fn set_f_bad(&mut self, b: Box<b>);\n+trait SetF<'a> {\n+    fn set_f_ok(&mut self, b: Box<B<'a>>);\n+    fn set_f_bad(&mut self, b: Box<B>);\n }\n \n-impl<'a> set_f<'a> for c<'a> {\n-    fn set_f_ok(&mut self, b: Box<b<'a>>) {\n+impl<'a> SetF<'a> for C<'a> {\n+    fn set_f_ok(&mut self, b: Box<B<'a>>) {\n         self.f = b;\n     }\n \n-    fn set_f_bad(&mut self, b: Box<b>) {\n+    fn set_f_bad(&mut self, b: Box<B>) {\n         self.f = b;\n         //~^ ERROR mismatched types\n         //~| expected type `std::boxed::Box<std::boxed::Box<&'a isize>>`"}, {"sha": "52e5e74c83ba764a823a0a1e6d99c4141e365636", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,7 +9,7 @@ LL |         self.f = b;\n note: the anonymous lifetime #2 defined on the method body at 32:5...\n   --> $DIR/regions-infer-paramd-indirect.rs:32:5\n    |\n-LL | /     fn set_f_bad(&mut self, b: Box<b>) {\n+LL | /     fn set_f_bad(&mut self, b: Box<B>) {\n LL | |         self.f = b;\n LL | |         //~^ ERROR mismatched types\n LL | |         //~| expected type `std::boxed::Box<std::boxed::Box<&'a isize>>`\n@@ -20,7 +20,7 @@ LL | |     }\n note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 27:6\n   --> $DIR/regions-infer-paramd-indirect.rs:27:6\n    |\n-LL | impl<'a> set_f<'a> for c<'a> {\n+LL | impl<'a> SetF<'a> for C<'a> {\n    |      ^^\n \n error: aborting due to previous error"}, {"sha": "ebdb5636cdbaabe106e83f3fe0dba6ac56566394", "filename": "src/test/ui/regions/regions-steal-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,12 +10,12 @@\n \n #![feature(fn_traits)]\n \n-struct closure_box<'a> {\n+struct ClosureBox<'a> {\n     cl: Box<FnMut() + 'a>,\n }\n \n-fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n-    closure_box {cl: x}\n+fn box_it<'r>(x: Box<FnMut() + 'r>) -> ClosureBox<'r> {\n+    ClosureBox {cl: x}\n }\n \n fn main() {"}, {"sha": "7cc64ede0f90dfeadad6beb6a1ddc81098f769d3", "filename": "src/test/ui/regions/regions-trait-1.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,31 +10,31 @@\n \n #![feature(box_syntax)]\n \n-struct ctxt { v: usize }\n+struct Ctxt { v: usize }\n \n-trait get_ctxt {\n+trait GetCtxt {\n     // Here the `&` is bound in the method definition:\n-    fn get_ctxt(&self) -> &ctxt;\n+    fn get_ctxt(&self) -> &Ctxt;\n }\n \n-struct has_ctxt<'a> { c: &'a ctxt }\n+struct HasCtxt<'a> { c: &'a Ctxt }\n \n-impl<'a> get_ctxt for has_ctxt<'a> {\n+impl<'a> GetCtxt for HasCtxt<'a> {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:\n-    fn get_ctxt(&self) -> &'a ctxt { //~ ERROR method not compatible with trait\n+    fn get_ctxt(&self) -> &'a Ctxt { //~ ERROR method not compatible with trait\n         self.c\n     }\n \n }\n \n-fn get_v(gc: Box<get_ctxt>) -> usize {\n+fn get_v(gc: Box<GetCtxt>) -> usize {\n     gc.get_ctxt().v\n }\n \n fn main() {\n-    let ctxt = ctxt { v: 22 };\n-    let hc = has_ctxt { c: &ctxt };\n-    assert_eq!(get_v(box hc as Box<get_ctxt>), 22);\n+    let ctxt = Ctxt { v: 22 };\n+    let hc = HasCtxt { c: &ctxt };\n+    assert_eq!(get_v(box hc as Box<GetCtxt>), 22);\n }"}, {"sha": "be81d7ce40f2b7baaf588ec178612ec7207579d9", "filename": "src/test/ui/regions/regions-trait-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,20 +1,20 @@\n error[E0308]: method not compatible with trait\n   --> $DIR/regions-trait-1.rs:26:5\n    |\n-LL |     fn get_ctxt(&self) -> &'a ctxt { //~ ERROR method not compatible with trait\n+LL |     fn get_ctxt(&self) -> &'a Ctxt { //~ ERROR method not compatible with trait\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&has_ctxt<'a>) -> &ctxt`\n-              found type `fn(&has_ctxt<'a>) -> &'a ctxt`\n+   = note: expected type `fn(&HasCtxt<'a>) -> &Ctxt`\n+              found type `fn(&HasCtxt<'a>) -> &'a Ctxt`\n note: the lifetime 'a as defined on the impl at 22:6...\n   --> $DIR/regions-trait-1.rs:22:6\n    |\n-LL | impl<'a> get_ctxt for has_ctxt<'a> {\n+LL | impl<'a> GetCtxt for HasCtxt<'a> {\n    |      ^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 26:5\n   --> $DIR/regions-trait-1.rs:26:5\n    |\n-LL | /     fn get_ctxt(&self) -> &'a ctxt { //~ ERROR method not compatible with trait\n+LL | /     fn get_ctxt(&self) -> &'a Ctxt { //~ ERROR method not compatible with trait\n LL | |         self.c\n LL | |     }\n    | |_____^"}, {"sha": "ff3739c40ded459ba3944691a5248745cd0a13e0", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -41,16 +41,16 @@ impl                    Drop for N<'static>     { fn drop(&mut self) { } } // RE\n //~| expected type `N<'n>`\n //~|    found type `N<'static>`\n \n-impl<Cok_nobound> Drop for O<Cok_nobound> { fn drop(&mut self) { } } // ACCEPT\n+impl<COkNoBound> Drop for O<COkNoBound> { fn drop(&mut self) { } } // ACCEPT\n \n impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n-impl<Adds_bnd:Bound> Drop for Q<Adds_bnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `Adds_bnd: Bound` is added only by the Drop impl.\n+impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR The requirement `AddsBnd: Bound` is added only by the Drop impl.\n \n-impl<'rbnd,Adds_rbnd:'rbnd> Drop for R<Adds_rbnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `Adds_rbnd : 'rbnd` is added only by the Drop impl.\n+impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR The requirement `AddsRBnd : 'rbnd` is added only by the Drop impl.\n \n impl<Bs:Bound>    Drop for S<Bs>          { fn drop(&mut self) { } } // ACCEPT\n "}, {"sha": "6be03473e70c4d6d51ea7faa7d36078f299190d8", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -53,23 +53,23 @@ note: Use same sequence of generic type and region parameters that is on the str\n LL | struct P<Tp> { x: *const Tp }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `Adds_bnd: Bound` is added only by the Drop impl.\n+error[E0367]: The requirement `AddsBnd: Bound` is added only by the Drop impl.\n   --> $DIR/reject-specialized-drops-8142.rs:49:1\n    |\n-LL | impl<Adds_bnd:Bound> Drop for Q<Adds_bnd> { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: The same requirement must be part of the struct/enum definition\n   --> $DIR/reject-specialized-drops-8142.rs:21:1\n    |\n LL | struct Q<Tq> { x: *const Tq }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `Adds_rbnd : 'rbnd` is added only by the Drop impl.\n+error[E0367]: The requirement `AddsRBnd : 'rbnd` is added only by the Drop impl.\n   --> $DIR/reject-specialized-drops-8142.rs:52:1\n    |\n-LL | impl<'rbnd,Adds_rbnd:'rbnd> Drop for R<Adds_rbnd> { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: The same requirement must be part of the struct/enum definition\n   --> $DIR/reject-specialized-drops-8142.rs:22:1"}, {"sha": "f347fd2b8fcaa5abce4f6bf0d82be6e9797905d0", "filename": "src/test/ui/resolve/issue-2356.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,7 +12,7 @@ trait Groom {\n     fn shave(other: usize);\n }\n \n-pub struct cat {\n+pub struct Cat {\n   whiskers: isize,\n }\n \n@@ -29,22 +29,22 @@ impl MaybeDog {\n   }\n }\n \n-impl Clone for cat {\n+impl Clone for Cat {\n   fn clone(&self) -> Self {\n     clone();\n     //~^ ERROR cannot find function `clone`\n     loop {}\n   }\n }\n-impl Default for cat {\n+impl Default for Cat {\n   fn default() -> Self {\n     default();\n     //~^ ERROR cannot find function `default`\n     loop {}\n   }\n }\n \n-impl Groom for cat {\n+impl Groom for Cat {\n   fn shave(other: usize) {\n     whiskers -= other;\n     //~^ ERROR cannot find value `whiskers`\n@@ -55,7 +55,7 @@ impl Groom for cat {\n   }\n }\n \n-impl cat {\n+impl Cat {\n     fn static_method() {}\n \n     fn purr_louder() {\n@@ -70,7 +70,7 @@ impl cat {\n     }\n }\n \n-impl cat {\n+impl Cat {\n   fn meow() {\n     if self.whiskers > 3 {\n         //~^ ERROR expected value, found module `self`"}, {"sha": "499709a8976ff35078861dc2e04faf92442538f2", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,42 +8,42 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum opts {\n-    a(isize), b(isize), c(isize)\n+enum Opts {\n+    A(isize), B(isize), C(isize)\n }\n \n-fn matcher1(x: opts) {\n+fn matcher1(x: Opts) {\n     match x {\n-      opts::a(ref i) | opts::b(i) => {}\n+      Opts::A(ref i) | Opts::B(i) => {}\n       //~^ ERROR variable `i` is bound in inconsistent ways within the same match arm\n       //~^^ ERROR mismatched types\n-      opts::c(_) => {}\n+      Opts::C(_) => {}\n     }\n }\n \n-fn matcher2(x: opts) {\n+fn matcher2(x: Opts) {\n     match x {\n-      opts::a(ref i) | opts::b(i) => {}\n+      Opts::A(ref i) | Opts::B(i) => {}\n       //~^ ERROR variable `i` is bound in inconsistent ways within the same match arm\n       //~^^ ERROR mismatched types\n-      opts::c(_) => {}\n+      Opts::C(_) => {}\n     }\n }\n \n-fn matcher4(x: opts) {\n+fn matcher4(x: Opts) {\n     match x {\n-      opts::a(ref mut i) | opts::b(ref i) => {}\n+      Opts::A(ref mut i) | Opts::B(ref i) => {}\n       //~^ ERROR variable `i` is bound in inconsistent ways within the same match arm\n       //~^^ ERROR mismatched types\n-      opts::c(_) => {}\n+      Opts::C(_) => {}\n     }\n }\n \n \n-fn matcher5(x: opts) {\n+fn matcher5(x: Opts) {\n     match x {\n-      opts::a(ref i) | opts::b(ref i) => {}\n-      opts::c(_) => {}\n+      Opts::A(ref i) | Opts::B(ref i) => {}\n+      Opts::C(_) => {}\n     }\n }\n "}, {"sha": "e43a714afbf80ac6d4b64dcd34016c1615525361", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,29 +1,29 @@\n error[E0409]: variable `i` is bound in inconsistent ways within the same match arm\n   --> $DIR/resolve-inconsistent-binding-mode.rs:17:32\n    |\n-LL |       opts::a(ref i) | opts::b(i) => {}\n+LL |       Opts::A(ref i) | Opts::B(i) => {}\n    |                   -            ^ bound in different ways\n    |                   |\n    |                   first binding\n \n error[E0409]: variable `i` is bound in inconsistent ways within the same match arm\n   --> $DIR/resolve-inconsistent-binding-mode.rs:26:32\n    |\n-LL |       opts::a(ref i) | opts::b(i) => {}\n+LL |       Opts::A(ref i) | Opts::B(i) => {}\n    |                   -            ^ bound in different ways\n    |                   |\n    |                   first binding\n \n error[E0409]: variable `i` is bound in inconsistent ways within the same match arm\n   --> $DIR/resolve-inconsistent-binding-mode.rs:35:40\n    |\n-LL |       opts::a(ref mut i) | opts::b(ref i) => {}\n+LL |       Opts::A(ref mut i) | Opts::B(ref i) => {}\n    |                       - first binding  ^ bound in different ways\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:17:32\n    |\n-LL |       opts::a(ref i) | opts::b(i) => {}\n+LL |       Opts::A(ref i) | Opts::B(i) => {}\n    |                                ^ expected &isize, found isize\n    |\n    = note: expected type `&isize`\n@@ -32,7 +32,7 @@ LL |       opts::a(ref i) | opts::b(i) => {}\n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:26:32\n    |\n-LL |       opts::a(ref i) | opts::b(i) => {}\n+LL |       Opts::A(ref i) | Opts::B(i) => {}\n    |                                ^ expected &isize, found isize\n    |\n    = note: expected type `&isize`\n@@ -41,7 +41,7 @@ LL |       opts::a(ref i) | opts::b(i) => {}\n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:35:36\n    |\n-LL |       opts::a(ref mut i) | opts::b(ref i) => {}\n+LL |       Opts::A(ref mut i) | Opts::B(ref i) => {}\n    |                                    ^^^^^ types differ in mutability\n    |\n    = note: expected type `&mut isize`"}, {"sha": "d777b1165f30b9b5161c80b7690fbb3c9a9618c6", "filename": "src/test/ui/rust-2018/future-proofing-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n \n #![feature(uniform_paths)]\n+#![allow(non_camel_case_types)]\n \n mod T {\n     pub struct U;"}, {"sha": "594b22496e74adbe7fda873c1d2e38bf72f3a3a2", "filename": "src/test/ui/rust-2018/future-proofing-locals.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,47 +1,47 @@\n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:13:9\n+  --> $DIR/future-proofing-locals.rs:14:9\n    |\n LL |     use T as _; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:14:9\n+  --> $DIR/future-proofing-locals.rs:15:9\n    |\n LL |     use T::U; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:15:9\n+  --> $DIR/future-proofing-locals.rs:16:9\n    |\n LL |     use T::*; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:25:9\n+  --> $DIR/future-proofing-locals.rs:26:9\n    |\n LL |     use x as _; //~ ERROR imports cannot refer to local variables\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:31:9\n+  --> $DIR/future-proofing-locals.rs:32:9\n    |\n LL |     use x; //~ ERROR imports cannot refer to local variables\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:37:17\n+  --> $DIR/future-proofing-locals.rs:38:17\n    |\n LL |             use x; //~ ERROR imports cannot refer to local variables\n    |                 ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:45:10\n+  --> $DIR/future-proofing-locals.rs:46:10\n    |\n LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n    |          ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:45:18\n+  --> $DIR/future-proofing-locals.rs:46:18\n    |\n LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n    |                  ^"}, {"sha": "1255ddb01c463e8b11833a7c63a26fb6ab75e4b3", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,6 +12,8 @@\n \n // This test is similar to `ambiguity-macros.rs`, but nested in a module.\n \n+#![allow(non_camel_case_types)]\n+\n mod foo {\n     pub use std::io;\n     //~^ ERROR `std` is ambiguous"}, {"sha": "8b893cf26fbf16e1288353153d4b7ce5b9bb9b4b", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity-macros-nested.rs:16:13\n+  --> $DIR/ambiguity-macros-nested.rs:18:13\n    |\n LL |     pub use std::io;\n    |             ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity-macros-nested.rs:21:13\n+  --> $DIR/ambiguity-macros-nested.rs:23:13\n    |\n LL | /             mod std {\n LL | |                 pub struct io;"}, {"sha": "9519b92168acf7042a62acd4113543f081d92048", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,6 +12,8 @@\n \n // This test is similar to `ambiguity.rs`, but with macros defining local items.\n \n+#![allow(non_camel_case_types)]\n+\n use std::io;\n //~^ ERROR `std` is ambiguous\n "}, {"sha": "025cbd7187b75b47720d6daab58d75c9d9f1d981", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity-macros.rs:15:5\n+  --> $DIR/ambiguity-macros.rs:17:5\n    |\n LL | use std::io;\n    |     ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity-macros.rs:20:9\n+  --> $DIR/ambiguity-macros.rs:22:9\n    |\n LL | /         mod std {\n LL | |             pub struct io;"}, {"sha": "b9e8a4e6edb6efb71395583c390d87d575daee32", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -12,6 +12,8 @@\n \n // This test is similar to `ambiguity.rs`, but nested in a module.\n \n+#![allow(non_camel_case_types)]\n+\n mod foo {\n     pub use std::io;\n     //~^ ERROR `std` is ambiguous"}, {"sha": "6415f46b38a3cf157215d2a9eab9034a75305ade", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity-nested.rs:16:13\n+  --> $DIR/ambiguity-nested.rs:18:13\n    |\n LL |     pub use std::io;\n    |             ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity-nested.rs:19:5\n+  --> $DIR/ambiguity-nested.rs:21:5\n    |\n LL | /     mod std {\n LL | |         pub struct io;"}, {"sha": "4bcaea50edad33d20fea83ce3c060522bbe08771", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,8 @@\n \n // edition:2018\n \n+#![allow(non_camel_case_types)]\n+\n use std::io;\n //~^ ERROR `std` is ambiguous\n "}, {"sha": "c48df372cf74ae4fae29901ebdc9536e16bf9c91", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity.rs:13:5\n+  --> $DIR/ambiguity.rs:15:5\n    |\n LL | use std::io;\n    |     ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity.rs:16:1\n+  --> $DIR/ambiguity.rs:18:1\n    |\n LL | / mod std {\n LL | |     pub struct io;"}, {"sha": "02b479213bf2e1624fa4cc07f53d8810c8cd3c2d", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,8 @@\n \n // edition:2018\n \n+#![allow(non_camel_case_types)]\n+\n enum Foo {}\n \n struct std;"}, {"sha": "66b7880cc58c9ee7b921ac68e435faef580006f1", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,52 +1,52 @@\n error[E0659]: `Foo` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow.rs:19:9\n+  --> $DIR/block-scoped-shadow.rs:21:9\n    |\n LL |     use Foo::*;\n    |         ^^^ ambiguous name\n    |\n note: `Foo` could refer to the enum defined here\n-  --> $DIR/block-scoped-shadow.rs:18:5\n+  --> $DIR/block-scoped-shadow.rs:20:5\n    |\n LL |     enum Foo { A, B }\n    |     ^^^^^^^^^^^^^^^^^\n note: `Foo` could also refer to the enum defined here\n-  --> $DIR/block-scoped-shadow.rs:13:1\n+  --> $DIR/block-scoped-shadow.rs:15:1\n    |\n LL | enum Foo {}\n    | ^^^^^^^^^^^\n    = help: use `crate::Foo` to refer to this enum unambiguously\n \n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow.rs:26:9\n+  --> $DIR/block-scoped-shadow.rs:28:9\n    |\n LL |     use std as foo;\n    |         ^^^ ambiguous name\n    |\n note: `std` could refer to the enum defined here\n-  --> $DIR/block-scoped-shadow.rs:25:5\n+  --> $DIR/block-scoped-shadow.rs:27:5\n    |\n LL |     enum std {}\n    |     ^^^^^^^^^^^\n note: `std` could also refer to the struct defined here\n-  --> $DIR/block-scoped-shadow.rs:15:1\n+  --> $DIR/block-scoped-shadow.rs:17:1\n    |\n LL | struct std;\n    | ^^^^^^^^^^^\n    = help: use `crate::std` to refer to this struct unambiguously\n \n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow.rs:26:9\n+  --> $DIR/block-scoped-shadow.rs:28:9\n    |\n LL |     use std as foo;\n    |         ^^^ ambiguous name\n    |\n note: `std` could refer to the function defined here\n-  --> $DIR/block-scoped-shadow.rs:24:5\n+  --> $DIR/block-scoped-shadow.rs:26:5\n    |\n LL |     fn std() {}\n    |     ^^^^^^^^^^^\n note: `std` could also refer to the unit struct defined here\n-  --> $DIR/block-scoped-shadow.rs:15:1\n+  --> $DIR/block-scoped-shadow.rs:17:1\n    |\n LL | struct std;\n    | ^^^^^^^^^^^"}, {"sha": "69f6a8668add39a7231bbc29b79d3eb93f10bdaf", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -3,6 +3,7 @@\n // For the time being `macro_rules` items are treated as *very* private...\n \n #![feature(decl_macro, uniform_paths)]\n+#![allow(non_camel_case_types)]\n \n mod m1 {\n     macro_rules! legacy_macro { () => () }"}, {"sha": "be7bbd314df316027358d84d6e44872a217ab306", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,52 +1,52 @@\n error[E0364]: `legacy_macro` is private, and cannot be re-exported\n-  --> $DIR/macro-rules.rs:11:9\n+  --> $DIR/macro-rules.rs:12:9\n    |\n LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n    |         ^^^^^^^^^^^^^^^^^\n    |\n note: consider marking `legacy_macro` as `pub` in the imported module\n-  --> $DIR/macro-rules.rs:11:9\n+  --> $DIR/macro-rules.rs:12:9\n    |\n LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n    |         ^^^^^^^^^^^^^^^^^\n \n error[E0364]: `legacy_macro` is private, and cannot be re-exported\n-  --> $DIR/macro-rules.rs:30:13\n+  --> $DIR/macro-rules.rs:31:13\n    |\n LL |         use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n    |             ^^^^^^^^^^^^^^^^^\n    |\n note: consider marking `legacy_macro` as `pub` in the imported module\n-  --> $DIR/macro-rules.rs:30:13\n+  --> $DIR/macro-rules.rs:31:13\n    |\n LL |         use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n    |             ^^^^^^^^^^^^^^^^^\n \n error[E0364]: `legacy_macro` is private, and cannot be re-exported\n-  --> $DIR/macro-rules.rs:41:9\n+  --> $DIR/macro-rules.rs:42:9\n    |\n LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n    |         ^^^^^^^^^^^^^^^^^\n    |\n note: consider marking `legacy_macro` as `pub` in the imported module\n-  --> $DIR/macro-rules.rs:41:9\n+  --> $DIR/macro-rules.rs:42:9\n    |\n LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n    |         ^^^^^^^^^^^^^^^^^\n \n error[E0659]: `legacy_macro` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/macro-rules.rs:30:13\n+  --> $DIR/macro-rules.rs:31:13\n    |\n LL |         use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n    |             ^^^^^^^^^^^^ ambiguous name\n    |\n note: `legacy_macro` could refer to the macro defined here\n-  --> $DIR/macro-rules.rs:27:9\n+  --> $DIR/macro-rules.rs:28:9\n    |\n LL |         macro_rules! legacy_macro { () => () }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `legacy_macro` could also refer to the macro defined here\n-  --> $DIR/macro-rules.rs:24:5\n+  --> $DIR/macro-rules.rs:25:5\n    |\n LL |     macro legacy_macro() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bb5784a64e56dc2fa93900b931bde5b5003039a7", "filename": "src/test/ui/seq-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn main() {\n-trait seq { }\n+trait Seq { }\n \n-impl<T> seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n+impl<T> Seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n     /* ... */\n }\n-impl seq<bool> for u32 { //~ ERROR wrong number of type arguments\n+impl Seq<bool> for u32 { //~ ERROR wrong number of type arguments\n    /* Treat the integer as a sequence of bits */\n }\n "}, {"sha": "d376adc67c5ed4a6299dd9762d97470fc13e5f76", "filename": "src/test/ui/seq-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fseq-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fseq-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/seq-args.rs:14:13\n    |\n-LL | impl<T> seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n+LL | impl<T> Seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n    |             ^ unexpected type argument\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/seq-args.rs:17:10\n    |\n-LL | impl seq<bool> for u32 { //~ ERROR wrong number of type arguments\n+LL | impl Seq<bool> for u32 { //~ ERROR wrong number of type arguments\n    |          ^^^^ unexpected type argument\n \n error: aborting due to 2 previous errors"}, {"sha": "449478fe99c2cb0e33004fd98453e4a51d94574d", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-declaration-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);"}, {"sha": "3e1cc2ba311970c423661e99aa41ce1a663a91c1", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-declaration-type.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,71 +1,71 @@\n error[E0442]: intrinsic argument 1 has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:42:9\n+  --> $DIR/simd-intrinsic-declaration-type.rs:43:9\n    |\n LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 2 has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:42:9\n+  --> $DIR/simd-intrinsic-declaration-type.rs:43:9\n    |\n LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic return value has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:42:9\n+  --> $DIR/simd-intrinsic-declaration-type.rs:43:9\n    |\n LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 1 has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:46:9\n+  --> $DIR/simd-intrinsic-declaration-type.rs:47:9\n    |\n LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 2 has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:46:9\n+  --> $DIR/simd-intrinsic-declaration-type.rs:47:9\n    |\n LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic return value has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:46:9\n+  --> $DIR/simd-intrinsic-declaration-type.rs:47:9\n    |\n LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 1 has wrong type: found vector with length 16, expected length 8\n-  --> $DIR/simd-intrinsic-declaration-type.rs:54:5\n+  --> $DIR/simd-intrinsic-declaration-type.rs:55:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 2 has wrong type: found vector with length 4, expected length 8\n-  --> $DIR/simd-intrinsic-declaration-type.rs:54:5\n+  --> $DIR/simd-intrinsic-declaration-type.rs:55:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic return value has wrong type: found vector with length 2, expected length 8\n-  --> $DIR/simd-intrinsic-declaration-type.rs:54:5\n+  --> $DIR/simd-intrinsic-declaration-type.rs:55:5\n    |\n LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 1 has wrong type: found `i32`, expected `f32`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:61:5\n+  --> $DIR/simd-intrinsic-declaration-type.rs:62:5\n    |\n LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic argument 2 has wrong type: found `i32`, expected `f32`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:61:5\n+  --> $DIR/simd-intrinsic-declaration-type.rs:62:5\n    |\n LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0442]: intrinsic return value has wrong type: found `i32`, expected `f32`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:61:5\n+  --> $DIR/simd-intrinsic-declaration-type.rs:62:5\n    |\n LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "df4006208cc94e9bd8c7424f9b02b268ab0d1f1e", "filename": "src/test/ui/simd-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(repr_simd)]\n+#![allow(non_camel_case_types)]\n \n #[repr(simd)]\n struct empty; //~ ERROR SIMD vector cannot be empty"}, {"sha": "a8886fd7b28147dc51b05f9b82573ef016e88e27", "filename": "src/test/ui/simd-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fsimd-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,17 +1,17 @@\n error[E0075]: SIMD vector cannot be empty\n-  --> $DIR/simd-type.rs:14:1\n+  --> $DIR/simd-type.rs:15:1\n    |\n LL | struct empty; //~ ERROR SIMD vector cannot be empty\n    | ^^^^^^^^^^^^^\n \n error[E0076]: SIMD vector should be homogeneous\n-  --> $DIR/simd-type.rs:17:1\n+  --> $DIR/simd-type.rs:18:1\n    |\n LL | struct i64f64(i64, f64); //~ ERROR SIMD vector should be homogeneous\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n \n error[E0077]: SIMD vector element type should be machine type\n-  --> $DIR/simd-type.rs:20:1\n+  --> $DIR/simd-type.rs:21:1\n    |\n LL | struct int4(isize, isize, isize, isize); //~ ERROR SIMD vector element type should be machine type\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "960a97f6e7dc215ab9ecb7da049e611aa6dc0193", "filename": "src/test/ui/staticness-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstaticness-mismatch.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait foo {\n+trait Foo {\n     fn dummy(&self) { }\n     fn bar();\n }\n \n-impl foo for isize {\n+impl Foo for isize {\n     fn bar(&self) {}\n     //~^ ERROR method `bar` has a `&self` declaration in the impl, but not in the trait\n }"}, {"sha": "eca87b285b9afec593e864831948969492a15c8e", "filename": "src/test/ui/structs/struct-pat-derived-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct a {\n+struct A {\n     b: usize,\n     c: usize\n }\n \n-impl a {\n+impl A {\n     fn foo(&self) {\n-        let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n-        //~^ ERROR struct `a` does not have fields named `x`, `y`\n+        let A { x, y } = self.d; //~ ERROR no field `d` on type `&A`\n+        //~^ ERROR struct `A` does not have fields named `x`, `y`\n         //~| ERROR pattern does not mention fields `b`, `c`\n     }\n }"}, {"sha": "5b7ce4ed7633c8ffee8991b99a87c6166e2f8153", "filename": "src/test/ui/structs/struct-pat-derived-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,19 +1,19 @@\n-error[E0609]: no field `d` on type `&a`\n+error[E0609]: no field `d` on type `&A`\n   --> $DIR/struct-pat-derived-error.rs:18:31\n    |\n-LL |         let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n+LL |         let A { x, y } = self.d; //~ ERROR no field `d` on type `&A`\n    |                               ^\n \n-error[E0026]: struct `a` does not have fields named `x`, `y`\n+error[E0026]: struct `A` does not have fields named `x`, `y`\n   --> $DIR/struct-pat-derived-error.rs:18:17\n    |\n-LL |         let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n-   |                 ^  ^ struct `a` does not have these fields\n+LL |         let A { x, y } = self.d; //~ ERROR no field `d` on type `&A`\n+   |                 ^  ^ struct `A` does not have these fields\n \n error[E0027]: pattern does not mention fields `b`, `c`\n   --> $DIR/struct-pat-derived-error.rs:18:13\n    |\n-LL |         let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n+LL |         let A { x, y } = self.d; //~ ERROR no field `d` on type `&A`\n    |             ^^^^^^^^^^ missing fields `b`, `c`\n \n error: aborting due to 3 previous errors"}, {"sha": "ebef369d027ce8503bc35940edcaa62abdf9be68", "filename": "src/test/ui/tag-type-args.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-type-args.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:wrong number of type arguments\n+enum Quux<T> { Bar }\n \n-enum quux<T> { bar }\n-\n-fn foo(c: quux) { assert!((false)); }\n+fn foo(c: Quux) { assert!((false)); } //~ ERROR wrong number of type arguments\n \n fn main() { panic!(); }"}, {"sha": "fbddb5c4f89db987117826c68c90513dde88fb9f", "filename": "src/test/ui/tag-type-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-type-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-type-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-type-args.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/tag-type-args.rs:15:11\n+  --> $DIR/tag-type-args.rs:13:11\n    |\n-LL | fn foo(c: quux) { assert!((false)); }\n+LL | fn foo(c: Quux) { assert!((false)); } //~ ERROR wrong number of type arguments\n    |           ^^^^ expected 1 type argument\n \n error: aborting due to previous error"}, {"sha": "fdc6d20ce5bdd925632a5633a4de00f2efe4a9c0", "filename": "src/test/ui/tag-variant-cast-non-nullary.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum non_nullary {\n-    nullary,\n-    other(isize),\n+enum NonNullary {\n+    Nullary,\n+    Other(isize),\n }\n \n fn main() {\n-    let v = non_nullary::nullary;\n-    let val = v as isize; //~ ERROR non-primitive cast: `non_nullary` as `isize` [E0605]\n+    let v = NonNullary::Nullary;\n+    let val = v as isize; //~ ERROR non-primitive cast: `NonNullary` as `isize` [E0605]\n }"}, {"sha": "8883dcd1a14a4633807d152d85ea4b9e981e0d04", "filename": "src/test/ui/tag-variant-cast-non-nullary.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,7 +1,7 @@\n-error[E0605]: non-primitive cast: `non_nullary` as `isize`\n+error[E0605]: non-primitive cast: `NonNullary` as `isize`\n   --> $DIR/tag-variant-cast-non-nullary.rs:18:15\n    |\n-LL |     let val = v as isize; //~ ERROR non-primitive cast: `non_nullary` as `isize` [E0605]\n+LL |     let val = v as isize; //~ ERROR non-primitive cast: `NonNullary` as `isize` [E0605]\n    |               ^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait"}, {"sha": "f78a7c8365974d20118ed60014f774da08926162", "filename": "src/test/ui/tag-variant-disr-dup.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-disr-dup.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//error-pattern:discriminant value\n+// Black and White have the same discriminator value ...\n \n-// black and white have the same discriminator value ...\n-\n-enum color {\n-    red = 0xff0000,\n-    green = 0x00ff00,\n-    blue = 0x0000ff,\n-    black = 0x000000,\n-    white = 0x000000,\n+enum Color {\n+    Red = 0xff0000,\n+    Green = 0x00ff00,\n+    Blue = 0x0000ff,\n+    Black = 0x000000,\n+    White = 0x000000, //~ ERROR discriminant value `0` already exists\n }\n \n fn main() { }"}, {"sha": "4da8436ab57e6b4ddab56da7ebd13dd877f0e893", "filename": "src/test/ui/tag-variant-disr-dup.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,9 +1,9 @@\n error[E0081]: discriminant value `0` already exists\n-  --> $DIR/tag-variant-disr-dup.rs:20:13\n+  --> $DIR/tag-variant-disr-dup.rs:18:13\n    |\n-LL |     black = 0x000000,\n+LL |     Black = 0x000000,\n    |             -------- first use of `0`\n-LL |     white = 0x000000,\n+LL |     White = 0x000000, //~ ERROR discriminant value `0` already exists\n    |             ^^^^^^^^ enum already has `0`\n \n error: aborting due to previous error"}, {"sha": "6bada4bf73c8abae4de99f78bce08a44b87e4aa0", "filename": "src/test/ui/terr-in-field.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-in-field.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,22 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo {\n+struct Foo {\n     a: isize,\n     b: isize,\n }\n \n-struct bar {\n+struct Bar {\n     a: isize,\n     b: usize,\n }\n \n-fn want_foo(f: foo) {}\n-fn have_bar(b: bar) {\n+fn want_foo(f: Foo) {}\n+fn have_bar(b: Bar) {\n     want_foo(b); //~  ERROR mismatched types\n-                 //~| expected type `foo`\n-                 //~| found type `bar`\n-                 //~| expected struct `foo`, found struct `bar`\n+                 //~| expected type `Foo`\n+                 //~| found type `Bar`\n+                 //~| expected struct `Foo`, found struct `Bar`\n }\n \n fn main() {}"}, {"sha": "95bd0b4d6d81476e5ae3a62b6242cbb0f59ba581", "filename": "src/test/ui/terr-in-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-in-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-in-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-in-field.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/terr-in-field.rs:23:14\n    |\n LL |     want_foo(b); //~  ERROR mismatched types\n-   |              ^ expected struct `foo`, found struct `bar`\n+   |              ^ expected struct `Foo`, found struct `Bar`\n    |\n-   = note: expected type `foo`\n-              found type `bar`\n+   = note: expected type `Foo`\n+              found type `Bar`\n \n error: aborting due to previous error\n "}, {"sha": "7895209fad37a60209ccd873931290201ca69cb6", "filename": "src/test/ui/terr-sorts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-sorts.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n \n-struct foo {\n+struct Foo {\n     a: isize,\n     b: isize,\n }\n \n-type bar = Box<foo>;\n+type Bar = Box<Foo>;\n \n-fn want_foo(f: foo) {}\n-fn have_bar(b: bar) {\n+fn want_foo(f: Foo) {}\n+fn have_bar(b: Bar) {\n     want_foo(b); //~  ERROR mismatched types\n-                 //~| expected type `foo`\n-                 //~| found type `std::boxed::Box<foo>`\n+                 //~| expected type `Foo`\n+                 //~| found type `std::boxed::Box<Foo>`\n }\n \n fn main() {}"}, {"sha": "bc1f8f1a1eb60457c0781c535372cb374d19aca9", "filename": "src/test/ui/terr-sorts.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-sorts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fterr-sorts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-sorts.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/terr-sorts.rs:21:14\n    |\n LL |     want_foo(b); //~  ERROR mismatched types\n-   |              ^ expected struct `foo`, found struct `std::boxed::Box`\n+   |              ^ expected struct `Foo`, found struct `std::boxed::Box`\n    |\n-   = note: expected type `foo`\n-              found type `std::boxed::Box<foo>`\n+   = note: expected type `Foo`\n+              found type `std::boxed::Box<Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "c00afbadf2a6b545a6500ab472868891208a6b2b", "filename": "src/test/ui/traits/trait-impl-different-num-params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait foo {\n+trait Foo {\n     fn bar(&self, x: usize) -> Self;\n }\n-impl foo for isize {\n+impl Foo for isize {\n     fn bar(&self) -> isize {\n-        //~^ ERROR method `bar` has 1 parameter but the declaration in trait `foo::bar` has 2\n+        //~^ ERROR method `bar` has 1 parameter but the declaration in trait `Foo::bar` has 2\n         *self\n     }\n }"}, {"sha": "35b41f6ac7f8b48a57da9a48c3985148898821b0", "filename": "src/test/ui/traits/trait-impl-different-num-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,4 +1,4 @@\n-error[E0050]: method `bar` has 1 parameter but the declaration in trait `foo::bar` has 2\n+error[E0050]: method `bar` has 1 parameter but the declaration in trait `Foo::bar` has 2\n   --> $DIR/trait-impl-different-num-params.rs:15:12\n    |\n LL |     fn bar(&self, x: usize) -> Self;"}, {"sha": "492dd1d75c1778e4486b89b78345bc12dcf8d04c", "filename": "src/test/ui/traits/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(box_syntax)]\n \n+#[allow(non_camel_case_types)]\n trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }"}, {"sha": "e9e9950170a432ffeea373592af663f1874e2220", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,17 +1,17 @@\n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/trait-test-2.rs:18:14\n+  --> $DIR/trait-test-2.rs:19:14\n    |\n LL |     10.dup::<i32>(); //~ ERROR wrong number of type arguments: expected 0, found 1\n    |              ^^^ unexpected type argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/trait-test-2.rs:19:20\n+  --> $DIR/trait-test-2.rs:20:20\n    |\n LL |     10.blah::<i32, i32>(); //~ ERROR wrong number of type arguments: expected 1, found 2\n    |                    ^^^ unexpected type argument\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:20:16\n+  --> $DIR/trait-test-2.rs:21:16\n    |\n LL |     (box 10 as Box<bar>).dup();\n    |                ^^^^^^^^ the trait `bar` cannot be made into an object\n@@ -20,7 +20,7 @@ LL |     (box 10 as Box<bar>).dup();\n    = note: method `blah` has generic type parameters\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:20:6\n+  --> $DIR/trait-test-2.rs:21:6\n    |\n LL |     (box 10 as Box<bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object"}, {"sha": "73a0b919af8125d9ef17be44b3e31824531673ab", "filename": "src/test/ui/traits/trait-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)]\n trait foo { fn foo(&self); }\n \n impl isize for usize { fn foo(&self) {} } //~ ERROR trait"}, {"sha": "bd71347b7d5684cc50fca15c9cc071d4c621979d", "filename": "src/test/ui/traits/trait-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftraits%2Ftrait-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0404]: expected trait, found builtin type `isize`\n-  --> $DIR/trait-test.rs:13:6\n+  --> $DIR/trait-test.rs:14:6\n    |\n LL | impl isize for usize { fn foo(&self) {} } //~ ERROR trait\n    |      ^^^^^ not a trait"}, {"sha": "00b9e3fe5adb43bdb7117a99b7f27fd0c6c6a15f", "filename": "src/test/ui/type/type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_camel_case_types)]\n+\n trait Qux {}\n struct A;\n struct B;"}, {"sha": "05d61060e5e0ceebce9052efef3ab04e7a4f84ce", "filename": "src/test/ui/type/type-mismatch.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:25:17\n+  --> $DIR/type-mismatch.rs:27:17\n    |\n LL |     want::<foo>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `foo`, found usize\n@@ -8,7 +8,7 @@ LL |     want::<foo>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:26:17\n+  --> $DIR/type-mismatch.rs:28:17\n    |\n LL |     want::<bar>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `bar`, found usize\n@@ -17,7 +17,7 @@ LL |     want::<bar>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:27:24\n+  --> $DIR/type-mismatch.rs:29:24\n    |\n LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n    |                        ^ expected struct `Foo`, found usize\n@@ -26,7 +26,7 @@ LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:28:27\n+  --> $DIR/type-mismatch.rs:30:27\n    |\n LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n    |                           ^ expected struct `Foo`, found usize\n@@ -35,7 +35,7 @@ LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:29:22\n+  --> $DIR/type-mismatch.rs:31:22\n    |\n LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `Foo`, found usize\n@@ -44,7 +44,7 @@ LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:30:25\n+  --> $DIR/type-mismatch.rs:32:25\n    |\n LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `Foo`, found usize\n@@ -53,7 +53,7 @@ LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:31:22\n+  --> $DIR/type-mismatch.rs:33:22\n    |\n LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `Foo`, found usize\n@@ -62,7 +62,7 @@ LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:32:25\n+  --> $DIR/type-mismatch.rs:34:25\n    |\n LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `Foo`, found usize\n@@ -71,7 +71,7 @@ LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:36:19\n+  --> $DIR/type-mismatch.rs:38:19\n    |\n LL |     want::<usize>(f); //~ ERROR mismatched types\n    |                   ^ expected usize, found struct `foo`\n@@ -80,7 +80,7 @@ LL |     want::<usize>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:37:17\n+  --> $DIR/type-mismatch.rs:39:17\n    |\n LL |     want::<bar>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `bar`, found struct `foo`\n@@ -89,7 +89,7 @@ LL |     want::<bar>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:38:24\n+  --> $DIR/type-mismatch.rs:40:24\n    |\n LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n    |                        ^ expected struct `Foo`, found struct `foo`\n@@ -98,7 +98,7 @@ LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:39:27\n+  --> $DIR/type-mismatch.rs:41:27\n    |\n LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n    |                           ^ expected struct `Foo`, found struct `foo`\n@@ -107,7 +107,7 @@ LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:40:22\n+  --> $DIR/type-mismatch.rs:42:22\n    |\n LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `Foo`, found struct `foo`\n@@ -116,7 +116,7 @@ LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:41:25\n+  --> $DIR/type-mismatch.rs:43:25\n    |\n LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `Foo`, found struct `foo`\n@@ -125,7 +125,7 @@ LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:42:22\n+  --> $DIR/type-mismatch.rs:44:22\n    |\n LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `Foo`, found struct `foo`\n@@ -134,7 +134,7 @@ LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:43:25\n+  --> $DIR/type-mismatch.rs:45:25\n    |\n LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `Foo`, found struct `foo`\n@@ -143,7 +143,7 @@ LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n               found type `foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:47:19\n+  --> $DIR/type-mismatch.rs:49:19\n    |\n LL |     want::<usize>(f); //~ ERROR mismatched types\n    |                   ^ expected usize, found struct `Foo`\n@@ -152,7 +152,7 @@ LL |     want::<usize>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:48:17\n+  --> $DIR/type-mismatch.rs:50:17\n    |\n LL |     want::<foo>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `foo`, found struct `Foo`\n@@ -161,7 +161,7 @@ LL |     want::<foo>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:49:17\n+  --> $DIR/type-mismatch.rs:51:17\n    |\n LL |     want::<bar>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `bar`, found struct `Foo`\n@@ -170,7 +170,7 @@ LL |     want::<bar>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:50:24\n+  --> $DIR/type-mismatch.rs:52:24\n    |\n LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n    |                        ^ expected usize, found struct `foo`\n@@ -179,7 +179,7 @@ LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:51:27\n+  --> $DIR/type-mismatch.rs:53:27\n    |\n LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n    |                           ^ expected usize, found struct `foo`\n@@ -188,7 +188,7 @@ LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:52:25\n+  --> $DIR/type-mismatch.rs:54:25\n    |\n LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `B`, found struct `A`\n@@ -197,7 +197,7 @@ LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n               found type `Foo<_, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:53:22\n+  --> $DIR/type-mismatch.rs:55:22\n    |\n LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `bar`, found struct `foo`\n@@ -206,7 +206,7 @@ LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:54:25\n+  --> $DIR/type-mismatch.rs:56:25\n    |\n LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `bar`, found struct `foo`\n@@ -215,7 +215,7 @@ LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:55:23\n+  --> $DIR/type-mismatch.rs:57:23\n    |\n LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n    |                       ^\n@@ -227,7 +227,7 @@ LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:56:26\n+  --> $DIR/type-mismatch.rs:58:26\n    |\n LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                          ^ expected reference, found struct `Foo`\n@@ -236,7 +236,7 @@ LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:60:19\n+  --> $DIR/type-mismatch.rs:62:19\n    |\n LL |     want::<usize>(f); //~ ERROR mismatched types\n    |                   ^ expected usize, found struct `Foo`\n@@ -245,7 +245,7 @@ LL |     want::<usize>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:61:17\n+  --> $DIR/type-mismatch.rs:63:17\n    |\n LL |     want::<foo>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `foo`, found struct `Foo`\n@@ -254,7 +254,7 @@ LL |     want::<foo>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:62:17\n+  --> $DIR/type-mismatch.rs:64:17\n    |\n LL |     want::<bar>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `bar`, found struct `Foo`\n@@ -263,7 +263,7 @@ LL |     want::<bar>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:63:24\n+  --> $DIR/type-mismatch.rs:65:24\n    |\n LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n    |                        ^ expected usize, found struct `foo`\n@@ -272,7 +272,7 @@ LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:64:27\n+  --> $DIR/type-mismatch.rs:66:27\n    |\n LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n    |                           ^ expected usize, found struct `foo`\n@@ -281,7 +281,7 @@ LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, _>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:65:22\n+  --> $DIR/type-mismatch.rs:67:22\n    |\n LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `A`, found struct `B`\n@@ -290,7 +290,7 @@ LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n               found type `Foo<_, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:66:22\n+  --> $DIR/type-mismatch.rs:68:22\n    |\n LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `bar`, found struct `foo`\n@@ -299,7 +299,7 @@ LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:67:25\n+  --> $DIR/type-mismatch.rs:69:25\n    |\n LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `bar`, found struct `foo`\n@@ -308,7 +308,7 @@ LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, _>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:68:23\n+  --> $DIR/type-mismatch.rs:70:23\n    |\n LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n    |                       ^ expected &Foo<foo>, found struct `Foo`\n@@ -317,7 +317,7 @@ LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:69:26\n+  --> $DIR/type-mismatch.rs:71:26\n    |\n LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                          ^\n@@ -329,7 +329,7 @@ LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:73:19\n+  --> $DIR/type-mismatch.rs:75:19\n    |\n LL |     want::<usize>(f); //~ ERROR mismatched types\n    |                   ^ expected usize, found struct `Foo`\n@@ -338,7 +338,7 @@ LL |     want::<usize>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:74:17\n+  --> $DIR/type-mismatch.rs:76:17\n    |\n LL |     want::<foo>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `foo`, found struct `Foo`\n@@ -347,7 +347,7 @@ LL |     want::<foo>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:75:17\n+  --> $DIR/type-mismatch.rs:77:17\n    |\n LL |     want::<bar>(f); //~ ERROR mismatched types\n    |                 ^ expected struct `bar`, found struct `Foo`\n@@ -356,7 +356,7 @@ LL |     want::<bar>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:76:24\n+  --> $DIR/type-mismatch.rs:78:24\n    |\n LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n    |                        ^ expected usize, found struct `foo`\n@@ -365,7 +365,7 @@ LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:77:27\n+  --> $DIR/type-mismatch.rs:79:27\n    |\n LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n    |                           ^ expected usize, found struct `foo`\n@@ -374,7 +374,7 @@ LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, _, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:78:22\n+  --> $DIR/type-mismatch.rs:80:22\n    |\n LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `A`, found struct `B`\n@@ -383,7 +383,7 @@ LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n               found type `Foo<_, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:79:25\n+  --> $DIR/type-mismatch.rs:81:25\n    |\n LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `B`, found struct `A`\n@@ -392,7 +392,7 @@ LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n               found type `Foo<_, _, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:80:22\n+  --> $DIR/type-mismatch.rs:82:22\n    |\n LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n    |                      ^ expected struct `bar`, found struct `foo`\n@@ -401,7 +401,7 @@ LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:81:25\n+  --> $DIR/type-mismatch.rs:83:25\n    |\n LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n    |                         ^ expected struct `bar`, found struct `foo`\n@@ -410,7 +410,7 @@ LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, _, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:82:23\n+  --> $DIR/type-mismatch.rs:84:23\n    |\n LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n    |                       ^ expected &Foo<foo>, found struct `Foo`\n@@ -419,7 +419,7 @@ LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n               found type `Foo<foo, B, A>`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:83:26\n+  --> $DIR/type-mismatch.rs:85:26\n    |\n LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n    |                          ^ expected reference, found struct `Foo`"}, {"sha": "2b7a201c06054621f5b59705d4aa228314e32fe6", "filename": "src/test/ui/type/type-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct t1 { //~ ERROR E0072\n+struct T1 { //~ ERROR E0072\n     foo: isize,\n-    foolish: t1\n+    foolish: T1\n }\n \n fn main() { }"}, {"sha": "266bb228277088f779e48433dde3ddc749929229", "filename": "src/test/ui/type/type-recursive.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,13 +1,13 @@\n-error[E0072]: recursive type `t1` has infinite size\n+error[E0072]: recursive type `T1` has infinite size\n   --> $DIR/type-recursive.rs:11:1\n    |\n-LL | struct t1 { //~ ERROR E0072\n+LL | struct T1 { //~ ERROR E0072\n    | ^^^^^^^^^ recursive type has infinite size\n LL |     foo: isize,\n-LL |     foolish: t1\n+LL |     foolish: T1\n    |     ----------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `t1` representable\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `T1` representable\n \n error: aborting due to previous error\n "}, {"sha": "6be6f221e40839141abcccf433793db49c664e5e", "filename": "src/test/ui/unique-pinned-nocopy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n #[derive(Debug)]\n-struct r {\n+struct R {\n   b: bool,\n }\n \n-impl Drop for r {\n+impl Drop for R {\n     fn drop(&mut self) {}\n }\n \n fn main() {\n-    let i = Box::new(r { b: true });\n+    let i = Box::new(R { b: true });\n     let _j = i.clone(); //~ ERROR no method named `clone` found\n     println!(\"{:?}\", i);\n }"}, {"sha": "7a3f1a6b734f27d8faf70fb3b3fa8b6b43c929d7", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: no method named `clone` found for type `std::boxed::Box<r>` in the current scope\n+error[E0599]: no method named `clone` found for type `std::boxed::Box<R>` in the current scope\n   --> $DIR/unique-pinned-nocopy.rs:22:16\n    |\n LL |     let _j = i.clone(); //~ ERROR no method named `clone` found\n    |                ^^^^^\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `std::boxed::Box<r> : std::clone::Clone`\n+           `std::boxed::Box<R> : std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "577edc1671fc1a4bb3adc9572ad406ed5ebcb816", "filename": "src/test/ui/unresolved/unresolved-import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -27,11 +27,11 @@ mod bar {\n }\n \n mod food {\n-    pub use self::zug::baz::{self as bag, foobar as beans};\n+    pub use self::zug::baz::{self as bag, Foobar as beans};\n \n     mod zug {\n         pub mod baz {\n-            pub struct foobar;\n+            pub struct Foobar;\n         }\n     }\n }"}, {"sha": "ea93373ea73b8afbc372c629629b83a99d80bb4f", "filename": "src/test/ui/vec/vec-res-add.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n #[derive(Debug)]\n-struct r {\n+struct R {\n   i:isize\n }\n \n-fn r(i:isize) -> r { r { i: i } }\n+fn r(i:isize) -> R { R { i: i } }\n \n-impl Drop for r {\n+impl Drop for R {\n     fn drop(&mut self) {}\n }\n "}, {"sha": "1d2d2b448cbc71816a49cc17946302cce28fd1d7", "filename": "src/test/ui/vec/vec-res-add.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b96659e4e9b2f31431df48f47c219957e2666a/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr?ref=14b96659e4e9b2f31431df48f47c219957e2666a", "patch": "@@ -1,10 +1,10 @@\n-error[E0369]: binary operation `+` cannot be applied to type `std::vec::Vec<r>`\n+error[E0369]: binary operation `+` cannot be applied to type `std::vec::Vec<R>`\n   --> $DIR/vec-res-add.rs:26:13\n    |\n LL |     let k = i + j;\n    |             ^^^^^\n    |\n-   = note: an implementation of `std::ops::Add` might be missing for `std::vec::Vec<r>`\n+   = note: an implementation of `std::ops::Add` might be missing for `std::vec::Vec<R>`\n \n error: aborting due to previous error\n "}]}