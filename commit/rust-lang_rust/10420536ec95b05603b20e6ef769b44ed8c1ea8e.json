{"sha": "10420536ec95b05603b20e6ef769b44ed8c1ea8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDIwNTM2ZWM5NWIwNTYwM2IyMGU2ZWY3NjliNDRlZDhjMWVhOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-20T22:19:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-20T22:19:50Z"}, "message": "Auto merge of #49221 - kennytm:rollup, r=kennytm\n\nRollup of 3 pull requests\n\n- Successful merges: #49182, #49196, #49217\n- Failed merges:", "tree": {"sha": "ddca9d0818576628355ac46f1357c1e08f3960ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddca9d0818576628355ac46f1357c1e08f3960ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10420536ec95b05603b20e6ef769b44ed8c1ea8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10420536ec95b05603b20e6ef769b44ed8c1ea8e", "html_url": "https://github.com/rust-lang/rust/commit/10420536ec95b05603b20e6ef769b44ed8c1ea8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10420536ec95b05603b20e6ef769b44ed8c1ea8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75af15ee6ca0c12b699a17984b033363cd25e9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75af15ee6ca0c12b699a17984b033363cd25e9c3", "html_url": "https://github.com/rust-lang/rust/commit/75af15ee6ca0c12b699a17984b033363cd25e9c3"}, {"sha": "de9fb3be1f7c873be4ae5111e20c7d776cd535c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9fb3be1f7c873be4ae5111e20c7d776cd535c7", "html_url": "https://github.com/rust-lang/rust/commit/de9fb3be1f7c873be4ae5111e20c7d776cd535c7"}], "stats": {"total": 128, "additions": 83, "deletions": 45}, "files": [{"sha": "b2aba305aedc4347a66dc626d5270bcc34071e33", "filename": ".travis.yml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10420536ec95b05603b20e6ef769b44ed8c1ea8e/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/10420536ec95b05603b20e6ef769b44ed8c1ea8e/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=10420536ec95b05603b20e6ef769b44ed8c1ea8e", "patch": "@@ -318,6 +318,8 @@ before_deploy:\n \n deploy:\n   - provider: s3\n+    edge:\n+      branch: s3-eager-autoload\n     bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy\n@@ -334,6 +336,8 @@ deploy:\n   # this is the same as the above deployment provider except that it uploads to\n   # a slightly different directory and has a different trigger\n   - provider: s3\n+    edge:\n+      branch: s3-eager-autoload\n     bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy\n@@ -351,6 +355,8 @@ deploy:\n   # try branch. Travis does not appear to provide a way to use \"or\" in these\n   # conditions.\n   - provider: s3\n+    edge:\n+      branch: s3-eager-autoload\n     bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy\n@@ -365,6 +371,8 @@ deploy:\n       condition: $DEPLOY = 1\n \n   - provider: s3\n+    edge:\n+      branch: s3-eager-autoload\n     bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy"}, {"sha": "675457905eade8de5dcb485c065c7461aec2066e", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10420536ec95b05603b20e6ef769b44ed8c1ea8e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10420536ec95b05603b20e6ef769b44ed8c1ea8e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=10420536ec95b05603b20e6ef769b44ed8c1ea8e", "patch": "@@ -184,7 +184,7 @@ version = \"0.27.0\"\n dependencies = [\n  \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clap 2.31.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crates-io 0.16.0\",\n  \"crossbeam 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -273,7 +273,7 @@ dependencies = [\n \n [[package]]\n name = \"clap\"\n-version = \"2.31.1\"\n+version = \"2.31.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -840,7 +840,7 @@ version = \"0.1.0\"\n name = \"installer\"\n version = \"0.0.0\"\n dependencies = [\n- \"clap 2.31.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1033,7 +1033,7 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clap 2.31.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1322,7 +1322,7 @@ name = \"racer\"\n version = \"2.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.31.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1533,7 +1533,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.31.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mdbook 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2699,7 +2699,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cc 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedf677519ac9e865c4ff43ef8f930773b37ed6e6ea61b6b83b400a7b5787f49\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9\"\n-\"checksum clap 2.31.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5dc18f6f4005132120d9711636b32c46a233fad94df6217fa1d81c5e97a9f200\"\n+\"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\n \"checksum cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56d741ea7a69e577f6d06b36b7dff4738f680593dc27a701ffa8506b73ce28bb\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\""}, {"sha": "9ff3d25a45ae412081110b6f9166471857bd0371", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 67, "deletions": 35, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/10420536ec95b05603b20e6ef769b44ed8c1ea8e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10420536ec95b05603b20e6ef769b44ed8c1ea8e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=10420536ec95b05603b20e6ef769b44ed8c1ea8e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::TypeFoldable;\n+use std::fmt::Debug;\n \n use super::*;\n \n@@ -1081,18 +1082,25 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     return None;\n                 }\n \n+                let mut bounds_vec = bounds.into_iter().collect();\n+                self.sort_where_bounds(&mut bounds_vec);\n+\n                 Some(WherePredicate::BoundPredicate {\n                     ty,\n-                    bounds: bounds.into_iter().collect(),\n+                    bounds: bounds_vec,\n                 })\n             })\n             .chain(\n                 lifetime_to_bounds\n                     .into_iter()\n                     .filter(|&(_, ref bounds)| !bounds.is_empty())\n-                    .map(|(lifetime, bounds)| WherePredicate::RegionPredicate {\n-                        lifetime,\n-                        bounds: bounds.into_iter().collect(),\n+                    .map(|(lifetime, bounds)| {\n+                        let mut bounds_vec = bounds.into_iter().collect();\n+                        self.sort_where_lifetimes(&mut bounds_vec);\n+                        WherePredicate::RegionPredicate {\n+                            lifetime,\n+                            bounds: bounds_vec,\n+                        }\n                     }),\n             )\n             .collect()\n@@ -1372,40 +1380,64 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // a given set of predicates always appears in the same order -\n     // both for visual consistency between 'rustdoc' runs, and to\n     // make writing tests much easier\n-    fn sort_where_predicates(&self, predicates: &mut Vec<WherePredicate>) {\n+    #[inline]\n+    fn sort_where_predicates(&self, mut predicates: &mut Vec<WherePredicate>) {\n         // We should never have identical bounds - and if we do,\n         // they're visually identical as well. Therefore, using\n         // an unstable sort is fine.\n-        predicates.sort_unstable_by(|first, second| {\n-            // This might look horrendously hacky, but it's actually not that bad.\n-            //\n-            // For performance reasons, we use several different FxHashMaps\n-            // in the process of computing the final set of where predicates.\n-            // However, the iteration order of a HashMap is completely unspecified.\n-            // In fact, the iteration of an FxHashMap can even vary between platforms,\n-            // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n-            //\n-            // Obviously, it's extremely undesireable for documentation rendering\n-            // to be depndent on the platform it's run on. Apart from being confusing\n-            // to end users, it makes writing tests much more difficult, as predicates\n-            // can appear in any order in the final result.\n-            //\n-            // To solve this problem, we sort WherePredicates by their Debug\n-            // string. The thing to keep in mind is that we don't really\n-            // care what the final order is - we're synthesizing an impl\n-            // ourselves, so any order can be considered equally valid.\n-            // By sorting the predicates, however, we ensure that for\n-            // a given codebase, all auto-trait impls always render\n-            // in exactly the same way.\n-            //\n-            // Using the Debug impementation for sorting prevents\n-            // us from needing to write quite a bit of almost\n-            // entirely useless code (e.g. how should two\n-            // Types be sorted relative to each other).\n-            // This approach is probably somewhat slower, but\n-            // the small number of items involved (impls\n-            // rarely have more than a few bounds) means\n-            // that it shouldn't matter in practice.\n+        self.unstable_debug_sort(&mut predicates);\n+    }\n+\n+    // Ensure that the bounds are in a consistent order. The precise\n+    // ordering doesn't actually matter, but it's important that\n+    // a given set of bounds always appears in the same order -\n+    // both for visual consistency between 'rustdoc' runs, and to\n+    // make writing tests much easier\n+    #[inline]\n+    fn sort_where_bounds(&self, mut bounds: &mut Vec<TyParamBound>) {\n+        // We should never have identical bounds - and if we do,\n+        // they're visually identical as well. Therefore, using\n+        // an unstable sort is fine.\n+        self.unstable_debug_sort(&mut bounds);\n+    }\n+\n+    #[inline]\n+    fn sort_where_lifetimes(&self, mut bounds: &mut Vec<Lifetime>) {\n+        // We should never have identical bounds - and if we do,\n+        // they're visually identical as well. Therefore, using\n+        // an unstable sort is fine.\n+        self.unstable_debug_sort(&mut bounds);\n+    }\n+\n+    // This might look horrendously hacky, but it's actually not that bad.\n+    //\n+    // For performance reasons, we use several different FxHashMaps\n+    // in the process of computing the final set of where predicates.\n+    // However, the iteration order of a HashMap is completely unspecified.\n+    // In fact, the iteration of an FxHashMap can even vary between platforms,\n+    // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n+    //\n+    // Obviously, it's extremely undesireable for documentation rendering\n+    // to be depndent on the platform it's run on. Apart from being confusing\n+    // to end users, it makes writing tests much more difficult, as predicates\n+    // can appear in any order in the final result.\n+    //\n+    // To solve this problem, we sort WherePredicates and TyParamBounds\n+    // by their Debug string. The thing to keep in mind is that we don't really\n+    // care what the final order is - we're synthesizing an impl or bound\n+    // ourselves, so any order can be considered equally valid. By sorting the\n+    // predicates and bounds, however, we ensure that for a given codebase, all\n+    // auto-trait impls always render in exactly the same way.\n+    //\n+    // Using the Debug impementation for sorting prevents us from needing to\n+    // write quite a bit of almost entirely useless code (e.g. how should two\n+    // Types be sorted relative to each other). It also allows us to solve the\n+    // problem for both WherePredicates and TyParamBounds at the same time. This\n+    // approach is probably somewhat slower, but the small number of items\n+    // involved (impls rarely have more than a few bounds) means that it\n+    // shouldn't matter in practice.\n+    fn unstable_debug_sort<T: Debug>(&self, vec: &mut Vec<T>) {\n+        vec.sort_unstable_by(|first, second| {\n             format!(\"{:?}\", first).cmp(&format!(\"{:?}\", second))\n         });\n     }"}, {"sha": "0b37f2ed3179021aaa041687fc0bde509a2ea7df", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10420536ec95b05603b20e6ef769b44ed8c1ea8e/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10420536ec95b05603b20e6ef769b44ed8c1ea8e/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=10420536ec95b05603b20e6ef769b44ed8c1ea8e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n pub struct Inner<T> {\n     field: T,\n }"}, {"sha": "d10ec661b06420654bbc4ed0ccd32295698aa1dc", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=10420536ec95b05603b20e6ef769b44ed8c1ea8e", "patch": "@@ -1 +1 @@\n-Subproject commit d6c3983fe3bd8fa06b54712e53fb23645598188b\n+Subproject commit d10ec661b06420654bbc4ed0ccd32295698aa1dc"}]}