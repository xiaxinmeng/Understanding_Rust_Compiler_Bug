{"sha": "4739942e7415d89425453d25427c51f96328c52b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Mzk5NDJlNzQxNWQ4OTQyNTQ1M2QyNTQyN2M1MWY5NjMyOGM1MmI=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2011-10-31T13:32:28Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-31T15:15:32Z"}, "message": "Correct handling of non-numeric chars in parse_buf\n\nWithout this fix, int::parse_buf and uint::parse_buf return incorrect results\nfor any strings that contain non-numeric characters.  Fixes #1102.", "tree": {"sha": "f4c2808aa5abae99be1499238f0092ebfc9d351c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c2808aa5abae99be1499238f0092ebfc9d351c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4739942e7415d89425453d25427c51f96328c52b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4739942e7415d89425453d25427c51f96328c52b", "html_url": "https://github.com/rust-lang/rust/commit/4739942e7415d89425453d25427c51f96328c52b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4739942e7415d89425453d25427c51f96328c52b/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f37accb290e29f812b324853f991c2c575e0de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f37accb290e29f812b324853f991c2c575e0de6", "html_url": "https://github.com/rust-lang/rust/commit/6f37accb290e29f812b324853f991c2c575e0de6"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "1dae4488b0b9b6b2f3101ee7102be5393821feaf", "filename": "src/lib/int.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4739942e7415d89425453d25427c51f96328c52b/src%2Flib%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4739942e7415d89425453d25427c51f96328c52b/src%2Flib%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fint.rs?ref=4739942e7415d89425453d25427c51f96328c52b", "patch": "@@ -112,7 +112,15 @@ fn parse_buf(buf: [u8], radix: uint) -> int {\n     }\n     let n = 0;\n     while true {\n-        n += (buf[i] - ('0' as u8) as int) * power;\n+        let digit = alt buf[i] as char {\n+            '0' to '9' { buf[i] - ('0' as u8) }\n+            'a' to 'z' { 10u8 + buf[i] - ('a' as u8) }\n+            'A' to 'Z' { 10u8 + buf[i] - ('A' as u8) }\n+        };\n+        if (digit as uint) >= radix {\n+            fail;\n+        }\n+        n += (digit as int) * power;\n         power *= radix as int;\n         if i <= start { ret n; }\n         i -= 1u;"}, {"sha": "12e2f65b9e608e0e39ca02a5667fee5d791f81cb", "filename": "src/lib/uint.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4739942e7415d89425453d25427c51f96328c52b/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4739942e7415d89425453d25427c51f96328c52b/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=4739942e7415d89425453d25427c51f96328c52b", "patch": "@@ -100,7 +100,15 @@ fn parse_buf(buf: [u8], radix: uint) -> uint {\n     let power = 1u;\n     let n = 0u;\n     while true {\n-        n += (buf[i] - ('0' as u8) as uint) * power;\n+        let digit = alt buf[i] as char {\n+            '0' to '9' { buf[i] - ('0' as u8) }\n+            'a' to 'z' { 10u8 + buf[i] - ('a' as u8) }\n+            'A' to 'Z' { 10u8 + buf[i] - ('A' as u8) }\n+        };\n+        if (digit as uint) >= radix {\n+            fail;\n+        }\n+        n += (digit as uint) * power;\n         power *= radix;\n         if i == 0u { ret n; }\n         i -= 1u;"}, {"sha": "1bd67d5c45ecfca7f22c2dff99ef11799b024c8c", "filename": "src/test/stdtest/int.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4739942e7415d89425453d25427c51f96328c52b/src%2Ftest%2Fstdtest%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4739942e7415d89425453d25427c51f96328c52b/src%2Ftest%2Fstdtest%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fint.rs?ref=4739942e7415d89425453d25427c51f96328c52b", "patch": "@@ -2,6 +2,7 @@\n use std;\n import std::int;\n import std::str::eq;\n+import std::str::bytes;\n \n #[test]\n fn test_from_str() {\n@@ -18,6 +19,27 @@ fn test_from_str() {\n     assert(int::from_str(\"-00100\") == -100);\n }\n \n+#[test]\n+fn test_parse_buf() {\n+    assert (int::parse_buf(bytes(\"123\"), 10u) == 123);\n+    assert (int::parse_buf(bytes(\"1001\"), 2u) == 9);\n+    assert (int::parse_buf(bytes(\"123\"), 8u) == 83);\n+    assert (int::parse_buf(bytes(\"123\"), 16u) == 291);\n+    assert (int::parse_buf(bytes(\"ffff\"), 16u) == 65535);\n+    assert (int::parse_buf(bytes(\"FFFF\"), 16u) == 65535);\n+    assert (int::parse_buf(bytes(\"z\"), 36u) == 35);\n+    assert (int::parse_buf(bytes(\"Z\"), 36u) == 35);\n+\n+    assert (int::parse_buf(bytes(\"-123\"), 10u) == -123);\n+    assert (int::parse_buf(bytes(\"-1001\"), 2u) == -9);\n+    assert (int::parse_buf(bytes(\"-123\"), 8u) == -83);\n+    assert (int::parse_buf(bytes(\"-123\"), 16u) == -291);\n+    assert (int::parse_buf(bytes(\"-ffff\"), 16u) == -65535);\n+    assert (int::parse_buf(bytes(\"-FFFF\"), 16u) == -65535);\n+    assert (int::parse_buf(bytes(\"-z\"), 36u) == -35);\n+    assert (int::parse_buf(bytes(\"-Z\"), 36u) == -35);\n+}\n+\n #[test]\n fn test_to_str() {\n     assert (eq(int::to_str(0, 10u), \"0\"));"}, {"sha": "35bd65c0c057f6561f00629e1a8df7f8b301739a", "filename": "src/test/stdtest/uint.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4739942e7415d89425453d25427c51f96328c52b/src%2Ftest%2Fstdtest%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4739942e7415d89425453d25427c51f96328c52b/src%2Ftest%2Fstdtest%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fuint.rs?ref=4739942e7415d89425453d25427c51f96328c52b", "patch": "@@ -3,6 +3,26 @@\n // -*- rust -*-\n use std;\n import std::uint;\n+import std::str::bytes;\n+\n+#[test]\n+fn test_from_str() {\n+    assert (uint::from_str(\"0\") == 0u);\n+    assert (uint::from_str(\"3\") == 3u);\n+    assert (uint::from_str(\"10\") == 10u);\n+    assert (uint::from_str(\"123456789\") == 123456789u);\n+    assert (uint::from_str(\"00100\") == 100u);\n+}\n+\n+#[test]\n+fn test_parse_buf() {\n+    assert (uint::parse_buf(bytes(\"123\"), 10u) == 123u);\n+    assert (uint::parse_buf(bytes(\"1001\"), 2u) == 9u);\n+    assert (uint::parse_buf(bytes(\"123\"), 8u) == 83u);\n+    assert (uint::parse_buf(bytes(\"123\"), 16u) == 291u);\n+    assert (uint::parse_buf(bytes(\"ffff\"), 16u) == 65535u);\n+    assert (uint::parse_buf(bytes(\"z\"), 36u) == 35u);\n+}\n \n #[test]\n fn test_next_power_of_two() {\n@@ -53,4 +73,4 @@ fn test_overflows() {\n    assert (uint::max_value() > 0u);\n    assert (uint::min_value() <= 0u);\n    assert (uint::min_value() + uint::max_value() + 1u == 0u);\n-}\n\\ No newline at end of file\n+}"}]}