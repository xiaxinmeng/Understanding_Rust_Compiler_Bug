{"sha": "413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxM2JmYTRiOThhYzNhNTljNTdlYTlmYThjZmYyZDg3MDYyZmRjMjM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-01T00:47:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "Wording changes to object unsafe trait errors\n\nStemming from the thread at https://twitter.com/indygreg/status/1223279056398929920", "tree": {"sha": "877f1b4075dae6f201a8734480da9cd0dbaa5a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/877f1b4075dae6f201a8734480da9cd0dbaa5a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "html_url": "https://github.com/rust-lang/rust/commit/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "html_url": "https://github.com/rust-lang/rust/commit/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3"}], "stats": {"total": 423, "additions": 332, "deletions": 91}, "files": [{"sha": "f2cc8a303a95216f2d35650bb947bf712aada14c", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1034,6 +1034,10 @@ pub fn report_object_safety_error(\n     violations: Vec<ObjectSafetyViolation>,\n ) -> DiagnosticBuilder<'tcx> {\n     let trait_str = tcx.def_path_str(trait_def_id);\n+    let trait_span = tcx.hir().get_if_local(trait_def_id).and_then(|node| match node {\n+        hir::Node::Item(item) => Some(item.ident.span),\n+        _ => None,\n+    });\n     let span = tcx.sess.source_map().def_span(span);\n     let mut err = struct_span_err!(\n         tcx.sess,\n@@ -1045,6 +1049,7 @@ pub fn report_object_safety_error(\n     err.span_label(span, format!(\"the trait `{}` cannot be made into an object\", trait_str));\n \n     let mut reported_violations = FxHashSet::default();\n+    let mut had_span_label = false;\n     for violation in violations {\n         if let ObjectSafetyViolation::SizedSelf(sp) = &violation {\n             if !sp.is_empty() {\n@@ -1055,15 +1060,28 @@ pub fn report_object_safety_error(\n         }\n         if reported_violations.insert(violation.clone()) {\n             let spans = violation.spans();\n+            let msg = if trait_span.is_none() || spans.is_empty() {\n+                format!(\"the trait cannot be made into an object because {}\", violation.error_msg())\n+            } else {\n+                had_span_label = true;\n+                format!(\"...because {}\", violation.error_msg())\n+            };\n             if spans.is_empty() {\n-                err.note(&violation.error_msg());\n+                err.note(&msg);\n             } else {\n                 for span in spans {\n-                    err.span_label(span, violation.error_msg());\n+                    err.span_label(span, &msg);\n                 }\n             }\n+            if let (Some(_), Some(note)) = (trait_span, violation.solution()) {\n+                // Only provide the help if its a local trait, otherwise it's not actionable.\n+                err.help(&note);\n+            }\n         }\n     }\n+    if let (Some(trait_span), true) = (trait_span, had_span_label) {\n+        err.span_label(trait_span, \"this trait cannot be made into an object...\");\n+    }\n \n     if tcx.sess.trait_methods_not_found.borrow().contains(&span) {\n         // Avoid emitting error caused by non-existing method (#58734)"}, {"sha": "ac9e4950b72cf22640bcd68cd2b9211239ec0628", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -43,12 +43,9 @@ pub enum ObjectSafetyViolation {\n impl ObjectSafetyViolation {\n     pub fn error_msg(&self) -> Cow<'static, str> {\n         match *self {\n-            ObjectSafetyViolation::SizedSelf(_) => {\n-                \"traits that require `Self: Sized` cannot be made into an object\".into()\n-            }\n+            ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf => {\n-                \"the trait cannot use `Self` as a type parameter \\\n-                 in the supertraits or where-clauses\"\n+                \"it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\"\n                     .into()\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) => {\n@@ -63,19 +60,45 @@ impl ObjectSafetyViolation {\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n                 _,\n-            ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n+            ) => {\n+                format!(\"method `{}` references the `Self` type in its `where` clause\", name).into()\n+            }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) => {\n                 format!(\"method `{}` has generic type parameters\", name).into()\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n                 format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into()\n             }\n+            ObjectSafetyViolation::AssocConst(_, DUMMY_SP) => {\n+                \"it cannot contain associated consts\".into()\n+            }\n             ObjectSafetyViolation::AssocConst(name, _) => {\n-                format!(\"the trait cannot contain associated consts like `{}`\", name).into()\n+                format!(\"it cannot contain associated consts like `{}`\", name).into()\n             }\n         }\n     }\n \n+    pub fn solution(&self) -> Option<String> {\n+        Some(match *self {\n+            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf => {\n+                return None;\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) => format!(\n+                \"consider turning `{}` into a method by giving it a `&self` argument or \\\n+                 constraining it with `where Self: Sized`\",\n+                name\n+            ),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n+                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n+                    .into()\n+            }\n+            ObjectSafetyViolation::AssocConst(name, _)\n+            | ObjectSafetyViolation::Method(name, ..) => {\n+                format!(\"consider moving `{}` to another trait\", name)\n+            }\n+        })\n+    }\n+\n     pub fn spans(&self) -> SmallVec<[Span; 1]> {\n         // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n         // diagnostics use a `note` instead of a `span_label`.\n@@ -190,7 +213,21 @@ fn object_safety_violations_for_trait(\n                         tcx.def_path_str(trait_def_id)\n                     ),\n                 );\n-                err.span_label(*span, violation.error_msg());\n+                let node = tcx.hir().get_if_local(trait_def_id);\n+                let msg = if let Some(hir::Node::Item(item)) = node {\n+                    err.span_label(item.ident.span, \"this trait cannot be made into an object...\");\n+                    format!(\"...because {}\", violation.error_msg())\n+                } else {\n+                    format!(\n+                        \"the trait cannot be made into an object because {}\",\n+                        violation.error_msg()\n+                    )\n+                };\n+                err.span_label(*span, &msg);\n+                if let (Some(_), Some(note)) = (node, violation.solution()) {\n+                    // Only provide the help if its a local trait, otherwise it's not actionable.\n+                    err.help(&note);\n+                }\n                 err.emit();\n                 false\n             } else {"}, {"sha": "b9101c86d218a8128a685782f3468b43cc56313a", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n LL |     const N: usize;\n-   |           - the trait cannot contain associated consts like `N`\n+   |           - ...because it cannot contain associated consts like `N`\n ...\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = help: consider moving `N` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "e8442c6c9ac149d0da4ba61423c0753b84ec3132", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n-   |           - the trait cannot contain associated consts like `X`\n+   |           - ...because it cannot contain associated consts like `X`\n ...\n LL | impl dyn Bar {}\n    |      ^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `X` to another trait\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-48027.rs:3:32"}, {"sha": "c999cabcc14132815618fa4a196d87945b6a1b2f", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,9 +2,13 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |                          -- method `eq` references the `Self` type in its parameters or return type\n+   |       -------------      -- ...because method `eq` references the `Self` type in its parameters or return type\n+   |       |\n+   |       this trait cannot be made into an object...\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = help: consider moving `eq` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "333754891c16457cdfcdb1b41164f175b6b79e76", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -16,7 +16,7 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n LL |     let _: &Copy + 'static;\n    |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n-   = note: traits that require `Self: Sized` cannot be made into an object\n+   = note: the trait cannot be made into an object because it requires `Self: Sized`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "050ea63aa4fa8a8ab9b7bcfd2c66e9054b387775", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -7,11 +7,15 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL | trait SomeTrait {\n+   |       --------- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:12:9"}, {"sha": "c736fbcf92a8eb96805ea3ed80d021f2a3ef0774", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -7,11 +7,15 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL | trait SomeTrait {\n+   |       --------- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:10:9"}, {"sha": "62b6f4cf246922dafd9d44986578be4d43b1b21e", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:16\n    |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n LL |     fn foo(&self) -> Self;\n-   |        --- method `foo` references the `Self` type in its parameters or return type\n+   |        --- ...because method `foo` references the `Self` type in its parameters or return type\n ...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    |                ^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "290598806689822fe6e442ab4156f1ed1cffa929", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,43 +2,59 @@ error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:38\n    |\n LL | trait NonObjectSafe1: Sized {}\n-   |                       ----- traits that require `Self: Sized` cannot be made into an object\n+   |       --------------  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n    |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n \n error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n    |\n+LL | trait NonObjectSafe2 {\n+   |       -------------- this trait cannot be made into an object...\n LL |     fn static_fn() {}\n-   |        --------- associated function `static_fn` has no `self` parameter\n+   |        --------- ...because associated function `static_fn` has no `self` parameter\n ...\n LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+   |\n+   = help: consider turning `static_fn` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:35\n    |\n+LL | trait NonObjectSafe3 {\n+   |       -------------- this trait cannot be made into an object...\n LL |     fn foo<T>(&self);\n-   |        --- method `foo` has generic type parameters\n+   |        --- ...because method `foo` has generic type parameters\n ...\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n+LL | trait NonObjectSafe4 {\n+   |       -------------- this trait cannot be made into an object...\n LL |     fn foo(&self, &Self);\n-   |        --- method `foo` references the `Self` type in its parameters or return type\n+   |        --- ...because method `foo` references the `Self` type in its parameters or return type\n ...\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:6\n    |\n LL | trait NonObjectSafe1: Sized {}\n-   |                       ----- traits that require `Self: Sized` cannot be made into an object\n+   |       --------------  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL | impl Trait for dyn NonObjectSafe1 {}\n    |      ^^^^^ the trait `NonObjectSafe1` cannot be made into an object"}, {"sha": "1443be0b30ebe06178d3d632c1ae200a543df43b", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,20 +1,28 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:21:13\n    |\n+LL | trait NotObjectSafe {\n+   |       ------------- this trait cannot be made into an object...\n LL |     fn foo() -> Self;\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL | fn car() -> dyn NotObjectSafe {\n    |             ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n    |\n+LL | trait NotObjectSafe {\n+   |       ------------- this trait cannot be made into an object...\n LL |     fn foo() -> Self;\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL | fn cat() -> Box<dyn NotObjectSafe> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b3ba7aecad0dbd7b175cdcf0205d92d5cfbb5ad3", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,10 +2,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:11\n    |\n LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n-   |                    --- method `foo` has generic type parameters\n+   |                    --- ...because method `foo` has generic type parameters\n+LL | pub trait Bar: Foo { }\n+   |           --- this trait cannot be made into an object...\n ...\n LL | fn foo(b: &dyn Bar) {\n    |           ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "22e744f88417137dff805c7be97fe807374951d4", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n+LL | trait Qiz {\n+   |       --- this trait cannot be made into an object...\n LL |   fn qiz();\n-   |      --- associated function `qiz` has no `self` parameter\n+   |      --- ...because associated function `qiz` has no `self` parameter\n ...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+   |\n+   = help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error: aborting due to previous error\n "}, {"sha": "b6033e47b1a44d88edd1503e77631317083e60a9", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,20 +2,29 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n LL |     fn foo<T>(&self, val: T);\n-   |        --- method `foo` has generic type parameters\n+   |        --- ...because method `foo` has generic type parameters\n+...\n+LL | trait Bar: Foo { }\n+   |       --- this trait cannot be made into an object...\n ...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n LL |     fn foo<T>(&self, val: T);\n-   |        --- method `foo` has generic type parameters\n+   |        --- ...because method `foo` has generic type parameters\n+...\n+LL | trait Bar: Foo { }\n+   |       --- this trait cannot be made into an object...\n ...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `foo` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n    = note: required by cast to type `&mut dyn Bar`\n "}, {"sha": "ca2611e0f9eb5daa13b191c61591eaf247f261cc", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,9 +2,10 @@ error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n LL | trait Array: Sized + Copy {}\n-   |              -----   ---- traits that require `Self: Sized` cannot be made into an object\n-   |              |\n-   |              traits that require `Self: Sized` cannot be made into an object\n+   |       -----  -----   ---- ...because it requires `Self: Sized`\n+   |       |      |\n+   |       |      ...because it requires `Self: Sized`\n+   |       this trait cannot be made into an object...\n ...\n LL |     &dyn Array;\n    |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n@@ -13,9 +14,10 @@ error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:4:13\n    |\n LL | trait Array: Sized + Copy {}\n-   |              -----   ---- traits that require `Self: Sized` cannot be made into an object\n-   |              |\n-   |              traits that require `Self: Sized` cannot be made into an object\n+   |       -----  -----   ---- ...because it requires `Self: Sized`\n+   |       |      |\n+   |       |      ...because it requires `Self: Sized`\n+   |       this trait cannot be made into an object...\n ...\n LL |     let _ = x\n    |             ^ the trait `Array` cannot be made into an object"}, {"sha": "2744fb91d6fe1c4278c2a18ef180ad3d65f2a064", "filename": "src/test/ui/issues/issue-26056.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Map` cannot be made into an object\n LL |         as &dyn Map<Key=u32,MapValue=u32>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "5bed9a77d1891adf10441307b4bdfad88194d471", "filename": "src/test/ui/issues/issue-28576.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -5,7 +5,7 @@ LL | /            dyn Bar\n LL | |               <Assoc=()>\n    | |________________________^ the trait `Bar` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "613888758cab44dd61bf6982782c2b6d0e0de05f", "filename": "src/test/ui/issues/issue-38404.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `B` cannot be made into an object\n LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "b3ad71e174a977ad2b3b1a049562b3cd6ca54533", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,15 +4,15 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL |     let _f: Box<dyn Foo> =\n    |             ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:15:9\n    |\n LL |         Box::new(());\n    |         ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<()>`\n    = note: required by cast to type `std::boxed::Box<dyn Foo>`\n "}, {"sha": "03e3a7f227a23713a8942e0963c0c2e0eaef53cb", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,8 +1,10 @@\n error: the trait `X` cannot be made into an object\n   --> $DIR/issue-50781.rs:6:8\n    |\n+LL | trait X {\n+   |       - this trait cannot be made into an object...\n LL |     fn foo(&self) where Self: Trait;\n-   |        ^^^ method `foo` references the `Self` type in where clauses\n+   |        ^^^ ...because method `foo` references the `Self` type in its `where` clause\n    |\n note: the lint level is defined here\n   --> $DIR/issue-50781.rs:1:9\n@@ -11,6 +13,7 @@ LL | #![deny(where_clauses_object_safety)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "2a9fd13be5f01a4ffd49e5b08c71a380121531e6", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -13,7 +13,9 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19\n    |\n LL | trait Foo : Copy {\n-   |             ---- traits that require `Self: Sized` cannot be made into an object\n+   |       ---   ---- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let z = &x as &dyn Foo;\n    |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n@@ -22,7 +24,9 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n LL | trait Foo : Copy {\n-   |             ---- traits that require `Self: Sized` cannot be made into an object\n+   |       ---   ---- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object"}, {"sha": "6227ada4dc9384cfa4303a0d910517d773dada98", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -13,7 +13,9 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n LL | trait Foo : Copy {\n-   |             ---- traits that require `Self: Sized` cannot be made into an object\n+   |       ---   ---- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object"}, {"sha": "e0e0344af75919bd03851d8b6cb1b6d9353c318c", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:12:30\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n-   |           - the trait cannot contain associated consts like `X`\n+   |           - ...because it cannot contain associated consts like `X`\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `X` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "ff0bd17dccce52e419e5e1b70f97f5639f4e0999", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,12 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:14:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n-   |           - the trait cannot contain associated consts like `X`\n+   |           - ...because it cannot contain associated consts like `X`\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `X` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "9e70abbd32fc6551fcac230dd0a1603c1fd0de1e", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,20 +1,28 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:18:30\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:24:39\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    |                                       ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `bar` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7443d38470c030e9c680e14baa18dc4e0b216d3f", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,24 +1,30 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:20:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL |     t as &dyn Bar\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "55baf69401b0aa9d96c756ee3d5fbb8fc80d0b93", "filename": "src/test/ui/object-safety/object-safety-issue-22040.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Expr` cannot be made into an object\n LL |     elements: Vec<Box<dyn Expr + 'x>>,\n    |                       ^^^^^^^^^^^^^ the trait `Expr` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "e90f9b6d0a0cc228b48b297e15160960d6e6e667", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,20 +1,28 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:30\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n-   |        --- method `bar` references the `Self` type in its parameters or return type\n+   |        --- ...because method `bar` references the `Self` type in its parameters or return type\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n+LL | trait Baz {\n+   |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n-   |        --- method `baz` references the `Self` type in its parameters or return type\n+   |        --- ...because method `baz` references the `Self` type in its parameters or return type\n ...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                              ^^^^^^^^ the trait `Baz` cannot be made into an object\n+   |\n+   = help: consider moving `baz` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4a23fb56e91a9cc6c98a1b2ea4ab6121cd463a0b", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,24 +1,30 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:24:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n-   |        --- method `bar` references the `Self` type in its parameters or return type\n+   |        --- ...because method `bar` references the `Self` type in its parameters or return type\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n    |\n+LL | trait Baz {\n+   |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n-   |        --- method `baz` references the `Self` type in its parameters or return type\n+   |        --- ...because method `baz` references the `Self` type in its parameters or return type\n ...\n LL |     t\n    |     ^ the trait `Baz` cannot be made into an object\n    |\n+   = help: consider moving `baz` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Baz>` for `&T`\n    = note: required by cast to type `&dyn Baz`\n "}, {"sha": "2f79d53d1c12469752186829c35ffd5a32c53957", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:12:18\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL | fn diverges() -> Box<dyn Foo> {\n    |                  ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error: aborting due to previous error\n "}, {"sha": "bed6757fc68037ac92491a56cb4fc1e18d99d91f", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,12 +1,15 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:22:27\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let b: Box<dyn Foo> = Box::new(Bar);\n    |                           ^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<Bar>`\n    = note: required by cast to type `std::boxed::Box<dyn Foo>`\n "}, {"sha": "2f605d8e904c5dfbfbd737a8a949376c738d478c", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,8 +1,10 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:14:30\n    |\n+LL | trait Bar\n+   |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n-   |                  ----- traits that require `Self: Sized` cannot be made into an object\n+   |                  ----- ...because it requires `Self: Sized`\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object"}, {"sha": "2f1f06f4cf5fa395e767fd62f98e18e785b4d721", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,8 +1,10 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:16:5\n    |\n+LL | trait Bar\n+   |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n-   |                  ----- traits that require `Self: Sized` cannot be made into an object\n+   |                  ----- ...because it requires `Self: Sized`\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object"}, {"sha": "54f65c43d9cdef0f9e346b5d8ba4e58ca43a8005", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,7 +2,9 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:12:30\n    |\n LL | trait Bar : Sized {\n-   |             ----- traits that require `Self: Sized` cannot be made into an object\n+   |       ---   ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object"}, {"sha": "58c2b7721474fafc1f1102ca267ff61679b6ec18", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,7 +2,9 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:14:5\n    |\n LL | trait Bar : Sized {\n-   |             ----- traits that require `Self: Sized` cannot be made into an object\n+   |       ---   ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object"}, {"sha": "04f630d5dacb73f653bef5b16116ebdcca0e8fb3", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-Self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Baz` cannot be made into an object\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                               ^^^^^^^ the trait `Baz` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "d0c278d12d70aea93bf88c5c12fcc5f3ce7affb2", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n LL | fn bar(_x: Foo) {}\n    |            ^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n-   = note: associated function `bar` has no `self` parameter\n+   = note: the trait cannot be made into an object because associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "c06538fae3b4ed0c3b7a85bd0449b9beb3463f82", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,21 +1,28 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:32\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+   |        --- ...because method `foo`'s `self` parameter cannot be dispatched on\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = help: consider changing method `foo`'s `self` parameter to be `&self`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+   |        --- ...because method `foo`'s `self` parameter cannot be dispatched on\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n+   = help: consider changing method `foo`'s `self` parameter to be `&self`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n    = note: required by cast to type `std::rc::Rc<dyn Foo>`\n "}, {"sha": "bebd5cbcf780c8a048dffbb3e4c26b0bada9ad8c", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,12 +1,15 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+   |        --- ...because method `foo`'s `self` parameter cannot be dispatched on\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n+   = help: consider changing method `foo`'s `self` parameter to be `&self`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n    = note: required by cast to type `std::rc::Rc<dyn Foo>`\n "}, {"sha": "55185a2c8cdd179e0e98bd75e9dbe4c912d100e7", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -15,7 +15,9 @@ error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n    |\n LL | trait A: Sized {\n-   |          ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n LL |     fn f(a: A) -> A;\n    |             ^ the trait `A` cannot be made into an object\n \n@@ -35,10 +37,14 @@ LL |     fn f(a: Self) -> Self;\n error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n    |\n+LL | trait B {\n+   |       - this trait cannot be made into an object...\n LL |     fn f(a: B) -> B;\n    |        -    ^ the trait `B` cannot be made into an object\n    |        |\n-   |        associated function `f` has no `self` parameter\n+   |        ...because associated function `f` has no `self` parameter\n+   |\n+   = help: consider turning `f` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1f9ffb6a4cfbf0b69cc61f432ed95bb7e096a075", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n LL |     let _: &dyn EqAlias = &123;\n    |             ^^^^^^^^^^^ the trait `std::cmp::Eq` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error[E0191]: the value of the associated type `Item` (from trait `std::iter::Iterator`) must be specified\n   --> $DIR/trait-alias-object-fail.rs:9:17"}, {"sha": "e050d6940abc354d77d5b669e9f0b57252d6d92d", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -111,16 +111,22 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n LL |         const A: u8 = 0;\n-   |               - the trait cannot contain associated consts like `A`\n+   |               - ...because it cannot contain associated consts like `A`\n ...\n LL |         const B: u8 = 0;\n-   |               - the trait cannot contain associated consts like `B`\n+   |               - ...because it cannot contain associated consts like `B`\n ...\n+LL |     pub trait C: A + B {\n+   |               - this trait cannot be made into an object...\n LL |         const C: u8 = 0;\n-   |               - the trait cannot contain associated consts like `C`\n+   |               - ...because it cannot contain associated consts like `C`\n ...\n LL |     C::A;\n    |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n+   |\n+   = help: consider moving `C` to another trait\n+   = help: consider moving `B` to another trait\n+   = help: consider moving `A` to another trait\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "a8511f63c16a5ac9d1e88519cc2b397a926b6eac", "filename": "src/test/ui/traits/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -10,7 +10,7 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n LL |     m!(dyn Copy + Send + 'static);\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n-   = note: traits that require `Self: Sized` cannot be made into an object\n+   = note: the trait cannot be made into an object because it requires `Self: Sized`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5eb8cd0d80636542b7c6954e91d31e428f49c618", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,23 +1,30 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL | trait Tr {\n+   |       -- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n    = note: required by cast to type `&dyn Tr`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL | trait Tr {\n+   |       -- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n+   |\n+   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5b2b7b51f3dae299ce33ef931948f447e48c34c3", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -14,24 +14,31 @@ error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |                ---                    ---- method `blah` has generic type parameters\n-   |                |\n-   |                method `dup` references the `Self` type in its parameters or return type\n+   |       ---      ---                    ---- ...because method `blah` has generic type parameters\n+   |       |        |\n+   |       |        ...because method `dup` references the `Self` type in its parameters or return type\n+   |       this trait cannot be made into an object...\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n+   |\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |                ---                    ---- method `blah` has generic type parameters\n-   |                |\n-   |                method `dup` references the `Self` type in its parameters or return type\n+   |       ---      ---                    ---- ...because method `blah` has generic type parameters\n+   |       |        |\n+   |       |        ...because method `dup` references the `Self` type in its parameters or return type\n+   |       this trait cannot be made into an object...\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n    = note: required by cast to type `std::boxed::Box<dyn bar>`\n "}, {"sha": "fa6c5a92fb437bc8cc5c588ec535d0e20aeb1358", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -14,10 +14,14 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n-   |                            --- method `add` references the `Self` type in its parameters or return type\n+   |       -----                --- ...because method `add` references the `Self` type in its parameters or return type\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n+   |\n+   = help: consider moving `add` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eefb450155cdbb9f4c4f3e0b226211e4ee60c126", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,7 +2,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:16:33\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let t_box: Box<dyn Trait> = Box::new(S);\n    |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n@@ -14,7 +16,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     takes_box(Box::new(S));\n    |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n@@ -26,7 +30,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     Box::new(S) as Box<dyn Trait>;\n    |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object"}, {"sha": "5e645382d1b21414e7e9eaad2ed7b9898a97f4f3", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -2,7 +2,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:16:25\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let t: &dyn Trait = &S;\n    |                         ^^ the trait `Trait` cannot be made into an object\n@@ -14,7 +16,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     takes_trait(&S);\n    |                 ^^ the trait `Trait` cannot be made into an object\n@@ -26,7 +30,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     &S as &dyn Trait;\n    |     ^^ the trait `Trait` cannot be made into an object"}, {"sha": "1c530ece29580731ad0a413ad04804f71768624e", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -25,7 +25,7 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n LL | fn bar() where Vec<dyn Copy>:, {}\n    |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n-   = note: traits that require `Self: Sized` cannot be made into an object\n+   = note: the trait cannot be made into an object because it requires `Self: Sized`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2ff6383bc80eb6330f34c8b63b1400ecad31b65b", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n+LL | trait A {\n+   |       - this trait cannot be made into an object...\n LL |     fn foo(&self, _x: &Self);\n-   |        --- method `foo` references the `Self` type in its parameters or return type\n+   |        --- ...because method `foo` references the `Self` type in its parameters or return type\n ...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "9319e3382c2d4f1e6c857ef55c5e24a489ce86e4", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "patch": "@@ -16,7 +16,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:26:21\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |         Some(()) => &S,\n    |                     ^^ the trait `Trait` cannot be made into an object\n@@ -28,7 +30,9 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n LL | trait Trait: Sized {}\n-   |              ----- traits that require `Self: Sized` cannot be made into an object\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let t: &dyn Trait = match opt() {\n    |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object"}]}