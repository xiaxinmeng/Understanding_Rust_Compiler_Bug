{"sha": "31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZThmMjQ0OGM4Y2RkOTEzNTY2ZDVjYjlhNWNiOWYwYzAxNGRjYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-06T17:36:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-06T17:36:33Z"}, "message": "auto merge of #13346 : ben0x539/rust/priv-field-in, r=alexcrichton\n\nIn the error message for when a private field is used, include the name of the struct, or if it's a struct-like enum variant, the names of the variant and the enum.\r\n\r\nThis fixes #13341.", "tree": {"sha": "baa37b483bb52380cd738b3731db08ef06deb09f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa37b483bb52380cd738b3731db08ef06deb09f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "html_url": "https://github.com/rust-lang/rust/commit/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73bd64f444584fefafd5eba580b330d29779af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d73bd64f444584fefafd5eba580b330d29779af3", "html_url": "https://github.com/rust-lang/rust/commit/d73bd64f444584fefafd5eba580b330d29779af3"}, {"sha": "d4b73a741195f70d540e9be7df7b9d41f87ab570", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b73a741195f70d540e9be7df7b9d41f87ab570", "html_url": "https://github.com/rust-lang/rust/commit/d4b73a741195f70d540e9be7df7b9d41f87ab570"}], "stats": {"total": 173, "additions": 135, "deletions": 38}, "files": [{"sha": "ee514ba5f2438f4e867f2f92fe44d42d8c9fa2e3", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -576,15 +576,37 @@ impl<'a> PrivacyVisitor<'a> {\n             }\n             UnnamedField(idx) => fields.get(idx)\n         };\n-        if field.vis == ast::Public { return }\n-        if !is_local(field.id) || !self.private_accessible(field.id.node) {\n-            let msg = match name {\n-                NamedField(name) => format!(\"field `{}` is private\",\n-                                            token::get_ident(name)),\n-                UnnamedField(idx) => format!(\"field \\\\#{} is private\", idx + 1),\n-            };\n-            self.tcx.sess.span_err(span, msg);\n+        if field.vis == ast::Public ||\n+            (is_local(field.id) && self.private_accessible(field.id.node)) {\n+            return\n         }\n+\n+        let struct_type = ty::lookup_item_type(self.tcx, id).ty;\n+        let struct_desc = match ty::get(struct_type).sty {\n+            ty::ty_struct(_, _) => format!(\"struct `{}`\", ty::item_path_str(self.tcx, id)),\n+            ty::ty_bare_fn(ty::BareFnTy { sig: ty::FnSig { output, .. }, .. }) => {\n+                // Struct `id` is really a struct variant of an enum,\n+                // and we're really looking at the variant's constructor\n+                // function. So get the return type for a detailed error\n+                // message.\n+                let enum_id = match ty::get(output).sty {\n+                    ty::ty_enum(id, _) => id,\n+                    _ => self.tcx.sess.span_bug(span, \"enum variant doesn't \\\n+                                                       belong to an enum\")\n+                };\n+                format!(\"variant `{}` of enum `{}`\",\n+                        ty::with_path(self.tcx, id, |mut p| p.last().unwrap()),\n+                        ty::item_path_str(self.tcx, enum_id))\n+            }\n+            _ => self.tcx.sess.span_bug(span, \"can't find struct for field\")\n+        };\n+        let msg = match name {\n+            NamedField(name) => format!(\"field `{}` of {} is private\",\n+                                        token::get_ident(name), struct_desc),\n+            UnnamedField(idx) => format!(\"field \\\\#{} of {} is private\",\n+                                         idx + 1, struct_desc),\n+        };\n+        self.tcx.sess.span_err(span, msg);\n     }\n \n     // Given the ID of a method, checks to ensure it's in scope."}, {"sha": "af2e3328d3a1f10f7715acbd745b37b35bd7d451", "filename": "src/test/auxiliary/privacy-struct-variant.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fauxiliary%2Fprivacy-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fauxiliary%2Fprivacy-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivacy-struct-variant.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(struct_variant)]\n+\n+pub enum Foo {\n+    Bar {\n+        baz: int\n+    }\n+}"}, {"sha": "8eed8aa86441a7d853dea56be6da37d44e54b1ae", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -24,11 +24,15 @@ mod my_mod {\n \n fn main() {\n     let my_struct = my_mod::MyStruct();\n-    let _woohoo = (&my_struct).priv_field; //~ ERROR field `priv_field` is private\n-    let _woohoo = (~my_struct).priv_field; //~ ERROR field `priv_field` is private\n-    let _woohoo = (@my_struct).priv_field; //~ ERROR field `priv_field` is private\n+    let _woohoo = (&my_struct).priv_field;\n+    //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n+    let _woohoo = (~my_struct).priv_field;\n+    //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n+    let _woohoo = (@my_struct).priv_field;\n+    //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     (~my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     (@my_struct).happyfun();               //~ ERROR method `happyfun` is private\n-    let nope = my_struct.priv_field;       //~ ERROR field `priv_field` is private\n+    let nope = my_struct.priv_field;\n+    //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "d6fab326ba16f160ec1f2593e117396cd1bdc2ea", "filename": "src/test/compile-fail/privacy-struct-variant.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-variant.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:privacy-struct-variant.rs\n+\n+#![feature(struct_variant)]\n+\n+extern crate other = \"privacy-struct-variant\";\n+\n+mod a {\n+    pub enum Foo {\n+        Bar {\n+            baz: int\n+        }\n+    }\n+\n+    fn test() {\n+        let foo = Bar { baz: 42 };\n+\n+        let Bar { baz: _ } = foo;\n+        match foo { Bar { baz: _ } => {} }\n+    }\n+}\n+\n+fn main() {\n+    let foo = a::Bar { baz: 42 };\n+    //~^ ERROR: field `baz` of variant `Bar` of enum `a::Foo` is private\n+\n+    let a::Bar { baz: _ } = foo;\n+    //~^ ERROR: field `baz` of variant `Bar` of enum `a::Foo` is private\n+    match foo { a::Bar { baz: _ } => {} }\n+    //~^ ERROR: field `baz` of variant `Bar` of enum `a::Foo` is private\n+    //\n+    let foo = other::Bar { baz: 42 };\n+    //~^ ERROR: field `baz` of variant `Bar` of enum `privacy-struct-variant::Foo` is private\n+\n+    let other::Bar { baz: _ } = foo;\n+    //~^ ERROR: field `baz` of variant `Bar` of enum `privacy-struct-variant::Foo` is private\n+    match foo { other::Bar { baz: _ } => {} }\n+    //~^ ERROR: field `baz` of variant `Bar` of enum `privacy-struct-variant::Foo` is private\n+}"}, {"sha": "2683022c4c823b2143b1e8c0c104ed38dbd54929", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -64,25 +64,25 @@ fn this_crate() {\n     let c = a::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR: field #1 is private\n+    let a::A(()) = a; //~ ERROR: field #1 of struct `a::A` is private\n     let a::A(_) = a;\n-    match a { a::A(()) => {} } //~ ERROR: field #1 is private\n+    match a { a::A(()) => {} } //~ ERROR: field #1 of struct `a::A` is private\n     match a { a::A(_) => {} }\n \n     let a::B(_) = b;\n-    let a::B(_b) = b; //~ ERROR: field #1 is private\n+    let a::B(_b) = b; //~ ERROR: field #1 of struct `a::B` is private\n     match b { a::B(_) => {} }\n-    match b { a::B(_b) => {} } //~ ERROR: field #1 is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #1 is private\n+    match b { a::B(_b) => {} } //~ ERROR: field #1 of struct `a::B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #1 of struct `a::B` is private\n \n     let a::C(_, _) = c;\n     let a::C(_a, _) = c;\n-    let a::C(_, _b) = c; //~ ERROR: field #2 is private\n-    let a::C(_a, _b) = c; //~ ERROR: field #2 is private\n+    let a::C(_, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n+    let a::C(_a, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n     match c { a::C(_, _) => {} }\n     match c { a::C(_a, _) => {} }\n-    match c { a::C(_, _b) => {} } //~ ERROR: field #2 is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR: field #2 is private\n+    match c { a::C(_, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n@@ -102,25 +102,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 is private\n+    let other::A(()) = a; //~ ERROR: field #1 of struct `privacy-tuple-struct::A` is private\n     let other::A(_) = a;\n-    match a { other::A(()) => {} } //~ ERROR: field #1 is private\n+    match a { other::A(()) => {} }\n+    //~^ ERROR: field #1 of struct `privacy-tuple-struct::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 is private\n+    let other::B(_b) = b; //~ ERROR: field #1 of struct `privacy-tuple-struct::B` is private\n     match b { other::B(_) => {} }\n-    match b { other::B(_b) => {} } //~ ERROR: field #1 is private\n-    match b { other::B(1) => {} other::B(_) => {} } //~ ERROR: field #1 is private\n+    match b { other::B(_b) => {} }\n+    //~^ ERROR: field #1 of struct `privacy-tuple-struct::B` is private\n+    match b { other::B(1) => {} other::B(_) => {} }\n+    //~^ ERROR: field #1 of struct `privacy-tuple-struct::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 is private\n+    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n-    match c { other::C(_, _b) => {} } //~ ERROR: field #2 is private\n-    match c { other::C(_a, _b) => {} } //~ ERROR: field #2 is private\n+    match c { other::C(_, _b) => {} }\n+    //~^ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n+    match c { other::C(_a, _b) => {} }\n+    //~^ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}, {"sha": "45c4b2b7ae1b0aa038d9c696dafd9761382a009a", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -14,5 +14,6 @@ use cci_class::kitties::cat;\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  assert!((nyan.meows == 52u));   //~ ERROR field `meows` is private\n+  assert!((nyan.meows == 52u));\n+  //~^ ERROR field `meows` of struct `cci_class::kitties::cat` is private\n }"}, {"sha": "ae19c22149669d48fb1c971f51f070633a2723a0", "filename": "src/test/compile-fail/private-struct-field-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -15,5 +15,5 @@ mod a {\n }\n \n fn main() {\n-    let s = a::Foo { x: 1 };    //~ ERROR field `x` is private\n+    let s = a::Foo { x: 1 };    //~ ERROR field `x` of struct `a::Foo` is private\n }"}, {"sha": "991457ef1ce7ca24eade6d402ab3c9f99ebfaa3e", "filename": "src/test/compile-fail/private-struct-field-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -22,6 +22,6 @@ mod a {\n \n fn main() {\n     match a::make() {\n-        Foo { x: _ } => {}  //~ ERROR field `x` is private\n+        Foo { x: _ } => {}  //~ ERROR field `x` of struct `a::Foo` is private\n     }\n }"}, {"sha": "3f6fa573cc0b56301e5ba849b98aa1b642d944a0", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -20,5 +20,5 @@ mod cat {\n \n fn main() {\n     let nyan = cat::new_cat();\n-    assert!(nyan.meows == 52);    //~ ERROR field `meows` is private\n+    assert!(nyan.meows == 52);    //~ ERROR field `meows` of struct `cat::Cat` is private\n }"}, {"sha": "82ba9a02a304aeaac98ea2dce1f2f1b65d3ebbb0", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=31e8f2448c8cdd913566d5cb9a5cb9f0c014dcbc", "patch": "@@ -32,16 +32,16 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n     //~^^ ERROR: struct `A` is private\n \n     a.a;\n-    b.a; //~ ERROR: field `a` is private\n+    b.a; //~ ERROR: field `a` of struct `inner::A` is private\n     b.b;\n     c.a;\n-    c.b; //~ ERROR: field `b` is private\n+    c.b; //~ ERROR: field `b` of struct `inner::B` is private\n \n-    d.a; //~ ERROR: field `a` is private\n+    d.a; //~ ERROR: field `a` of struct `struct-field-privacy::A` is private\n     d.b;\n \n     e.a;\n-    e.b; //~ ERROR: field `b` is private\n+    e.b; //~ ERROR: field `b` of struct `struct-field-privacy::B` is private\n }\n \n fn main() {}"}]}