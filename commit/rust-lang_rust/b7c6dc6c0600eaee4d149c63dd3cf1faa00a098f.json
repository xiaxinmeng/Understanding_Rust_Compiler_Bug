{"sha": "b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YzZkYzZjMDYwMGVhZWU0ZDE0OWM2M2RkM2NmMWZhYTAwYTA5OGY=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-07T15:24:34Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-07T17:48:25Z"}, "message": "update the builtin macro doc stubs", "tree": {"sha": "c0d281416e5c1019889fa6c7d429952043942efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d281416e5c1019889fa6c7d429952043942efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "html_url": "https://github.com/rust-lang/rust/commit/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1137fb193583971f35e1d4b3cfcb25725948da4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1137fb193583971f35e1d4b3cfcb25725948da4f", "html_url": "https://github.com/rust-lang/rust/commit/1137fb193583971f35e1d4b3cfcb25725948da4f"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "19bbf85cadb7c3900422e97665651522182ced2a", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "patch": "@@ -616,7 +616,10 @@ mod builtin {\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! compile_error {\n+        ($msg:expr) => ({ /* compiler built-in */ });\n+        ($msg:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// The core macro for formatted string creation & output.\n     ///\n@@ -652,7 +655,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! option_env { ($name:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! option_env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n+        ($name:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Concatenate identifiers into one identifier.\n     ///\n@@ -728,7 +734,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include_str {\n+        ($file:expr) => ({ /* compiler built-in */ });\n+        ($file:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Includes a file as a reference to a byte array.\n     ///\n@@ -738,7 +747,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include_bytes {\n+        ($file:expr) => ({ /* compiler built-in */ });\n+        ($file:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Expands to a string that represents the current module path.\n     ///\n@@ -768,5 +780,8 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! include { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include {\n+        ($file:expr) => ({ /* compiler built-in */ });\n+        ($file:expr,) => ({ /* compiler built-in */ });\n+    }\n }"}, {"sha": "a18c811d19634bfa789e732e7c65d9ca64b364f6", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "patch": "@@ -315,7 +315,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n-    macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! compile_error {\n+        ($msg:expr) => ({ /* compiler built-in */ });\n+        ($msg:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// The core macro for formatted string creation & output.\n     ///\n@@ -403,7 +406,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! option_env { ($name:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! option_env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n+        ($name:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Concatenate identifiers into one identifier.\n     ///\n@@ -583,7 +589,10 @@ pub mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include_str {\n+        ($file:expr) => ({ /* compiler built-in */ });\n+        ($file:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Includes a file as a reference to a byte array.\n     ///\n@@ -617,7 +626,10 @@ pub mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include_bytes {\n+        ($file:expr) => ({ /* compiler built-in */ });\n+        ($file:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Expands to a string that represents the current module path.\n     ///\n@@ -703,7 +715,10 @@ pub mod builtin {\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! include { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include {\n+        ($file:expr) => ({ /* compiler built-in */ });\n+        ($file:expr,) => ({ /* compiler built-in */ });\n+    }\n }\n \n /// A macro for defining #[cfg] if-else statements."}]}