{"sha": "046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NmMyNWRiYzBjMTFkY2M0NjdjNGZmMjJiOGJmYmQ4NTM5NzZiNWI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-03T17:39:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-03T18:51:47Z"}, "message": "Handle fail as an argument; parse fail expressions unambiguously\n\nAn expression like:\n\nfoo(1, fail, 2)\n\nwas failing to parse, because the parser was interpreting the comma\nas the start of an expression that was an argument to fail, rather\nthan recognizing that the fail here has no arguments\n\nFixed this by using can_begin_expr to determine whether the next\ntoken after a fail token suggests that this is a nullary fail or a\nunary fail.\n\nIn addition, when translating calls, check before translating each\nargument that the block still isn't terminated. This has the effect\nthat if an argument list includes fail, the back-end won't keep trying\nto generate code for successive arguments and trip the !*terminated\nassertion.", "tree": {"sha": "1cf826ddaeb78e4dae4309ac143ba68a9db9bcf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cf826ddaeb78e4dae4309ac143ba68a9db9bcf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "html_url": "https://github.com/rust-lang/rust/commit/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6369807ffedbe3f8fbfcef3febc5741dcf19cb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/6369807ffedbe3f8fbfcef3febc5741dcf19cb43", "html_url": "https://github.com/rust-lang/rust/commit/6369807ffedbe3f8fbfcef3febc5741dcf19cb43"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "c4f368a4a2f4606ef4aa896a64b605f14fb01eb6", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "patch": "@@ -9,6 +9,7 @@ import std::either;\n import std::either::left;\n import std::either::right;\n import std::map::hashmap;\n+import token::can_begin_expr;\n import driver::session;\n import util::common;\n import util::common::filename;\n@@ -120,7 +121,6 @@ fn new_parser(session::session sess, ast::crate_cfg cfg,\n                      ext::syntax_expander_table());\n }\n \n-\n // These are the words that shouldn't be allowed as value identifiers,\n // because, if used at the start of a line, they will cause the line to be\n // interpreted as a specific kind of statement, which would be confusing.\n@@ -841,14 +841,13 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         lo = ex_ext.span.lo;\n         ex = ex_ext.node;\n     } else if (eat_word(p, \"fail\")) {\n-        alt (p.peek()) {\n-            case (token::SEMI) { ex = ast::expr_fail(none) }\n-            case (token::RBRACE) { ex = ast::expr_fail(none) }\n-            case (_) {\n-                auto e = parse_expr(p);\n-                hi = e.span.hi;\n-                ex = ast::expr_fail(some(e));\n-            }\n+        if (can_begin_expr(p.peek())) {\n+            auto e = parse_expr(p);\n+            hi = e.span.hi;\n+            ex = ast::expr_fail(some(e));\n+        }\n+        else {\n+            ex = ast::expr_fail(none);\n         }\n     } else if (eat_word(p, \"log\")) {\n         auto e = parse_expr(p);"}, {"sha": "44cab2120a02c8b0c337fb64ee735edbc292e60f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "patch": "@@ -5682,6 +5682,11 @@ fn trans_args(&@block_ctxt cx, ValueRef llenv, &option::t[ValueRef] llobj,\n     auto arg_tys = type_of_explicit_args(cx.fcx.lcx.ccx, cx.sp, args);\n     auto i = 0u;\n     for (@ast::expr e in es) {\n+        if (bcx.build.is_terminated()) {\n+            // This means an earlier arg was divergent.\n+            // So this arg can't be evaluated.\n+            break;\n+        }\n         auto r = trans_arg_expr(bcx, args.(i), arg_tys.(i), e);\n         bcx = r.bcx;\n         llargs += [r.val];"}, {"sha": "07f47e0da849545a1787a5409d9eb6968b0c9865", "filename": "src/test/run-fail/args-fail.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c25dbc0c11dcc467c4ff22b8bfbd853976b5b/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=046c25dbc0c11dcc467c4ff22b8bfbd853976b5b", "patch": "@@ -0,0 +1,9 @@\n+// xfail-stage0\n+// error-pattern:meep\n+fn f(int a, int b, @int c) {\n+  fail \"moop\";\n+}\n+\n+fn main() {\n+  f(1, fail \"meep\", @42);\n+}\n\\ No newline at end of file"}]}