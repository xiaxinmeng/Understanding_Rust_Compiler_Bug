{"sha": "d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OWY2NmQ5Yjg2MTkwYzFlNDJkNmE1YTM1MTBiZjdiNGM5OTIzYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-16T23:28:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-16T23:28:00Z"}, "message": "Auto merge of #45897 - tromey:trait-object-debug, r=michaelwoerister\n\nTrait object debug\n\nThis enables better debugging of trait objects.  See the individual commits for explanations.  This required an LLVM bump.", "tree": {"sha": "c38d65b27b81530fffd3f86d7711c26d3c792637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38d65b27b81530fffd3f86d7711c26d3c792637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "html_url": "https://github.com/rust-lang/rust/commit/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f8e2913a93573c78cddfd297944cff4eb4c41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8e2913a93573c78cddfd297944cff4eb4c41a", "html_url": "https://github.com/rust-lang/rust/commit/d0f8e2913a93573c78cddfd297944cff4eb4c41a"}, {"sha": "ae4cc6069626206b493caf6b1158d3d5d601bbc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4cc6069626206b493caf6b1158d3d5d601bbc7", "html_url": "https://github.com/rust-lang/rust/commit/ae4cc6069626206b493caf6b1158d3d5d601bbc7"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "a68390eab7fd28415ab16dcfd605bec73e046bed", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "patch": "@@ -18,6 +18,7 @@ use super::utils::{debug_context, DIB, span_start, bytes_to_bits, size_and_align\n use super::namespace::mangled_name_of_item;\n use super::type_names::compute_debuginfo_type_name;\n use super::{CrateDebugContext};\n+use abi;\n use context::SharedCrateContext;\n \n use llvm::{self, ValueRef};\n@@ -438,11 +439,38 @@ fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let trait_llvm_type = type_of::type_of(cx, trait_object_type);\n     let file_metadata = unknown_file_metadata(cx);\n \n+\n+    let ptr_type = cx.tcx().mk_ptr(ty::TypeAndMut {\n+        ty: cx.tcx().types.u8,\n+        mutbl: hir::MutImmutable\n+    });\n+    let ptr_type_metadata = type_metadata(cx, ptr_type, syntax_pos::DUMMY_SP);\n+    let llvm_type = type_of::type_of(cx, ptr_type);\n+\n+    assert_eq!(abi::FAT_PTR_ADDR, 0);\n+    assert_eq!(abi::FAT_PTR_EXTRA, 1);\n+    let member_descriptions = [\n+        MemberDescription {\n+            name: \"pointer\".to_string(),\n+            llvm_type: llvm_type,\n+            type_metadata: ptr_type_metadata,\n+            offset: ComputedMemberOffset,\n+            flags: DIFlags::FlagArtificial,\n+        },\n+        MemberDescription {\n+            name: \"vtable\".to_string(),\n+            llvm_type: llvm_type,\n+            type_metadata: ptr_type_metadata,\n+            offset: ComputedMemberOffset,\n+            flags: DIFlags::FlagArtificial,\n+        },\n+    ];\n+\n     composite_type_metadata(cx,\n                             trait_llvm_type,\n                             &trait_type_name[..],\n                             unique_type_id,\n-                            &[],\n+                            &member_descriptions,\n                             containing_scope,\n                             file_metadata,\n                             syntax_pos::DUMMY_SP)\n@@ -1858,3 +1886,65 @@ pub fn extend_scope_to_file(ccx: &CrateContext,\n             file_metadata)\n     }\n }\n+\n+/// Creates debug information for the given vtable, which is for the\n+/// given type.\n+///\n+/// Adds the created metadata nodes directly to the crate's IR.\n+pub fn create_vtable_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n+                                        ty: ty::Ty<'tcx>,\n+                                        vtable: ValueRef) {\n+    if cx.dbg_cx().is_none() {\n+        return;\n+    }\n+\n+    let type_metadata = type_metadata(cx, ty, syntax_pos::DUMMY_SP);\n+    let llvm_vtable_type = Type::vtable_ptr(cx).element_type();\n+    let (struct_size, struct_align) = size_and_align_of(cx, llvm_vtable_type);\n+\n+    unsafe {\n+        // LLVMRustDIBuilderCreateStructType() wants an empty array. A null\n+        // pointer will lead to hard to trace and debug LLVM assertions\n+        // later on in llvm/lib/IR/Value.cpp.\n+        let empty_array = create_DIArray(DIB(cx), &[]);\n+\n+        let name = CString::new(\"vtable\").unwrap();\n+\n+        // Create a new one each time.  We don't want metadata caching\n+        // here, because each vtable will refer to a unique containing\n+        // type.\n+        let vtable_type = llvm::LLVMRustDIBuilderCreateStructType(\n+            DIB(cx),\n+            NO_SCOPE_METADATA,\n+            name.as_ptr(),\n+            unknown_file_metadata(cx),\n+            UNKNOWN_LINE_NUMBER,\n+            bytes_to_bits(struct_size),\n+            bytes_to_bits(struct_align),\n+            DIFlags::FlagArtificial,\n+            ptr::null_mut(),\n+            empty_array,\n+            0,\n+            type_metadata,\n+            name.as_ptr()\n+        );\n+\n+        llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n+                                                    NO_SCOPE_METADATA,\n+                                                    name.as_ptr(),\n+                                                    // LLVM 3.9\n+                                                    // doesn't accept\n+                                                    // null here, so\n+                                                    // pass the name\n+                                                    // as the linkage\n+                                                    // name.\n+                                                    name.as_ptr(),\n+                                                    unknown_file_metadata(cx),\n+                                                    UNKNOWN_LINE_NUMBER,\n+                                                    vtable_type,\n+                                                    true,\n+                                                    vtable,\n+                                                    ptr::null_mut(),\n+                                                    0);\n+    }\n+}"}, {"sha": "15b299674eea36852a3a28117d43d75693617bf6", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "patch": "@@ -56,6 +56,7 @@ mod source_loc;\n pub use self::create_scope_map::{create_mir_scopes, MirDebugScope};\n pub use self::source_loc::start_emitting_source_locations;\n pub use self::metadata::create_global_var_metadata;\n+pub use self::metadata::create_vtable_metadata;\n pub use self::metadata::extend_scope_to_file;\n pub use self::source_loc::set_source_location;\n "}, {"sha": "e7c5a36838c2f22db03e35f45bbf26cec30b2c92", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "patch": "@@ -18,6 +18,7 @@ use monomorphize;\n use type_::Type;\n use value::Value;\n use rustc::ty::{self, Ty};\n+use debuginfo;\n \n #[derive(Copy, Clone, Debug)]\n pub struct VirtualIndex(usize);\n@@ -99,6 +100,8 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let align = machine::llalign_of_pref(ccx, val_ty(vtable_const));\n     let vtable = consts::addr_of(ccx, vtable_const, align, \"vtable\");\n \n+    debuginfo::create_vtable_metadata(ccx, ty, vtable);\n+\n     ccx.vtables().borrow_mut().insert((ty, trait_ref), vtable);\n     vtable\n }"}, {"sha": "51f104bf1cc6c3a588a11c90a3b4a4a18ee080ac", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "patch": "@@ -1 +1 @@\n-Subproject commit b48f77c5ed570001957408f4adeec88ae010c4d9\n+Subproject commit 51f104bf1cc6c3a588a11c90a3b4a4a18ee080ac"}, {"sha": "b6466467548492be0f949776617ca5d2f0059ea9", "filename": "src/test/codegen/vtabletype.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test depends on a patch that was committed to upstream LLVM\n+// after 5.0, then backported to the Rust LLVM fork.\n+\n+// ignore-tidy-linelength\n+// ignore-windows\n+// ignore-macos\n+// min-system-llvm-version 5.1\n+\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+// CHECK-LABEL: @main\n+// CHECK: {{.*}}DICompositeType{{.*}}name: \"vtable\",{{.*}}vtableHolder:{{.*}}\n+\n+pub trait T {\n+}\n+\n+impl T for f64 {\n+}\n+\n+pub fn main() {\n+    let d = 23.0f64;\n+    let td = &d as &T;\n+}"}, {"sha": "430c02ccbf805bb5031ee3986dfb156a22ac381f", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d59f66d9b86190c1e42d6a5a3510bf7b4c9923ad", "patch": "@@ -150,6 +150,14 @@ impl EarlyProps {\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n                     &actual_version[..] < min_version\n+                } else if line.starts_with(\"min-system-llvm-version\") {\n+                    let min_version = line.trim_right()\n+                        .rsplit(' ')\n+                        .next()\n+                        .expect(\"Malformed llvm version directive\");\n+                    // Ignore if using system LLVM and actual version\n+                    // is smaller the minimum required version\n+                    !(config.system_llvm && &actual_version[..] < min_version)\n                 } else {\n                     false\n                 }"}]}