{"sha": "d72294491c5d28449c49b884b620cc24b3cf010f", "node_id": "C_kwDOAAsO6NoAKGQ3MjI5NDQ5MWM1ZDI4NDQ5YzQ5Yjg4NGI2MjBjYzI0YjNjZjAxMGY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-16T09:23:31Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-16T10:09:12Z"}, "message": "Leak pthreax_mutex_t when it's dropped while locked.", "tree": {"sha": "a9df2c0fc5270ca3d1188bf63de53246ebad25e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9df2c0fc5270ca3d1188bf63de53246ebad25e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72294491c5d28449c49b884b620cc24b3cf010f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72294491c5d28449c49b884b620cc24b3cf010f", "html_url": "https://github.com/rust-lang/rust/commit/d72294491c5d28449c49b884b620cc24b3cf010f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72294491c5d28449c49b884b620cc24b3cf010f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392d2728683f140f6125732240e462c43c5caff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/392d2728683f140f6125732240e462c43c5caff4", "html_url": "https://github.com/rust-lang/rust/commit/392d2728683f140f6125732240e462c43c5caff4"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "98afee69ba622903bebc80f4775be49fedfe4193", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d72294491c5d28449c49b884b620cc24b3cf010f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72294491c5d28449c49b884b620cc24b3cf010f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=d72294491c5d28449c49b884b620cc24b3cf010f", "patch": "@@ -1,5 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::mem::MaybeUninit;\n+use crate::mem::{forget, MaybeUninit};\n use crate::sys::cvt_nz;\n use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n@@ -23,6 +23,24 @@ impl LazyInit for Mutex {\n         unsafe { mutex.init() };\n         mutex\n     }\n+\n+    fn destroy(mutex: Box<Self>) {\n+        // We're not allowed to pthread_mutex_destroy a locked mutex,\n+        // so check first if it's unlocked.\n+        if unsafe { mutex.try_lock() } {\n+            unsafe { mutex.unlock() };\n+            drop(mutex);\n+        } else {\n+            // The mutex is locked. This happens if a MutexGuard is leaked.\n+            // In this case, we just leak the Mutex too.\n+            forget(mutex);\n+        }\n+    }\n+\n+    fn cancel_init(_: Box<Self>) {\n+        // In this case, we can just drop it without any checks,\n+        // since it cannot have been locked yet.\n+    }\n }\n \n impl Mutex {"}, {"sha": "63c3316bdeb28b95b691ca914c9120e25488dc69", "filename": "library/std/src/sys_common/lazy_box.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d72294491c5d28449c49b884b620cc24b3cf010f/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72294491c5d28449c49b884b620cc24b3cf010f/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs?ref=d72294491c5d28449c49b884b620cc24b3cf010f", "patch": "@@ -21,8 +21,21 @@ pub(crate) trait LazyInit {\n     ///\n     /// It might be called more than once per LazyBox, as multiple threads\n     /// might race to initialize it concurrently, each constructing and initializing\n-    /// their own box. (All but one of them will be destroyed right after.)\n+    /// their own box. All but one of them will be passed to `cancel_init` right after.\n     fn init() -> Box<Self>;\n+\n+    /// Any surplus boxes from `init()` that lost the initialization race\n+    /// are passed to this function for disposal.\n+    ///\n+    /// The default implementation calls destroy().\n+    fn cancel_init(x: Box<Self>) {\n+        Self::destroy(x);\n+    }\n+\n+    /// This is called to destroy a used box.\n+    ///\n+    /// The default implementation just drops it.\n+    fn destroy(_: Box<Self>) {}\n }\n \n impl<T: LazyInit> LazyBox<T> {\n@@ -45,7 +58,7 @@ impl<T: LazyInit> LazyBox<T> {\n             Err(ptr) => {\n                 // Lost the race to another thread.\n                 // Drop the box we created, and use the one from the other thread instead.\n-                drop(unsafe { Box::from_raw(new_ptr) });\n+                T::cancel_init(unsafe { Box::from_raw(new_ptr) });\n                 ptr\n             }\n         }\n@@ -71,7 +84,7 @@ impl<T: LazyInit> Drop for LazyBox<T> {\n     fn drop(&mut self) {\n         let ptr = *self.ptr.get_mut();\n         if !ptr.is_null() {\n-            drop(unsafe { Box::from_raw(ptr) });\n+            T::destroy(unsafe { Box::from_raw(ptr) });\n         }\n     }\n }"}]}