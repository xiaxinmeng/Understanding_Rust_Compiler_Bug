{"sha": "1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzM2M2JjZTFmMDJlZDk4NjNmOWI5Y2RjMTA1MzJiOTVhNjRmYmI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-08T11:33:38Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-10T11:13:54Z"}, "message": "librustc_middle: return LocalDefId instead of DefId in opt_local_def_id", "tree": {"sha": "6ac4bcb82bfbf560a4790e4028631502079236a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac4bcb82bfbf560a4790e4028631502079236a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "html_url": "https://github.com/rust-lang/rust/commit/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc30e4dd4ea85697c4e57621a298bee300ca1744", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc30e4dd4ea85697c4e57621a298bee300ca1744", "html_url": "https://github.com/rust-lang/rust/commit/bc30e4dd4ea85697c4e57621a298bee300ca1744"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "b98924ff8a6fc2c7460ad334d54876e4c971b168", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "patch": "@@ -59,7 +59,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::Node;\n use rustc_middle::middle::region;\n use rustc_middle::ty::error::TypeError;\n@@ -1589,8 +1589,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // it's a actual definition. According to the comments (e.g. in\n         // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n         // is relied upon by some other code. This might (or might not) need cleanup.\n-        let body_owner_def_id =\n-            self.tcx.hir().opt_local_def_id(cause.body_id).unwrap_or_else(|| {\n+        let body_owner_def_id = self\n+            .tcx\n+            .hir()\n+            .opt_local_def_id(cause.body_id)\n+            .map(LocalDefId::to_def_id)\n+            .unwrap_or_else(|| {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n         self.check_and_note_conflicting_crates(diag, terr);"}, {"sha": "3cda1f41b05d51a7c5794193fa9e467cd63a7d14", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "patch": "@@ -150,7 +150,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n-        self.opt_local_def_id(id).map(|def_id| self.def_path(def_id.expect_local()))\n+        self.opt_local_def_id(id).map(|def_id| self.def_path(def_id))\n     }\n \n     pub fn def_path(&self, def_id: LocalDefId) -> DefPath {\n@@ -175,19 +175,21 @@ impl<'hir> Map<'hir> {\n     // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> DefId {\n-        self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n-            bug!(\n-                \"local_def_id: no entry for `{:?}`, which has a map of `{:?}`\",\n-                hir_id,\n-                self.find_entry(hir_id)\n-            )\n-        })\n+        self.opt_local_def_id(hir_id)\n+            .unwrap_or_else(|| {\n+                bug!(\n+                    \"local_def_id: no entry for `{:?}`, which has a map of `{:?}`\",\n+                    hir_id,\n+                    self.find_entry(hir_id)\n+                )\n+            })\n+            .to_def_id()\n     }\n \n     #[inline]\n-    pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<DefId> {\n+    pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {\n         let node_id = self.hir_id_to_node_id(hir_id);\n-        Some(self.opt_local_def_id_from_node_id(node_id)?.to_def_id())\n+        self.opt_local_def_id_from_node_id(node_id)\n     }\n \n     #[inline]"}, {"sha": "a19daa12d5b87dd5a40b65e8552ef628fed1ffb1", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "patch": "@@ -14,7 +14,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -354,6 +354,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             let enclosing_scope_span = tcx.def_span(\n                                 tcx.hir()\n                                     .opt_local_def_id(obligation.cause.body_id)\n+                                    .map(LocalDefId::to_def_id)\n                                     .unwrap_or_else(|| {\n                                         tcx.hir().body_owner_def_id(hir::BodyId {\n                                             hir_id: obligation.cause.body_id,"}, {"sha": "762ec7e9ac3c6e6fd202d80739a773949e412ec6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "patch": "@@ -152,12 +152,15 @@ impl<'tcx> DocContext<'tcx> {\n         self.tcx\n             .hir()\n             .opt_local_def_id(id)\n-            .and_then(|def_id| self.tcx.lookup_stability(def_id))\n+            .and_then(|def_id| self.tcx.lookup_stability(def_id.to_def_id()))\n             .cloned()\n     }\n \n     pub fn deprecation(&self, id: HirId) -> Option<attr::Deprecation> {\n-        self.tcx.hir().opt_local_def_id(id).and_then(|def_id| self.tcx.lookup_deprecation(def_id))\n+        self.tcx\n+            .hir()\n+            .opt_local_def_id(id)\n+            .and_then(|def_id| self.tcx.lookup_deprecation(def_id.to_def_id()))\n     }\n }\n "}]}