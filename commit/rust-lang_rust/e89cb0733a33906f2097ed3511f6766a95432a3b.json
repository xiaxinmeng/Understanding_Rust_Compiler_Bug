{"sha": "e89cb0733a33906f2097ed3511f6766a95432a3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWNiMDczM2EzMzkwNmYyMDk3ZWQzNTExZjY3NjZhOTU0MzJhM2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-09T03:29:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-09T03:29:36Z"}, "message": "Rollup merge of #67705 - lzutao:wmemchr, r=wesleywiser\n\nUse unrolled loop for searching NULL in [u16] on Windows", "tree": {"sha": "f6aad56dcf6909641a41cc63e84ffa6405582c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6aad56dcf6909641a41cc63e84ffa6405582c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89cb0733a33906f2097ed3511f6766a95432a3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejpagCRBK7hj4Ov3rIwAAdHIIAFFdJVKmF3/0Osk+Riee+Jnx\nOElB/7qhDj79vBHQPRowJSAGB0uyc5N76Wmdhx+5ynxHkTJtZjt5582Sqj7T9z86\nJRIMCR5GzLxXXNrcH7bOhMYoh9ltJr8d10ch/1DpJS1HDwxnYf/0OgJuV4jC1J3Q\nBFGT04MAlcOMaM5Y0ADStJqC+wqKmDZOi058xcYEBiSj4ymtXc9hYnegwiJ95tT0\n3GyhvOtP8h6gQrQifbPtjtMyK4Ye9ojeZ4MeER1yHH3T+Bk2byOTxC6yAZLqMVzg\nuhrdzhlLKn31/L43hUDhqUQ6EiAqCn4aJ57mdz6wfvihQpUDxRS3nf6tLUaJIek=\n=hZX+\n-----END PGP SIGNATURE-----\n", "payload": "tree f6aad56dcf6909641a41cc63e84ffa6405582c21\nparent d249d756374737eb014079901ac132f1e1ed905e\nparent 89bc23643bc4ba979f28d6df8c091813c89c36a9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586402976 +0200\ncommitter GitHub <noreply@github.com> 1586402976 +0200\n\nRollup merge of #67705 - lzutao:wmemchr, r=wesleywiser\n\nUse unrolled loop for searching NULL in [u16] on Windows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89cb0733a33906f2097ed3511f6766a95432a3b", "html_url": "https://github.com/rust-lang/rust/commit/e89cb0733a33906f2097ed3511f6766a95432a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89cb0733a33906f2097ed3511f6766a95432a3b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d249d756374737eb014079901ac132f1e1ed905e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d249d756374737eb014079901ac132f1e1ed905e", "html_url": "https://github.com/rust-lang/rust/commit/d249d756374737eb014079901ac132f1e1ed905e"}, {"sha": "89bc23643bc4ba979f28d6df8c091813c89c36a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/89bc23643bc4ba979f28d6df8c091813c89c36a9", "html_url": "https://github.com/rust-lang/rust/commit/89bc23643bc4ba979f28d6df8c091813c89c36a9"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "d745e87a07258258ebe442c6f1171733e7c0506c", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e89cb0733a33906f2097ed3511f6766a95432a3b/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89cb0733a33906f2097ed3511f6766a95432a3b/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=e89cb0733a33906f2097ed3511f6766a95432a3b", "patch": "@@ -81,10 +81,54 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n+pub fn unrolled_find_u16s(needle: u16, haystack: &[u16]) -> Option<usize> {\n+    let ptr = haystack.as_ptr();\n+    let mut len = haystack.len();\n+    let mut start = &haystack[..];\n+\n+    // For performance reasons unfold the loop eight times.\n+    while len >= 8 {\n+        if start[0] == needle {\n+            return Some((start.as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[1] == needle {\n+            return Some((start[1..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[2] == needle {\n+            return Some((start[2..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[3] == needle {\n+            return Some((start[3..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[4] == needle {\n+            return Some((start[4..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[5] == needle {\n+            return Some((start[5..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[6] == needle {\n+            return Some((start[6..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[7] == needle {\n+            return Some((start[7..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+\n+        start = &start[8..];\n+        len -= 8;\n+    }\n+\n+    for (i, c) in start.iter().enumerate() {\n+        if *c == needle {\n+            return Some((start.as_ptr() as usize - ptr as usize) / 2 + i);\n+        }\n+    }\n+    None\n+}\n+\n pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> crate::io::Result<Vec<u16>> {\n     fn inner(s: &OsStr) -> crate::io::Result<Vec<u16>> {\n         let mut maybe_result: Vec<u16> = s.encode_wide().collect();\n-        if maybe_result.iter().any(|&u| u == 0) {\n+        if unrolled_find_u16s(0, &maybe_result).is_some() {\n             return Err(crate::io::Error::new(\n                 ErrorKind::InvalidInput,\n                 \"strings passed to WinAPI cannot contain NULs\",\n@@ -214,7 +258,7 @@ fn wide_char_to_multi_byte(\n }\n \n pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n-    match v.iter().position(|c| *c == 0) {\n+    match unrolled_find_u16s(0, v) {\n         // don't include the 0\n         Some(i) => &v[..i],\n         None => v,"}]}