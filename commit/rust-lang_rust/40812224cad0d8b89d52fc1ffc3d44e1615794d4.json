{"sha": "40812224cad0d8b89d52fc1ffc3d44e1615794d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODEyMjI0Y2FkMGQ4Yjg5ZDUyZmMxZmZjM2Q0NGUxNjE1Nzk0ZDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T10:13:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T10:13:57Z"}, "message": "apply feedback", "tree": {"sha": "502d26f251ddf51b0c205b6e6e43ae748b454dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/502d26f251ddf51b0c205b6e6e43ae748b454dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40812224cad0d8b89d52fc1ffc3d44e1615794d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40812224cad0d8b89d52fc1ffc3d44e1615794d4", "html_url": "https://github.com/rust-lang/rust/commit/40812224cad0d8b89d52fc1ffc3d44e1615794d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40812224cad0d8b89d52fc1ffc3d44e1615794d4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f502bf78cba8974cdfbd20f3b524d86b982e5e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f502bf78cba8974cdfbd20f3b524d86b982e5e2b", "html_url": "https://github.com/rust-lang/rust/commit/f502bf78cba8974cdfbd20f3b524d86b982e5e2b"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "5fa15f1fbde3644c6375a722af1fee39b13291fd", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40812224cad0d8b89d52fc1ffc3d44e1615794d4/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40812224cad0d8b89d52fc1ffc3d44e1615794d4/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=40812224cad0d8b89d52fc1ffc3d44e1615794d4", "patch": "@@ -363,10 +363,11 @@ mod prim_unit { }\n /// *[See also the `std::ptr` module](ptr/index.html).*\n ///\n /// Working with raw pointers in Rust is uncommon, typically limited to a few patterns.\n-/// Raw pointers can be unaligned or null when unused. However, when a raw pointer is\n+/// Raw pointers can be unaligned or [`null`] when unused. However, when a raw pointer is\n /// dereferenced (using the `*` operator), it must be non-null and aligned.\n-/// Storing through a raw pointer (`*ptr = data`) calls `drop` on the old value, so\n-/// [`write`] must be used if memory is not already initialized.\n+/// Storing through a raw pointer using `*ptr = data` calls `drop` on the old value, so\n+/// [`write`] must be used if memory is not already initialized---otherwise `drop`\n+/// would be called on the uninitialized memory.\n ///\n /// Use the [`null`] and [`null_mut`] functions to create null pointers, and the\n /// [`is_null`] method of the `*const T` and `*mut T` types to check for null.\n@@ -896,7 +897,8 @@ mod prim_usize { }\n /// operators on a value, or by using a `ref` or `ref mut` pattern.\n ///\n /// For those familiar with pointers, a reference is just a pointer that is assumed to be\n-/// aligned and not null. In fact, `Option<&T>` has the same memory representation as a\n+/// aligned, not null, and pointing to valid (initialized) memory.\n+/// In fact, `Option<&T>` has the same memory representation as a\n /// nullable but aligned pointer, and can be passed across FFI boundaries as such.\n ///\n /// In most cases, references can be used much like the original value. Field access, method"}]}