{"sha": "32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "node_id": "C_kwDOAAsO6NoAKDMyYjEzYWM5MjgwZDE1MjczZWYxN2VlNDc0YzBmMGE3MzhiYjVmNWE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-09T15:47:02Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-09T16:40:18Z"}, "message": "review", "tree": {"sha": "5275e02b4329ea296b542fba2eabea9acbd12542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5275e02b4329ea296b542fba2eabea9acbd12542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "html_url": "https://github.com/rust-lang/rust/commit/32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d371ebe117419b9815bd8743f981d8fa67a876d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d371ebe117419b9815bd8743f981d8fa67a876d8", "html_url": "https://github.com/rust-lang/rust/commit/d371ebe117419b9815bd8743f981d8fa67a876d8"}], "stats": {"total": 132, "additions": 73, "deletions": 59}, "files": [{"sha": "a639df01a78d4acbe1fb4f70d4a5cabe0a8a5580", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -229,6 +229,43 @@ impl DefKind {\n             _ => false,\n         }\n     }\n+\n+    /// Whether `query get_codegen_attrs` should be used with this definition.\n+    pub fn has_codegen_attrs(self) -> bool {\n+        match self {\n+            DefKind::Fn\n+            | DefKind::AssocFn\n+            | DefKind::Ctor(..)\n+            | DefKind::Closure\n+            | DefKind::Generator\n+            | DefKind::Static(_) => true,\n+            DefKind::Mod\n+            | DefKind::Struct\n+            | DefKind::Union\n+            | DefKind::Enum\n+            | DefKind::Variant\n+            | DefKind::Trait\n+            | DefKind::TyAlias\n+            | DefKind::ForeignTy\n+            | DefKind::TraitAlias\n+            | DefKind::AssocTy\n+            | DefKind::Const\n+            | DefKind::AssocConst\n+            | DefKind::Macro(..)\n+            | DefKind::Use\n+            | DefKind::ForeignMod\n+            | DefKind::OpaqueTy\n+            | DefKind::Impl\n+            | DefKind::Field\n+            | DefKind::TyParam\n+            | DefKind::ConstParam\n+            | DefKind::LifetimeParam\n+            | DefKind::AnonConst\n+            | DefKind::InlineConst\n+            | DefKind::GlobalAsm\n+            | DefKind::ExternCrate => false,\n+        }\n+    }\n }\n \n /// The resolution of a path or export."}, {"sha": "81388a0bf585ddac473097ad7c799a4524dc2a2c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             self.encode_attrs(def_id);\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n-            if tcx.has_codegen_attrs(def_kind) {\n+            if def_kind.has_codegen_attrs() {\n                 record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n             }\n             if should_encode_visibility(def_kind) {"}, {"sha": "9d3d509eb216beca26e858efd1b759f209f67966", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -5,6 +5,7 @@ use crate::dep_graph::{DepGraph, DepKind, DepKindStruct};\n use crate::hir::place::Place as HirPlace;\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath};\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation, ConstValue, Scalar};\n@@ -1066,6 +1067,28 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n+    /// Expects a body and returns its codegen attributes.\n+    ///\n+    /// Unlike `codegen_fn_attrs`, this returns `CodegenFnAttrs::EMPTY` for\n+    /// constants.\n+    pub fn body_codegen_attrs(self, def_id: DefId) -> &'tcx CodegenFnAttrs {\n+        let def_kind = self.def_kind(def_id);\n+        if def_kind.has_codegen_attrs() {\n+            self.codegen_fn_attrs(def_id)\n+        } else if matches!(\n+            def_kind,\n+            DefKind::AnonConst | DefKind::AssocConst | DefKind::Const | DefKind::InlineConst\n+        ) {\n+            CodegenFnAttrs::EMPTY\n+        } else {\n+            bug!(\n+                \"body_codegen_fn_attrs called on unexpected definition: {:?} {:?}\",\n+                def_id,\n+                def_kind\n+            )\n+        }\n+    }\n+\n     pub fn typeck_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,"}, {"sha": "7cf7f8973475d26a766e9577848442e6cb2dab4c", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -246,8 +246,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         match *self {\n             InstanceDef::Item(ty::WithOptConstParam { did: def_id, .. })\n             | InstanceDef::Virtual(def_id, _) => {\n-                tcx.has_codegen_attrs(tcx.def_kind(def_id))\n-                    && tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+                tcx.body_codegen_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n             }\n             InstanceDef::ClosureOnceShim { call_once: _, track_caller } => track_caller,\n             _ => false,"}, {"sha": "1c8af13ce9ca1f980d4f6a99894c5029fa9c60a7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -139,42 +139,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         hasher.finish()\n     }\n \n-    pub fn has_codegen_attrs(self, def_kind: DefKind) -> bool {\n-        match def_kind {\n-            DefKind::Fn\n-            | DefKind::AssocFn\n-            | DefKind::Ctor(..)\n-            | DefKind::Closure\n-            | DefKind::Generator\n-            | DefKind::Static(_) => true,\n-            DefKind::Mod\n-            | DefKind::Struct\n-            | DefKind::Union\n-            | DefKind::Enum\n-            | DefKind::Variant\n-            | DefKind::Trait\n-            | DefKind::TyAlias\n-            | DefKind::ForeignTy\n-            | DefKind::TraitAlias\n-            | DefKind::AssocTy\n-            | DefKind::Const\n-            | DefKind::AssocConst\n-            | DefKind::Macro(..)\n-            | DefKind::Use\n-            | DefKind::ForeignMod\n-            | DefKind::OpaqueTy\n-            | DefKind::Impl\n-            | DefKind::Field\n-            | DefKind::TyParam\n-            | DefKind::ConstParam\n-            | DefKind::LifetimeParam\n-            | DefKind::AnonConst\n-            | DefKind::InlineConst\n-            | DefKind::GlobalAsm\n-            | DefKind::ExternCrate => false,\n-        }\n-    }\n-\n     pub fn res_generics_def_id(self, res: Res) -> Option<DefId> {\n         match res {\n             Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => {"}, {"sha": "6c14f207a7d14d7747f6dd1b2630f2ce29feb7a0", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -643,9 +643,8 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         return;\n     }\n \n-    let (thir, expr) = match tcx.thir_body(def) {\n-        Ok(body) => body,\n-        Err(_) => return,\n+    let Ok((thir, expr)) = tcx.thir_body(def) else {\n+        return\n     };\n     let thir = &thir.borrow();\n     // If `thir` is empty, a type error occurred, skip this body.\n@@ -661,11 +660,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n             BodyUnsafety::Safe\n         }\n     });\n-    let body_target_features: &[_] = if tcx.has_codegen_attrs(tcx.def_kind(def.did)) {\n-        &tcx.codegen_fn_attrs(def.did).target_features\n-    } else {\n-        &[]\n-    };\n+    let body_target_features = &tcx.body_codegen_attrs(def.did.to_def_id()).target_features;\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n     let mut visitor = UnsafetyVisitor {"}, {"sha": "1f73b7da815c505e1b9a7c6f98f2987eca4e36f3", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -375,12 +375,8 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n         }\n \n         let callee_features = &self.tcx.codegen_fn_attrs(func_did).target_features;\n-        // Constants don't have codegen attributes, so the body might not have codegen attributes.\n-        let self_features: &[_] = if self.tcx.has_codegen_attrs(self.tcx.def_kind(self.body_did)) {\n-            &self.tcx.codegen_fn_attrs(self.body_did).target_features\n-        } else {\n-            &[]\n-        };\n+        // The body might be a constant, so it doesn't have codegen attributes.\n+        let self_features = &self.tcx.body_codegen_attrs(self.body_did.to_def_id()).target_features;\n \n         // Is `callee_features` a subset of `calling_features`?\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {"}, {"sha": "df28ea4d444baafe6327d90277ef7cd8963182d9", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -452,7 +452,7 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     }\n \n     let def_id = tcx.hir().local_def_id(id);\n-    if tcx.has_codegen_attrs(tcx.def_kind(def_id)) {\n+    if tcx.def_kind(def_id).has_codegen_attrs() {\n         let cg_attrs = tcx.codegen_fn_attrs(def_id);\n \n         // #[used], #[no_mangle], #[export_name], etc also keeps the item alive"}, {"sha": "a5133bfd9459cf10d7f92fb0285f85bdf05f4579", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -208,7 +208,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                 } else {\n                     false\n                 };\n-            let codegen_attrs = if self.tcx.has_codegen_attrs(self.tcx.def_kind(search_item)) {\n+            let codegen_attrs = if self.tcx.def_kind(search_item).has_codegen_attrs() {\n                 self.tcx.codegen_fn_attrs(search_item)\n             } else {\n                 CodegenFnAttrs::EMPTY\n@@ -333,7 +333,7 @@ impl CollectPrivateImplItemsVisitor<'_, '_> {\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols.\n-        if self.tcx.has_codegen_attrs(self.tcx.def_kind(def_id)) {\n+        if self.tcx.def_kind(def_id).has_codegen_attrs() {\n             let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n             if codegen_attrs.contains_extern_indicator()\n                 || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)"}, {"sha": "ee0994c9ad6ccf431d9168f04b39f98e4c1eeff0", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -177,7 +177,7 @@ fn compute_symbol_name<'tcx>(\n     }\n \n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n-    let attrs = if tcx.has_codegen_attrs(tcx.def_kind(def_id)) {\n+    let attrs = if tcx.def_kind(def_id).has_codegen_attrs() {\n         tcx.codegen_fn_attrs(def_id)\n     } else {\n         CodegenFnAttrs::EMPTY"}, {"sha": "74714d75fa0eada943d1c3485a72d71e6feba6ab", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b13ac9280d15273ef17ee474c0f0a738bb5f5a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=32b13ac9280d15273ef17ee474c0f0a738bb5f5a", "patch": "@@ -2723,7 +2723,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n     if cfg!(debug_assertions) {\n         let def_kind = tcx.def_kind(did);\n         assert!(\n-            tcx.has_codegen_attrs(def_kind),\n+            def_kind.has_codegen_attrs(),\n             \"unexpected `def_kind` in `codegen_fn_attrs`: {def_kind:?}\",\n         );\n     }\n@@ -3233,7 +3233,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n /// inline assembly.\n fn asm_target_features<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx FxHashSet<Symbol> {\n     let mut target_features = tcx.sess.target_features.clone();\n-    if tcx.has_codegen_attrs(tcx.def_kind(did)) {\n+    if tcx.def_kind(did).has_codegen_attrs() {\n         let attrs = tcx.codegen_fn_attrs(did);\n         target_features.extend(&attrs.target_features);\n         match attrs.instruction_set {"}]}