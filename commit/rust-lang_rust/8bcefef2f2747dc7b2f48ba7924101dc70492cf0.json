{"sha": "8bcefef2f2747dc7b2f48ba7924101dc70492cf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2VmZWYyZjI3NDdkYzdiMmY0OGJhNzkyNDEwMWRjNzA0OTJjZjA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-06T19:18:06Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-06T19:18:45Z"}, "message": "libc: omit memcpy, memmove and memset\n\nLLVM provides these functions as intrinsics, and will generate calls to\nlibc when appropriate. They are exposed in the `ptr` module as\n`copy_nonoverlapping_memory`, `copy_memory` and `set_memory`.", "tree": {"sha": "45cc2b6b66060e3f53a0a12d5bcbd2f467276d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45cc2b6b66060e3f53a0a12d5bcbd2f467276d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bcefef2f2747dc7b2f48ba7924101dc70492cf0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcefef2f2747dc7b2f48ba7924101dc70492cf0", "html_url": "https://github.com/rust-lang/rust/commit/8bcefef2f2747dc7b2f48ba7924101dc70492cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bcefef2f2747dc7b2f48ba7924101dc70492cf0/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9636922410d4c905135e93056fd86f1f49da30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9636922410d4c905135e93056fd86f1f49da30", "html_url": "https://github.com/rust-lang/rust/commit/0e9636922410d4c905135e93056fd86f1f49da30"}], "stats": {"total": 41, "additions": 5, "deletions": 36}, "files": [{"sha": "26205c930f0caa7ffba9a9c4e546b7ce5abacfc0", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8bcefef2f2747dc7b2f48ba7924101dc70492cf0/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcefef2f2747dc7b2f48ba7924101dc70492cf0/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=8bcefef2f2747dc7b2f48ba7924101dc70492cf0", "patch": "@@ -159,8 +159,8 @@ pub use libc::funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n pub use libc::funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n pub use libc::funcs::c95::stdlib::{strtoul, system};\n \n-pub use libc::funcs::c95::string::{memchr, memcmp, memcpy, memmove};\n-pub use libc::funcs::c95::string::{memset, strcat, strchr, strcmp};\n+pub use libc::funcs::c95::string::{memchr, memcmp};\n+pub use libc::funcs::c95::string::{strcat, strchr, strcmp};\n pub use libc::funcs::c95::string::{strcoll, strcpy, strcspn, strerror};\n pub use libc::funcs::c95::string::{strlen, strncat, strncmp, strncpy};\n pub use libc::funcs::c95::string::{strpbrk, strrchr, strspn, strstr};\n@@ -1452,26 +1452,17 @@ pub mod funcs {\n                                -> size_t;\n                 unsafe fn wcslen(buf: *wchar_t) -> size_t;\n \n+                // Omitted: memcpy, memmove, memset (provided by LLVM)\n+\n                 // These are fine to execute on the Rust stack. They must be,\n                 // in fact, because LLVM generates calls to them!\n                 #[rust_stack]\n                 #[inline(always)]\n-                unsafe fn memcpy(s: *c_void, ct: *c_void, n: size_t)\n-                              -> *c_void;\n-                #[rust_stack]\n-                #[inline(always)]\n-                unsafe fn memmove(s: *c_void, ct: *c_void, n: size_t)\n-                               -> *c_void;\n-                #[rust_stack]\n-                #[inline(always)]\n                 unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t)\n                               -> c_int;\n                 #[rust_stack]\n                 #[inline(always)]\n                 unsafe fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n-                #[rust_stack]\n-                #[inline(always)]\n-                unsafe fn memset(s: *c_void, c: c_int, n: size_t) -> *c_void;\n             }\n         }\n     }"}, {"sha": "c8e2f58d801905201ceb6d725284e5e928e94c7e", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bcefef2f2747dc7b2f48ba7924101dc70492cf0/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcefef2f2747dc7b2f48ba7924101dc70492cf0/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=8bcefef2f2747dc7b2f48ba7924101dc70492cf0", "patch": "@@ -20,22 +20,6 @@ use unstable::intrinsics;\n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n \n-#[cfg(stage0)]\n-pub mod libc_ {\n-    use libc::c_void;\n-    use libc;\n-\n-    #[nolink]\n-    #[abi = \"cdecl\"]\n-    pub extern {\n-        #[rust_stack]\n-        unsafe fn memset(dest: *mut c_void,\n-                         c: libc::c_int,\n-                         len: libc::size_t)\n-                      -> *c_void;\n-    }\n-}\n-\n /// Calculate the offset from a pointer\n #[inline(always)]\n pub fn offset<T>(ptr: *T, count: uint) -> *T {\n@@ -178,13 +162,6 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n     memcpy64(dst, src as *T, count as u64);\n }\n \n-#[inline(always)]\n-#[cfg(stage0)]\n-pub unsafe fn set_memory<T>(dst: *mut T, c: int, count: uint) {\n-    let n = count * sys::size_of::<T>();\n-    libc_::memset(dst as *mut c_void, c as libc::c_int, n as size_t);\n-}\n-\n /**\n  * Invokes memset on the specified pointer, setting `count` bytes of memory\n  * starting at `dst` to `c`.\n@@ -601,6 +578,7 @@ pub mod ptr_tests {\n     }\n \n     #[test]\n+    #[cfg(not(stage0))]\n     fn test_set_memory() {\n         let mut xs = [0u8, ..20];\n         let ptr = vec::raw::to_mut_ptr(xs);"}]}