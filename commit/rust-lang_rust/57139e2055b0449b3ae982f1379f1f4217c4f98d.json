{"sha": "57139e2055b0449b3ae982f1379f1f4217c4f98d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTM5ZTIwNTViMDQ0OWIzYWU5ODJmMTM3OWYxZjQyMTdjNGY5OGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-25T02:55:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-25T02:55:39Z"}, "message": "Rollup merge of #61118 - pnkfelix:issue-60654-dont-ice-on-gat, r=varkor\n\nDont ICE on an attempt to use GAT without feature gate\n\nFix #60654", "tree": {"sha": "5a0a5f7feb991318817af4feaec2b1592a9d53a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0a5f7feb991318817af4feaec2b1592a9d53a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57139e2055b0449b3ae982f1379f1f4217c4f98d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6K6rCRBK7hj4Ov3rIwAAdHIIAG49qzNiFF3E5kUmtgsnc1xh\n/ubm7kR7O64bzNzgb1g88ZKYv49YrnzlJFHXCBfUemklrwCwOXVGGpom5C/SuiY4\nLr4nNLxlT67azDNNgzI2Zp7cz2zDg4cwKCETtmpzgJ8E9RrvhQzyt6lVUyep+YKW\nfa5A7XDE0llVBfhzcs7LVrX5TwBHJMPkpFhv01aIPxsw1QZZ42odjceLrtxcdGsX\ngkM6pGIuzXGB72T6/hwNVJ0U76yWt3ZFZbcL+U4cVMMuCWEQBu1+wU/5Q3G23CDm\nQXP5aWElCvcsAZHsYrxjeGbtogLSreHsSGYO7lPxJuTUgEGLZl82fozESmjgD5k=\n=ioM2\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a0a5f7feb991318817af4feaec2b1592a9d53a4\nparent 56e77b7851b8cb40be9fd4f8b810c93fa71fd609\nparent c235ba4d0b7b8ff74b0fe020df6625ec9ce74ceb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558752939 +0200\ncommitter GitHub <noreply@github.com> 1558752939 +0200\n\nRollup merge of #61118 - pnkfelix:issue-60654-dont-ice-on-gat, r=varkor\n\nDont ICE on an attempt to use GAT without feature gate\n\nFix #60654\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57139e2055b0449b3ae982f1379f1f4217c4f98d", "html_url": "https://github.com/rust-lang/rust/commit/57139e2055b0449b3ae982f1379f1f4217c4f98d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57139e2055b0449b3ae982f1379f1f4217c4f98d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e77b7851b8cb40be9fd4f8b810c93fa71fd609", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e77b7851b8cb40be9fd4f8b810c93fa71fd609", "html_url": "https://github.com/rust-lang/rust/commit/56e77b7851b8cb40be9fd4f8b810c93fa71fd609"}, {"sha": "c235ba4d0b7b8ff74b0fe020df6625ec9ce74ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c235ba4d0b7b8ff74b0fe020df6625ec9ce74ceb", "html_url": "https://github.com/rust-lang/rust/commit/c235ba4d0b7b8ff74b0fe020df6625ec9ce74ceb"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "3d78b9b6382b72f68791051a7f3e16ac71dfacfc", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=57139e2055b0449b3ae982f1379f1f4217c4f98d", "patch": "@@ -658,12 +658,15 @@ impl<'tcx> ScopeTree {\n             // The lifetime was defined on node that doesn't own a body,\n             // which in practice can only mean a trait or an impl, that\n             // is the parent of a method, and that is enforced below.\n-            assert_eq!(Some(param_owner_id), self.root_parent,\n-                       \"free_scope: {:?} not recognized by the \\\n-                        region scope tree for {:?} / {:?}\",\n-                       param_owner,\n-                       self.root_parent.map(|id| tcx.hir().local_def_id_from_hir_id(id)),\n-                       self.root_body.map(|hir_id| DefId::local(hir_id.owner)));\n+            if Some(param_owner_id) != self.root_parent {\n+                tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    &format!(\"free_scope: {:?} not recognized by the \\\n+                              region scope tree for {:?} / {:?}\",\n+                             param_owner,\n+                             self.root_parent.map(|id| tcx.hir().local_def_id_from_hir_id(id)),\n+                             self.root_body.map(|hir_id| DefId::local(hir_id.owner))));\n+            }\n \n             // The trait/impl lifetime is in scope for the method's body.\n             self.root_body.unwrap().local_id"}, {"sha": "75ba1dd46ca2a8260f4390d720d06a1c63025f57", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=57139e2055b0449b3ae982f1379f1f4217c4f98d", "patch": "@@ -479,21 +479,22 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> {\n         // the specialized routine `ty::replace_late_regions()`.\n         match *r {\n             ty::ReEarlyBound(data) => {\n-                let r = self.substs.get(data.index as usize).map(|k| k.unpack());\n-                match r {\n+                let rk = self.substs.get(data.index as usize).map(|k| k.unpack());\n+                match rk {\n                     Some(UnpackedKind::Lifetime(lt)) => {\n                         self.shift_region_through_binders(lt)\n                     }\n                     _ => {\n                         let span = self.span.unwrap_or(DUMMY_SP);\n-                        span_bug!(\n-                            span,\n+                        let msg = format!(\n                             \"Region parameter out of range \\\n                              when substituting in region {} (root type={:?}) \\\n                              (index={})\",\n                             data.name,\n                             self.root_ty,\n                             data.index);\n+                        self.tcx.sess.delay_span_bug(span, &msg);\n+                        r\n                     }\n                 }\n             }"}, {"sha": "84fbb47301f049e8b228617a21374e6298ca7374", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.rs?ref=57139e2055b0449b3ae982f1379f1f4217c4f98d", "patch": "@@ -0,0 +1,14 @@\n+// rust-lang/rust#60654: Do not ICE on an attempt to use GATs that is\n+// missing the feature gate.\n+\n+struct Foo;\n+\n+impl Iterator for Foo {\n+    type Item<'b> = &'b Foo; //~ ERROR generic associated types are unstable [E0658]\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "27b1d73d0434a7177ce93e78c5e4eeeb1863fda6", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57139e2055b0449b3ae982f1379f1f4217c4f98d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=57139e2055b0449b3ae982f1379f1f4217c4f98d", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n+   |\n+LL |     type Item<'b> = &'b Foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}