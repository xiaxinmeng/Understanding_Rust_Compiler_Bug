{"sha": "9c73f7ff18d413cb014acba7b1786044b4e00c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNzNmN2ZmMThkNDEzY2IwMTRhY2JhN2IxNzg2MDQ0YjRlMDBjNzA=", "commit": {"author": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-06-06T16:13:31Z"}, "committer": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-06-06T16:13:31Z"}, "message": "Amending use of Some with discarded value to use is_some", "tree": {"sha": "2e43f06cdf72415c0ef4d7d0c96fc1e9157802f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e43f06cdf72415c0ef4d7d0c96fc1e9157802f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c73f7ff18d413cb014acba7b1786044b4e00c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c73f7ff18d413cb014acba7b1786044b4e00c70", "html_url": "https://github.com/rust-lang/rust/commit/9c73f7ff18d413cb014acba7b1786044b4e00c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c73f7ff18d413cb014acba7b1786044b4e00c70/comments", "author": null, "committer": null, "parents": [{"sha": "e67d2b26635e7c03346a331ba52703a78a1986aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67d2b26635e7c03346a331ba52703a78a1986aa", "html_url": "https://github.com/rust-lang/rust/commit/e67d2b26635e7c03346a331ba52703a78a1986aa"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "9a93354af29b98fb172683e6bc9f188cc1e51850", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c73f7ff18d413cb014acba7b1786044b4e00c70/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c73f7ff18d413cb014acba7b1786044b4e00c70/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=9c73f7ff18d413cb014acba7b1786044b4e00c70", "patch": "@@ -997,7 +997,7 @@ fn lint_expect_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, n\n     fn extract_format_args(arg: &hir::Expr) -> Option<&hir::HirVec<hir::Expr>> {\n         if let hir::ExprAddrOf(_, ref addr_of) = arg.node {\n             if let hir::ExprCall(ref inner_fun, ref inner_args) = addr_of.node {\n-                if let Some(_) = is_expn_of(inner_fun.span, \"format\") {\n+                if is_expn_of(inner_fun.span, \"format\").is_some() {\n                     if inner_args.len() == 1 {\n                         if let hir::ExprCall(_, ref format_args) = inner_args[0].node {\n                             return Some(format_args);"}]}