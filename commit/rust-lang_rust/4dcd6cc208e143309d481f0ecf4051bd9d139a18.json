{"sha": "4dcd6cc208e143309d481f0ecf4051bd9d139a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkY2Q2Y2MyMDhlMTQzMzA5ZDQ4MWYwZWNmNDA1MWJkOWQxMzlhMTg=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2019-02-03T13:08:34Z"}, "committer": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-04-04T18:27:01Z"}, "message": "Fix failing tests.", "tree": {"sha": "d8c5281c4afb8f1725eab53a783df0097eeb77e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c5281c4afb8f1725eab53a783df0097eeb77e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dcd6cc208e143309d481f0ecf4051bd9d139a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dcd6cc208e143309d481f0ecf4051bd9d139a18", "html_url": "https://github.com/rust-lang/rust/commit/4dcd6cc208e143309d481f0ecf4051bd9d139a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dcd6cc208e143309d481f0ecf4051bd9d139a18/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55d82c8a3a05e433897de4a991366bb2963470d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55d82c8a3a05e433897de4a991366bb2963470d", "html_url": "https://github.com/rust-lang/rust/commit/e55d82c8a3a05e433897de4a991366bb2963470d"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "5ceb54ff3b96e065a55e3711869ee7521ca69e50", "filename": "src/doc/unstable-book/src/library-features/boxed-closure-impls.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dcd6cc208e143309d481f0ecf4051bd9d139a18/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fboxed-closure-impls.md", "raw_url": "https://github.com/rust-lang/rust/raw/4dcd6cc208e143309d481f0ecf4051bd9d139a18/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fboxed-closure-impls.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fboxed-closure-impls.md?ref=4dcd6cc208e143309d481f0ecf4051bd9d139a18", "patch": "@@ -37,7 +37,7 @@ fn main() {\n     });\n \n     // Call it\n-    f();\n+    f(&42);\n }\n ```\n "}, {"sha": "c2c385e9fea569068eab9b545b9db0789f687246", "filename": "src/test/ui/unsized-locals/fnbox-compat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4dcd6cc208e143309d481f0ecf4051bd9d139a18/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dcd6cc208e143309d481f0ecf4051bd9d139a18/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.rs?ref=4dcd6cc208e143309d481f0ecf4051bd9d139a18", "patch": "@@ -4,9 +4,10 @@ use std::boxed::FnBox;\n \n fn call_it<T>(f: Box<dyn FnBox(&i32) -> T>) -> T {\n     f(&42)\n+    //~^ERROR implementation of `std::ops::FnOnce` is not general enough\n }\n \n fn main() {\n     let s = \"hello\".to_owned();\n-    assert_eq!(&call_it(Box::new(|| s)) as &str, \"hello\");\n+    assert_eq!(&call_it(Box::new(|_| s)) as &str, \"hello\");\n }"}, {"sha": "c37bfaa47f7eb4d33b660867ae65f8eddf661f3f", "filename": "src/test/ui/unsized-locals/fnbox-compat.stderr", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4dcd6cc208e143309d481f0ecf4051bd9d139a18/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dcd6cc208e143309d481f0ecf4051bd9d139a18/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.stderr?ref=4dcd6cc208e143309d481f0ecf4051bd9d139a18", "patch": "@@ -1,27 +1,11 @@\n-error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n-  --> $DIR/fnbox-compat.rs:11:34\n+error: implementation of `std::ops::FnOnce` is not general enough\n+  --> $DIR/fnbox-compat.rs:6:5\n    |\n-LL |     assert_eq!(&call_it(Box::new(|| s)) as &str, \"hello\");\n-   |                                  ^^\n-   |                                  |\n-   |                                  expected closure that takes 1 argument\n-   |                                  takes 0 arguments\n-help: consider changing the closure to take and ignore the expected argument\n+LL |     f(&42)\n+   |     ^^^^^^\n    |\n-LL |     assert_eq!(&call_it(Box::new(|_| s)) as &str, \"hello\");\n-   |                                  ^^^\n+   = note: `std::ops::FnOnce<(&'0 i32,)>` would have to be implemented for the type `std::boxed::Box<(dyn for<'r> std::boxed::FnBox<(&'r i32,), Output=T> + 'static)>`, for some specific lifetime `'0`\n+   = note: but `std::ops::FnOnce<(&'1 i32,)>` is actually implemented for the type `std::boxed::Box<(dyn std::boxed::FnBox<(&'1 i32,), Output=T> + '_)>`, for some specific lifetime `'1`\n \n-error[E0277]: the size for values of type `dyn for<'r> std::boxed::FnBox<(&'r i32,), Output=_>` cannot be known at compilation time\n-  --> $DIR/fnbox-compat.rs:11:25\n-   |\n-LL |     assert_eq!(&call_it(Box::new(|| s)) as &str, \"hello\");\n-   |                         ^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::boxed::FnBox<(&'r i32,), Output=_>`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `<std::boxed::Box<T>>::new`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0277, E0593.\n-For more information about an error, try `rustc --explain E0277`."}]}