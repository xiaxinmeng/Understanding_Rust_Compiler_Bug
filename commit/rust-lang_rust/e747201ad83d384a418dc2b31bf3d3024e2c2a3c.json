{"sha": "e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "node_id": "C_kwDOAAsO6NoAKGU3NDcyMDFhZDgzZDM4NGE0MThkYzJiMzFiZjNkMzAyNGUyYzJhM2M", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-02T20:22:59Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-04T13:02:07Z"}, "message": "find the correct lang item for ranges", "tree": {"sha": "cb59993f8896f444f4a766db912a828e024b1cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb59993f8896f444f4a766db912a828e024b1cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "html_url": "https://github.com/rust-lang/rust/commit/e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd44d4d4c4545f65f15f890e93fac68214cfe54", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd44d4d4c4545f65f15f890e93fac68214cfe54", "html_url": "https://github.com/rust-lang/rust/commit/5dd44d4d4c4545f65f15f890e93fac68214cfe54"}], "stats": {"total": 176, "additions": 108, "deletions": 68}, "files": [{"sha": "5a7aee9c1c147a69ff314aab5b5ca2da41aa4814", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "patch": "@@ -133,8 +133,7 @@ hir_analysis_extern_crate_not_idiomatic =\n     .suggestion = convert it to a `{$msg_code}`\n \n hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n-hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n \n-hir_analysis_missing_parentheses_in_range = `{$ty_str}` is not an iterator\n+hir_analysis_missing_parentheses_in_range = can't call method `{$method_name}` on type `{$ty_str}`\n \n hir_analysis_add_missing_parentheses_in_range = you must surround the range in parentheses to call the `{$func_name}` function"}, {"sha": "9aa1b2e2c0a514f3667e51fc80c23efe269ad5b2", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "patch": "@@ -13,7 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{is_range_literal, ExprKind, Node, QPath};\n+use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n@@ -1214,50 +1214,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty_str: &str,\n     ) -> bool {\n         if let SelfSource::MethodCall(expr) = source {\n-            let mut search_limit = 5;\n-            for (_, parent) in tcx.hir().parent_iter(expr.hir_id) {\n-                search_limit -= 1;\n-                if search_limit == 0 {\n-                    break;\n-                }\n+            for (_, parent) in tcx.hir().parent_iter(expr.hir_id).take(5) {\n+                if let Node::Expr(parent_expr) = parent {\n+                    let lang_item = match parent_expr.kind {\n+                        ExprKind::Struct(ref qpath, _, _) => match **qpath {\n+                            QPath::LangItem(LangItem::Range, ..) => Some(LangItem::Range),\n+                            QPath::LangItem(LangItem::RangeTo, ..) => Some(LangItem::RangeTo),\n+                            QPath::LangItem(LangItem::RangeToInclusive, ..) => {\n+                                Some(LangItem::RangeToInclusive)\n+                            }\n+                            _ => None,\n+                        },\n+                        ExprKind::Call(ref func, _) => match func.kind {\n+                            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                            ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, ..)) => {\n+                                Some(LangItem::RangeInclusiveStruct)\n+                            }\n+                            _ => None,\n+                        },\n+                        _ => None,\n+                    };\n+\n+                    if lang_item.is_none() {\n+                        continue;\n+                    }\n \n-                if let Node::Expr(parent_expr) = parent && is_range_literal(parent_expr) {\n                     let span_included = match parent_expr.kind {\n-                            hir::ExprKind::Struct(_, eps, _) =>\n-                                eps.len() > 0 && eps.last().map_or(false, |ep| ep.span.contains(span)),\n-                            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n-                            hir::ExprKind::Call(ref func, ..) => func.span.contains(span),\n-                            _ => false,\n+                        hir::ExprKind::Struct(_, eps, _) => {\n+                            eps.len() > 0 && eps.last().map_or(false, |ep| ep.span.contains(span))\n+                        }\n+                        // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                        hir::ExprKind::Call(ref func, ..) => func.span.contains(span),\n+                        _ => false,\n                     };\n \n                     if !span_included {\n                         continue;\n                     }\n \n-                    let range_def_id = self.tcx.lang_items().range_struct().unwrap();\n-                    let range_ty = self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n-\n-                    // avoid suggesting when the method name is not implemented for a `range`\n-                    let pick =  self.lookup_probe(\n-                        span,\n-                        item_name,\n-                        range_ty,\n-                        expr,\n-                        ProbeScope::AllTraits\n-                    );\n+                    debug!(\"lang_item: {:?}\", lang_item);\n+                    let range_def_id = self.tcx.require_lang_item(lang_item.unwrap(), None);\n+                    let range_ty =\n+                        self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n \n+                    let pick =\n+                        self.lookup_probe(span, item_name, range_ty, expr, ProbeScope::AllTraits);\n                     if pick.is_ok() {\n                         let range_span = parent_expr.span.with_hi(expr.span.hi());\n                         tcx.sess.emit_err(errors::MissingParentheseInRange {\n-                            span: span,\n+                            span,\n                             ty_str: ty_str.to_string(),\n-                            add_missing_parentheses: Some(\n-                                errors::AddMissingParenthesesInRange {\n-                                    func_name: item_name.name.as_str().to_string(),\n-                                    left: range_span.shrink_to_lo(),\n-                                    right: range_span.shrink_to_hi(),\n-                                }\n-                            )\n+                            method_name: item_name.as_str().to_string(),\n+                            add_missing_parentheses: Some(errors::AddMissingParenthesesInRange {\n+                                func_name: item_name.name.as_str().to_string(),\n+                                left: range_span.shrink_to_lo(),\n+                                right: range_span.shrink_to_hi(),\n+                            }),\n                         });\n                         return true;\n                     }"}, {"sha": "41f73323d9a9aee6f22f8a073659a61d286d2a6a", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "patch": "@@ -348,12 +348,13 @@ pub struct ExpectedUsedSymbol {\n }\n \n #[derive(Diagnostic)]\n-#[diag(hir_analysis::missing_parentheses_in_range, code = \"E0599\")]\n+#[diag(hir_analysis::missing_parentheses_in_range, code = \"E0689\")]\n pub struct MissingParentheseInRange {\n     #[primary_span]\n     #[label(hir_analysis::missing_parentheses_in_range)]\n     pub span: Span,\n     pub ty_str: String,\n+    pub method_name: String,\n \n     #[subdiagnostic]\n     pub add_missing_parentheses: Option<AddMissingParenthesesInRange>,"}, {"sha": "79cdc41959a74375248dbeb794c46084e2d5ecbc", "filename": "src/test/ui/methods/issues/issue-90315.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs?ref=e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "patch": "@@ -2,61 +2,61 @@\n fn main() {\n     let arr = &[0, 1, 2, 3];\n     for _i in 0..arr.len().rev() {\n-        //~^ ERROR not an iterator\n+        //~^ ERROR can't call method\n         //~| surround the range in parentheses\n         // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n         // This regression test ensures it doesn't say that any more.\n     }\n \n     // Test for #102396\n     for i in 1..11.rev() {\n-        //~^ ERROR not an iterator\n+        //~^ ERROR can't call method\n         //~| HELP surround the range in parentheses\n     }\n \n     let end: usize = 10;\n     for i in 1..end.rev() {\n-        //~^ ERROR not an iterator\n+        //~^ ERROR can't call method\n         //~| HELP surround the range in parentheses\n     }\n \n     for i in 1..(end + 1).rev() {\n-        //~^ ERROR not an iterator\n+        //~^ ERROR can't call method\n         //~| HELP surround the range in parentheses\n     }\n \n     if 1..(end + 1).is_empty() {\n-        //~^ ERROR not an iterator\n+        //~^ ERROR can't call method\n         //~| ERROR mismatched types [E0308]\n         //~| HELP surround the range in parentheses\n     }\n \n     if 1..(end + 1).is_sorted() {\n         //~^ ERROR mismatched types [E0308]\n-        //~| ERROR `usize` is not an iterator [E0599]\n+        //~| ERROR can't call method\n         //~| HELP surround the range in parentheses\n     }\n \n     let _res: i32 = 3..6.take(2).sum();\n-    //~^ ERROR `{integer}` is not an iterator [E0599]\n+    //~^ ERROR can't call method\n     //~| ERROR mismatched types [E0308]\n     //~| HELP surround the range in parentheses\n \n     let _sum: i32 = 3..6.sum();\n-    //~^ ERROR `{integer}` is not an iterator [E0599]\n+    //~^ ERROR can't call method\n     //~| ERROR mismatched types [E0308]\n     //~| HELP surround the range in parentheses\n \n     let a = 1 as usize;\n     let b = 10 as usize;\n \n     for _a in a..=b.rev() {\n-        //~^ ERROR not an iterator\n+        //~^ ERROR can't call method\n         //~| HELP surround the range in parentheses\n     }\n \n     let _res = ..10.contains(3);\n-    //~^ ERROR not an iterator\n+    //~^ ERROR can't call method\n     //~| HELP surround the range in parentheses\n \n     if 1..end.error_method() {\n@@ -66,5 +66,11 @@ fn main() {\n     }\n \n     let _res = b.take(1)..a;\n-    //~^ ERROR not an iterator\n+    //~^ ERROR `usize` is not an iterator\n+\n+    let _res: i32 = ..6.take(2).sum();\n+    //~^ can't call method `take` on ambiguous numeric type\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP you must specify a concrete type for this numeric value\n+    // Won't suggest because `RangeTo` dest not implemented `take`\n }"}, {"sha": "581d6fb4fc9e43261b7d84458f9853a74f74da94", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e747201ad83d384a418dc2b31bf3d3024e2c2a3c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=e747201ad83d384a418dc2b31bf3d3024e2c2a3c", "patch": "@@ -1,52 +1,52 @@\n-error[E0599]: `usize` is not an iterator\n+error[E0689]: can't call method `rev` on type `usize`\n   --> $DIR/issue-90315.rs:4:28\n    |\n LL |     for _i in 0..arr.len().rev() {\n-   |                            ^^^ `usize` is not an iterator\n+   |                            ^^^ can't call method `rev` on type `usize`\n    |\n help: you must surround the range in parentheses to call the `rev` function\n    |\n LL |     for _i in (0..arr.len()).rev() {\n    |               +            +\n \n-error[E0599]: `{integer}` is not an iterator\n+error[E0689]: can't call method `rev` on type `{integer}`\n   --> $DIR/issue-90315.rs:12:20\n    |\n LL |     for i in 1..11.rev() {\n-   |                    ^^^ `{integer}` is not an iterator\n+   |                    ^^^ can't call method `rev` on type `{integer}`\n    |\n help: you must surround the range in parentheses to call the `rev` function\n    |\n LL |     for i in (1..11).rev() {\n    |              +     +\n \n-error[E0599]: `usize` is not an iterator\n+error[E0689]: can't call method `rev` on type `usize`\n   --> $DIR/issue-90315.rs:18:21\n    |\n LL |     for i in 1..end.rev() {\n-   |                     ^^^ `usize` is not an iterator\n+   |                     ^^^ can't call method `rev` on type `usize`\n    |\n help: you must surround the range in parentheses to call the `rev` function\n    |\n LL |     for i in (1..end).rev() {\n    |              +      +\n \n-error[E0599]: `usize` is not an iterator\n+error[E0689]: can't call method `rev` on type `usize`\n   --> $DIR/issue-90315.rs:23:27\n    |\n LL |     for i in 1..(end + 1).rev() {\n-   |                           ^^^ `usize` is not an iterator\n+   |                           ^^^ can't call method `rev` on type `usize`\n    |\n help: you must surround the range in parentheses to call the `rev` function\n    |\n LL |     for i in (1..(end + 1)).rev() {\n    |              +            +\n \n-error[E0599]: `usize` is not an iterator\n+error[E0689]: can't call method `is_empty` on type `usize`\n   --> $DIR/issue-90315.rs:28:21\n    |\n LL |     if 1..(end + 1).is_empty() {\n-   |                     ^^^^^^^^ `usize` is not an iterator\n+   |                     ^^^^^^^^ can't call method `is_empty` on type `usize`\n    |\n help: you must surround the range in parentheses to call the `is_empty` function\n    |\n@@ -62,11 +62,11 @@ LL |     if 1..(end + 1).is_empty() {\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n \n-error[E0599]: `usize` is not an iterator\n+error[E0689]: can't call method `is_sorted` on type `usize`\n   --> $DIR/issue-90315.rs:34:21\n    |\n LL |     if 1..(end + 1).is_sorted() {\n-   |                     ^^^^^^^^^ `usize` is not an iterator\n+   |                     ^^^^^^^^^ can't call method `is_sorted` on type `usize`\n    |\n help: you must surround the range in parentheses to call the `is_sorted` function\n    |\n@@ -82,11 +82,11 @@ LL |     if 1..(end + 1).is_sorted() {\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n \n-error[E0599]: `{integer}` is not an iterator\n+error[E0689]: can't call method `take` on type `{integer}`\n   --> $DIR/issue-90315.rs:40:26\n    |\n LL |     let _res: i32 = 3..6.take(2).sum();\n-   |                          ^^^^ `{integer}` is not an iterator\n+   |                          ^^^^ can't call method `take` on type `{integer}`\n    |\n help: you must surround the range in parentheses to call the `take` function\n    |\n@@ -104,11 +104,11 @@ LL |     let _res: i32 = 3..6.take(2).sum();\n    = note: expected type `i32`\n             found struct `std::ops::Range<{integer}>`\n \n-error[E0599]: `{integer}` is not an iterator\n+error[E0689]: can't call method `sum` on type `{integer}`\n   --> $DIR/issue-90315.rs:45:26\n    |\n LL |     let _sum: i32 = 3..6.sum();\n-   |                          ^^^ `{integer}` is not an iterator\n+   |                          ^^^ can't call method `sum` on type `{integer}`\n    |\n help: you must surround the range in parentheses to call the `sum` function\n    |\n@@ -126,22 +126,22 @@ LL |     let _sum: i32 = 3..6.sum();\n    = note: expected type `i32`\n             found struct `std::ops::Range<{integer}>`\n \n-error[E0599]: `usize` is not an iterator\n+error[E0689]: can't call method `rev` on type `usize`\n   --> $DIR/issue-90315.rs:53:21\n    |\n LL |     for _a in a..=b.rev() {\n-   |                     ^^^ `usize` is not an iterator\n+   |                     ^^^ can't call method `rev` on type `usize`\n    |\n help: you must surround the range in parentheses to call the `rev` function\n    |\n LL |     for _a in (a..=b).rev() {\n    |               +     +\n \n-error[E0599]: `{integer}` is not an iterator\n+error[E0689]: can't call method `contains` on type `{integer}`\n   --> $DIR/issue-90315.rs:58:21\n    |\n LL |     let _res = ..10.contains(3);\n-   |                     ^^^^^^^^ `{integer}` is not an iterator\n+   |                     ^^^^^^^^ can't call method `contains` on type `{integer}`\n    |\n help: you must surround the range in parentheses to call the `contains` function\n    |\n@@ -173,7 +173,29 @@ LL |     let _res = b.take(1)..a;\n            `usize: Iterator`\n            which is required by `&mut usize: Iterator`\n \n-error: aborting due to 17 previous errors\n+error[E0689]: can't call method `take` on ambiguous numeric type `{integer}`\n+  --> $DIR/issue-90315.rs:71:25\n+   |\n+LL |     let _res: i32 = ..6.take(2).sum();\n+   |                         ^^^^\n+   |\n+help: you must specify a concrete type for this numeric value, like `i32`\n+   |\n+LL |     let _res: i32 = ..6_i32.take(2).sum();\n+   |                       ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:71:21\n+   |\n+LL |     let _res: i32 = ..6.take(2).sum();\n+   |               ---   ^^^^^^^^^^^^^^^^^ expected `i32`, found struct `RangeTo`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `RangeTo<_>`\n+\n+error: aborting due to 19 previous errors\n \n-Some errors have detailed explanations: E0308, E0599.\n+Some errors have detailed explanations: E0308, E0599, E0689.\n For more information about an error, try `rustc --explain E0308`."}]}