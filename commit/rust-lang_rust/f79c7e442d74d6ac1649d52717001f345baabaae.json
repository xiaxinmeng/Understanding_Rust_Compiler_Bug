{"sha": "f79c7e442d74d6ac1649d52717001f345baabaae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OWM3ZTQ0MmQ3NGQ2YWMxNjQ5ZDUyNzE3MDAxZjM0NWJhYWJhYWU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-12T09:14:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-12T21:15:09Z"}, "message": "Refactor `MarkData` field `modern: bool` to `kind: MarkKind`.", "tree": {"sha": "8499e4cdf27183cab10d8bf928ea33f25acd84db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8499e4cdf27183cab10d8bf928ea33f25acd84db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f79c7e442d74d6ac1649d52717001f345baabaae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c7e442d74d6ac1649d52717001f345baabaae", "html_url": "https://github.com/rust-lang/rust/commit/f79c7e442d74d6ac1649d52717001f345baabaae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f79c7e442d74d6ac1649d52717001f345baabaae/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dbe79ae5e2e299959b9dbd20074d348266a91ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbe79ae5e2e299959b9dbd20074d348266a91ed", "html_url": "https://github.com/rust-lang/rust/commit/8dbe79ae5e2e299959b9dbd20074d348266a91ed"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "ab6c3f7d62d76c17b0ea0e224f865d6d3acf07df", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f79c7e442d74d6ac1649d52717001f345baabaae/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c7e442d74d6ac1649d52717001f345baabaae/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=f79c7e442d74d6ac1649d52717001f345baabaae", "patch": "@@ -27,28 +27,34 @@ use std::fmt;\n #[derive(Clone, Copy, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]\n pub struct SyntaxContext(pub(super) u32);\n \n-#[derive(Copy, Clone, Default)]\n+#[derive(Copy, Clone)]\n pub struct SyntaxContextData {\n     pub outer_mark: Mark,\n     pub prev_ctxt: SyntaxContext,\n     pub modern: SyntaxContext,\n }\n \n /// A mark is a unique id associated with a macro expansion.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Default, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Mark(u32);\n \n-#[derive(Default)]\n struct MarkData {\n     parent: Mark,\n-    modern: bool,\n+    kind: MarkKind,\n     expn_info: Option<ExpnInfo>,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq)]\n+pub enum MarkKind {\n+    Modern,\n+    Builtin,\n+    Legacy,\n+}\n+\n impl Mark {\n     pub fn fresh(parent: Mark) -> Self {\n         HygieneData::with(|data| {\n-            data.marks.push(MarkData { parent: parent, modern: false, expn_info: None });\n+            data.marks.push(MarkData { parent: parent, kind: MarkKind::Legacy, expn_info: None });\n             Mark(data.marks.len() as u32 - 1)\n         })\n     }\n@@ -77,20 +83,20 @@ impl Mark {\n     pub fn modern(mut self) -> Mark {\n         HygieneData::with(|data| {\n             loop {\n-                if self == Mark::root() || data.marks[self.0 as usize].modern {\n+                if self == Mark::root() || data.marks[self.0 as usize].kind == MarkKind::Modern {\n                     return self;\n                 }\n                 self = data.marks[self.0 as usize].parent;\n             }\n         })\n     }\n \n-    pub fn is_modern(self) -> bool {\n-        HygieneData::with(|data| data.marks[self.0 as usize].modern)\n+    pub fn kind(self) -> MarkKind {\n+        HygieneData::with(|data| data.marks[self.0 as usize].kind)\n     }\n \n-    pub fn set_modern(self) {\n-        HygieneData::with(|data| data.marks[self.0 as usize].modern = true)\n+    pub fn set_kind(self, kind: MarkKind) {\n+        HygieneData::with(|data| data.marks[self.0 as usize].kind = kind)\n     }\n \n     pub fn is_descendant_of(mut self, ancestor: Mark) -> bool {\n@@ -116,8 +122,16 @@ struct HygieneData {\n impl HygieneData {\n     fn new() -> Self {\n         HygieneData {\n-            marks: vec![MarkData::default()],\n-            syntax_contexts: vec![SyntaxContextData::default()],\n+            marks: vec![MarkData {\n+                parent: Mark::root(),\n+                kind: MarkKind::Builtin,\n+                expn_info: None,\n+            }],\n+            syntax_contexts: vec![SyntaxContextData {\n+                outer_mark: Mark::root(),\n+                prev_ctxt: SyntaxContext(0),\n+                modern: SyntaxContext(0),\n+            }],\n             markings: HashMap::new(),\n             gensym_to_ctxt: HashMap::new(),\n         }\n@@ -150,7 +164,7 @@ impl SyntaxContext {\n         HygieneData::with(|data| {\n             data.marks.push(MarkData {\n                 parent: Mark::root(),\n-                modern: false,\n+                kind: MarkKind::Legacy,\n                 expn_info: Some(expansion_info)\n             });\n \n@@ -170,7 +184,7 @@ impl SyntaxContext {\n         HygieneData::with(|data| {\n             let syntax_contexts = &mut data.syntax_contexts;\n             let mut modern = syntax_contexts[self.0 as usize].modern;\n-            if data.marks[mark.0 as usize].modern {\n+            if data.marks[mark.0 as usize].kind == MarkKind::Modern {\n                 modern = *data.markings.entry((modern, mark)).or_insert_with(|| {\n                     let len = syntax_contexts.len() as u32;\n                     syntax_contexts.push(SyntaxContextData {"}]}