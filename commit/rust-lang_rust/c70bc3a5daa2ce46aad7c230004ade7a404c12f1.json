{"sha": "c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MGJjM2E1ZGFhMmNlNDZhYWQ3YzIzMDAwNGFkZTdhNDA0YzEyZjE=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-03-11T06:42:26Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-03-30T00:00:02Z"}, "message": "Don't build a map of predecessors, just count them instead", "tree": {"sha": "e25ab905c326a3a112951fad70b778ee81a126a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e25ab905c326a3a112951fad70b778ee81a126a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "html_url": "https://github.com/rust-lang/rust/commit/c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c70bc3a5daa2ce46aad7c230004ade7a404c12f1/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eee7f3c73298ed77f61ad15cdca552528d6f3783", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee7f3c73298ed77f61ad15cdca552528d6f3783", "html_url": "https://github.com/rust-lang/rust/commit/eee7f3c73298ed77f61ad15cdca552528d6f3783"}], "stats": {"total": 92, "additions": 4, "deletions": 88}, "files": [{"sha": "6ce9f3489172d51a0912cd0425e624cb2f5e970a", "filename": "src/librustc_mir/transform/break_critical_edges.rs", "status": "modified", "additions": 4, "deletions": 88, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c70bc3a5daa2ce46aad7c230004ade7a404c12f1/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c70bc3a5daa2ce46aad7c230004ade7a404c12f1/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs?ref=c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "patch": "@@ -7,9 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use std::mem;\n-\n-use rustc_back::slice;\n use rustc::mir::repr::*;\n use rustc::mir::mir_map::MirMap;\n \n@@ -43,95 +40,14 @@ pub fn break_critical_edges<'tcx>(mir_map: &mut MirMap<'tcx>) {\n     }\n }\n \n-/*\n- * Predecessor map for tracking the predecessors of a block\n- */\n-struct PredMap {\n-    preds: Vec<BlockPredecessors>\n-}\n-\n-/**\n- * Most blocks only have one predecessor, so we can cut down on\n- * some allocation by not using Vec until we have more than one.\n- */\n-#[derive(Clone)]\n-enum BlockPredecessors {\n-    None,\n-    One(BasicBlock),\n-    Some(Vec<BasicBlock>)\n-}\n-\n-impl PredMap {\n-    pub fn new(n: usize) -> PredMap {\n-        let preds = vec![BlockPredecessors::None; n];\n-\n-        PredMap {\n-            preds: preds\n-        }\n-    }\n-\n-    fn ensure_len(&mut self, bb: BasicBlock) {\n-        let idx = bb.index();\n-        while self.preds.len() <= idx {\n-            self.preds.push(BlockPredecessors::None);\n-        }\n-    }\n-\n-    pub fn add_pred(&mut self, target: BasicBlock, pred: BasicBlock) {\n-        self.ensure_len(target);\n-\n-        let preds = mem::replace(&mut self.preds[target.index()], BlockPredecessors::None);\n-        match preds {\n-            BlockPredecessors::None => {\n-                self.preds[target.index()] = BlockPredecessors::One(pred);\n-            }\n-            BlockPredecessors::One(bb) => {\n-                self.preds[target.index()] = BlockPredecessors::Some(vec![bb, pred]);\n-            }\n-            BlockPredecessors::Some(mut preds) => {\n-                preds.push(pred);\n-                self.preds[target.index()] = BlockPredecessors::Some(preds);\n-            }\n-        }\n-    }\n-\n-    pub fn remove_pred(&mut self, target: BasicBlock, pred: BasicBlock) {\n-        self.ensure_len(target);\n-\n-        let preds = mem::replace(&mut self.preds[target.index()], BlockPredecessors::None);\n-        match preds {\n-            BlockPredecessors::None => {}\n-            BlockPredecessors::One(bb) if bb == pred => {}\n-\n-            BlockPredecessors::One(bb) => {\n-                self.preds[target.index()] = BlockPredecessors::One(bb);\n-            }\n-\n-            BlockPredecessors::Some(mut preds) => {\n-                preds.retain(|&bb| bb != pred);\n-                self.preds[target.index()] = BlockPredecessors::Some(preds);\n-            }\n-        }\n-    }\n-\n-    pub fn get_preds(&self, bb: BasicBlock) -> &[BasicBlock] {\n-        match self.preds[bb.index()] {\n-            BlockPredecessors::None => &[],\n-            BlockPredecessors::One(ref bb) => slice::ref_slice(bb),\n-            BlockPredecessors::Some(ref bbs) => &bbs[..]\n-        }\n-    }\n-}\n-\n-\n fn break_critical_edges_fn(mir: &mut Mir) {\n-    let mut pred_map = PredMap::new(mir.basic_blocks.len());\n+    let mut pred_count = vec![0u32; mir.basic_blocks.len()];\n \n     // Build the precedecessor map for the MIR\n-    for (pred, data) in traversal::preorder(mir) {\n+    for (_, data) in traversal::preorder(mir) {\n         if let Some(ref term) = data.terminator {\n             for &tgt in term.successors().iter() {\n-                pred_map.add_pred(tgt, pred);\n+                pred_count[tgt.index()] += 1;\n             }\n         }\n     }\n@@ -150,7 +66,7 @@ fn break_critical_edges_fn(mir: &mut Mir) {\n             let succs = term.successors_mut();\n             if succs.len() > 1 || (succs.len() > 0 && is_invoke) {\n                 for tgt in succs {\n-                    let num_preds = pred_map.get_preds(*tgt).len();\n+                    let num_preds = pred_count[tgt.index()];\n                     if num_preds > 1 {\n                         // It's a critical edge, break it\n                         let goto = Terminator::Goto { target: *tgt };"}]}