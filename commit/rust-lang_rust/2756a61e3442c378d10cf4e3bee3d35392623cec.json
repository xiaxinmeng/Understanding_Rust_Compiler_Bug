{"sha": "2756a61e3442c378d10cf4e3bee3d35392623cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTZhNjFlMzQ0MmMzNzhkMTBjZjRlM2JlZTNkMzUzOTI2MjNjZWM=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-23T07:03:42Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::str) add index, index_from, rindex which return byte positions of chars; rename find to find_chars; add fixmes to delete byte_index, byte_index_from", "tree": {"sha": "b247176d4f8a9abef691f140b4717f8097f02fd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b247176d4f8a9abef691f140b4717f8097f02fd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2756a61e3442c378d10cf4e3bee3d35392623cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2756a61e3442c378d10cf4e3bee3d35392623cec", "html_url": "https://github.com/rust-lang/rust/commit/2756a61e3442c378d10cf4e3bee3d35392623cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2756a61e3442c378d10cf4e3bee3d35392623cec/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d04e00621672a0e9f5424285f302077a973b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d04e00621672a0e9f5424285f302077a973b37", "html_url": "https://github.com/rust-lang/rust/commit/e1d04e00621672a0e9f5424285f302077a973b37"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "17975fe65812202a9db14734ded6f9ff7de40b44", "filename": "src/libcore/str.rs", "status": "modified", "additions": 76, "deletions": 15, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/2756a61e3442c378d10cf4e3bee3d35392623cec/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2756a61e3442c378d10cf4e3bee3d35392623cec/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=2756a61e3442c378d10cf4e3bee3d35392623cec", "patch": "@@ -72,8 +72,9 @@ export\n    index_chars,\n    byte_index,\n    byte_index_from,\n+   //rindex,\n    rindex_chars,\n-   find,\n+   find_chars,\n    find_bytes,\n    find_from_bytes,\n    contains,\n@@ -861,7 +862,36 @@ Section: Searching\n \n // Function: index\n //\n-// Returns the index of the first matching char\n+// Returns the byte index of the first matching char\n+// (as option some/none)\n+fn index(ss: str, cc: char) -> option<uint> {\n+    index_from(ss, cc, 0u, len_bytes(ss))\n+}\n+\n+// Function: index_from\n+//\n+// Returns the byte index of the first matching char\n+// (as option some/none), starting at `nn`\n+fn index_from(ss: str, cc: char, start: uint, end: uint) -> option<uint> {\n+    let bii = start;\n+    while bii < end {\n+        let {ch, next} = char_range_at(ss, bii);\n+\n+        // found here?\n+        if ch == cc {\n+            ret some(bii);\n+        }\n+\n+        bii = next;\n+    }\n+\n+    // wasn't found\n+    ret none;\n+}\n+\n+// Function: index_chars\n+//\n+// Returns the char index of the first matching char\n // (as option some/none)\n fn index_chars(ss: str, cc: char) -> option<uint> {\n     let bii = 0u;\n@@ -887,6 +917,7 @@ fn index_chars(ss: str, cc: char) -> option<uint> {\n //\n // Returns the index of the first matching byte\n // (as option some/none)\n+// FIXME: delete\n fn byte_index(s: str, b: u8) -> option<uint> {\n     byte_index_from(s, b, 0u, len_bytes(s))\n }\n@@ -896,15 +927,36 @@ fn byte_index(s: str, b: u8) -> option<uint> {\n // Returns the index of the first matching byte within the range [`start`,\n // `end`).\n // (as option some/none)\n+// FIXME: delete\n fn byte_index_from(s: str, b: u8, start: uint, end: uint) -> option<uint> {\n     assert end <= len_bytes(s);\n \n     str::as_bytes(s) { |v| vec::position_from(v, start, end) { |x| x == b } }\n }\n \n+// Function: rindex\n+//\n+// Returns the byte index of the first matching char\n+// (as option some/none)\n+fn rindex(ss: str, cc: char) -> option<uint> {\n+    let bii = len_bytes(ss);\n+    while bii > 0u {\n+        let {ch, prev} = char_range_at_reverse(ss, bii);\n+        bii = prev;\n+\n+        // found here?\n+        if ch == cc {\n+            ret some(bii);\n+        }\n+    }\n+\n+    // wasn't found\n+    ret none;\n+}\n+\n // Function: rindex_chars\n //\n-// Returns the index of the first matching char\n+// Returns the char index of the first matching char\n // (as option some/none)\n fn rindex_chars(ss: str, cc: char) -> option<uint> {\n     let bii = len_bytes(ss);\n@@ -926,15 +978,15 @@ fn rindex_chars(ss: str, cc: char) -> option<uint> {\n \n //Function: find_bytes\n //\n-// Find the char position of the first instance of one string\n+// Find the byte position of the first instance of one string\n // within another, or return option::none\n fn find_bytes(haystack: str, needle: str) -> option<uint> {\n     find_from_bytes(haystack, needle, 0u, len_bytes(haystack))\n }\n \n //Function: find_from_bytes\n //\n-// Find the char position of the first instance of one string\n+// Find the byte position of the first instance of one string\n // within another, or return option::none\n //\n // FIXME: Boyer-Moore should be significantly faster\n@@ -962,11 +1014,11 @@ fn find_from_bytes(haystack: str, needle: str, start: uint, end:uint)\n     ret none;\n }\n \n-// Function: find\n+// Function: find_chars\n //\n // Find the char position of the first instance of one string\n // within another, or return option::none\n-fn find(haystack: str, needle: str) -> option<uint> {\n+fn find_chars(haystack: str, needle: str) -> option<uint> {\n    alt find_bytes(haystack, needle) {\n       none { ret none; }\n       some(nn) { ret some(b2c_pos(haystack, nn)); }\n@@ -1570,6 +1622,15 @@ mod tests {\n         assert ( index_chars(\"hello\", 'z') == none);\n     }\n \n+    #[test]\n+    fn test_rindex() {\n+        assert rindex(\"hello\", 'l') == some(3u);\n+        assert rindex(\"hello\", 'o') == some(4u);\n+        assert rindex(\"hello\", 'h') == some(0u);\n+        assert rindex(\"hello\", 'z') == none;\n+        assert rindex(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", '\u534e') == some(30u);\n+    }\n+\n     #[test]\n     fn test_rindex_chars() {\n         assert (rindex_chars(\"hello\", 'l') == some(3u));\n@@ -1820,17 +1881,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_find() {\n+    fn test_find_chars() {\n         // char positions\n-        assert (find(\"banana\", \"apple pie\") == none);\n-        assert (find(\"\", \"\") == some(0u));\n+        assert (find_chars(\"banana\", \"apple pie\") == none);\n+        assert (find_chars(\"\", \"\") == some(0u));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find(data, \"\")     == some(0u));\n-        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some(0u));\n-        assert (find(data, \"\u0e30\u0e40\")   == some(2u));\n-        assert (find(data, \"\u4e2d\u534e\") == some(9u));\n-        assert (find(data, \"\u0e44\u0e17\u534e\") == none);\n+        assert (find_chars(data, \"\")     == some(0u));\n+        assert (find_chars(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some(0u));\n+        assert (find_chars(data, \"\u0e30\u0e40\")   == some(2u));\n+        assert (find_chars(data, \"\u4e2d\u534e\") == some(9u));\n+        assert (find_chars(data, \"\u0e44\u0e17\u534e\") == none);\n     }\n \n     #[test]"}]}