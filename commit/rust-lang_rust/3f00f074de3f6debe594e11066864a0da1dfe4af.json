{"sha": "3f00f074de3f6debe594e11066864a0da1dfe4af", "node_id": "C_kwDOAAsO6NoAKDNmMDBmMDc0ZGUzZjZkZWJlNTk0ZTExMDY2ODY0YTBkYTFkZmU0YWY", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T18:13:44Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T18:13:44Z"}, "message": "fix: fix tests", "tree": {"sha": "577d2fa8f59c5386a819d4c16735a8832d6f8383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/577d2fa8f59c5386a819d4c16735a8832d6f8383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f00f074de3f6debe594e11066864a0da1dfe4af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmIzelgACgkQIPoWCbA7\nHW2h7hAA3xK4m/JDgQqBCoIxXoNydwQyjLBOV/YIyxjNcinrc8C7ATA3AFW7uKEf\n7sq09JxdQA2zXCJ8e5s1Vi5W9S/iawG58eZVWw2bH3J0Vfn6856UPLVD8Wpr7DSW\nqsFM+Hm2j/QG1OKf5t2FuyirvJgfjbOALRdQq3jumYRI8MVIueTPO5LcLBF8nz7l\neQA8WQK4jqht0hOdIIIYrcv5SUdoYijga1+xYp8VDkm7PnRLTvQsTNm5CNz+Q/ES\nRw1vuNt8UI6P/oEtJTtVLimIWz3i1JmLtvZl0h2i9hFHbXIV14M6eS8WxlrsQo4r\n8zxFH6E3dqoUQlvS+B9bvNzZ7peATZSJtztr5NU+/LX074PqxgjTq9C88M59zIMO\nkfETSf6tnORfSeYa+3MS2tgEB+DDX1fVS9idf1uqJ1qO9l+JZu/ySjCij+OOMIB7\nhNzUrOR3Z+qpAI5QPLeUjXba+pG4EKxKthgN3azJG0x2+TnLT9LbE8vc+wouSW7Y\nk3ifNY+89u0xUP/7VBTEF3c57GTH0bqc9X/VjQS2lfJMxVUhaTT3s2D/Mk9G+rLv\nLSvTEjG76nSh+uWfDiUaBQ2N/5XB9jBSoyJOb/EhxRmHNrNgNkpNHa8oKwUw39KR\ni6cafzhSLZ0YjFhlDCQsZqxEVOokSo08w8I0+0xUiuNOCDvQCyE=\n=9uWi\n-----END PGP SIGNATURE-----", "payload": "tree 577d2fa8f59c5386a819d4c16735a8832d6f8383\nparent f49a2c345780abca24d4f5a5f9f821ea961c8fb6\nauthor Max Baumann <max@bmn.dev> 1647540824 +0100\ncommitter Max Baumann <max@bmn.dev> 1647540824 +0100\n\nfix: fix tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f00f074de3f6debe594e11066864a0da1dfe4af", "html_url": "https://github.com/rust-lang/rust/commit/3f00f074de3f6debe594e11066864a0da1dfe4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f00f074de3f6debe594e11066864a0da1dfe4af/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "html_url": "https://github.com/rust-lang/rust/commit/f49a2c345780abca24d4f5a5f9f821ea961c8fb6"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "0536900044495627360d093f54304152c759bbdd", "filename": "clippy_lints/src/use_unwrap_or.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f00f074de3f6debe594e11066864a0da1dfe4af/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f00f074de3f6debe594e11066864a0da1dfe4af/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs?ref=3f00f074de3f6debe594e11066864a0da1dfe4af", "patch": "@@ -1,11 +1,10 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n-use rustc_hir::*;\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{Span, sym};\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -39,7 +38,6 @@ declare_lint_pass!(UseUnwrapOr => [USE_UNWRAP_OR]);\n \n impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-\n         // look for x.or().unwrap()\n         if_chain! {\n             if let ExprKind::MethodCall(path, args, unwrap_span) = expr.kind;\n@@ -52,13 +50,13 @@ impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n                 let title;\n                 let arg = &caller_args[1]; // the argument or(xyz) is called with\n \n-                if is_type_diagnostic_item(&cx, ty, sym::Option) {\n+                if is_type_diagnostic_item(cx, ty, sym::Option) {\n                     title = \".or(Some(\u2026)).unwrap() found\";\n                     if !is(arg, \"Some\") {\n                         return;\n                     }\n \n-                } else if is_type_diagnostic_item(&cx, ty, sym::Result) {\n+                } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n                     title = \".or(Ok(\u2026)).unwrap() found\";\n                     if !is(arg, \"Ok\") {\n                         return;\n@@ -90,16 +88,14 @@ impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n fn is<'a>(expr: &Expr<'a>, name: &str) -> bool {\n     if_chain! {\n         if let ExprKind::Call(some_expr, _some_args) = expr.kind;\n-        if let ExprKind::Path(path) = &some_expr.kind;\n-        if let QPath::Resolved(_, path) = path;\n+        if let ExprKind::Path(QPath::Resolved(_, path)) = &some_expr.kind;\n         if let Some(path_segment) = path.segments.first();\n         if path_segment.ident.name.as_str() == name;\n         then {\n-            return true;\n+            true\n         }\n         else {\n-            return false;\n+            false\n         }\n     }\n }\n-"}, {"sha": "685fab802063f6d031bc0b0e3e6e0cbf91ef0c67", "filename": "tests/ui/use_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f00f074de3f6debe594e11066864a0da1dfe4af/tests%2Fui%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f00f074de3f6debe594e11066864a0da1dfe4af/tests%2Fui%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_unwrap_or.rs?ref=3f00f074de3f6debe594e11066864a0da1dfe4af", "patch": "@@ -2,8 +2,10 @@\n \n struct SomeStruct {}\n impl SomeStruct {\n-    fn or(self, _: Option<Self>) -> Self { self }\n-    fn unwrap(&self){}\n+    fn or(self, _: Option<Self>) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n }\n \n fn main() {"}, {"sha": "2e1e920795d81f0a244e71a846028b158907cc29", "filename": "tests/ui/use_unwrap_or.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f00f074de3f6debe594e11066864a0da1dfe4af/tests%2Fui%2Fuse_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f00f074de3f6debe594e11066864a0da1dfe4af/tests%2Fui%2Fuse_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_unwrap_or.stderr?ref=3f00f074de3f6debe594e11066864a0da1dfe4af", "patch": "@@ -1,5 +1,5 @@\n error: .or(Some(\u2026)).unwrap() found\n-  --> $DIR/use_unwrap_or.rs:11:20\n+  --> $DIR/use_unwrap_or.rs:13:20\n    |\n LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n    = help: use `unwrap_or()` instead\n \n error: .or(Ok(\u2026)).unwrap() found\n-  --> $DIR/use_unwrap_or.rs:14:20\n+  --> $DIR/use_unwrap_or.rs:16:20\n    |\n LL |     let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}