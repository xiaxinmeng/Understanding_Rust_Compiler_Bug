{"sha": "6e8ddac165777a0811336c2aef71840459c5f997", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOGRkYWMxNjU3NzdhMDgxMTMzNmMyYWVmNzE4NDA0NTljNWY5OTc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-11-02T16:06:49Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-11-02T16:24:35Z"}, "message": "Coalesce prime_caches updates", "tree": {"sha": "22a3b25d152e6f8398a4f8de518cea84829b3c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a3b25d152e6f8398a4f8de518cea84829b3c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8ddac165777a0811336c2aef71840459c5f997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8ddac165777a0811336c2aef71840459c5f997", "html_url": "https://github.com/rust-lang/rust/commit/6e8ddac165777a0811336c2aef71840459c5f997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8ddac165777a0811336c2aef71840459c5f997/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "html_url": "https://github.com/rust-lang/rust/commit/cb04f0c019bdd77406a7feb6ae7f4a17924d0693"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "403904479bb47ea4b51e59ab3f5c8c0d180997a4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6e8ddac165777a0811336c2aef71840459c5f997/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8ddac165777a0811336c2aef71840459c5f997/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6e8ddac165777a0811336c2aef71840459c5f997", "patch": "@@ -190,15 +190,35 @@ impl GlobalState {\n                 }\n                 lsp_server::Message::Response(resp) => self.complete_request(resp),\n             },\n-            Event::Task(task) => match task {\n-                Task::Response(response) => self.respond(response),\n-                Task::Diagnostics(diagnostics_per_file) => {\n-                    for (file_id, diagnostics) in diagnostics_per_file {\n-                        self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n+            Event::Task(mut task) => {\n+                let _p = profile::span(\"GlobalState::handle_event/task\");\n+                let mut prime_caches_started = false;\n+                let mut prime_caches_progress = None;\n+                loop {\n+                    match task {\n+                        Task::Response(response) => self.respond(response),\n+                        Task::Diagnostics(diagnostics_per_file) => {\n+                            for (file_id, diagnostics) in diagnostics_per_file {\n+                                self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n+                            }\n+                        }\n+                        Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n+                        Task::PrimeCaches(progress) => {\n+                            if let PrimeCachesProgress::Started = progress {\n+                                prime_caches_started = true;\n+                            }\n+\n+                            prime_caches_progress = Some(progress);\n+                        }\n                     }\n+                    // Coalesce multiple task events into one loop turn\n+                    task = match self.task_pool.receiver.try_recv() {\n+                        Ok(task) => task,\n+                        Err(_) => break,\n+                    };\n                 }\n-                Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n-                Task::PrimeCaches(progress) => {\n+\n+                if let Some(progress) = prime_caches_progress {\n                     let (state, message, fraction);\n                     match progress {\n                         PrimeCachesProgress::Started => {\n@@ -218,9 +238,15 @@ impl GlobalState {\n                         }\n                     };\n \n-                    self.report_progress(\"indexing\", state, message, Some(fraction));\n+                    if state != Progress::Begin && prime_caches_started {\n+                        // Progress indicator needs to be created first.\n+                        self.report_progress(\"indexing\", Progress::Begin, None, Some(0.0));\n+                    }\n+\n+                    self.report_progress(\"indexing\", state, message.clone(), Some(fraction));\n+                    eprintln!(\"progress reported: {:?}\", message);\n                 }\n-            },\n+            }\n             Event::Vfs(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/vfs\");\n                 loop {"}]}