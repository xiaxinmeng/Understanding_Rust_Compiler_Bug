{"sha": "dd33e8a84a2933a11d89dc78c164b639b842fc43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMzNlOGE4NGEyOTMzYTExZDg5ZGM3OGMxNjRiNjM5Yjg0MmZjNDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-25T02:57:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-25T02:57:37Z"}, "message": "Rollup merge of #61103 - spastorino:find-iterate, r=oli-obk\n\nMake find iterate instead of recurse\n\nr? @oli-obk", "tree": {"sha": "c71b01449c8fa40bd2f0c04771bf16b1fe66f987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71b01449c8fa40bd2f0c04771bf16b1fe66f987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd33e8a84a2933a11d89dc78c164b639b842fc43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6K8hCRBK7hj4Ov3rIwAAdHIIAB4hkVXU70g78kChqAwVsd2L\nsGxxt3LUcG4xYuVaSg9waUCfx5aFGmcqHma3EO+54v9BXABCMbv6kYjg//V6vguM\nexKC1Xczf4y1OINzOzM+BecPprttT1jccHNMSkYWlTV0UiV52OqU2Fe+/p5I0ZDe\nYSVQRiScPr0oGUTXpNTBrjV2XGTOwtqwPsI3cDIB/Usc2TY86xKJJ+Ry4kXZz9OW\nPZxWkrvIpo6y5Z75R8sdP0dveKyyN8iKK96On7zyiPGDL0dFhQx/pM5uz5hnNkbv\nMxtyxfgxR/4a+EyDqVtszHJ290XFFZrA7N/xuOZmR/XR2WEpaa6PvQEuF0XI8q8=\n=/IyM\n-----END PGP SIGNATURE-----\n", "payload": "tree c71b01449c8fa40bd2f0c04771bf16b1fe66f987\nparent e30300d6e8673bcc509741fa885f3874c0df0e21\nparent 34314caea39300276375f3cd948e09a37bec6873\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558753057 +0200\ncommitter GitHub <noreply@github.com> 1558753057 +0200\n\nRollup merge of #61103 - spastorino:find-iterate, r=oli-obk\n\nMake find iterate instead of recurse\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd33e8a84a2933a11d89dc78c164b639b842fc43", "html_url": "https://github.com/rust-lang/rust/commit/dd33e8a84a2933a11d89dc78c164b639b842fc43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd33e8a84a2933a11d89dc78c164b639b842fc43/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e30300d6e8673bcc509741fa885f3874c0df0e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30300d6e8673bcc509741fa885f3874c0df0e21", "html_url": "https://github.com/rust-lang/rust/commit/e30300d6e8673bcc509741fa885f3874c0df0e21"}, {"sha": "34314caea39300276375f3cd948e09a37bec6873", "url": "https://api.github.com/repos/rust-lang/rust/commits/34314caea39300276375f3cd948e09a37bec6873", "html_url": "https://github.com/rust-lang/rust/commit/34314caea39300276375f3cd948e09a37bec6873"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "7aaf44a8a890ee9e33ceddf0676191b285325018", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dd33e8a84a2933a11d89dc78c164b639b842fc43/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd33e8a84a2933a11d89dc78c164b639b842fc43/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=dd33e8a84a2933a11d89dc78c164b639b842fc43", "patch": "@@ -241,21 +241,22 @@ impl MovePathLookup {\n     // unknown place, but will rather return the nearest available\n     // parent.\n     pub fn find(&self, place: &Place<'tcx>) -> LookupResult {\n-        match *place {\n-            Place::Base(PlaceBase::Local(local)) => LookupResult::Exact(self.locals[local]),\n-            Place::Base(PlaceBase::Static(..)) => LookupResult::Parent(None),\n-            Place::Projection(ref proj) => {\n-                match self.find(&proj.base) {\n-                    LookupResult::Exact(base_path) => {\n-                        match self.projections.get(&(base_path, proj.elem.lift())) {\n-                            Some(&subpath) => LookupResult::Exact(subpath),\n-                            None => LookupResult::Parent(Some(base_path))\n-                        }\n-                    }\n-                    inexact => inexact\n+        place.iterate(|place_base, place_projection| {\n+            let mut result = match place_base {\n+                PlaceBase::Local(local) => self.locals[*local],\n+                PlaceBase::Static(..) => return LookupResult::Parent(None),\n+            };\n+\n+            for proj in place_projection {\n+                if let Some(&subpath) = self.projections.get(&(result, proj.elem.lift())) {\n+                    result = subpath;\n+                } else {\n+                    return LookupResult::Parent(Some(result));\n                 }\n             }\n-        }\n+\n+            LookupResult::Exact(result)\n+        })\n     }\n \n     pub fn find_local(&self, local: Local) -> MovePathIndex {"}]}