{"sha": "6d94f95a201582e6c99ffc54573cd06fdfd0c165", "node_id": "C_kwDOAAsO6NoAKDZkOTRmOTVhMjAxNTgyZTZjOTlmZmM1NDU3M2NkMDZmZGZkMGMxNjU", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-03T18:42:35Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-14T14:11:27Z"}, "message": "address review", "tree": {"sha": "fdd7062d7f09da49edf666000deb5d1db35039da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd7062d7f09da49edf666000deb5d1db35039da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d94f95a201582e6c99ffc54573cd06fdfd0c165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d94f95a201582e6c99ffc54573cd06fdfd0c165", "html_url": "https://github.com/rust-lang/rust/commit/6d94f95a201582e6c99ffc54573cd06fdfd0c165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d94f95a201582e6c99ffc54573cd06fdfd0c165/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4ad95826808e9735c3f530efcc71c9896cdaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4ad95826808e9735c3f530efcc71c9896cdaf0", "html_url": "https://github.com/rust-lang/rust/commit/3f4ad95826808e9735c3f530efcc71c9896cdaf0"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "da67888827d199a31de66d410b2e5e0c8a4f27ca", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d94f95a201582e6c99ffc54573cd06fdfd0c165/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d94f95a201582e6c99ffc54573cd06fdfd0c165/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=6d94f95a201582e6c99ffc54573cd06fdfd0c165", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n                         .tcx\n                         .const_eval_poly(def_id.to_def_id())\n                         .ok()\n-                        .and_then(|val| Some(rustc_middle::mir::ConstantKind::from_value(val, ty)));\n+                        .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty));\n                     if let Some(Constant::Int(val)) = constant.and_then(|c| miri_to_const(cx.tcx, c)) {\n                         if let ty::Adt(adt, _) = ty.kind() {\n                             if adt.is_enum() {"}, {"sha": "6709ac13a432f6a2271f7d94dab9fb0747527f53", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d94f95a201582e6c99ffc54573cd06fdfd0c165/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d94f95a201582e6c99ffc54573cd06fdfd0c165/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=6d94f95a201582e6c99ffc54573cd06fdfd0c165", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                         None,\n                     )\n                     .ok()\n-                    .and_then(|val| Some(rustc_middle::mir::ConstantKind::from_value(val, ty)))?;\n+                    .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty))?;\n                 let result = miri_to_const(self.lcx.tcx, result);\n                 if result.is_some() {\n                     self.needed_resolution = true;\n@@ -581,16 +581,6 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     }\n }\n \n-fn try_const_to_constant<'tcx>(tcx: TyCtxt<'tcx>, c: ty::Const<'tcx>) -> Option<Constant> {\n-    match c.kind() {\n-        ty::ConstKind::Value(valtree) => {\n-            let const_val = tcx.valtree_to_const_val((c.ty(), valtree));\n-            miri_to_const(tcx, mir::ConstantKind::from_value(const_val, c.ty()))\n-        },\n-        _ => None,\n-    }\n-}\n-\n pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -> Option<Constant> {\n     use rustc_middle::mir::interpret::ConstValue;\n     match result {\n@@ -629,8 +619,8 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n         },\n         mir::ConstantKind::Val(ConstValue::ByRef { alloc, offset: _ }, _) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match try_const_to_constant(tcx, *len) {\n-                    Some(Constant::Int(len)) => alloc\n+                ty::Float(FloatTy::F32) => match len.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n+                    Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n                         .to_owned()\n@@ -644,8 +634,8 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match try_const_to_constant(tcx, *len) {\n-                    Some(Constant::Int(len)) => alloc\n+                ty::Float(FloatTy::F64) => match len.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n+                    Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n                         .to_owned()"}]}