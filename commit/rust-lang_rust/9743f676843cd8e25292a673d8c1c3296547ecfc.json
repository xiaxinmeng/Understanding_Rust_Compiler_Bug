{"sha": "9743f676843cd8e25292a673d8c1c3296547ecfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NDNmNjc2ODQzY2Q4ZTI1MjkyYTY3M2Q4YzFjMzI5NjU0N2VjZmM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-29T18:44:06Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-29T18:44:06Z"}, "message": "Improve panic_fmt lint messages.\n\n(From the PR feedback.)\n\nCo-authored-by: Esteban K\u00fcber <esteban@kuber.com.ar>", "tree": {"sha": "19a51594cb9a8f96ef226d1efa8204409a3d8d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a51594cb9a8f96ef226d1efa8204409a3d8d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9743f676843cd8e25292a673d8c1c3296547ecfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9743f676843cd8e25292a673d8c1c3296547ecfc", "html_url": "https://github.com/rust-lang/rust/commit/9743f676843cd8e25292a673d8c1c3296547ecfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9743f676843cd8e25292a673d8c1c3296547ecfc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cefc3ce416dc435e2356dfa0e8f3cbe086a7619", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cefc3ce416dc435e2356dfa0e8f3cbe086a7619", "html_url": "https://github.com/rust-lang/rust/commit/5cefc3ce416dc435e2356dfa0e8f3cbe086a7619"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "0d2b20989b0c335d9634d71416cd3d31ee418b69", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9743f676843cd8e25292a673d8c1c3296547ecfc/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9743f676843cd8e25292a673d8c1c3296547ecfc/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=9743f676843cd8e25292a673d8c1c3296547ecfc", "patch": "@@ -1,6 +1,6 @@\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n-use rustc_errors::Applicability;\n+use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n@@ -21,7 +21,7 @@ declare_lint! {\n     ///\n     /// `panic!(\"{}\")` panics with the message `\"{}\"`, as a `panic!()` invocation\n     /// with a single argument does not use `format_args!()`.\n-    /// A future version of Rust will interpret this string as format string,\n+    /// A future edition of Rust will interpret this string as format string,\n     /// which would break this.\n     PANIC_FMT,\n     Warn,\n@@ -97,11 +97,11 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                                 1 => \"panic message contains an unused formatting placeholder\",\n                                 _ => \"panic message contains unused formatting placeholders\",\n                             });\n-                            l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust version\");\n+                            l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust edition\");\n                             if expn.call_site.contains(arg.span) {\n                                 l.span_suggestion(\n                                     arg.span.shrink_to_hi(),\n-                                    \"add the missing argument(s)\",\n+                                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n                                     \", ...\".into(),\n                                     Applicability::HasPlaceholders,\n                                 );\n@@ -131,7 +131,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                         };\n                         cx.struct_span_lint(PANIC_FMT, brace_spans.unwrap_or(vec![expn.call_site]), |lint| {\n                             let mut l = lint.build(msg);\n-                            l.note(\"this message is not used as a format string, but will be in a future Rust version\");\n+                            l.note(\"this message is not used as a format string, but will be in a future Rust edition\");\n                             if expn.call_site.contains(arg.span) {\n                                 l.span_suggestion(\n                                     arg.span.shrink_to_lo(),"}, {"sha": "0520ab2a38f31a7a147aa677fb9c767db62d2846", "filename": "src/test/ui/panic-brace.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9743f676843cd8e25292a673d8c1c3296547ecfc/src%2Ftest%2Fui%2Fpanic-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9743f676843cd8e25292a673d8c1c3296547ecfc/src%2Ftest%2Fui%2Fpanic-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.stderr?ref=9743f676843cd8e25292a673d8c1c3296547ecfc", "patch": "@@ -5,7 +5,7 @@ LL |     panic!(\"here's a brace: {\");\n    |                             ^\n    |\n    = note: `#[warn(panic_fmt)]` on by default\n-   = note: this message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", \"here's a brace: {\");\n@@ -17,7 +17,7 @@ warning: panic message contains a brace\n LL |     std::panic!(\"another one: }\");\n    |                               ^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     std::panic!(\"{}\", \"another one: }\");\n@@ -29,8 +29,8 @@ warning: panic message contains an unused formatting placeholder\n LL |     core::panic!(\"Hello {}\");\n    |                         ^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n-help: add the missing argument(s)\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+help: add the missing argument\n    |\n LL |     core::panic!(\"Hello {}\", ...);\n    |                            ^^^^^\n@@ -45,8 +45,8 @@ warning: panic message contains unused formatting placeholders\n LL |     assert!(false, \"{:03x} {test} bla\");\n    |                     ^^^^^^ ^^^^^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n-help: add the missing argument(s)\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+help: add the missing arguments\n    |\n LL |     assert!(false, \"{:03x} {test} bla\", ...);\n    |                                       ^^^^^\n@@ -61,7 +61,7 @@ warning: panic message contains braces\n LL |     debug_assert!(false, \"{{}} bla\");\n    |                           ^^^^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n@@ -73,8 +73,8 @@ warning: panic message contains an unused formatting placeholder\n LL |     panic!(concat!(\"{\", \"}\"));\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n-help: add the missing argument(s)\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+help: add the missing argument\n    |\n LL |     panic!(concat!(\"{\", \"}\"), ...);\n    |                             ^^^^^\n@@ -89,7 +89,7 @@ warning: panic message contains braces\n LL |     panic!(concat!(\"{\", \"{\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", concat!(\"{\", \"{\"));"}]}