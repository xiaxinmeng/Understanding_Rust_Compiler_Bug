{"sha": "580c96bbe34d0a08c1aa485ff41da7533adedf69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MGM5NmJiZTM0ZDBhMDhjMWFhNDg1ZmY0MWRhNzUzM2FkZWRmNjk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-02T02:02:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-02T02:02:20Z"}, "message": "Merge pull request #2104 from martinlindhe/master\n\nfix some typos", "tree": {"sha": "b3df035344af8fb9efa1385db3ee6e3930681928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3df035344af8fb9efa1385db3ee6e3930681928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580c96bbe34d0a08c1aa485ff41da7533adedf69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ+nysCRBK7hj4Ov3rIwAAdHIIAD/rpKdM6wtdMQa9iQvQXiq6\nCO543SLDCkP+Mb9Ddygs+U8HncDo77J/GlomAjjCMLCeXoH7ipB9tBnuvZj7Yz5F\nf65kGx4jCptH02ZWuhTmHMFjhePArH/ToQgVKWlkMwsikpzKS2xPmAQubbddT+Uy\nDnoj8fFLxnq1SHB4XcTZCKbReiR/N2j1RAXdsEiwLpuSe8VqjhH60kSkmStIgDWG\nG6aPmALbA4oVRo6d1l7QvjZeWGwpA5J1mMeVtaMoz+PhQQSjr2/NguBsU9fKEVWj\n+6+Fcx2Qz8l4rBxWzclUwPUclY+ZBwFwcER9kam1HlbiwpWhI+Kjpiax2op6Vk0=\n=ZqUB\n-----END PGP SIGNATURE-----\n", "payload": "tree b3df035344af8fb9efa1385db3ee6e3930681928\nparent 0af8825eb104e6c7b9444693d583b5fa0bd55ceb\nparent f930a16b8d6ad1b4b1be930e34d84a065ee28594\nauthor Nick Cameron <nrc@ncameron.org> 1509588140 +1300\ncommitter GitHub <noreply@github.com> 1509588140 +1300\n\nMerge pull request #2104 from martinlindhe/master\n\nfix some typos"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580c96bbe34d0a08c1aa485ff41da7533adedf69", "html_url": "https://github.com/rust-lang/rust/commit/580c96bbe34d0a08c1aa485ff41da7533adedf69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580c96bbe34d0a08c1aa485ff41da7533adedf69/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "html_url": "https://github.com/rust-lang/rust/commit/0af8825eb104e6c7b9444693d583b5fa0bd55ceb"}, {"sha": "f930a16b8d6ad1b4b1be930e34d84a065ee28594", "url": "https://api.github.com/repos/rust-lang/rust/commits/f930a16b8d6ad1b4b1be930e34d84a065ee28594", "html_url": "https://github.com/rust-lang/rust/commit/f930a16b8d6ad1b4b1be930e34d84a065ee28594"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "46d94eb1474f44a8d1013a4768979549ce996664", "filename": "Configurations.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -506,7 +506,7 @@ trait Lorem {\n         dolor: Dolor,\n         sit: Sit,\n         amet: Amet,\n-        consectetur: onsectetur,\n+        consectetur: Consectetur,\n         adipiscing: Adipiscing,\n         elit: Elit,\n     );\n@@ -516,7 +516,7 @@ trait Lorem {\n         dolor: Dolor,\n         sit: Sit,\n         amet: Amet,\n-        consectetur: onsectetur,\n+        consectetur: Consectetur,\n         adipiscing: Adipiscing,\n         elit: Elit,\n     ) {\n@@ -569,7 +569,7 @@ trait Lorem {\n         dolor: Dolor,\n         sit: Sit,\n         amet: Amet,\n-        consectetur: onsectetur,\n+        consectetur: Consectetur,\n         adipiscing: Adipiscing,\n         elit: Elit,\n     ) {\n@@ -598,15 +598,15 @@ trait Lorem {\n              dolor: Dolor,\n              sit: Sit,\n              amet: Amet,\n-             consectetur: onsectetur,\n+             consectetur: Consectetur,\n              adipiscing: Adipiscing,\n              elit: Elit);\n \n     fn lorem(ipsum: Ipsum,\n              dolor: Dolor,\n              sit: Sit,\n              amet: Amet,\n-             consectetur: onsectetur,\n+             consectetur: Consectetur,\n              adipiscing: Adipiscing,\n              elit: Elit) {\n         // body"}, {"sha": "15b11d82844cd48c6c689a567a32272ff5ddf2a4", "filename": "Design.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/Design.md", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/Design.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Design.md?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -151,7 +151,7 @@ for its configuration.\n Our visitor keeps track of the desired current indent due to blocks (\n `block_indent`). Each `visit_*` method reformats code according to this indent,\n `config.comment_width()` and `config.max_width()`. Most reformatting done in the\n-`visit_*` methods is a bit hackey and is meant to be temporary until it can be\n+`visit_*` methods is a bit hacky and is meant to be temporary until it can be\n done properly.\n \n There are a bunch of methods called `rewrite_*`. There do the bulk of the"}, {"sha": "2041a50807453f5da6008313fc4aa2bd34f3a5b6", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -128,7 +128,7 @@ are included as out of line modules from `src/lib.rs`.\n If `rustfmt` successfully reformatted the code it will exit with `0` exit\n status. Exit status `1` signals some unexpected error, like an unknown option or\n a failure to read a file. Exit status `2` is returned if there are syntax errors\n-in the input files. `rustfmt` can't format syntatically invalid code. Finally,\n+in the input files. `rustfmt` can't format syntactically invalid code. Finally,\n exit status `3` is returned if there are some issues which can't be resolved\n automatically. For example, if you have a very long comment line `rustfmt`\n doesn't split it. Instead it prints a warning and exits with `3`.\n@@ -209,7 +209,7 @@ options covering different styles. File an issue, or even better, submit a PR.\n * When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in\n   target file directory or its parents to override the default settings of\n   rustfmt. You can generate a file containing the default configuration with\n-  `rustfm --dump-default-config rustfmt.toml` and customize as needed.\n+  `rustfmt --dump-default-config rustfmt.toml` and customize as needed.\n * After successful compilation, a `rustfmt` executable can be found in the\n   target directory.\n * If you're having issues compiling Rustfmt (or compile errors when trying to"}, {"sha": "e02cef8e38ed49867e98e207ec6f2be77aef11c3", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -152,8 +152,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     }).collect::<Option<Vec<_>>>()?;\n \n     // Total of all items excluding the last.\n-    let extend_last_subexr = last_line_extendable(&parent_rewrite) && rewrites.is_empty();\n-    let almost_total = if extend_last_subexr {\n+    let extend_last_subexpr = last_line_extendable(&parent_rewrite) && rewrites.is_empty();\n+    let almost_total = if extend_last_subexpr {\n         last_line_width(&parent_rewrite)\n     } else {\n         rewrites.iter().fold(0, |a, b| a + b.len()) + parent_rewrite.len()\n@@ -195,7 +195,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     // In particular, overflowing is effective when the last child is a method with a multi-lined\n     // block-like argument (e.g. closure):\n     // ```\n-    // parent.child1.chlid2.last_child(|a, b, c| {\n+    // parent.child1.child2.last_child(|a, b, c| {\n     //     let x = foo(a, b, c);\n     //     let y = bar(a, b, c);\n     //\n@@ -208,14 +208,14 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     // `rewrite_last` rewrites the last child on its own line. We use a closure here instead of\n     // directly calling `rewrite_chain_subexpr()` to avoid exponential blowup.\n     let rewrite_last = || rewrite_chain_subexpr(last_subexpr, total_span, context, last_shape);\n-    let (last_subexpr_str, fits_single_line) = if all_in_one_line || extend_last_subexr {\n+    let (last_subexpr_str, fits_single_line) = if all_in_one_line || extend_last_subexpr {\n         // First we try to 'overflow' the last child and see if it looks better than using\n         // vertical layout.\n         parent_shape.offset_left(almost_total).map(|shape| {\n             if let Some(rw) = rewrite_chain_subexpr(last_subexpr, total_span, context, shape) {\n                 // We allow overflowing here only if both of the following conditions match:\n                 // 1. The entire chain fits in a single line expect the last child.\n-                // 2. `last_chlid_str.lines().count() >= 5`.\n+                // 2. `last_child_str.lines().count() >= 5`.\n                 let line_count = rw.lines().count();\n                 let fits_single_line = almost_total + first_line_width(&rw) <= one_line_budget;\n                 if fits_single_line && line_count >= 5 {"}, {"sha": "8a34e3cbe669c49fc5dfca10c0866d79c770ea4c", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -170,7 +170,7 @@ pub fn combine_strs_with_missing_comments(\n     // We have a missing comment between the first expression and the second expression.\n \n     // Peek the the original source code and find out whether there is a newline between the first\n-    // expression and the second expression or the missing comment. We will preserve the orginal\n+    // expression and the second expression or the missing comment. We will preserve the original\n     // layout whenever possible.\n     let original_snippet = context.snippet(span);\n     let prefer_same_line = if let Some(pos) = original_snippet.chars().position(|c| c == '/') {"}, {"sha": "85008f2915a8f19d4bee1782ec06f0d322b4cc3c", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -235,7 +235,7 @@ macro_rules! create_config {\n \n         // Just like the Config struct but with each property wrapped\n         // as Option<T>. This is used to parse a rustfmt.toml that doesn't\n-        // specity all properties of `Config`.\n+        // specify all properties of `Config`.\n         // We first parse into `PartialConfig`, then create a default `Config`\n         // and overwrite the properties with corresponding values from `PartialConfig`.\n         #[derive(Deserialize, Serialize, Clone)]"}, {"sha": "9855c7e32d0759832f598e265ee93f13bec07efe", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -170,7 +170,7 @@ pub fn format_expr(\n         ast::ExprKind::TupField(..) |\n         ast::ExprKind::MethodCall(..) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::Mac(ref mac) => {\n-            // Failure to rewrite a marco should not imply failure to\n+            // Failure to rewrite a macro should not imply failure to\n             // rewrite the expression.\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n                 .or_else(|| Some(context.snippet(expr.span)))"}, {"sha": "be30ff2d86eb0cf1afc81c18e33cda13a8653ede", "filename": "src/issues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Objects for seeking through a char stream for occurences of TODO and FIXME.\n+// Objects for seeking through a char stream for occurrences of TODO and FIXME.\n // Depending on the loaded configuration, may also check that these have an\n // associated issue number.\n "}, {"sha": "73712033f6e2f0bce14d502a9d83bbd259e643cf", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -572,7 +572,7 @@ where\n             let comment_end = match self.inner.peek() {\n                 Some(..) => {\n                     let mut block_open_index = post_snippet.find(\"/*\");\n-                    // check if it realy is a block comment (and not //*)\n+                    // check if it really is a block comment (and not //*)\n                     if let Some(i) = block_open_index {\n                         if i > 0 && &post_snippet[i - 1..i] == \"/\" {\n                             block_open_index = None;"}, {"sha": "9d665c4a0b2b5ce4aa0242a0f76ef83cea99e4f9", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -15,7 +15,7 @@\n // foo!( x, y, z ). The token x may represent an identifier in the code, but we\n // interpreted as an expression.\n // Macro uses which are not-list like, such as bar!(key => val), will not be\n-// reformated.\n+// reformatted.\n // List-like invocations with parentheses will be formatted as function calls,\n // and those with brackets will be formatted as array literals.\n "}, {"sha": "e4b24bafe2e3d392d53d102b1fa2083da833d171", "filename": "src/patterns.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -118,8 +118,8 @@ impl Rewrite for Pat {\n                 };\n                 Some(result)\n             }\n-            PatKind::Struct(ref path, ref fields, elipses) => {\n-                rewrite_struct_pat(path, fields, elipses, self.span, context, shape)\n+            PatKind::Struct(ref path, ref fields, ellipsis) => {\n+                rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             // FIXME(#819) format pattern macros.\n             PatKind::Mac(..) => Some(context.snippet(self.span)),\n@@ -130,7 +130,7 @@ impl Rewrite for Pat {\n fn rewrite_struct_pat(\n     path: &ast::Path,\n     fields: &[codemap::Spanned<ast::FieldPat>],\n-    elipses: bool,\n+    ellipsis: bool,\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n@@ -139,15 +139,15 @@ fn rewrite_struct_pat(\n     let path_shape = shape.sub_width(2)?;\n     let path_str = rewrite_path(context, PathContext::Expr, None, path, path_shape)?;\n \n-    if fields.is_empty() && !elipses {\n+    if fields.is_empty() && !ellipsis {\n         return Some(format!(\"{} {{}}\", path_str));\n     }\n \n-    let (elipses_str, terminator) = if elipses { (\", ..\", \"..\") } else { (\"\", \"}\") };\n+    let (ellipsis_str, terminator) = if ellipsis { (\", ..\", \"..\") } else { (\"\", \"}\") };\n \n     // 3 = ` { `, 2 = ` }`.\n     let (h_shape, v_shape) =\n-        struct_lit_shape(shape, context, path_str.len() + 3, elipses_str.len() + 2)?;\n+        struct_lit_shape(shape, context, path_str.len() + 3, ellipsis_str.len() + 2)?;\n \n     let items = itemize_list(\n         context.codemap,\n@@ -169,7 +169,7 @@ fn rewrite_struct_pat(\n     let mut fields_str = write_list(&item_vec, &fmt)?;\n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n \n-    if elipses {\n+    if ellipsis {\n         if fields_str.contains('\\n') || fields_str.len() > one_line_width {\n             // Add a missing trailing comma.\n             if fmt.trailing_separator == SeparatorTactic::Never {\n@@ -180,7 +180,7 @@ fn rewrite_struct_pat(\n             fields_str.push_str(\"..\");\n         } else {\n             if !fields_str.is_empty() {\n-                // there are preceeding struct fields being matched on\n+                // there are preceding struct fields being matched on\n                 if fmt.tactic == DefinitiveListTactic::Vertical {\n                     // if the tactic is Vertical, write_list already added a trailing ,\n                     fields_str.push_str(\" \");"}, {"sha": "3da31cb0aa32454610152e609815ee61e8e9dd14", "filename": "src/vertical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -183,7 +183,7 @@ pub fn rewrite_with_alignment<T: AlignedItem>(\n     }\n }\n \n-fn struct_field_preix_max_min_width<T: AlignedItem>(\n+fn struct_field_prefix_max_min_width<T: AlignedItem>(\n     context: &RewriteContext,\n     fields: &[T],\n     shape: Shape,\n@@ -219,7 +219,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     // 1 = \",\"\n     let item_shape = Shape::indented(item_indent, context.config).sub_width(1)?;\n     let (mut field_prefix_max_width, field_prefix_min_width) =\n-        struct_field_preix_max_min_width(context, fields, item_shape);\n+        struct_field_prefix_max_min_width(context, fields, item_shape);\n     let max_diff = field_prefix_max_width\n         .checked_sub(field_prefix_min_width)\n         .unwrap_or(0);"}, {"sha": "975d2cdf503787a5ec398224564488c64fc054b5", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -295,7 +295,7 @@ impl<'a> FmtVisitor<'a> {\n         // complex in the module case. It is complex because the module could be\n         // in a separate file and there might be attributes in both files, but\n         // the AST lumps them all together.\n-        let filterd_attrs;\n+        let filtered_attrs;\n         let mut attrs = &item.attrs;\n         match item.node {\n             ast::ItemKind::Mod(ref m) => {\n@@ -314,7 +314,7 @@ impl<'a> FmtVisitor<'a> {\n                 } else {\n                     // Module is not inline and should not be skipped. We want\n                     // to process only the attributes in the current file.\n-                    filterd_attrs = item.attrs\n+                    filtered_attrs = item.attrs\n                         .iter()\n                         .filter_map(|a| {\n                             let attr_file = self.codemap.lookup_char_pos(a.span.lo()).file;\n@@ -327,8 +327,8 @@ impl<'a> FmtVisitor<'a> {\n                         .collect::<Vec<_>>();\n                     // Assert because if we should skip it should be caught by\n                     // the above case.\n-                    assert!(!self.visit_attrs(&filterd_attrs, ast::AttrStyle::Outer));\n-                    attrs = &filterd_attrs;\n+                    assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n+                    attrs = &filtered_attrs;\n                 }\n             }\n             _ => if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {"}, {"sha": "e68340b027d8897168ef3a8474fd841e683c784e", "filename": "tests/source/configs-struct_field_align_threshold-20.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-struct_field_align_threshold-20.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -159,7 +159,7 @@ pub struct State<F: FnMut() -> ()> { now: F }\n \n pub struct State<F: FnMut()> { now: F }\n \n-struct Palette { /// A map of indizes in the palette to a count of pixels in approximately that color\n+struct Palette { /// A map of indices in the palette to a count of pixels in approximately that color\n                     foo: i32}\n \n // Splitting a single line comment into a block previously had a misalignment"}, {"sha": "f1ce503ab0ad85bf245d30841e798edbe0f3bef3", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -7,7 +7,7 @@ fn op(x: Typ, key : &[u8], upd : Box<Fn(Option<&memcache::Item>) -> (memcache::S\n         \"cool\"}\n \n \n-fn weird_comment(/* /*/ double level */ comment */ x: Hello /*/*/* tripple, even */*/*/,\n+fn weird_comment(/* /*/ double level */ comment */ x: Hello /*/*/* triple, even */*/*/,\n // Does this work?\n y: World\n ) {"}, {"sha": "b61c337dfb957243bc13cf6bae2c40841d1b1466", "filename": "tests/source/fn_args_density-vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Ffn_args_density-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Ffn_args_density-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_args_density-vertical.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -1,6 +1,6 @@\n // rustfmt-fn_args_density: Vertical\n \n-// Empty list shoul stay on one line.\n+// Empty list should stay on one line.\n fn do_bar(\n \n ) -> u8 {"}, {"sha": "bcfba41e7687d93d077d5343d910eabf1bafaa11", "filename": "tests/source/issue-1049.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fissue-1049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fissue-1049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1049.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -10,7 +10,7 @@ impl Handle {\n     }\n }\n \n-// Long function without return type that should not be reformated.\n+// Long function without return type that should not be reformatted.\n fn veeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {}\n \n fn veeeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {}"}, {"sha": "4d0d4f0eb9855f9f8a277a0141efee1e7423f328", "filename": "tests/source/issue-1468.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fissue-1468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fissue-1468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1468.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -2,7 +2,7 @@ fn issue1468() {\n euc_jp_decoder_functions!({\n let trail_minus_offset = byte.wrapping_sub(0xA1);\n // Fast-track Hiragana (60% according to Lunde)\n-// and Katakana (10% acconding to Lunde).\n+// and Katakana (10% according to Lunde).\n if jis0208_lead_minus_offset == 0x03 &&\n trail_minus_offset < 0x53 {\n // Hiragana"}, {"sha": "19d30b0dd00b883dc2acab888693eeabdf8b9257", "filename": "tests/source/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -193,7 +193,7 @@ fn issue355() {\n         nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => println!(\"a\", b),\n         // Rewrite splits macro\n         oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo => vec!(1, 2),\n-        // Macro support fails to recognise this macro as splitable\n+        // Macro support fails to recognise this macro as splittable\n         // We push the whole expr to a new line, TODO split this macro as well\n         pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp => vec!(3; 4),\n         // q, r and s: Rewrite splits match arm"}, {"sha": "e63de8ecdb4371f4b4fd233b44cc0ed7b527611a", "filename": "tests/source/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -132,7 +132,7 @@ pub struct State<F: FnMut() -> ()> { now: F }\n \n pub struct State<F: FnMut()> { now: F }\n \n-struct Palette { /// A map of indizes in the palette to a count of pixels in approximately that color\n+struct Palette { /// A map of indices in the palette to a count of pixels in approximately that color\n                     foo: i32}\n \n // Splitting a single line comment into a block previously had a misalignment"}, {"sha": "fc2908e2d9e8f5a2666989c0f3e4bd342a0245a5", "filename": "tests/source/unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Fsource%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Funions.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -93,7 +93,7 @@ pub union State<F: FnMut() -> ()> { now: F }\n \n pub union State<F: FnMut()> { now: F }\n \n-union Palette { /// A map of indizes in the palette to a count of pixels in approximately that color\n+union Palette { /// A map of indices in the palette to a count of pixels in approximately that color\n                     foo: i32}\n \n // Splitting a single line comment into a block previously had a misalignment"}, {"sha": "7d8200a01465e7c7425e9417705bac2c0b910c2e", "filename": "tests/target/configs-struct_field_align_threshold-20.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -161,7 +161,7 @@ pub struct State<F: FnMut()> {\n }\n \n struct Palette {\n-    /// A map of indizes in the palette to a count of pixels in approximately\n+    /// A map of indices in the palette to a count of pixels in approximately\n     /// that color\n     foo: i32,\n }"}, {"sha": "3b5e884d4a4d93fa4f0d13fb0adbe6d46970c317", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -21,7 +21,7 @@ fn simple(\n \n fn weird_comment(\n     // /*/ double level */ comment\n-    x: Hello, // /*/* tripple, even */*/\n+    x: Hello, // /*/* triple, even */*/\n     // Does this work?\n     y: World,\n ) {"}, {"sha": "477a48cc35f365dc909d7b4adc1294f60b8e467b", "filename": "tests/target/fn_args_density-vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Ffn_args_density-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Ffn_args_density-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_density-vertical.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -1,6 +1,6 @@\n // rustfmt-fn_args_density: Vertical\n \n-// Empty list shoul stay on one line.\n+// Empty list should stay on one line.\n fn do_bar() -> u8 {\n     bar()\n }"}, {"sha": "c788519ca9a1edc3a76cc1e0e36bd90b1a3d69b4", "filename": "tests/target/issue-1049.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fissue-1049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fissue-1049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1049.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -16,7 +16,7 @@ impl Handle {\n     }\n }\n \n-// Long function without return type that should not be reformated.\n+// Long function without return type that should not be reformatted.\n fn veeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {}\n \n fn veeeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {"}, {"sha": "4c14a0f746a0b9fb679abb0d8dbb0618f98a4b24", "filename": "tests/target/issue-1468.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fissue-1468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fissue-1468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1468.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -2,7 +2,7 @@ fn issue1468() {\n     euc_jp_decoder_functions!({\n         let trail_minus_offset = byte.wrapping_sub(0xA1);\n         // Fast-track Hiragana (60% according to Lunde)\n-        // and Katakana (10% acconding to Lunde).\n+        // and Katakana (10% according to Lunde).\n         if jis0208_lead_minus_offset == 0x03 && trail_minus_offset < 0x53 {\n             // Hiragana\n             handle.write_upper_bmp(0x3041 + trail_minus_offset as u16)"}, {"sha": "676b8603f2c1b0abf11725c881caf3c12682e537", "filename": "tests/target/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -189,7 +189,7 @@ fn issue355() {\n         oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo => {\n             vec![1, 2]\n         }\n-        // Macro support fails to recognise this macro as splitable\n+        // Macro support fails to recognise this macro as splittable\n         // We push the whole expr to a new line, TODO split this macro as well\n         pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp => {\n             vec![3; 4]"}, {"sha": "5132162f3d51d688cca628d39be9f53c1e1e4762", "filename": "tests/target/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -134,7 +134,7 @@ pub struct State<F: FnMut()> {\n }\n \n struct Palette {\n-    /// A map of indizes in the palette to a count of pixels in approximately\n+    /// A map of indices in the palette to a count of pixels in approximately\n     /// that color\n     foo: i32,\n }"}, {"sha": "ed7b842a411b521cf70528ced4299a5eb49bc83e", "filename": "tests/target/unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c96bbe34d0a08c1aa485ff41da7533adedf69/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=580c96bbe34d0a08c1aa485ff41da7533adedf69", "patch": "@@ -90,7 +90,7 @@ pub union State<F: FnMut()> {\n }\n \n union Palette {\n-    /// A map of indizes in the palette to a count of pixels in approximately\n+    /// A map of indices in the palette to a count of pixels in approximately\n     /// that color\n     foo: i32,\n }"}]}