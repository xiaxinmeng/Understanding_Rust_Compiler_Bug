{"sha": "b5ace9a906d0a445420a0ff16f77ce967722ddc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YWNlOWE5MDZkMGE0NDU0MjBhMGZmMTZmNzdjZTk2NzcyMmRkYzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-06T11:43:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:35:39Z"}, "message": "Unify the const folding errors\n\nbefore they differed depending on whether optimizations were on or not", "tree": {"sha": "de379168cd41e525503f37c9196be4433057c9e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de379168cd41e525503f37c9196be4433057c9e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ace9a906d0a445420a0ff16f77ce967722ddc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg58sACgkQpp+NIls6\n19lqGBAAspDo09uwIy9gYSyMmd+bjP1gpZyreOKmbiXPmjghyruw+E+/a2AukCLZ\nluMqKy3anu2dzX+NzGioK5SrB6ylj4X29JP9VEtkbSE+9UmipoqUfrv9O6w6d0J7\nvdxj3zDDNOKoIBQ8/veP2ZhawPHmUfAXLlthIi2BRz3K7GbtyCO93Epu96DdE9lA\n6Al6IUuAlmluu/uvP/R1WitwQvdHQLOs/Hqmv7mIvokKpqPtOhyKYHcsh74Ykh/g\nwwJl8M7Amwib+UFnscpgRWyC0xPRZCtajfk3GxjOt+JEv2rrxc2te+j3oXWJcxDx\nW6618ciYb+NEEsnOFbzgqwqfRI3DLYz/GUH2KYMM10m64pfyMMaJDf1PPOpJSTB6\nPIH/EftqF4OLRpHHbflTkeLtvjVVhf8QviqFr818HsCxKQHCc1drIVTfhPOR62m3\n7pt2VYjA+DVWNHlSdrCd/bIVx2MfqfZK7N2whohCMs2298QHbipX6PpvpXQE1wGK\nBRupn9Ko5DZazynIrNw0CpvZqjlICUL9iFQG2+EX7bpvyAbv1dYQ5bESH9n7uwh/\nCBfm/Q+S7vzveX9OrXQLss9x3aWx8cQ1YgbVlFCisx5+DAkTXYolPucFE4AxUjHb\nEgh2xo++UtLJITycCZCGue4BFaK+NLTimibzcpquHtyKqIWzAuo=\n=+fwd\n-----END PGP SIGNATURE-----", "payload": "tree de379168cd41e525503f37c9196be4433057c9e2\nparent edc5f7343338ddbbc2bae94be585cd821dbe8118\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520336582 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494539 +0100\n\nUnify the const folding errors\n\nbefore they differed depending on whether optimizations were on or not\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ace9a906d0a445420a0ff16f77ce967722ddc6", "html_url": "https://github.com/rust-lang/rust/commit/b5ace9a906d0a445420a0ff16f77ce967722ddc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ace9a906d0a445420a0ff16f77ce967722ddc6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc5f7343338ddbbc2bae94be585cd821dbe8118", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc5f7343338ddbbc2bae94be585cd821dbe8118", "html_url": "https://github.com/rust-lang/rust/commit/edc5f7343338ddbbc2bae94be585cd821dbe8118"}], "stats": {"total": 433, "additions": 278, "deletions": 155}, "files": [{"sha": "c8e1a93cdda2c854d7f4421deb7263ab3e25f0b2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 111, "deletions": 31, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -12,10 +12,10 @@\n //! assertion failures\n \n \n-\n+use rustc::hir::def::Def;\n use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local};\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n-use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp};\n+use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{TyCtxt, self, Instance};\n@@ -26,6 +26,10 @@ use syntax::codemap::Span;\n use rustc::ty::subst::Substs;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::ParamEnv;\n+use rustc::ty::layout::{\n+    LayoutOf, TyLayout, LayoutError,\n+    HasTyCtxt, TargetDataLayout, HasDataLayout,\n+};\n \n pub struct ConstProp;\n \n@@ -34,6 +38,15 @@ impl MirPass for ConstProp {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n+        // will be evaluated by miri and produce its errors there\n+        if source.promoted.is_some() {\n+            return;\n+        }\n+        match tcx.describe_def(source.def_id) {\n+            // skip statics because they'll be evaluated by miri anyway\n+            Some(Def::Static(..)) => return,\n+            _ => {},\n+        }\n         trace!(\"ConstProp starting for {:?}\", source.def_id);\n \n         // FIXME(oli-obk, eddyb) Optimize locals (or even local paths) to hold\n@@ -59,6 +72,28 @@ struct ConstPropagator<'b, 'a, 'tcx:'a+'b> {\n     param_env: ParamEnv<'tcx>,\n }\n \n+impl<'a, 'b, 'tcx> LayoutOf<ty::Ty<'tcx>> for &'a ConstPropagator<'a, 'b, 'tcx> {\n+    type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n+\n+    fn layout_of(self, ty: ty::Ty<'tcx>) -> Self::TyLayout {\n+        self.tcx.layout_of(self.param_env.and(ty))\n+    }\n+}\n+\n+impl<'a, 'b, 'tcx> HasDataLayout for &'a ConstPropagator<'a, 'b, 'tcx> {\n+    #[inline]\n+    fn data_layout(&self) -> &TargetDataLayout {\n+        &self.tcx.data_layout\n+    }\n+}\n+\n+impl<'a, 'b, 'tcx> HasTyCtxt<'tcx> for &'a ConstPropagator<'a, 'b, 'tcx> {\n+    #[inline]\n+    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+}\n+\n impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n     fn new(\n         mir: &'b Mir<'tcx>,\n@@ -134,15 +169,43 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         }\n     }\n \n+    fn eval_place(&mut self, place: &Place<'tcx>) -> Option<Const<'tcx>> {\n+        match *place {\n+            Place::Local(loc) => self.places[loc].clone(),\n+            Place::Projection(ref proj) => match proj.elem {\n+                ProjectionElem::Field(field, _) => {\n+                    trace!(\"field proj on {:?}\", proj.base);\n+                    let (base, ty, span) = self.eval_place(&proj.base)?;\n+                    match base {\n+                        Value::ByValPair(a, b) => {\n+                            trace!(\"by val pair: {:?}, {:?}\", a, b);\n+                            let base_layout = self.tcx.layout_of(self.param_env.and(ty)).ok()?;\n+                            trace!(\"layout computed\");\n+                            use rustc_data_structures::indexed_vec::Idx;\n+                            let field_index = field.index();\n+                            let val = if field_index == 0 {\n+                                a\n+                            } else {\n+                                assert_eq!(field_index, 1);\n+                                b\n+                            };\n+                            let field = base_layout.field(&*self, field_index).ok()?;\n+                            trace!(\"projection resulted in: {:?}\", val);\n+                            Some((Value::ByVal(val), field.ty, span))\n+                        },\n+                        _ => None,\n+                    }\n+                },\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     fn eval_operand(&mut self, op: &Operand<'tcx>) -> Option<Const<'tcx>> {\n         match *op {\n             Operand::Constant(ref c) => self.eval_constant(c),\n-            Operand::Move(ref place) | Operand::Copy(ref place) => match *place {\n-                Place::Local(loc) => self.places[loc].clone(),\n-                // FIXME(oli-obk): field and index projections\n-                Place::Projection(_) => None,\n-                _ => None,\n-            },\n+            Operand::Move(ref place) | Operand::Copy(ref place) => self.eval_place(place),\n         }\n     }\n \n@@ -235,18 +298,24 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 let r = ecx.value_to_primval(ValTy { value: right.0, ty: right.1 }).ok()?;\n                 if op == BinOp::Shr || op == BinOp::Shl {\n                     let param_env = self.tcx.param_env(self.source.def_id);\n-                    let bits = self.tcx.layout_of(param_env.and(place_ty)).unwrap().size.bits();\n+                    let left_ty = left.ty(self.mir, self.tcx);\n+                    let bits = self.tcx.layout_of(param_env.and(left_ty)).unwrap().size.bits();\n                     if r.to_bytes().ok().map_or(false, |b| b >= bits as u128) {\n                         let scope_info = match self.mir.visibility_scope_info {\n                             ClearCrossCrate::Set(ref data) => data,\n                             ClearCrossCrate::Clear => return None,\n                         };\n+                        let dir = if op == BinOp::Shr {\n+                            \"right\"\n+                        } else {\n+                            \"left\"\n+                        };\n                         let node_id = scope_info[source_info.scope].lint_root;\n                         self.tcx.lint_node(\n                             ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n                             node_id,\n                             span,\n-                            \"bitshift exceeds the type's number of bits\");\n+                            &format!(\"attempt to shift {} with overflow\", dir));\n                         return None;\n                     }\n                 }\n@@ -334,6 +403,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             Copy | Move |\n             StorageDead | StorageLive |\n             Validate |\n+            Projection(_) |\n             Inspect => {},\n             _ => self.can_const_prop[local] = false,\n         }\n@@ -364,6 +434,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                 .to_ty(self.tcx);\n             if let Some(value) = self.const_prop(rval, place_ty, statement.source_info) {\n                 if let Place::Local(local) = *place {\n+                    trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n                     if self.can_const_prop[local] {\n                         trace!(\"storing {:?} to {:?}\", value, local);\n                         assert!(self.places[local].is_none());\n@@ -384,7 +455,22 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n         self.super_terminator_kind(block, kind, location);\n         if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n             if let Some(value) = self.eval_operand(cond) {\n+                trace!(\"assertion on {:?} should be {:?}\", value, expected);\n                 if Value::ByVal(PrimVal::from_bool(*expected)) != value.0 {\n+                    // poison all places this operand references so that further code\n+                    // doesn't use the invalid value\n+                    match cond {\n+                        Operand::Move(ref place) | Operand::Copy(ref place) => {\n+                            let mut place = place;\n+                            while let Place::Projection(ref proj) = *place {\n+                                place = &proj.base;\n+                            }\n+                            if let Place::Local(local) = *place {\n+                                self.places[local] = None;\n+                            }\n+                        },\n+                        Operand::Constant(_) => {}\n+                    }\n                     let span = self.mir[block]\n                         .terminator\n                         .as_ref()\n@@ -396,21 +482,12 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         .hir\n                         .as_local_node_id(self.source.def_id)\n                         .expect(\"some part of a failing const eval must be local\");\n-                    let mut lint = self.tcx.struct_span_lint_node(\n-                        ::rustc::lint::builtin::CONST_ERR,\n-                        node_id,\n-                        span,\n-                        \"constant evaluation error\",\n-                    );\n                     use rustc::mir::AssertMessage::*;\n-                    match msg {\n+                    let msg = match msg {\n                         // Need proper const propagator for these\n                         GeneratorResumedAfterReturn |\n-                        GeneratorResumedAfterPanic => {\n-                            lint.cancel();\n-                            return;\n-                        },\n-                        Math(ref err) => lint.span_label(span, err.description()),\n+                        GeneratorResumedAfterPanic => return,\n+                        Math(ref err) => err.description().to_owned(),\n                         BoundsCheck { ref len, ref index } => {\n                             let len = self.eval_operand(len).expect(\"len must be const\");\n                             let len = match len.0 {\n@@ -424,17 +501,20 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                                 Value::ByVal(PrimVal::Bytes(n)) => n,\n                                 _ => bug!(\"const index not primitive: {:?}\", index),\n                             };\n-                            lint.span_label(\n-                                span,\n-                                format!(\n-                                    \"index out of bounds: \\\n-                                    the len is {} but the index is {}\",\n-                                    len,\n-                                    index,\n-                                ),\n+                            format!(\n+                                \"index out of bounds: \\\n+                                the len is {} but the index is {}\",\n+                                len,\n+                                index,\n                             )\n                         },\n-                    }.emit();\n+                    };\n+                    self.tcx.lint_node(\n+                        ::rustc::lint::builtin::CONST_ERR,\n+                        node_id,\n+                        span,\n+                        &msg,\n+                    );\n                 }\n             }\n         }"}, {"sha": "3de0f1ff61e1cb4c148ba5ec1a3a7ba99bb7df7d", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -11,11 +11,14 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR E0080\n-//~| ERROR const_err\n-//~| ERROR const_err\n+//~^ ERROR attempt to negate with overflow\n+//~| ERROR constant evaluation error\n pub const B: u8 = 200u8 + 200u8; //~ ERROR E0080\n+//~^ ERROR attempt to add with overflow\n pub const C: u8 = 200u8 * 4; //~ ERROR E0080\n+//~^ ERROR attempt to multiply with overflow\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR E0080\n+//~^ ERROR attempt to subtract with overflow\n pub const E: u8 = [5u8][1];\n //~^ ERROR E0080\n "}, {"sha": "d2355f57f17294c5ed97c40a951d97b4de2764d9", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -12,8 +12,8 @@\n \n pub const A: i8 = -std::i8::MIN;\n //~^ ERROR E0080\n-//~| ERROR const_err\n-//~| ERROR const_err\n+//~| ERROR attempt to negate with overflow\n+//~| ERROR constant evaluation error\n pub const B: i8 = A;\n //~^ ERROR E0080\n pub const C: u8 = A as u8;"}, {"sha": "46b73371e56cf554ee652cb136a67b9d28132877", "filename": "src/test/compile-fail/const-err2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// needed because negating int::MIN will behave differently between\n+// optimized compilation and unoptimized compilation and thus would\n+// lead to different lints being emitted\n+// compile-flags: -O\n+\n #![feature(rustc_attrs)]\n #![allow(exceeding_bitshifts)]\n #![deny(const_err)]"}, {"sha": "a0d8f9672c05e1519ffb37e72705dae40315ca4e", "filename": "src/test/compile-fail/const-eval-overflow2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -25,46 +25,54 @@ const VALS_I8: (i8,) =\n     (\n      i8::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_U8: (u8,) =\n     (\n      u8::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_U16: (u16,) = (\n      u16::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_U32: (u32,) = (\n      u32::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n const VALS_U64: (u64,) =\n     (\n      u64::MIN - 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to subtract with overflow\n      );\n \n fn main() {"}, {"sha": "08128f90e532f368a16185a155bcbe0b5ac13104", "filename": "src/test/compile-fail/const-eval-overflow2b.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -25,46 +25,54 @@ const VALS_I8: (i8,) =\n     (\n      i8::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_I16: (i16,) =\n     (\n      i16::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_I32: (i32,) =\n     (\n      i32::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_I64: (i64,) =\n     (\n      i64::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_U16: (u16,) = (\n      u16::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_U32: (u32,) = (\n      u32::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX + 1,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to add with overflow\n      );\n \n fn main() {"}, {"sha": "31a1638cade170e7fecbf058fd4266937d22093c", "filename": "src/test/compile-fail/const-eval-overflow2c.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -25,46 +25,54 @@ const VALS_I8: (i8,) =\n     (\n      i8::MIN * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_U16: (u16,) = (\n      u16::MAX * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_U32: (u32,) = (\n      u32::MAX * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX * 2,\n      //~^ ERROR constant evaluation error\n+     //~| ERROR attempt to multiply with overflow\n      );\n \n fn main() {"}, {"sha": "49f76c532df54d328f2605e21e6d4a9f5a330b4f", "filename": "src/test/compile-fail/eval-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Feval-enum.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -13,12 +13,10 @@ enum Test {\n     //~^ attempt to divide by zero\n     //~| ERROR constant evaluation error\n     //~| WARN constant evaluation error\n-    //~| WARN constant evaluation error\n     RemZero = 1%0,\n     //~^ attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n     //~| WARN constant evaluation error\n-    //~| WARN constant evaluation error\n }\n \n fn main() {}"}, {"sha": "18cfb35113dc6fdd98285c16b5490107f3ce52fa", "filename": "src/test/compile-fail/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44578.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -18,7 +18,7 @@ enum Bar<A, B> {\n }\n \n impl<A: Foo, B: Foo> Foo for Bar<A, B> {\n-    const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize]; //~ E0080\n+    const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n }\n \n impl Foo for u8 {"}, {"sha": "1d59e75a0f0f028874ee69aa71269f949edf13c5", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 20, "deletions": 61, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -9,110 +9,69 @@\n // except according to those terms.\n \n #![deny(const_err)]\n-//~^ NOTE lint level defined here\n \n use std::{isize, i8, i16, i32, i64};\n use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ NOTE attempt to divide with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ NOTE attempt to divide with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ NOTE attempt to divide with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ NOTE attempt to divide with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ NOTE attempt to divide with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ NOTE attempt to divide by zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ NOTE attempt to divide by zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ NOTE attempt to divide by zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ NOTE attempt to divide by zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ NOTE attempt to divide by zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with overflow\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n-    //~| NOTE attempted to do overflowing math\n-    //~| ERROR constant evaluation error\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n }"}, {"sha": "5ebfcc4926baa0a79eb67ff483241b177bb8d711", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -8,50 +8,50 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(exceeding_bitshifts)]\n+#![deny(exceeding_bitshifts, const_err)]\n #![allow(unused_variables)]\n-#![allow(dead_code, const_err)]\n+#![allow(dead_code)]\n \n fn main() {\n       let n = 1u8 << 7;\n-      let n = 1u8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << 8;   //~ ERROR: attempt to shift left with overflow\n       let n = 1u16 << 15;\n-      let n = 1u16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 << 16; //~ ERROR: attempt to shift left with overflow\n       let n = 1u32 << 31;\n-      let n = 1u32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 << 32; //~ ERROR: attempt to shift left with overflow\n       let n = 1u64 << 63;\n-      let n = 1u64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 << 64; //~ ERROR: attempt to shift left with overflow\n       let n = 1i8 << 7;\n-      let n = 1i8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 << 8;   //~ ERROR: attempt to shift left with overflow\n       let n = 1i16 << 15;\n-      let n = 1i16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 << 16; //~ ERROR: attempt to shift left with overflow\n       let n = 1i32 << 31;\n-      let n = 1i32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 << 32; //~ ERROR: attempt to shift left with overflow\n       let n = 1i64 << 63;\n-      let n = 1i64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 << 64; //~ ERROR: attempt to shift left with overflow\n \n       let n = 1u8 >> 7;\n-      let n = 1u8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 >> 8;   //~ ERROR: attempt to shift right with overflow\n       let n = 1u16 >> 15;\n-      let n = 1u16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 >> 16; //~ ERROR: attempt to shift right with overflow\n       let n = 1u32 >> 31;\n-      let n = 1u32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 >> 32; //~ ERROR: attempt to shift right with overflow\n       let n = 1u64 >> 63;\n-      let n = 1u64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 >> 64; //~ ERROR: attempt to shift right with overflow\n       let n = 1i8 >> 7;\n-      let n = 1i8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 >> 8;   //~ ERROR: attempt to shift right with overflow\n       let n = 1i16 >> 15;\n-      let n = 1i16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 >> 16; //~ ERROR: attempt to shift right with overflow\n       let n = 1i32 >> 31;\n-      let n = 1i32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 >> 32; //~ ERROR: attempt to shift right with overflow\n       let n = 1i64 >> 63;\n-      let n = 1i64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 >> 64; //~ ERROR: attempt to shift right with overflow\n \n       let n = 1u8;\n       let n = n << 7;\n-      let n = n << 8; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = n << 8; //~ ERROR: attempt to shift left with overflow\n \n-      let n = 1u8 << -8; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << -8; //~ ERROR: attempt to shift left with overflow\n \n       let n = 1i8<<(1isize+-1);\n }"}, {"sha": "3ba300eb7c4ab541c63823a20f3cba32d249c2f1", "filename": "src/test/compile-fail/lint-exceeding-bitshifts2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -14,14 +14,14 @@\n \n fn main() {\n       let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds\n+      let n = 1u8 << (4+4); //~ ERROR: attempt to shift left with overflow\n       let n = 1i64 >> [63][0];\n       let n = 1i64 >> [64][0]; // should be linting, needs to wait for const propagation\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: bitshift exceeds\n-      let n = 1_usize << BITS; //~ ERROR: bitshift exceeds\n+      let n = 1_isize << BITS; //~ ERROR: attempt to shift left with overflow\n+      let n = 1_usize << BITS; //~ ERROR: attempt to shift left with overflow\n }"}, {"sha": "24e178152eef0cbd7010c09ebde0e942cd5d2f2d", "filename": "src/test/ui/const-eval-overflow-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -22,6 +22,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n     //~^ ERROR E0080\n+    //~| WARN attempt to add with overflow\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "14753038fef04e3468cc8a3fcc574ddc6d6c60c1", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -1,3 +1,11 @@\n+warning: attempt to add with overflow\n+  --> $DIR/const-eval-overflow-4.rs:23:13\n+   |\n+LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n error[E0080]: constant evaluation error\n   --> $DIR/const-eval-overflow-4.rs:23:13\n    |"}, {"sha": "324bcf60e8ff60d1c2c117b779712af6ce3db47d", "filename": "src/test/ui/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -10,7 +10,8 @@\n \n const X: u32 = 5;\n const Y: u32 = 6;\n-const FOO: u32 = [X - Y, Y - X][(X < Y) as usize]; //~ E0080\n+const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+//~^ WARN attempt to subtract with overflow\n \n fn main() {\n     println!(\"{}\", FOO); //~ E0080"}, {"sha": "4cf12e222831c438be5ac5cb7d0b8a675b617da8", "filename": "src/test/ui/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -1,15 +1,17 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:16:20\n+warning: attempt to subtract with overflow\n+  --> $DIR/conditional_array_execution.rs:13:19\n    |\n-LL |     println!(\"{}\", FOO); //~ E0080\n-   |                    ^^^ referenced constant has errors\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n \n error[E0080]: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:13:19\n+  --> $DIR/conditional_array_execution.rs:17:20\n    |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize]; //~ E0080\n-   |                   ^^^^^ attempt to subtract with overflow\n+LL |     println!(\"{}\", FOO); //~ E0080\n+   |                    ^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "d5c4796d0b497f86d8f98b545291b0e94e2cc2a4", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -15,8 +15,10 @@ const fn foo(x: u32) -> u32 {\n }\n \n fn main() {\n-    const X: u32 = 0-1; //~ ERROR constant evaluation error\n-    const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n+    const X: u32 = 0-1;\n+    //~^ WARN attempt to subtract with overflow\n+    const Y: u32 = foo(0-1);\n+    //~^ WARN attempt to subtract with overflow\n     println!(\"{} {}\", X, Y);\n     //~^ ERROR constant evaluation error\n     //~| ERROR constant evaluation error"}, {"sha": "3f10826874754d4987d37b023cdeb91e31c708f1", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -1,27 +1,29 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:20:23\n+warning: attempt to subtract with overflow\n+  --> $DIR/issue-43197.rs:18:20\n    |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                       ^ referenced constant has errors\n+LL |     const X: u32 = 0-1;\n+   |                    ^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n \n error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:20:26\n+  --> $DIR/issue-43197.rs:22:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n-   |                          ^ referenced constant has errors\n+   |                       ^ referenced constant has errors\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:19:24\n+warning: attempt to subtract with overflow\n+  --> $DIR/issue-43197.rs:20:24\n    |\n-LL |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n-   |                        ^^^ attempt to subtract with overflow\n+LL |     const Y: u32 = foo(0-1);\n+   |                        ^^^\n \n error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:18:20\n+  --> $DIR/issue-43197.rs:22:26\n    |\n-LL |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n-   |                    ^^^ attempt to subtract with overflow\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "bdb9f5b19a88541088a6cbcce2be7827e721fc24", "filename": "src/test/ui/const-eval/pub_const_err.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(const_err)]\n+\n+#![crate_type = \"lib\"]\n+\n+pub const Z: u32 = 0 - 1;\n+//~^ ERROR attempt to subtract with overflow"}, {"sha": "b77ec38ca1679869a692892c8d8ed94bf3d795f9", "filename": "src/test/ui/const-eval/pub_const_err.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -0,0 +1,14 @@\n+error: attempt to subtract with overflow\n+  --> $DIR/pub_const_err.rs:15:20\n+   |\n+LL | pub const Z: u32 = 0 - 1;\n+   |                    ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/pub_const_err.rs:11:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ee07dabab1fc852c06d2f0c7a2bf486798bc4c5c", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -16,6 +16,7 @@ const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n //~^ ERROR E0080\n+//~| WARN attempt to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "98f4ac9e83fb8ee05f7ff9d59854e9bfe2698c68", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -1,11 +1,19 @@\n+warning: attempt to subtract with overflow\n+  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+   |\n+LL | const LEN: usize = ONE - TWO;\n+   |                    ^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n error[E0080]: constant evaluation error\n   --> $DIR/const-len-underflow-separate-spans.rs:17:20\n    |\n LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^ attempt to subtract with overflow\n \n error[E0080]: constant evaluation error\n-  --> $DIR/const-len-underflow-separate-spans.rs:21:17\n+  --> $DIR/const-len-underflow-separate-spans.rs:22:17\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n    |                 ^^^ referenced constant has errors"}, {"sha": "c8e425711284e529bfc4bb2d4184a677a1344b32", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -10,7 +10,6 @@\n \n enum Enum {\n     X = (1 << 500), //~ ERROR E0080\n-    //~| ERROR bitshift exceeds\n     //~| shift left with overflow\n     Y = (1 / 0) //~ ERROR E0080\n     //~| const_err"}, {"sha": "6db53acd6b9828323d1a8da6dc4bcdc6d1e749ad", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5ace9a906d0a445420a0ff16f77ce967722ddc6/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=b5ace9a906d0a445420a0ff16f77ce967722ddc6", "patch": "@@ -1,4 +1,4 @@\n-error: bitshift exceeds the type's number of bits\n+error: attempt to shift left with overflow\n   --> $DIR/E0080.rs:12:9\n    |\n LL |     X = (1 << 500), //~ ERROR E0080\n@@ -12,22 +12,22 @@ error[E0080]: constant evaluation error\n LL |     X = (1 << 500), //~ ERROR E0080\n    |         ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: constant evaluation error\n-  --> $DIR/E0080.rs:15:9\n+warning: attempt to divide by zero\n+  --> $DIR/E0080.rs:14:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n-   |         ^^^^^^^ attempt to divide by zero\n+   |         ^^^^^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n warning: constant evaluation error\n-  --> $DIR/E0080.rs:15:9\n+  --> $DIR/E0080.rs:14:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^ attempted to do overflowing math\n \n error[E0080]: constant evaluation error\n-  --> $DIR/E0080.rs:15:9\n+  --> $DIR/E0080.rs:14:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^ attempt to divide by zero"}]}