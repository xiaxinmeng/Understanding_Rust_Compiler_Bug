{"sha": "1646707c6e86166b28be77623f260333015e790c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDY3MDdjNmU4NjE2NmIyOGJlNzc2MjNmMjYwMzMzMDE1ZTc5MGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:15:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:15:15Z"}, "message": "rollup merge of #21396: japaric/no-parens-in-range\n\nConflicts:\n\tsrc/libsyntax/parse/lexer/comments.rs", "tree": {"sha": "37c2181506f878dfd930c270279fa6563d82175c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c2181506f878dfd930c270279fa6563d82175c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1646707c6e86166b28be77623f260333015e790c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1646707c6e86166b28be77623f260333015e790c", "html_url": "https://github.com/rust-lang/rust/commit/1646707c6e86166b28be77623f260333015e790c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1646707c6e86166b28be77623f260333015e790c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6a0563c6d7bf90d5a70120d1818d57f49cb62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6a0563c6d7bf90d5a70120d1818d57f49cb62a", "html_url": "https://github.com/rust-lang/rust/commit/4b6a0563c6d7bf90d5a70120d1818d57f49cb62a"}, {"sha": "49684850bedcef007a2949c97872606d1d6dc325", "url": "https://api.github.com/repos/rust-lang/rust/commits/49684850bedcef007a2949c97872606d1d6dc325", "html_url": "https://github.com/rust-lang/rust/commit/49684850bedcef007a2949c97872606d1d6dc325"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "13e7e88d5161224336e050df96962a108dea813d", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -330,7 +330,7 @@ impl Bitv {\n \n         if extra_bytes > 0 {\n             let mut last_word = 0u32;\n-            for (i, &byte) in bytes[(complete_words*4)..].iter().enumerate() {\n+            for (i, &byte) in bytes[complete_words*4..].iter().enumerate() {\n                 last_word |= (reverse_bits(byte) as u32) << (i * 8);\n             }\n             bitv.storage.push(last_word);"}, {"sha": "c3eff369fd479557fb9b0619da602c738f1be422", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -2158,7 +2158,7 @@ mod tests {\n     #[should_fail]\n     fn test_slice_out_of_bounds_1() {\n         let x: Vec<int> = vec![1, 2, 3, 4, 5];\n-        &x[(-1)..];\n+        &x[-1..];\n     }\n \n     #[test]\n@@ -2172,7 +2172,7 @@ mod tests {\n     #[should_fail]\n     fn test_slice_out_of_bounds_3() {\n         let x: Vec<int> = vec![1, 2, 3, 4, 5];\n-        &x[(-1)..4];\n+        &x[-1..4];\n     }\n \n     #[test]"}, {"sha": "1f3cfe3c75f4bb4b98c396c071bce4009ffc11a7", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -240,7 +240,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     fn init(&self) -> &[T] {\n-        &self[..(self.len() - 1)]\n+        &self[..self.len() - 1]\n     }\n \n     #[inline]\n@@ -449,7 +449,7 @@ impl<T> SliceExt for [T] {\n     #[inline]\n     fn ends_with(&self, needle: &[T]) -> bool where T: PartialEq {\n         let (m, n) = (self.len(), needle.len());\n-        m >= n && needle == &self[(m-n)..]\n+        m >= n && needle == &self[m-n..]\n     }\n \n     #[unstable]\n@@ -973,7 +973,7 @@ impl<'a, T, P> Iterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n             None => self.finish(),\n             Some(idx) => {\n                 let ret = Some(&self.v[..idx]);\n-                self.v = &self.v[(idx + 1)..];\n+                self.v = &self.v[idx + 1..];\n                 ret\n             }\n         }\n@@ -998,7 +998,7 @@ impl<'a, T, P> DoubleEndedIterator for Split<'a, T, P> where P: FnMut(&T) -> boo\n         match self.v.iter().rposition(|x| (self.pred)(x)) {\n             None => self.finish(),\n             Some(idx) => {\n-                let ret = Some(&self.v[(idx + 1)..]);\n+                let ret = Some(&self.v[idx + 1..]);\n                 self.v = &self.v[..idx];\n                 ret\n             }"}, {"sha": "11a356d616a231a59e4c295fb54ad3c8cd60c495", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -1415,7 +1415,7 @@ impl StrExt for str {\n     #[inline]\n     fn ends_with(&self, needle: &str) -> bool {\n         let (m, n) = (self.len(), needle.len());\n-        m >= n && needle.as_bytes() == &self.as_bytes()[(m-n)..]\n+        m >= n && needle.as_bytes() == &self.as_bytes()[m-n..]\n     }\n \n     #[inline]"}, {"sha": "4bbbde6b48cedf8ea62b5e8c5fcdf9b487d4a483", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -585,7 +585,7 @@ fn check_randacc_iter<A, T>(a: T, len: uint) where\n fn test_double_ended_flat_map() {\n     let u = [0u,1];\n     let v = [5u,6,7,8];\n-    let mut it = u.iter().flat_map(|x| v[(*x)..v.len()].iter());\n+    let mut it = u.iter().flat_map(|x| v[*x..v.len()].iter());\n     assert_eq!(it.next_back().unwrap(), &8);\n     assert_eq!(it.next().unwrap(),      &5);\n     assert_eq!(it.next_back().unwrap(), &7);"}, {"sha": "86dad55a3186f5ef1eeb6c9778c94d3b94018b5b", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -893,7 +893,7 @@ fn each_split_within<F>(ss: &str, lim: uint, mut it: F) -> bool where\n             (B, Cr, UnderLim) => { B }\n             (B, Cr, OverLim)  if (i - last_start + 1) > lim\n                             => panic!(\"word starting with {} longer than limit!\",\n-                                      &ss[last_start..(i + 1)]),\n+                                      &ss[last_start..i + 1]),\n             (B, Cr, OverLim)  => {\n                 *cont = it(&ss[slice_start..last_end]);\n                 slice_start = last_start;"}, {"sha": "a54db2654ab7a0224fd62e1d034f2ee7d7534cd8", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -518,7 +518,7 @@ impl<'a> Parser<'a> {\n             };\n         self.chari = closer;\n         let greed = try!(self.get_next_greedy());\n-        let inner = self.chars[(start+1)..closer].iter().cloned()\n+        let inner = self.chars[start+1..closer].iter().cloned()\n                                                .collect::<String>();\n \n         // Parse the min and max values from the regex."}, {"sha": "1197276b9908ff6f4a3c6b1c7c8ff65cac298f27", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -74,7 +74,7 @@ fn lookup_hash<'a, F>(d: rbml::Doc<'a>, mut eq_fn: F, hash: u64) -> Option<rbml:\n     let mut ret = None;\n     reader::tagged_docs(tagged_doc.doc, belt, |elt| {\n         let pos = u64_from_be_bytes(elt.data, elt.start, 4) as uint;\n-        if eq_fn(&elt.data[(elt.start + 4) .. elt.end]) {\n+        if eq_fn(&elt.data[elt.start + 4 .. elt.end]) {\n             ret = Some(reader::doc_at(d.data, pos).unwrap().doc);\n             false\n         } else {"}, {"sha": "943be282103a70a8e640e8a986579962e75f8c1d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -707,7 +707,7 @@ pub fn parse_def_id(buf: &[u8]) -> ast::DefId {\n     }\n \n     let crate_part = &buf[0u..colon_idx];\n-    let def_part = &buf[(colon_idx + 1u)..len];\n+    let def_part = &buf[colon_idx + 1u..len];\n \n     let crate_num = match str::from_utf8(crate_part).ok().and_then(|s| s.parse::<uint>()) {\n        Some(cn) => cn as ast::CrateNum,"}, {"sha": "a7cbbe4f13eed8a97fe7c6932b75387ceba10394", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -926,7 +926,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n     };\n     head.map(|mut head| {\n         head.push_all(&r[..col]);\n-        head.push_all(&r[(col + 1)..]);\n+        head.push_all(&r[col + 1..]);\n         head\n     })\n }"}, {"sha": "c5aced4eb86f5902a9db6a5d974874705a5b47e1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -503,17 +503,17 @@ pub fn parameterized<'tcx>(cx: &ctxt<'tcx>,\n         0\n     };\n \n-    for t in tps[..(tps.len() - num_defaults)].iter() {\n+    for t in tps[..tps.len() - num_defaults].iter() {\n         strs.push(ty_to_string(cx, *t))\n     }\n \n     if cx.lang_items.fn_trait_kind(did).is_some() {\n         format!(\"{}({}){}\",\n                 base,\n                 if strs[0].starts_with(\"(\") && strs[0].ends_with(\",)\") {\n-                    &strs[0][1 .. (strs[0].len() - 2)] // Remove '(' and ',)'\n+                    &strs[0][1 .. strs[0].len() - 2] // Remove '(' and ',)'\n                 } else if strs[0].starts_with(\"(\") && strs[0].ends_with(\")\") {\n-                    &strs[0][1 .. (strs[0].len() - 1)] // Remove '(' and ')'\n+                    &strs[0][1 .. strs[0].len() - 1] // Remove '(' and ')'\n                 } else {\n                     &strs[0][]\n                 },"}, {"sha": "0228098b8f8384c4aad7eb4068b401504d372381", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -156,7 +156,7 @@ impl FixedBuffer for FixedBuffer64 {\n         // While we have at least a full buffer size chunk's worth of data, process that data\n         // without copying it into the buffer\n         while input.len() - i >= size {\n-            func(&input[i..(i + size)]);\n+            func(&input[i..i + size]);\n             i += size;\n         }\n "}, {"sha": "4262b03ece29e51f01a682a620632eafd3228213", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -2085,8 +2085,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         let msg = format!(\"Could not find `{}` in `{}`\",\n                                             // idx +- 1 to account for the\n                                             // colons on either side\n-                                            &mpath[(idx + 1)..],\n-                                            &mpath[..(idx - 1)]);\n+                                            &mpath[idx + 1..],\n+                                            &mpath[..idx - 1]);\n                         return Failed(Some((span, msg)));\n                     },\n                     None => {\n@@ -2762,7 +2762,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         for (i, rib) in ribs.iter().enumerate().rev() {\n             match rib.bindings.get(&name).cloned() {\n                 Some(def_like) => {\n-                    return self.upvarify(&ribs[(i + 1)..], def_like, span);\n+                    return self.upvarify(&ribs[i + 1..], def_like, span);\n                 }\n                 None => {\n                     // Continue."}, {"sha": "cfb8c88ce4092b45947cf59b8c59e14ebdd05584", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -1183,7 +1183,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n         // against the archive.\n         if sess.lto() {\n             let name = cratepath.filename_str().unwrap();\n-            let name = &name[3..(name.len() - 5)]; // chop off lib/.rlib\n+            let name = &name[3..name.len() - 5]; // chop off lib/.rlib\n             time(sess.time_passes(),\n                  &format!(\"altering {}.rlib\", name)[],\n                  (), |()| {"}, {"sha": "590354ab54e0af5c99f3eb40eeea62bea81eaa2c", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -60,7 +60,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n \n         let archive = ArchiveRO::open(&path).expect(\"wanted an rlib\");\n         let file = path.filename_str().unwrap();\n-        let file = &file[3..(file.len() - 5)]; // chop off lib/.rlib\n+        let file = &file[3..file.len() - 5]; // chop off lib/.rlib\n         debug!(\"reading {}\", file);\n         for i in iter::count(0u, 1) {\n             let bc_encoded = time(sess.time_passes(),\n@@ -201,7 +201,7 @@ fn extract_compressed_bytecode_size_v1(bc: &[u8]) -> u64 {\n }\n \n fn read_from_le_bytes<T: Int>(bytes: &[u8], position_in_bytes: uint) -> T {\n-    let byte_data = &bytes[position_in_bytes..(position_in_bytes + mem::size_of::<T>())];\n+    let byte_data = &bytes[position_in_bytes..position_in_bytes + mem::size_of::<T>()];\n     let data = unsafe {\n         *(byte_data.as_ptr() as *const T)\n     };"}, {"sha": "f5bf8b2d3e3c6155456edfec5df85b9b444f7a23", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -186,7 +186,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         if len <= 2 {\n             return;\n         }\n-        let sub_paths = &sub_paths[..(len-2)];\n+        let sub_paths = &sub_paths[..len-2];\n         for &(ref span, ref qualname) in sub_paths.iter() {\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,"}, {"sha": "267e16b80a416125ffcf9365aa62f04baa78ab61", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -472,7 +472,7 @@ fn enter_default<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     enter_match(bcx, dm, m, col, val, |pats| {\n         if pat_is_binding_or_wild(dm, &*pats[col]) {\n             let mut r = pats[..col].to_vec();\n-            r.push_all(&pats[(col + 1)..]);\n+            r.push_all(&pats[col + 1..]);\n             Some(r)\n         } else {\n             None\n@@ -983,7 +983,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let dm = &tcx.def_map;\n \n     let mut vals_left = vals[0u..col].to_vec();\n-    vals_left.push_all(&vals[(col + 1u)..]);\n+    vals_left.push_all(&vals[col + 1u..]);\n     let ccx = bcx.fcx.ccx;\n \n     // Find a real id (we're adding placeholder wildcard patterns, but"}, {"sha": "3c0530bbb9a6497b74f9d01ee7c811db1a14e5d0", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -361,7 +361,7 @@ fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type {\n                     }\n                     _ => unreachable!(),\n                 };\n-                let vec_len = llvec_len(&cls[(i + 1u)..]);\n+                let vec_len = llvec_len(&cls[i + 1u..]);\n                 let vec_ty = Type::vector(&elt_ty, vec_len as u64 * elts_per_word);\n                 tys.push(vec_ty);\n                 i += vec_len;"}, {"sha": "46ce46b0651a0817435437ac538782820a687644", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -1137,7 +1137,7 @@ pub fn get_cleanup_debug_loc_for_ast_node<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         if let Some(code_snippet) = code_snippet {\n             let bytes = code_snippet.as_bytes();\n \n-            if bytes.len() > 0 && &bytes[(bytes.len()-1)..] == b\"}\" {\n+            if bytes.len() > 0 && &bytes[bytes.len()-1..] == b\"}\" {\n                 cleanup_span = Span {\n                     lo: node_span.hi - codemap::BytePos(1),\n                     hi: node_span.hi,\n@@ -1726,7 +1726,7 @@ fn file_metadata(cx: &CrateContext, full_path: &str) -> DIFile {\n     let work_dir = cx.sess().working_dir.as_str().unwrap();\n     let file_name =\n         if full_path.starts_with(work_dir) {\n-            &full_path[(work_dir.len() + 1u)..full_path.len()]\n+            &full_path[work_dir.len() + 1u..full_path.len()]\n         } else {\n             full_path\n         };"}, {"sha": "928618467c41cb2abed5bd796dba709a8b27906c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -358,7 +358,7 @@ fn path<F, G>(w: &mut fmt::Formatter,\n         // This is a documented path, link to it!\n         Some((ref fqp, shortty)) if abs_root.is_some() => {\n             let mut url = String::from_str(abs_root.unwrap().as_slice());\n-            let to_link = &fqp[..(fqp.len() - 1)];\n+            let to_link = &fqp[..fqp.len() - 1];\n             for component in to_link.iter() {\n                 url.push_str(component.as_slice());\n                 url.push_str(\"/\");"}, {"sha": "c60b20dda5deceac60fe990575c7df01cb06a509", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -404,7 +404,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String>\n                     search_index.push(IndexItem {\n                         ty: shortty(item),\n                         name: item.name.clone().unwrap(),\n-                        path: fqp[..(fqp.len() - 1)].connect(\"::\"),\n+                        path: fqp[..fqp.len() - 1].connect(\"::\"),\n                         desc: shorter(item.doc_value()).to_string(),\n                         parent: Some(did),\n                     });\n@@ -559,7 +559,7 @@ fn write_shared(cx: &Context,\n         };\n \n         let mut mydst = dst.clone();\n-        for part in remote_path[..(remote_path.len() - 1)].iter() {\n+        for part in remote_path[..remote_path.len() - 1].iter() {\n             mydst.push(part.as_slice());\n             try!(mkdir(&mydst));\n         }\n@@ -842,7 +842,7 @@ impl DocFolder for Cache {\n                 clean::StructFieldItem(..) |\n                 clean::VariantItem(..) => {\n                     ((Some(*self.parent_stack.last().unwrap()),\n-                      Some(&self.stack[..(self.stack.len() - 1)])),\n+                      Some(&self.stack[..self.stack.len() - 1])),\n                      false)\n                 }\n                 clean::MethodItem(..) => {\n@@ -853,13 +853,13 @@ impl DocFolder for Cache {\n                         let did = *last;\n                         let path = match self.paths.get(&did) {\n                             Some(&(_, ItemType::Trait)) =>\n-                                Some(&self.stack[..(self.stack.len() - 1)]),\n+                                Some(&self.stack[..self.stack.len() - 1]),\n                             // The current stack not necessarily has correlation for\n                             // where the type was defined. On the other hand,\n                             // `paths` always has the right information if present.\n                             Some(&(ref fqp, ItemType::Struct)) |\n                             Some(&(ref fqp, ItemType::Enum)) =>\n-                                Some(&fqp[..(fqp.len() - 1)]),\n+                                Some(&fqp[..fqp.len() - 1]),\n                             Some(..) => Some(self.stack.as_slice()),\n                             None => None\n                         };\n@@ -1185,7 +1185,7 @@ impl Context {\n                                            .collect::<String>();\n                 match cache().paths.get(&it.def_id) {\n                     Some(&(ref names, _)) => {\n-                        for name in (&names[..(names.len() - 1)]).iter() {\n+                        for name in (&names[..names.len() - 1]).iter() {\n                             url.push_str(name.as_slice());\n                             url.push_str(\"/\");\n                         }"}, {"sha": "8cfb34a65d6feff1765f2f8137a40b7b0eecb35e", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -1298,7 +1298,7 @@ impl Stack {\n             InternalIndex(i) => StackElement::Index(i),\n             InternalKey(start, size) => {\n                 StackElement::Key(str::from_utf8(\n-                    &self.str_buffer[(start as uint) .. (start as uint + size as uint)])\n+                    &self.str_buffer[start as uint .. start as uint + size as uint])\n                         .unwrap())\n             }\n         }\n@@ -1341,7 +1341,7 @@ impl Stack {\n             Some(&InternalIndex(i)) => Some(StackElement::Index(i)),\n             Some(&InternalKey(start, size)) => {\n                 Some(StackElement::Key(str::from_utf8(\n-                    &self.str_buffer[(start as uint) .. (start+size) as uint]\n+                    &self.str_buffer[start as uint .. (start+size) as uint]\n                 ).unwrap()))\n             }\n         }"}, {"sha": "542a2d452372e2967f934aca2da44ccb3c78ec93", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -281,9 +281,9 @@ impl<W: Writer> Writer for LineBufferedWriter<W> {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         match buf.iter().rposition(|&b| b == b'\\n') {\n             Some(i) => {\n-                try!(self.inner.write(&buf[..(i + 1)]));\n+                try!(self.inner.write(&buf[..i + 1]));\n                 try!(self.inner.flush());\n-                try!(self.inner.write(&buf[(i + 1)..]));\n+                try!(self.inner.write(&buf[i + 1..]));\n                 Ok(())\n             }\n             None => self.inner.write(buf),"}, {"sha": "8d3c4f3053bef2119c719fb3dc284cc14a1bf68b", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -159,7 +159,7 @@ impl Reader for MemReader {\n \n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n-            let input = &self.buf[self.pos.. (self.pos + write_len)];\n+            let input = &self.buf[self.pos.. self.pos + write_len];\n             let output = buf.slice_to_mut(write_len);\n             assert_eq!(input.len(), output.len());\n             slice::bytes::copy_memory(output, input);\n@@ -349,7 +349,7 @@ impl<'a> Reader for BufReader<'a> {\n \n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n-            let input = &self.buf[self.pos.. (self.pos + write_len)];\n+            let input = &self.buf[self.pos.. self.pos + write_len];\n             let output = buf.slice_to_mut(write_len);\n             assert_eq!(input.len(), output.len());\n             slice::bytes::copy_memory(output, input);"}, {"sha": "1621a902f39b602848deb2a6e281764ec70a3e8e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -1449,7 +1449,7 @@ pub trait Buffer: Reader {\n                 };\n                 match available.iter().position(|&b| b == byte) {\n                     Some(i) => {\n-                        res.push_all(&available[..(i + 1)]);\n+                        res.push_all(&available[..i + 1]);\n                         used = i + 1;\n                         break\n                     }"}, {"sha": "f4b99b4c7937aac22f24ef0a32937112cf052bfa", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -399,7 +399,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n                 match name.rposition_elem(&dot) {\n                     None | Some(0) => None,\n                     Some(1) if name == b\"..\" => None,\n-                    Some(pos) => Some(&name[(pos+1)..])\n+                    Some(pos) => Some(&name[pos+1..])\n                 }\n             }\n         }"}, {"sha": "422e2cedc48f78e6b9e2f769d01ef2bfdb278749", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -126,7 +126,7 @@ impl GenericPathUnsafe for Path {\n             None => {\n                 self.repr = Path::normalize(filename);\n             }\n-            Some(idx) if &self.repr[(idx+1)..] == b\"..\" => {\n+            Some(idx) if &self.repr[idx+1..] == b\"..\" => {\n                 let mut v = Vec::with_capacity(self.repr.len() + 1 + filename.len());\n                 v.push_all(self.repr.as_slice());\n                 v.push(SEP_BYTE);\n@@ -136,7 +136,7 @@ impl GenericPathUnsafe for Path {\n             }\n             Some(idx) => {\n                 let mut v = Vec::with_capacity(idx + 1 + filename.len());\n-                v.push_all(&self.repr[..(idx+1)]);\n+                v.push_all(&self.repr[..idx+1]);\n                 v.push_all(filename);\n                 // FIXME: this is slow\n                 self.repr = Path::normalize(v.as_slice());\n@@ -178,7 +178,7 @@ impl GenericPath for Path {\n             None if b\"..\" == self.repr => self.repr.as_slice(),\n             None => dot_static,\n             Some(0) => &self.repr[..1],\n-            Some(idx) if &self.repr[(idx+1)..] == b\"..\" => self.repr.as_slice(),\n+            Some(idx) if &self.repr[idx+1..] == b\"..\" => self.repr.as_slice(),\n             Some(idx) => &self.repr[..idx]\n         }\n     }\n@@ -188,9 +188,9 @@ impl GenericPath for Path {\n             None if b\".\" == self.repr ||\n                 b\"..\" == self.repr => None,\n             None => Some(self.repr.as_slice()),\n-            Some(idx) if &self.repr[(idx+1)..] == b\"..\" => None,\n+            Some(idx) if &self.repr[idx+1..] == b\"..\" => None,\n             Some(0) if self.repr[1..].is_empty() => None,\n-            Some(idx) => Some(&self.repr[(idx+1)..])\n+            Some(idx) => Some(&self.repr[idx+1..])\n         }\n     }\n "}, {"sha": "6802b411d1e6813b7d003ac783becbf5c700737d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -428,10 +428,10 @@ impl GenericPath for Path {\n         if self.prefix.is_some() {\n             Some(Path::new(match self.prefix {\n                 Some(DiskPrefix) if self.is_absolute() => {\n-                    &self.repr[..(self.prefix_len()+1)]\n+                    &self.repr[..self.prefix_len()+1]\n                 }\n                 Some(VerbatimDiskPrefix) => {\n-                    &self.repr[..(self.prefix_len()+1)]\n+                    &self.repr[..self.prefix_len()+1]\n                 }\n                 _ => &self.repr[..self.prefix_len()]\n             }))\n@@ -635,7 +635,7 @@ impl Path {\n             Some(_) => {\n                 let plen = self.prefix_len();\n                 if repr.len() > plen && repr.as_bytes()[plen] == SEP_BYTE {\n-                    &repr[(plen+1)..]\n+                    &repr[plen+1..]\n                 } else { &repr[plen..] }\n             }\n             None if repr.as_bytes()[0] == SEP_BYTE => &repr[1..],\n@@ -786,9 +786,9 @@ impl Path {\n                             }\n                             Some(UNCPrefix(a,b)) => {\n                                 s.push_str(\"\\\\\\\\\");\n-                                s.push_str(&prefix_[2..(a+2)]);\n+                                s.push_str(&prefix_[2..a+2]);\n                                 s.push(SEP);\n-                                s.push_str(&prefix_[(3+a)..(3+a+b)]);\n+                                s.push_str(&prefix_[3+a..3+a+b]);\n                             }\n                             Some(_) => s.push_str(prefix_),\n                             None => ()\n@@ -813,7 +813,7 @@ impl Path {\n \n     fn update_sepidx(&mut self) {\n         let s = if self.has_nonsemantic_trailing_slash() {\n-                    &self.repr[..(self.repr.len()-1)]\n+                    &self.repr[..self.repr.len()-1]\n                 } else { &self.repr[] };\n         let sep_test: fn(char) -> bool = if !prefix_is_verbatim(self.prefix) {\n             is_sep\n@@ -1029,7 +1029,7 @@ fn parse_prefix<'a>(mut path: &'a str) -> Option<PathPrefix> {\n             None => return None,\n             Some(x) => x\n         };\n-        path = &path[(idx_a+1)..];\n+        path = &path[idx_a+1..];\n         let idx_b = path.find(f).unwrap_or(path.len());\n         Some((idx_a, idx_b))\n     }"}, {"sha": "03a23214cf3aa02a33547a9c8cdc7a81f8ef0b95", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -362,7 +362,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n             let bytes = unsafe { ffi::c_str_to_bytes(&ptr) };\n             match str::from_utf8(bytes) {\n                 Ok(s) => try!(demangle(w, s)),\n-                Err(..) => try!(w.write(&bytes[..(bytes.len()-1)])),\n+                Err(..) => try!(w.write(&bytes[..bytes.len()-1])),\n             }\n         }\n         try!(w.write(&['\\n' as u8]));"}, {"sha": "02e7796b8c6ac6de00dcbc11a0cd1b98dc464037", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -525,7 +525,7 @@ impl<'ast> Map<'ast> {\n         NodesMatchingSuffix {\n             map: self,\n             item_name: parts.last().unwrap(),\n-            in_which: &parts[..(parts.len() - 1)],\n+            in_which: &parts[..parts.len() - 1],\n             idx: 0,\n         }\n     }"}, {"sha": "c84cbdcae8549f1c46674d334b9ba650934c1997", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -284,7 +284,7 @@ fn print_maybe_styled(w: &mut EmitterWriter,\n             // to be miscolored. We assume this is rare enough that we don't\n             // have to worry about it.\n             if msg.ends_with(\"\\n\") {\n-                try!(t.write_str(&msg[..(msg.len()-1)]));\n+                try!(t.write_str(&msg[..msg.len()-1]));\n                 try!(t.reset());\n                 try!(t.write_str(\"\\n\"));\n             } else {"}, {"sha": "c58136b30aa1aeec67bcc26bf77e008369f8849f", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -116,7 +116,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n \n         if can_trim {\n             lines.iter().map(|line| {\n-                (&line[(i + 1)..line.len()]).to_string()\n+                (&line[i + 1..line.len()]).to_string()\n             }).collect()\n         } else {\n             lines\n@@ -132,7 +132,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n     }\n \n     if comment.starts_with(\"/*\") {\n-        let lines = comment[3us..(comment.len() - 2us)]\n+        let lines = comment[3..comment.len() - 2]\n             .lines_any()\n             .map(|s| s.to_string())\n             .collect::<Vec<String> >();"}, {"sha": "eb300beae9fa87cb302cbece81afea11f75303be", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -284,12 +284,12 @@ pub fn parse(file: &mut io::Reader, longnames: bool)\n \n \n             // Find the offset of the NUL we want to go to\n-            let nulpos = string_table[(offset as uint) .. (string_table_bytes as uint)]\n+            let nulpos = string_table[offset as uint .. string_table_bytes as uint]\n                 .iter().position(|&b| b == 0);\n             match nulpos {\n                 Some(len) => {\n                     string_map.insert(name.to_string(),\n-                                      string_table[(offset as uint) ..\n+                                      string_table[offset as uint ..\n                                                    (offset as uint + len)].to_vec())\n                 },\n                 None => {"}, {"sha": "daabae88bdf614a4842d145f493f635b88ffbe00", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -103,7 +103,7 @@ impl Perm {\n             let d = idx / self.fact[i] as i32;\n             self.cnt[i] = d;\n             idx %= self.fact[i] as i32;\n-            for (place, val) in pp.iter_mut().zip(self.perm.p[..(i+1)].iter()) {\n+            for (place, val) in pp.iter_mut().zip(self.perm.p[..i+1].iter()) {\n                 *place = (*val) as u8\n             }\n "}, {"sha": "1b849cd12f57b4b5286c8d162046f41c2acfcdfb", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -97,7 +97,7 @@ fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n         }\n         n -= nb;\n         line[nb] = '\\n' as u8;\n-        try!(wr.write(&line[..(nb+1)]));\n+        try!(wr.write(&line[..nb+1]));\n     }\n     Ok(())\n }"}, {"sha": "fdaeb9e74f59939430822b2a1491eb11926f0a8a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -101,11 +101,11 @@ fn windows_with_carry<F>(bb: &[u8], nn: uint, mut it: F) -> Vec<u8> where\n \n    let len = bb.len();\n    while ii < len - (nn - 1u) {\n-      it(&bb[ii..(ii+nn)]);\n+      it(&bb[ii..ii+nn]);\n       ii += 1u;\n    }\n \n-   return bb[(len - (nn - 1u))..len].to_vec();\n+   return bb[len - (nn - 1u)..len].to_vec();\n }\n \n fn make_sequence_processor(sz: uint,"}, {"sha": "fdae5f79546925c8e0323d6880045671509b8229", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -21,6 +21,6 @@ pub fn main() {\n \n     // Unsized type.\n     let arr: &[_] = &[1us, 2, 3];\n-    let range = (*arr)..;\n+    let range = *arr..;\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "9d89f4b05c5b93770238813e08fdbbc6f1bc614c", "filename": "src/test/compile-fail/range-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646707c6e86166b28be77623f260333015e790c/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-2.rs?ref=1646707c6e86166b28be77623f260333015e790c", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let r = {\n-        (&42is)..&42\n+        &42is..&42\n         //~^ ERROR borrowed value does not live long enough\n         //~^^ ERROR borrowed value does not live long enough\n     };"}]}