{"sha": "88e22e9d70ac3a35989ad1d45386f86697877c4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTIyZTlkNzBhYzNhMzU5ODlhZDFkNDUzODZmODY2OTc4NzdjNGM=", "commit": {"author": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-03-30T11:17:31Z"}, "committer": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-04-02T18:21:36Z"}, "message": "Added const bodies and static body to the ast\nand added inference the inference test\n\nreduce code duplication", "tree": {"sha": "274537eb5913369a7f226aca534fbf3821395181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274537eb5913369a7f226aca534fbf3821395181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e22e9d70ac3a35989ad1d45386f86697877c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e22e9d70ac3a35989ad1d45386f86697877c4c", "html_url": "https://github.com/rust-lang/rust/commit/88e22e9d70ac3a35989ad1d45386f86697877c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e22e9d70ac3a35989ad1d45386f86697877c4c/comments", "author": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "html_url": "https://github.com/rust-lang/rust/commit/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87"}], "stats": {"total": 271, "additions": 180, "deletions": 91}, "files": [{"sha": "c3e5e26c3074a4f9a7dd7e1d16908deb394f725e", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 35, "deletions": 52, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -436,73 +436,40 @@ impl Docs for EnumVariant {\n /// The defs which have a body.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum DefWithBody {\n-    Func(Function),\n+    Function(Function),\n     Const(Const),\n     Static(Static),\n }\n \n-impl DefWithBody {\n-    pub fn get_funct(&self) -> &Function {\n-        match *self {\n-            DefWithBody::Func(ref f) => f,\n-            _ => unreachable!()\n-        }\n-    }\n-\n-    pub fn const_source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n-       match *self {\n-           DefWithBody::Const(ref c) => c.source(db),\n-           _ => unreachable!()\n-       }\n-    }\n-\n-    pub fn func_source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n-       match *self {\n-           DefWithBody::Func(ref f) => f.source(db),\n-           _ => unreachable!()\n-       }\n-    }\n-\n-    pub fn static_source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n-       match *self {\n-           DefWithBody::Static(ref s) => s.source(db),\n-           _ => unreachable!()\n-       }\n-    }\n+impl_froms!(DefWithBody: Function, Const, Static);\n \n+impl DefWithBody {\n     pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer(*self)\n     }\n \n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(*self).1\n+    }\n+\n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n         db.body_hir(*self)\n     }\n-    \n+\n     /// Builds a resolver for code inside this item.\n     pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n-        // // take the outer scope...\n-        // let r = self\n-        //     .impl_block(db)\n-        //     .map(|ib| ib.resolver(db))\n-        //     .unwrap_or_else(|| self.module(db).resolver(db));\n-        // // ...and add generic params, if present\n-        // let p = self.generic_params(db);\n-        // let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        // r\n-        unimplemented!()\n-    }\n-\n-    pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {\n-        // db.fn_signature(*self)\n-        unimplemented!()\n+        match *self {\n+            DefWithBody::Const(ref c) => c.resolver(db),\n+            DefWithBody::Function(ref f) => f.resolver(db),\n+            DefWithBody::Static(ref s) => s.resolver(db),\n+        }\n     }\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n         let scopes = db.expr_scopes(*self);\n         let source_map = db.body_with_source_map(*self).1;\n         ScopesWithSourceMap { scopes, source_map }\n     }\n-    \n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -555,20 +522,20 @@ impl Function {\n     }\n \n     pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(DefWithBody::Func(*self)).1\n+        db.body_with_source_map((*self).into()).1\n     }\n \n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(DefWithBody::Func(*self))\n+        db.body_hir((*self).into())\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def((*self).into(), Namespace::Values)\n     }\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n-        let scopes = db.expr_scopes( DefWithBody::Func(*self));\n-        let source_map = db.body_with_source_map(DefWithBody::Func(*self)).1;\n+        let scopes = db.expr_scopes((*self).into());\n+        let source_map = db.body_with_source_map((*self).into()).1;\n         ScopesWithSourceMap { scopes, source_map }\n     }\n \n@@ -577,7 +544,7 @@ impl Function {\n     }\n \n     pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(DefWithBody::Func(*self))\n+        db.infer((*self).into())\n     }\n \n     pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n@@ -633,6 +600,14 @@ impl Const {\n         db.const_signature(*self)\n     }\n \n+    pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer((*self).into())\n+    }\n+\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map((*self).into()).1\n+    }\n+\n     /// The containing impl block, if this is a method.\n     pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n@@ -697,6 +672,14 @@ impl Static {\n         // take the outer scope...\n         self.module(db).resolver(db)\n     }\n+\n+    pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer((*self).into())\n+    }\n+\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map((*self).into()).1\n+    }\n }\n \n impl Docs for Static {\n@@ -788,4 +771,4 @@ impl Docs for TypeAlias {\n     fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n         docs_from_ast(&*self.source(db).1)\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "be8a8c98bb8fc7368bbe36b23e231ad52e31bee1", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -87,7 +87,7 @@ pub trait HirDatabase: DefDatabase {\n     fn expr_scopes(&self, def: DefWithBody) -> Arc<ExprScopes>;\n \n     #[salsa::invoke(crate::ty::infer)]\n-    fn infer(&self, def:DefWithBody) -> Arc<InferenceResult>;\n+    fn infer(&self, def: DefWithBody) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::ty::type_for_def)]\n     fn type_for_def(&self, def: TypableDef, ns: Namespace) -> Ty;"}, {"sha": "bc4c63d3c32dcfb323d6da4a08988c6159e17411", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Function, Resolver,DefWithBody,\n+    Path, Name, HirDatabase, Resolver,DefWithBody,\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n@@ -27,8 +27,7 @@ impl_arena_id!(ExprId);\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n-    // FIXME: this should be more general, consts & statics also have bodies\n-    /// The Function of the item this body belongs to\n+    /// The def of the item this body belongs to\n     owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n@@ -503,9 +502,6 @@ impl ExprCollector {\n         self.exprs.alloc(block)\n     }\n \n-\n-    \n-\n     fn collect_expr(&mut self, expr: &ast::Expr) -> ExprId {\n         let syntax_ptr = SyntaxNodePtr::new(expr.syntax());\n         match expr.kind() {\n@@ -874,13 +870,14 @@ impl ExprCollector {\n         }\n     }\n \n-\n-    fn collect_const_body(&mut self,node:&ast::ConstDef)  {\n-        \n+    fn collect_const_body(&mut self, node: &ast::ConstDef) {\n+        let body = self.collect_expr_opt(node.body());\n+        self.body_expr = Some(body);\n     }\n \n-    fn collect_static_body(&mut self,node:&ast::StaticDef) {\n-\n+    fn collect_static_body(&mut self, node: &ast::StaticDef) {\n+        let body = self.collect_expr_opt(node.body());\n+        self.body_expr = Some(body);\n     }\n \n     fn collect_fn_body(&mut self, node: &ast::FnDef) {\n@@ -931,28 +928,27 @@ pub(crate) fn body_with_source_map_query(\n     db: &impl HirDatabase,\n     def: DefWithBody,\n ) -> (Arc<Body>, Arc<BodySourceMap>) {\n-\n     let mut collector = ExprCollector::new(def);\n \n-    // FIXME: do can this be turned into a method\n-    \n     match def {\n-        DefWithBody::Const(ref c) => collector.collect_const_body(&def.const_source(db).1),\n-        DefWithBody::Func(ref f) => collector.collect_fn_body(&def.func_source(db).1),\n-        DefWithBody::Static(ref s) => collector.collect_static_body(&def.static_source(db).1)\n+        DefWithBody::Const(ref c) => collector.collect_const_body(&c.source(db).1),\n+        DefWithBody::Function(ref f) => collector.collect_fn_body(&f.source(db).1),\n+        DefWithBody::Static(ref s) => collector.collect_static_body(&s.source(db).1),\n     }\n-    \n+\n     let (body, source_map) = collector.finish();\n     (Arc::new(body), Arc::new(source_map))\n }\n \n pub(crate) fn body_hir_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n-    db.body_with_source_map(def).0   \n+    db.body_with_source_map(def).0\n }\n \n+#[cfg(test)]\n+use crate::{Function};\n #[cfg(test)]\n fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n-    let mut collector = ExprCollector::new(function);\n+    let mut collector = ExprCollector::new(DefWithBody::Function(function));\n     collector.collect_fn_body(node);\n     collector.finish()\n }"}, {"sha": "9d6b1eb2ba4ca47a7a2b0d51475c7697c00e8f47", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    Name, AsName, Function,DefWithBody,\n+    Name, AsName,DefWithBody,\n     expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySourceMap},\n     HirDatabase,\n };\n@@ -297,6 +297,7 @@ mod tests {\n     use ra_syntax::{SourceFile, algo::find_node_at_offset};\n     use test_utils::{extract_offset, assert_eq_text};\n     use ra_arena::ArenaId;\n+    use crate::{Function};\n \n     use crate::expr;\n "}, {"sha": "5b6abcf6df2af70fe0ec8578dfa86dc0da7a7f25", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -74,5 +74,4 @@ pub use self::code_model_api::{\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n     Trait, TypeAlias,\n-    \n };"}, {"sha": "430dbc522a18d7176dc930e783c0200dc906c17d", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, Struct, Enum,\n+    HirDatabase, Function, Struct, Enum,Const,Static,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::LocationCtx,\n     expr, AstId\n@@ -87,6 +87,27 @@ fn module_from_source(\n     )\n }\n \n+pub fn const_from_source(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    const_def: &ast::ConstDef,\n+) -> Option<Const> {\n+    let module = module_from_child_node(db, file_id, const_def.syntax())?;\n+    let res = const_from_module(db, module, const_def);\n+    Some(res)\n+}\n+\n+pub fn const_from_module(\n+    db: &impl HirDatabase,\n+    module: Module,\n+    const_def: &ast::ConstDef,\n+) -> Const {\n+    let (file_id, _) = module.definition_source(db);\n+    let file_id = file_id.into();\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Const { id: ctx.to_def(const_def) }\n+}\n+\n pub fn function_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Function> {\n     let file = db.parse(position.file_id);\n     let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)?;\n@@ -134,6 +155,27 @@ pub fn struct_from_module(\n     Struct { id: ctx.to_def(struct_def) }\n }\n \n+pub fn static_from_source(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    static_def: &ast::StaticDef,\n+) -> Option<Static> {\n+    let module = module_from_child_node(db, file_id, static_def.syntax())?;\n+    let res = static_from_module(db, module, static_def);\n+    Some(res)\n+}\n+\n+pub fn static_from_module(\n+    db: &impl HirDatabase,\n+    module: Module,\n+    static_def: &ast::StaticDef,\n+) -> Static {\n+    let (file_id, _) = module.definition_source(db);\n+    let file_id = file_id.into();\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Static { id: ctx.to_def(static_def) }\n+}\n+\n pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n     let (file_id, _) = module.definition_source(db);\n     let file_id = file_id.into();"}, {"sha": "887153484d7712e61a026e1f5ac6d07660a336f9", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -27,8 +27,9 @@ use test_utils::tested_by;\n \n use crate::{\n     Function, StructField, Path, Name,\n-    FnSignature, AdtDef,\n+    FnSignature, AdtDef,ConstSignature,\n     HirDatabase,\n+    DefWithBody,\n     ImplItem,\n     type_ref::{TypeRef, Mutability},\n     expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat, self},\n@@ -43,14 +44,17 @@ use crate::{\n use super::{Ty, TypableDef, Substs, primitive, op, FnSig, ApplicationTy, TypeCtor};\n \n /// The entry point of type inference.\n-pub fn infer(db: &impl HirDatabase, func: Function) -> Arc<InferenceResult> {\n+pub fn infer(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {\n     db.check_canceled();\n-    let body = func.body(db);\n-    let resolver = func.resolver(db);\n+    let body = def.body(db);\n+    let resolver = def.resolver(db);\n     let mut ctx = InferenceContext::new(db, body, resolver);\n \n-    let signature = func.signature(db);\n-    ctx.collect_fn_signature(&signature);\n+    match def {\n+        DefWithBody::Const(ref c) => ctx.collect_const_signature(&c.signature(db)),\n+        DefWithBody::Function(ref f) => ctx.collect_fn_signature(&f.signature(db)),\n+        DefWithBody::Static(ref s) => ctx.collect_const_signature(&s.signature(db)),\n+    }\n \n     ctx.infer_body();\n \n@@ -1142,6 +1146,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n+    fn collect_const_signature(&mut self, signature: &ConstSignature) {\n+        self.return_ty = self.make_ty(signature.type_ref());\n+    }\n+\n     fn collect_fn_signature(&mut self, signature: &FnSignature) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         for (type_ref, pat) in signature.params().iter().zip(body.params()) {"}, {"sha": "1e84e2d06c69f3485303a40e205f7a24193e270f", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -11,6 +11,8 @@ use crate::{\n     source_binder,\n     mock::MockDatabase,\n     ty::display::HirDisplay,\n+    ty::InferenceResult,\n+    expr::BodySourceMap\n };\n \n // These tests compare the inference results for all expressions in a file\n@@ -1267,6 +1269,9 @@ fn test() {\n }\n \"#),\n         @r###\"\n+[52; 53) '1': u32\n+[103; 104) '2': u32\n+[211; 212) '5': u32\n [227; 305) '{     ...:ID; }': ()\n [237; 238) 'x': u32\n [241; 252) 'Struct::FOO': u32\n@@ -1855,6 +1860,9 @@ fn test() {\n }\n \"#),\n         @r###\"\n+[49; 50) '0': u32\n+[80; 83) '101': u32\n+[126; 128) '99': u32\n [95; 213) '{     ...NST; }': ()\n [138; 139) 'x': {unknown}\n [142; 153) 'LOCAL_CONST': {unknown}\n@@ -1881,6 +1889,10 @@ fn test() {\n }\n \"#),\n         @r###\"\n+[29; 32) '101': u32\n+[70; 73) '101': u32\n+[118; 120) '99': u32\n+[161; 163) '99': u32\n [85; 280) '{     ...MUT; }': ()\n [173; 174) 'x': {unknown}\n [177; 189) 'LOCAL_STATIC': {unknown}\n@@ -2212,6 +2224,24 @@ fn test<T: Iterable<Item=u32>>() {\n     );\n }\n \n+#[test]\n+fn infer_const_body() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+const A: u32 = 1 + 1;\n+static B: u64 = { let x = 1; x };\n+\"#),\n+        @r###\"\n+[16; 17) '1': u32\n+[16; 21) '1 + 1': u32\n+[20; 21) '1': u32\n+[39; 55) '{ let ...1; x }': u64\n+[45; 46) 'x': u64\n+[49; 50) '1': u64\n+[52; 53) 'x': u64\"###\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n     let body_source_map = func.body_source_map(db);\n@@ -2228,18 +2258,19 @@ fn infer(content: &str) -> String {\n     let source_file = db.parse(file_id);\n     let mut acc = String::new();\n     acc.push_str(\"\\n\");\n-    for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n-        let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n-        let inference_result = func.infer(&db);\n-        let body_source_map = func.body_source_map(&db);\n+\n+    let mut infer_def = |inference_result: Arc<InferenceResult>,\n+                         body_source_map: Arc<BodySourceMap>| {\n         let mut types = Vec::new();\n+\n         for (pat, ty) in inference_result.type_of_pat.iter() {\n             let syntax_ptr = match body_source_map.pat_syntax(pat) {\n                 Some(sp) => sp,\n                 None => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n+\n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n                 Some(sp) => sp,\n@@ -2260,7 +2291,29 @@ fn infer(content: &str) -> String {\n             )\n             .unwrap();\n         }\n+    };\n+\n+    for const_def in source_file.syntax().descendants().filter_map(ast::ConstDef::cast) {\n+        let konst = source_binder::const_from_source(&db, file_id, const_def).unwrap();\n+        let inference_result = konst.infer(&db);\n+        let body_source_map = konst.body_source_map(&db);\n+        infer_def(inference_result, body_source_map)\n     }\n+\n+    for static_def in source_file.syntax().descendants().filter_map(ast::StaticDef::cast) {\n+        let static_ = source_binder::static_from_source(&db, file_id, static_def).unwrap();\n+        let inference_result = static_.infer(&db);\n+        let body_source_map = static_.body_source_map(&db);\n+        infer_def(inference_result, body_source_map)\n+    }\n+\n+    for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n+        let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n+        let inference_result = func.infer(&db);\n+        let body_source_map = func.body_source_map(&db);\n+        infer_def(inference_result, body_source_map)\n+    }\n+\n     acc.truncate(acc.trim_end().len());\n     acc\n }"}, {"sha": "84f39cda10905c022a16cffc08caea92e91a0dc8", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -629,7 +629,11 @@ impl ast::TypeParamsOwner for ConstDef {}\n impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n impl ast::TypeAscriptionOwner for ConstDef {}\n-impl ConstDef {}\n+impl ConstDef {\n+    pub fn body(&self) -> Option<&Expr> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ContinueExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -657,7 +661,6 @@ impl ToOwned for ContinueExpr {\n }\n \n \n-\n impl ContinueExpr {}\n \n // DynTraitType\n@@ -3808,7 +3811,11 @@ impl ast::TypeParamsOwner for StaticDef {}\n impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n impl ast::TypeAscriptionOwner for StaticDef {}\n-impl StaticDef {}\n+impl StaticDef {\n+    pub fn body(&self) -> Option<&Expr> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Stmt\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "a21c3917d4a300fc2ac1ea2d2e919f9f07cd93ed", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/88e22e9d70ac3a35989ad1d45386f86697877c4c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=88e22e9d70ac3a35989ad1d45386f86697877c4c", "patch": "@@ -313,7 +313,7 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n-            options: [\"body\",\"Block\"],\n+            options: [ [\"body\",\"Expr\"]],\n         ),\n         \"StaticDef\": (\n             traits: [\n@@ -324,7 +324,7 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n-            options: [\"body\",\"Block\"],\n+            options: [ [\"body\",\"Expr\"]],\n         ),\n         \"TypeAliasDef\": (\n             traits: ["}]}