{"sha": "3620456fafa04505c23511aa07d34f704ee7c84b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MjA0NTZmYWZhMDQ1MDVjMjM1MTFhYTA3ZDM0ZjcwNGVlN2M4NGI=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-07-09T07:37:55Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-08-19T08:49:54Z"}, "message": "Use BTreeMap for deterministic iter order", "tree": {"sha": "ebf752b9087aea687f7f7482d3fe8eda52929080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf752b9087aea687f7f7482d3fe8eda52929080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3620456fafa04505c23511aa07d34f704ee7c84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3620456fafa04505c23511aa07d34f704ee7c84b", "html_url": "https://github.com/rust-lang/rust/commit/3620456fafa04505c23511aa07d34f704ee7c84b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3620456fafa04505c23511aa07d34f704ee7c84b/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6dbb4f237ae0d84db5994cd075065efe05306b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6dbb4f237ae0d84db5994cd075065efe05306b", "html_url": "https://github.com/rust-lang/rust/commit/cc6dbb4f237ae0d84db5994cd075065efe05306b"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "37ee79aa9e4f15b1a3fc6c900ed52b6723137952", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3620456fafa04505c23511aa07d34f704ee7c84b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3620456fafa04505c23511aa07d34f704ee7c84b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3620456fafa04505c23511aa07d34f704ee7c84b", "patch": "@@ -1693,12 +1693,13 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                                     &'a &'tcx ty::GenericPredicates<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Generics {\n         use self::WherePredicate as WP;\n+        use std::collections::BTreeMap;\n \n         let (gens, preds) = *self;\n \n         // Don't populate `cx.impl_trait_bounds` before `clean`ning `where` clauses,\n         // since `Clean for ty::Predicate` would consume them.\n-        let mut impl_trait = FxHashMap::<ImplTraitParam, Vec<GenericBound>>::default();\n+        let mut impl_trait = BTreeMap::<ImplTraitParam, Vec<GenericBound>>::default();\n \n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n@@ -1777,16 +1778,14 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             })\n             .collect::<Vec<_>>();\n \n-        // Move `TraitPredicate`s to the front.\n-        for (_, bounds) in impl_trait.iter_mut() {\n+        for (param, mut bounds) in impl_trait {\n+            // Move trait bounds to the front.\n             bounds.sort_by_key(|b| if let GenericBound::TraitBound(..) = b {\n                 false\n             } else {\n                 true\n             });\n-        }\n \n-        for (param, mut bounds) in impl_trait {\n             if let crate::core::ImplTraitParam::ParamIndex(idx) = param {\n                 if let Some(proj) = impl_trait_proj.remove(&idx) {\n                     for (trait_did, name, rhs) in proj {"}, {"sha": "04e69613d4b0f145daf8f465ded97b33f6ced855", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3620456fafa04505c23511aa07d34f704ee7c84b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3620456fafa04505c23511aa07d34f704ee7c84b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3620456fafa04505c23511aa07d34f704ee7c84b", "patch": "@@ -462,7 +462,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n /// `DefId` or parameter index (`ty::ParamTy.index`) of a synthetic type parameter\n /// for `impl Trait` in argument position.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum ImplTraitParam {\n     DefId(DefId),\n     ParamIndex(u32),"}]}