{"sha": "63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYzdlMmY5OTFlYWY3OWVjZTA1ODZiMTlmMDQ2MWVjNmY4OTMzZWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-06T04:43:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-11T02:51:06Z"}, "message": "Remove the '<->' operator from the language", "tree": {"sha": "e30a478ad4b6ff00bd513f7750349df2faad22b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e30a478ad4b6ff00bd513f7750349df2faad22b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "html_url": "https://github.com/rust-lang/rust/commit/63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "998fececd6516fa07d0cd0a0c4607ddef0bc40f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/998fececd6516fa07d0cd0a0c4607ddef0bc40f0", "html_url": "https://github.com/rust-lang/rust/commit/998fececd6516fa07d0cd0a0c4607ddef0bc40f0"}], "stats": {"total": 144, "additions": 16, "deletions": 128}, "files": [{"sha": "60848441e4e778fefa70a7ec63e0ac2193899851", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -1946,35 +1946,6 @@ fn avg(v: &[float]) -> float {\n }\n ~~~~\n \n-#### Swap expressions\n-\n-A _swap expression_ consists of an [lvalue](#lvalues-rvalues-and-temporaries) followed by a bi-directional arrow (`<->`) and another [lvalue](#lvalues-rvalues-and-temporaries).\n-\n-Evaluating a swap expression causes, as a side effect, the values held in the left-hand-side and right-hand-side [lvalues](#lvalues-rvalues-and-temporaries) to be exchanged indivisibly.\n-\n-Evaluating a swap expression neither changes reference counts,\n-nor deeply copies any owned structure pointed to by the moved [rvalue](#lvalues-rvalues-and-temporaries).\n-Instead, the swap expression represents an indivisible *exchange of ownership*,\n-between the right-hand-side and the left-hand-side of the expression.\n-No allocation or destruction is entailed.\n-\n-An example of three different swap expressions:\n-\n-~~~~~~~~\n-# let mut x = &mut [0];\n-# let mut a = &mut [0];\n-# let i = 0;\n-# struct S1 { z: int };\n-# struct S2 { c: int };\n-# let mut y = S1{z: 0};\n-# let mut b = S2{c: 0};\n-\n-x <-> a;\n-x[i] <-> a[i];\n-y.z <-> b.c;\n-~~~~~~~~\n-\n-\n #### Assignment expressions\n \n An _assignment expression_ consists of an [lvalue](#lvalues-rvalues-and-temporaries) expression followed by an\n@@ -2015,7 +1986,7 @@ as\n == !=\n &&\n ||\n-= <->\n+=\n ~~~~\n \n Operators at the same precedence level are evaluated left-to-right."}, {"sha": "2f116cb1b284babef431c81df2dc453a35f641bb", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -758,10 +758,6 @@ fn check_loans_in_expr<'a>(expr: @ast::expr,\n     }\n \n     match expr.node {\n-      ast::expr_swap(l, r) => {\n-        self.check_assignment(l);\n-        self.check_assignment(r);\n-      }\n       ast::expr_assign(dest, _) |\n       ast::expr_assign_op(_, dest, _) => {\n         self.check_assignment(dest);"}, {"sha": "dc08fb39ad98403e43b216c997f413b750b19142", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -698,11 +698,6 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n                 self.walk_expr(l, in_out, loop_scopes);\n             }\n \n-            ast::expr_swap(l, r) => {\n-                self.walk_expr(l, in_out, loop_scopes);\n-                self.walk_expr(r, in_out, loop_scopes);\n-            }\n-\n             ast::expr_vec(ref exprs, _) => {\n                 self.walk_exprs(*exprs, in_out, loop_scopes)\n             }"}, {"sha": "52274f3d30570553650f0fb3366311debe7487a5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -523,7 +523,7 @@ fn visit_expr(expr: @expr, self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n       expr_binary(*) | expr_addr_of(*) | expr_copy(*) | expr_loop_body(*) |\n       expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_break(_) |\n       expr_again(_) | expr_lit(_) | expr_ret(*) | expr_block(*) |\n-      expr_assign(*) | expr_swap(*) | expr_assign_op(*) | expr_mac(*) |\n+      expr_assign(*) | expr_assign_op(*) | expr_mac(*) |\n       expr_struct(*) | expr_repeat(*) | expr_paren(*) |\n       expr_inline_asm(*) => {\n           visit::visit_expr(expr, self, vt);\n@@ -1141,21 +1141,6 @@ pub impl Liveness {\n             self.propagate_through_expr(r, succ)\n           }\n \n-          expr_swap(l, r) => {\n-            // see comment on lvalues in\n-            // propagate_through_lvalue_components()\n-\n-            // I count swaps as `used` cause it might be something like:\n-            //    foo.bar <-> x\n-            // and I am too lazy to distinguish this case from\n-            //    y <-> x\n-            // (where both x, y are unused) just for a warning.\n-            let succ = self.write_lvalue(r, succ, ACC_WRITE|ACC_READ|ACC_USE);\n-            let succ = self.write_lvalue(l, succ, ACC_WRITE|ACC_READ|ACC_USE);\n-            let succ = self.propagate_through_lvalue_components(r, succ);\n-            self.propagate_through_lvalue_components(l, succ)\n-          }\n-\n           expr_assign_op(_, l, r) => {\n             // see comment on lvalues in\n             // propagate_through_lvalue_components()\n@@ -1533,7 +1518,7 @@ fn check_expr(expr: @expr, self: @Liveness, vt: vt<@Liveness>) {\n       expr_vstore(*) | expr_vec(*) | expr_tup(*) | expr_log(*) |\n       expr_binary(*) | expr_copy(*) | expr_loop_body(*) | expr_do_body(*) |\n       expr_cast(*) | expr_unary(*) | expr_ret(*) | expr_break(*) |\n-      expr_again(*) | expr_lit(_) | expr_block(*) | expr_swap(*) |\n+      expr_again(*) | expr_lit(_) | expr_block(*) |\n       expr_mac(*) | expr_addr_of(*) | expr_struct(*) | expr_repeat(*) |\n       expr_paren(*) => {\n         visit::visit_expr(expr, self, vt);"}, {"sha": "7675efa76f4be29f0f3d2fd462d22f04bb9bab83", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -413,7 +413,7 @@ pub impl mem_categorization_ctxt {\n \n           ast::expr_paren(e) => self.cat_expr_unadjusted(e),\n \n-          ast::expr_addr_of(*) | ast::expr_call(*) | ast::expr_swap(*) |\n+          ast::expr_addr_of(*) | ast::expr_call(*) |\n           ast::expr_assign(*) | ast::expr_assign_op(*) |\n           ast::expr_fn_block(*) | ast::expr_ret(*) | ast::expr_loop_body(*) |\n           ast::expr_do_body(*) | ast::expr_unary(*) |"}, {"sha": "2471e383bca9cee3209bb7d12c634b5070999001", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -650,11 +650,6 @@ pub impl VisitContext {\n                 self.consume_expr(count, visitor);\n             }\n \n-            expr_swap(lhs, rhs) => {\n-                self.use_expr(lhs, Read, visitor);\n-                self.use_expr(rhs, Read, visitor);\n-            }\n-\n             expr_loop_body(base) |\n             expr_do_body(base) => {\n                 self.use_expr(base, comp_mode, visitor);"}, {"sha": "ed3dfdc07c3736d467c4d679e5700c10408e5e5a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -528,33 +528,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n             return src_datum.store_to_datum(\n                 bcx, src.id, DROP_EXISTING, dst_datum);\n         }\n-        ast::expr_swap(dst, src) => {\n-            let dst_datum = unpack_datum!(bcx, trans_lvalue(bcx, dst));\n-            let src_datum = unpack_datum!(bcx, trans_lvalue(bcx, src));\n-\n-            // If the source and destination are the same, then don't swap.\n-            // Avoids performing an overlapping memcpy\n-            let dst_datum_ref = dst_datum.to_ref_llval(bcx);\n-            let src_datum_ref = src_datum.to_ref_llval(bcx);\n-            let cmp = ICmp(bcx, lib::llvm::IntEQ,\n-                           src_datum_ref,\n-                           dst_datum_ref);\n-\n-            let swap_cx = base::sub_block(bcx, \"swap\");\n-            let next_cx = base::sub_block(bcx, \"next\");\n-\n-            CondBr(bcx, cmp, next_cx.llbb, swap_cx.llbb);\n-\n-            let scratch = scratch_datum(swap_cx, dst_datum.ty, false);\n-\n-            let swap_cx = dst_datum.move_to_datum(swap_cx, INIT, scratch);\n-            let swap_cx = src_datum.move_to_datum(swap_cx, INIT, dst_datum);\n-            let swap_cx = scratch.move_to_datum(swap_cx, INIT, src_datum);\n-\n-            Br(swap_cx, next_cx.llbb);\n-\n-            return next_cx;\n-        }\n         ast::expr_assign_op(op, dst, src) => {\n             return trans_assign_op(bcx, expr, op, dst, src);\n         }"}, {"sha": "3c2738d3ae80e87b73f8796c58c9e2a23a8bc8ae", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -314,7 +314,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n               }\n           }\n       }\n-      expr_assign(val, _) | expr_swap(val, _) | expr_assign_op(_, val, _) |\n+      expr_assign(val, _) | expr_assign_op(_, val, _) |\n       expr_ret(Some(val)) => {\n         node_type_needs(cx, use_repr, val.id);\n       }"}, {"sha": "829a1e399de0cfe9d515c73fa90d30afb461b27e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -3465,7 +3465,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_while(*) |\n         ast::expr_loop(*) |\n         ast::expr_assign(*) |\n-        ast::expr_swap(*) |\n         ast::expr_inline_asm(*) |\n         ast::expr_assign_op(*) => {\n             RvalueStmtExpr"}, {"sha": "7c79693a8b2eb1ad09f085cb5152bc7e1fdc813e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -2460,20 +2460,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             fcx.write_nil(id);\n         }\n       }\n-      ast::expr_swap(lhs, rhs) => {\n-        check_assignment(fcx, lhs, rhs, id);\n-        let lhs_ty = fcx.expr_ty(lhs);\n-        let rhs_ty = fcx.expr_ty(rhs);\n-        if ty::type_is_error(lhs_ty) || ty::type_is_error(rhs_ty) {\n-            fcx.write_error(id);\n-        }\n-        else if ty::type_is_bot(lhs_ty) || ty::type_is_bot(rhs_ty) {\n-            fcx.write_bot(id);\n-        }\n-        else {\n-            fcx.write_nil(id);\n-        }\n-      }\n       ast::expr_if(cond, ref thn, elsopt) => {\n         check_expr_has_type(fcx, cond, ty::mk_bool());\n         check_then_else(fcx, thn, elsopt, id, expr.span);"}, {"sha": "55c1f03b330e20469725004844080838d6116cc4", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -1016,7 +1016,6 @@ pub mod guarantor {\n             ast::expr_while(*) |\n             ast::expr_loop(*) |\n             ast::expr_assign(*) |\n-            ast::expr_swap(*) |\n             ast::expr_assign_op(*) |\n             ast::expr_cast(*) |\n             ast::expr_call(*) |"}, {"sha": "836ca1cfa45b5cb072bef1fb2724f63ca9d6fb97", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -96,10 +96,6 @@ fn record(repl: Repl, blk: @ast::blk, intr: @token::ident_interner) -> Repl {\n                         match expr.node {\n                             ast::expr_assign(*) |\n                             ast::expr_assign_op(*) |\n-                            ast::expr_swap(*) => {\n-                                pprust::print_stmt(pp, *stmt);\n-                                writer.write_line(~\"\");\n-                            }\n                             _ => {}\n                         }\n                     }"}, {"sha": "8aa59fd17755974a878dff1f8fa947ed0ef80b16", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -569,7 +569,6 @@ pub enum expr_ {\n \n     expr_copy(@expr),\n     expr_assign(@expr, @expr),\n-    expr_swap(@expr, @expr),\n     expr_assign_op(binop, @expr, @expr),\n     expr_field(@expr, ident, ~[@Ty]),\n     expr_index(@expr, @expr),"}, {"sha": "338b9b29f004aaf3df0492e82849a6ebef734e36", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -511,9 +511,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         expr_assign(el, er) => {\n             expr_assign(fld.fold_expr(el), fld.fold_expr(er))\n         }\n-        expr_swap(el, er) => {\n-            expr_swap(fld.fold_expr(el), fld.fold_expr(er))\n-        }\n         expr_assign_op(op, el, er) => {\n             expr_assign_op(op, fld.fold_expr(el), fld.fold_expr(er))\n         }"}, {"sha": "e9e5bdfe13da59f8d361b6ed9659ea6fe1d74e1d", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -40,6 +40,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteModeInFnType,\n     ObsoleteMoveInit,\n     ObsoleteBinaryMove,\n+    ObsoleteSwap,\n     ObsoleteUnsafeBlock,\n     ObsoleteUnenforcedBound,\n     ObsoleteImplSyntax,\n@@ -129,6 +130,10 @@ pub impl Parser {\n                 \"binary move\",\n                 \"Write `foo = move bar` instead\"\n             ),\n+            ObsoleteSwap => (\n+                \"swap\",\n+                \"Use core::util::{swap, replace} instead\"\n+            ),\n             ObsoleteUnsafeBlock => (\n                 \"non-standalone unsafe block\",\n                 \"use an inner `unsafe { ... }` block instead\""}, {"sha": "5aa45ab3c9bec629e413183b37e90071a5ccbac2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -26,7 +26,7 @@ use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n-use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n+use ast::{expr_ret, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n@@ -70,7 +70,7 @@ use parse::lexer::reader;\n use parse::lexer::TokenAndSpan;\n use parse::obsolete::{ObsoleteClassTraits};\n use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n-use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n+use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove, ObsoleteSwap};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n@@ -1849,9 +1849,11 @@ pub impl Parser {\n                            expr_break(None))\n           }\n           token::DARROW => {\n+            self.obsolete(*self.span, ObsoleteSwap);\n             self.bump();\n-            let rhs = self.parse_expr();\n-            self.mk_expr(lo, rhs.span.hi, expr_swap(lhs, rhs))\n+            // Ignore what we get, this is an error anyway\n+            self.parse_expr();\n+            self.mk_expr(lo, self.span.hi, expr_break(None))\n           }\n           _ => {\n               lhs"}, {"sha": "9d2927eb74f481d42fdcda9e0911a1b234148e51", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -1328,12 +1328,6 @@ pub fn print_expr(s: @ps, expr: @ast::expr) {\n         word_space(s, ~\"=\");\n         print_expr(s, rhs);\n       }\n-      ast::expr_swap(lhs, rhs) => {\n-        print_expr(s, lhs);\n-        space(s.s);\n-        word_space(s, ~\"<->\");\n-        print_expr(s, rhs);\n-      }\n       ast::expr_assign_op(op, lhs, rhs) => {\n         print_expr(s, lhs);\n         space(s.s);"}, {"sha": "dcc94c92a886ddeb9cf0a6f3b513f046a1ff8208", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c7e2f991eaf79ece0586b19f0461ec6f8933ee/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=63c7e2f991eaf79ece0586b19f0461ec6f8933ee", "patch": "@@ -516,10 +516,6 @@ pub fn visit_expr<E: Copy>(ex: @expr, e: E, v: vt<E>) {\n             (v.visit_expr)(a, e, v);\n         }\n         expr_copy(a) => (v.visit_expr)(a, e, v),\n-        expr_swap(a, b) => {\n-            (v.visit_expr)(a, e, v);\n-            (v.visit_expr)(b, e, v);\n-        }\n         expr_assign_op(_, a, b) => {\n             (v.visit_expr)(b, e, v);\n             (v.visit_expr)(a, e, v);"}]}