{"sha": "3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzlkZDBkZDI5M2FiODI5NDVlMzU4ODhlZDZkN2FiODAyNzYxZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T13:31:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T13:31:40Z"}, "message": "Auto merge of #87509 - JohnTitor:rollup-8iqn6cl, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #86450 (Add flag to configure `large_assignments` lint)\n - #86764 (Avoid ICE on type error recovery)\n - #87354 (Update VxWork's UNIX support)\n - #87427 (get rid of NoMirFor error variant)\n - #87446 (macos current_exe using directly libc instead.)\n - #87494 (fix typo: whenver -> whenever)\n - #87497 (Add long explanation for E0544.)\n - #87499 (Remove ASCII fast path from `rustc_lexer::{is_id_continue, is_id_start}`)\n - #87502 (Update cargo)\n - #87503 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "402059c4b8c50e38d886784306f72494a7488771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402059c4b8c50e38d886784306f72494a7488771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "html_url": "https://github.com/rust-lang/rust/commit/3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d6692f6c1cebd6c56a67eb21f6aae26c12a145", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d6692f6c1cebd6c56a67eb21f6aae26c12a145", "html_url": "https://github.com/rust-lang/rust/commit/99d6692f6c1cebd6c56a67eb21f6aae26c12a145"}, {"sha": "af6c95f14ddd146e918b28a710f4d514b5091f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/af6c95f14ddd146e918b28a710f4d514b5091f20", "html_url": "https://github.com/rust-lang/rust/commit/af6c95f14ddd146e918b28a710f4d514b5091f20"}], "stats": {"total": 246, "additions": 187, "deletions": 59}, "files": [{"sha": "bd950310b73743513aa1531601345ad4dd6a79f7", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1880,9 +1880,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.93\"\n+version = \"0.2.98\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9385f66bf6105b241aa65a61cb923ef20efc665cb9f9bb50ac2f0c4b7f378d41\"\n+checksum = \"320cfe77175da3a483efed4bc0adc1968ca050b098ce4f2f1c13a56626128790\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -5409,9 +5409,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-xid\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n+checksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n \n [[package]]\n name = \"unicode_categories\""}, {"sha": "6f65d386f0d1bce29a82ab7c5cddb3fab56b365d", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -287,6 +287,7 @@ E0539: include_str!(\"./error_codes/E0539.md\"),\n E0541: include_str!(\"./error_codes/E0541.md\"),\n E0542: include_str!(\"./error_codes/E0542.md\"),\n E0543: include_str!(\"./error_codes/E0543.md\"),\n+E0544: include_str!(\"./error_codes/E0544.md\"),\n E0545: include_str!(\"./error_codes/E0545.md\"),\n E0546: include_str!(\"./error_codes/E0546.md\"),\n E0547: include_str!(\"./error_codes/E0547.md\"),\n@@ -610,7 +611,6 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n     E0523,\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes\n-    E0544, // multiple stability levels\n //  E0548, // replaced with a generic attribute input check\n //  E0553, // multiple rustc_const_unstable attributes\n //  E0555, // replaced with a generic attribute input check"}, {"sha": "2227e2a06bf92a67818f5cb3cee22187109d1a76", "filename": "compiler/rustc_error_codes/src/error_codes/E0544.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0544.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0544.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0544.md?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -0,0 +1,29 @@\n+Multiple stability attributes were declared on the same item.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0544\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"rust1\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"test\", since = \"2.0.0\")] // invalid\n+fn foo() {}\n+```\n+\n+To fix this issue, ensure that each item has at most one stability attribute.\n+\n+```\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"rust1\")]\n+\n+#[stable(feature = \"test\", since = \"2.0.0\")] // ok!\n+fn foo() {}\n+```\n+\n+See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix\n+of the Book and the [Stability attributes][stability-attributes] section of the\n+Rustc Dev Guide for more details.\n+\n+[how-rust-made-nightly]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+[stability-attributes]: https://rustc-dev-guide.rust-lang.org/stability.html"}, {"sha": "de0d5fb0097f91bfed87d54016651b9382661145", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -735,6 +735,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_opt_level, Some(4));\n+    tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, Some(true));\n     tracked!(new_llvm_pass_manager, Some(true));\n     tracked!(no_generate_arange_section, true);"}, {"sha": "b5e6d256a996a29936827100ae291793bb605dc1", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -273,24 +273,14 @@ pub fn is_whitespace(c: char) -> bool {\n /// a formal definition of valid identifier name.\n pub fn is_id_start(c: char) -> bool {\n     // This is XID_Start OR '_' (which formally is not a XID_Start).\n-    // We also add fast-path for ascii idents\n-    ('a'..='z').contains(&c)\n-        || ('A'..='Z').contains(&c)\n-        || c == '_'\n-        || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n+    c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)\n }\n \n /// True if `c` is valid as a non-first character of an identifier.\n /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for\n /// a formal definition of valid identifier name.\n pub fn is_id_continue(c: char) -> bool {\n-    // This is exactly XID_Continue.\n-    // We also add fast-path for ascii idents\n-    ('a'..='z').contains(&c)\n-        || ('A'..='Z').contains(&c)\n-        || ('0'..='9').contains(&c)\n-        || c == '_'\n-        || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n+    unicode_xid::UnicodeXID::is_xid_continue(c)\n }\n \n /// The passed string is lexically an identifier."}, {"sha": "7ea4902f4bc3922fec77fbab16246ac9616c9715", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -21,7 +21,12 @@ use std::num::IntErrorKind;\n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.limits = |tcx, ()| Limits {\n         recursion_limit: get_recursion_limit(tcx.hir().krate_attrs(), tcx.sess),\n-        move_size_limit: get_limit(tcx.hir().krate_attrs(), tcx.sess, sym::move_size_limit, 0),\n+        move_size_limit: get_limit(\n+            tcx.hir().krate_attrs(),\n+            tcx.sess,\n+            sym::move_size_limit,\n+            tcx.sess.opts.debugging_opts.move_size_limit.unwrap_or(0),\n+        ),\n         type_length_limit: get_limit(\n             tcx.hir().krate_attrs(),\n             tcx.sess,"}, {"sha": "dad23d6255afb02bea6df68af3f8362837924634", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -402,8 +402,6 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-    /// Could not find MIR for a function.\n-    NoMirFor(DefId),\n     /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n     //\n@@ -421,7 +419,6 @@ impl fmt::Display for UnsupportedOpInfo {\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n             ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n-            NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n         }"}, {"sha": "daaf68c1d2bd5bb4c11d1d556e5bfb70be370e75", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -212,7 +212,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else {\n-                    throw_unsup!(NoMirFor(def.did))\n+                    let path = ecx.tcx.def_path_str(def.did);\n+                    Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))\n+                        .into())\n                 }\n             }\n             _ => Ok(ecx.tcx.instance_mir(instance)),\n@@ -247,20 +249,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             }\n         }\n         // This is a const fn. Call it.\n-        Ok(Some(match ecx.load_mir(instance.def, None) {\n-            Ok(body) => body,\n-            Err(err) => {\n-                if let err_unsup!(NoMirFor(did)) = err.kind() {\n-                    let path = ecx.tcx.def_path_str(*did);\n-                    return Err(ConstEvalErrKind::NeedsRfc(format!(\n-                        \"calling extern function `{}`\",\n-                        path\n-                    ))\n-                    .into());\n-                }\n-                return Err(err);\n-            }\n-        }))\n+        Ok(Some(ecx.load_mir(instance.def, None)?))\n     }\n \n     fn call_intrinsic("}, {"sha": "0805d2f0e14449ce68fe58571421c3501d706473", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1148,6 +1148,8 @@ options! {\n         (default: no)\"),\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n+    move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],\n+        \"the size at which the `large_assignments` lint starts to be emitted\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes for LLVM >= 12, otherwise no)\"),\n     new_llvm_pass_manager: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "b82437120ce98ff98965fbabfe27caa6bfc40436", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Constness, GenericArg, GenericArgs};\n-use rustc_middle::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n+use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n@@ -488,12 +488,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 tcx.ty_error().into()\n                             } else {\n                                 // This is a default type parameter.\n+                                let substs = substs.unwrap();\n+                                if substs.iter().any(|arg| match arg.unpack() {\n+                                    GenericArgKind::Type(ty) => ty.references_error(),\n+                                    _ => false,\n+                                }) {\n+                                    // Avoid ICE #86756 when type error recovery goes awry.\n+                                    return tcx.ty_error().into();\n+                                }\n                                 self.astconv\n                                     .normalize_ty(\n                                         self.span,\n                                         tcx.at(self.span).type_of(param.def_id).subst_spanned(\n                                             tcx,\n-                                            substs.unwrap(),\n+                                            substs,\n                                             Some(self.span),\n                                         ),\n                                     )"}, {"sha": "f0c934edf3977b0856671d8d10e5106a2927771a", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -583,7 +583,7 @@ impl<T> Cell<[T]> {\n pub struct RefCell<T: ?Sized> {\n     borrow: Cell<BorrowFlag>,\n     // Stores the location of the earliest currently active borrow.\n-    // This gets updated whenver we go from having zero borrows\n+    // This gets updated whenever we go from having zero borrows\n     // to having a single borrow. When a borrow occurs, this gets included\n     // in the generated `BorrowError/`BorrowMutError`\n     #[cfg(feature = \"debug_refcell\")]"}, {"sha": "8494563bcd977b902b93d03b011a64c68de2dd79", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -16,7 +16,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.93\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.98\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.44\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "cc0802ed709cb6c87ef8edd8380f2f29cc029946", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -350,17 +350,14 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    extern \"C\" {\n-        fn _NSGetExecutablePath(buf: *mut libc::c_char, bufsize: *mut u32) -> libc::c_int;\n-    }\n     unsafe {\n         let mut sz: u32 = 0;\n-        _NSGetExecutablePath(ptr::null_mut(), &mut sz);\n+        libc::_NSGetExecutablePath(ptr::null_mut(), &mut sz);\n         if sz == 0 {\n             return Err(io::Error::last_os_error());\n         }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as usize);\n-        let err = _NSGetExecutablePath(v.as_mut_ptr() as *mut i8, &mut sz);\n+        let err = libc::_NSGetExecutablePath(v.as_mut_ptr() as *mut i8, &mut sz);\n         if err != 0 {\n             return Err(io::Error::last_os_error());\n         }"}, {"sha": "c445acf2722c0dc2fc5d1ea63bc31dbf789f4084", "filename": "library/std/src/sys/unix/os/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos%2Ftests.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1,12 +1,14 @@\n use super::*;\n \n #[test]\n+#[cfg(not(target_os = \"vxworks\"))]\n fn test_glibc_version() {\n     // This mostly just tests that the weak linkage doesn't panic wildly...\n     glibc_version();\n }\n \n #[test]\n+#[cfg(not(target_os = \"vxworks\"))]\n fn test_parse_glibc_version() {\n     let cases = [\n         (\"0.0\", Some((0, 0))),"}, {"sha": "f2f161e4eaa7721dc3d6c4a8f54fba2e5429627e", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -50,7 +50,7 @@ cfg_if::cfg_if! {\n             raw[bit / 8] |= 1 << (bit % 8);\n             return 0;\n         }\n-    } else if #[cfg(not(target_os = \"vxworks\"))] {\n+    } else {\n         pub use libc::{sigemptyset, sigaddset};\n     }\n }"}, {"sha": "a07036f864b37896b31eb996cd7aedb489f69a1f", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit eac55314210519238652f12b30fec9daea61f7fe\n+Subproject commit a07036f864b37896b31eb996cd7aedb489f69a1f"}, {"sha": "3710b0cae783d0bcd2b42452a63b081473f5970a", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit af696ce8ea526445590ae0ca66a8128d2a95a69a\n+Subproject commit 3710b0cae783d0bcd2b42452a63b081473f5970a"}, {"sha": "f51734eb5566c826b471977747ea3d7d6915bbe9", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit 7a13537f96af4b9b8e3ea296d6e5c3c7ab72ce9f\n+Subproject commit f51734eb5566c826b471977747ea3d7d6915bbe9"}, {"sha": "3b7be075af5d6e402a18efff672a8a265b4596fd", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit 82d75cf423e4a7824fb36e73ccb18519d6900610\n+Subproject commit 3b7be075af5d6e402a18efff672a8a265b4596fd"}, {"sha": "0dc9cd4e89f00cb5230f120e1a083916386e422b", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit 1db6bb483cc87ad3b424d9aba764fe622960a1be\n+Subproject commit 0dc9cd4e89f00cb5230f120e1a083916386e422b"}, {"sha": "09343d6f921d2a07c66f8c41ec3d65bf1fa52556", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit 93422c21baca585dc88357ec886a48f6ddc7d665\n+Subproject commit 09343d6f921d2a07c66f8c41ec3d65bf1fa52556"}, {"sha": "88f022af2ecf279040b6d591e4d23dbf9eb0c7a9", "filename": "src/doc/unstable-book/src/compiler-flags/move-size-limit.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -0,0 +1,10 @@\n+# `move_size_limit`\n+\n+--------------------\n+\n+The `-Zmove-size-limit=N` compiler flag enables `large_assignments` lints which\n+will warn when moving objects whose size exceeds `N` bytes.\n+\n+Lint warns only about moves in functions that participate in code generation.\n+Consequently it will be ineffective for compiler invocatation that emit\n+metadata only, i.e., `cargo check` like workflows."}, {"sha": "39b7e7cb345bd6de83246ec052d2a537d40195e7", "filename": "src/test/ui/async-await/large_moves.attribute.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1,5 +1,5 @@\n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:10:13\n+  --> $DIR/large_moves.rs:12:13\n    |\n LL |       let x = async {\n    |  _____________^\n@@ -17,19 +17,19 @@ LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:16:14\n+  --> $DIR/large_moves.rs:18:14\n    |\n LL |     let z = (x, 42);\n    |              ^ value moved from here\n \n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:16:13\n+  --> $DIR/large_moves.rs:18:13\n    |\n LL |     let z = (x, 42);\n    |             ^^^^^^^ value moved from here\n \n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:18:13\n+  --> $DIR/large_moves.rs:20:13\n    |\n LL |     let a = z.0;\n    |             ^^^ value moved from here", "previous_filename": "src/test/ui/async-await/large_moves.stderr"}, {"sha": "39b7e7cb345bd6de83246ec052d2a537d40195e7", "filename": "src/test/ui/async-await/large_moves.option.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -0,0 +1,38 @@\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:12:13\n+   |\n+LL |       let x = async {\n+   |  _____________^\n+LL | |         let y = [0; 9999];\n+LL | |         dbg!(y);\n+LL | |         thing(&y).await;\n+LL | |         dbg!(y);\n+LL | |     };\n+   | |_____^ value moved from here\n+   |\n+note: the lint level is defined here\n+  --> $DIR/large_moves.rs:1:9\n+   |\n+LL | #![deny(large_assignments)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:18:14\n+   |\n+LL |     let z = (x, 42);\n+   |              ^ value moved from here\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:18:13\n+   |\n+LL |     let z = (x, 42);\n+   |             ^^^^^^^ value moved from here\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:20:13\n+   |\n+LL |     let a = z.0;\n+   |             ^^^ value moved from here\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "18bb538a81eb1390014c584aa6a96a4c8b813703", "filename": "src/test/ui/async-await/large_moves.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1,8 +1,10 @@\n #![deny(large_assignments)]\n #![feature(large_assignments)]\n-#![move_size_limit = \"1000\"]\n+#![cfg_attr(attribute, move_size_limit = \"1000\")]\n // build-fail\n // only-x86_64\n+// revisions: attribute option\n+// [option]compile-flags: -Zmove-size-limit=1000\n \n // edition:2018\n "}, {"sha": "7f864eb2850743a4005e10c46ca7bcb8c50a01b3", "filename": "src/test/ui/issues/issue-86756.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fissues%2Fissue-86756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fissues%2Fissue-86756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -0,0 +1,12 @@\n+trait Foo<T, T = T> {}\n+//~^ ERROR the name `T` is already used for a generic parameter in this item's generic parameters\n+\n+fn eq<A, B>() {\n+    eq::<dyn, Foo>\n+    //~^ ERROR cannot find type `dyn` in this scope\n+    //~| ERROR missing generics for trait `Foo`\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+}\n+\n+fn main() {}"}, {"sha": "1ef219867266036d51b80bfdc8101a02e3c6e8ed", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -0,0 +1,46 @@\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/issue-86756.rs:1:14\n+   |\n+LL | trait Foo<T, T = T> {}\n+   |           -  ^ already used\n+   |           |\n+   |           first use of `T`\n+\n+error[E0412]: cannot find type `dyn` in this scope\n+  --> $DIR/issue-86756.rs:5:10\n+   |\n+LL | fn eq<A, B>() {\n+   |           - help: you might be missing a type parameter: `, dyn`\n+LL |     eq::<dyn, Foo>\n+   |          ^^^ not found in this scope\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-86756.rs:5:15\n+   |\n+LL |     eq::<dyn, Foo>\n+   |               ^^^ help: use `dyn`: `dyn Foo`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+error[E0107]: missing generics for trait `Foo`\n+  --> $DIR/issue-86756.rs:5:15\n+   |\n+LL |     eq::<dyn, Foo>\n+   |               ^^^ expected at least 1 generic argument\n+   |\n+note: trait defined here, with at least 1 generic parameter: `T`\n+  --> $DIR/issue-86756.rs:1:7\n+   |\n+LL | trait Foo<T, T = T> {}\n+   |       ^^^ -\n+help: add missing generic argument\n+   |\n+LL |     eq::<dyn, Foo<T>>\n+   |               ^^^^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0107, E0403, E0412.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "4dc68662033bb7f427463a99c0fa6546a6e070b4", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -122,5 +122,5 @@ LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n \n error: aborting due to 19 previous errors\n \n-Some errors have detailed explanations: E0539, E0541, E0542, E0543, E0546, E0547, E0549, E0550.\n+Some errors have detailed explanations: E0539, E0541, E0542, E0543, E0544, E0546, E0547, E0549, E0550.\n For more information about an error, try `rustc --explain E0539`."}, {"sha": "d21c22870e58499d6c31f1bef3bf1255eb021666", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1 +1 @@\n-Subproject commit cebef2951ee69617852844894164b54ed478a7da\n+Subproject commit d21c22870e58499d6c31f1bef3bf1255eb021666"}]}