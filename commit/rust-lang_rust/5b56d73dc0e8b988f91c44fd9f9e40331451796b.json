{"sha": "5b56d73dc0e8b988f91c44fd9f9e40331451796b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTZkNzNkYzBlOGI5ODhmOTFjNDRmZDlmOWU0MDMzMTQ1MTc5NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-03T09:44:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-03T09:44:26Z"}, "message": "Auto merge of #25984 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25939, #25963, #25970, #25971, #25974\n- Failed merges:", "tree": {"sha": "1b625651647a50735437145ba27bff9b3657aefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b625651647a50735437145ba27bff9b3657aefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b56d73dc0e8b988f91c44fd9f9e40331451796b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b56d73dc0e8b988f91c44fd9f9e40331451796b", "html_url": "https://github.com/rust-lang/rust/commit/5b56d73dc0e8b988f91c44fd9f9e40331451796b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b56d73dc0e8b988f91c44fd9f9e40331451796b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5979be9fefe671fa81ec70720234602f8112bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5979be9fefe671fa81ec70720234602f8112bec", "html_url": "https://github.com/rust-lang/rust/commit/a5979be9fefe671fa81ec70720234602f8112bec"}, {"sha": "e490c17eb5d85d6b968d91b2ca93f3607934e78d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e490c17eb5d85d6b968d91b2ca93f3607934e78d", "html_url": "https://github.com/rust-lang/rust/commit/e490c17eb5d85d6b968d91b2ca93f3607934e78d"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "2829f98146261f055b096d42fcb7a2811bc18827", "filename": "configure", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b56d73dc0e8b988f91c44fd9f9e40331451796b/configure", "raw_url": "https://github.com/rust-lang/rust/raw/5b56d73dc0e8b988f91c44fd9f9e40331451796b/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=5b56d73dc0e8b988f91c44fd9f9e40331451796b", "patch": "@@ -582,6 +582,7 @@ valopt sysconfdir \"/etc\" \"install system configuration files\"\n valopt datadir \"${CFG_PREFIX}/share\" \"install data\"\n valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n valopt llvm-root \"\" \"set LLVM root\"\n+valopt python \"\" \"set path to python\"\n valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n@@ -695,7 +696,9 @@ putvar CFG_BOOTSTRAP_KEY\n step_msg \"looking for build programs\"\n \n probe_need CFG_CURLORWGET  curl wget\n-probe_need CFG_PYTHON      python2.7 python2.6 python2 python\n+if [ -z \"$CFG_PYTHON_PROVIDED\" ]; then\n+    probe_need CFG_PYTHON      python2.7 python2.6 python2 python\n+fi\n \n python_version=$($CFG_PYTHON -V 2>&1)\n if [ $(echo $python_version | grep -c '^Python 2\\.[4567]') -ne 1 ]; then\n@@ -849,13 +852,6 @@ then\n     putvar CFG_LOCAL_RUST_ROOT\n fi\n \n-# Force freebsd to build with clang; gcc doesn't like us there\n-if [ $CFG_OSTYPE = unknown-freebsd ]\n-then\n-    step_msg \"on FreeBSD, forcing use of clang\"\n-    CFG_ENABLE_CLANG=1\n-fi\n-\n # Force bitrig to build with clang; gcc doesn't like us there\n if [ $CFG_OSTYPE = unknown-bitrig ]\n then"}, {"sha": "922b67d7cc9c44fc5ea1632908ea57ddfa5ef8e3", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56d73dc0e8b988f91c44fd9f9e40331451796b/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5b56d73dc0e8b988f91c44fd9f9e40331451796b/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=5b56d73dc0e8b988f91c44fd9f9e40331451796b", "patch": "@@ -265,7 +265,7 @@ endef\n $(foreach crate,$(CRATES),$(eval $(call DEF_LIB_DOC,$(crate))))\n \n COMPILER_DOC_TARGETS := $(CRATES:%=doc/%/index.html)\n-ifdef CFG_COMPILER_DOCS\n+ifdef CFG_ENABLE_COMPILER_DOCS\n   DOC_TARGETS += $(COMPILER_DOC_TARGETS)\n else\n   DOC_TARGETS += $(DOC_CRATES:%=doc/%/index.html)"}, {"sha": "ef569a09e21375904194d7a6bdc9e6aa61cda2e0", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b56d73dc0e8b988f91c44fd9f9e40331451796b/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b56d73dc0e8b988f91c44fd9f9e40331451796b/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=5b56d73dc0e8b988f91c44fd9f9e40331451796b", "patch": "@@ -159,7 +159,7 @@ b.x = 10; // error: cannot assign to immutable field `b.x`\n \n [struct]: structs.html\n \n-However, by using `Cell<T>`, you can emulate field-level mutability:\n+However, by using [`Cell<T>`][cell], you can emulate field-level mutability:\n \n ```rust\n use std::cell::Cell;\n@@ -176,4 +176,6 @@ point.y.set(7);\n println!(\"y: {:?}\", point.y);\n ```\n \n+[cell]: ../std/cell/struct.Cell.html\n+\n This will print `y: Cell { value: 7 }`. We\u2019ve successfully updated `y`."}, {"sha": "3ec6307c72f86420481f59fd9badeac245f2ffbf", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b56d73dc0e8b988f91c44fd9f9e40331451796b/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56d73dc0e8b988f91c44fd9f9e40331451796b/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=5b56d73dc0e8b988f91c44fd9f9e40331451796b", "patch": "@@ -18,11 +18,6 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         morestack: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n-            \"-L/usr/local/lib\".to_string(),\n-            \"-L/usr/local/lib/gcc46\".to_string(),\n-            \"-L/usr/local/lib/gcc44\".to_string(),\n-        ),\n \n         .. Default::default()\n     }"}, {"sha": "11982ebc572e5b3dc571d8a0726d7b5d5583ff8b", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b56d73dc0e8b988f91c44fd9f9e40331451796b/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56d73dc0e8b988f91c44fd9f9e40331451796b/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=5b56d73dc0e8b988f91c44fd9f9e40331451796b", "patch": "@@ -139,7 +139,6 @@ pub unsafe fn record_os_managed_stack_bounds(stack_lo: usize, _stack_hi: usize)\n pub unsafe fn record_sp_limit(limit: usize) {\n     return target_record_sp_limit(limit);\n \n-    // x86-64\n     #[cfg(all(target_arch = \"x86_64\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -164,7 +163,6 @@ pub unsafe fn record_sp_limit(limit: usize) {\n         asm!(\"movq $0, %fs:32\" :: \"r\"(limit) :: \"volatile\")\n     }\n \n-    // x86\n     #[cfg(all(target_arch = \"x86\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -182,8 +180,8 @@ pub unsafe fn record_sp_limit(limit: usize) {\n     unsafe fn target_record_sp_limit(_: usize) {\n     }\n \n-    // mips, arm - Some brave soul can port these to inline asm, but it's over\n-    //             my head personally\n+    // mips, arm - The implementations are a bit big for inline asm!\n+    //             They can be found in src/rt/arch/$target_arch/record_sp.S\n     #[cfg(any(target_arch = \"mips\",\n               target_arch = \"mipsel\",\n               all(target_arch = \"arm\", not(target_os = \"ios\"))))]\n@@ -221,7 +219,6 @@ pub unsafe fn record_sp_limit(limit: usize) {\n pub unsafe fn get_sp_limit() -> usize {\n     return target_get_sp_limit();\n \n-    // x86-64\n     #[cfg(all(target_arch = \"x86_64\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -255,7 +252,6 @@ pub unsafe fn get_sp_limit() -> usize {\n         return limit;\n     }\n \n-    // x86\n     #[cfg(all(target_arch = \"x86\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -278,8 +274,8 @@ pub unsafe fn get_sp_limit() -> usize {\n         return 1024;\n     }\n \n-    // mips, arm - Some brave soul can port these to inline asm, but it's over\n-    //             my head personally\n+    // mips, arm - The implementations are a bit big for inline asm!\n+    //             They can be found in src/rt/arch/$target_arch/record_sp.S\n     #[cfg(any(target_arch = \"mips\",\n               target_arch = \"mipsel\",\n               all(target_arch = \"arm\", not(target_os = \"ios\"))))]"}]}