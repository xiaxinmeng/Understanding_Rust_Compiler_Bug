{"sha": "f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NWM4YTk4ZGRjYmUzYWZhNzY5YzgyYTkxOTZhZjBkZDUyNGY2NWE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-11-21T19:34:07Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "Add make tidy fixes", "tree": {"sha": "420f1643c81e43e3f8421ab11019cb8594d6fc34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420f1643c81e43e3f8421ab11019cb8594d6fc34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "html_url": "https://github.com/rust-lang/rust/commit/f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a8c7d4d9f18703cd6b56ff3edffcec799f90d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a8c7d4d9f18703cd6b56ff3edffcec799f90d7", "html_url": "https://github.com/rust-lang/rust/commit/23a8c7d4d9f18703cd6b56ff3edffcec799f90d7"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "8116f7fd245a94185276c2a769023fb103950d72", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -184,7 +184,10 @@ impl<'a> FnLikeNode<'a> {\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n-        if let map::NodeInlinedItem(&InlinedItem { kind: InlinedItemKind::Fn(ref decl), .. }) = self.node {\n+        if let map::NodeInlinedItem(&InlinedItem {\n+            kind: InlinedItemKind::Fn(ref decl),\n+            ..\n+        }) = self.node {\n             return &decl;\n         }\n         self.handle(|i: ItemFnParts<'a>|  &*i.decl,"}, {"sha": "434e34e7003df1fd9a4cbfd20733a395e281af7b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -601,7 +601,7 @@ impl<'ast> Map<'ast> {\n     pub fn get_parent_did(&self, id: NodeId) -> DefId {\n         let parent = self.get_parent(id);\n         match self.find_entry(parent) {\n-            Some(RootInlinedParent(ii)) => ii.def_id, // TODO: is this wrong for items?\n+            Some(RootInlinedParent(ii)) => ii.def_id,\n             _ => self.local_def_id(parent)\n         }\n     }"}, {"sha": "12e7735e4c0df678034e175f26f7811415a43f13", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -165,9 +165,13 @@ pub enum InlinedItemKindRef<'a> {\n }\n \n impl<'a> InlinedItemRef<'a> {\n-    pub fn from_item<'ast: 'a>(def_id: DefId, item: &'a hir::Item, map: &hir_map::Map<'ast>) -> InlinedItemRef<'a> {\n+    pub fn from_item<'ast: 'a>(def_id: DefId,\n+                               item: &'a hir::Item,\n+                               map: &hir_map::Map<'ast>)\n+                               -> InlinedItemRef<'a> {\n         let (body, kind) = match item.node {\n-            hir::ItemFn(ref decl, _, _, _, _, body_id) => (map.expr(body_id), InlinedItemKindRef::Fn(&decl)),\n+            hir::ItemFn(ref decl, _, _, _, _, body_id) =>\n+                (map.expr(body_id), InlinedItemKindRef::Fn(&decl)),\n             hir::ItemConst(ref ty, ref body) => (&**body, InlinedItemKindRef::Const(ty)),\n             _ => bug!(\"InlinedItemRef::from_item wrong kind\")\n         };\n@@ -178,10 +182,15 @@ impl<'a> InlinedItemRef<'a> {\n         }\n     }\n \n-    pub fn from_trait_item(def_id: DefId, item: &'a hir::TraitItem, _map: &hir_map::Map) -> InlinedItemRef<'a> {\n+    pub fn from_trait_item(def_id: DefId,\n+                           item: &'a hir::TraitItem,\n+                           _map: &hir_map::Map)\n+                           -> InlinedItemRef<'a> {\n         let (body, kind) = match item.node {\n             hir::ConstTraitItem(ref ty, Some(ref body)) => (&**body, InlinedItemKindRef::Const(ty)),\n-            hir::ConstTraitItem(_, None) => bug!(\"InlinedItemRef::from_trait_item called for const without body\"),\n+            hir::ConstTraitItem(_, None) => {\n+                bug!(\"InlinedItemRef::from_trait_item called for const without body\")\n+            },\n             _ => bug!(\"InlinedItemRef::from_trait_item wrong kind\")\n         };\n         InlinedItemRef {\n@@ -191,9 +200,13 @@ impl<'a> InlinedItemRef<'a> {\n         }\n     }\n \n-    pub fn from_impl_item<'ast: 'a>(def_id: DefId, item: &'a hir::ImplItem, map: &hir_map::Map<'ast>) -> InlinedItemRef<'a> {\n+    pub fn from_impl_item<'ast: 'a>(def_id: DefId,\n+                                    item: &'a hir::ImplItem,\n+                                    map: &hir_map::Map<'ast>)\n+                                    -> InlinedItemRef<'a> {\n         let (body, kind) = match item.node {\n-            hir::ImplItemKind::Method(ref sig, body_id) => (map.expr(body_id), InlinedItemKindRef::Fn(&sig.decl)),\n+            hir::ImplItemKind::Method(ref sig, body_id) =>\n+                (map.expr(body_id), InlinedItemKindRef::Fn(&sig.decl)),\n             hir::ImplItemKind::Const(ref ty, ref body) => (&**body, InlinedItemKindRef::Const(ty)),\n             _ => bug!(\"InlinedItemRef::from_impl_item wrong kind\")\n         };"}, {"sha": "ed777d58c25aa6ddc2ff5912f132030960639147", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -850,7 +850,8 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, expr:\n     visitor.cx = prev_cx;\n }\n \n-fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, local: &'tcx hir::Local) {\n+fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n+                           local: &'tcx hir::Local) {\n     debug!(\"resolve_local(local.id={:?},local.init={:?})\",\n            local.id,local.init.is_some());\n "}, {"sha": "754bb53c29e55863a31eec190fac7bc129aea10c", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -109,7 +109,8 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         // or the default.\n                         let trait_id = tcx.map.get_parent(node_id);\n                         let trait_id = tcx.map.local_def_id(trait_id);\n-                        let default_value = expr_option.as_ref().map(|expr| (&**expr, tcx.ast_ty_to_prim_ty(ty)));\n+                        let default_value = expr_option.as_ref()\n+                            .map(|expr| (&**expr, tcx.ast_ty_to_prim_ty(ty)));\n                         resolve_trait_associated_const(tcx, def_id, default_value, trait_id, substs)\n                     } else {\n                         // Technically, without knowing anything about the\n@@ -141,7 +142,8 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         let mut used_substs = false;\n         let expr_ty = match tcx.sess.cstore.maybe_get_item_ast(tcx, def_id) {\n-            Some((&InlinedItem { body: ref const_expr, kind: InlinedItemKind::Const(ref ty), .. }, _)) => {\n+            Some((&InlinedItem { body: ref const_expr,\n+                                 kind: InlinedItemKind::Const(ref ty), .. }, _)) => {\n                 Some((&**const_expr, tcx.ast_ty_to_prim_ty(ty)))\n             }\n             _ => None\n@@ -1057,12 +1059,13 @@ fn infer<'a, 'tcx>(i: ConstInt,\n     }\n }\n \n-fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                trait_item_id: DefId,\n-                                                default_value: Option<(&'tcx Expr, Option<ty::Ty<'tcx>>)>,\n-                                                trait_id: DefId,\n-                                                rcvr_substs: &'tcx Substs<'tcx>)\n-                                                -> Option<(&'tcx Expr, Option<ty::Ty<'tcx>>)>\n+fn resolve_trait_associated_const<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    trait_item_id: DefId,\n+    default_value: Option<(&'tcx Expr, Option<ty::Ty<'tcx>>)>,\n+    trait_id: DefId,\n+    rcvr_substs: &'tcx Substs<'tcx>\n+) -> Option<(&'tcx Expr, Option<ty::Ty<'tcx>>)>\n {\n     let trait_ref = ty::Binder(ty::TraitRef::new(trait_id, rcvr_substs));\n     debug!(\"resolve_trait_associated_const: trait_ref={:?}\","}, {"sha": "01e1f4ca1f13ce77e18a1043d02a565912c25e49", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -153,7 +153,10 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n         self.calculate_def_hash(DepNode::HirBody(def_id), true, &mut walk_op);\n     }\n \n-    fn calculate_def_hash<W>(&mut self, dep_node: DepNode<DefId>, hash_bodies: bool, walk_op: &mut W)\n+    fn calculate_def_hash<W>(&mut self,\n+                             dep_node: DepNode<DefId>,\n+                             hash_bodies: bool,\n+                             walk_op: &mut W)\n         where W: for<'v> FnMut(&mut StrictVersionHashVisitor<'v, 'a, 'tcx>)\n     {\n         let mut state = IchHasher::new();"}, {"sha": "3584e6e68fe4c433689874e38afb231478e1d842", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -520,7 +520,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 // We only save the HIR for associated consts with bodies\n                 // (InlinedItemRef::from_trait_item panics otherwise)\n                 let trait_def_id = trait_item.container.id();\n-                Some(self.encode_inlined_item(InlinedItemRef::from_trait_item(trait_def_id, ast_item, &tcx.map)))\n+                Some(self.encode_inlined_item(\n+                    InlinedItemRef::from_trait_item(trait_def_id, ast_item, &tcx.map)\n+                ))\n             } else {\n                 None\n             },\n@@ -591,7 +593,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             predicates: Some(self.encode_predicates(def_id)),\n \n             ast: if ast {\n-                Some(self.encode_inlined_item(InlinedItemRef::from_impl_item(impl_def_id, ast_item, &tcx.map)))\n+                Some(self.encode_inlined_item(\n+                    InlinedItemRef::from_impl_item(impl_def_id, ast_item, &tcx.map)\n+                ))\n             } else {\n                 None\n             },\n@@ -821,7 +825,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ast: match item.node {\n                 hir::ItemConst(..) |\n                 hir::ItemFn(_, _, hir::Constness::Const, ..) => {\n-                    Some(self.encode_inlined_item(InlinedItemRef::from_item(def_id, item, &tcx.map)))\n+                    Some(self.encode_inlined_item(\n+                        InlinedItemRef::from_item(def_id, item, &tcx.map)\n+                    ))\n                 }\n                 _ => None,\n             },"}, {"sha": "6b791e6907ca65f367ff2578774cef64ad6889b0", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -181,7 +181,8 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n     /// Returns true if the call is to a const fn or method.\n     fn handle_const_fn_call(&mut self, _expr: &hir::Expr, def_id: DefId, ret_ty: Ty<'gcx>) -> bool {\n         if let Some(fn_like) = lookup_const_fn_by_id(self.tcx, def_id) {\n-            let qualif = match self.tcx.const_qualif_map.borrow_mut().entry(fn_like.body().node_id()) {\n+            let node_id = fn_like.body().node_id();\n+            let qualif = match self.tcx.const_qualif_map.borrow_mut().entry(node_id) {\n                 Entry::Occupied(entry) => Some(*entry.get()),\n                 _ => None\n             };"}, {"sha": "2540faa98369fd11239232cf1bb2563712f9df85", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75c8a98ddcbe3afa769c82a9196af0dd524f65a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "patch": "@@ -143,7 +143,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                        decl: &hir::FnDecl,\n                        body_id: hir::ExprId) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n-        let mut rcx = RegionCtxt::new(self, RepeatingScope(body_id.node_id()), body_id.node_id(), Subject(fn_id));\n+        let node_id = body_id.node_id();\n+        let mut rcx = RegionCtxt::new(self, RepeatingScope(node_id), node_id, Subject(fn_id));\n \n         if self.err_count_since_creation() == 0 {\n             // regionck assumes typeck succeeded"}]}