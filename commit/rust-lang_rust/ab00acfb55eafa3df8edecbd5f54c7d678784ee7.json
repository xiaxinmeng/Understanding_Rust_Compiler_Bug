{"sha": "ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDBhY2ZiNTVlYWZhM2RmOGVkZWNiZDVmNTRjN2Q2Nzg3ODRlZTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-26T08:59:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-26T08:59:57Z"}, "message": "Add binop impls for TyBool", "tree": {"sha": "9589ca8c0f24248263520a5f90cbdf09dae12a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9589ca8c0f24248263520a5f90cbdf09dae12a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "html_url": "https://github.com/rust-lang/rust/commit/ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab00acfb55eafa3df8edecbd5f54c7d678784ee7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "html_url": "https://github.com/rust-lang/rust/commit/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "3829c0f588a93a71884e4b8a2727c8618b8e96c2", "filename": "mini_core.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab00acfb55eafa3df8edecbd5f54c7d678784ee7/mini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab00acfb55eafa3df8edecbd5f54c7d678784ee7/mini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini_core.rs?ref=ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "patch": "@@ -8,6 +8,7 @@ pub trait Sized {}\n #[lang=\"copy\"]\n pub unsafe trait Copy {}\n \n+unsafe impl Copy for bool {}\n unsafe impl Copy for u8 {}\n unsafe impl Copy for u16 {}\n unsafe impl Copy for u32 {}\n@@ -40,6 +41,30 @@ impl Mul for u8 {\n     }\n }\n \n+#[lang=\"bitor\"]\n+pub trait BitOr<RHS = Self> {\n+    type Output;\n+\n+    #[must_use]\n+    fn bitor(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl BitOr for bool {\n+    type Output = bool;\n+\n+    fn bitor(self, rhs: bool) -> bool {\n+        self | rhs\n+    }\n+}\n+\n+impl<'a> BitOr<bool> for &'a bool {\n+    type Output = bool;\n+\n+    fn bitor(self, rhs: bool) -> bool {\n+        *self | rhs\n+    }\n+}\n+\n #[lang = \"eq\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     fn eq(&self, other: &Rhs) -> bool;"}, {"sha": "23dfab91f15833cfeb71cfacba23e32f72a33963", "filename": "src/base.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab00acfb55eafa3df8edecbd5f54c7d678784ee7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab00acfb55eafa3df8edecbd5f54c7d678784ee7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "patch": "@@ -242,6 +242,9 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                     let rhs = trans_operand(fx, rhs).load_value(fx);\n \n                     let res = match ty.sty {\n+                        TypeVariants::TyBool => {\n+                            trans_bool_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n+                        }\n                         TypeVariants::TyUint(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false, false)\n                         }\n@@ -426,6 +429,33 @@ macro_rules! binop_match {\n     }\n }\n \n+pub fn trans_bool_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n+    let res = binop_match! {\n+        fx, bin_op, false, lhs, rhs, \"bool\";\n+        Add (_) bug;\n+        Sub (_) bug;\n+        Mul (_) bug;\n+        Div (_) bug;\n+        Rem (_) bug;\n+        BitXor (_) bxor;\n+        BitAnd (_) band;\n+        BitOr (_) bor;\n+        Shl (_) bug;\n+        Shr (_) bug;\n+\n+        Eq (_) icmp(Equal);\n+        Lt (_) icmp(UnsignedLessThan);\n+        Le (_) icmp(UnsignedLessThanOrEqual);\n+        Ne (_) icmp(NotEqual);\n+        Ge (_) icmp(UnsignedGreaterThanOrEqual);\n+        Gt (_) icmp(UnsignedGreaterThan);\n+\n+        Offset (_) bug;\n+    };\n+\n+    CValue::ByVal(res, fx.layout_of(ty))\n+}\n+\n pub fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, _checked: bool) -> CValue<'tcx> {\n     let res = binop_match! {\n         fx, bin_op, signed, lhs, rhs, \"int/uint\";"}]}