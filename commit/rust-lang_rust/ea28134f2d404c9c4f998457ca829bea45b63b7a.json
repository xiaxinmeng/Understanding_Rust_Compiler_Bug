{"sha": "ea28134f2d404c9c4f998457ca829bea45b63b7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjgxMzRmMmQ0MDRjOWM0Zjk5ODQ1N2NhODI5YmVhNDViNjNiN2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-03T11:31:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-03T11:31:22Z"}, "message": "Rollup merge of #70696 - jumbatm:extend-issue-69020-test, r=RalfJung\n\nExtend #69020 test to include reversed operand order.\n\nMake sure we still emit if a lint if the generic argument comes first. See https://github.com/rust-lang/rust/pull/70566#issuecomment-607671340.\n\nr? @RalfJung", "tree": {"sha": "4b31d84dac31118a0297022b7de82f9322b3ca9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b31d84dac31118a0297022b7de82f9322b3ca9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea28134f2d404c9c4f998457ca829bea45b63b7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehx6KCRBK7hj4Ov3rIwAAdHIIAJ15jUgQuI7HN1u/es8Q91Wl\nRjANjpCSLmFvWumiWuUxEASSHPvVcCZD/lOO3K8RafhYQfFjLx7dpedtbmBMK7Bt\nRQnEtwGG0Wp4d8P7Cq1FgD9rBrX2Br+REw5tzb4pvUFnRnhzAoeoIOvWZxnnGi1Q\n3ScxYYetGJm1KUMPkzQjf7bYpF3pvJZ0h7rEzHNqeayEXrRvdHFxp3xOkKyt06sN\niWtXyLTfl9hx+iPVS4931WyRWInBCZ2/PjlfMaf1pF+Yc6sI7gQmWKEuLSjlHyec\noPE6SZah6w80hoa0t4NOiXQm6LsmppcjuB4lxH2D7uxjO6kU5WWnfGZPx1P0uZU=\n=10Jp\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b31d84dac31118a0297022b7de82f9322b3ca9a\nparent 424c7939259d8c6c1a914d36011651ac71f73b62\nparent 0399d141b6730b2e3c84c5ed4af87ffd28402376\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585913482 +0200\ncommitter GitHub <noreply@github.com> 1585913482 +0200\n\nRollup merge of #70696 - jumbatm:extend-issue-69020-test, r=RalfJung\n\nExtend #69020 test to include reversed operand order.\n\nMake sure we still emit if a lint if the generic argument comes first. See https://github.com/rust-lang/rust/pull/70566#issuecomment-607671340.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea28134f2d404c9c4f998457ca829bea45b63b7a", "html_url": "https://github.com/rust-lang/rust/commit/ea28134f2d404c9c4f998457ca829bea45b63b7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea28134f2d404c9c4f998457ca829bea45b63b7a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424c7939259d8c6c1a914d36011651ac71f73b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/424c7939259d8c6c1a914d36011651ac71f73b62", "html_url": "https://github.com/rust-lang/rust/commit/424c7939259d8c6c1a914d36011651ac71f73b62"}, {"sha": "0399d141b6730b2e3c84c5ed4af87ffd28402376", "url": "https://api.github.com/repos/rust-lang/rust/commits/0399d141b6730b2e3c84c5ed4af87ffd28402376", "html_url": "https://github.com/rust-lang/rust/commit/0399d141b6730b2e3c84c5ed4af87ffd28402376"}], "stats": {"total": 277, "additions": 184, "deletions": 93}, "files": [{"sha": "510a13ea5b1be0348d5be4d4e921043b315f4c92", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=ea28134f2d404c9c4f998457ca829bea45b63b7a", "patch": "@@ -0,0 +1,54 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n+   |\n+LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n+   |\n+LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n+   |\n+LL |     const DIV_REV: i32 = T::DIV + (1/0);\n+   |                                   ^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n+   |\n+LL |     const OOB_REV: i32 = T::OOB + [1][1];\n+   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "510a13ea5b1be0348d5be4d4e921043b315f4c92", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=ea28134f2d404c9c4f998457ca829bea45b63b7a", "patch": "@@ -0,0 +1,54 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n+   |\n+LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n+   |\n+LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n+   |\n+LL |     const DIV_REV: i32 = T::DIV + (1/0);\n+   |                                   ^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n+   |\n+LL |     const OOB_REV: i32 = T::OOB + [1][1];\n+   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "510a13ea5b1be0348d5be4d4e921043b315f4c92", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=ea28134f2d404c9c4f998457ca829bea45b63b7a", "patch": "@@ -0,0 +1,54 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n+   |\n+LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n+   |\n+LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n+   |\n+LL |     const DIV_REV: i32 = T::DIV + (1/0);\n+   |                                   ^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n+   |\n+LL |     const OOB_REV: i32 = T::OOB + [1][1];\n+   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "850f65ae9d183b9c8a70f874b4c51dcd80fa9182", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.rs", "status": "renamed", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea28134f2d404c9c4f998457ca829bea45b63b7a/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.rs?ref=ea28134f2d404c9c4f998457ca829bea45b63b7a", "patch": "@@ -9,21 +9,40 @@ use std::i32;\n \n pub trait Foo {\n     const NEG: i32;\n+    const NEG_REV: i32;\n+\n     const ADD: i32;\n+    const ADD_REV: i32;\n+\n     const DIV: i32;\n+    const DIV_REV: i32;\n+\n     const OOB: i32;\n+    const OOB_REV: i32;\n }\n \n-// These constants cannot be evaluated already (they depend on `T::N`), so\n-// they can just be linted like normal run-time code.  But codegen works\n-// a bit different in const context, so this test makes sure that we still catch overflow.\n+// These constants cannot be evaluated already (they depend on `T::N`), so they can just be linted\n+// like normal run-time code. But codegen works a bit different in const context, so this test\n+// makes sure that we still catch overflow. Also make sure we emit the same lints if we reverse the\n+// operands (so that the generic operand comes first).\n impl<T: Foo> Foo for Vec<T> {\n     const NEG: i32 = -i32::MIN + T::NEG;\n     //~^ ERROR arithmetic operation will overflow\n+    const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+    //~^ ERROR arithmetic operation will overflow\n+\n     const ADD: i32 = (i32::MAX+1) + T::ADD;\n     //~^ ERROR arithmetic operation will overflow\n+    const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+    //~^ ERROR arithmetic operation will overflow\n+\n     const DIV: i32 = (1/0) + T::DIV;\n     //~^ ERROR operation will panic\n+    const DIV_REV: i32 = T::DIV + (1/0);\n+    //~^ ERROR operation will panic\n+\n     const OOB: i32 = [1][1] + T::OOB;\n     //~^ ERROR operation will panic\n+    const OOB_REV: i32 = T::OOB + [1][1];\n+    //~^ ERROR operation will panic\n }", "previous_filename": "src/test/ui/consts/issue-69020.rs"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.noopt.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/424c7939259d8c6c1a914d36011651ac71f73b62/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/424c7939259d8c6c1a914d36011651ac71f73b62/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr?ref=424c7939259d8c6c1a914d36011651ac71f73b62", "patch": "@@ -1,30 +0,0 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020.rs:21:22\n-   |\n-LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate with overflow\n-   |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n-\n-error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020.rs:23:22\n-   |\n-LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to add with overflow\n-\n-error: this operation will panic at runtime\n-  --> $DIR/issue-69020.rs:25:22\n-   |\n-LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n-\n-error: this operation will panic at runtime\n-  --> $DIR/issue-69020.rs:27:22\n-   |\n-LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.opt.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/424c7939259d8c6c1a914d36011651ac71f73b62/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/424c7939259d8c6c1a914d36011651ac71f73b62/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr?ref=424c7939259d8c6c1a914d36011651ac71f73b62", "patch": "@@ -1,30 +0,0 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020.rs:21:22\n-   |\n-LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate with overflow\n-   |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n-\n-error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020.rs:23:22\n-   |\n-LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to add with overflow\n-\n-error: this operation will panic at runtime\n-  --> $DIR/issue-69020.rs:25:22\n-   |\n-LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n-\n-error: this operation will panic at runtime\n-  --> $DIR/issue-69020.rs:27:22\n-   |\n-LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.opt_with_overflow_checks.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/424c7939259d8c6c1a914d36011651ac71f73b62/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/424c7939259d8c6c1a914d36011651ac71f73b62/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr?ref=424c7939259d8c6c1a914d36011651ac71f73b62", "patch": "@@ -1,30 +0,0 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020.rs:21:22\n-   |\n-LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate with overflow\n-   |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n-\n-error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020.rs:23:22\n-   |\n-LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to add with overflow\n-\n-error: this operation will panic at runtime\n-  --> $DIR/issue-69020.rs:25:22\n-   |\n-LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n-\n-error: this operation will panic at runtime\n-  --> $DIR/issue-69020.rs:27:22\n-   |\n-LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n-error: aborting due to 4 previous errors\n-"}]}