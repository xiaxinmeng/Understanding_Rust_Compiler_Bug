{"sha": "597090ee147b957aae81383ec68b33880b6050da", "node_id": "C_kwDOAAsO6NoAKDU5NzA5MGVlMTQ3Yjk1N2FhZTgxMzgzZWM2OGIzMzg4MGI2MDUwZGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-30T15:23:21Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-08T17:51:56Z"}, "message": "Re-use TypeChecker instead of passing around some of its fields", "tree": {"sha": "e8a971bebad96266a35788574815fd4363d645ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8a971bebad96266a35788574815fd4363d645ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/597090ee147b957aae81383ec68b33880b6050da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/597090ee147b957aae81383ec68b33880b6050da", "html_url": "https://github.com/rust-lang/rust/commit/597090ee147b957aae81383ec68b33880b6050da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/597090ee147b957aae81383ec68b33880b6050da/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "html_url": "https://github.com/rust-lang/rust/commit/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8"}], "stats": {"total": 79, "additions": 31, "deletions": 48}, "files": [{"sha": "696f7c9e00ff78b7f4fb06a94e9109e1ef517cbc", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/597090ee147b957aae81383ec68b33880b6050da/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597090ee147b957aae81383ec68b33880b6050da/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=597090ee147b957aae81383ec68b33880b6050da", "patch": "@@ -1163,16 +1163,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n-        relate_tys::relate_types(\n-            self.infcx,\n-            self.param_env,\n-            a,\n-            v,\n-            b,\n-            locations,\n-            category,\n-            self.borrowck_context,\n-        )\n+        relate_tys::relate_types(self, a, v, b, locations, category)\n     }\n \n     /// Try to relate `sub <: sup`"}, {"sha": "1d1c50e3f59f29cc20ab520b640f8e28f09345b4", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/597090ee147b957aae81383ec68b33880b6050da/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597090ee147b957aae81383ec68b33880b6050da/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=597090ee147b957aae81383ec68b33880b6050da", "patch": "@@ -1,13 +1,13 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n-use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n-use crate::type_check::{BorrowCheckContext, Locations};\n+use crate::type_check::{Locations, TypeChecker};\n \n /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n ///\n@@ -17,38 +17,26 @@ use crate::type_check::{BorrowCheckContext, Locations};\n ///\n /// N.B., the type `a` is permitted to have unresolved inference\n /// variables, but not the type `b`.\n-#[instrument(skip(infcx, param_env, borrowck_context), level = \"debug\")]\n+#[instrument(skip(type_checker), level = \"debug\")]\n pub(super) fn relate_types<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+    type_checker: &mut TypeChecker<'_, 'tcx>,\n     a: Ty<'tcx>,\n     v: ty::Variance,\n     b: Ty<'tcx>,\n     locations: Locations,\n     category: ConstraintCategory,\n-    borrowck_context: &mut BorrowCheckContext<'_, 'tcx>,\n ) -> Fallible<()> {\n     TypeRelating::new(\n-        infcx,\n-        NllTypeRelatingDelegate::new(\n-            infcx,\n-            borrowck_context,\n-            param_env,\n-            locations,\n-            category,\n-            UniverseInfo::relate(a, b),\n-        ),\n+        type_checker.infcx,\n+        NllTypeRelatingDelegate::new(type_checker, locations, category, UniverseInfo::relate(a, b)),\n         v,\n     )\n     .relate(a, b)?;\n     Ok(())\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n-    borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n-\n-    param_env: ty::ParamEnv<'tcx>,\n+    type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n \n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n@@ -63,25 +51,24 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n \n impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n-        infcx: &'me InferCtxt<'me, 'tcx>,\n-        borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n+        type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n-        Self { infcx, borrowck_context, param_env, locations, category, universe_info }\n+        Self { type_checker, locations, category, universe_info }\n     }\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n+        self.type_checker.param_env\n     }\n \n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n-        let universe = self.infcx.create_next_universe();\n-        self.borrowck_context\n+        let universe = self.type_checker.infcx.create_next_universe();\n+        self.type_checker\n+            .borrowck_context\n             .constraints\n             .universe_causes\n             .insert(universe, self.universe_info.clone());\n@@ -90,15 +77,18 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n-        self.infcx.next_nll_region_var(origin)\n+        self.type_checker.infcx.next_nll_region_var(origin)\n     }\n \n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n+        self.type_checker\n+            .borrowck_context\n+            .constraints\n+            .placeholder_region(self.type_checker.infcx, placeholder)\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n-        self.infcx.next_nll_region_var_in_universe(\n+        self.type_checker.infcx.next_nll_region_var_in_universe(\n             NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n         )\n@@ -110,15 +100,17 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         sub: ty::Region<'tcx>,\n         info: ty::VarianceDiagInfo<'tcx>,\n     ) {\n-        let sub = self.borrowck_context.universal_regions.to_region_vid(sub);\n-        let sup = self.borrowck_context.universal_regions.to_region_vid(sup);\n-        self.borrowck_context.constraints.outlives_constraints.push(OutlivesConstraint {\n-            sup,\n-            sub,\n-            locations: self.locations,\n-            category: self.category,\n-            variance_info: info,\n-        });\n+        let sub = self.type_checker.borrowck_context.universal_regions.to_region_vid(sub);\n+        let sup = self.type_checker.borrowck_context.universal_regions.to_region_vid(sup);\n+        self.type_checker.borrowck_context.constraints.outlives_constraints.push(\n+            OutlivesConstraint {\n+                sup,\n+                sub,\n+                locations: self.locations,\n+                category: self.category,\n+                variance_info: info,\n+            },\n+        );\n     }\n \n     // We don't have to worry about the equality of consts during borrow checking"}]}