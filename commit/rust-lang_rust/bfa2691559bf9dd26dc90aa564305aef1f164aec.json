{"sha": "bfa2691559bf9dd26dc90aa564305aef1f164aec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTI2OTE1NTliZjlkZDI2ZGM5MGFhNTY0MzA1YWVmMWYxNjRhZWM=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-03-01T02:51:39Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-03-01T02:51:39Z"}, "message": "Run cargo dev fmt", "tree": {"sha": "a87b3f7d0c4705610e936a7eb5d99816b7ab547f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87b3f7d0c4705610e936a7eb5d99816b7ab547f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa2691559bf9dd26dc90aa564305aef1f164aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa2691559bf9dd26dc90aa564305aef1f164aec", "html_url": "https://github.com/rust-lang/rust/commit/bfa2691559bf9dd26dc90aa564305aef1f164aec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa2691559bf9dd26dc90aa564305aef1f164aec/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028cddb95628252180bf6146b445e146dcdef8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/028cddb95628252180bf6146b445e146dcdef8b2", "html_url": "https://github.com/rust-lang/rust/commit/028cddb95628252180bf6146b445e146dcdef8b2"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "443ccf178961e706ec062e0920b4d8ee515ed9c4", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bfa2691559bf9dd26dc90aa564305aef1f164aec/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa2691559bf9dd26dc90aa564305aef1f164aec/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=bfa2691559bf9dd26dc90aa564305aef1f164aec", "patch": "@@ -422,8 +422,28 @@ fn is_zero(expr: &Expr<'_>) -> bool {\n \n fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     if let Some((cond, body, Some(else_body))) = higher::if_block(&expr) {\n-        if let ExprKind::Block( Block { stmts: [], expr: Some(Expr { kind: ExprKind::Unary(UnOp::UnNeg, else_expr), ..  }), ..  }, _,) = else_body.kind {\n-            if let ExprKind::Block( Block { stmts: [], expr: Some(body), ..  }, _,) = &body.kind {\n+        if let ExprKind::Block(\n+            Block {\n+                stmts: [],\n+                expr:\n+                    Some(Expr {\n+                        kind: ExprKind::Unary(UnOp::UnNeg, else_expr),\n+                        ..\n+                    }),\n+                ..\n+            },\n+            _,\n+        ) = else_body.kind\n+        {\n+            if let ExprKind::Block(\n+                Block {\n+                    stmts: [],\n+                    expr: Some(body),\n+                    ..\n+                },\n+                _,\n+            ) = &body.kind\n+            {\n                 if are_exprs_equal(cx, else_expr, body) {\n                     if is_testing_positive(cx, cond, body) {\n                         span_lint_and_sugg(\n@@ -449,9 +469,28 @@ fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                 }\n             }\n         }\n-        if let ExprKind::Block( Block { stmts: [], expr: Some(Expr { kind: ExprKind::Unary(UnOp::UnNeg, else_expr), ..  }), ..  }, _,) = &body.kind\n+        if let ExprKind::Block(\n+            Block {\n+                stmts: [],\n+                expr:\n+                    Some(Expr {\n+                        kind: ExprKind::Unary(UnOp::UnNeg, else_expr),\n+                        ..\n+                    }),\n+                ..\n+            },\n+            _,\n+        ) = &body.kind\n         {\n-            if let ExprKind::Block( Block { stmts: [], expr: Some(body), ..  }, _,) = &else_body.kind {\n+            if let ExprKind::Block(\n+                Block {\n+                    stmts: [],\n+                    expr: Some(body),\n+                    ..\n+                },\n+                _,\n+            ) = &else_body.kind\n+            {\n                 if are_exprs_equal(cx, else_expr, body) {\n                     if is_testing_negative(cx, cond, body) {\n                         span_lint_and_sugg("}, {"sha": "b0c15e57e40f4ed22c6e19e946cbecae3ab236eb", "filename": "tests/ui/floating_point_abs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfa2691559bf9dd26dc90aa564305aef1f164aec/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa2691559bf9dd26dc90aa564305aef1f164aec/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=bfa2691559bf9dd26dc90aa564305aef1f164aec", "patch": "@@ -2,7 +2,7 @@\n \n struct A {\n     a: f64,\n-    b: f64\n+    b: f64,\n }\n \n fn fake_abs1(num: f64) -> f64 {\n@@ -62,11 +62,10 @@ fn fake_nabs2(num: f64) -> f64 {\n }\n \n fn fake_nabs3(a: A) -> A {\n-    A { a: if a.a >= 0.0 {\n-            -a.a\n-        } else {\n-            a.a\n-        }, b: a.b }\n+    A {\n+        a: if a.a >= 0.0 { -a.a } else { a.a },\n+        b: a.b,\n+    }\n }\n \n fn not_fake_abs1(num: f64) -> f64 {"}]}