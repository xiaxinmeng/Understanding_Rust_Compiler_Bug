{"sha": "12c53752b80a6bb1c0cab735f5e87a765de1ef26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzUzNzUyYjgwYTZiYjFjMGNhYjczNWY1ZTg3YTc2NWRlMWVmMjY=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T13:47:26Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T13:47:26Z"}, "message": "Apply rustfmt", "tree": {"sha": "231db697a4fbaf615d1f51dc6b90ab4dce7e1247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231db697a4fbaf615d1f51dc6b90ab4dce7e1247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c53752b80a6bb1c0cab735f5e87a765de1ef26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c53752b80a6bb1c0cab735f5e87a765de1ef26", "html_url": "https://github.com/rust-lang/rust/commit/12c53752b80a6bb1c0cab735f5e87a765de1ef26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c53752b80a6bb1c0cab735f5e87a765de1ef26/comments", "author": null, "committer": null, "parents": [{"sha": "64d2f8af8e44423edc94f0ac3eb186c66966541b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d2f8af8e44423edc94f0ac3eb186c66966541b", "html_url": "https://github.com/rust-lang/rust/commit/64d2f8af8e44423edc94f0ac3eb186c66966541b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "310e9a2275337bf6b73074a77392e14fbdde7a83", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/12c53752b80a6bb1c0cab735f5e87a765de1ef26/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c53752b80a6bb1c0cab735f5e87a765de1ef26/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=12c53752b80a6bb1c0cab735f5e87a765de1ef26", "patch": "@@ -10,7 +10,8 @@ use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block, walk_ptrs_ty, is_expn_of};\n+use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block, walk_ptrs_ty,\n+            is_expn_of};\n use utils::sugg::Sugg;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -352,10 +353,9 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pats[0].node {\n                 let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n-                if inner.iter().any(|pat| pat.node == PatKind::Wild) &&\n-                    path_str == \"Err\" {\n-                        // `Err(_)` arm found\n-                        if_let_chain! {[\n+                if inner.iter().any(|pat| pat.node == PatKind::Wild) && path_str == \"Err\" {\n+                    // `Err(_)` arm found\n+                    if_let_chain! {[\n                             let ExprBlock(ref block) = arm.body.node,\n                             is_panic_block(cx, block)\n                         ], {\n@@ -364,7 +364,8 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n                                                arm.pats[0].span,\n                                                \"Err(_) will match all errors, maybe not a good idea\",\n                                                arm.pats[0].span,\n-                                               \"to remove this warning, match each error seperately or use unreachable macro\");\n+                                               \"to remove this warning, match each error seperately \\\n+                                                or use unreachable macro\");\n                         }}\n                 }\n             }\n@@ -375,9 +376,13 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n // If the block contains only a `panic!` macro (as expression or statement)\n fn is_panic_block(cx: &LateContext, block: &Block) -> bool {\n     match (&block.expr, block.stmts.len(), block.stmts.first()) {\n-        (&Some(ref exp), 0, _) => is_expn_of(cx, exp.span, \"panic\").is_some() && is_expn_of(cx, exp.span, \"unreachable\").is_none(),\n-        (&None, 1, Some(ref stmt)) => is_expn_of(cx, stmt.span, \"panic\").is_some() && is_expn_of(cx, stmt.span, \"unreachable\").is_none(),\n-        _ => false\n+        (&Some(ref exp), 0, _) => {\n+            is_expn_of(cx, exp.span, \"panic\").is_some() && is_expn_of(cx, exp.span, \"unreachable\").is_none()\n+        },\n+        (&None, 1, Some(ref stmt)) => {\n+            is_expn_of(cx, stmt.span, \"panic\").is_some() && is_expn_of(cx, stmt.span, \"unreachable\").is_none()\n+        },\n+        _ => false,\n     }\n }\n "}]}