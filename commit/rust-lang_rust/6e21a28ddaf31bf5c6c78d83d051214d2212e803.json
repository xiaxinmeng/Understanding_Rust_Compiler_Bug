{"sha": "6e21a28ddaf31bf5c6c78d83d051214d2212e803", "node_id": "C_kwDOAAsO6NoAKDZlMjFhMjhkZGFmMzFiZjVjNmM3OGQ4M2QwNTEyMTRkMjIxMmU4MDM", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T14:31:45Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T15:14:15Z"}, "message": "jsondoclint: More precise `Path` checks", "tree": {"sha": "c648ceaba550cac3b6a349c4be164be29c9e280b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c648ceaba550cac3b6a349c4be164be29c9e280b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e21a28ddaf31bf5c6c78d83d051214d2212e803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e21a28ddaf31bf5c6c78d83d051214d2212e803", "html_url": "https://github.com/rust-lang/rust/commit/6e21a28ddaf31bf5c6c78d83d051214d2212e803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e21a28ddaf31bf5c6c78d83d051214d2212e803/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c751b2bad4a3cb6020462d3769f735762ef5b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c751b2bad4a3cb6020462d3769f735762ef5b3", "html_url": "https://github.com/rust-lang/rust/commit/24c751b2bad4a3cb6020462d3769f735762ef5b3"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "ad8e96a0bd81d850d4d36ae73dc987204a23e8fb", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e21a28ddaf31bf5c6c78d83d051214d2212e803/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e21a28ddaf31bf5c6c78d83d051214d2212e803/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=6e21a28ddaf31bf5c6c78d83d051214d2212e803", "patch": "@@ -114,6 +114,12 @@ impl Kind {\n     pub fn is_variant(self) -> bool {\n         matches!(self, Kind::Variant)\n     }\n+    pub fn is_trait(self) -> bool {\n+        matches!(self, Kind::Trait)\n+    }\n+    pub fn is_struct_enum_union(self) -> bool {\n+        matches!(self, Kind::Struct | Kind::Enum | Kind::Union)\n+    }\n \n     pub fn from_item(i: &Item) -> Self {\n         use Kind::*;"}, {"sha": "3226ea4f334ef8ce77586bd8c2f5c07f090c97ff", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6e21a28ddaf31bf5c6c78d83d051214d2212e803/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e21a28ddaf31bf5c6c78d83d051214d2212e803/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=6e21a28ddaf31bf5c6c78d83d051214d2212e803", "patch": "@@ -30,6 +30,11 @@ pub struct Validator<'a> {\n     missing_ids: HashSet<&'a Id>,\n }\n \n+enum PathKind {\n+    Trait,\n+    StructEnumUnion,\n+}\n+\n impl<'a> Validator<'a> {\n     pub fn new(krate: &'a Crate) -> Self {\n         Self {\n@@ -165,7 +170,7 @@ impl<'a> Validator<'a> {\n     fn check_impl(&mut self, x: &'a Impl) {\n         self.check_generics(&x.generics);\n         if let Some(path) = &x.trait_ {\n-            self.check_path(path); // TODO: Check is trait.\n+            self.check_path(path, PathKind::Trait);\n         }\n         self.check_type(&x.for_);\n         x.items.iter().for_each(|i| self.add_trait_item_id(i));\n@@ -211,7 +216,7 @@ impl<'a> Validator<'a> {\n \n     fn check_type(&mut self, x: &'a Type) {\n         match x {\n-            Type::ResolvedPath(path) => self.check_path(path),\n+            Type::ResolvedPath(path) => self.check_path(path, PathKind::StructEnumUnion),\n             Type::DynTrait(dyn_trait) => self.check_dyn_trait(dyn_trait),\n             Type::Generic(_) => {}\n             Type::Primitive(_) => {}\n@@ -226,7 +231,7 @@ impl<'a> Validator<'a> {\n             Type::QualifiedPath { name: _, args, self_type, trait_ } => {\n                 self.check_generic_args(&**args);\n                 self.check_type(&**self_type);\n-                self.check_path(trait_);\n+                self.check_path(trait_, PathKind::Trait);\n             }\n         }\n     }\n@@ -241,15 +246,18 @@ impl<'a> Validator<'a> {\n     fn check_generic_bound(&mut self, x: &'a GenericBound) {\n         match x {\n             GenericBound::TraitBound { trait_, generic_params, modifier: _ } => {\n-                self.check_path(trait_);\n+                self.check_path(trait_, PathKind::Trait);\n                 generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n             }\n             GenericBound::Outlives(_) => {}\n         }\n     }\n \n-    fn check_path(&mut self, x: &'a Path) {\n-        self.add_id(&x.id); // TODO: What kinds are allowed here.\n+    fn check_path(&mut self, x: &'a Path, kind: PathKind) {\n+        match kind {\n+            PathKind::Trait => self.add_trait_id(&x.id),\n+            PathKind::StructEnumUnion => self.add_struct_enum_union_id(&x.id),\n+        }\n         if let Some(args) = &x.args {\n             self.check_generic_args(&**args);\n         }\n@@ -330,7 +338,7 @@ impl<'a> Validator<'a> {\n \n     fn check_dyn_trait(&mut self, dyn_trait: &'a DynTrait) {\n         for pt in &dyn_trait.traits {\n-            self.check_path(&pt.trait_);\n+            self.check_path(&pt.trait_, PathKind::Trait);\n             pt.generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n         }\n     }\n@@ -340,13 +348,6 @@ impl<'a> Validator<'a> {\n         fp.generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n     }\n \n-    // TODO: Remove\n-    fn add_id(&mut self, id: &'a Id) {\n-        if !self.seen_ids.contains(id) {\n-            self.todo.insert(id);\n-        }\n-    }\n-\n     fn add_id_checked(&mut self, id: &'a Id, valid: fn(Kind) -> bool, expected: &str) {\n         if let Some(kind) = self.kind_of(id) {\n             if valid(kind) {\n@@ -379,6 +380,14 @@ impl<'a> Validator<'a> {\n         self.add_id_checked(id, Kind::is_variant, \"Variant\");\n     }\n \n+    fn add_trait_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, Kind::is_trait, \"Trait\");\n+    }\n+\n+    fn add_struct_enum_union_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, Kind::is_struct_enum_union, \"Struct or Enum or Union\");\n+    }\n+\n     /// Add an Id that appeared in a trait\n     fn add_trait_item_id(&mut self, id: &'a Id) {\n         self.add_id_checked(id, Kind::can_appear_in_trait, \"Trait inner item\");"}]}