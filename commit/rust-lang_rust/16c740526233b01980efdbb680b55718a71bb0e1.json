{"sha": "16c740526233b01980efdbb680b55718a71bb0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Yzc0MDUyNjIzM2IwMTk4MGVmZGJiNjgwYjU1NzE4YTcxYmIwZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-13T22:42:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-14T06:03:43Z"}, "message": "expand to syntax node", "tree": {"sha": "f68886b41ccc4134ad0dc038ed88005be50eee8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f68886b41ccc4134ad0dc038ed88005be50eee8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c740526233b01980efdbb680b55718a71bb0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c740526233b01980efdbb680b55718a71bb0e1", "html_url": "https://github.com/rust-lang/rust/commit/16c740526233b01980efdbb680b55718a71bb0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c740526233b01980efdbb680b55718a71bb0e1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101b3abfd70cc988b24f30a610d46a3986df54d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/101b3abfd70cc988b24f30a610d46a3986df54d3", "html_url": "https://github.com/rust-lang/rust/commit/101b3abfd70cc988b24f30a610d46a3986df54d3"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "8e827d4f508640720e8a0e2038a56311a0b5d437", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=16c740526233b01980efdbb680b55718a71bb0e1", "patch": "@@ -1,6 +1,6 @@\n use std::sync::{Arc, Mutex};\n \n-use ra_syntax::{SyntaxNode, TreeArc, SourceFile, SmolStr, ast};\n+use ra_syntax::{SyntaxNode, TreeArc, SmolStr, ast};\n use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n@@ -54,8 +54,8 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::ids::macro_expand_query)]\n     fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n \n-    #[salsa::invoke(crate::ids::HirFileId::hir_parse_query)]\n-    fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n+    #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n+    fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n \n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;"}, {"sha": "4b7b2dbee7fa2c7b1ce2e108342608d86f8e4e78", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=16c740526233b01980efdbb680b55718a71bb0e1", "patch": "@@ -1,6 +1,6 @@\n use std::{fmt, any::Any};\n \n-use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode, AstNode};\n+use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode};\n use relative_path::RelativePathBuf;\n \n use crate::{HirFileId, HirDatabase, Name};\n@@ -29,8 +29,8 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n \n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl HirDatabase) -> TreeArc<SyntaxNode> {\n-        let source_file = db.hir_parse(self.file());\n-        self.syntax_node_ptr().to_node(source_file.syntax()).to_owned()\n+        let node = db.parse_or_expand(self.file()).unwrap();\n+        self.syntax_node_ptr().to_node(&*node).to_owned()\n     }\n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n         self.as_any().downcast_ref()"}, {"sha": "659b21f7234a8a4292a91868e6dbd147f5369411", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=16c740526233b01980efdbb680b55718a71bb0e1", "patch": "@@ -4,7 +4,7 @@ use std::{\n };\n \n use ra_db::{FileId, salsa};\n-use ra_syntax::{TreeArc, SourceFile, AstNode, ast};\n+use ra_syntax::{TreeArc, AstNode, ast, SyntaxNode};\n use mbe::MacroRules;\n \n use crate::{\n@@ -56,17 +56,17 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn hir_parse_query(\n+    pub(crate) fn parse_or_expand_query(\n         db: &impl DefDatabase,\n         file_id: HirFileId,\n-    ) -> TreeArc<SourceFile> {\n+    ) -> Option<TreeArc<SyntaxNode>> {\n         match file_id.0 {\n-            HirFileIdRepr::File(file_id) => db.parse(file_id),\n+            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).syntax().to_owned()),\n             HirFileIdRepr::Macro(macro_file) => {\n                 let macro_call_id = macro_file.macro_call_id;\n-                let tt = match db.macro_expand(macro_call_id) {\n-                    Ok(it) => it,\n-                    Err(err) => {\n+                let tt = db\n+                    .macro_expand(macro_call_id)\n+                    .map_err(|err| {\n                         // Note:\n                         // The final goal we would like to make all parse_macro success,\n                         // such that the following log will not call anyway.\n@@ -75,12 +75,12 @@ impl HirFileId {\n                             err,\n                             macro_call_id.debug_dump(db)\n                         );\n-                        // returning an empty string looks fishy...\n-                        return SourceFile::parse(\"\");\n-                    }\n-                };\n+                    })\n+                    .ok()?;\n                 match macro_file.macro_file_kind {\n-                    MacroFileKind::Items => mbe::token_tree_to_ast_item_list(&tt),\n+                    MacroFileKind::Items => {\n+                        Some(mbe::token_tree_to_ast_item_list(&tt).syntax().to_owned())\n+                    }\n                 }\n             }\n         }"}, {"sha": "bd32b264be19f40196331ca1e2f5ae6ac0e3299e", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=16c740526233b01980efdbb680b55718a71bb0e1", "patch": "@@ -75,8 +75,11 @@ impl RawItems {\n             source_ast_id_map: db.ast_id_map(file_id.into()),\n             source_map: ImportSourceMap::default(),\n         };\n-        let source_file = db.hir_parse(file_id);\n-        collector.process_module(None, &*source_file);\n+        if let Some(node) = db.parse_or_expand(file_id) {\n+            if let Some(source_file) = ast::SourceFile::cast(&node) {\n+                collector.process_module(None, &*source_file);\n+            }\n+        }\n         (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n     }\n "}, {"sha": "13f548eaf1c2bc0e635345a2db74b588e183a0b1", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=16c740526233b01980efdbb680b55718a71bb0e1", "patch": "@@ -81,24 +81,28 @@ pub struct ErasedFileAstId(RawId);\n impl_arena_id!(ErasedFileAstId);\n \n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Default)]\n pub struct AstIdMap {\n     arena: Arena<ErasedFileAstId, SyntaxNodePtr>,\n }\n \n impl AstIdMap {\n     pub(crate) fn ast_id_map_query(db: &impl DefDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n-        let source_file = db.hir_parse(file_id);\n-        Arc::new(AstIdMap::from_source(source_file.syntax()))\n+        let map = if let Some(node) = db.parse_or_expand(file_id) {\n+            AstIdMap::from_source(&*node)\n+        } else {\n+            AstIdMap::default()\n+        };\n+        Arc::new(map)\n     }\n \n     pub(crate) fn file_item_query(\n         db: &impl DefDatabase,\n         file_id: HirFileId,\n         ast_id: ErasedFileAstId,\n     ) -> TreeArc<SyntaxNode> {\n-        let source_file = db.hir_parse(file_id);\n-        db.ast_id_map(file_id).arena[ast_id].to_node(source_file.syntax()).to_owned()\n+        let node = db.parse_or_expand(file_id).unwrap();\n+        db.ast_id_map(file_id).arena[ast_id].to_node(&*node).to_owned()\n     }\n \n     pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {"}, {"sha": "2434f428f6bed12d98746b770ae4a9732c04906d", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c740526233b01980efdbb680b55718a71bb0e1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=16c740526233b01980efdbb680b55718a71bb0e1", "patch": "@@ -222,7 +222,7 @@ impl RootDatabase {\n \n         self.query(ra_db::ParseQuery).sweep(sweep);\n \n-        self.query(hir::db::HirParseQuery).sweep(sweep);\n+        self.query(hir::db::ParseOrExpandQuery).sweep(sweep);\n         self.query(hir::db::AstIdMapQuery).sweep(sweep);\n         self.query(hir::db::AstIdToNodeQuery).sweep(sweep);\n "}]}