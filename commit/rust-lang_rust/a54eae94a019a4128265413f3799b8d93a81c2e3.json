{"sha": "a54eae94a019a4128265413f3799b8d93a81c2e3", "node_id": "C_kwDOAAsO6NoAKGE1NGVhZTk0YTAxOWE0MTI4MjY1NDEzZjM3OTliOGQ5M2E4MWMyZTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-21T08:55:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-21T08:55:16Z"}, "message": "Rollup merge of #91098 - compiler-errors:issue-91058, r=estebank\n\nDon't suggest certain fixups (`.field`, `.await`, etc) when reporting errors while matching on arrays\n\nWhen we have a type mismatch with a `cause.code` that is an `ObligationCauseCode::Pattern`, skip suggesting fixes like adding `.await` or accessing a struct's `.field` if the pattern's `root_ty` differs from the `expected` ty. This occurs in situations like this:\n\n```rust\nstruct S(());\n\nfn main() {\n    let array = [S(())];\n\n    match array {\n        [()] => {}\n        _ => {}\n    }\n}\n```\n\nI think what's happening here is a layer of `[_; N]` is peeled off of both types and we end up seeing the mismatch between just `S` and `()`, but when we suggest a fixup, that applies to the expression with type `root_ty`.\n\n---\n\nQuestions:\n1. Should this check live here, above all of the suggestions, or should I push this down into every suggestion when we match `ObligationCauseCode`?\n2. Any other `ObligationCauseCode`s to check here?\n3. Am I overlooking an easier way to get to this same conclusion without pattern matching on `ObligationCauseCode` and comparing `root_ty`?\n\nFixes #91058", "tree": {"sha": "36dcdf00f3b274fcaa32a36afeb30af58af07cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36dcdf00f3b274fcaa32a36afeb30af58af07cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a54eae94a019a4128265413f3799b8d93a81c2e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmgl0CRBK7hj4Ov3rIwAAW18IABOsVVAmwLDC6kY4SPgVUMb6\nvrp4sku8wjxxMbBS/JKaYhf85VU9s9MpR6TfdCMx5dMA5TwZ1D9kOnyRPB7EG4e1\nWhNnRAArKaV0ojXqSl0mldDbFin9T7Wy/QlT7ot0LMRLRRmUydPvoKkjaomZMfHG\n4ljHoyWrfctjHDeZlo4dqFe5npUiHggIe2LLfzzLPkSCoHyO7IkaJvTqBx+trce0\nn9NF5nZvaReAguv9EXQgavpe469XOmBtENWaX6VhGJd3m1ZSKuc7ud5RzBbGILTC\nUao5oKH8xBptA6s6gDndTGSfm8Yz27BjQNjLAWE9XLiXambrD8BBEmP1xHQsgN4=\n=neN2\n-----END PGP SIGNATURE-----\n", "payload": "tree 36dcdf00f3b274fcaa32a36afeb30af58af07cc6\nparent 3eb30b8e7faa436e0dfc673f2642b8ebad45a519\nparent 01b24045faebc1d0d9f42f355e536df6fc693e49\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637484916 +0100\ncommitter GitHub <noreply@github.com> 1637484916 +0100\n\nRollup merge of #91098 - compiler-errors:issue-91058, r=estebank\n\nDon't suggest certain fixups (`.field`, `.await`, etc) when reporting errors while matching on arrays\n\nWhen we have a type mismatch with a `cause.code` that is an `ObligationCauseCode::Pattern`, skip suggesting fixes like adding `.await` or accessing a struct's `.field` if the pattern's `root_ty` differs from the `expected` ty. This occurs in situations like this:\n\n```rust\nstruct S(());\n\nfn main() {\n    let array = [S(())];\n\n    match array {\n        [()] => {}\n        _ => {}\n    }\n}\n```\n\nI think what's happening here is a layer of `[_; N]` is peeled off of both types and we end up seeing the mismatch between just `S` and `()`, but when we suggest a fixup, that applies to the expression with type `root_ty`.\n\n---\n\nQuestions:\n1. Should this check live here, above all of the suggestions, or should I push this down into every suggestion when we match `ObligationCauseCode`?\n2. Any other `ObligationCauseCode`s to check here?\n3. Am I overlooking an easier way to get to this same conclusion without pattern matching on `ObligationCauseCode` and comparing `root_ty`?\n\nFixes #91058\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a54eae94a019a4128265413f3799b8d93a81c2e3", "html_url": "https://github.com/rust-lang/rust/commit/a54eae94a019a4128265413f3799b8d93a81c2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a54eae94a019a4128265413f3799b8d93a81c2e3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "html_url": "https://github.com/rust-lang/rust/commit/3eb30b8e7faa436e0dfc673f2642b8ebad45a519"}, {"sha": "01b24045faebc1d0d9f42f355e536df6fc693e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b24045faebc1d0d9f42f355e536df6fc693e49", "html_url": "https://github.com/rust-lang/rust/commit/01b24045faebc1d0d9f42f355e536df6fc693e49"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "e32906b75338e8a574aec3a7a16c0124543c9405", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a54eae94a019a4128265413f3799b8d93a81c2e3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54eae94a019a4128265413f3799b8d93a81c2e3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a54eae94a019a4128265413f3799b8d93a81c2e3", "patch": "@@ -1695,11 +1695,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             _ => exp_found,\n         };\n-        debug!(\"exp_found {:?} terr {:?}\", exp_found, terr);\n+        debug!(\"exp_found {:?} terr {:?} cause.code {:?}\", exp_found, terr, cause.code);\n         if let Some(exp_found) = exp_found {\n-            self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n-            self.suggest_accessing_field_where_appropriate(cause, &exp_found, diag);\n-            self.suggest_await_on_expect_found(cause, span, &exp_found, diag);\n+            let should_suggest_fixes = if let ObligationCauseCode::Pattern { root_ty, .. } =\n+                &cause.code\n+            {\n+                // Skip if the root_ty of the pattern is not the same as the expected_ty.\n+                // If these types aren't equal then we've probably peeled off a layer of arrays.\n+                same_type_modulo_infer(self.resolve_vars_if_possible(*root_ty), exp_found.expected)\n+            } else {\n+                true\n+            };\n+\n+            if should_suggest_fixes {\n+                self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n+                self.suggest_accessing_field_where_appropriate(cause, &exp_found, diag);\n+                self.suggest_await_on_expect_found(cause, span, &exp_found, diag);\n+            }\n         }\n \n         // In some (most?) cases cause.body_id points to actual body, but in some cases\n@@ -1879,7 +1891,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .iter()\n                 .filter(|field| field.vis.is_accessible_from(field.did, self.tcx))\n                 .map(|field| (field.ident.name, field.ty(self.tcx, expected_substs)))\n-                .find(|(_, ty)| ty::TyS::same_type(ty, exp_found.found))\n+                .find(|(_, ty)| same_type_modulo_infer(ty, exp_found.found))\n             {\n                 if let ObligationCauseCode::Pattern { span: Some(span), .. } = cause.code {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n@@ -1944,7 +1956,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         | (_, ty::Infer(_))\n                                         | (ty::Param(_), _)\n                                         | (ty::Infer(_), _) => {}\n-                                        _ if ty::TyS::same_type(exp_ty, found_ty) => {}\n+                                        _ if same_type_modulo_infer(exp_ty, found_ty) => {}\n                                         _ => show_suggestion = false,\n                                     };\n                                 }"}, {"sha": "d1bc279c7589a6c5eb5bd2b126fb33ef84a0ef8c", "filename": "src/test/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a54eae94a019a4128265413f3799b8d93a81c2e3/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54eae94a019a4128265413f3799b8d93a81c2e3/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=a54eae94a019a4128265413f3799b8d93a81c2e3", "patch": "@@ -8,6 +8,10 @@ LL |         Either::Right(_) => {}\n    |\n    = note: expected struct `S`\n                 found enum `Either<_, _>`\n+help: you might have meant to use field `0` whose type is `Either<usize, usize>`\n+   |\n+LL |     match S(Either::Left(5)).0 {\n+   |           ~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "4845937d5440177962982d4131d3ef4e89a752c1", "filename": "src/test/ui/match/issue-91058.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a54eae94a019a4128265413f3799b8d93a81c2e3/src%2Ftest%2Fui%2Fmatch%2Fissue-91058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54eae94a019a4128265413f3799b8d93a81c2e3/src%2Ftest%2Fui%2Fmatch%2Fissue-91058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-91058.rs?ref=a54eae94a019a4128265413f3799b8d93a81c2e3", "patch": "@@ -0,0 +1,11 @@\n+struct S(());\n+\n+fn main() {\n+    let array = [S(())];\n+\n+    match array {\n+        [()] => {}\n+        //~^ ERROR mismatched types [E0308]\n+        _ => {}\n+    }\n+}"}, {"sha": "ec1d7e21fa53caa66ac159618bcb8a93ef214d96", "filename": "src/test/ui/match/issue-91058.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a54eae94a019a4128265413f3799b8d93a81c2e3/src%2Ftest%2Fui%2Fmatch%2Fissue-91058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54eae94a019a4128265413f3799b8d93a81c2e3/src%2Ftest%2Fui%2Fmatch%2Fissue-91058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-91058.stderr?ref=a54eae94a019a4128265413f3799b8d93a81c2e3", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-91058.rs:7:10\n+   |\n+LL |     match array {\n+   |           ----- this expression has type `[S; 1]`\n+LL |         [()] => {}\n+   |          ^^ expected struct `S`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}