{"sha": "5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNjhhYjE2ZTE0Njc5ZTE2YTQ3MmMwYWIxM2IxYmJjMzJkYzk1ZjM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T12:09:20Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T21:59:37Z"}, "message": "Add rustdocs and use better names", "tree": {"sha": "79660cf0166a55c5abd97d95284224cc3772cf0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79660cf0166a55c5abd97d95284224cc3772cf0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "html_url": "https://github.com/rust-lang/rust/commit/5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "html_url": "https://github.com/rust-lang/rust/commit/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c"}], "stats": {"total": 104, "additions": 64, "deletions": 40}, "files": [{"sha": "7caee8df04c464d70c9fab6f80ad50531f73e1a3", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "patch": "@@ -1,7 +1,7 @@\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::{insert_use, ImportScope},\n-    mod_path_to_ast,\n+    item_name, mod_path_to_ast,\n };\n use syntax::{ast, AstNode, SyntaxNode};\n \n@@ -93,7 +93,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let group = import_group_message(import_assets.import_candidate());\n     let scope = ImportScope::find_insert_use_container(&syntax_under_caret, &ctx.sema)?;\n     for import in proposed_imports {\n-        let name = match import.original_item_name(ctx.db()) {\n+        let name = match item_name(ctx.db(), import.original_item) {\n             Some(name) => name,\n             None => continue,\n         };\n@@ -130,10 +130,10 @@ fn import_group_message(import_candidate: &ImportCandidate) -> GroupLabel {\n     let name = match import_candidate {\n         ImportCandidate::Path(candidate) => format!(\"Import {}\", candidate.name.text()),\n         ImportCandidate::TraitAssocItem(candidate) => {\n-            format!(\"Import a trait for item {}\", candidate.name.text())\n+            format!(\"Import a trait for item {}\", candidate.assoc_item_name.text())\n         }\n         ImportCandidate::TraitMethod(candidate) => {\n-            format!(\"Import a trait for method {}\", candidate.name.text())\n+            format!(\"Import a trait for method {}\", candidate.assoc_item_name.text())\n         }\n     };\n     GroupLabel(name)"}, {"sha": "272874ae390a1d3539899f10f34b692476ccded5", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "patch": "@@ -2,8 +2,8 @@ use std::iter;\n \n use hir::AsAssocItem;\n use ide_db::helpers::{\n-    import_assets::{ImportCandidate, LocatedImport, Qualifier},\n-    mod_path_to_ast,\n+    import_assets::{ImportCandidate, LocatedImport},\n+    item_name, mod_path_to_ast,\n };\n use ide_db::RootDatabase;\n use syntax::{\n@@ -48,7 +48,7 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let qualify_candidate = match candidate {\n         ImportCandidate::Path(candidate) => {\n-            if !matches!(candidate.qualifier, Qualifier::Absent) {\n+            if candidate.qualifier.is_some() {\n                 cov_mark::hit!(qualify_path_qualifier_start);\n                 let path = ast::Path::cast(syntax_under_caret)?;\n                 let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n@@ -191,20 +191,22 @@ fn item_as_trait(db: &RootDatabase, item: hir::ItemInNs) -> Option<hir::Trait> {\n fn group_label(candidate: &ImportCandidate) -> GroupLabel {\n     let name = match candidate {\n         ImportCandidate::Path(it) => &it.name,\n-        ImportCandidate::TraitAssocItem(it) | ImportCandidate::TraitMethod(it) => &it.name,\n+        ImportCandidate::TraitAssocItem(it) | ImportCandidate::TraitMethod(it) => {\n+            &it.assoc_item_name\n+        }\n     }\n     .text();\n     GroupLabel(format!(\"Qualify {}\", name))\n }\n \n fn label(db: &RootDatabase, candidate: &ImportCandidate, import: &LocatedImport) -> String {\n-    let display_path = match import.original_item_name(db) {\n+    let display_path = match item_name(db, import.original_item) {\n         Some(display_path) => display_path.to_string(),\n         None => \"{unknown}\".to_string(),\n     };\n     match candidate {\n         ImportCandidate::Path(candidate) => {\n-            if !matches!(candidate.qualifier, Qualifier::Absent) {\n+            if candidate.qualifier.is_some() {\n                 format!(\"Qualify with `{}`\", display_path)\n             } else {\n                 format!(\"Qualify as `{}`\", display_path)"}, {"sha": "3d9df463dac3b99f1c9eaafa6a1c9a7755c1efc2", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 52, "deletions": 30, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5168ab16e14679e16a472c0ab13b1bbc32dc95f3/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "patch": "@@ -1,7 +1,7 @@\n //! Look up accessible paths for items.\n use hir::{\n     AsAssocItem, AssocItem, AssocItemContainer, Crate, ItemInNs, MacroDef, ModPath, Module,\n-    ModuleDef, Name, PathResolution, PrefixKind, ScopeDef, Semantics, Type,\n+    ModuleDef, PathResolution, PrefixKind, ScopeDef, Semantics, Type,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -14,11 +14,16 @@ use crate::{\n \n use super::item_name;\n \n+/// A candidate for import, derived during various IDE activities:\n+/// * completion with imports on the fly proposals\n+/// * completion edit resolve requests\n+/// * assists\n+/// * etc.\n #[derive(Debug)]\n pub enum ImportCandidate {\n-    // A path, qualified (`std::collections::HashMap`) or not (`HashMap`).\n+    /// A path, qualified (`std::collections::HashMap`) or not (`HashMap`).\n     Path(PathImportCandidate),\n-    /// A trait associated function (with no self parameter) or associated constant.\n+    /// A trait associated function (with no self parameter) or an associated constant.\n     /// For 'test_mod::TestEnum::test_function', `ty` is the `test_mod::TestEnum` expression type\n     /// and `name` is the `test_function`\n     TraitAssocItem(TraitImportCandidate),\n@@ -28,27 +33,40 @@ pub enum ImportCandidate {\n     TraitMethod(TraitImportCandidate),\n }\n \n+/// A trait import needed for a given associated item access.\n+/// For `some::path::SomeStruct::ASSOC_`, contains the\n+/// type of `some::path::SomeStruct` and `ASSOC_` as the item name.\n #[derive(Debug)]\n pub struct TraitImportCandidate {\n+    /// A type of the item that has the associated item accessed at.\n     pub receiver_ty: Type,\n-    pub name: NameToImport,\n+    /// The associated item name that the trait to import should contain.\n+    pub assoc_item_name: NameToImport,\n }\n \n+/// Path import for a given name, qualified or not.\n #[derive(Debug)]\n pub struct PathImportCandidate {\n-    pub qualifier: Qualifier,\n+    /// Optional qualifier before name.\n+    pub qualifier: Option<FirstSegmentUnresolved>,\n+    /// The name the item (struct, trait, enum, etc.) should have.\n     pub name: NameToImport,\n }\n \n+/// A qualifier that has a first segment and it's unresolved.\n #[derive(Debug)]\n-pub enum Qualifier {\n-    Absent,\n-    FirstSegmentUnresolved(ast::NameRef, ModPath),\n+pub struct FirstSegmentUnresolved {\n+    fist_segment: ast::NameRef,\n+    full_qualifier: ModPath,\n }\n \n+/// A name that will be used during item lookups.\n #[derive(Debug)]\n pub enum NameToImport {\n+    /// Requires items with names that exactly match the given string, case-sensitive.\n     Exact(String),\n+    /// Requires items with names that case-insensitively contain all letters from the string,\n+    /// in the same order, but not necessary adjacent.\n     Fuzzy(String),\n }\n \n@@ -61,6 +79,7 @@ impl NameToImport {\n     }\n }\n \n+/// A struct to find imports in the project, given a certain name (or its part) and the context.\n #[derive(Debug)]\n pub struct ImportAssets {\n     import_candidate: ImportCandidate,\n@@ -119,19 +138,30 @@ impl ImportAssets {\n         Some(Self {\n             import_candidate: ImportCandidate::TraitMethod(TraitImportCandidate {\n                 receiver_ty,\n-                name: NameToImport::Fuzzy(fuzzy_method_name),\n+                assoc_item_name: NameToImport::Fuzzy(fuzzy_method_name),\n             }),\n             module_with_candidate: module_with_method_call,\n             candidate_node,\n         })\n     }\n }\n \n+/// An import (not necessary the only one) that corresponds a certain given [`PathImportCandidate`].\n+/// (the structure is not entirely correct, since there can be situations requiring two imports, see FIXME below for the details)\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LocatedImport {\n+    /// The path to use in the `use` statement for a given candidate to be imported.\n     pub import_path: ModPath,\n+    /// An item that will be imported with the import path given.\n     pub item_to_import: ItemInNs,\n+    /// The path import candidate, resolved.\n+    ///\n+    /// Not necessary matches the import:\n+    /// For any associated constant from the trait, we try to access as `some::path::SomeStruct::ASSOC_`\n+    /// the original item is the associated constant, but the import has to be a trait that\n+    /// defines this constant.\n     pub original_item: ItemInNs,\n+    /// A path of the original item.\n     pub original_path: Option<ModPath>,\n }\n \n@@ -144,15 +174,6 @@ impl LocatedImport {\n     ) -> Self {\n         Self { import_path, item_to_import, original_item, original_path }\n     }\n-\n-    pub fn original_item_name(&self, db: &RootDatabase) -> Option<Name> {\n-        match self.original_item {\n-            ItemInNs::Types(module_def_id) | ItemInNs::Values(module_def_id) => {\n-                ModuleDef::from(module_def_id).name(db)\n-            }\n-            ItemInNs::Macros(macro_def_id) => MacroDef::from(macro_def_id).name(db),\n-        }\n-    }\n }\n \n impl ImportAssets {\n@@ -229,7 +250,7 @@ impl ImportAssets {\n         match &self.import_candidate {\n             ImportCandidate::Path(candidate) => &candidate.name,\n             ImportCandidate::TraitAssocItem(candidate)\n-            | ImportCandidate::TraitMethod(candidate) => &candidate.name,\n+            | ImportCandidate::TraitMethod(candidate) => &candidate.assoc_item_name,\n         }\n     }\n \n@@ -279,17 +300,18 @@ fn path_applicable_imports(\n     let _p = profile::span(\"import_assets::path_applicable_imports\");\n \n     let (unresolved_first_segment, unresolved_qualifier) = match &path_candidate.qualifier {\n-        Qualifier::Absent => {\n+        None => {\n             return items_with_candidate_name\n                 .into_iter()\n                 .filter_map(|item| {\n                     Some(LocatedImport::new(mod_path(item)?, item, item, mod_path(item)))\n                 })\n                 .collect();\n         }\n-        Qualifier::FirstSegmentUnresolved(first_segment, qualifier) => {\n-            (first_segment.to_string(), qualifier.to_string())\n-        }\n+        Some(first_segment_unresolved) => (\n+            first_segment_unresolved.fist_segment.to_string(),\n+            first_segment_unresolved.full_qualifier.to_string(),\n+        ),\n     };\n \n     items_with_candidate_name\n@@ -516,7 +538,7 @@ impl ImportCandidate {\n             Some(_) => None,\n             None => Some(Self::TraitMethod(TraitImportCandidate {\n                 receiver_ty: sema.type_of_expr(&method_call.receiver()?)?,\n-                name: NameToImport::Exact(method_call.name_ref()?.to_string()),\n+                assoc_item_name: NameToImport::Exact(method_call.name_ref()?.to_string()),\n             })),\n         }\n     }\n@@ -559,10 +581,10 @@ fn path_import_candidate(\n                     qualifier_start.syntax().ancestors().find_map(ast::Path::cast)?;\n                 if sema.resolve_path(&qualifier_start_path).is_none() {\n                     ImportCandidate::Path(PathImportCandidate {\n-                        qualifier: Qualifier::FirstSegmentUnresolved(\n-                            qualifier_start,\n-                            ModPath::from_src_unhygienic(qualifier)?,\n-                        ),\n+                        qualifier: Some(FirstSegmentUnresolved {\n+                            fist_segment: qualifier_start,\n+                            full_qualifier: ModPath::from_src_unhygienic(qualifier)?,\n+                        }),\n                         name,\n                     })\n                 } else {\n@@ -572,12 +594,12 @@ fn path_import_candidate(\n             Some(PathResolution::Def(ModuleDef::Adt(assoc_item_path))) => {\n                 ImportCandidate::TraitAssocItem(TraitImportCandidate {\n                     receiver_ty: assoc_item_path.ty(sema.db),\n-                    name,\n+                    assoc_item_name: name,\n                 })\n             }\n             Some(_) => return None,\n         },\n-        None => ImportCandidate::Path(PathImportCandidate { qualifier: Qualifier::Absent, name }),\n+        None => ImportCandidate::Path(PathImportCandidate { qualifier: None, name }),\n     })\n }\n "}]}