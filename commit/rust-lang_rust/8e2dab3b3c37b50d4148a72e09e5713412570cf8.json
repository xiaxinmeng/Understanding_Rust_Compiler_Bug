{"sha": "8e2dab3b3c37b50d4148a72e09e5713412570cf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMmRhYjNiM2MzN2I1MGQ0MTQ4YTcyZTA5ZTU3MTM0MTI1NzBjZjg=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T11:18:00Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T13:43:38Z"}, "message": "Use `if_chain`.", "tree": {"sha": "2c8646361b5f63f3cc8b48f2e153bddaa6be4f5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8646361b5f63f3cc8b48f2e153bddaa6be4f5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e2dab3b3c37b50d4148a72e09e5713412570cf8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAl5KmIoACgkQQ9YqPqOI\n5G8IzxAAoVXng15l4dUC1zwNekdqq/yva2YSiMU9f5o2O3eHmIa0odVQoHCRsS/w\nhhODaS7OipIT247aFKLnK7kEwf2eAxl7Y3x1HgnO+Kd7e45xqbEq4esn5KrBj3EJ\nBnVVF57Yi2FqFU5BGhUhEu+rS9LG+bRXf/57igGuRfFPCgP6b81ikG6NpBgOiy2Z\nH9QQHORsCjS+cDrDiB+f2p6rQYYgMZkW/ck56PzJL9A7C3kEBCElPmnwc3X+I8Lq\nyFdpNJ3BOv7Y6yNDxmnTu0eYwnPw6/fzJ+x/WVMBQmVfzXa1erPKHyQ2o8SOD6rv\n461jagpF+0glB7yTOfXlKf6TEjBck5EukkKMbMF0L+cVn290Heq2QeXYik56AfTj\n2V5TVIfPyxXcVuXd0URDhWV3cxxEVfZYA5eak7NdlGSgPzKH5lJpAbpTCVgn7y87\nTszi5vMBEVbyRAN9ti3G5w7k/23Ys4okAAtq/8yt6W5tX2XQtQQ4RCu3ZpMTU4yk\n61F8O8iVOY2GBPdQlzQBO1z0YyZZ6uM1zoC1SagMpW6wnkr89k582GoGuVcCZi5A\nSy6YrxuG1zbTBqHAj/Bci+J0B480cxPCKknHNUaah5W/tAuHrOm7lT7mjV/uo1T8\nqOkjczBbIVAshMvw6uDBvmiiz1ertrK6Qg0OcSdoDI2gHFhzq4g=\n=Ywr6\n-----END PGP SIGNATURE-----", "payload": "tree 2c8646361b5f63f3cc8b48f2e153bddaa6be4f5f\nparent d8716f5a3fb32dfaa77e298129dae193b0b8c650\nauthor daxpedda <daxpedda@gmail.com> 1581938280 +0100\ncommitter daxpedda <daxpedda@gmail.com> 1581947018 +0100\n\nUse `if_chain`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2dab3b3c37b50d4148a72e09e5713412570cf8", "html_url": "https://github.com/rust-lang/rust/commit/8e2dab3b3c37b50d4148a72e09e5713412570cf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e2dab3b3c37b50d4148a72e09e5713412570cf8/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8716f5a3fb32dfaa77e298129dae193b0b8c650", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8716f5a3fb32dfaa77e298129dae193b0b8c650", "html_url": "https://github.com/rust-lang/rust/commit/d8716f5a3fb32dfaa77e298129dae193b0b8c650"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1bbb661896626cd0bad6896e3dde90838870a1f0", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8e2dab3b3c37b50d4148a72e09e5713412570cf8/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e2dab3b3c37b50d4148a72e09e5713412570cf8/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=8e2dab3b3c37b50d4148a72e09e5713412570cf8", "patch": "@@ -1,4 +1,5 @@\n use crate::utils::{get_trait_def_id, implements_trait, is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n+use if_chain::if_chain;\n use itertools::Itertools;\n use rustc::lint::in_external_macro;\n use rustc::ty::TyKind;\n@@ -223,27 +224,26 @@ fn lint_for_missing_headers<'a, 'tcx>(\n                 span,\n                 \"docs for function returning `Result` missing `# Errors` section\",\n             );\n-        } else if let (Some(body_id), Some(future)) = (body_id, get_trait_def_id(cx, &paths::FUTURE)) {\n-            let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-            let mir = cx.tcx.optimized_mir(def_id);\n-            let ret_ty = mir.return_ty();\n-\n-            if implements_trait(cx, ret_ty, future, &[]) {\n-                use TyKind::*;\n-\n-                if let Opaque(_, subs) = ret_ty.kind {\n-                    if let Some(ty) = subs.types().next() {\n-                        if let Generator(_, subs, _) = ty.kind {\n-                            if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT) {\n-                                span_lint(\n-                                    cx,\n-                                    MISSING_ERRORS_DOC,\n-                                    span,\n-                                    \"docs for function returning `Result` missing `# Errors` section\",\n-                                );\n-                            }\n-                        }\n-                    }\n+        } else {\n+            use TyKind::*;\n+            if_chain! {\n+                if let Some(body_id) = body_id;\n+                if let Some(future) = get_trait_def_id(cx, &paths::FUTURE);\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+                let mir = cx.tcx.optimized_mir(def_id);\n+                let ret_ty = mir.return_ty();\n+                if implements_trait(cx, ret_ty, future, &[]);\n+                if let Opaque(_, subs) = ret_ty.kind;\n+                if let Some(ty) = subs.types().next();\n+                if let Generator(_, subs, _) = ty.kind;\n+                if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT);\n+                then {\n+                    span_lint(\n+                        cx,\n+                        MISSING_ERRORS_DOC,\n+                        span,\n+                        \"docs for function returning `Result` missing `# Errors` section\",\n+                    );\n                 }\n             }\n         }"}]}