{"sha": "f8ebc72b4aa138772434039950126f2c7f07a3f4", "node_id": "C_kwDOAAsO6NoAKGY4ZWJjNzJiNGFhMTM4NzcyNDM0MDM5OTUwMTI2ZjJjN2YwN2EzZjQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-09-01T10:40:43Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "errors: add `emit_note`/`create_note`\n\nAdd `Noted` marker struct that implements `EmissionGuarantee` so that\n`emit_note` and `create_note` can be implemented for struct diagnostics.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "d01d78a242e0e3cc7d03b72812d1562d961f23ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d01d78a242e0e3cc7d03b72812d1562d961f23ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ebc72b4aa138772434039950126f2c7f07a3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ebc72b4aa138772434039950126f2c7f07a3f4", "html_url": "https://github.com/rust-lang/rust/commit/f8ebc72b4aa138772434039950126f2c7f07a3f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ebc72b4aa138772434039950126f2c7f07a3f4/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "1e86226e9d6720b5c60c51d75b0a3f038d8bc5f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e86226e9d6720b5c60c51d75b0a3f038d8bc5f5", "html_url": "https://github.com/rust-lang/rust/commit/1e86226e9d6720b5c60c51d75b0a3f038d8bc5f5"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "9b41234dcfb6685dd77f705ba663d3a952566662", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=f8ebc72b4aa138772434039950126f2c7f07a3f4", "patch": "@@ -255,6 +255,56 @@ impl EmissionGuarantee for () {\n     }\n }\n \n+/// Marker type which enables implementation of `create_note` and `emit_note` functions for\n+/// note-without-error struct diagnostics.\n+#[derive(Copy, Clone)]\n+pub struct Noted;\n+\n+impl<'a> DiagnosticBuilder<'a, Noted> {\n+    /// Convenience function for internal use, clients should use one of the\n+    /// `struct_*` methods on [`Handler`].\n+    pub(crate) fn new_note(handler: &'a Handler, message: impl Into<DiagnosticMessage>) -> Self {\n+        let diagnostic = Diagnostic::new_with_code(Level::Note, None, message);\n+        Self::new_diagnostic_note(handler, diagnostic)\n+    }\n+\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    pub(crate) fn new_diagnostic_note(handler: &'a Handler, diagnostic: Diagnostic) -> Self {\n+        debug!(\"Created new diagnostic\");\n+        Self {\n+            inner: DiagnosticBuilderInner {\n+                state: DiagnosticBuilderState::Emittable(handler),\n+                diagnostic: Box::new(diagnostic),\n+            },\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+impl EmissionGuarantee for Noted {\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n+        match db.inner.state {\n+            // First `.emit()` call, the `&Handler` is still available.\n+            DiagnosticBuilderState::Emittable(handler) => {\n+                db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+                handler.emit_diagnostic(&mut db.inner.diagnostic);\n+            }\n+            // `.emit()` was previously called, disallowed from repeating it.\n+            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n+        }\n+\n+        Noted\n+    }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_note(handler, msg)\n+    }\n+}\n+\n impl<'a> DiagnosticBuilder<'a, !> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`]."}, {"sha": "a7fe280bc20ed3632103119517689780b1087d94", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=f8ebc72b4aa138772434039950126f2c7f07a3f4", "patch": "@@ -374,7 +374,7 @@ pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n     DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n-pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n+pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output.\n@@ -988,7 +988,11 @@ impl Handler {\n     }\n \n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n+        if self.inner.borrow().has_errors() {\n+            Some(ErrorGuaranteed(()))\n+        } else {\n+            None\n+        }\n     }\n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n         if self.inner.borrow().has_errors_or_lint_errors() {"}, {"sha": "a199947ebed05c1791a2a7e237442898795d7323", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=f8ebc72b4aa138772434039950126f2c7f07a3f4", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     fallback_fluent_bundle, Diagnostic, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n+    EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, Noted, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -354,6 +354,17 @@ impl ParseSess {\n         self.create_warning(warning).emit()\n     }\n \n+    pub fn create_note<'a>(\n+        &'a self,\n+        note: impl IntoDiagnostic<'a, Noted>,\n+    ) -> DiagnosticBuilder<'a, Noted> {\n+        note.into_diagnostic(&self.span_diagnostic)\n+    }\n+\n+    pub fn emit_note<'a>(&'a self, note: impl IntoDiagnostic<'a, Noted>) -> Noted {\n+        self.create_note(note).emit()\n+    }\n+\n     pub fn create_fatal<'a>(\n         &'a self,\n         fatal: impl IntoDiagnostic<'a, !>,"}, {"sha": "beb22ab3eb951a69e187126902eb6b33791689bf", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ebc72b4aa138772434039950126f2c7f07a3f4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f8ebc72b4aa138772434039950126f2c7f07a3f4", "patch": "@@ -28,7 +28,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    ErrorGuaranteed, FluentBundle, IntoDiagnostic, LazyFallbackBundle, MultiSpan,\n+    ErrorGuaranteed, FluentBundle, IntoDiagnostic, LazyFallbackBundle, MultiSpan, Noted,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -489,6 +489,15 @@ impl Session {\n     pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }\n+    pub fn create_note<'a>(\n+        &'a self,\n+        note: impl IntoDiagnostic<'a, Noted>,\n+    ) -> DiagnosticBuilder<'a, Noted> {\n+        self.parse_sess.create_note(note)\n+    }\n+    pub fn emit_note<'a>(&'a self, note: impl IntoDiagnostic<'a, Noted>) -> Noted {\n+        self.parse_sess.emit_note(note)\n+    }\n     pub fn create_fatal<'a>(\n         &'a self,\n         fatal: impl IntoDiagnostic<'a, !>,"}]}