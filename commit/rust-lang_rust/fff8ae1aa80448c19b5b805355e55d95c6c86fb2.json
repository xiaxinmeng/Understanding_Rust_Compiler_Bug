{"sha": "fff8ae1aa80448c19b5b805355e55d95c6c86fb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjhhZTFhYTgwNDQ4YzE5YjViODA1MzU1ZTU1ZDk1YzZjODZmYjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-20T11:58:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T11:58:35Z"}, "message": "Rollup merge of #66548 - lenary:riscv/disable-atomics-non-a, r=alexcrichton\n\n[RISCV] Disable Atomics on all Non-A RISC-V targets\n\nIn a `TargetOptions` configuration, `max_atomic_width: None` causes `max_atomic_width()` to return `Some(target_pointer_width)`. So, contrary to assumptions, `max_atomic_width: None` means you do have atomic support!\n\nRISC-V's rv32i and rv32imc do not have architectural support for atomic memory accesses of any size, because they do not include the `A` architecture extension. This means the values in the target definition should be `Some(0)`.\n\nThis bug has been observed via a build failure with oreboot/oreboot#191, where LLVM was still generating libcalls for atomic operations. According to rust-lang/compiler-builtins, \"Rust only exposes atomic types on platforms that support them, and therefore does not need to fall back to software implementations.\" - so this PR tries to bring rustc inline with this decision.\n\nThis commit also removes the outdated bug link, which references a now irrelevant GCC bug.\n\nI will likely also have to revisit the `min_atomic_width` of all the RISC-V targets so they are correct and match what the hardware is capable of (which is more restricted than one might imagine).\n\nr? @alexcrichton", "tree": {"sha": "f5abb21bd17bbc16b221de14557cd07dde1d811b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5abb21bd17bbc16b221de14557cd07dde1d811b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff8ae1aa80448c19b5b805355e55d95c6c86fb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1SprCRBK7hj4Ov3rIwAAdHIIAEVHBW1UX31A/IgDICpUWIoK\nFkhLOlASUTXh0N9AKAg8Ng0gSPw6pyG/bS4Q6fVXuDX9mpACxeZLlXD1PQ9YQLq3\n3lFTV4YCKXI6L3VJeaJ+7OqghyC8Ye6mPwLyaDQyzCFssb2a+KWNdLBvwgjhhXp9\nmKqyU88SfUui+Z/HaKBeVShFJvr1tFqr7NZuW7i24xxaI6Y9slubmZfI9PhpT7GW\nyx6pQK3j4CxP8Yxnoa8d8sowWElbgrjZ3lUp9rgx9UDh/HKfPOp++B+SMCs1y4dL\n5AEox79dgCsIhMUqRvf4s4c6Kkw4Cdoseso9gEiaf5i4IapytA4VLOpRYsglXd8=\n=vIA5\n-----END PGP SIGNATURE-----\n", "payload": "tree f5abb21bd17bbc16b221de14557cd07dde1d811b\nparent 499760450305f6d2f565549dbd9b2d3c95cd7774\nparent ca42c25598b2d4f1842dc18af6992daea0b0fca9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574251115 +0100\ncommitter GitHub <noreply@github.com> 1574251115 +0100\n\nRollup merge of #66548 - lenary:riscv/disable-atomics-non-a, r=alexcrichton\n\n[RISCV] Disable Atomics on all Non-A RISC-V targets\n\nIn a `TargetOptions` configuration, `max_atomic_width: None` causes `max_atomic_width()` to return `Some(target_pointer_width)`. So, contrary to assumptions, `max_atomic_width: None` means you do have atomic support!\n\nRISC-V's rv32i and rv32imc do not have architectural support for atomic memory accesses of any size, because they do not include the `A` architecture extension. This means the values in the target definition should be `Some(0)`.\n\nThis bug has been observed via a build failure with oreboot/oreboot#191, where LLVM was still generating libcalls for atomic operations. According to rust-lang/compiler-builtins, \"Rust only exposes atomic types on platforms that support them, and therefore does not need to fall back to software implementations.\" - so this PR tries to bring rustc inline with this decision.\n\nThis commit also removes the outdated bug link, which references a now irrelevant GCC bug.\n\nI will likely also have to revisit the `min_atomic_width` of all the RISC-V targets so they are correct and match what the hardware is capable of (which is more restricted than one might imagine).\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff8ae1aa80448c19b5b805355e55d95c6c86fb2", "html_url": "https://github.com/rust-lang/rust/commit/fff8ae1aa80448c19b5b805355e55d95c6c86fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff8ae1aa80448c19b5b805355e55d95c6c86fb2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "499760450305f6d2f565549dbd9b2d3c95cd7774", "url": "https://api.github.com/repos/rust-lang/rust/commits/499760450305f6d2f565549dbd9b2d3c95cd7774", "html_url": "https://github.com/rust-lang/rust/commit/499760450305f6d2f565549dbd9b2d3c95cd7774"}, {"sha": "ca42c25598b2d4f1842dc18af6992daea0b0fca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca42c25598b2d4f1842dc18af6992daea0b0fca9", "html_url": "https://github.com/rust-lang/rust/commit/ca42c25598b2d4f1842dc18af6992daea0b0fca9"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "0db34196bdd6193923f6c635af41ffb34698bb11", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff8ae1aa80448c19b5b805355e55d95c6c86fb2/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8ae1aa80448c19b5b805355e55d95c6c86fb2/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=fff8ae1aa80448c19b5b805355e55d95c6c86fb2", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv32\".to_string(),\n-            max_atomic_width: None,\n+            max_atomic_width: Some(0),\n             atomic_cas: false,\n             features: String::new(),\n             executables: true,"}, {"sha": "621af5a1eca75bb5fd4f26b435714d3354a2c256", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff8ae1aa80448c19b5b805355e55d95c6c86fb2/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8ae1aa80448c19b5b805355e55d95c6c86fb2/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=fff8ae1aa80448c19b5b805355e55d95c6c86fb2", "patch": "@@ -17,8 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv32\".to_string(),\n-            // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86005\n-            max_atomic_width: None, //Some(32),\n+            max_atomic_width: Some(0),\n             atomic_cas: false,\n             features: \"+m,+c\".to_string(),\n             executables: true,"}]}