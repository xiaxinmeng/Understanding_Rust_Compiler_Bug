{"sha": "bbe03da9c6bad23d8e09077461c1616872e1aca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZTAzZGE5YzZiYWQyM2Q4ZTA5MDc3NDYxYzE2MTY4NzJlMWFjYTA=", "commit": {"author": {"name": "=Mark Sinclair", "email": "mark.edward.x@gmail.com", "date": "2013-07-14T17:18:50Z"}, "committer": {"name": "=Mark Sinclair", "email": "mark.edward.x@gmail.com", "date": "2013-07-14T17:18:50Z"}, "message": "Stripped trailing spaces; Implemented FromIterator for TreeMap and PriorityQueue", "tree": {"sha": "338db94f8bd22d08210727fe9516f7c2a1fb983e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338db94f8bd22d08210727fe9516f7c2a1fb983e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbe03da9c6bad23d8e09077461c1616872e1aca0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe03da9c6bad23d8e09077461c1616872e1aca0", "html_url": "https://github.com/rust-lang/rust/commit/bbe03da9c6bad23d8e09077461c1616872e1aca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbe03da9c6bad23d8e09077461c1616872e1aca0/comments", "author": {"login": "MarkJr94", "id": 1462602, "node_id": "MDQ6VXNlcjE0NjI2MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkJr94", "html_url": "https://github.com/MarkJr94", "followers_url": "https://api.github.com/users/MarkJr94/followers", "following_url": "https://api.github.com/users/MarkJr94/following{/other_user}", "gists_url": "https://api.github.com/users/MarkJr94/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkJr94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkJr94/subscriptions", "organizations_url": "https://api.github.com/users/MarkJr94/orgs", "repos_url": "https://api.github.com/users/MarkJr94/repos", "events_url": "https://api.github.com/users/MarkJr94/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkJr94/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MarkJr94", "id": 1462602, "node_id": "MDQ6VXNlcjE0NjI2MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkJr94", "html_url": "https://github.com/MarkJr94", "followers_url": "https://api.github.com/users/MarkJr94/followers", "following_url": "https://api.github.com/users/MarkJr94/following{/other_user}", "gists_url": "https://api.github.com/users/MarkJr94/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkJr94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkJr94/subscriptions", "organizations_url": "https://api.github.com/users/MarkJr94/orgs", "repos_url": "https://api.github.com/users/MarkJr94/repos", "events_url": "https://api.github.com/users/MarkJr94/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkJr94/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e", "html_url": "https://github.com/rust-lang/rust/commit/bb6615d43a872d8cd3e2e33be5ff9efebf9cc02e"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "58bf4ba92472578c6081ccb7045ec8f98b476beb", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=bbe03da9c6bad23d8e09077461c1616872e1aca0", "patch": "@@ -16,6 +16,7 @@\n use std::unstable::intrinsics::{move_val_init, init};\n use std::util::{replace, swap};\n use std::vec;\n+use std::iterator::FromIterator;\n \n /// A priority queue implemented with a binary heap\n pub struct PriorityQueue<T> {\n@@ -191,6 +192,21 @@ impl<'self, T> Iterator<&'self T> for PriorityQueueIterator<'self, T> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n+impl<T: Ord, Iter: Iterator<T>> FromIterator<T, Iter> for PriorityQueue<T> {\n+    pub fn from_iterator(iter: &mut Iter) -> PriorityQueue<T> {\n+        let (lower, _) = iter.size_hint();\n+\n+        let mut q = PriorityQueue::new();\n+        q.reserve_at_least(lower);\n+\n+        for iter.advance |elem| {\n+            q.push(elem);\n+        }\n+\n+        q\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use sort::merge_sort;\n@@ -341,4 +357,15 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     fn test_empty_replace() { let mut heap = PriorityQueue::new(); heap.replace(5); }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let xs = ~[9u, 8, 7, 6, 5, 4, 3, 2, 1];\n+\n+        let mut q: PriorityQueue<uint> = xs.rev_iter().transform(|&x| x).collect();\n+\n+        for xs.iter().advance |&x| {\n+            assert_eq!(q.pop(), x);\n+        }\n+    }\n }"}, {"sha": "d3d7dbfe402f944832e058e7f83c1f29426a9e6e", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=bbe03da9c6bad23d8e09077461c1616872e1aca0", "patch": "@@ -15,6 +15,7 @@\n \n use std::num;\n use std::util::{swap, replace};\n+use std::iterator::FromIterator;\n \n // This is implemented as an AA tree, which is a simplified variation of\n // a red-black tree where red (horizontal) nodes can only be added\n@@ -695,6 +696,30 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n     };\n }\n \n+impl<K: TotalOrd, V, T: Iterator<(K, V)>> FromIterator<(K, V), T> for TreeMap<K, V> {\n+    pub fn from_iterator(iter: &mut T) -> TreeMap<K, V> {\n+        let mut map = TreeMap::new();\n+\n+        for iter.advance |(k, v)| {\n+            map.insert(k, v);\n+        }\n+\n+        map\n+    }\n+}\n+\n+impl<T: TotalOrd, Iter: Iterator<T>> FromIterator<T, Iter> for TreeSet<T> {\n+    pub fn from_iterator(iter: &mut Iter) -> TreeSet<T> {\n+        let mut set = TreeSet::new();\n+\n+        for iter.advance |elem| {\n+            set.insert(elem);\n+        }\n+\n+        set\n+    }\n+}\n+\n #[cfg(test)]\n mod test_treemap {\n \n@@ -1013,6 +1038,17 @@ mod test_treemap {\n             i += 1;\n         }\n     }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let xs = ~[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+\n+        let map: TreeMap<int, int> = xs.iter().transform(|&x| x).collect();\n+\n+        for xs.iter().advance |&(k, v)| {\n+            assert_eq!(map.find(&k), Some(&v));\n+        }\n+    }\n }\n \n #[cfg(test)]\n@@ -1240,4 +1276,15 @@ mod test_set {\n         assert_eq!(m.pop(&1), Some(2));\n         assert_eq!(m.pop(&1), None);\n     }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let xs = ~[1, 2, 3, 4, 5, 6, 7, 8, 9];\n+\n+        let set: TreeSet<int> = xs.iter().transform(|&x| x).collect();\n+\n+        for xs.iter().advance |x: &int| {\n+            assert!(set.contains(x));\n+        }\n+    }\n }"}, {"sha": "44161127c14eba1bb6bc6315ac6166beca29f221", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=bbe03da9c6bad23d8e09077461c1616872e1aca0", "patch": "@@ -621,7 +621,7 @@ impl<K: Eq + Hash, V, T: Iterator<(K, V)>> FromIterator<(K, V), T> for HashMap<K\n \n         map\n     }\n-}        \n+}\n \n /// An implementation of a hash set using the underlying representation of a\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n@@ -747,7 +747,7 @@ impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n         set\n     }\n }\n-  \n+\n \n #[cfg(test)]\n mod test_map {\n@@ -965,7 +965,7 @@ mod test_map {\n     #[test]\n     fn test_from_iter() {\n         let xs = ~[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n-        \n+\n         let map: HashMap<int, int> = xs.iter().transform(|&x| x).collect();\n \n         for xs.iter().advance |&(k, v)| {\n@@ -1157,7 +1157,7 @@ mod test_set {\n     #[test]\n     fn test_from_iter() {\n         let xs = ~[1, 2, 3, 4, 5, 6, 7, 8, 9];\n-        \n+\n         let set: HashSet<int> = xs.iter().transform(|&x| x).collect();\n \n         for xs.iter().advance |x: &int| {"}, {"sha": "ffacfe12ca2d050b0c86f352ea28d2ece7d789b6", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe03da9c6bad23d8e09077461c1616872e1aca0/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=bbe03da9c6bad23d8e09077461c1616872e1aca0", "patch": "@@ -553,7 +553,7 @@ mod test_map {\n     #[test]\n     fn test_from_iter() {\n         let xs = ~[(1u, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n-        \n+\n         let map: TrieMap<int> = xs.iter().transform(|&x| x).collect();\n \n         for xs.iter().advance |&(k, v)| {\n@@ -592,7 +592,7 @@ mod test_set {\n     #[test]\n     fn test_from_iter() {\n         let xs = ~[9u, 8, 7, 6, 5, 4, 3, 2, 1];\n-        \n+\n         let set: TrieSet = xs.iter().transform(|&x| x).collect();\n \n         for xs.iter().advance |x| {"}]}