{"sha": "9521da71793805a87c4b8525c34b19f58eed498f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjFkYTcxNzkzODA1YTg3YzRiODUyNWMzNGIxOWY1OGVlZDQ5OGY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-17T12:56:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T12:56:42Z"}, "message": "Rollup merge of #85970 - jsha:remove-methods-implementors, r=GuillaumeGomez\n\nRemove methods under Implementors on trait pages\n\nAs discussed at https://github.com/rust-lang/rust/issues/84326#issuecomment-842652412.\n\nOn a trait page, the \"Implementors\" section currently lists all methods of each implementor. That duplicates the method definitions on the trait itself, and is usually not very useful. So the implementors are collapsed by default. This PR changes rustdoc to just not render them at all. Any documentation specific to an implementor can be found by clicking through to the implementor's page.\n\nThis moves the \"portability\" info inside the `<summary>` tags so it is still visible on trait pages (as originally implemented in #79201). That also means it will be visible on struct/enum pages when methods are collapsed.\n\nAdd `#[doc(hidden)]` to all implementations of `Iterator::__iterator_get_unchecked` that didn't already have it. Otherwise, due to #86145, the structs/enums with those implementations would generate documentation for them, and that documentation would have a broken link into the Iterator page. Those links were already \"broken\" but not detected by the link-checker, because they pointed to one of the Implementors on the Iterator page, which happened to have the right anchor name.\n\nThis reduces the Read trait's page size from 128kB to 68kB (uncompressed) and from 12,125 bytes to 9,989 bytes (gzipped\nDemo:\n\nhttps://hoffman-andrews.com/rust/remove-methods-implementors/std/string/struct.String.html#trait-implementations\nhttps://hoffman-andrews.com/rust/remove-methods-implementors/std/io/trait.Read.html#implementors\n\nr? `@GuillaumeGomez`", "tree": {"sha": "a5c9b60f33d597fa1d0688f783ddac92ae4a8082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c9b60f33d597fa1d0688f783ddac92ae4a8082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9521da71793805a87c4b8525c34b19f58eed498f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy0aKCRBK7hj4Ov3rIwAAKCsIABAo+8ksrAUa8qMhuTQhLpny\nAAPsOp/F6Ti/2oXlEFglTSdM+jLCQYfalTu3pjm2NpaxbrJkhBj+wVKR1otDiJUu\nOgcv/WpljGmm0b+lGPt5MnIqMoyEXqt9iJVpg9SmKGv0pB5rNrX5zdFIqDVJcHCJ\n9IbedhwRzZQrriAjG24hsnEDyIAHXoNk5SaK0Bqzw6IIhGCZXpub5V17/y1BdjEC\n5s4EBrmc4Tc42wzUDwTqplVtYCz3EJK/F1m2/WFOou4TM1vdtpMedQbRUmKfeidP\nhWwdabYWLW3bawKseV6ZZ4xoE2/YY2nePRecGDaXxlNTHq0Pd21VFD++BuwNUxA=\n=3LH6\n-----END PGP SIGNATURE-----\n", "payload": "tree a5c9b60f33d597fa1d0688f783ddac92ae4a8082\nparent 31ee68067efb53db5bf9cc20a690460e37f95591\nparent bf81e139af3605144121d736c0314d103466507c\nauthor Yuki Okushi <jtitor@2k36.org> 1623934602 +0900\ncommitter GitHub <noreply@github.com> 1623934602 +0900\n\nRollup merge of #85970 - jsha:remove-methods-implementors, r=GuillaumeGomez\n\nRemove methods under Implementors on trait pages\n\nAs discussed at https://github.com/rust-lang/rust/issues/84326#issuecomment-842652412.\n\nOn a trait page, the \"Implementors\" section currently lists all methods of each implementor. That duplicates the method definitions on the trait itself, and is usually not very useful. So the implementors are collapsed by default. This PR changes rustdoc to just not render them at all. Any documentation specific to an implementor can be found by clicking through to the implementor's page.\n\nThis moves the \"portability\" info inside the `<summary>` tags so it is still visible on trait pages (as originally implemented in #79201). That also means it will be visible on struct/enum pages when methods are collapsed.\n\nAdd `#[doc(hidden)]` to all implementations of `Iterator::__iterator_get_unchecked` that didn't already have it. Otherwise, due to #86145, the structs/enums with those implementations would generate documentation for them, and that documentation would have a broken link into the Iterator page. Those links were already \"broken\" but not detected by the link-checker, because they pointed to one of the Implementors on the Iterator page, which happened to have the right anchor name.\n\nThis reduces the Read trait's page size from 128kB to 68kB (uncompressed) and from 12,125 bytes to 9,989 bytes (gzipped\nDemo:\n\nhttps://hoffman-andrews.com/rust/remove-methods-implementors/std/string/struct.String.html#trait-implementations\nhttps://hoffman-andrews.com/rust/remove-methods-implementors/std/io/trait.Read.html#implementors\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9521da71793805a87c4b8525c34b19f58eed498f", "html_url": "https://github.com/rust-lang/rust/commit/9521da71793805a87c4b8525c34b19f58eed498f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9521da71793805a87c4b8525c34b19f58eed498f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ee68067efb53db5bf9cc20a690460e37f95591", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ee68067efb53db5bf9cc20a690460e37f95591", "html_url": "https://github.com/rust-lang/rust/commit/31ee68067efb53db5bf9cc20a690460e37f95591"}, {"sha": "bf81e139af3605144121d736c0314d103466507c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf81e139af3605144121d736c0314d103466507c", "html_url": "https://github.com/rust-lang/rust/commit/bf81e139af3605144121d736c0314d103466507c"}], "stats": {"total": 267, "additions": 114, "deletions": 153}, "files": [{"sha": "46a769a722a8bf3ce44873eb25186e63d3e84c7f", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -38,6 +38,7 @@ impl<T> Iterator for IntoIter<T> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "ae1b03c9a4d2247b4a201135c4e82ac18c807e0e", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -103,6 +103,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "df30c38652f72ef0ea100e31ba6110883c992592", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -89,6 +89,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "7a08f4c6cbaaceba1f983cc6be2cb116aae54c4c", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -163,6 +163,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         self.len()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "931ea77eca4dc4c1bff749d1f489cd259fe63eef", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -132,6 +132,7 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "5cd65a9415fd7d2ba553488a3bcec266cedd0fae", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -58,6 +58,7 @@ where\n         self.it.map(T::clone).fold(init, f)\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "07a3b5d245659ec18da4b5fcbcf71eb5b5a9a8f9", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -74,6 +74,7 @@ where\n         self.it.count()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "8b27bdc60a7055aff561a716c22ba9c7d77e967b", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -111,6 +111,7 @@ where\n     }\n \n     #[rustc_inherit_overflow_checks]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "0c21df4f12c60c167f291508d8947f7343abc322", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -114,6 +114,7 @@ where\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "dc86eccfcb82f36c700936a058823a59265c15a3", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -122,6 +122,7 @@ where\n         self.iter.fold(init, map_fold(self.f, g))\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "8a6955060e82fd2e8322e63df5f55de592a23647", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -88,6 +88,7 @@ where\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "4a86d6a100abe66539a41037cfe2de4db9dbb9cd", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -667,6 +667,7 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "b2cb2f12bbfeb83d6797a93de8b68804e6e3feaf", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -2148,6 +2148,7 @@ impl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N> {\n         self.iter.last()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n         // SAFETY: The safety guarantees of `__iterator_get_unchecked` are\n         // transferred to the caller.\n@@ -2260,6 +2261,7 @@ impl<'a, T, const N: usize> Iterator for ArrayChunksMut<'a, T, N> {\n         self.iter.last()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n         // SAFETY: The safety guarantees of `__iterator_get_unchecked` are transferred to\n         // the caller."}, {"sha": "a5774764573be4143193b4e4d994379da39bc8fe", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -295,6 +295,7 @@ impl Iterator for Bytes<'_> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> u8 {\n         // SAFETY: the caller must uphold the safety contract\n         // for `Iterator::__iterator_get_unchecked`."}, {"sha": "499f33f14f56296d45cfd3ff685c39a119838ba9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 65, "deletions": 80, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -490,7 +490,6 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n         (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", false)\n             .into(),\n-        (\"auto-collapse-implementors\", \"Auto-hide implementors of a trait\", true).into(),\n         (\"go-to-only-result\", \"Directly go to item in search if there is only one result\", false)\n             .into(),\n         (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n@@ -724,6 +723,8 @@ fn short_item_info(\n     extra_info\n }\n \n+// Render the list of items inside one of the sections \"Trait Implementations\",\n+// \"Auto Trait Implementations,\" \"Blanket Trait Implementations\" (on struct/enum pages).\n fn render_impls(\n     cx: &Context<'_>,\n     w: &mut Buffer,\n@@ -746,8 +747,6 @@ fn render_impls(\n                 containing_item,\n                 assoc_link,\n                 RenderMode::Normal,\n-                containing_item.stable_since(tcx).as_deref(),\n-                containing_item.const_stable_since(tcx).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -1025,7 +1024,6 @@ fn render_assoc_items(\n         Some(v) => v,\n         None => return,\n     };\n-    let tcx = cx.tcx();\n     let cache = cx.cache();\n     let (non_trait, traits): (Vec<_>, _) = v.iter().partition(|i| i.inner_impl().trait_.is_none());\n     if !non_trait.is_empty() {\n@@ -1059,8 +1057,6 @@ fn render_assoc_items(\n                 containing_item,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                containing_item.stable_since(tcx).as_deref(),\n-                containing_item.const_stable_since(tcx).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -1261,8 +1257,6 @@ fn render_impl(\n     parent: &clean::Item,\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n@@ -1279,23 +1273,23 @@ fn render_impl(\n     // For trait implementations, the `interesting` output contains all methods that have doc\n     // comments, and the `boring` output contains all methods that do not. The distinction is\n     // used to allow hiding the boring methods.\n+    // `containing_item` is used for rendering stability info. If the parent is a trait impl,\n+    // `containing_item` will the grandparent, since trait impls can't have stability attached.\n     fn doc_impl_item(\n         boring: &mut Buffer,\n         interesting: &mut Buffer,\n         cx: &Context<'_>,\n         item: &clean::Item,\n         parent: &clean::Item,\n+        containing_item: &clean::Item,\n         link: AssocItemLink<'_>,\n         render_mode: RenderMode,\n         is_default_item: bool,\n-        outer_version: Option<&str>,\n-        outer_const_version: Option<&str>,\n         trait_: Option<&clean::Trait>,\n         show_def_docs: bool,\n     ) {\n         let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n-        let tcx = cx.tcx();\n \n         let render_method_item = match render_mode {\n             RenderMode::Normal => true,\n@@ -1364,6 +1358,8 @@ fn render_impl(\n                         \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n+                    render_rightside(w, cx, item, containing_item);\n+                    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n                         w,\n@@ -1373,15 +1369,6 @@ fn render_impl(\n                         cx,\n                     );\n                     w.write_str(\"</code>\");\n-                    render_stability_since_raw(\n-                        w,\n-                        item.stable_since(tcx).as_deref(),\n-                        item.const_stable_since(tcx).as_deref(),\n-                        outer_version,\n-                        outer_const_version,\n-                    );\n-                    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                    write_srclink(cx, item, w);\n                     w.write_str(\"</div>\");\n                 }\n             }\n@@ -1390,9 +1377,11 @@ fn render_impl(\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n+                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"<code>\");\n                 assoc_type(\n                     w,\n                     item,\n@@ -1403,17 +1392,19 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n+                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n+                render_rightside(w, cx, item, containing_item);\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"<code>\");\n                 assoc_const(\n                     w,\n                     item,\n@@ -1424,21 +1415,14 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                render_stability_since_raw(\n-                    w,\n-                    item.stable_since(tcx).as_deref(),\n-                    item.const_stable_since(tcx).as_deref(),\n-                    outer_version,\n-                    outer_const_version,\n-                );\n-                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                write_srclink(cx, item, w);\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class,);\n+                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"<code>\");\n                 assoc_type(\n                     w,\n                     item,\n@@ -1449,7 +1433,6 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"</div>\");\n             }\n             clean::StrippedItem(..) => return,\n@@ -1474,11 +1457,10 @@ fn render_impl(\n             cx,\n             trait_item,\n             if trait_.is_some() { &i.impl_item } else { parent },\n+            parent,\n             link,\n             render_mode,\n             false,\n-            outer_version,\n-            outer_const_version,\n             trait_.map(|t| &t.trait_),\n             show_def_docs,\n         );\n@@ -1491,9 +1473,8 @@ fn render_impl(\n         t: &clean::Trait,\n         i: &clean::Impl,\n         parent: &clean::Item,\n+        containing_item: &clean::Item,\n         render_mode: RenderMode,\n-        outer_version: Option<&str>,\n-        outer_const_version: Option<&str>,\n         show_def_docs: bool,\n     ) {\n         for trait_item in &t.items {\n@@ -1511,11 +1492,10 @@ fn render_impl(\n                 cx,\n                 trait_item,\n                 parent,\n+                containing_item,\n                 assoc_link,\n                 render_mode,\n                 true,\n-                outer_version,\n-                outer_const_version,\n                 Some(t),\n                 show_def_docs,\n             );\n@@ -1535,28 +1515,25 @@ fn render_impl(\n                 &t.trait_,\n                 &i.inner_impl(),\n                 &i.impl_item,\n+                parent,\n                 render_mode,\n-                outer_version,\n-                outer_const_version,\n                 show_def_docs,\n             );\n         }\n     }\n     if render_mode == RenderMode::Normal {\n-        let toggled = !impl_items.is_empty() || !default_impl_items.is_empty();\n+        let toggled = !(impl_items.is_empty() && default_impl_items.is_empty());\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n             write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n-        }\n-        if toggled {\n             write!(w, \"<summary>\")\n         }\n         render_impl_summary(\n             w,\n             cx,\n             i,\n-            outer_version,\n-            outer_const_version,\n+            parent,\n+            parent,\n             show_def_docs,\n             use_absolute,\n             is_on_foreign_type,\n@@ -1565,11 +1542,6 @@ fn render_impl(\n         if toggled {\n             write!(w, \"</summary>\")\n         }\n-        if trait_.is_some() {\n-            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n-            }\n-        }\n \n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n@@ -1597,20 +1569,42 @@ fn render_impl(\n     w.write_str(&close_tags);\n }\n \n-fn render_impl_summary(\n+// Render the items that appear on the right side of methods, impls, and\n+// associated types. For example \"1.0.0 (const: 1.39.0) [src]\".\n+fn render_rightside(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    item: &clean::Item,\n+    containing_item: &clean::Item,\n+) {\n+    let tcx = cx.tcx();\n+\n+    write!(w, \"<div class=\\\"rightside\\\">\");\n+    render_stability_since_raw(\n+        w,\n+        item.stable_since(tcx).as_deref(),\n+        item.const_stable_since(tcx).as_deref(),\n+        containing_item.stable_since(tcx).as_deref(),\n+        containing_item.const_stable_since(tcx).as_deref(),\n+    );\n+\n+    write_srclink(cx, item, w);\n+    w.write_str(\"</div>\");\n+}\n+\n+pub(crate) fn render_impl_summary(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     i: &Impl,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n+    parent: &clean::Item,\n+    containing_item: &clean::Item,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n     // This argument is used to reference same type with different paths to avoid duplication\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {\n-    let tcx = cx.tcx();\n     let id = cx.derive_id(match i.inner_impl().trait_ {\n         Some(ref t) => {\n             if is_on_foreign_type {\n@@ -1626,13 +1620,12 @@ fn render_impl_summary(\n     } else {\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n+    write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n+    render_rightside(w, cx, &i.impl_item, containing_item);\n+    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+    write!(w, \"<code class=\\\"in-band\\\">\");\n+\n     if let Some(use_absolute) = use_absolute {\n-        write!(\n-            w,\n-            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">\",\n-            id, aliases\n-        );\n         write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n         if show_def_docs {\n             for it in &i.inner_impl().items {\n@@ -1643,26 +1636,18 @@ fn render_impl_summary(\n                 }\n             }\n         }\n-        w.write_str(\"</code>\");\n     } else {\n-        write!(\n-            w,\n-            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">{}</code>\",\n-            id,\n-            aliases,\n-            i.inner_impl().print(false, cx)\n-        );\n+        write!(w, \"{}\", i.inner_impl().print(false, cx));\n     }\n-    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-    render_stability_since_raw(\n-        w,\n-        i.impl_item.stable_since(tcx).as_deref(),\n-        i.impl_item.const_stable_since(tcx).as_deref(),\n-        outer_version,\n-        outer_const_version,\n-    );\n-    write_srclink(cx, &i.impl_item, w);\n+    write!(w, \"</code>\");\n+\n+    let is_trait = i.inner_impl().trait_.is_some();\n+    if is_trait {\n+        if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n+            write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+        }\n+    }\n+\n     w.write_str(\"</div>\");\n }\n "}, {"sha": "8fd5353891221c27519036334f1b42fc3532f7b2", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -15,7 +15,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n     render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    render_impl, render_impl_summary, render_stability_since_raw, write_srclink, AssocItemLink,\n+    Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n@@ -585,11 +586,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n         }\n-        write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\"><code>\", id);\n-        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n-        w.write_str(\"</code>\");\n+        write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n+        write!(w, \"<div class=\\\"rightside\\\">\");\n         render_stability_since(w, m, t, cx.tcx());\n         write_srclink(cx, m, w);\n+        write!(w, \"</div>\");\n+        write!(w, \"<code>\");\n+        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n+        w.write_str(\"</code>\");\n         w.write_str(\"</div>\");\n         if toggled {\n             write!(w, \"</summary>\");\n@@ -701,8 +705,6 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     it,\n                     assoc_link,\n                     RenderMode::Normal,\n-                    implementor.impl_item.stable_since(cx.tcx()).as_deref(),\n-                    implementor.impl_item.const_stable_since(cx.tcx()).as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -1310,7 +1312,7 @@ fn render_implementor(\n     implementor_dups: &FxHashMap<Symbol, (DefId, bool)>,\n     aliases: &[String],\n ) {\n-    // If there's already another implementor that has the same abbridged name, use the\n+    // If there's already another implementor that has the same abridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n         clean::ResolvedPath { ref path, is_generic: false, .. }\n@@ -1320,19 +1322,15 @@ fn render_implementor(\n         } => implementor_dups[&path.last()].1,\n         _ => false,\n     };\n-    render_impl(\n+    render_impl_summary(\n         w,\n         cx,\n         implementor,\n         trait_,\n-        AssocItemLink::Anchor(None),\n-        RenderMode::Normal,\n-        trait_.stable_since(cx.tcx()).as_deref(),\n-        trait_.const_stable_since(cx.tcx()).as_deref(),\n+        trait_,\n         false,\n         Some(use_absolute),\n         false,\n-        false,\n         aliases,\n     );\n }"}, {"sha": "98128878999e4b36460ae92848dcf20e04107b67", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -778,7 +778,6 @@ function hideThemeButtonState() {\n         }\n \n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n-        var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n         var hideImplementations = getSettingValue(\"auto-hide-trait-implementations\") === \"true\";\n         var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n@@ -796,10 +795,6 @@ function hideThemeButtonState() {\n             setImplementorsTogglesOpen(\"blanket-implementations-list\", false);\n         }\n \n-        if (!hideImplementors) {\n-            setImplementorsTogglesOpen(\"implementors-list\", true);\n-        }\n-\n         onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function (e) {\n             if (!hideLargeItemContents && hasClass(e, \"type-contents-toggle\")) {\n                 e.open = true;"}, {"sha": "9a59ee528a0c9e90fe3a4e5e1126418fe9f33972", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -581,7 +581,6 @@ nav.sub {\n .content .item-info {\n \tposition: relative;\n \tmargin-left: 33px;\n-\tmargin-top: -13px;\n }\n \n .sub-variant > div > .item-info {\n@@ -852,12 +851,12 @@ body.blur > :not(#help) {\n }\n \n .stab {\n-\tdisplay: table;\n \tborder-width: 1px;\n \tborder-style: solid;\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n \tfont-size: 90%;\n+\tfont-weight: normal;\n }\n .stab p {\n \tdisplay: inline;\n@@ -900,32 +899,25 @@ body.blur > :not(#help) {\n .since {\n \tfont-weight: normal;\n \tfont-size: initial;\n-\tposition: absolute;\n-\tright: 0;\n-\ttop: 0;\n }\n \n .impl-items .since, .impl .since, .methods .since {\n-\tflex-grow: 0;\n \tpadding-left: 12px;\n \tpadding-right: 2px;\n \tposition: initial;\n }\n \n .impl-items .srclink, .impl .srclink, .methods .srclink {\n-\tflex-grow: 0;\n \t/* Override header settings otherwise it's too bold */\n \tfont-size: 17px;\n \tfont-weight: normal;\n }\n \n-.impl-items code, .impl code, .methods code {\n-\tflex-grow: 1;\n+.rightside {\n+\tfloat: right;\n }\n \n .has-srclink {\n-\tdisplay: flex;\n-\tflex-basis: 100%;\n \tfont-size: 16px;\n \tmargin-bottom: 12px;\n \t/* Push the src link out to the right edge consistently */\n@@ -986,7 +978,6 @@ a.test-arrow:hover{\n }\n \n .since + .srclink {\n-\tdisplay: table-cell;\n \tpadding-left: 10px;\n }\n \n@@ -1046,6 +1037,10 @@ a.test-arrow:hover{\n \topacity: 1;\n }\n \n+:target {\n+\tpadding-right: 3px;\n+}\n+\n .information {\n \tposition: absolute;\n \tleft: -25px;\n@@ -1612,11 +1607,6 @@ details.undocumented[open] > summary::before {\n \t\tmargin-left: 0;\n \t}\n \n-\t.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant,\n-\t.impl-items > .associatedtype {\n-\t\tdisplay: flex;\n-\t}\n-\n \t.anchor {\n \t\tdisplay: none !important;\n \t}"}, {"sha": "171d06c0a3667760806b4b0e16f35a02592d4ddb", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -334,8 +334,11 @@ a.test-arrow:hover {\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground: rgba(255, 236, 164, 0.06);\n+}\n+\n+:target {\n \tborder-right: 3px solid rgba(255, 180, 76, 0.85);\n }\n "}, {"sha": "d9ea28058ad99372d1ca7967381849d24bc0ce3d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -282,8 +282,11 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground-color: #494a3d;\n+}\n+\n+:target {\n \tborder-right: 3px solid #bb7410;\n }\n "}, {"sha": "a2dfb89820b01450f753f2c107509ee13bfb1812", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -275,8 +275,11 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground: #FDFFD3;\n+}\n+\n+:target {\n \tborder-right: 3px solid #ffb44c;\n }\n "}, {"sha": "d5f9d4fc58b8c3e76fbed31eb2bc8cb34edc5a9b", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -2,9 +2,6 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.borrow\n // In the blanket implementations list, \"Borrow\" is the second one, hence the \":nth(2)\".\n assert: (\"#blanket-implementations-list > details:nth-child(2)\", \"open\", \"\")\n-// Please note the \"\\\" below is needed because otherwise \".borrow\" would be interpreted as\n-// a class selector.\n-assert: (\"#method\\.borrow\", {\"display\": \"flex\"})\n // We first check that the impl block is open by default.\n assert: (\"#implementations + details\", \"open\", \"\")\n // We collapse it."}, {"sha": "6189acb72542a613612d67d183886e28441e03ff", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]/a[@class=\"srclink\"]' \"[src]\"\n+// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"[src]\"\n pub use std::iter::Iterator;"}, {"sha": "dbaf744dc4712fad4fc82a004a1a0e489efecf21", "filename": "src/test/rustdoc/issue-19055.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31ee68067efb53db5bf9cc20a690460e37f95591/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ee68067efb53db5bf9cc20a690460e37f95591/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19055.rs?ref=31ee68067efb53db5bf9cc20a690460e37f95591", "patch": "@@ -1,20 +0,0 @@\n-// @has issue_19055/trait.Any.html\n-pub trait Any {}\n-\n-impl<'any> Any + 'any {\n-    // @has - '//*[@id=\"method.is\"]' 'fn is'\n-    pub fn is<T: 'static>(&self) -> bool { loop {} }\n-\n-    // @has - '//*[@id=\"method.downcast_ref\"]' 'fn downcast_ref'\n-    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> { loop {} }\n-\n-    // @has - '//*[@id=\"method.downcast_mut\"]' 'fn downcast_mut'\n-    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> { loop {} }\n-}\n-\n-pub trait Foo {\n-    fn foo(&self) {}\n-}\n-\n-// @has - '//*[@id=\"method.foo\"]' 'fn foo'\n-impl Foo for Any {}"}, {"sha": "1952f723465d66c709f88ac903aa77d28346c822", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -2,11 +2,11 @@\n \n // @has foo/struct.Unsized.html\n // @has - '//div[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n-// @!has - '//div[@id=\"impl-Sized\"]/a[@class=\"srclink\"]' '[src]'\n+// @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' '[src]'\n // @has - '//div[@id=\"impl-Sync\"]/code' 'impl Sync for Unsized'\n-// @!has - '//div[@id=\"impl-Sync\"]/a[@class=\"srclink\"]' '[src]'\n+// @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' '[src]'\n // @has - '//div[@id=\"impl-Any\"]/code' 'impl<T> Any for T'\n-// @has - '//div[@id=\"impl-Any\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' '[src]'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "ddbe93febdc2526a9306312f790a1f07d7b0e04e", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521da71793805a87c4b8525c34b19f58eed498f/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=9521da71793805a87c4b8525c34b19f58eed498f", "patch": "@@ -38,23 +38,15 @@ impl MyTrait for Vec<u8> {\n }\n \n impl MyTrait for MyStruct {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"anchor\"]/@href' #method.trait_function-2\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}"}]}