{"sha": "99af523b68d3056c0ee355821b9b8f3c6fb5f504", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YWY1MjNiNjhkMzA1NmMwZWUzNTU4MjFiOWI4ZjNjNmZiNWY1MDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T14:00:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T14:36:06Z"}, "message": "Cleanup", "tree": {"sha": "af350966c71287e4531fb80897b26699f560a6a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af350966c71287e4531fb80897b26699f560a6a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99af523b68d3056c0ee355821b9b8f3c6fb5f504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99af523b68d3056c0ee355821b9b8f3c6fb5f504", "html_url": "https://github.com/rust-lang/rust/commit/99af523b68d3056c0ee355821b9b8f3c6fb5f504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99af523b68d3056c0ee355821b9b8f3c6fb5f504/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "html_url": "https://github.com/rust-lang/rust/commit/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "b3e2ff1c283f1440243ac803b3df4795797243f3", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -1037,7 +1037,7 @@ impl From<PerNs> for ScopeDef {\n             .or_else(|| def.take_values())\n             .map(|module_def_id| ScopeDef::ModuleDef(module_def_id.into()))\n             .or_else(|| {\n-                def.get_macros().map(|macro_def_id| ScopeDef::MacroDef(macro_def_id.into()))\n+                def.take_macros().map(|macro_def_id| ScopeDef::MacroDef(macro_def_id.into()))\n             })\n             .unwrap_or(ScopeDef::Unknown)\n     }"}, {"sha": "c06997cf102a7adb46b926c23977a820c6b8a0d1", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -82,7 +82,7 @@ impl Expander {\n     }\n \n     fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n-        self.crate_def_map.resolve_path(db, self.module.module_id, path).0.get_macros()\n+        self.crate_def_map.resolve_path(db, self.module.module_id, path).0.take_macros()\n     }\n }\n "}, {"sha": "f63c3dd64bac259bea90b5d257596ee727ba11c5", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -8,20 +8,23 @@\n //! actually true.\n \n pub mod db;\n+\n pub mod attr;\n pub mod path;\n pub mod type_ref;\n pub mod builtin_type;\n-pub mod adt;\n pub mod diagnostics;\n-pub mod expr;\n-pub mod body;\n-pub mod generics;\n-pub mod resolver;\n+pub mod per_ns;\n+\n+pub mod adt;\n pub mod data;\n+pub mod generics;\n pub mod lang_item;\n pub mod docs;\n-pub mod per_ns;\n+\n+pub mod expr;\n+pub mod body;\n+pub mod resolver;\n \n mod trace;\n mod nameres;"}, {"sha": "5919771b09a763bed4d801ccb99a04211f797f17", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -169,7 +169,7 @@ impl ModuleScope {\n     pub fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.items\n             .iter()\n-            .filter_map(|(name, res)| res.def.get_macros().map(|macro_| (name, macro_)))\n+            .filter_map(|(name, res)| res.def.take_macros().map(|macro_| (name, macro_)))\n     }\n \n     /// Iterate over all legacy textual scoped macros visable at the end of the module"}, {"sha": "df01a20e1afddb60837c96583f12a7d0e0db0a7e", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -476,7 +476,7 @@ where\n                 path,\n             );\n \n-            if let Some(def) = resolved_res.resolved_def.get_macros() {\n+            if let Some(def) = resolved_res.resolved_def.take_macros() {\n                 let call_id = self.db.intern_macro(MacroCallLoc { def, ast_id: *ast_id });\n                 resolved.push((*module_id, call_id, def));\n                 res = ReachedFixedPoint::No;"}, {"sha": "06ef6c9fc977fe34c7e1e7e11af2e1d69ec16a36", "filename": "crates/ra_hir_def/src/per_ns.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -44,10 +44,6 @@ impl PerNs {\n         self.types.is_none() && self.values.is_none() && self.macros.is_none()\n     }\n \n-    pub fn is_all(&self) -> bool {\n-        self.types.is_some() && self.values.is_some() && self.macros.is_some()\n-    }\n-\n     pub fn take_types(self) -> Option<ModuleDefId> {\n         self.types\n     }\n@@ -56,14 +52,10 @@ impl PerNs {\n         self.values\n     }\n \n-    pub fn get_macros(&self) -> Option<MacroDefId> {\n+    pub fn take_macros(self) -> Option<MacroDefId> {\n         self.macros\n     }\n \n-    pub fn only_macros(&self) -> PerNs {\n-        PerNs { types: None, values: None, macros: self.macros }\n-    }\n-\n     pub fn or(self, other: PerNs) -> PerNs {\n         PerNs {\n             types: self.types.or(other.types),"}, {"sha": "7182b8a4d680ccca14ab656d425523a5bcf76f1b", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99af523b68d3056c0ee355821b9b8f3c6fb5f504/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=99af523b68d3056c0ee355821b9b8f3c6fb5f504", "patch": "@@ -308,7 +308,7 @@ impl Resolver {\n \n     pub fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n         let (item_map, module) = self.module()?;\n-        item_map.resolve_path(db, module, path).0.get_macros()\n+        item_map.resolve_path(db, module, path).0.take_macros()\n     }\n \n     pub fn process_all_names(&self, db: &impl DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {"}]}