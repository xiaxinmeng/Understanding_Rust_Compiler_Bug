{"sha": "f4b711516d0ef53957c1f65590051ed9e43cb4a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YjcxMTUxNmQwZWY1Mzk1N2MxZjY1NTkwMDUxZWQ5ZTQzY2I0YTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-02T15:00:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-08T23:20:37Z"}, "message": "move `user_annotated_ty_for_adt` into a helper trait", "tree": {"sha": "ff651d9eaf2e3ac7371bf56572ade2b01114064d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff651d9eaf2e3ac7371bf56572ade2b01114064d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b711516d0ef53957c1f65590051ed9e43cb4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b711516d0ef53957c1f65590051ed9e43cb4a9", "html_url": "https://github.com/rust-lang/rust/commit/f4b711516d0ef53957c1f65590051ed9e43cb4a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b711516d0ef53957c1f65590051ed9e43cb4a9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423d8109868c1f926f2cfcc3bff980c3daa515fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/423d8109868c1f926f2cfcc3bff980c3daa515fd", "html_url": "https://github.com/rust-lang/rust/commit/423d8109868c1f926f2cfcc3bff980c3daa515fd"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "ef7be184ab051083b9362a289197841d195ad50e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f4b711516d0ef53957c1f65590051ed9e43cb4a9", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use hair::cx::Cx;\n use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n+use hair::util::UserAnnotatedTyHelpers;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::mir::interpret::GlobalId;\n use rustc::ty::{self, AdtKind, Ty};\n@@ -475,7 +476,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 adt_def: adt,\n                                 variant_index: 0,\n                                 substs,\n-                                user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt),\n+                                user_ty: cx.user_annotated_ty_for_adt(expr.hir_id, adt),\n                                 fields: field_refs(cx, fields),\n                                 base: base.as_ref().map(|base| {\n                                     FruInfo {\n@@ -501,7 +502,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                         adt_def: adt,\n                                         variant_index: index,\n                                         substs,\n-                                        user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt),\n+                                        user_ty: cx.user_annotated_ty_for_adt(expr.hir_id, adt),\n                                         fields: field_refs(cx, fields),\n                                         base: None,\n                                     }\n@@ -788,7 +789,7 @@ fn user_annotated_ty_for_def(\n         Def::StructCtor(_def_id, CtorKind::Const) |\n         Def::VariantCtor(_def_id, CtorKind::Const) =>\n             match &cx.tables().node_id_to_type(hir_id).sty {\n-                ty::Adt(adt_def, _) => user_annotated_ty_for_adt(cx, hir_id, adt_def),\n+                ty::Adt(adt_def, _) => cx.user_annotated_ty_for_adt(hir_id, adt_def),\n                 sty => bug!(\"unexpected sty: {:?}\", sty),\n             },\n \n@@ -804,7 +805,7 @@ fn user_annotated_ty_for_def(\n                     }))\n                 }\n                 ty::Adt(ref adt_def, _) => {\n-                    user_annotated_ty_for_adt(cx, hir_id, adt_def)\n+                    cx.user_annotated_ty_for_adt(hir_id, adt_def)\n                 }\n                 _ => {\n                     bug!(\"unexpected sty: {:?}\", sty)\n@@ -816,19 +817,6 @@ fn user_annotated_ty_for_def(\n     }\n }\n \n-fn user_annotated_ty_for_adt(\n-    cx: &mut Cx<'a, 'gcx, 'tcx>,\n-    hir_id: hir::HirId,\n-    adt_def: &'tcx AdtDef,\n-) -> Option<CanonicalTy<'tcx>> {\n-    let user_substs = cx.tables().user_substs(hir_id)?;\n-    Some(user_substs.unchecked_map(|user_substs| {\n-        // Here, we just pair an `AdtDef` with the\n-        // `user_substs`, so no new types etc are introduced.\n-        cx.tcx().mk_adt(adt_def, user_substs)\n-    }))\n-}\n-\n fn method_callee<'a, 'gcx, 'tcx>(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     expr: &hir::Expr,\n@@ -943,7 +931,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n                         substs,\n-                        user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt_def),\n+                        user_ty: cx.user_annotated_ty_for_adt(expr.hir_id, adt_def),\n                         fields: vec![],\n                         base: None,\n                     }"}, {"sha": "5f798135966d49c25068313a533e628e215dc51f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=f4b711516d0ef53957c1f65590051ed9e43cb4a9", "patch": "@@ -15,6 +15,7 @@\n //!\n \n use hair::*;\n+use hair::util::UserAnnotatedTyHelpers;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n@@ -272,6 +273,16 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n }\n \n+impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx> {\n+        self.tcx()\n+    }\n+\n+    fn tables(&self) -> &ty::TypeckTables<'tcx> {\n+        self.tables()\n+    }\n+}\n+\n fn lint_level_for_hir_id(tcx: TyCtxt, mut id: ast::NodeId) -> ast::NodeId {\n     // Right now we insert a `with_ignore` node in the dep graph here to\n     // ignore the fact that `lint_levels` below depends on the entire crate."}, {"sha": "e4f88e4fcc3ba2e6238314ee14aa63d813707ca8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=f4b711516d0ef53957c1f65590051ed9e43cb4a9", "patch": "@@ -29,6 +29,8 @@ pub mod cx;\n pub mod pattern;\n pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};\n \n+mod util;\n+\n #[derive(Copy, Clone, Debug)]\n pub enum LintLevel {\n     Inherited,"}, {"sha": "803ce615747edffcc0608de28f37f53dd4f2d068", "filename": "src/librustc_mir/hair/util.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b711516d0ef53957c1f65590051ed9e43cb4a9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=f4b711516d0ef53957c1f65590051ed9e43cb4a9", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir;\n+use rustc::ty::{self, AdtDef, CanonicalTy, TyCtxt};\n+\n+crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx>;\n+\n+    fn tables(&self) -> &ty::TypeckTables<'tcx>;\n+\n+    fn user_annotated_ty_for_adt(\n+        &self,\n+        hir_id: hir::HirId,\n+        adt_def: &'tcx AdtDef,\n+    ) -> Option<CanonicalTy<'tcx>> {\n+        let user_substs = self.tables().user_substs(hir_id)?;\n+        Some(user_substs.unchecked_map(|user_substs| {\n+            // Here, we just pair an `AdtDef` with the\n+            // `user_substs`, so no new types etc are introduced.\n+            self.tcx().mk_adt(adt_def, user_substs)\n+        }))\n+    }\n+}"}]}