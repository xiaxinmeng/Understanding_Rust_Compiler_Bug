{"sha": "e3cda83f90a5e64ccf288438466e6c447df253a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2RhODNmOTBhNWU2NGNjZjI4ODQzODQ2NmU2YzQ0N2RmMjUzYTg=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-01-23T04:25:41Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-01-23T04:34:00Z"}, "message": "Added basic support for completing `fn` for trait impl.", "tree": {"sha": "78e4d56d4195e42bc68c21f8e6a91b5671a79c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e4d56d4195e42bc68c21f8e6a91b5671a79c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3cda83f90a5e64ccf288438466e6c447df253a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cda83f90a5e64ccf288438466e6c447df253a8", "html_url": "https://github.com/rust-lang/rust/commit/e3cda83f90a5e64ccf288438466e6c447df253a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3cda83f90a5e64ccf288438466e6c447df253a8/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb8a461225800ca605a9f2e997cd5e82fb37574", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb8a461225800ca605a9f2e997cd5e82fb37574", "html_url": "https://github.com/rust-lang/rust/commit/2fb8a461225800ca605a9f2e997cd5e82fb37574"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "f31f2593cdd1d6d38f84c797f13cc7a3faaac58d", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3cda83f90a5e64ccf288438466e6c447df253a8/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cda83f90a5e64ccf288438466e6c447df253a8/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=e3cda83f90a5e64ccf288438466e6c447df253a8", "patch": "@@ -15,6 +15,7 @@ mod complete_path;\n mod complete_scope;\n mod complete_postfix;\n mod complete_macro_in_item_position;\n+mod complete_impl_fn;\n \n use ra_db::SourceDatabase;\n \n@@ -73,5 +74,7 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_pattern::complete_pattern(&mut acc, &ctx);\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n+    complete_impl_fn::complete_impl_fn(&mut acc, &ctx);\n+    \n     Some(acc)\n }"}, {"sha": "6d464cc1f282b9c13c6ea8a7fd107ef867d54600", "filename": "crates/ra_ide/src/completion/complete_impl_fn.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e3cda83f90a5e64ccf288438466e6c447df253a8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_impl_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cda83f90a5e64ccf288438466e6c447df253a8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_impl_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_impl_fn.rs?ref=e3cda83f90a5e64ccf288438466e6c447df253a8", "patch": "@@ -0,0 +1,80 @@\n+\n+use crate::completion::{CompletionContext, Completions};\n+\n+use hir::{ self, db::HirDatabase, HasSource };\n+\n+use ra_syntax::{ ast, ast::AstNode };\n+\n+pub(crate) fn complete_impl_fn(acc: &mut Completions, ctx: &CompletionContext) {\n+    let impl_trait = ast::ItemList::cast(ctx.token.parent())\n+        .and_then(|item_list| item_list.syntax().parent())\n+        .and_then(|item_list_parent| ast::ImplBlock::cast(item_list_parent))\n+        .and_then(|impl_block| resolve_target_trait(ctx.db, &ctx.analyzer, &impl_block));\n+\n+    if let Some(x) = &impl_trait {\n+        for trait_item in x.0.items(ctx.db) {\n+            match trait_item {\n+                hir::AssocItem::Function(f) => acc.add_function_impl(ctx, f),\n+                _ => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn resolve_target_trait(\n+    db: &impl HirDatabase,\n+    analyzer: &hir::SourceAnalyzer,\n+    impl_block: &ast::ImplBlock\n+) -> Option<(hir::Trait, ast::TraitDef)> {\n+    let ast_path = impl_block\n+        .target_trait()\n+        .map(|it| it.syntax().clone())\n+        .and_then(ast::PathType::cast)?\n+        .path()?;\n+\n+    match analyzer.resolve_path(db, &ast_path) {\n+        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => {\n+            Some((def, def.source(db).value))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+    use insta::assert_debug_snapshot;\n+\n+    fn complete(code: &str) -> Vec<CompletionItem> {\n+        do_completion(code, CompletionKind::Reference)\n+    }\n+\n+    #[test]\n+    fn single_function() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn foo();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                <|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn foo()\",\n+                source_range: [138; 138),\n+                delete: [138; 138),\n+                insert: \"fn foo() { $0 }\",\n+                kind: Function,\n+                lookup: \"foo\",\n+            },\n+        ]\n+        \"###);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d0a43261fb5d3becc62091a7a59e3dea5d942ccf", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e3cda83f90a5e64ccf288438466e6c447df253a8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cda83f90a5e64ccf288438466e6c447df253a8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e3cda83f90a5e64ccf288438466e6c447df253a8", "patch": "@@ -129,6 +129,39 @@ impl Completions {\n         self.add_function_with_name(ctx, None, func)\n     }\n \n+    pub(crate) fn add_function_impl(&mut self, ctx: &CompletionContext, func: hir::Function) {\n+        use crate::display::FunctionSignature;\n+\n+        let display = FunctionSignature::from_hir(ctx.db, func.clone());\n+\n+        let func_name = func.name(ctx.db);\n+\n+        let mut builder = CompletionItem::new(\n+            CompletionKind::Reference, \n+            ctx.source_range(), \n+            format!(\"fn {}()\", func_name.to_string()))\n+            .set_documentation(func.docs(ctx.db));\n+\n+        let completion_kind = if func.has_self_param(ctx.db) {\n+            CompletionItemKind::Method\n+        } else {\n+            CompletionItemKind::Function\n+        };\n+        \n+        let snippet = {\n+            let mut s = format!(\"{}\", display);\n+            s.push_str(\" { $0 }\");\n+            s\n+        };\n+\n+        builder = builder\n+            .insert_text(snippet)\n+            .kind(completion_kind)\n+            .lookup_by(func_name.to_string());\n+\n+        self.add(builder.build());\n+    }\n+\n     fn guess_macro_braces(&self, macro_name: &str, docs: &str) -> &'static str {\n         let mut votes = [0, 0, 0];\n         for (idx, s) in docs.match_indices(&macro_name) {"}]}