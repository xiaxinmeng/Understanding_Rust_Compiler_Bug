{"sha": "c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTllOGZkOGIwMTA2YmIyZTAzMWU3NmFjMWJlODliZDEwYTA2NzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T14:06:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T14:06:07Z"}, "message": "G: unsafe fn", "tree": {"sha": "3badb041e7a5551f54fe2b31868d99bb158eed10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3badb041e7a5551f54fe2b31868d99bb158eed10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "html_url": "https://github.com/rust-lang/rust/commit/c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85c42fba1291f1cc41fb7bfec63117895b394fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/85c42fba1291f1cc41fb7bfec63117895b394fc5", "html_url": "https://github.com/rust-lang/rust/commit/85c42fba1291f1cc41fb7bfec63117895b394fc5"}], "stats": {"total": 159, "additions": 128, "deletions": 31}, "files": [{"sha": "588fca4c61a0ff129b44bffdb3f18781020f772f", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 64, "deletions": 28, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -81,38 +81,74 @@ fn item(p: &mut Parser) {\n                 CONST_ITEM\n             }\n         },\n-        // test unsafe_trait\n-        // unsafe trait T {}\n-        UNSAFE_KW if la == TRAIT_KW => {\n+        UNSAFE_KW => {\n             p.bump();\n-            traits::trait_item(p);\n-            TRAIT_ITEM\n-        }\n+            let la = p.nth(1);\n+            match p.current() {\n+                // test unsafe_trait\n+                // unsafe trait T {}\n+                TRAIT_KW => {\n+                    traits::trait_item(p);\n+                    TRAIT_ITEM\n+                }\n \n-        // test unsafe_auto_trait\n-        // unsafe auto trait T {}\n-        UNSAFE_KW if p.at_kw(1, \"auto\") && p.nth(2) == TRAIT_KW => {\n-            p.bump();\n-            p.bump_remap(AUTO_KW);\n-            traits::trait_item(p);\n-            TRAIT_ITEM\n-        }\n+                // test unsafe_auto_trait\n+                // unsafe auto trait T {}\n+                IDENT if p.at_kw(\"auto\") && la == TRAIT_KW => {\n+                    p.bump_remap(AUTO_KW);\n+                    traits::trait_item(p);\n+                    TRAIT_ITEM\n+                }\n \n-        // test unsafe_impl\n-        // unsafe impl Foo {}\n-        UNSAFE_KW if la == IMPL_KW => {\n-            p.bump();\n-            traits::impl_item(p);\n-            IMPL_ITEM\n-        }\n+                // test unsafe_impl\n+                // unsafe impl Foo {}\n+                IMPL_KW => {\n+                    traits::impl_item(p);\n+                    IMPL_ITEM\n+                }\n \n-        // test unsafe_default_impl\n-        // unsafe default impl Foo {}\n-        UNSAFE_KW if p.at_kw(1, \"default\") && p.nth(2) == IMPL_KW => {\n-            p.bump();\n-            p.bump_remap(DEFAULT_KW);\n-            traits::impl_item(p);\n-            IMPL_ITEM\n+                // test unsafe_default_impl\n+                // unsafe default impl Foo {}\n+                IDENT if p.at_kw(\"default\") && la == IMPL_KW => {\n+                    p.bump_remap(DEFAULT_KW);\n+                    traits::impl_item(p);\n+                    IMPL_ITEM\n+                }\n+\n+                // test unsafe_extern_fn\n+                // unsafe extern \"C\" fn foo() {}\n+                EXTERN_KW => {\n+                    abi(p);\n+                    if !p.at(FN_KW) {\n+                        item.abandon(p);\n+                        p.error().message(\"expected function\").emit();\n+                        return\n+                    }\n+                    fn_item(p);\n+                    FN_ITEM\n+                }\n+\n+                // test unsafe_fn\n+                // unsafe fn foo() {}\n+                FN_KW => {\n+                    fn_item(p);\n+                    FN_ITEM\n+                }\n+\n+                t => {\n+                    item.abandon(p);\n+                    let message = \"expected `trait`, `impl` or `fn`\";\n+\n+                    // test unsafe_block_in_mod\n+                    // fn foo(){} unsafe { } fn bar(){}\n+                    if t == L_CURLY {\n+                        error_block(p, message);\n+                    } else {\n+                        p.error().message(message).emit();\n+                    }\n+                    return;\n+                }\n+            }\n         }\n \n         MOD_KW => {"}, {"sha": "53a116fb7fd6ffc060639d3073f640baf5c2b0ab", "filename": "src/parser/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/src%2Fparser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/src%2Fparser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fparser.rs?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -1,6 +1,6 @@\n use super::Event;\n use super::input::{InputPosition, ParserInput};\n-use SyntaxKind::{self, EOF, TOMBSTONE, IDENT};\n+use SyntaxKind::{self, EOF, TOMBSTONE};\n \n pub(crate) struct Marker {\n     pos: u32,\n@@ -161,8 +161,8 @@ impl<'t> Parser<'t> {\n         self.inp.kind(self.pos + n)\n     }\n \n-    pub(crate) fn at_kw(&self, n: u32, t: &str) -> bool {\n-        self.nth(n) == IDENT && self.inp.text(self.pos + n) == t\n+    pub(crate) fn at_kw(&self, t: &str) -> bool {\n+        self.inp.text(self.pos) == t\n     }\n \n     pub(crate) fn current(&self) -> SyntaxKind {"}, {"sha": "33cfc4cd7a6c1f2610768fc7b9e95e0239de9bd8", "filename": "tests/data/parser/inline/0011_unsafe_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0011_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0011_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0011_unsafe_fn.rs?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -0,0 +1 @@\n+unsafe fn foo() {}"}, {"sha": "23eca1d655f95f36eee007231bd5aa47b3accf0f", "filename": "tests/data/parser/inline/0011_unsafe_fn.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0011_unsafe_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0011_unsafe_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0011_unsafe_fn.txt?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 19)\n+  FN_ITEM@[0; 19)\n+    UNSAFE_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    FN_KW@[7; 9)\n+    WHITESPACE@[9; 10)\n+    IDENT@[10; 13) \"foo\"\n+    L_PAREN@[13; 14)\n+    R_PAREN@[14; 15)\n+    WHITESPACE@[15; 16)\n+    L_CURLY@[16; 17)\n+    R_CURLY@[17; 18)\n+    WHITESPACE@[18; 19)"}, {"sha": "1295c2cd22bf5ee8ade672bd4c9df78814a18bcf", "filename": "tests/data/parser/inline/0012_unsafe_extern_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0012_unsafe_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0012_unsafe_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0012_unsafe_extern_fn.rs?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -0,0 +1 @@\n+unsafe extern \"C\" fn foo() {}"}, {"sha": "547cb499d7c3508ee1a3245557b8563b526d2f1a", "filename": "tests/data/parser/inline/0012_unsafe_extern_fn.txt", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0012_unsafe_extern_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0012_unsafe_extern_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0012_unsafe_extern_fn.txt?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -0,0 +1,18 @@\n+FILE@[0; 30)\n+  FN_ITEM@[0; 30)\n+    UNSAFE_KW@[0; 6)\n+    ABI@[6; 18)\n+      WHITESPACE@[6; 7)\n+      EXTERN_KW@[7; 13)\n+      WHITESPACE@[13; 14)\n+      STRING@[14; 17)\n+      WHITESPACE@[17; 18)\n+    FN_KW@[18; 20)\n+    WHITESPACE@[20; 21)\n+    IDENT@[21; 24) \"foo\"\n+    L_PAREN@[24; 25)\n+    R_PAREN@[25; 26)\n+    WHITESPACE@[26; 27)\n+    L_CURLY@[27; 28)\n+    R_CURLY@[28; 29)\n+    WHITESPACE@[29; 30)"}, {"sha": "26141e9049106e64f4615c69344a35332b3e11cb", "filename": "tests/data/parser/inline/0013_unsafe_block_in_mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.rs?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -0,0 +1 @@\n+fn foo(){} unsafe { } fn bar(){}"}, {"sha": "2e319be735f15de2ee83fef201918883a284b9d4", "filename": "tests/data/parser/inline/0013_unsafe_block_in_mod.txt", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c119e8fd8b0106bb2e031e76ac1be89bd10a0674/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt?ref=c119e8fd8b0106bb2e031e76ac1be89bd10a0674", "patch": "@@ -0,0 +1,27 @@\n+FILE@[0; 33)\n+  FN_ITEM@[0; 11)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    IDENT@[3; 6) \"foo\"\n+    L_PAREN@[6; 7)\n+    R_PAREN@[7; 8)\n+    L_CURLY@[8; 9)\n+    R_CURLY@[9; 10)\n+    WHITESPACE@[10; 11)\n+  UNSAFE_KW@[11; 17)\n+  ERROR@[17; 22)\n+  err: `expected `trait`, `impl` or `fn``\n+    WHITESPACE@[17; 18)\n+    L_CURLY@[18; 19)\n+    WHITESPACE@[19; 20)\n+    R_CURLY@[20; 21)\n+    WHITESPACE@[21; 22)\n+  FN_ITEM@[22; 33)\n+    FN_KW@[22; 24)\n+    WHITESPACE@[24; 25)\n+    IDENT@[25; 28) \"bar\"\n+    L_PAREN@[28; 29)\n+    R_PAREN@[29; 30)\n+    L_CURLY@[30; 31)\n+    R_CURLY@[31; 32)\n+    WHITESPACE@[32; 33)"}]}