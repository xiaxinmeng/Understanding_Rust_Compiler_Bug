{"sha": "623277e7e0583ad413a7fa0c886c65ebb5b4adc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMzI3N2U3ZTA1ODNhZDQxM2E3ZmEwYzg4NmM2NWViYjViNGFkYzk=", "commit": {"author": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-12-14T14:50:19Z"}, "committer": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-12-14T14:50:19Z"}, "message": "Add cargo-fmt binary\n\nAdd a new utility, which formats all readable .rs files in the src\ndirectory of the crate using rustfmt. Both binaries can be installed\nusing cargo install rustfmt. cargo-fmt can be used as a Cargo\nsubcommand - cargo fmt.", "tree": {"sha": "c9b6b99a734075c43777e1524834aa8a060b03c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b6b99a734075c43777e1524834aa8a060b03c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/623277e7e0583ad413a7fa0c886c65ebb5b4adc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/623277e7e0583ad413a7fa0c886c65ebb5b4adc9", "html_url": "https://github.com/rust-lang/rust/commit/623277e7e0583ad413a7fa0c886c65ebb5b4adc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/623277e7e0583ad413a7fa0c886c65ebb5b4adc9/comments", "author": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681245f3fb9d7b5564294bc765e435d30a8e1711", "url": "https://api.github.com/repos/rust-lang/rust/commits/681245f3fb9d7b5564294bc765e435d30a8e1711", "html_url": "https://github.com/rust-lang/rust/commit/681245f3fb9d7b5564294bc765e435d30a8e1711"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "9c7d83705486b4159cc692a0ba0e27475f868380", "filename": "src/bin/cargo-fmt.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/623277e7e0583ad413a7fa0c886c65ebb5b4adc9/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623277e7e0583ad413a7fa0c886c65ebb5b4adc9/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=623277e7e0583ad413a7fa0c886c65ebb5b4adc9", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Inspired by Paul Woolcock's cargo-fmt (https://github.com/pwoolcoc/cargo-fmt/)\n+\n+#![cfg(not(test))]\n+#![cfg(feature=\"cargo-fmt\")]\n+\n+extern crate getopts;\n+extern crate walkdir;\n+extern crate rustc_serialize;\n+\n+use std::path::PathBuf;\n+use std::process::Command;\n+use std::env;\n+use std::str;\n+\n+use getopts::Options;\n+use walkdir::{WalkDir, DirEntry};\n+use rustc_serialize::json::Json;\n+\n+fn main() {\n+    let mut opts = getopts::Options::new();\n+    opts.optflag(\"h\", \"help\", \"show this message\");\n+\n+    let matches = match opts.parse(env::args().skip(1)) {\n+        Ok(m) => m,\n+        Err(e) => {\n+            print_usage(&opts, &e.to_string());\n+            return;\n+        }\n+    };\n+\n+    if matches.opt_present(\"h\") {\n+        print_usage(&opts, \"\");\n+    } else {\n+        format_crate(&opts);\n+    }\n+}\n+\n+fn print_usage(opts: &Options, reason: &str) {\n+    let msg = format!(\"{}\\nusage: cargo fmt [options]\", reason);\n+    println!(\"{}\\nThis utility formats all readable .rs files in the src directory of the \\\n+              current crate using rustfmt.\",\n+             opts.usage(&msg));\n+}\n+\n+fn format_crate(opts: &Options) {\n+    let mut root = match locate_root() {\n+        Ok(r) => r,\n+        Err(e) => {\n+            print_usage(opts, &e.to_string());\n+            return;\n+        }\n+    };\n+\n+    // Currently only files in [root]/src can be formatted\n+    root.push(\"src\");\n+    // All unreadable or non .rs files are skipped\n+    let files: Vec<_> = WalkDir::new(root)\n+                            .into_iter()\n+                            .filter(is_rs_file)\n+                            .filter_map(|f| f.ok())\n+                            .map(|e| e.path().to_owned())\n+                            .collect();\n+\n+    format_files(&files).unwrap_or_else(|e| print_usage(opts, &e.to_string()));\n+}\n+\n+fn locate_root() -> Result<PathBuf, std::io::Error> {\n+    // This seems adequate, as cargo-fmt can only be used systems that have Cargo installed\n+    let output = try!(Command::new(\"cargo\").arg(\"locate-project\").output());\n+    if output.status.success() {\n+        // We assume cargo locate-project is not broken and\n+        // it will output a valid json document\n+        let data = &String::from_utf8(output.stdout).unwrap();\n+        let json = Json::from_str(data).unwrap();\n+        let root = PathBuf::from(json.find(\"root\").unwrap().as_string().unwrap());\n+\n+        // root.parent() should never fail if locate-project's output is correct\n+        Ok(root.parent().unwrap().to_owned())\n+    } else {\n+        // This happens when cargo-fmt is not used inside a crate\n+        Err(std::io::Error::new(std::io::ErrorKind::NotFound,\n+                                str::from_utf8(&output.stderr).unwrap()))\n+    }\n+}\n+\n+fn is_rs_file(entry: &Result<walkdir::DirEntry, walkdir::Error>) -> bool {\n+    match *entry {\n+        Ok(ref file) => {\n+            match file.path().extension() {\n+                Some(ext) => ext == \"rs\",\n+                None => false,\n+            }\n+        }\n+        Err(_) => false,\n+    }\n+}\n+\n+fn format_files(files: &Vec<PathBuf>) -> Result<(), std::io::Error> {\n+    let mut command = try!(Command::new(\"rustfmt\")\n+                               .arg(\"--write-mode=overwrite\")\n+                               .args(files)\n+                               .spawn());\n+    try!(command.wait());\n+\n+    Ok(())\n+}"}]}