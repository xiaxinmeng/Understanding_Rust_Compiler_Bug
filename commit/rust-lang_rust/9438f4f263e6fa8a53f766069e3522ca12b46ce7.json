{"sha": "9438f4f263e6fa8a53f766069e3522ca12b46ce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzhmNGYyNjNlNmZhOGE1M2Y3NjYwNjllMzUyMmNhMTJiNDZjZTc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-31T15:05:43Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-31T15:15:23Z"}, "message": "Rustup to 1.9.0-nightly (30a3849f2 2016-03-30)", "tree": {"sha": "e8c5700d6d6282dcfb279bfa5a838e1e1dd020e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c5700d6d6282dcfb279bfa5a838e1e1dd020e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9438f4f263e6fa8a53f766069e3522ca12b46ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9438f4f263e6fa8a53f766069e3522ca12b46ce7", "html_url": "https://github.com/rust-lang/rust/commit/9438f4f263e6fa8a53f766069e3522ca12b46ce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9438f4f263e6fa8a53f766069e3522ca12b46ce7/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f176336534714ea3bffb803e5907b352deaf8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f176336534714ea3bffb803e5907b352deaf8c5", "html_url": "https://github.com/rust-lang/rust/commit/4f176336534714ea3bffb803e5907b352deaf8c5"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "e5f54c128ef6c063baa17b90e5832a3e60b3df3c", "filename": "src/array_indexing.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,9 +1,10 @@\n use rustc::lint::*;\n-use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n+use rustc::middle::const_val::ConstVal;\n use rustc::ty::TyArray;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n+use rustc_const_math::ConstInt;\n use rustc_front::hir::*;\n-use rustc_const_eval::ConstInt;\n use syntax::ast::RangeLimits;\n use utils;\n "}, {"sha": "cbe601ba1b4637daaee0f25ec374ffba73583da5", "filename": "src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,11 +1,10 @@\n use rustc::lint::*;\n-use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::{Def, PathResolution};\n+use rustc_const_eval::lookup_const_by_id;\n use rustc_front::hir::*;\n use rustc_front::util::is_comparison_binop;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n-\n use utils::span_lint;\n \n /// **What it does:** This lint checks for incompatible bit masks in comparisons."}, {"sha": "73f2bc4653a1abff2e6354ade715a6fe2c799f7c", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,10 +1,10 @@\n #![allow(cast_possible_truncation)]\n \n use rustc::lint::LateContext;\n-use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::{Def, PathResolution};\n+use rustc_const_eval::lookup_const_by_id;\n+use rustc_const_math::{ConstInt, ConstUsize, ConstIsize};\n use rustc_front::hir::*;\n-use rustc_const_eval::{ConstInt, ConstUsize, ConstIsize};\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n use std::hash::{Hash, Hasher};"}, {"sha": "0e2a7a5304fc56b0cae28b8256a5561d37836da9", "filename": "src/enum_clike.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_clike.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,9 +1,10 @@\n //! lint on C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n \n use rustc::lint::*;\n-use syntax::attr::*;\n+use rustc::middle::const_val::ConstVal;\n+use rustc_const_math::*;\n use rustc_front::hir::*;\n-use rustc::middle::const_eval::{ConstVal, EvalHint, eval_const_expr_partial};\n+use syntax::attr::*;\n use utils::span_lint;\n \n /// **What it does:** Lints on C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`."}, {"sha": "c25047b87b417b4fa57f66278a63fea42398792d", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Span;\n use utils::{span_lint, snippet, in_macro};\n-use rustc_const_eval::ConstInt;\n+use rustc_const_math::ConstInt;\n \n /// **What it does:** This lint checks for identity operations, e.g. `x + 0`.\n ///"}, {"sha": "75970449582f0aa1f997d75bf533dd4787095641", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -42,6 +42,7 @@ extern crate quine_mc_cluskey;\n \n extern crate rustc_plugin;\n extern crate rustc_const_eval;\n+extern crate rustc_const_math;\n use rustc_plugin::Registry;\n \n pub mod consts;"}, {"sha": "20d0fc026d15396da5220eeba955db29bb754a5f", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,11 +1,12 @@\n use reexport::*;\n use rustc::front::map::Node::NodeBlock;\n use rustc::lint::*;\n-use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::const_eval::{ConstVal, eval_const_expr_partial};\n+use rustc::middle::const_val::ConstVal;\n use rustc::middle::def::Def;\n use rustc::middle::region::CodeExtent;\n use rustc::ty;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n use rustc_front::hir::*;\n use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use std::borrow::Cow;"}, {"sha": "40013209e57a7afa3b1a3e6f769df7120fc6772b", "filename": "src/matches.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,9 +1,10 @@\n use rustc::lint::*;\n-use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n+use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n+use rustc_const_math::ConstInt;\n use rustc_front::hir::*;\n-use rustc_const_eval::ConstInt;\n use std::cmp::Ordering;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;"}, {"sha": "3ba6bfc9b41fa8abfb7fc1a7ef23ad982b84ae97", "filename": "src/methods.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,9 +1,10 @@\n use rustc::lint::*;\n-use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::const_eval::{ConstVal, eval_const_expr_partial};\n+use rustc::middle::const_val::ConstVal;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty::subst::{Subst, TypeSpace};\n use rustc::ty;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n use rustc_front::hir::*;\n use std::borrow::Cow;\n use std::fmt;"}, {"sha": "a6cfec276e556ec59acd3fa950826bda351c34f1", "filename": "src/misc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,9 +1,9 @@\n use reexport::*;\n use rustc::lint::*;\n-use rustc::middle::const_eval::ConstVal::Float;\n-use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::const_eval::eval_const_expr_partial;\n+use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n use rustc_front::hir::*;\n use rustc_front::intravisit::FnKind;\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n@@ -180,7 +180,7 @@ impl LateLintPass for FloatCmp {\n \n fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n     let res = eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None);\n-    if let Ok(Float(val)) = res {\n+    if let Ok(ConstVal::Float(val)) = res {\n         val == 0.0 || val == ::std::f64::INFINITY || val == ::std::f64::NEG_INFINITY\n     } else {\n         false"}, {"sha": "46ee7776d66dd7f10777c5732bbb71397737e057", "filename": "src/regex.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,7 +1,8 @@\n use regex_syntax;\n use rustc::lint::*;\n-use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n+use rustc::middle::const_val::ConstVal;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n use rustc_front::hir::*;\n use std::collections::HashSet;\n use std::error::Error;"}, {"sha": "8e9ac1217f07ef30c48aabcb39a476b8b4b6cdf0", "filename": "src/types.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -1,6 +1,6 @@\n use reexport::*;\n use rustc::lint::*;\n-use rustc::middle::{const_eval, def};\n+use rustc::middle::def;\n use rustc::ty;\n use rustc_front::hir::*;\n use rustc_front::intravisit::{FnKind, Visitor, walk_ty};\n@@ -683,10 +683,11 @@ fn detect_absurd_comparison<'a>(cx: &LateContext, op: BinOp_, lhs: &'a Expr, rhs\n }\n \n fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeExpr<'a>> {\n-    use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-    use types::ExtremeType::*;\n-    use rustc::middle::const_eval::ConstVal::*;\n+    use rustc::middle::const_val::ConstVal::*;\n+    use rustc_const_math::*;\n+    use rustc_const_eval::EvalHint::ExprTypeChecked;\n     use rustc_const_eval::*;\n+    use types::ExtremeType::*;\n \n     let ty = &cx.tcx.expr_ty(expr).sty;\n \n@@ -695,7 +696,7 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         _ => return None,\n     };\n \n-    let cv = match const_eval::eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None) {\n+    let cv = match eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None) {\n         Ok(val) => val,\n         Err(_) => return None,\n     };"}, {"sha": "b7b2f6a3f835b89bb8eda5648446b23ae6801a1f", "filename": "tests/consts.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9438f4f263e6fa8a53f766069e3522ca12b46ce7/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438f4f263e6fa8a53f766069e3522ca12b46ce7/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=9438f4f263e6fa8a53f766069e3522ca12b46ce7", "patch": "@@ -2,22 +2,19 @@\n #![feature(rustc_private)]\n \n extern crate clippy;\n-extern crate syntax;\n extern crate rustc;\n-extern crate rustc_front;\n extern crate rustc_const_eval;\n+extern crate rustc_const_math;\n+extern crate rustc_front;\n+extern crate syntax;\n \n+use clippy::consts::{constant_simple, Constant, FloatWidth};\n+use rustc_const_math::ConstInt;\n use rustc_front::hir::*;\n-use rustc_const_eval::ConstInt;\n+use syntax::ast::{LitIntType, LitKind, StrStyle};\n+use syntax::codemap::{Spanned, COMMAND_LINE_SP};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n-use syntax::codemap::{Spanned, COMMAND_LINE_SP};\n-\n-use syntax::ast::LitKind;\n-use syntax::ast::LitIntType;\n-use syntax::ast::StrStyle;\n-\n-use clippy::consts::{constant_simple, Constant, FloatWidth};\n \n fn spanned<T>(t: T) -> Spanned<T> {\n     Spanned{ node: t, span: COMMAND_LINE_SP }"}]}