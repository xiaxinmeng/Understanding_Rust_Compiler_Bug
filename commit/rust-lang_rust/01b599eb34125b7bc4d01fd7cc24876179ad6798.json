{"sha": "01b599eb34125b7bc4d01fd7cc24876179ad6798", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjU5OWViMzQxMjViN2JjNGQwMWZkN2NjMjQ4NzYxNzlhZDY3OTg=", "commit": {"author": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-11-07T22:51:38Z"}, "committer": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-11-07T23:00:14Z"}, "message": "Add BitXor to EnumSet.", "tree": {"sha": "4943b34123305ca20b4ed24d60fbea890d67c5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4943b34123305ca20b4ed24d60fbea890d67c5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b599eb34125b7bc4d01fd7cc24876179ad6798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b599eb34125b7bc4d01fd7cc24876179ad6798", "html_url": "https://github.com/rust-lang/rust/commit/01b599eb34125b7bc4d01fd7cc24876179ad6798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b599eb34125b7bc4d01fd7cc24876179ad6798/comments", "author": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "html_url": "https://github.com/rust-lang/rust/commit/6ee56c9a5febad45865b7d41422b7ae4d996fcaa"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "0737620690b6fc6183a3d5e3e268f7129d09b62a", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01b599eb34125b7bc4d01fd7cc24876179ad6798/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b599eb34125b7bc4d01fd7cc24876179ad6798/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=01b599eb34125b7bc4d01fd7cc24876179ad6798", "patch": "@@ -16,7 +16,6 @@\n use core::prelude::*;\n use core::fmt;\n \n-// FIXME(conventions): implement BitXor\n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n // FIXME(conventions): implement len\n \n@@ -196,6 +195,12 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n     }\n }\n \n+impl<E:CLike> BitXor<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+    fn bitxor(&self, e: &EnumSet<E>) -> EnumSet<E> {\n+        EnumSet {bits: self.bits ^ e.bits}\n+    }\n+}\n+\n /// An iterator over an EnumSet\n pub struct Items<E> {\n     index: uint,"}]}