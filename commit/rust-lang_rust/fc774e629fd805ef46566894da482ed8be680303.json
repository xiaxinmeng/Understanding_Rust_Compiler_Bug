{"sha": "fc774e629fd805ef46566894da482ed8be680303", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNzc0ZTYyOWZkODA1ZWY0NjU2Njg5NGRhNDgyZWQ4YmU2ODAzMDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-11T21:55:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-17T22:28:53Z"}, "message": "Teach Diagnostics to highlight text", "tree": {"sha": "04e098b9d07adac374ea2cfe041c64df788d1430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04e098b9d07adac374ea2cfe041c64df788d1430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc774e629fd805ef46566894da482ed8be680303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc774e629fd805ef46566894da482ed8be680303", "html_url": "https://github.com/rust-lang/rust/commit/fc774e629fd805ef46566894da482ed8be680303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc774e629fd805ef46566894da482ed8be680303/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8e9b0c828bce489eb948853a6cf86b69b26799", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8e9b0c828bce489eb948853a6cf86b69b26799", "html_url": "https://github.com/rust-lang/rust/commit/bd8e9b0c828bce489eb948853a6cf86b69b26799"}], "stats": {"total": 309, "additions": 242, "deletions": 67}, "files": [{"sha": "4b731ed7a706a312dd621029787da6be2f231140", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -562,7 +562,7 @@ pub trait LintContext<'tcx>: Sized {\n         let span = early_lint.diagnostic.span.primary_span().expect(\"early lint w/o primary span\");\n         let mut err = self.struct_span_lint(early_lint.id.lint,\n                                             span,\n-                                            &early_lint.diagnostic.message);\n+                                            &early_lint.diagnostic.message());\n         err.copy_details_not_message(&early_lint.diagnostic);\n         err.emit();\n     }"}, {"sha": "4ce5f96f171ed33222845fb9d66774d2eaef2f14", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -79,9 +79,9 @@ fn remove_message(e: &mut ExpectErrorEmitter, msg: &str, lvl: Level) {\n \n impl Emitter for ExpectErrorEmitter {\n     fn emit(&mut self, db: &DiagnosticBuilder) {\n-        remove_message(self, &db.message, db.level);\n+        remove_message(self, &db.message(), db.level);\n         for child in &db.children {\n-            remove_message(self, &child.message, child.level);\n+            remove_message(self, &child.message(), child.level);\n         }\n     }\n }"}, {"sha": "ac39af2018998dfeeda3a9fe457242daaccb5557", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -14,12 +14,13 @@ use RenderSpan;\n use RenderSpan::Suggestion;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n+use snippet::Style;\n \n #[must_use]\n #[derive(Clone, Debug, PartialEq)]\n pub struct Diagnostic {\n     pub level: Level,\n-    pub message: String,\n+    pub message: Vec<(String, Style)>,\n     pub code: Option<String>,\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n@@ -29,7 +30,7 @@ pub struct Diagnostic {\n #[derive(Clone, Debug, PartialEq)]\n pub struct SubDiagnostic {\n     pub level: Level,\n-    pub message: String,\n+    pub message: Vec<(String, Style)>,\n     pub span: MultiSpan,\n     pub render_span: Option<RenderSpan>,\n }\n@@ -42,7 +43,7 @@ impl Diagnostic {\n     pub fn new_with_code(level: Level, code: Option<String>, message: &str) -> Self {\n         Diagnostic {\n             level: level,\n-            message: message.to_owned(),\n+            message: vec![(message.to_owned(), Style::NoStyle)],\n             code: code,\n             span: MultiSpan::new(),\n             children: vec![],\n@@ -96,8 +97,14 @@ impl Diagnostic {\n                                      -> &mut Self\n     {\n         // For now, just attach these as notes\n-        self.note(&format!(\"expected {} `{}`{}\", label, expected, expected_extra));\n-        self.note(&format!(\"   found {} `{}`{}\", label, found, found_extra));\n+        self.highlighted_note(vec![\n+            (format!(\"expected {} `\", label), Style::NoStyle),\n+            (format!(\"{}\", expected), Style::Highlight),\n+            (format!(\"`{}\\n\", expected_extra), Style::NoStyle),\n+            (format!(\"   found {} `\", label), Style::NoStyle),\n+            (format!(\"{}\", found), Style::Highlight),\n+            (format!(\"`{}\", found_extra), Style::NoStyle),\n+        ]);\n         self\n     }\n \n@@ -106,6 +113,11 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn highlighted_note(&mut self, msg: Vec<(String, Style)>) -> &mut Self {\n+        self.sub_with_highlights(Level::Note, msg, MultiSpan::new(), None);\n+        self\n+    }\n+\n     pub fn span_note<S: Into<MultiSpan>>(&mut self,\n                                          sp: S,\n                                          msg: &str)\n@@ -168,7 +180,11 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn message(&self) -> &str {\n+    pub fn message(&self) -> String {\n+        self.message.iter().map(|i| i.0.to_owned()).collect::<String>()\n+    }\n+\n+    pub fn styled_message(&self) -> &Vec<(String, Style)> {\n         &self.message\n     }\n \n@@ -193,10 +209,36 @@ impl Diagnostic {\n            render_span: Option<RenderSpan>) {\n         let sub = SubDiagnostic {\n             level: level,\n-            message: message.to_owned(),\n+            message: vec![(message.to_owned(), Style::NoStyle)],\n             span: span,\n             render_span: render_span,\n         };\n         self.children.push(sub);\n     }\n+\n+    /// Convenience function for internal use, clients should use one of the\n+    /// public methods above.\n+    fn sub_with_highlights(&mut self,\n+                           level: Level,\n+                           message: Vec<(String, Style)>,\n+                           span: MultiSpan,\n+                           render_span: Option<RenderSpan>) {\n+        let sub = SubDiagnostic {\n+            level: level,\n+            message: message,\n+            span: span,\n+            render_span: render_span,\n+        };\n+        self.children.push(sub);\n+    }\n+}\n+\n+impl SubDiagnostic {\n+    pub fn message(&self) -> String {\n+        self.message.iter().map(|i| i.0.to_owned()).collect::<String>()\n+    }\n+\n+    pub fn styled_message(&self) -> &Vec<(String, Style)> {\n+        &self.message\n+    }\n }"}, {"sha": "5d758d322c748c1a4e252f713ae2aedb8bc79e65", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 75, "deletions": 26, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -33,7 +33,11 @@ impl Emitter for EmitterWriter {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n         self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n-        self.emit_messages_default(&db.level, &db.message, &db.code, &primary_span, &children);\n+        self.emit_messages_default(&db.level,\n+                                   &db.styled_message(),\n+                                   &db.code,\n+                                   &primary_span,\n+                                   &children);\n     }\n }\n \n@@ -695,17 +699,23 @@ impl EmitterWriter {\n         if spans_updated {\n             children.push(SubDiagnostic {\n                 level: Level::Note,\n-                message: \"this error originates in a macro outside of the current crate\"\n-                    .to_string(),\n+                message: vec![(\"this error originates in a macro outside of the current crate\"\n+                    .to_string(), Style::NoStyle)],\n                 span: MultiSpan::new(),\n                 render_span: None,\n             });\n         }\n     }\n \n     /// Add a left margin to every line but the first, given a padding length and the label being\n-    /// displayed.\n-    fn msg_with_padding(&self, msg: &str, padding: usize, label: &str) -> String {\n+    /// displayed, keeping the provided highlighting.\n+    fn msg_to_buffer(&self,\n+                     buffer: &mut StyledBuffer,\n+                     msg: &Vec<(String, Style)>,\n+                     padding: usize,\n+                     label: &str,\n+                     override_style: Option<Style>) {\n+\n         // The extra 5 ` ` is padding that's always needed to align to the `note: `:\n         //\n         //   error: message\n@@ -726,20 +736,56 @@ impl EmitterWriter {\n             .map(|_| \" \")\n             .collect::<String>();\n \n-        msg.split('\\n').enumerate().fold(\"\".to_owned(), |mut acc, x| {\n-            if x.0 != 0 {\n-                acc.push_str(\"\\n\");\n-                // Align every line with first one.\n-                acc.push_str(&padding);\n+        /// Return wether `style`, or the override if present and the style is `NoStyle`.\n+        fn style_or_override(style: Style, override_style: Option<Style>) -> Style {\n+            if let Some(o) = override_style {\n+                if style == Style::NoStyle {\n+                    return o;\n+                }\n+            }\n+            style\n+        }\n+\n+        let mut line_number = 0;\n+\n+        // Provided the following diagnostic message:\n+        //\n+        //     let msg = vec![\n+        //       (\"\n+        //       (\"highlighted multiline\\nstring to\\nsee how it \", Style::NoStyle),\n+        //       (\"looks\", Style::Highlight),\n+        //       (\"with\\nvery \", Style::NoStyle),\n+        //       (\"weird\", Style::Highlight),\n+        //       (\" formats\\n\", Style::NoStyle),\n+        //       (\"see?\", Style::Highlight),\n+        //     ];\n+        //\n+        // the expected output on a note is (* surround the  highlighted text)\n+        //\n+        //        = note: highlighted multiline\n+        //                string to\n+        //                see how it *looks* with\n+        //                very *weird* formats\n+        //                see?\n+        for &(ref text, ref style) in msg.iter() {\n+            let lines = text.split('\\n').collect::<Vec<_>>();\n+            if lines.len() > 1 {\n+                for (i, line) in lines.iter().enumerate() {\n+                    if i != 0 {\n+                        line_number += 1;\n+                        buffer.append(line_number, &padding, Style::NoStyle);\n+                    }\n+                    buffer.append(line_number, line, style_or_override(*style, override_style));\n+                }\n+            } else {\n+                buffer.append(line_number, text, style_or_override(*style, override_style));\n             }\n-            acc.push_str(&x.1);\n-            acc\n-        })\n+        }\n     }\n \n     fn emit_message_default(&mut self,\n                             msp: &MultiSpan,\n-                            msg: &str,\n+                            msg: &Vec<(String, Style)>,\n                             code: &Option<String>,\n                             level: &Level,\n                             max_line_num_len: usize,\n@@ -755,9 +801,7 @@ impl EmitterWriter {\n             draw_note_separator(&mut buffer, 0, max_line_num_len + 1);\n             buffer.append(0, &level.to_string(), Style::HeaderMsg);\n             buffer.append(0, \": \", Style::NoStyle);\n-\n-            let message = self.msg_with_padding(msg, max_line_num_len, \"note\");\n-            buffer.append(0, &message, Style::NoStyle);\n+            self.msg_to_buffer(&mut buffer, msg, max_line_num_len, \"note\", None);\n         } else {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             match code {\n@@ -769,7 +813,9 @@ impl EmitterWriter {\n                 _ => {}\n             }\n             buffer.append(0, \": \", Style::HeaderMsg);\n-            buffer.append(0, msg, Style::HeaderMsg);\n+            for &(ref text, _) in msg.iter() {\n+                buffer.append(0, text, Style::HeaderMsg);\n+            }\n         }\n \n         // Preprocess all the annotations so that they are grouped by file and by line number\n@@ -879,7 +925,7 @@ impl EmitterWriter {\n     fn emit_suggestion_default(&mut self,\n                                suggestion: &CodeSuggestion,\n                                level: &Level,\n-                               msg: &str,\n+                               msg: &Vec<(String, Style)>,\n                                max_line_num_len: usize)\n                                -> io::Result<()> {\n         use std::borrow::Borrow;\n@@ -890,9 +936,11 @@ impl EmitterWriter {\n \n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             buffer.append(0, \": \", Style::HeaderMsg);\n-\n-            let message = self.msg_with_padding(msg, max_line_num_len, \"suggestion\");\n-            buffer.append(0, &message, Style::HeaderMsg);\n+            self.msg_to_buffer(&mut buffer,\n+                               msg,\n+                               max_line_num_len,\n+                               \"suggestion\",\n+                               Some(Style::HeaderMsg));\n \n             let lines = cm.span_to_lines(primary_span).unwrap();\n \n@@ -921,7 +969,7 @@ impl EmitterWriter {\n     }\n     fn emit_messages_default(&mut self,\n                              level: &Level,\n-                             message: &String,\n+                             message: &Vec<(String, Style)>,\n                              code: &Option<String>,\n                              span: &MultiSpan,\n                              children: &Vec<SubDiagnostic>) {\n@@ -942,7 +990,7 @@ impl EmitterWriter {\n                     match child.render_span {\n                         Some(FullSpan(ref msp)) => {\n                             match self.emit_message_default(msp,\n-                                                            &child.message,\n+                                                            &child.styled_message(),\n                                                             &None,\n                                                             &child.level,\n                                                             max_line_num_len,\n@@ -954,15 +1002,15 @@ impl EmitterWriter {\n                         Some(Suggestion(ref cs)) => {\n                             match self.emit_suggestion_default(cs,\n                                                                &child.level,\n-                                                               &child.message,\n+                                                               &child.styled_message(),\n                                                                max_line_num_len) {\n                                 Err(e) => panic!(\"failed to emit error: {}\", e),\n                                 _ => ()\n                             }\n                         },\n                         None => {\n                             match self.emit_message_default(&child.span,\n-                                                            &child.message,\n+                                                            &child.styled_message(),\n                                                             &None,\n                                                             &child.level,\n                                                             max_line_num_len,\n@@ -1197,6 +1245,7 @@ impl Destination {\n                 self.start_attr(term::Attr::Bold)?;\n                 self.start_attr(term::Attr::ForegroundColor(l.color()))?;\n             }\n+            Style::Highlight => self.start_attr(term::Attr::Bold)?,\n         }\n         Ok(())\n     }"}, {"sha": "18e7b324f081e4f698f3876f39600c70cb21839f", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -185,4 +185,5 @@ pub enum Style {\n     NoStyle,\n     ErrorCode,\n     Level(Level),\n+    Highlight,\n }"}, {"sha": "96045c6c079a72ab122cb1887f639767e5412441", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -121,13 +121,13 @@ impl SharedEmitter {\n impl Emitter for SharedEmitter {\n     fn emit(&mut self, db: &DiagnosticBuilder) {\n         self.buffer.lock().unwrap().push(Diagnostic {\n-            msg: db.message.to_string(),\n+            msg: db.message(),\n             code: db.code.clone(),\n             lvl: db.level,\n         });\n         for child in &db.children {\n             self.buffer.lock().unwrap().push(Diagnostic {\n-                msg: child.message.to_string(),\n+                msg: child.message(),\n                 code: None,\n                 lvl: child.level,\n             });"}, {"sha": "27ecd23eb42593e4f9dbec57e120618bd65ef86f", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -74,15 +74,15 @@ impl Emitter for JsonEmitter {\n // The following data types are provided just for serialisation.\n \n #[derive(RustcEncodable)]\n-struct Diagnostic<'a> {\n+struct Diagnostic {\n     /// The primary error message.\n-    message: &'a str,\n+    message: String,\n     code: Option<DiagnosticCode>,\n     /// \"error: internal compiler error\", \"error\", \"warning\", \"note\", \"help\".\n     level: &'static str,\n     spans: Vec<DiagnosticSpan>,\n     /// Associated diagnostic messages.\n-    children: Vec<Diagnostic<'a>>,\n+    children: Vec<Diagnostic>,\n     /// The message as rustc would render it. Currently this is only\n     /// `Some` for \"suggestions\", but eventually it will include all\n     /// snippets.\n@@ -148,12 +148,12 @@ struct DiagnosticCode {\n     explanation: Option<&'static str>,\n }\n \n-impl<'a> Diagnostic<'a> {\n-    fn from_diagnostic_builder<'c>(db: &'c DiagnosticBuilder,\n-                                   je: &JsonEmitter)\n-                                   -> Diagnostic<'c> {\n+impl Diagnostic {\n+    fn from_diagnostic_builder(db: &DiagnosticBuilder,\n+                               je: &JsonEmitter)\n+                               -> Diagnostic {\n         Diagnostic {\n-            message: &db.message,\n+            message: db.message(),\n             code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n             level: db.level.to_str(),\n             spans: DiagnosticSpan::from_multispan(&db.span, je),\n@@ -164,9 +164,9 @@ impl<'a> Diagnostic<'a> {\n         }\n     }\n \n-    fn from_sub_diagnostic<'c>(db: &'c SubDiagnostic, je: &JsonEmitter) -> Diagnostic<'c> {\n+    fn from_sub_diagnostic(db: &SubDiagnostic, je: &JsonEmitter) -> Diagnostic {\n         Diagnostic {\n-            message: &db.message,\n+            message: db.message(),\n             code: None,\n             level: db.level.to_str(),\n             spans: db.render_span.as_ref()"}, {"sha": "e249c9e9aa262661908da68e5e27ec0126a50474", "filename": "src/test/compile-fail-fulldeps/proc-macro/signature.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -18,6 +18,5 @@ pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n     //~^ ERROR: mismatched types\n     //~| NOTE: expected normal fn, found unsafe fn\n     //~| NOTE: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n-    //~| NOTE: found type `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n     loop {}\n }"}, {"sha": "595e4bfb0d705ce95f9b71e0f3bff8aaaa7038d3", "filename": "src/test/compile-fail/issue-27942.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -15,13 +15,11 @@ pub trait Buffer<'a, R: Resources<'a>> {\n     //~^ ERROR mismatched types\n     //~| lifetime mismatch\n     //~| NOTE expected type `Resources<'_>`\n-    //~| NOTE    found type `Resources<'a>`\n     //~| NOTE the lifetime 'a as defined on the method body at 14:4...\n     //~| NOTE ...does not necessarily outlive the anonymous lifetime #1 defined on the method body\n     //~| ERROR mismatched types\n     //~| lifetime mismatch\n     //~| NOTE expected type `Resources<'_>`\n-    //~| NOTE    found type `Resources<'a>`\n     //~| NOTE the anonymous lifetime #1 defined on the method body at 14:4...\n     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the method body\n }"}, {"sha": "6e1b9b2fbed0b4749271ca946665871ca57d6e50", "filename": "src/test/compile-fail/issue-37884.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fcompile-fail%2Fissue-37884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fcompile-fail%2Fissue-37884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37884.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -16,7 +16,6 @@ impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n     //~^ ERROR method not compatible with trait\n     //~| lifetime mismatch\n     //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-    //~| NOTE    found type `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n     {\n     //~^ NOTE the anonymous lifetime #1 defined on the body\n     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the body"}, {"sha": "4620248e2efeae50747b5af688ea1fabb96e008f", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -8,7 +8,7 @@ error[E0053]: method `b` has an incompatible type for trait\n    |                              ^ expected type parameter, found a different type parameter\n    |\n    = note: expected type `fn(&E, F) -> F`\n-   = note:    found type `fn(&E, G) -> G`\n+              found type `fn(&E, G) -> G`\n \n error: aborting due to previous error\n "}, {"sha": "933462e553e3b6db5afd3120201397d5d5307c9c", "filename": "src/test/ui/mismatched_types/E0053.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "previous_filename": "src/test/compile-fail/E0053.rs"}, {"sha": "b6e3d663e36bddf96e55c4b06b17a0ad372dc0c2", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -0,0 +1,23 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/E0053.rs:19:15\n+   |\n+12 |     fn foo(x: u16); //~ NOTE type in trait\n+   |               --- type in trait\n+...\n+19 |     fn foo(x: i16) { }\n+   |               ^^^ expected u16, found i16\n+\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/E0053.rs:22:12\n+   |\n+13 |     fn bar(&self); //~ NOTE type in trait\n+   |            ----- type in trait\n+...\n+22 |     fn bar(&mut self) { }\n+   |            ^^^^^^^^^ types differ in mutability\n+   |\n+   = note: expected type `fn(&Bar)`\n+              found type `fn(&mut Bar)`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e89cc9ea5cbf26b19a7df4503d1a9f318ced1980", "filename": "src/test/ui/mismatched_types/E0409.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "previous_filename": "src/test/compile-fail/E0409.rs"}, {"sha": "251e247fa28ba623b76aeb0a4162e28ad74567c4", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -0,0 +1,19 @@\n+error[E0409]: variable `y` is bound with different mode in pattern #2 than in pattern #1\n+  --> $DIR/E0409.rs:15:23\n+   |\n+15 |         (0, ref y) | (y, 0) => {} //~ ERROR E0409\n+   |                 -     ^ bound in different ways\n+   |                 |\n+   |                 first binding\n+\n+error[E0308]: mismatched types\n+  --> $DIR/E0409.rs:15:23\n+   |\n+15 |         (0, ref y) | (y, 0) => {} //~ ERROR E0409\n+   |                       ^ expected &{integer}, found integral variable\n+   |\n+   = note: expected type `&{integer}`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "580684e2e140bf3b49e5ec946dcfef0a680eac6e", "filename": "src/test/ui/mismatched_types/issue-19109.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "previous_filename": "src/test/compile-fail/issue-19109.rs"}, {"sha": "4067507c9644568ae3767e92b9aa5b2b1152dcf2", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-19109.rs:14:5\n+   |\n+14 |     t as *mut Trait\n+   |     ^^^^^^^^^^^^^^^ expected (), found *-ptr\n+   |\n+   = note: expected type `()`\n+              found type `*mut Trait`\n+\n+error: aborting due to previous error\n+"}, {"sha": "46d690c5f037b97ee2235cc51364c663ae642b4a", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |              ^^^^ expected type parameter, found bool\n    |\n    = note: expected type `bool` (type parameter)\n-   = note:    found type `bool` (bool)\n+              found type `bool` (bool)\n \n error: aborting due to previous error\n "}, {"sha": "9efee4cc5593cb2ed8c9056c6ff3b985be3d7298", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |        ^^^^ expected struct `Foo`, found reference\n    |\n    = note: expected type `Foo`\n-   = note:    found type `&_`\n+              found type `&_`\n    = help: did you mean `foo: &Foo`?\n \n error[E0308]: mismatched types\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n    |         ^^^^ expected u32, found reference\n    |\n    = note: expected type `u32`\n-   = note:    found type `&_`\n+              found type `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:31:8\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n    |        ^^^^^ expected u32, found reference\n    |\n    = note: expected type `u32`\n-   = note:    found type `&_`\n+              found type `&_`\n \n error[E0529]: expected an array or slice, found `u32`\n   --> $DIR/issue-38371.rs:34:9"}, {"sha": "5dd124ebcdff6c3cc01e8b7a1965038162ee8fb8", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n    | |_____^ ...ending here: expected u32, found ()\n    |\n    = note: expected type `u32`\n-   = note:    found type `()`\n+              found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "3295e2bebd231714d39e55e47daa9c4097b88ea0", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "previous_filename": "src/test/compile-fail/overloaded-calls-bad.rs"}, {"sha": "cd05684f15d55d71c2157558b6380c8de90f615b", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/overloaded-calls-bad.rs:38:17\n+   |\n+38 |     let ans = s(\"what\");    //~ ERROR mismatched types\n+   |                 ^^^^^^ expected isize, found reference\n+   |\n+   = note: expected type `isize`\n+              found type `&'static str`\n+\n+error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/overloaded-calls-bad.rs:42:15\n+   |\n+42 |     let ans = s();\n+   |               ^^^ expected 1 parameter\n+\n+error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+  --> $DIR/overloaded-calls-bad.rs:45:17\n+   |\n+45 |     let ans = s(\"burma\", \"shave\");\n+   |                 ^^^^^^^^^^^^^^^^ expected 1 parameter\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9f832c7b6e500f52e87a900e82b0c47cebb5c6f3", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.rs?ref=fc774e629fd805ef46566894da482ed8be680303", "previous_filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs"}, {"sha": "c47975b01355d4a72c4b51a833ac5bfdd60a844d", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trait-bounds-cant-coerce.rs:24:7\n+   |\n+24 |     a(x); //~ ERROR mismatched types [E0308]\n+   |       ^ expected trait `Foo + std::marker::Send`, found trait `Foo`\n+   |\n+   = note: expected type `Box<Foo + std::marker::Send + 'static>`\n+              found type `Box<Foo + 'static>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "991197c2afba3e23446c775545ca1555a5660ea7", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -17,7 +17,7 @@ error[E0053]: method `bar` has an incompatible type for trait\n    |                            ^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&mut Bar, &mut Bar)`\n-   = note:    found type `fn(&mut Bar, &Bar)`\n+              found type `fn(&mut Bar, &Bar)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "56e368895750202e634bd4209e61e94e6731a447", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n    |\n    = note: expected type `()`\n-   = note:    found type `std::result::Result<bool, std::io::Error>`\n+              found type `std::result::Result<bool, std::io::Error>`\n    = help: here are some functions which might fulfill your needs:\n            - .unwrap()\n            - .unwrap_err()"}, {"sha": "c32fefcd0d6a9b6a3fea50c8ff474d27d099b923", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |                    ^^^^^^^^^^^^^ expected usize, found struct `std::string::String`\n    |\n    = note: expected type `usize`\n-   = note:    found type `std::string::String`\n+              found type `std::string::String`\n    = help: here are some functions which might fulfill your needs:\n            - .capacity()\n            - .len()\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n    |                   ^^^^^^^^^^^^^ expected &str, found struct `std::string::String`\n    |\n    = note: expected type `&str`\n-   = note:    found type `std::string::String`\n+              found type `std::string::String`\n    = help: here are some functions which might fulfill your needs:\n            - .as_str()\n            - .trim()\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n    |          ^^ types differ in mutability\n    |\n    = note: expected type `&mut std::string::String`\n-   = note:    found type `&std::string::String`\n+              found type `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:36:11\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n    |           ^^ types differ in mutability\n    |\n    = note: expected type `&mut i32`\n-   = note:    found type `&std::string::String`\n+              found type `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:42:9\n@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n    |         ^^^^^ cyclic type of infinite size\n    |\n    = note: expected type `_`\n-   = note:    found type `Box<_>`\n+              found type `Box<_>`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "117b109780b152de90c24f45dd97f8697ea3d84b", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched method receiver\n    |                      ^^^^^^^^^ expected Self, found struct `SomeType`\n    |\n    = note: expected type `&Self`\n-   = note:    found type `&SomeType`\n+              found type `&SomeType`\n \n error: aborting due to previous error\n "}, {"sha": "2294e6476d61fe2dd6c157884821603176b21af3", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc774e629fd805ef46566894da482ed8be680303/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=fc774e629fd805ef46566894da482ed8be680303", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |                 ^^^^^^^^^^ expected (), found closure\n    |\n    = note: expected type `()`\n-   = note:    found type `[closure@$DIR/move-closure.rs:15:17: 15:27]`\n+              found type `[closure@$DIR/move-closure.rs:15:17: 15:27]`\n \n error: aborting due to previous error\n "}]}