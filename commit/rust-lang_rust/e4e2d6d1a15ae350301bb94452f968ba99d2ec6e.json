{"sha": "e4e2d6d1a15ae350301bb94452f968ba99d2ec6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZTJkNmQxYTE1YWUzNTAzMDFiYjk0NDUyZjk2OGJhOTlkMmVjNmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-19T14:42:52Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-19T14:43:02Z"}, "message": "Fix bug in type parameter handling for impl methods\n\nThe parameters of the impl weren't being combined in the right way\nwith the parameters of the methods. The test worked only by accident.\n\nIssue #1227", "tree": {"sha": "25907a1f991b3b3c0ff8e131020bb9af0563c41b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25907a1f991b3b3c0ff8e131020bb9af0563c41b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e", "html_url": "https://github.com/rust-lang/rust/commit/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619d7c3f72a969c62789383af7d1a1446177adfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/619d7c3f72a969c62789383af7d1a1446177adfc", "html_url": "https://github.com/rust-lang/rust/commit/619d7c3f72a969c62789383af7d1a1446177adfc"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "bdb723ebaf85d10a2ce1291ee75b9c131589c196", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=e4e2d6d1a15ae350301bb94452f968ba99d2ec6e", "patch": "@@ -370,7 +370,17 @@ fn resolve_names(e: @env, c: @ast::crate) {\n \n // Visit helper functions\n fn visit_item_with_scope(i: @ast::item, sc: scopes, v: vt<scopes>) {\n-    visit::visit_item(i, cons(scope_item(i), @sc), v);\n+    let sc = cons(scope_item(i), @sc);\n+    alt i.node {\n+      ast::item_impl(tps, sty, methods) {\n+        visit::visit_ty(sty, sc, v);\n+        for m in methods {\n+            v.visit_fn(m.node.meth, tps + m.node.tps, m.span,\n+                       some(m.node.ident), m.node.id, sc, v);\n+        }\n+      }\n+      _ { visit::visit_item(i, sc, v); }\n+    }\n }\n \n fn visit_native_item_with_scope(ni: @ast::native_item, sc: scopes,"}, {"sha": "383a4387a5d9226ab20f7105ceb518c910fdfda8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e2d6d1a15ae350301bb94452f968ba99d2ec6e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e4e2d6d1a15ae350301bb94452f968ba99d2ec6e", "patch": "@@ -692,7 +692,8 @@ mod collect {\n                 let ty = ty::method_ty_to_fn_ty(\n                     cx.tcx, ty_of_method(cx.tcx, m_collect, m));\n                 cx.tcx.tcache.insert(local_def(m.node.id),\n-                                     {kinds: [], ty: ty});\n+                                     {kinds: ty_param_kinds(m.node.tps),\n+                                      ty: ty});\n                 write::ty_only(cx.tcx, m.node.id, ty);\n             }\n             write::ty_only(cx.tcx, it.id, ast_ty_to_ty(cx.tcx, m_collect,\n@@ -2174,12 +2175,19 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                       }\n                     }\n                 } else { csearch::get_type(tcx, method.did).ty };\n-                let ids = ids;\n-                if method.n_tps > 0u {\n+                let tvars = vec::map(ids, {|id| ty::mk_var(tcx, id)});\n+                let n_tps = vec::len(ids);\n+                if method.n_tps + n_tps  > 0u {\n                     let b = bind_params_in_type(expr.span, tcx,\n-                                                bind next_ty_var_id(fcx),\n-                                                fty, method.n_tps);\n-                    ids += b.ids;\n+                                                bind next_ty_var_id(fcx), fty,\n+                                                n_tps + method.n_tps);\n+                    let _tvars = vec::map(b.ids, {|id| ty::mk_var(tcx, id)});\n+                    let i = 0;\n+                    for v in tvars {\n+                        demand::simple(fcx, expr.span, v, _tvars[i]);\n+                        i += 1;\n+                    }\n+                    tvars = _tvars;\n                     fty = b.ty;\n                     if n_tys > 0u {\n                         if n_tys != method.n_tps {\n@@ -2190,7 +2198,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                         }\n                         let i = 0u;\n                         for ty in tys {\n-                            let tvar = ty::mk_var(fcx.ccx.tcx, b.ids[i]);\n+                            let tvar = tvars[i + n_tps];\n                             let t_subst = ast_ty_to_ty_crate(fcx.ccx, ty);\n                             demand::simple(fcx, expr.span, tvar, t_subst);\n                             i += 1u;\n@@ -2201,8 +2209,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                                         \"this method does not take type \\\n                                          parameters\");\n                 }\n-                let substs = vec::map(ids, {|id| ty::mk_var(tcx, id)});\n-                write::ty_fixup(fcx, id, {substs: some(substs), ty: fty});\n+                write::ty_fixup(fcx, id, {substs: some(tvars), ty: fty});\n                 fcx.ccx.method_map.insert(id, method.did);\n               }\n               none. {"}]}