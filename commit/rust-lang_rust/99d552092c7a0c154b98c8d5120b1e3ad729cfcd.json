{"sha": "99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "node_id": "C_kwDOAAsO6NoAKDk5ZDU1MjA5MmM3YTBjMTU0Yjk4YzhkNTEyMGIxZTNhZDcyOWNmY2Q", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-09T14:12:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Make query parser more strict and improve display of errors", "tree": {"sha": "39eeeb6fd55b90cea62a91447c2c96d7305e436b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39eeeb6fd55b90cea62a91447c2c96d7305e436b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "html_url": "https://github.com/rust-lang/rust/commit/99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "264064df36e055c19af2c82145bbbe616b32fb02", "url": "https://api.github.com/repos/rust-lang/rust/commits/264064df36e055c19af2c82145bbbe616b32fb02", "html_url": "https://github.com/rust-lang/rust/commit/264064df36e055c19af2c82145bbbe616b32fb02"}], "stats": {"total": 383, "additions": 242, "deletions": 141}, "files": [{"sha": "861bf1a42dd6b3a6e09a2ae5157cb07d7209f50b", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 64, "deletions": 51, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -132,17 +132,12 @@ window.initSearch = function(rawSearchIndex) {\n         return \"(<\\\"\".indexOf(c) !== -1;\n     }\n \n-    function isStopCharacter(c) {\n-        return isWhitespace(c) || \"),>-=\".indexOf(c) !== -1;\n+    function isEndCharacter(c) {\n+        return \"),>-\".indexOf(c) !== -1;\n     }\n \n-    function removeEmptyStringsFromArray(arr) {\n-        for (var i = 0, len = arr.length; i < len; ++i) {\n-            if (arr[i] === \"\") {\n-                arr.splice(i, 1);\n-                i -= 1;\n-            }\n-        }\n+    function isStopCharacter(c) {\n+        return isWhitespace(c) || isEndCharacter(c);\n     }\n \n     function itemTypeFromName(typename) {\n@@ -151,7 +146,8 @@ window.initSearch = function(rawSearchIndex) {\n                 return i;\n             }\n         }\n-        return NO_TYPE_FILTER;\n+\n+        throw new Error(\"Unknown type filter `\" + typename + \"`\");\n     }\n \n     /**\n@@ -189,22 +185,6 @@ window.initSearch = function(rawSearchIndex) {\n         query.literalSearch = true;\n     }\n \n-    /**\n-     * Increase the parser position as long as the character is a whitespace. This check is\n-     * performed with the `isWhitespace` function.\n-     *\n-     * @param {ParserState} parserState\n-     */\n-    function skipWhitespaces(parserState) {\n-        while (parserState.pos < parserState.length) {\n-            var c = parserState.userQuery[parserState.pos];\n-            if (!isWhitespace(c)) {\n-                break;\n-            }\n-            parserState.pos += 1;\n-        }\n-    }\n-\n     /**\n      * Returns `true` if the current parser position is starting with \"::\".\n      *\n@@ -233,15 +213,27 @@ window.initSearch = function(rawSearchIndex) {\n      * @param {Array<QueryElement>} generics - List of generics of this query element.\n      */\n     function createQueryElement(query, parserState, elems, name, generics) {\n-        removeEmptyStringsFromArray(generics);\n         if (name === '*' || (name.length === 0 && generics.length === 0)) {\n             return;\n         }\n         if (query.literalSearch && parserState.totalElems > 0) {\n             throw new Error(\"You cannot have more than one element if you use quotes\");\n         }\n         var pathSegments = name.split(\"::\");\n-        removeEmptyStringsFromArray(pathSegments);\n+        if (pathSegments.length > 1) {\n+            for (var i = 0, len = pathSegments.length; i < len; ++i) {\n+                var pathSegment = pathSegments[i];\n+\n+                if (pathSegment.length === 0) {\n+                    if (i === 0) {\n+                        throw new Error(\"Paths cannot start with `::`\");\n+                    } else if (i + 1 === len) {\n+                        throw new Error(\"Paths cannot end with `::`\");\n+                    }\n+                    throw new Error(\"Unexpected `::::`\");\n+                }\n+            }\n+        }\n         // In case we only have something like `<p>`, there is no name but it remains valid.\n         if (pathSegments.length === 0) {\n             pathSegments = [\"\"];\n@@ -272,7 +264,6 @@ window.initSearch = function(rawSearchIndex) {\n             start += 1;\n             getStringElem(query, parserState, isInGenerics);\n             end = parserState.pos - 1;\n-            skipWhitespaces(parserState);\n         } else {\n             while (parserState.pos < parserState.length) {\n                 var c = parserState.userQuery[parserState.pos];\n@@ -289,7 +280,6 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n                 parserState.pos += 1;\n                 end = parserState.pos;\n-                skipWhitespaces(parserState);\n             }\n         }\n         if (parserState.pos < parserState.length &&\n@@ -317,22 +307,36 @@ window.initSearch = function(rawSearchIndex) {\n      *                                      character.\n      */\n     function getItemsBefore(query, parserState, elems, limit) {\n+        var turns = 0;\n         while (parserState.pos < parserState.length) {\n             var c = parserState.userQuery[parserState.pos];\n             if (c === limit) {\n                 break;\n-            } else if (c === '(' || c === \":\") {\n-                // Something weird is going on in here. Ignoring it!\n+            } else if (c === \",\" && limit !== \"\" && turns > 0) {\n                 parserState.pos += 1;\n                 continue;\n+            } else if (c === \":\" && isPathStart(parserState)) {\n+                throw new Error(\"Unexpected `::`: paths cannot start with `::`\");\n+            } else if (c === \"(\" || c === \":\" || isEndCharacter(c)) {\n+                var extra = \"\";\n+                if (limit === \">\") {\n+                    extra = \"`<`\";\n+                } else if (limit === \")\") {\n+                    extra = \"`(`\";\n+                } else if (limit === \"\") {\n+                    extra = \"`->`\";\n+                }\n+                throw new Error(\"Unexpected `\" + c + \"` after \" + extra);\n             }\n             var posBefore = parserState.pos;\n             getNextElem(query, parserState, elems, limit === \">\");\n+            turns += 1;\n             if (posBefore === parserState.pos) {\n                 parserState.pos += 1;\n             }\n         }\n-        // We skip the \"limit\".\n+        // We are either at the end of the string or on the \"limit\" character, let's move forward\n+        // in any case.\n         parserState.pos += 1;\n     }\n \n@@ -356,9 +360,13 @@ window.initSearch = function(rawSearchIndex) {\n                 break;\n             } else if (c === \":\" &&\n                 parserState.typeFilter === null &&\n-                !isPathStart(parserState) &&\n-                query.elems.length === 1)\n+                !isPathStart(parserState))\n             {\n+                if (query.elems.length === 0) {\n+                    throw new Error(\"Expected type filter before `:`\");\n+                } else if (query.elems.length !== 1 || parserState.totalElems !== 1) {\n+                    throw new Error(\"Unexpected `:`\");\n+                }\n                 if (query.literalSearch) {\n                     throw new Error(\"You cannot use quotes on type filter\");\n                 }\n@@ -531,6 +539,10 @@ window.initSearch = function(rawSearchIndex) {\n \n         try {\n             parseInput(query, parserState);\n+            if (parserState.typeFilter !== null) {\n+                var typeFilter = parserState.typeFilter.replace(/^const$/, \"constant\");\n+                query.typeFilter = itemTypeFromName(typeFilter);\n+            }\n         } catch (err) {\n             query = newParsedQuery(userQuery);\n             query.error = err.message;\n@@ -548,10 +560,6 @@ window.initSearch = function(rawSearchIndex) {\n             createQueryElement(query, parserState, query.elems, userQuery, []);\n             query.foundElems += 1;\n         }\n-        if (parserState.typeFilter !== null) {\n-            var typeFilter = parserState.typeFilter.replace(/^const$/, \"constant\");\n-            query.typeFilter = itemTypeFromName(typeFilter);\n-        }\n         return query;\n     }\n \n@@ -582,9 +590,6 @@ window.initSearch = function(rawSearchIndex) {\n      * @return {ResultsTable}\n      */\n     function execQuery(parsedQuery, searchWords, filterCrates) {\n-        if (parsedQuery.error !== null) {\n-            createQueryResults([], [], [], parsedQuery);\n-        }\n         var results_others = {}, results_in_args = {}, results_returned = {};\n \n         function transformResults(results) {\n@@ -1267,14 +1272,21 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n             }\n         }\n-        innerRunQuery();\n+\n+        if (parsedQuery.error === null) {\n+            innerRunQuery();\n+        }\n \n         var ret = createQueryResults(\n             sortResults(results_in_args, true),\n             sortResults(results_returned, true),\n             sortResults(results_others, false),\n             parsedQuery);\n         handleAliases(ret, parsedQuery.original.replace(/\"/g, \"\"), filterCrates);\n+        if (parsedQuery.error !== null && ret.others.length !== 0) {\n+            // It means some doc aliases were found so let's \"remove\" the error!\n+            ret.query.error = null;\n+        }\n         return ret;\n     }\n \n@@ -1413,7 +1425,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         var output = document.createElement(\"div\");\n         var length = 0;\n-        if (array.length > 0 && query.error === null) {\n+        if (array.length > 0) {\n             output.className = \"search-results \" + extraClass;\n \n             array.forEach(function(item) {\n@@ -1466,10 +1478,7 @@ window.initSearch = function(rawSearchIndex) {\n                 link.appendChild(wrapper);\n                 output.appendChild(link);\n             });\n-        } else if (query.error !== null) {\n-            output.className = \"search-failed\" + extraClass;\n-            output.innerHTML = \"Syntax error: \" + query.error;\n-        } else {\n+        } else if (query.error === null) {\n             output.className = \"search-failed\" + extraClass;\n             output.innerHTML = \"No results :(<br/>\" +\n                 \"Try on <a href=\\\"https://duckduckgo.com/?q=\" +\n@@ -1552,15 +1561,19 @@ window.initSearch = function(rawSearchIndex) {\n             }\n             crates += `</select>`;\n         }\n+\n         var typeFilter = \"\";\n         if (results.query.typeFilter !== NO_TYPE_FILTER) {\n-            typeFilter = \" (type: \" + escape(results.query.typeFilter) + \")\";\n+            typeFilter = \" (type: \" + escape(itemTypes[results.query.typeFilter]) + \")\";\n         }\n \n         var output = `<div id=\"search-settings\">` +\n             `<h1 class=\"search-results-title\">Results for ${escape(results.query.userQuery)}` +\n-            `${typeFilter}</h1> in ${crates} </div>` +\n-            `<div id=\"titles\">` +\n+            `${typeFilter}</h1> in ${crates} </div>`;\n+        if (results.query.error !== null) {\n+            output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n+        }\n+        output += `<div id=\"titles\">` +\n             makeTabHeader(0, \"In Names\", ret_others[1]) +\n             makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n             makeTabHeader(2, \"In Return Types\", ret_returned[1]) +"}, {"sha": "369b8c89a66626bac2d467719396c116424fccd4", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 138, "deletions": 1, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -1,4 +1,21 @@\n-const QUERY = ['<\"P\">', '\"P\" \"P\"', 'P \"P\"', '\"p\" p', '\"const\": p'];\n+const QUERY = [\n+    '<\"P\">',\n+    '\"P\" \"P\"',\n+    'P \"P\"',\n+    '\"p\" p',\n+    '\"const\": p',\n+    \"<:a>\", \"<::a>\",\n+    \"((a))\",\n+    \"->,a\",\n+    \"(p -> p\",\n+    \"::a::b\",\n+    \"a::::b\",\n+    \"a::b::\",\n+    \":a\",\n+    \"a b:\",\n+    \"a (b:\",\n+    \"{:\",\n+];\n \n const PARSED = [\n     {\n@@ -51,4 +68,124 @@ const PARSED = [\n         userQuery: \"\\\"const\\\": p\",\n         error: \"You cannot use quotes on type filter\",\n     },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"<:a>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"<:a>\",\n+        error: \"Unexpected `:` after `<`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"<::a>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"<::a>\",\n+        error: \"Unexpected `::`: paths cannot start with `::`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"((a))\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"((a))\",\n+        error: \"Unexpected `(` after `(`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"->,a\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"->,a\",\n+        error: \"Unexpected `,` after `->`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"(p -> p\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"(p -> p\",\n+        error: \"Unexpected `-` after `(`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"::a::b\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"::a::b\",\n+        error: \"Paths cannot start with `::`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a::::b\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a::::b\",\n+        error: \"Unexpected `::::`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a::b::\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a::b::\",\n+        error: \"Paths cannot end with `::`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \":a\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \":a\",\n+        error: \"Expected type filter before `:`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a b:\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a b:\",\n+        error: \"Unexpected `:`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a (b:\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a (b:\",\n+        error: \"Unexpected `:` after `(`\",\n+    },\n+    {\n+        args: [],\n+        elems: [],\n+        foundElems: 0,\n+        original: \"{:\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"{:\",\n+        error: \"Unknown type filter `{`\",\n+    },\n ];"}, {"sha": "2b474849318371b255c891fce0c1bff6728a6fd1", "filename": "src/test/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -35,18 +35,12 @@ const PARSED = [\n     },\n     {\n         args: [],\n-        elems: [{\n-            name: \"foo\",\n-            fullPath: [\"foo\"],\n-            pathWithoutLast: [],\n-            pathLast: \"foo\",\n-            generics: [],\n-        }],\n-        foundElems: 1,\n+        elems: [],\n+        foundElems: 0,\n         original: \"macro<f>:foo\",\n         returned: [],\n-        typeFilter: 14,\n+        typeFilter: -1,\n         userQuery: \"macro<f>:foo\",\n-        error: null,\n+        error: \"Unexpected `:`\",\n     },\n ];"}, {"sha": "d0a0a9043536b06735fa5824a6d386389a773a6a", "filename": "src/test/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['<P>', 'A<B<C<D>, E>', 'p<> u8'];\n+const QUERY = ['<P>', 'A<B<C<D>,  E>', 'p<> u8'];\n \n const PARSED = [\n     {\n@@ -66,10 +66,10 @@ const PARSED = [\n             ],\n         }],\n         foundElems: 1,\n-        original: 'A<B<C<D>, E>',\n+        original: 'A<B<C<D>,  E>',\n         returned: [],\n         typeFilter: -1,\n-        userQuery: 'a<b<c<d>, e>',\n+        userQuery: 'a<b<c<d>,  e>',\n         error: null,\n     },\n     {"}, {"sha": "024372ef8d5a456349c453adc236da5ee269592f", "filename": "src/test/rustdoc-js-std/parser-invalid.js", "status": "modified", "additions": 23, "deletions": 49, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -1,83 +1,57 @@\n // This test is mostly to check that the parser still kinda outputs something\n // (and doesn't enter an infinite loop!) even though the query is completely\n // invalid.\n-const QUERY = ['-> <P> (p2)', '(p -> p2', 'a b', 'a,b(c)'];\n+const QUERY = ['a b', 'a   b', 'a,b(c)'];\n \n const PARSED = [\n     {\n         args: [],\n-        elems: [],\n-        foundElems: 2,\n-        original: \"-> <P> (p2)\",\n-        returned: [\n-            {\n-                name: \"\",\n-                fullPath: [\"\"],\n-                pathWithoutLast: [],\n-                pathLast: \"\",\n-                generics: [\n-                    {\n-                        name: \"p\",\n-                        fullPath: [\"p\"],\n-                        pathWithoutLast: [],\n-                        pathLast: \"p\",\n-                        generics: [],\n-                    },\n-                ],\n-            },\n-            {\n-                name: \"p2\",\n-                fullPath: [\"p2\"],\n-                pathWithoutLast: [],\n-                pathLast: \"p2\",\n-                generics: [],\n-            },\n-        ],\n-        typeFilter: -1,\n-        userQuery: \"-> <p> (p2)\",\n-        error: null,\n-    },\n-    {\n-        args: [\n+        elems: [\n             {\n-                name: \"p\",\n-                fullPath: [\"p\"],\n+                name: \"a\",\n+                fullPath: [\"a\"],\n                 pathWithoutLast: [],\n-                pathLast: \"p\",\n+                pathLast: \"a\",\n                 generics: [],\n             },\n             {\n-                name: \"p2\",\n-                fullPath: [\"p2\"],\n+                name: \"b\",\n+                fullPath: [\"b\"],\n                 pathWithoutLast: [],\n-                pathLast: \"p2\",\n+                pathLast: \"b\",\n                 generics: [],\n             },\n         ],\n-        elems: [],\n         foundElems: 2,\n-        original: \"(p -> p2\",\n+        original: \"a b\",\n         returned: [],\n         typeFilter: -1,\n-        userQuery: \"(p -> p2\",\n+        userQuery: \"a b\",\n         error: null,\n     },\n     {\n         args: [],\n         elems: [\n             {\n-                name: \"a b\",\n-                fullPath: [\"a b\"],\n+                name: \"a\",\n+                fullPath: [\"a\"],\n+                pathWithoutLast: [],\n+                pathLast: \"a\",\n+                generics: [],\n+            },\n+            {\n+                name: \"b\",\n+                fullPath: [\"b\"],\n                 pathWithoutLast: [],\n-                pathLast: \"a b\",\n+                pathLast: \"b\",\n                 generics: [],\n             },\n         ],\n-        foundElems: 1,\n-        original: \"a b\",\n+        foundElems: 2,\n+        original: \"a   b\",\n         returned: [],\n         typeFilter: -1,\n-        userQuery: \"a b\",\n+        userQuery: \"a   b\",\n         error: null,\n     },\n     {"}, {"sha": "12b7f922b141ef240069329b4745a60522c4b958", "filename": "src/test/rustdoc-js-std/parser-paths.js", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['A::B', '::A::B', 'A::B::,C',  'A::B::<f>,C'];\n+const QUERY = ['A::B', 'A::B,C',  'A::B<f>,C'];\n \n const PARSED = [\n     {\n@@ -17,27 +17,11 @@ const PARSED = [\n         userQuery: \"a::b\",\n         error: null,\n     },\n-    {\n-        args: [],\n-        elems: [{\n-            name: \"::a::b\",\n-            fullPath: [\"a\", \"b\"],\n-            pathWithoutLast: [\"a\"],\n-            pathLast: \"b\",\n-            generics: [],\n-        }],\n-        foundElems: 1,\n-        original: '::A::B',\n-        returned: [],\n-        typeFilter: -1,\n-        userQuery: '::a::b',\n-        error: null,\n-    },\n     {\n         args: [],\n         elems: [\n             {\n-                name: \"a::b::\",\n+                name: \"a::b\",\n                 fullPath: [\"a\", \"b\"],\n                 pathWithoutLast: [\"a\"],\n                 pathLast: \"b\",\n@@ -52,17 +36,17 @@ const PARSED = [\n             },\n         ],\n         foundElems: 2,\n-        original: 'A::B::,C',\n+        original: 'A::B,C',\n         returned: [],\n         typeFilter: -1,\n-        userQuery: 'a::b::,c',\n+        userQuery: 'a::b,c',\n         error: null,\n     },\n     {\n         args: [],\n         elems: [\n             {\n-                name: \"a::b::\",\n+                name: \"a::b\",\n                 fullPath: [\"a\", \"b\"],\n                 pathWithoutLast: [\"a\"],\n                 pathLast: \"b\",\n@@ -85,10 +69,10 @@ const PARSED = [\n             },\n         ],\n         foundElems: 2,\n-        original: 'A::B::<f>,C',\n+        original: 'A::B<f>,C',\n         returned: [],\n         typeFilter: -1,\n-        userQuery: 'a::b::<f>,c',\n+        userQuery: 'a::b<f>,c',\n         error: null,\n     },\n ];"}, {"sha": "934f35f2c412e4809d4dd2a31b048f1f9a226132", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -272,10 +272,9 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n     var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n                            \"buildIndex\", \"execQuery\", \"parseQuery\", \"createQueryResults\",\n                            \"isWhitespace\", \"isSpecialStartCharacter\", \"isStopCharacter\",\n-                           \"removeEmptyStringsFromArray\", \"parseInput\", \"getItemsBefore\",\n-                           \"getNextElem\", \"createQueryElement\", \"isReturnArrow\", \"isPathStart\",\n-                           \"skipWhitespaces\", \"getStringElem\", \"itemTypeFromName\",\n-                           \"newParsedQuery\"];\n+                           \"parseInput\", \"getItemsBefore\", \"getNextElem\", \"createQueryElement\",\n+                           \"isReturnArrow\", \"isPathStart\", \"getStringElem\", \"newParsedQuery\",\n+                           \"itemTypeFromName\", \"isEndCharacter\"];\n \n     const functions = [\"hasOwnPropertyRustdoc\", \"onEach\"];\n     ALIASES = {};"}]}