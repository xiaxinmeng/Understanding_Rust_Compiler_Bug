{"sha": "240d56c33c1a0b7097e7b7da475f61fa1d57400f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MGQ1NmMzM2MxYTBiNzA5N2U3YjdkYTQ3NWY2MWZhMWQ1NzQwMGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-10T19:41:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-10T19:41:31Z"}, "message": "Support virtual calls with unsized self argument", "tree": {"sha": "46f1844ac5aad923f8ec3b7d19ccce384d3ac8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f1844ac5aad923f8ec3b7d19ccce384d3ac8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240d56c33c1a0b7097e7b7da475f61fa1d57400f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240d56c33c1a0b7097e7b7da475f61fa1d57400f", "html_url": "https://github.com/rust-lang/rust/commit/240d56c33c1a0b7097e7b7da475f61fa1d57400f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240d56c33c1a0b7097e7b7da475f61fa1d57400f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c53297f5ebe46f4d3ef0627c985a03871bd23780", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53297f5ebe46f4d3ef0627c985a03871bd23780", "html_url": "https://github.com/rust-lang/rust/commit/c53297f5ebe46f4d3ef0627c985a03871bd23780"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "230cba3a934305cf965423ad7161a7ba53f8bde5", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=240d56c33c1a0b7097e7b7da475f61fa1d57400f", "patch": "@@ -355,7 +355,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block\n         // not mutated by the current function, this is necessary to support unsized arguments.\n         match arg_kind {\n             ArgKind::Normal(Some(val)) => {\n-                if let Some((addr, meta)) = val.try_to_addr() {\n+                if let Some((addr, meta)) = val.try_to_ptr() {\n                     let local_decl = &fx.mir.local_decls[local];\n                     //                       v this ! is important\n                     let internally_mutable = !val.layout().ty.is_freeze(\n@@ -368,9 +368,9 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block\n                         // of this argument, to prevent a copy.\n \n                         let place = if let Some(meta) = meta {\n-                            CPlace::for_ptr_with_extra(Pointer::new(addr), meta, val.layout())\n+                            CPlace::for_ptr_with_extra(addr, meta, val.layout())\n                         } else {\n-                            CPlace::for_ptr(Pointer::new(addr), val.layout())\n+                            CPlace::for_ptr(addr, val.layout())\n                         };\n \n                         #[cfg(debug_assertions)]"}, {"sha": "5d99b385779ff99f72f25a2044d9e2b9e2e750b7", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=240d56c33c1a0b7097e7b7da475f61fa1d57400f", "patch": "@@ -353,7 +353,9 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub fn get_local_place(&mut self, local: Local) -> CPlace<'tcx> {\n-        *self.local_map.get(&local).unwrap()\n+        *self.local_map.get(&local).unwrap_or_else(|| {\n+            panic!(\"Local {:?} doesn't exist\", local);\n+        })\n     }\n \n     pub fn set_debug_loc(&mut self, source_info: mir::SourceInfo) {"}, {"sha": "0ecb0e1274e40659a67743de970192690364f990", "filename": "src/pointer.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=240d56c33c1a0b7097e7b7da475f61fa1d57400f", "patch": "@@ -55,13 +55,6 @@ impl Pointer {\n         }\n     }\n \n-    pub fn try_get_addr_and_offset(self) -> Option<(Value, Offset32)> {\n-        match self.base {\n-            PointerBase::Addr(addr) => Some((addr, self.offset)),\n-            PointerBase::Stack(_) => None,\n-        }\n-    }\n-\n     pub fn offset<'a, 'tcx>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,"}, {"sha": "9024d59ecb4f95b96fa4d08d4793d883fe42b432", "filename": "src/value_and_place.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=240d56c33c1a0b7097e7b7da475f61fa1d57400f", "patch": "@@ -105,19 +105,9 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn try_to_addr(self) -> Option<(Value, Option<Value>)> {\n+    pub fn try_to_ptr(self) -> Option<(Pointer, Option<Value>)> {\n         match self.0 {\n-            CValueInner::ByRef(ptr, meta) => {\n-                if let Some((base_addr, offset)) = ptr.try_get_addr_and_offset() {\n-                    if offset == Offset32::new(0) {\n-                        Some((base_addr, meta))\n-                    } else {\n-                        None\n-                    }\n-                } else {\n-                    None\n-                }\n-            }\n+            CValueInner::ByRef(ptr, meta) => Some((ptr, meta)),\n             CValueInner::ByVal(_) | CValueInner::ByValPair(_, _) => None,\n         }\n     }\n@@ -345,8 +335,11 @@ impl<'tcx> CPlace<'tcx> {\n                 CValue::by_val(val, layout)\n             }\n             CPlaceInner::Addr(ptr, extra) => {\n-                assert!(extra.is_none(), \"unsized values are not yet supported\");\n-                CValue::by_ref(ptr, layout)\n+                if let Some(extra) = extra {\n+                    CValue::by_ref_unsized(ptr, extra, layout)\n+                } else {\n+                    CValue::by_ref(ptr, layout)\n+                }\n             }\n             CPlaceInner::NoPlace => CValue::by_ref(\n                 Pointer::const_addr(fx, i64::try_from(self.layout.align.pref.bytes()).unwrap()),"}, {"sha": "e4b3a9942cf0c4c83e7c86f5aa079456b5ade85b", "filename": "src/vtable.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240d56c33c1a0b7097e7b7da475f61fa1d57400f/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=240d56c33c1a0b7097e7b7da475f61fa1d57400f", "patch": "@@ -47,7 +47,16 @@ pub fn get_ptr_and_method_ref<'tcx>(\n     arg: CValue<'tcx>,\n     idx: usize,\n ) -> (Value, Value) {\n-    let (ptr, vtable) = arg.load_scalar_pair(fx);\n+    let (ptr, vtable) = if let Abi::ScalarPair(_, _) = arg.layout().abi {\n+        arg.load_scalar_pair(fx)\n+    } else {\n+        let (ptr, vtable) = arg.try_to_ptr().unwrap();\n+        (\n+            ptr.get_addr(fx),\n+            vtable.unwrap()\n+        )\n+    };\n+\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes();\n     let func_ref = fx.bcx.ins().load(\n         pointer_ty(fx.tcx),"}]}