{"sha": "ff49733274f4af79362f9f9aaf16fb6032b2a06d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNDk3MzMyNzRmNGFmNzkzNjJmOWY5YWFmMTZmYjYwMzJiMmEwNmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-22T23:28:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-25T16:36:32Z"}, "message": "std: Stabilize library APIs for 1.5\n\nThis commit stabilizes and deprecates library APIs whose FCP has closed in the\nlast cycle, specifically:\n\nStabilized APIs:\n\n* `fs::canonicalize`\n* `Path::{metadata, symlink_metadata, canonicalize, read_link, read_dir, exists,\n   is_file, is_dir}` - all moved to inherent methods from the `PathExt` trait.\n* `Formatter::fill`\n* `Formatter::width`\n* `Formatter::precision`\n* `Formatter::sign_plus`\n* `Formatter::sign_minus`\n* `Formatter::alternate`\n* `Formatter::sign_aware_zero_pad`\n* `string::ParseError`\n* `Utf8Error::valid_up_to`\n* `Iterator::{cmp, partial_cmp, eq, ne, lt, le, gt, ge}`\n* `<[T]>::split_{first,last}{,_mut}`\n* `Condvar::wait_timeout` - note that `wait_timeout_ms` is not yet deprecated\n  but will be once 1.5 is released.\n* `str::{R,}MatchIndices`\n* `str::{r,}match_indices`\n* `char::from_u32_unchecked`\n* `VecDeque::insert`\n* `VecDeque::shrink_to_fit`\n* `VecDeque::as_slices`\n* `VecDeque::as_mut_slices`\n* `VecDeque::swap_remove_front` - (renamed from `swap_front_remove`)\n* `VecDeque::swap_remove_back` - (renamed from `swap_back_remove`)\n* `Vec::resize`\n* `str::slice_mut_unchecked`\n* `FileTypeExt`\n* `FileTypeExt::{is_block_device, is_char_device, is_fifo, is_socket}`\n* `BinaryHeap::from` - `from_vec` deprecated in favor of this\n* `BinaryHeap::into_vec` - plus a `Into` impl\n* `BinaryHeap::into_sorted_vec`\n\nDeprecated APIs\n\n* `slice::ref_slice`\n* `slice::mut_ref_slice`\n* `iter::{range_inclusive, RangeInclusive}`\n* `std::dynamic_lib`\n\nCloses #27706\nCloses #27725\ncc #27726 (align not stabilized yet)\nCloses #27734\nCloses #27737\nCloses #27742\nCloses #27743\nCloses #27772\nCloses #27774\nCloses #27777\nCloses #27781\ncc #27788 (a few remaining methods though)\nCloses #27790\nCloses #27793\nCloses #27796\nCloses #27810\ncc #28147 (not all parts stabilized)", "tree": {"sha": "1444494b80a935ed2e0adc250d061ddefb292b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1444494b80a935ed2e0adc250d061ddefb292b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff49733274f4af79362f9f9aaf16fb6032b2a06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff49733274f4af79362f9f9aaf16fb6032b2a06d", "html_url": "https://github.com/rust-lang/rust/commit/ff49733274f4af79362f9f9aaf16fb6032b2a06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff49733274f4af79362f9f9aaf16fb6032b2a06d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a855668fcc918071ecd1573abdeaccc6a99cbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a855668fcc918071ecd1573abdeaccc6a99cbbb", "html_url": "https://github.com/rust-lang/rust/commit/9a855668fcc918071ecd1573abdeaccc6a99cbbb"}], "stats": {"total": 469, "additions": 274, "deletions": 195}, "files": [{"sha": "3b9eec12ba3e9109734b165935812a3cf6e91d21", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -13,9 +13,7 @@\n #![feature(box_syntax)]\n #![feature(dynamic_lib)]\n #![feature(libc)]\n-#![feature(path_ext)]\n #![feature(rustc_private)]\n-#![feature(slice_splits)]\n #![feature(str_char)]\n #![feature(test)]\n #![feature(vec_push_all)]"}, {"sha": "7c5397a1af989d474c2cd4994d1e57ce61b2af84", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use std::dynamic_lib::DynamicLibrary;\n use std::io::prelude::*;\n use std::path::PathBuf;"}, {"sha": "30fc22e400a81a65273278b7d8e41e875739eda3", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -240,14 +240,9 @@ impl<T: Ord> BinaryHeap<T> {\n     #[unstable(feature = \"binary_heap_extras\",\n                reason = \"needs to be audited\",\n                issue = \"28147\")]\n+    #[deprecated(since = \"1.5.0\", reason = \"use BinaryHeap::from instead\")]\n     pub fn from_vec(vec: Vec<T>) -> BinaryHeap<T> {\n-        let mut heap = BinaryHeap { data: vec };\n-        let mut n = heap.len() / 2;\n-        while n > 0 {\n-            n -= 1;\n-            heap.sift_down(n);\n-        }\n-        heap\n+        BinaryHeap::from(vec)\n     }\n \n     /// Returns an iterator visiting all values in the underlying vector, in\n@@ -256,10 +251,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(binary_heap_extras)]\n-    ///\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n+    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.iter() {\n@@ -362,10 +355,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(binary_heap_extras)]\n-    ///\n     /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n+    /// let mut heap = BinaryHeap::from(vec![1, 3]);\n     ///\n     /// assert_eq!(heap.pop(), Some(3));\n     /// assert_eq!(heap.pop(), Some(1));\n@@ -475,42 +466,36 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(binary_heap_extras)]\n-    ///\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n+    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n     ///\n     /// // Will print in some order\n     /// for x in vec {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n-    #[unstable(feature = \"binary_heap_extras\",\n-               reason = \"needs to be audited\",\n-               issue = \"28147\")]\n-    pub fn into_vec(self) -> Vec<T> { self.data }\n+    #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n+    pub fn into_vec(self) -> Vec<T> {\n+        self.into()\n+    }\n \n     /// Consumes the `BinaryHeap` and returns a vector in sorted\n     /// (ascending) order.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(binary_heap_extras)]\n-    ///\n     /// use std::collections::BinaryHeap;\n     ///\n-    /// let mut heap = BinaryHeap::from_vec(vec![1, 2, 4, 5, 7]);\n+    /// let mut heap = BinaryHeap::from(vec![1, 2, 4, 5, 7]);\n     /// heap.push(6);\n     /// heap.push(3);\n     ///\n     /// let vec = heap.into_sorted_vec();\n     /// assert_eq!(vec, [1, 2, 3, 4, 5, 6, 7]);\n     /// ```\n-    #[unstable(feature = \"binary_heap_extras\",\n-               reason = \"needs to be audited\",\n-               issue = \"28147\")]\n+    #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n     pub fn into_sorted_vec(mut self) -> Vec<T> {\n         let mut end = self.len();\n         while end > 1 {\n@@ -744,10 +729,28 @@ impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n+impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n+    fn from(vec: Vec<T>) -> BinaryHeap<T> {\n+        let mut heap = BinaryHeap { data: vec };\n+        let mut n = heap.len() / 2;\n+        while n > 0 {\n+            n -= 1;\n+            heap.sift_down(n);\n+        }\n+        heap\n+    }\n+}\n+\n+impl<T> From<BinaryHeap<T>> for Vec<T> {\n+    fn from(heap: BinaryHeap<T>) -> Vec<T> {\n+        heap.data\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> BinaryHeap<T> {\n-        BinaryHeap::from_vec(iter.into_iter().collect())\n+        BinaryHeap::from(iter.into_iter().collect::<Vec<_>>())\n     }\n }\n \n@@ -763,10 +766,8 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(binary_heap_extras)]\n-    ///\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n+    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.into_iter() {"}, {"sha": "3bb8a11c6a57d4f9664d958a57f921ba7db5481e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -46,7 +46,6 @@\n #![feature(fmt_internals)]\n #![feature(fmt_radix)]\n #![feature(heap_api)]\n-#![feature(iter_order)]\n #![feature(iter_arith)]\n #![feature(iter_arith)]\n #![feature(lang_items)]\n@@ -60,14 +59,12 @@\n #![feature(staged_api)]\n #![feature(step_by)]\n #![feature(str_char)]\n-#![feature(str_match_indices)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(dropck_parametricity)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n-#![feature(utf8_error)]\n #![cfg_attr(test, feature(clone_from_slice, rand, test))]\n \n #![feature(no_std)]"}, {"sha": "ea4830fc3e6cefab41c11700a2e8e924a9637007", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -106,6 +106,7 @@ pub use core::slice::{Chunks, Windows};\n pub use core::slice::{Iter, IterMut};\n pub use core::slice::{SplitMut, ChunksMut, Split};\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n+#[allow(deprecated)]\n pub use core::slice::{bytes, mut_ref_slice, ref_slice};\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n \n@@ -214,29 +215,29 @@ impl<T> [T] {\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n+    #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_first(&self) -> Option<(&T, &[T])> {\n         core_slice::SliceExt::split_first(self)\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n+    #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         core_slice::SliceExt::split_first_mut(self)\n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n+    #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_last(&self) -> Option<(&T, &[T])> {\n         core_slice::SliceExt::split_last(self)\n \n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n+    #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         core_slice::SliceExt::split_last_mut(self)"}, {"sha": "97f8ed11650671a251419ea49f39c26a84587d62", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -277,8 +277,7 @@ impl str {\n     /// Takes a bytewise mutable slice from a string.\n     ///\n     /// Same as `slice_unchecked`, but works with `&mut str` instead of `&str`.\n-    #[unstable(feature = \"str_slice_mut\", reason = \"recently added\",\n-               issue = \"27793\")]\n+    #[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         core_str::StrExt::slice_mut_unchecked(self, begin, end)\n@@ -1192,9 +1191,7 @@ impl str {\n     /// let v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\n     /// assert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n     /// ```\n-    #[unstable(feature = \"str_match_indices\",\n-               reason = \"might have its iterator type changed\",\n-               issue = \"27743\")]\n+    #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(self, pat)\n     }\n@@ -1231,9 +1228,7 @@ impl str {\n     /// let v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\n     /// assert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n     /// ```\n-    #[unstable(feature = \"str_match_indices\",\n-               reason = \"might have its iterator type changed\",\n-               issue = \"27743\")]\n+    #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {"}, {"sha": "953908a4d52b5aef7c3ef485d0dd78bbfdf1cd82", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -1131,9 +1131,7 @@ impl ops::DerefMut for String {\n }\n \n /// Error returned from `String::from`\n-#[unstable(feature = \"str_parse_error\", reason = \"may want to be replaced with \\\n-                                                  Void if it ever exists\",\n-           issue = \"27734\")]\n+#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n #[derive(Copy)]\n pub enum ParseError {}\n "}, {"sha": "e3d56a620c07005955b0ace5c58212199a50e607", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -865,8 +865,6 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_resize)]\n-    ///\n     /// let mut vec = vec![\"hello\"];\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n@@ -875,9 +873,7 @@ impl<T: Clone> Vec<T> {\n     /// vec.resize(2, 0);\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n-    #[unstable(feature = \"vec_resize\",\n-               reason = \"matches collection reform specification; waiting for dust to settle\",\n-               issue = \"27790\")]\n+    #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n "}, {"sha": "937ace00fdcca819f11147a24f74803c65723009", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -38,12 +38,13 @@ const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1\n const MAXIMUM_ZST_CAPACITY: usize = 1 << (usize::BITS - 1); // Largest possible power of two\n \n-/// `VecDeque` is a growable ring buffer, which can be used as a\n-/// double-ended queue efficiently.\n+/// `VecDeque` is a growable ring buffer, which can be used as a double-ended\n+/// queue efficiently.\n ///\n-/// The \"default\" usage of this type as a queue is to use `push_back` to add to the queue, and\n-/// `pop_front` to remove from the queue. `extend` and `append` push onto the back in this manner,\n-/// and iterating over `VecDeque` goes front to back.\n+/// The \"default\" usage of this type as a queue is to use `push_back` to add to\n+/// the queue, and `pop_front` to remove from the queue. `extend` and `append`\n+/// push onto the back in this manner, and iterating over `VecDeque` goes front\n+/// to back.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VecDeque<T> {\n     // tail and head are pointers into the buffer. Tail always points\n@@ -499,8 +500,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(deque_extras)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::with_capacity(15);\n@@ -509,9 +508,7 @@ impl<T> VecDeque<T> {\n     /// buf.shrink_to_fit();\n     /// assert!(buf.capacity() >= 4);\n     /// ```\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"needs to be audited\",\n-               issue = \"27788\")]\n+    #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         // +1 since the ringbuffer always leaves one space empty\n         // len + 1 can't overflow for an existing, well-formed ringbuffer.\n@@ -653,9 +650,7 @@ impl<T> VecDeque<T> {\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     #[inline]\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27788\")]\n+    #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn as_slices(&self) -> (&[T], &[T]) {\n         unsafe {\n             let contiguous = self.is_contiguous();\n@@ -674,9 +669,7 @@ impl<T> VecDeque<T> {\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     #[inline]\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27788\")]\n+    #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {\n         unsafe {\n             let contiguous = self.is_contiguous();\n@@ -1035,25 +1028,21 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(deque_extras)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n-    /// assert_eq!(buf.swap_back_remove(0), None);\n+    /// assert_eq!(buf.swap_remove_back(0), None);\n     /// buf.push_back(1);\n     /// buf.push_back(2);\n     /// buf.push_back(3);\n     ///\n-    /// assert_eq!(buf.swap_back_remove(0), Some(1));\n+    /// assert_eq!(buf.swap_remove_back(0), Some(1));\n     /// assert_eq!(buf.len(), 2);\n     /// assert_eq!(buf[0], 3);\n     /// assert_eq!(buf[1], 2);\n     /// ```\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"the naming of this function may be altered\",\n-               issue = \"27788\")]\n-    pub fn swap_back_remove(&mut self, index: usize) -> Option<T> {\n+    #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n+    pub fn swap_remove_back(&mut self, index: usize) -> Option<T> {\n         let length = self.len();\n         if length > 0 && index < length - 1 {\n             self.swap(index, length - 1);\n@@ -1063,6 +1052,15 @@ impl<T> VecDeque<T> {\n         self.pop_back()\n     }\n \n+    /// deprecated\n+    #[unstable(feature = \"deque_extras\",\n+               reason = \"the naming of this function may be altered\",\n+               issue = \"27788\")]\n+    #[deprecated(since = \"1.5.0\", reason = \"renamed to swap_remove_back\")]\n+    pub fn swap_back_remove(&mut self, index: usize) -> Option<T> {\n+        self.swap_remove_back(index)\n+    }\n+\n     /// Removes an element from anywhere in the `VecDeque` and returns it,\n     /// replacing it with the first element.\n     ///\n@@ -1073,25 +1071,21 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(deque_extras)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n-    /// assert_eq!(buf.swap_front_remove(0), None);\n+    /// assert_eq!(buf.swap_remove_front(0), None);\n     /// buf.push_back(1);\n     /// buf.push_back(2);\n     /// buf.push_back(3);\n     ///\n-    /// assert_eq!(buf.swap_front_remove(2), Some(3));\n+    /// assert_eq!(buf.swap_remove_front(2), Some(3));\n     /// assert_eq!(buf.len(), 2);\n     /// assert_eq!(buf[0], 2);\n     /// assert_eq!(buf[1], 1);\n     /// ```\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"the naming of this function may be altered\",\n-               issue = \"27788\")]\n-    pub fn swap_front_remove(&mut self, index: usize) -> Option<T> {\n+    #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n+    pub fn swap_remove_front(&mut self, index: usize) -> Option<T> {\n         let length = self.len();\n         if length > 0 && index < length && index != 0 {\n             self.swap(index, 0);\n@@ -1101,6 +1095,15 @@ impl<T> VecDeque<T> {\n         self.pop_front()\n     }\n \n+    /// deprecated\n+    #[unstable(feature = \"deque_extras\",\n+               reason = \"the naming of this function may be altered\",\n+               issue = \"27788\")]\n+    #[deprecated(since = \"1.5.0\", reason = \"renamed to swap_remove_front\")]\n+    pub fn swap_front_remove(&mut self, index: usize) -> Option<T> {\n+        self.swap_remove_front(index)\n+    }\n+\n     /// Inserts an element at `index` within the `VecDeque`. Whichever\n     /// end is closer to the insertion point will be moved to make room,\n     /// and all the affected elements will be moved to new positions.\n@@ -1111,8 +1114,6 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(deque_extras)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1121,9 +1122,7 @@ impl<T> VecDeque<T> {\n     /// buf.insert(1, 11);\n     /// assert_eq!(Some(&11), buf.get(1));\n     /// ```\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"needs to be audited\",\n-               issue = \"27788\")]\n+    #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn insert(&mut self, index: usize, value: T) {\n         assert!(index <= self.len(), \"index out of bounds\");\n         if self.is_full() {"}, {"sha": "21146f98360f7c7b8319080d216ca313a782b1c3", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -91,8 +91,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to an `char`, not checking whether it is a valid unicode\n /// codepoint.\n #[inline]\n-#[unstable(feature = \"char_from_unchecked\", reason = \"recently added API\",\n-           issue = \"27781\")]\n+#[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     transmute(i)\n }"}, {"sha": "f850cdbbd609057bb752bdbdd1bbeff1acb4ec87", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -1098,43 +1098,36 @@ impl<'a> Formatter<'a> {\n     pub fn flags(&self) -> u32 { self.flags }\n \n     /// Character used as 'fill' whenever there is alignment\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn fill(&self) -> char { self.fill }\n \n     /// Flag indicating what form of alignment was requested\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+    #[unstable(feature = \"fmt_flags_align\", reason = \"method was just created\",\n                issue = \"27726\")]\n     pub fn align(&self) -> Alignment { self.align }\n \n     /// Optionally specified integer width that the output should be\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn width(&self) -> Option<usize> { self.width }\n \n     /// Optionally specified precision for numeric types\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Determines if the `+` flag was specified.\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_plus(&self) -> bool { self.flags & (1 << FlagV1::SignPlus as u32) != 0 }\n \n     /// Determines if the `-` flag was specified.\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_minus(&self) -> bool { self.flags & (1 << FlagV1::SignMinus as u32) != 0 }\n \n     /// Determines if the `#` flag was specified.\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn alternate(&self) -> bool { self.flags & (1 << FlagV1::Alternate as u32) != 0 }\n \n     /// Determines if the `0` flag was specified.\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n-               issue = \"27726\")]\n+    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n     }"}, {"sha": "1a76c5c0419a201b1b565632dec93dc40168c2e6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -1257,7 +1257,7 @@ pub trait Iterator {\n \n     /// Lexicographically compares the elements of this `Iterator` with those\n     /// of another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn cmp<I>(mut self, other: I) -> Ordering where\n         I: IntoIterator<Item = Self::Item>,\n         Self::Item: Ord,\n@@ -1280,7 +1280,7 @@ pub trait Iterator {\n \n     /// Lexicographically compares the elements of this `Iterator` with those\n     /// of another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn partial_cmp<I>(mut self, other: I) -> Option<Ordering> where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n@@ -1303,7 +1303,7 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are equal to those of\n     /// another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn eq<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialEq<I::Item>,\n@@ -1322,7 +1322,7 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are unequal to those of\n     /// another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn ne<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialEq<I::Item>,\n@@ -1341,7 +1341,7 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// less than those of another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn lt<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n@@ -1368,7 +1368,7 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// less or equal to those of another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn le<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n@@ -1395,7 +1395,7 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// greater than those of another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn gt<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n@@ -1422,7 +1422,7 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// greater than or equal to those of another.\n-    #[unstable(feature = \"iter_order\", reason = \"needs review and revision\", issue = \"27737\")]\n+    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn ge<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n@@ -2934,6 +2934,8 @@ impl<A> Iterator for StepBy<A, RangeFrom<A>> where\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n+#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[allow(deprecated)]\n pub struct RangeInclusive<A> {\n     range: ops::Range<A>,\n     done: bool,\n@@ -2944,6 +2946,8 @@ pub struct RangeInclusive<A> {\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n+#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[allow(deprecated)]\n pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n     where A: Step + One + Clone\n {\n@@ -2956,6 +2960,8 @@ pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n+#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[allow(deprecated)]\n impl<A> Iterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -2990,6 +2996,8 @@ impl<A> Iterator for RangeInclusive<A> where\n #[unstable(feature = \"range_inclusive\",\n            reason = \"likely to be replaced by range notation and adapters\",\n            issue = \"27777\")]\n+#[deprecated(since = \"1.5.0\", reason = \"replaced with ... syntax\")]\n+#[allow(deprecated)]\n impl<A> DoubleEndedIterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>,\n@@ -3367,7 +3375,7 @@ pub fn once<T>(value: T) -> Once<T> {\n /// If two sequences are equal up until the point where one ends,\n /// the shorter sequence compares less.\n #[deprecated(since = \"1.4.0\", reason = \"use the equivalent methods on `Iterator` instead\")]\n-#[unstable(feature = \"iter_order\", reason = \"needs review and revision\",\n+#[unstable(feature = \"iter_order_deprecated\", reason = \"needs review and revision\",\n            issue = \"27737\")]\n pub mod order {\n     use cmp;"}, {"sha": "8fce64bd561dc6dc134868ec0ecac1a9fe38b6c6", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -290,6 +290,7 @@ impl<T> Option<T> {\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n     #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[allow(deprecated)]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Some(ref mut x) => {\n@@ -694,6 +695,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"as_slice\", reason = \"unsure of the utility here\",\n                issue = \"27776\")]\n     #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[allow(deprecated)]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Some(ref x) => slice::ref_slice(x),"}, {"sha": "e48252fa6f62a0a40d403484578658bf4985c544", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -408,6 +408,7 @@ impl<T, E> Result<T, E> {\n     #[unstable(feature = \"as_slice\", reason = \"unsure of the utility here\",\n                issue = \"27776\")]\n     #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[allow(deprecated)]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Ok(ref x) => slice::ref_slice(x),\n@@ -441,6 +442,7 @@ impl<T, E> Result<T, E> {\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n     #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n+    #[allow(deprecated)]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Ok(ref mut x) => slice::mut_ref_slice(x),"}, {"sha": "69851ab9caf3c983a66f43a2015ddcd930b591bd", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -1412,6 +1412,7 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n \n /// Converts a reference to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n+#[deprecated(since = \"1.5.0\", reason = \"unclear whether belongs in libstd\")]\n pub fn ref_slice<A>(s: &A) -> &[A] {\n     unsafe {\n         from_raw_parts(s, 1)\n@@ -1420,6 +1421,7 @@ pub fn ref_slice<A>(s: &A) -> &[A] {\n \n /// Converts a reference to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n+#[deprecated(since = \"1.5.0\", reason = \"unclear whether belongs in libstd\")]\n pub fn mut_ref_slice<A>(s: &mut A) -> &mut [A] {\n     unsafe {\n         from_raw_parts_mut(s, 1)"}, {"sha": "49b6c365314640b51b7f1abb1a63c299452dfe30", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -155,8 +155,7 @@ impl Utf8Error {\n     /// // the first byte is invalid here\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n-    #[unstable(feature = \"utf8_error\", reason = \"method just added\",\n-               issue = \"27734\")]\n+    #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n     pub fn valid_up_to(&self) -> usize { self.valid_up_to }\n }\n \n@@ -882,9 +881,7 @@ generate_pattern_iterators! {\n         /// Created with the method `.rmatch_indices()`.\n         struct RMatchIndices;\n     stability:\n-        #[unstable(feature = \"str_match_indices\",\n-                   reason = \"type may be removed or have its iterator impl changed\",\n-                   issue = \"27743\")]\n+        #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n     internal:\n         MatchIndicesInternal yielding ((usize, &'a str));\n     delegate double ended;"}, {"sha": "f02b945178fb9ac905828b1cdac371d717145d4c", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -87,8 +87,6 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::v1::*;\n-\n     use distributions::{Sample, IndependentSample};\n     use super::Exp;\n \n@@ -117,8 +115,6 @@ mod tests {\n mod bench {\n     extern crate test;\n \n-    use std::prelude::v1::*;\n-\n     use self::test::Bencher;\n     use std::mem::size_of;\n     use super::Exp;"}, {"sha": "fceda64cbb3f195e2d251bb74c07a5afd3164146", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -289,8 +289,6 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::v1::*;\n-\n     use distributions::{Sample, IndependentSample};\n     use super::{ChiSquared, StudentT, FisherF};\n \n@@ -351,7 +349,6 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use std::prelude::v1::*;\n     use self::test::Bencher;\n     use std::mem::size_of;\n     use distributions::IndependentSample;"}, {"sha": "4c62e1a350406ecd475d81ddebd838f466995b1f", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -263,8 +263,6 @@ fn ziggurat<R: Rng, P, Z>(rng: &mut R,\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::v1::*;\n-\n     use {Rng, Rand};\n     use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n "}, {"sha": "b2ccc5eb6095baed6558f2dff31e534f642a6069", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -144,8 +144,6 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::v1::*;\n-\n     use distributions::{Sample, IndependentSample};\n     use super::{Normal, LogNormal};\n \n@@ -184,7 +182,6 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use std::prelude::v1::*;\n     use self::test::Bencher;\n     use std::mem::size_of;\n     use distributions::Sample;"}, {"sha": "f94ef059dae8fc2a5f6fe5f57d0069e30825cd05", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -148,7 +148,6 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::v1::*;\n     use distributions::{Sample, IndependentSample};\n     use super::Range;\n "}, {"sha": "b5a1eb9520cec6eb1983925f9ac4c40b6b3674cb", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -39,7 +39,7 @@\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n \n-#![cfg_attr(test, feature(test, rand, rustc_private, iter_order))]\n+#![cfg_attr(test, feature(test, rand, rustc_private, iter_order_deprecated))]\n \n #![allow(deprecated)]\n "}, {"sha": "584cf78a1cdbfc9c2c4d9c83b8096276a022f43d", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -123,7 +123,7 @@ impl Default for ReseedWithDefault {\n mod tests {\n     use std::prelude::v1::*;\n \n-    use core::iter::{order, repeat};\n+    use core::iter::order;\n     use super::{ReseedingRng, ReseedWithDefault};\n     use {SeedableRng, Rng};\n "}, {"sha": "393329b42147c770975746d5667d0dc221495fc0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -35,26 +35,20 @@\n #![feature(duration_span)]\n #![feature(dynamic_lib)]\n #![feature(enumset)]\n-#![feature(fs_canonicalize)]\n #![feature(hashmap_hasher)]\n #![feature(into_cow)]\n #![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(libc)]\n #![feature(nonzero)]\n #![feature(num_bits_bytes)]\n-#![feature(path_ext)]\n #![feature(quote)]\n-#![feature(range_inclusive)]\n-#![feature(ref_slice)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(scoped_tls)]\n-#![feature(slice_splits)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(str_char)]\n-#![feature(str_match_indices)]\n #![feature(vec_push_all)]\n #![feature(wrapping)]\n #![feature(cell_extras)]"}, {"sha": "1548a3aed4bd8c381ec3ab9bf31302afb719e8ee", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -29,13 +29,13 @@ use middle::ty::*;\n use middle::ty;\n use std::cmp::Ordering;\n use std::fmt;\n-use std::iter::{range_inclusive, FromIterator, IntoIterator, repeat};\n-use std::slice;\n+use std::iter::{FromIterator, IntoIterator, repeat};\n \n use rustc_front::hir;\n use rustc_front::hir::Pat;\n use rustc_front::visit::{self, Visitor, FnKind};\n use rustc_front::util as front_util;\n+use rustc_back::slice;\n \n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n use syntax::ast_util;\n@@ -615,7 +615,7 @@ fn all_constructors(_cx: &MatchCheckCtxt, left_ty: Ty,\n \n         ty::TyRef(_, ty::TypeAndMut { ty, .. }) => match ty.sty {\n             ty::TySlice(_) =>\n-                range_inclusive(0, max_slice_length).map(|length| Slice(length)).collect(),\n+                (0..max_slice_length+1).map(|length| Slice(length)).collect(),\n             _ => vec![Single]\n         },\n \n@@ -790,7 +790,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n             match left_ty.sty {\n                 ty::TyArray(_, _) => vec!(Single),\n                 _                      => if slice.is_some() {\n-                    range_inclusive(before.len() + after.len(), max_slice_length)\n+                    (before.len() + after.len()..max_slice_length+1)\n                         .map(|length| Slice(length))\n                         .collect()\n                 } else {"}, {"sha": "751e748094d02b9ce55cf3300ecb134da40fe4e2", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -15,7 +15,6 @@ use metadata::creader::CrateReader;\n use plugin::registry::Registry;\n \n use std::borrow::ToOwned;\n-use std::dynamic_lib::DynamicLibrary;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n@@ -103,10 +102,13 @@ impl<'a> PluginLoader<'a> {\n     }\n \n     // Dynamically link a registrar function into the compiler process.\n+    #[allow(deprecated)]\n     fn dylink_registrar(&mut self,\n                         span: Span,\n                         path: PathBuf,\n                         symbol: String) -> PluginRegistrarFun {\n+        use std::dynamic_lib::DynamicLibrary;\n+\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(&path);\n "}, {"sha": "14fb064b7aabe4437cee37ac16eb1bab0643d475", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -33,9 +33,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n-#![feature(fs_canonicalize)]\n #![feature(libc)]\n-#![feature(path_ext)]\n #![feature(rand)]\n #![feature(rustc_private)]\n #![feature(slice_bytes)]\n@@ -57,3 +55,4 @@ pub mod rpath;\n pub mod sha2;\n pub mod svh;\n pub mod target;\n+pub mod slice;"}, {"sha": "5d8fc3acefd6f932829d8fefcbe86aa459ba2cc5", "filename": "src/librustc_back/slice.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_back%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_back%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fslice.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+pub fn ref_slice<T>(ptr: &T) -> &[T; 1] {\n+    unsafe { mem::transmute(ptr) }\n+}\n+\n+pub fn mut_ref_slice<T>(ptr: &mut T) -> &mut [T; 1] {\n+    unsafe { mem::transmute(ptr) }\n+}"}, {"sha": "920e0341372ba6afa47896911eecb46a6520669e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -35,7 +35,6 @@\n #![feature(box_syntax)]\n #![feature(num_bits_bytes)]\n #![feature(quote)]\n-#![feature(ref_slice)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n@@ -48,6 +47,7 @@ extern crate rustc;\n #[macro_use]\n extern crate log;\n extern crate rustc_front;\n+extern crate rustc_back;\n \n pub use rustc::lint as lint;\n pub use rustc::metadata as metadata;"}, {"sha": "8ed4706b1ce9ff2889e5d698d8c04d81d72fc8d9", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -18,16 +18,15 @@ use lint::{LateContext, EarlyContext, LintContext, LintArray};\n use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use std::collections::hash_map::Entry::{Occupied, Vacant};\n-use std::slice;\n \n use syntax::ast;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::Span;\n use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::ptr::P;\n \n+use rustc_back::slice;\n use rustc_front::hir;\n-\n use rustc_front::visit::FnKind;\n \n declare_lint! {"}, {"sha": "934dd660177b82c9d06ad4fdbe0eab02f7149c6d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -18,7 +18,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n \n-#![feature(ref_slice)]\n #![feature(rustc_private)]\n #![feature(into_cow)]\n \n@@ -27,6 +26,7 @@ extern crate graphviz as dot;\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_front;\n+extern crate rustc_back;\n extern crate syntax;\n \n pub mod build;"}, {"sha": "5059955c5dc33d3e13fba308aa0cef3f6198d8d5", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -13,12 +13,12 @@ use rustc::middle::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::subst::Substs;\n use rustc::middle::ty::{AdtDef, ClosureSubsts, Region, Ty};\n+use rustc_back::slice;\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir::InlineAsm;\n use syntax::ast::Name;\n use syntax::codemap::Span;\n use std::fmt::{Debug, Formatter, Error};\n-use std::slice;\n use std::u32;\n \n /// Lowered representation of a single function."}, {"sha": "106591724a79812f8af3d83fb8c2a91bb250b357", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -23,7 +23,6 @@\n #![feature(borrow_state)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(slice_splits)]\n #![feature(staged_api)]\n \n #[macro_use] extern crate log;"}, {"sha": "6171ff1382fbd4bda2e04d80b9803e4e7fc96141", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -36,7 +36,7 @@ use std::ascii;\n use std::char;\n use std::env;\n use std::ffi::OsString;\n-use std::fs::{self, PathExt};\n+use std::fs;\n use std::io::{self, Read, Write};\n use std::iter::once;\n use std::mem;"}, {"sha": "e02ce49132a7c10e3983d4d9996efdce37473374", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -33,16 +33,12 @@\n #![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(libc)]\n-#![feature(path_ext)]\n-#![feature(path_ext)]\n-#![feature(path_relative_from)]\n #![feature(path_relative_from)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(unicode)]\n-#![feature(unicode)]\n #![feature(vec_push_all)]\n \n #![allow(trivial_casts)]"}, {"sha": "bb1da9d71755eed1d878e58ee8c73ef382d25c42", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -66,15 +66,14 @@ use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n use util::nodemap::FnvHashSet;\n \n-use std::slice;\n use syntax::{abi, ast};\n use syntax::codemap::{Span, Pos};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token;\n \n use rustc_front::print::pprust;\n use rustc_front::hir;\n-\n+use rustc_back::slice;\n \n pub trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;"}, {"sha": "f085ce23e3f0c0d46e9cd527c945f03d7b6af4ed", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -115,7 +115,6 @@ use util::lev_distance::lev_distance;\n use std::cell::{Cell, Ref, RefCell};\n use std::collections::{HashSet};\n use std::mem::replace;\n-use std::slice;\n use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n@@ -130,6 +129,7 @@ use rustc_front::hir;\n use rustc_front::hir::Visibility;\n use rustc_front::hir::{Item, ItemImpl};\n use rustc_front::print::pprust;\n+use rustc_back::slice;\n \n mod assoc;\n pub mod dropck;"}, {"sha": "1a52df31f39ce99f21fb1aa8db259cb69fcd1828", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -81,10 +81,8 @@ This API is completely unstable and subject to change.\n #![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(quote)]\n-#![feature(ref_slice)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(slice_splits)]\n #![feature(staged_api)]\n #![feature(vec_push_all)]\n #![feature(cell_extras)]\n@@ -97,6 +95,7 @@ extern crate fmt_macros;\n extern crate rustc;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_front;\n+extern crate rustc_back;\n \n pub use rustc::front;\n pub use rustc::lint;"}, {"sha": "467c974690062e70ab934a4efd771a916f8f7653", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -34,7 +34,6 @@\n        test(no_crate_inject))]\n #![no_std]\n \n-#![feature(char_from_unchecked)]\n #![feature(core_char_ext)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]"}, {"sha": "db0da3764ba22039cbef4e913e23ef7b64b0f459", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -24,7 +24,6 @@\n #![feature(box_syntax)]\n #![feature(dynamic_lib)]\n #![feature(libc)]\n-#![feature(path_ext)]\n #![feature(path_relative_from)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]"}, {"sha": "7292ea5377e25d8bb0a293030c76c448c1484dd0", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use clean;\n \n use std::dynamic_lib as dl;"}, {"sha": "cbaff95dfddd730fddb73369a0bcd6fb8f30aa82", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use std::cell::{RefCell, Cell};\n use std::collections::{HashSet, HashMap};\n use std::dynamic_lib::DynamicLibrary;"}, {"sha": "684a300560644483fd78e2e07b517dc7ff28843a", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -16,7 +16,9 @@\n             reason = \"API has not been scrutinized and is highly likely to \\\n                       either disappear or change\",\n             issue = \"27810\")]\n+#![deprecated(since = \"1.5.0\", reason = \"replaced with crates.io crates\")]\n #![allow(missing_docs)]\n+#![allow(deprecated)]\n \n use prelude::v1::*;\n "}, {"sha": "6178f1bbb8e12d79b4ae8cf1354e664eed2c6544", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -955,8 +955,21 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n \n /// Returns the canonical form of a path with all intermediate components\n /// normalized and symbolic links resolved.\n-#[unstable(feature = \"fs_canonicalize\", reason = \"recently added API\",\n-           issue = \"27706\")]\n+///\n+/// This function may return an error in situations like where the path does not\n+/// exist, a component in the path is not a directory, or an I/O error happens.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::fs;\n+///\n+/// # fn foo() -> std::io::Result<()> {\n+/// let path = try!(fs::canonicalize(\"../a/../foo.txt\"));\n+/// # Ok(())\n+/// # }\n+/// ```\n+#[stable(feature = \"fs_canonicalize\", since = \"1.5.0\")]\n pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::canonicalize(path.as_ref())\n }\n@@ -1158,11 +1171,12 @@ impl Iterator for WalkDir {\n }\n \n /// Utility methods for paths.\n-#[unstable(feature = \"path_ext\",\n+#[unstable(feature = \"path_ext_deprecated\",\n            reason = \"The precise set of methods exposed on this trait may \\\n                      change and some methods may be removed.  For stable code, \\\n                      see the std::fs::metadata function.\",\n            issue = \"27725\")]\n+#[deprecated(since = \"1.5.0\", reason = \"replaced with inherent methods\")]\n pub trait PathExt {\n     /// Gets information on the file, directory, etc at this path.\n     ///\n@@ -1215,6 +1229,7 @@ pub trait PathExt {\n     fn is_dir(&self) -> bool;\n }\n \n+#[allow(deprecated)]\n impl PathExt for Path {\n     fn metadata(&self) -> io::Result<Metadata> { metadata(self) }\n     fn symlink_metadata(&self) -> io::Result<Metadata> { symlink_metadata(self) }"}, {"sha": "f8fbe485c9b27d89071c7cc07c7e7177c64deadd", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -21,4 +21,5 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n pub use super::{Read, Write, BufRead, Seek};\n+#[allow(deprecated)]\n pub use fs::PathExt;"}, {"sha": "93d1ce168b7e2e073afd763322f8ef955f528b52", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -210,7 +210,6 @@\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n #![feature(cfg_target_vendor)]\n-#![feature(char_from_unchecked)]\n #![feature(char_internals)]\n #![feature(clone_from_slice)]\n #![feature(collections)]\n@@ -225,7 +224,6 @@\n #![feature(heap_api)]\n #![feature(int_error_internals)]\n #![feature(into_cow)]\n-#![feature(iter_order)]\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(linkage, thread_local, asm)]\n@@ -251,7 +249,6 @@\n #![feature(decode_utf16)]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n-#![feature(vec_resize)]\n #![feature(wrapping)]\n #![feature(zero_one)]\n #![cfg_attr(windows, feature(str_utf16))]"}, {"sha": "fe12b671235a24d7f0294e5c97f853118a76a674", "filename": "src/libstd/path.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -101,12 +101,14 @@\n use ascii::*;\n use borrow::{Borrow, IntoCow, ToOwned, Cow};\n use cmp;\n+use fmt;\n+use fs;\n+use io;\n use iter;\n use mem;\n use ops::{self, Deref};\n use string::String;\n use vec::Vec;\n-use fmt;\n \n use ffi::{OsStr, OsString};\n \n@@ -1689,6 +1691,81 @@ impl Path {\n     pub fn display(&self) -> Display {\n         Display { path: self }\n     }\n+\n+\n+    /// Gets information on the file, directory, etc at this path.\n+    ///\n+    /// Consult the `fs::metadata` documentation for more info.\n+    ///\n+    /// This call preserves identical runtime/error semantics with\n+    /// `fs::metadata`.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn metadata(&self) -> io::Result<fs::Metadata> {\n+        fs::metadata(self)\n+    }\n+\n+    /// Gets information on the file, directory, etc at this path.\n+    ///\n+    /// Consult the `fs::symlink_metadata` documentation for more info.\n+    ///\n+    /// This call preserves identical runtime/error semantics with\n+    /// `fs::symlink_metadata`.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn symlink_metadata(&self) -> io::Result<fs::Metadata> {\n+        fs::symlink_metadata(self)\n+    }\n+\n+    /// Returns the canonical form of a path, normalizing all components and\n+    /// eliminate all symlinks.\n+    ///\n+    /// This call preserves identical runtime/error semantics with\n+    /// `fs::canonicalize`.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn canonicalize(&self) -> io::Result<PathBuf> {\n+        fs::canonicalize(self)\n+    }\n+\n+    /// Reads the symlink at this path.\n+    ///\n+    /// For more information see `fs::read_link`.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn read_link(&self) -> io::Result<PathBuf> {\n+        fs::read_link(self)\n+    }\n+\n+    /// Reads the directory at this path.\n+    ///\n+    /// For more information see `fs::read_dir`.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn read_dir(&self) -> io::Result<fs::ReadDir> {\n+        fs::read_dir(self)\n+    }\n+\n+    /// Boolean value indicator whether the underlying file exists on the local\n+    /// filesystem. Returns false in exactly the cases where `fs::stat` fails.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn exists(&self) -> bool {\n+        fs::metadata(self).is_ok()\n+    }\n+\n+    /// Whether the underlying implementation (be it a file path, or something\n+    /// else) points at a \"regular file\" on the FS. Will return false for paths\n+    /// to non-existent locations or directories or other non-regular files\n+    /// (named pipes, etc). Follows links when making this determination.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn is_file(&self) -> bool {\n+        fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)\n+    }\n+\n+    /// Whether the underlying implementation (be it a file path, or something\n+    /// else) is pointing at a directory in the underlying FS. Will return\n+    /// false for paths to non-existent locations or if the item is not a\n+    /// directory (eg files, named pipes, etc). Follows links when making this\n+    /// determination.\n+    #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    pub fn is_dir(&self) -> bool {\n+        fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1b32515e9f72ea76e57441f7ad3ce85bb6f94cf7", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -21,12 +21,12 @@ use time::Duration;\n /// A type indicating whether a timed wait on a condition variable returned\n /// due to a time out or not.\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n-#[unstable(feature = \"wait_timeout\", reason = \"newly added\", issue = \"27772\")]\n+#[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n pub struct WaitTimeoutResult(bool);\n \n impl WaitTimeoutResult {\n     /// Returns whether the wait was known to have timed out.\n-    #[unstable(feature = \"wait_timeout\", reason = \"newly added\", issue = \"27772\")]\n+    #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n     pub fn timed_out(&self) -> bool {\n         self.0\n     }\n@@ -189,8 +189,7 @@ impl Condvar {\n     ///\n     /// Like `wait`, the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n-    #[unstable(feature = \"wait_timeout\", reason = \"waiting for Duration\",\n-               issue = \"27772\")]\n+    #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n     pub fn wait_timeout<'a, T>(&self, guard: MutexGuard<'a, T>,\n                                dur: Duration)\n                                -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)> {"}, {"sha": "d87ab56d4e17729c0af9cabc8edebd56191106b8", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -81,12 +81,12 @@ use sys_common::mutex::Mutex;\n #[path = \"seh.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-// SNAP: i686-pc-windows-gnu\n+// stage0: i686-pc-windows-gnu\n #[cfg(all(stage0, windows, target_arch = \"x86_64\", target_env = \"gnu\"))]\n #[path = \"seh64_gnu.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-// SNAP: x86_64-pc-windows-msvc\n+// stage0: x86_64-pc-windows-msvc\n #[cfg(all(stage0, windows, target_arch = \"x86_64\", target_env = \"msvc\"))]\n #[path = \"seh.rs\"] #[doc(hidden)]\n pub mod imp;"}, {"sha": "5ef37ae51c994661f16ecca021b180892ea18b94", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -178,21 +178,23 @@ impl MetadataExt for fs::Metadata {\n }\n \n /// Add special unix types (block/char device, fifo and socket)\n-#[unstable(feature = \"file_type_ext\", reason = \"recently added API\",\n-           issue = \"27796\")]\n+#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n+    #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_block_device(&self) -> bool;\n     /// Returns whether this file type is a char device.\n+    #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_char_device(&self) -> bool;\n     /// Returns whether this file type is a fifo.\n+    #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_fifo(&self) -> bool;\n     /// Returns whether this file type is a socket.\n+    #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_socket(&self) -> bool;\n }\n \n-#[unstable(feature = \"file_type_ext\", reason = \"recently added API\",\n-           issue = \"27796\")]\n+#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n impl FileTypeExt for fs::FileType {\n     fn is_block_device(&self) -> bool { self.as_inner().is(libc::S_IFBLK) }\n     fn is_char_device(&self) -> bool { self.as_inner().is(libc::S_IFCHR) }"}, {"sha": "c2145ac875ac3242e41f9a4bea957b853d11513a", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -543,7 +543,7 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n }\n \n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-    use fs::{File, PathExt, set_permissions};\n+    use fs::{File, set_permissions};\n     if !from.is_file() {\n         return Err(Error::new(ErrorKind::InvalidInput,\n                               \"the source path is not an existing regular file\"))"}, {"sha": "b7968e9344f3c873f70260d46083c217788bfe78", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -356,6 +356,7 @@ pub mod guard {\n // but that caused Debian to detect an unnecessarily strict versioned\n // dependency on libc6 (#23628).\n #[cfg(target_os = \"linux\")]\n+#[allow(deprecated)]\n fn min_stack_size(attr: *const libc::pthread_attr_t) -> usize {\n     use dynamic_lib::DynamicLibrary;\n     use sync::Once;"}, {"sha": "b562e772b9c2c921d20413c1a02ac72ef5368495", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -22,7 +22,7 @@\n //! copy of that function in my mingw install (maybe it was broken?). Instead,\n //! this takes the route of using StackWalk64 in order to walk the stack.\n \n-#![allow(dead_code)]\n+#![allow(dead_code, deprecated)]\n \n use io::prelude::*;\n "}, {"sha": "e27bef0b1e9898becff3429b8456561c1aab53e2", "filename": "src/libstd/sys/windows/printing/gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fgnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fgnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fgnu.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use dynamic_lib::DynamicLibrary;\n use io;\n use io::prelude::*;"}, {"sha": "6f1db5df7db2aa62d664b48ae97a4e0fec1ead38", "filename": "src/libstd/sys/windows/printing/msvc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use sys_common::backtrace::{output, output_fileline};\n use ffi::CStr;\n use dynamic_lib::DynamicLibrary;"}, {"sha": "9adef08771d06fa32a297a943d4bbf3e37baf448", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -29,15 +29,13 @@\n #![feature(drain)]\n #![feature(filling_drop)]\n #![feature(libc)]\n-#![feature(ref_slice)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n #![feature(str_char)]\n #![feature(str_escape)]\n #![feature(unicode)]\n #![feature(vec_push_all)]\n-#![feature(vec_resize)]\n \n extern crate fmt_macros;\n extern crate serialize;"}, {"sha": "ef3aad1cd457c1b700e3d54c3d70fa6fd7f9bfec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -422,7 +422,7 @@ impl<'a> Parser<'a> {\n                                    this_token_str)))\n             }\n         } else {\n-            self.expect_one_of(slice::ref_slice(t), &[])\n+            self.expect_one_of(unsafe { slice::from_raw_parts(t, 1) }, &[])\n         }\n     }\n "}, {"sha": "d65e37fd2abc141295905b94946819e78012561f", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -65,7 +65,6 @@ impl<T> SmallVector<T> {\n                 result\n             }\n             One(ref v) => {\n-                // FIXME: Could be replaced with `slice::ref_slice(v)` when it is stable.\n                 unsafe { slice::from_raw_parts(v, 1) }\n             }\n             Many(ref vs) => vs"}, {"sha": "ced3a7d47d7b674a84d38babf317d6ed74e09edd", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -57,7 +57,6 @@\n #![deny(missing_docs)]\n \n #![feature(box_syntax)]\n-#![feature(path_ext)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(str_char)]"}, {"sha": "f107e1042816f4e635a9f863a7a730cf6492fdf1", "filename": "src/test/run-pass-fulldeps/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49733274f4af79362f9f9aaf16fb6032b2a06d/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs?ref=ff49733274f4af79362f9f9aaf16fb6032b2a06d", "patch": "@@ -13,12 +13,12 @@\n \n // ignore-cross-compile\n \n-#![feature(rustc_private, path_ext)]\n+#![feature(rustc_private)]\n \n extern crate rustc_back;\n \n use std::ffi::CString;\n-use std::fs::{self, File, PathExt};\n+use std::fs::{self, File};\n use rustc_back::tempdir::TempDir;\n \n fn rename_directory() {"}]}