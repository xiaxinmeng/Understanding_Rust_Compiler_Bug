{"sha": "70478ca5c83513beb91cce78ae57ade70849fca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDc4Y2E1YzgzNTEzYmViOTFjY2U3OGFlNTdhZGU3MDg0OWZjYTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-01T11:44:20Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-01T11:44:20Z"}, "message": "rustc::hir::map::definitions - fix O(n^2) when disambiguating\n\nInstead of finding the next free disambiguator by incrementing it until\nyou find a place, store the next available disambiguator in an hash-map.\n\nThis avoids O(n^2) performance when lots of items have the same\nun-disambiguated `DefPathData` - e.g. all `use` items have\n`DefPathData::Misc`.", "tree": {"sha": "dfc64171f8e200c2c60557355f1be6a015aafcb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc64171f8e200c2c60557355f1be6a015aafcb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70478ca5c83513beb91cce78ae57ade70849fca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70478ca5c83513beb91cce78ae57ade70849fca4", "html_url": "https://github.com/rust-lang/rust/commit/70478ca5c83513beb91cce78ae57ade70849fca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70478ca5c83513beb91cce78ae57ade70849fca4/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d14a846f4e34d2cf0db89423a32428ad8e924f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d14a846f4e34d2cf0db89423a32428ad8e924f", "html_url": "https://github.com/rust-lang/rust/commit/c9d14a846f4e34d2cf0db89423a32428ad8e924f"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "cdd5a6e3da7f1a6ff9d6a90abffaf6be1a787bb3", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70478ca5c83513beb91cce78ae57ade70849fca4/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70478ca5c83513beb91cce78ae57ade70849fca4/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=70478ca5c83513beb91cce78ae57ade70849fca4", "patch": "@@ -18,7 +18,7 @@ use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n use ich::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -153,7 +153,7 @@ pub struct Definitions {\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     macro_def_scopes: FxHashMap<Mark, DefId>,\n     expansions: FxHashMap<DefIndex, Mark>,\n-    keys_created: FxHashSet<DefKey>,\n+    next_disambiguator: FxHashMap<(DefIndex, DefPathData), u32>,\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -170,7 +170,7 @@ impl Clone for Definitions {\n             node_to_hir_id: self.node_to_hir_id.clone(),\n             macro_def_scopes: self.macro_def_scopes.clone(),\n             expansions: self.expansions.clone(),\n-            keys_created: self.keys_created.clone(),\n+            next_disambiguator: self.next_disambiguator.clone(),\n         }\n     }\n }\n@@ -402,7 +402,7 @@ impl Definitions {\n             node_to_hir_id: IndexVec::new(),\n             macro_def_scopes: FxHashMap(),\n             expansions: FxHashMap(),\n-            keys_created: FxHashSet(),\n+            next_disambiguator: FxHashMap(),\n         }\n     }\n \n@@ -516,21 +516,21 @@ impl Definitions {\n         // The root node must be created with create_root_def()\n         assert!(data != DefPathData::CrateRoot);\n \n-        // Find a unique DefKey. This basically means incrementing the disambiguator\n-        // until we get no match.\n-        let mut key = DefKey {\n+        // Find the next free disambiguator for this key.\n+        let disambiguator = {\n+            let next_disamb = self.next_disambiguator.entry((parent, data.clone())).or_insert(0);\n+            let disambiguator = *next_disamb;\n+            *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n+            disambiguator\n+        };\n+\n+        let key = DefKey {\n             parent: Some(parent),\n             disambiguated_data: DisambiguatedDefPathData {\n-                data,\n-                disambiguator: 0\n+                data, disambiguator\n             }\n         };\n \n-        while self.keys_created.contains(&key) {\n-            key.disambiguated_data.disambiguator += 1;\n-        }\n-        self.keys_created.insert(key.clone());\n-\n         let parent_hash = self.table.def_path_hash(parent);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n "}]}