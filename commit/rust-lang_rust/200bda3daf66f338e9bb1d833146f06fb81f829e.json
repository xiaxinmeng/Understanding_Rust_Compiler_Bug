{"sha": "200bda3daf66f338e9bb1d833146f06fb81f829e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGJkYTNkYWY2NmYzMzhlOWJiMWQ4MzMxNDZmMDZmYjgxZjgyOWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:16:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:16:57Z"}, "message": "Cleanup Field ty", "tree": {"sha": "635f87e05f916b42e9beea7065f5692a5e5ff4d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635f87e05f916b42e9beea7065f5692a5e5ff4d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200bda3daf66f338e9bb1d833146f06fb81f829e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200bda3daf66f338e9bb1d833146f06fb81f829e", "html_url": "https://github.com/rust-lang/rust/commit/200bda3daf66f338e9bb1d833146f06fb81f829e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200bda3daf66f338e9bb1d833146f06fb81f829e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "html_url": "https://github.com/rust-lang/rust/commit/08d3166c8b23b5a342f32e088f7e0d6e032ec17b"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "e854b22bf71f382d3ee50b378abd0a32035d76f1", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/200bda3daf66f338e9bb1d833146f06fb81f829e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200bda3daf66f338e9bb1d833146f06fb81f829e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=200bda3daf66f338e9bb1d833146f06fb81f829e", "patch": "@@ -265,8 +265,10 @@ impl StructField {\n         self.parent.variant_data(db).fields()[self.id].name.clone()\n     }\n \n-    pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.field_types(self.parent.into())[self.id].clone()\n+    pub fn ty(&self, db: &impl HirDatabase) -> Type {\n+        let var_id = self.parent.into();\n+        let ty = db.field_types(var_id)[self.id].clone();\n+        Type::new(db, self.parent.module(db).id.krate.into(), var_id, ty)\n     }\n \n     pub fn parent_def(&self, _db: &impl HirDatabase) -> VariantDef {\n@@ -940,15 +942,19 @@ pub struct Type {\n }\n \n impl Type {\n+    fn new(db: &impl HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {\n+        let resolver = lexical_env.resolver(db);\n+        let environment = TraitEnvironment::lower(db, &resolver);\n+        Type { krate, ty: InEnvironment { value: ty, environment } }\n+    }\n+\n     fn from_def(\n         db: &impl HirDatabase,\n         krate: CrateId,\n         def: impl HasResolver + Into<TyDefId>,\n     ) -> Type {\n-        let resolver = def.resolver(db);\n-        let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = db.ty(def.into());\n-        Type { krate, ty: InEnvironment { value: ty, environment } }\n+        Type::new(db, krate, def, ty)\n     }\n \n     pub fn is_bool(&self) -> bool {\n@@ -1039,11 +1045,16 @@ impl Type {\n     ) -> Vec<(StructField, Type)> {\n         // FIXME: check that ty and def match\n         match &self.ty.value {\n-            Ty::Apply(a_ty) => def\n-                .fields(db)\n-                .into_iter()\n-                .map(|it| (it, self.derived(it.ty(db).subst(&a_ty.parameters))))\n-                .collect(),\n+            Ty::Apply(a_ty) => {\n+                let field_types = db.field_types(def.into());\n+                def.fields(db)\n+                    .into_iter()\n+                    .map(|it| {\n+                        let ty = field_types[it.id].clone().subst(&a_ty.parameters);\n+                        (it, self.derived(ty))\n+                    })\n+                    .collect()\n+            }\n             _ => Vec::new(),\n         }\n     }"}, {"sha": "9484a61d5372913b877c353cb964d77cec7435e0", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/200bda3daf66f338e9bb1d833146f06fb81f829e/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200bda3daf66f338e9bb1d833146f06fb81f829e/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=200bda3daf66f338e9bb1d833146f06fb81f829e", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     per_ns::PerNs,\n     AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n     GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId,\n-    StructId, TraitId, TypeAliasId, TypeParamId,\n+    StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -544,16 +544,6 @@ impl HasResolver for FunctionId {\n     }\n }\n \n-impl HasResolver for DefWithBodyId {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        match self {\n-            DefWithBodyId::ConstId(c) => c.resolver(db),\n-            DefWithBodyId::FunctionId(f) => f.resolver(db),\n-            DefWithBodyId::StaticId(s) => s.resolver(db),\n-        }\n-    }\n-}\n-\n impl HasResolver for ConstId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.lookup(db).container.resolver(db)\n@@ -572,6 +562,25 @@ impl HasResolver for TypeAliasId {\n     }\n }\n \n+impl HasResolver for ImplId {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db)\n+            .resolver(db)\n+            .push_generic_params_scope(db, self.into())\n+            .push_impl_block_scope(self)\n+    }\n+}\n+\n+impl HasResolver for DefWithBodyId {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        match self {\n+            DefWithBodyId::ConstId(c) => c.resolver(db),\n+            DefWithBodyId::FunctionId(f) => f.resolver(db),\n+            DefWithBodyId::StaticId(s) => s.resolver(db),\n+        }\n+    }\n+}\n+\n impl HasResolver for ContainerId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n@@ -596,11 +605,12 @@ impl HasResolver for GenericDefId {\n     }\n }\n \n-impl HasResolver for ImplId {\n+impl HasResolver for VariantId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db)\n-            .resolver(db)\n-            .push_generic_params_scope(db, self.into())\n-            .push_impl_block_scope(self)\n+        match self {\n+            VariantId::EnumVariantId(it) => it.parent.resolver(db),\n+            VariantId::StructId(it) => it.resolver(db),\n+            VariantId::UnionId(it) => it.resolver(db),\n+        }\n     }\n }"}]}