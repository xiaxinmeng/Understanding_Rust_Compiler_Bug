{"sha": "b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWM0MjkwMDdlNmNlMWRjYmFlMmY5MDljZjVjZDZkMTBhOTkwMWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-08T10:48:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:13Z"}, "message": "Remove type_variadic_func and typ_array from cg_ssa", "tree": {"sha": "161159b6c5dcaeabd115d336da477ed243367931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161159b6c5dcaeabd115d336da477ed243367931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "html_url": "https://github.com/rust-lang/rust/commit/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e166bb217463a26028ad9b1724e686d54ba1415", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e166bb217463a26028ad9b1724e686d54ba1415", "html_url": "https://github.com/rust-lang/rust/commit/0e166bb217463a26028ad9b1724e686d54ba1415"}], "stats": {"total": 153, "additions": 80, "deletions": 73}, "files": [{"sha": "c2da49e3ac97eb8434b30d4ccdf8b461cb92f9cb", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "patch": "@@ -652,7 +652,37 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         OperandRef { val, layout: place.layout }\n     }\n \n+    fn write_operand_repeatedly(\n+        mut self,\n+        cg_elem: OperandRef<'tcx, &'ll Value>,\n+        count: u64,\n+        dest: PlaceRef<'tcx, &'ll Value>,\n+    ) -> Self {\n+        let zero = self.const_usize(0);\n+        let count = self.const_usize(count);\n+        let start = dest.project_index(&mut self, zero).llval;\n+        let end = dest.project_index(&mut self, count).llval;\n+\n+        let mut header_bx = self.build_sibling_block(\"repeat_loop_header\");\n+        let mut body_bx = self.build_sibling_block(\"repeat_loop_body\");\n+        let next_bx = self.build_sibling_block(\"repeat_loop_next\");\n+\n+        self.br(header_bx.llbb());\n+        let current = header_bx.phi(self.val_ty(start), &[start], &[self.llbb()]);\n+\n+        let keep_going = header_bx.icmp(IntPredicate::IntNE, current, end);\n+        header_bx.cond_br(keep_going, body_bx.llbb(), next_bx.llbb());\n \n+        let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n+        cg_elem.val.store(&mut body_bx,\n+            PlaceRef::new_sized(current, cg_elem.layout, align));\n+\n+        let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n+        body_bx.br(header_bx.llbb());\n+        header_bx.add_incoming_to_phi(current, next, body_bx.llbb());\n+\n+        next_bx\n+    }\n \n     fn range_metadata(&mut self, load: &'ll Value, range: Range<u128>) {\n         if self.sess().target.target.arch == \"amdgpu\" {\n@@ -873,20 +903,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     /* Miscellaneous instructions */\n-    fn phi(&mut self, ty: &'ll Type, vals: &[&'ll Value], bbs: &[&'ll BasicBlock]) -> &'ll Value {\n-        self.count_insn(\"addincoming\");\n-        assert_eq!(vals.len(), bbs.len());\n-        let phi = unsafe {\n-            llvm::LLVMBuildPhi(self.llbuilder, ty, noname())\n-        };\n-        unsafe {\n-            llvm::LLVMAddIncoming(phi, vals.as_ptr(),\n-                                  bbs.as_ptr(),\n-                                  vals.len() as c_uint);\n-            phi\n-        }\n-    }\n-\n     fn inline_asm_call(&mut self, asm: &CStr, cons: &CStr,\n                        inputs: &[&'ll Value], output: &'ll Type,\n                        volatile: bool, alignstack: bool,\n@@ -1188,13 +1204,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn add_incoming_to_phi(&mut self, phi: &'ll Value, val: &'ll Value, bb: &'ll BasicBlock) {\n-        self.count_insn(\"addincoming\");\n-        unsafe {\n-            llvm::LLVMAddIncoming(phi, &val, &bb, 1 as c_uint);\n-        }\n-    }\n-\n     fn set_invariant_load(&mut self, load: &'ll Value) {\n         unsafe {\n             llvm::LLVMSetMetadata(load, llvm::MD_invariant_load as c_uint,\n@@ -1526,4 +1535,25 @@ impl Builder<'a, 'll, 'tcx> {\n         let ptr = self.pointercast(ptr, self.cx.type_i8p());\n         self.call(lifetime_intrinsic, &[self.cx.const_u64(size), ptr], None);\n     }\n+\n+    fn phi(&mut self, ty: &'ll Type, vals: &[&'ll Value], bbs: &[&'ll BasicBlock]) -> &'ll Value {\n+        self.count_insn(\"addincoming\");\n+        assert_eq!(vals.len(), bbs.len());\n+        let phi = unsafe {\n+            llvm::LLVMBuildPhi(self.llbuilder, ty, noname())\n+        };\n+        unsafe {\n+            llvm::LLVMAddIncoming(phi, vals.as_ptr(),\n+                                  bbs.as_ptr(),\n+                                  vals.len() as c_uint);\n+            phi\n+        }\n+    }\n+\n+    fn add_incoming_to_phi(&mut self, phi: &'ll Value, val: &'ll Value, bb: &'ll BasicBlock) {\n+        self.count_insn(\"addincoming\");\n+        unsafe {\n+            llvm::LLVMAddIncoming(phi, &val, &bb, 1 as c_uint);\n+        }\n+    }\n }"}, {"sha": "a5ed64a66a39da1ebdf3fce19c258a8559516b04", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "patch": "@@ -141,6 +141,23 @@ impl CodegenCx<'ll, 'tcx> {\n         assert_eq!(size % unit_size, 0);\n         self.type_array(self.type_from_integer(unit), size / unit_size)\n     }\n+\n+    crate fn type_variadic_func(\n+        &self,\n+        args: &[&'ll Type],\n+        ret: &'ll Type\n+    ) -> &'ll Type {\n+        unsafe {\n+            llvm::LLVMFunctionType(ret, args.as_ptr(),\n+                                   args.len() as c_uint, True)\n+        }\n+    }\n+\n+    crate fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n+        unsafe {\n+            llvm::LLVMRustArrayType(ty, len)\n+        }\n+    }\n }\n \n impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -208,17 +225,6 @@ impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn type_variadic_func(\n-        &self,\n-        args: &[&'ll Type],\n-        ret: &'ll Type\n-    ) -> &'ll Type {\n-        unsafe {\n-            llvm::LLVMFunctionType(ret, args.as_ptr(),\n-                                   args.len() as c_uint, True)\n-        }\n-    }\n-\n     fn type_struct(\n         &self,\n         els: &[&'ll Type],\n@@ -231,13 +237,6 @@ impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-\n-    fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n-        unsafe {\n-            llvm::LLVMRustArrayType(ty, len)\n-        }\n-    }\n-\n     fn type_kind(&self, ty: &'ll Type) -> TypeKind {\n         unsafe {\n             llvm::LLVMRustGetTypeKind(ty).to_generic()"}, {"sha": "7a31c5b3950e0ab9a0c562f043da37c5756ea430", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "patch": "@@ -87,11 +87,11 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 if dest.layout.is_zst() {\n                     return bx;\n                 }\n-                let zero = bx.cx().const_usize(0);\n-                let start = dest.project_index(&mut bx, zero).llval;\n \n                 if let OperandValue::Immediate(v) = cg_elem.val {\n-                    let size = bx.cx().const_usize(dest.layout.size.bytes());\n+                    let zero = bx.const_usize(0);\n+                    let start = dest.project_index(&mut bx, zero).llval;\n+                    let size = bx.const_usize(dest.layout.size.bytes());\n \n                     // Use llvm.memset.p0i8.* to initialize all zero arrays\n                     if bx.cx().is_const_integral(v) && bx.cx().const_to_uint(v) == 0 {\n@@ -108,28 +108,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 }\n \n-                let count = bx.cx().const_usize(count);\n-                let end = dest.project_index(&mut bx, count).llval;\n-\n-                let mut header_bx = bx.build_sibling_block(\"repeat_loop_header\");\n-                let mut body_bx = bx.build_sibling_block(\"repeat_loop_body\");\n-                let next_bx = bx.build_sibling_block(\"repeat_loop_next\");\n-\n-                bx.br(header_bx.llbb());\n-                let current = header_bx.phi(bx.cx().val_ty(start), &[start], &[bx.llbb()]);\n-\n-                let keep_going = header_bx.icmp(IntPredicate::IntNE, current, end);\n-                header_bx.cond_br(keep_going, body_bx.llbb(), next_bx.llbb());\n-\n-                let align = dest.align.restrict_for_offset(dest.layout.field(bx.cx(), 0).size);\n-                cg_elem.val.store(&mut body_bx,\n-                    PlaceRef::new_sized(current, cg_elem.layout, align));\n-\n-                let next = body_bx.inbounds_gep(current, &[bx.cx().const_usize(1)]);\n-                body_bx.br(header_bx.llbb());\n-                header_bx.add_incoming_to_phi(current, next, body_bx.llbb());\n-\n-                next_bx\n+                bx.write_operand_repeatedly(cg_elem, count, dest)\n             }\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {"}, {"sha": "e121299363fda7880e75ce40005cc835e1326607", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "patch": "@@ -116,6 +116,14 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn load_operand(&mut self, place: PlaceRef<'tcx, Self::Value>)\n         -> OperandRef<'tcx, Self::Value>;\n \n+        /// Called for Rvalue::Repeat when the elem is neither a ZST nor optimizable using memset.\n+    fn write_operand_repeatedly(\n+        self,\n+        elem: OperandRef<'tcx, Self::Value>,\n+        count: u64,\n+        dest: PlaceRef<'tcx, Self::Value>,\n+    ) -> Self;\n+\n     fn range_metadata(&mut self, load: Self::Value, range: Range<u128>);\n     fn nonnull_metadata(&mut self, load: Self::Value);\n \n@@ -156,12 +164,6 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn icmp(&mut self, op: IntPredicate, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn fcmp(&mut self, op: RealPredicate, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n \n-    fn phi(\n-        &mut self,\n-        ty: Self::Type,\n-        vals: &[Self::Value],\n-        bbs: &[Self::BasicBlock],\n-    ) -> Self::Value;\n     fn inline_asm_call(\n         &mut self,\n         asm: &CStr,\n@@ -255,7 +257,6 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     ) -> Self::Value;\n     fn atomic_fence(&mut self, order: AtomicOrdering, scope: SynchronizationScope);\n     fn add_case(&mut self, s: Self::Value, on_val: Self::Value, dest: Self::BasicBlock);\n-    fn add_incoming_to_phi(&mut self, phi: Self::Value, val: Self::Value, bb: Self::BasicBlock);\n     fn set_invariant_load(&mut self, load: Self::Value);\n \n     /// Called for `StorageLive`"}, {"sha": "7fb2cb9d39362d1adae49b0683223496dfd2bbbd", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "patch": "@@ -23,9 +23,7 @@ pub trait BaseTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_f64(&self) -> Self::Type;\n \n     fn type_func(&self, args: &[Self::Type], ret: Self::Type) -> Self::Type;\n-    fn type_variadic_func(&self, args: &[Self::Type], ret: Self::Type) -> Self::Type;\n     fn type_struct(&self, els: &[Self::Type], packed: bool) -> Self::Type;\n-    fn type_array(&self, ty: Self::Type, len: u64) -> Self::Type;\n     fn type_kind(&self, ty: Self::Type) -> TypeKind;\n     fn type_ptr_to(&self, ty: Self::Type) -> Self::Type;\n     fn element_type(&self, ty: Self::Type) -> Self::Type;"}]}