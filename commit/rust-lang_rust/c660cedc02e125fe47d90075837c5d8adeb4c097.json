{"sha": "c660cedc02e125fe47d90075837c5d8adeb4c097", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjBjZWRjMDJlMTI1ZmU0N2Q5MDA3NTgzN2M1ZDhhZGViNGMwOTc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-03T12:07:06Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:52:47Z"}, "message": "Add a GlobalAlloc trait", "tree": {"sha": "f9081bf217426750630b0f601740c0d41f4bc886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9081bf217426750630b0f601740c0d41f4bc886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c660cedc02e125fe47d90075837c5d8adeb4c097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c660cedc02e125fe47d90075837c5d8adeb4c097", "html_url": "https://github.com/rust-lang/rust/commit/c660cedc02e125fe47d90075837c5d8adeb4c097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c660cedc02e125fe47d90075837c5d8adeb4c097/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b068867f0ac0851ff0b23381e5b1b1c09b4002e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b068867f0ac0851ff0b23381e5b1b1c09b4002e", "html_url": "https://github.com/rust-lang/rust/commit/9b068867f0ac0851ff0b23381e5b1b1c09b4002e"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "5c51bb2b51b9ca89d0ed2fc812392a9c2f446917", "filename": "src/libcore/heap.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c660cedc02e125fe47d90075837c5d8adeb4c097/src%2Flibcore%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c660cedc02e125fe47d90075837c5d8adeb4c097/src%2Flibcore%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fheap.rs?ref=c660cedc02e125fe47d90075837c5d8adeb4c097", "patch": "@@ -404,6 +404,36 @@ impl From<AllocErr> for CollectionAllocErr {\n     }\n }\n \n+// FIXME: docs\n+pub unsafe trait GlobalAlloc {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut Void;\n+\n+    unsafe fn dealloc(&self, ptr: *mut Void, layout: Layout);\n+\n+    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut Void {\n+        let size = layout.size();\n+        let ptr = self.alloc(layout);\n+        if !ptr.is_null() {\n+            ptr::write_bytes(ptr as *mut u8, 0, size);\n+        }\n+        ptr\n+    }\n+\n+    unsafe fn realloc(&self, ptr: *mut Void, old_layout: Layout, new_size: usize) -> *mut Void {\n+        let new_layout = Layout::from_size_align_unchecked(new_size, old_layout.align());\n+        let new_ptr = self.alloc(new_layout);\n+        if !new_ptr.is_null() {\n+            ptr::copy_nonoverlapping(\n+                ptr as *const u8,\n+                new_ptr as *mut u8,\n+                cmp::min(old_layout.size(), new_size),\n+            );\n+            self.dealloc(ptr, old_layout);\n+        }\n+        new_ptr\n+    }\n+}\n+\n /// An implementation of `Alloc` can allocate, reallocate, and\n /// deallocate arbitrary blocks of data described via `Layout`.\n ///"}]}