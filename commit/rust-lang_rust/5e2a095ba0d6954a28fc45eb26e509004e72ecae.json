{"sha": "5e2a095ba0d6954a28fc45eb26e509004e72ecae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMmEwOTViYTBkNjk1NGEyOGZjNDVlYjI2ZTUwOTAwNGU3MmVjYWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-18T21:16:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-18T21:16:23Z"}, "message": "Rollup merge of #69146 - matthewjasper:literal-qualif, r=eddyb\n\nAlways const qualify literals by type\n\nr? @eddyb", "tree": {"sha": "4fb53a68004f48446fd882b5e5959797ed4f2939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb53a68004f48446fd882b5e5959797ed4f2939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2a095ba0d6954a28fc45eb26e509004e72ecae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTFQnCRBK7hj4Ov3rIwAAdHIIAKqYDNzXTkRnD+J6h2l1Jhz9\nJfDzZmGHfcmZMODnMRUCkj8IvGyQ27WlHkohh6MeB1+1Ontg+f6qBn29K5/DhndN\n7/WJ+MfS+KtUFym8mJXzvwSb+sUWqsPx3TSBBiFJfqFXIQ2YMe4asVm9EbAno9ra\nxss85Gv+C+GI/VKjg/qZwqkNBYN8Jqrjt92WQAv0DTE7omN5C/vDiiVmZJmatFX4\naP8RqzCPejbX1yN9wbZmLrO2l66KmWaBuIvxNhZGMqvXEGQbXrRFDeXBBhkCoFm+\nMKtVJFGtnBSrmhhl+z2dC+6hI+MfZqXHnxbRmmKPBOWWrxUQBt8bwGGx1bR7BvI=\n=F5vF\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fb53a68004f48446fd882b5e5959797ed4f2939\nparent e620d0f337d0643c757bab791fc7d88d63217704\nparent f2980e71d936be7a39b9a472664363d93f2c7fd8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1582060583 +0100\ncommitter GitHub <noreply@github.com> 1582060583 +0100\n\nRollup merge of #69146 - matthewjasper:literal-qualif, r=eddyb\n\nAlways const qualify literals by type\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2a095ba0d6954a28fc45eb26e509004e72ecae", "html_url": "https://github.com/rust-lang/rust/commit/5e2a095ba0d6954a28fc45eb26e509004e72ecae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2a095ba0d6954a28fc45eb26e509004e72ecae/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e620d0f337d0643c757bab791fc7d88d63217704", "url": "https://api.github.com/repos/rust-lang/rust/commits/e620d0f337d0643c757bab791fc7d88d63217704", "html_url": "https://github.com/rust-lang/rust/commit/e620d0f337d0643c757bab791fc7d88d63217704"}, {"sha": "f2980e71d936be7a39b9a472664363d93f2c7fd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2980e71d936be7a39b9a472664363d93f2c7fd8", "html_url": "https://github.com/rust-lang/rust/commit/f2980e71d936be7a39b9a472664363d93f2c7fd8"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "cb43f7475b89a513edfdcf22409dd7f82ddcfb62", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e2a095ba0d6954a28fc45eb26e509004e72ecae/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2a095ba0d6954a28fc45eb26e509004e72ecae/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5e2a095ba0d6954a28fc45eb26e509004e72ecae", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// strange rules like `<T as Foo<'static>>::Bar: Sized` that\n     /// actually carry lifetime requirements.\n     pub fn is_sized(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n-        tcx_at.is_sized_raw(param_env.and(self))\n+        self.is_trivially_sized(tcx_at.tcx) || tcx_at.is_sized_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` implement the `Freeze`\n@@ -713,7 +713,43 @@ impl<'tcx> ty::TyS<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         span: Span,\n     ) -> bool {\n-        tcx.at(span).is_freeze_raw(param_env.and(self))\n+        self.is_trivially_freeze() || tcx.at(span).is_freeze_raw(param_env.and(self))\n+    }\n+\n+    /// Fast path helper for testing if a type is `Freeze`.\n+    ///\n+    /// Returning true means the type is known to be `Freeze`. Returning\n+    /// `false` means nothing -- could be `Freeze`, might not be.\n+    fn is_trivially_freeze(&self) -> bool {\n+        match self.kind {\n+            ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Bool\n+            | ty::Char\n+            | ty::Str\n+            | ty::Never\n+            | ty::Ref(..)\n+            | ty::RawPtr(_)\n+            | ty::FnDef(..)\n+            | ty::Error\n+            | ty::FnPtr(_) => true,\n+            ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_freeze),\n+            ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_freeze(),\n+            ty::Adt(..)\n+            | ty::Bound(..)\n+            | ty::Closure(..)\n+            | ty::Dynamic(..)\n+            | ty::Foreign(_)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Infer(_)\n+            | ty::Opaque(..)\n+            | ty::Param(_)\n+            | ty::Placeholder(_)\n+            | ty::Projection(_)\n+            | ty::UnnormalizedProjection(_) => false,\n+        }\n     }\n \n     /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely"}, {"sha": "215496e4d03cb7b108d4a3502a0d426072d642c7", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e2a095ba0d6954a28fc45eb26e509004e72ecae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2a095ba0d6954a28fc45eb26e509004e72ecae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=5e2a095ba0d6954a28fc45eb26e509004e72ecae", "patch": "@@ -94,32 +94,23 @@ pub trait Qualif {\n             }\n \n             Operand::Constant(ref constant) => {\n-                if constant.check_static_ptr(cx.tcx).is_some() {\n-                    // `mir_const_qualif` does return the qualifs in the final value of a `static`,\n-                    // so we could use value-based qualification here, but we shouldn't do this\n-                    // without a good reason.\n-                    //\n-                    // Note: this uses `constant.literal.ty` which is a reference or pointer to the\n-                    // type of the actual `static` item.\n-                    Self::in_any_value_of_ty(cx, constant.literal.ty)\n-                } else if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val\n-                {\n+                // Check the qualifs of the value of `const` items.\n+                if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val {\n                     assert!(promoted.is_none());\n                     // Don't peek inside trait associated constants.\n-                    if cx.tcx.trait_of_item(def_id).is_some() {\n-                        Self::in_any_value_of_ty(cx, constant.literal.ty)\n-                    } else {\n+                    if cx.tcx.trait_of_item(def_id).is_none() {\n                         let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n-                        let qualif = Self::in_qualifs(&qualifs);\n+                        if !Self::in_qualifs(&qualifs) {\n+                            return false;\n+                        }\n \n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n                         // with type parameters, take it into account.\n-                        qualif && Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     }\n-                } else {\n-                    false\n                 }\n+                // Otherwise use the qualifs of the type.\n+                Self::in_any_value_of_ty(cx, constant.literal.ty)\n             }\n         }\n     }"}, {"sha": "d9851a2f7942248a26cbaae65e19b3af11472935", "filename": "src/test/run-make-fulldeps/min-global-align/min_global_align.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e2a095ba0d6954a28fc45eb26e509004e72ecae/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2a095ba0d6954a28fc45eb26e509004e72ecae/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs?ref=5e2a095ba0d6954a28fc45eb26e509004e72ecae", "patch": "@@ -1,5 +1,5 @@\n #![feature(no_core, lang_items)]\n-#![crate_type=\"rlib\"]\n+#![crate_type = \"rlib\"]\n #![no_core]\n \n pub static STATIC_BOOL: bool = true;\n@@ -9,7 +9,6 @@ pub static mut STATIC_MUT_BOOL: bool = true;\n const CONST_BOOL: bool = true;\n pub static CONST_BOOL_REF: &'static bool = &CONST_BOOL;\n \n-\n #[lang = \"sized\"]\n trait Sized {}\n \n@@ -19,10 +18,13 @@ trait Copy {}\n #[lang = \"freeze\"]\n trait Freeze {}\n \n+// No `UnsafeCell`, so everything is `Freeze`.\n+impl<T: ?Sized> Freeze for T {}\n+\n #[lang = \"sync\"]\n trait Sync {}\n impl Sync for bool {}\n impl Sync for &'static bool {}\n \n-#[lang=\"drop_in_place\"]\n-pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) { }\n+#[lang = \"drop_in_place\"]\n+pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) {}"}]}