{"sha": "0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNDA2MmE5NGQzMzdhNzQ4MmViZjFkYmRjMWZmYTQ5ZjBhNzNiNTc=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-03-11T14:01:01Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-03-23T01:22:07Z"}, "message": "import trait engine to typeck", "tree": {"sha": "b8b8a576580a522c32ca853bef8e26209de9ed28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b8a576580a522c32ca853bef8e26209de9ed28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "html_url": "https://github.com/rust-lang/rust/commit/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20703b3d091658ddc58eb5b04ef6a14d04e5b40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20703b3d091658ddc58eb5b04ef6a14d04e5b40f", "html_url": "https://github.com/rust-lang/rust/commit/20703b3d091658ddc58eb5b04ef6a14d04e5b40f"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "fe919775da0b412a8e27280ca3b2bfed1d56e43a", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -27,7 +27,7 @@ use ty::{self, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n-use traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n+use traits::{self, ObligationCause, PredicateObligations};\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::BTreeMap;"}, {"sha": "4bc64acc7630690ddae18eda0394d5bfbe7bd3d0", "filename": "src/librustc/infer/outlives/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -11,7 +11,7 @@\n use infer::InferCtxt;\n use syntax::ast;\n use syntax::codemap::Span;\n-use traits::FulfillmentContext;\n+use traits::{FulfillmentContext, TraitEngine};\n use ty::{self, Ty, TypeFoldable};\n use ty::outlives::Component;\n use ty::wf;"}, {"sha": "317fe2cc2739d01754b43101a7649ba4682c4fdc", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -16,13 +16,6 @@ use super::{FulfillmentContext, FulfillmentError};\n use super::{ObligationCause, PredicateObligation, PendingPredicateObligation};\n \n pub trait TraitEngine<'tcx> {\n-    /// \"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\n-    /// creating a fresh type variable `$0` as well as a projection\n-    /// predicate `<SomeType as SomeTrait>::X == $0`. When the\n-    /// inference engine runs, it will attempt to find an impl of\n-    /// `SomeTrait` or a where clause that lets us unify `$0` with\n-    /// something concrete. If this fails, we'll unify `$0` with\n-    /// `projection_ty` again.\n     fn normalize_projection_type<'a, 'gcx>(\n         &mut self,\n         infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n@@ -31,9 +24,6 @@ pub trait TraitEngine<'tcx> {\n         cause: ObligationCause<'tcx>,\n     ) -> Ty<'tcx>;\n \n-    /// Requires that `ty` must implement the trait with `def_id` in\n-    /// the given environment. This trait must not have any type\n-    /// parameters (except for `Self`).\n     fn register_bound<'a, 'gcx>(\n         &mut self,\n         infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n@@ -62,8 +52,19 @@ pub trait TraitEngine<'tcx> {\n     fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>>;\n }\n \n-impl<'tcx> dyn TraitEngine<'tcx> {\n-    pub fn new(_tcx: TyCtxt<'_, '_, 'tcx>) -> Box<Self> {\n-        Box::new(FulfillmentContext::new())\n-    }\n+impl<'a, 'gcx, 'tcx> dyn TraitEngine<'tcx> +'tcx {\n+   pub fn new(_tcx: TyCtxt<'_, '_, 'tcx>) -> Box<Self + 'tcx>\n+   {\n+       Box::new(FulfillmentContext::new())\n+   }\n+\n+   pub fn register_predicate_obligations<I>(&mut self,\n+                                            infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+                                            obligations: I)\n+       where I: IntoIterator<Item = PredicateObligation<'tcx>>\n+   {\n+       for obligation in obligations {\n+           self.register_predicate_obligation(infcx, obligation);\n+       }\n+   }\n }"}, {"sha": "1c091d68a2ef1474271ff7cb64f858a560c05b67", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n             register_region_obligations: false\n         }\n     }\n-    \n+\n     pub fn register_predicate_obligations<I>(&mut self,\n                                              infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                              obligations: I)\n@@ -217,8 +217,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     }\n \n     fn select_all_or_error<'a, 'gcx>(&mut self,\n-                           infcx: &InferCtxt<'a, 'gcx, 'tcx>)\n-                           -> Result<(),Vec<FulfillmentError<'tcx>>>\n+                                     infcx: &InferCtxt<'a, 'gcx, 'tcx>)\n+                                     -> Result<(),Vec<FulfillmentError<'tcx>>>\n     {\n         self.select_where_possible(infcx)?;\n "}, {"sha": "1d5d3e41c9c9a4e628a3ce5b8ecf7b71dd94ba4a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -45,6 +45,7 @@ pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n pub use self::select::IntercrateAmbiguityCause;\n pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n pub use self::specialize::{SpecializesCache, find_associated_item};\n+pub use self::engine::TraitEngine;\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;\n pub use self::util::Supertraits;"}, {"sha": "a9d1c8bcc3d995865bb03b7eab182060fa2112ac", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -26,7 +26,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use ty::subst::{Subst, Substs};\n-use traits::{self, ObligationCause};\n+use traits::{self, ObligationCause, TraitEngine};\n use traits::select::IntercrateAmbiguityCause;\n use ty::{self, TyCtxt, TypeFoldable};\n use syntax_pos::DUMMY_SP;"}, {"sha": "31e851126d76ad495b8abf0d2513357d890c6ef4", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -18,7 +18,8 @@ use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n use infer::InferCtxt;\n use syntax_pos::Span;\n-use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, TraitEngine, Vtable};\n+use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n+             TraitEngine, Vtable};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::{Subst, Substs};\n use ty::fold::TypeFoldable;"}, {"sha": "b9ba0af2346b8753abe1e9c56e8fc6582d6d08d9", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -20,7 +20,7 @@ use dataflow::move_paths::MoveData;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n-use rustc::traits::{self, Normalized, FulfillmentContext};\n+use rustc::traits::{self, Normalized, TraitEngine};\n use rustc::traits::query::NoSolution;\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n@@ -662,7 +662,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         OP: FnOnce(&mut Self) -> InferResult<'tcx, R>,\n     {\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = TraitEngine::new(self.infcx.tcx);\n         let InferOk { value, obligations } = self.infcx.commit_if_ok(|_| op(self))?;\n         fulfill_cx.register_predicate_obligations(self.infcx, obligations);\n         if let Err(e) = fulfill_cx.select_all_or_error(self.infcx) {"}, {"sha": "8fe9f6bad1b3d86a3bd5a1c3a350f78e216c66a8", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n-use rustc::traits;\n+use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;"}, {"sha": "bff070ab73de342f06fab3ac80c225277594057e", "filename": "src/librustc_traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_traits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_traits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Futil.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -12,7 +12,7 @@ use rustc::infer::InferCtxt;\n use rustc::infer::canonical::{CanonicalVarValues, Canonicalize, Certainty, QueryRegionConstraints,\n                               QueryResult};\n use rustc::infer::region_constraints::{Constraint, RegionConstraintData};\n-use rustc::traits::FulfillmentContext;\n+use rustc::traits::{FulfillmentContext, TraitEngine};\n use rustc::traits::query::NoSolution;\n use rustc::ty;\n use std::fmt::Debug;"}, {"sha": "d508b6df924c23895c011c26714fc09911afa32f", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -16,7 +16,7 @@ use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{self, ObligationCause, TraitEngine};\n+use rustc::traits::{ObligationCause, TraitEngine};\n use util::common::ErrorReported;\n \n use syntax::ast;\n@@ -84,7 +84,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let impl_param_env = tcx.param_env(self_type_did);\n         let tcx = infcx.tcx;\n-        let mut fulfillment_cx = TraitEngine::new();\n+        let mut fulfillment_cx = TraitEngine::new(tcx);\n \n         let named_type = tcx.type_of(self_type_did);\n "}, {"sha": "2336742968b967d84723cf96ad2f0867cf61f491", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -95,8 +95,7 @@ use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{Kind, Subst, Substs};\n-use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n-use rustc::traits::engine::TraitEngine;\n+use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n@@ -635,7 +634,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n                 maybe_tables: infcx.in_progress_tables,\n             },\n             infcx,\n-            fulfillment_cx: RefCell::new(TraitEngine::new()),\n+            fulfillment_cx: RefCell::new(TraitEngine::new(tcx)),\n             locals: RefCell::new(NodeMap()),\n             deferred_call_resolutions: RefCell::new(DefIdMap()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n@@ -2883,7 +2882,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // is polymorphic) and the expected return type.\n                 // No argument expectations are produced if unification fails.\n                 let origin = self.misc(call_span);\n-                let ures = self.at(&origin, self.param_env).sup(ret_ty, formal_ret);\n+                let ures = self.at(&origin, self.param_env).sup(ret_ty, &formal_ret);\n \n                 // FIXME(#27336) can't use ? here, Try::from_error doesn't default\n                 // to identity so the resulting type is not constrained.\n@@ -2894,7 +2893,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         // out unconstrained or ambiguous, as we're\n                         // just trying to get hints here.\n                         self.save_and_restore_in_snapshot_flag(|_| {\n-                            let mut fulfill = TraitEngine::new();\n+                            let mut fulfill = TraitEngine::new(self.tcx);\n                             for obligation in ok.obligations {\n                                 fulfill.register_predicate_obligation(self, obligation);\n                             }"}, {"sha": "8a1f827749a7367b8a368a5dc139d71a5b06b9ec", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -372,7 +372,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         };\n \n-        let mut fulfill_cx = TraitEngine::new();\n+        let mut fulfill_cx = TraitEngine::new(tcx);\n \n         // Register an obligation for `A: Trait<B>`.\n         let cause = traits::ObligationCause::misc(span, impl_node_id);"}, {"sha": "de81de59a053c0b5977eba5a01786173520c1436", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=0c4062a94d337a7482ebf1dbdc1ffa49f0a73b57", "patch": "@@ -88,6 +88,7 @@ This API is completely unstable and subject to change.\n #![feature(slice_patterns)]\n #![feature(i128_type)]\n #![cfg_attr(stage0, feature(never_type))]\n+#![feature(dyn_trait)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n@@ -111,7 +112,7 @@ use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::traits::{FulfillmentContext, ObligationCause, ObligationCauseCode, TraitEngine};\n+use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine};\n use session::{CompileIncomplete, config};\n use util::common::time;\n \n@@ -160,7 +161,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 -> bool {\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let param_env = ty::ParamEnv::empty();\n-        let mut fulfill_cx = TraitEngine::new();\n+        let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n         match infcx.at(&cause, param_env).eq(expected, actual) {\n             Ok(InferOk { obligations, .. }) => {\n                 fulfill_cx.register_predicate_obligations(infcx, obligations);"}]}