{"sha": "12dd7781d64f5898a435bb3d0210e0518285e128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZGQ3NzgxZDY0ZjU4OThhNDM1YmIzZDAyMTBlMDUxODI4NWUxMjg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T02:01:00Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:27Z"}, "message": "std: unbox closures used in let bindings", "tree": {"sha": "b8dea6e2115ea0da309bff737df9645e2ee6474f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8dea6e2115ea0da309bff737df9645e2ee6474f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12dd7781d64f5898a435bb3d0210e0518285e128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12dd7781d64f5898a435bb3d0210e0518285e128", "html_url": "https://github.com/rust-lang/rust/commit/12dd7781d64f5898a435bb3d0210e0518285e128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12dd7781d64f5898a435bb3d0210e0518285e128/comments", "author": null, "committer": null, "parents": [{"sha": "fb14dad4d6f8547dc7e6ca0231d24580bdac96c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb14dad4d6f8547dc7e6ca0231d24580bdac96c9", "html_url": "https://github.com/rust-lang/rust/commit/fb14dad4d6f8547dc7e6ca0231d24580bdac96c9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "73bcdad34c3a0433f9efd39ac2fe9975923f93e3", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=12dd7781d64f5898a435bb3d0210e0518285e128", "patch": "@@ -344,7 +344,7 @@ mod test {\n         let (tx2, rx2) = channel();\n \n         spawn(move|| {\n-            let send_as = |ip, val: &[u8]| {\n+            let send_as = |&: ip, val: &[u8]| {\n                 match UdpSocket::bind(ip) {\n                     Ok(client) => {\n                         let client = box client;"}, {"sha": "25af3bf2d53835fca3b9c2f6378c49c5b201977d", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=12dd7781d64f5898a435bb3d0210e0518285e128", "patch": "@@ -321,10 +321,10 @@ pub fn float_to_str_bytes_common<T: Float>(\n         // cut off the one extra digit, and depending on its value\n         // round the remaining ones.\n         if limit_digits && dig == digit_count {\n-            let ascii2value = |chr: u8| {\n+            let ascii2value = |&: chr: u8| {\n                 (chr as char).to_digit(radix).unwrap()\n             };\n-            let value2ascii = |val: uint| {\n+            let value2ascii = |&: val: uint| {\n                 char::from_digit(val, radix).unwrap() as u8\n             };\n "}, {"sha": "615e3a21bd0ac79c774f5392fd265f7728057a01", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=12dd7781d64f5898a435bb3d0210e0518285e128", "patch": "@@ -195,7 +195,7 @@ impl Process {\n                 // up /dev/null into that file descriptor. Otherwise, the first file\n                 // descriptor opened up in the child would be numbered as one of the\n                 // stdio file descriptors, which is likely to wreak havoc.\n-                let setup = |src: Option<P>, dst: c_int| {\n+                let setup = |&: src: Option<P>, dst: c_int| {\n                     let src = match src {\n                         None => {\n                             let flags = if dst == libc::STDIN_FILENO {"}, {"sha": "b03c62395d1a081807296f0941aef38ec04d2ec7", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd7781d64f5898a435bb3d0210e0518285e128/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=12dd7781d64f5898a435bb3d0210e0518285e128", "patch": "@@ -162,7 +162,7 @@ impl Process {\n             // Similarly to unix, we don't actually leave holes for the stdio file\n             // descriptors, but rather open up /dev/null equivalents. These\n             // equivalents are drawn from libuv's windows process spawning.\n-            let set_fd = |fd: &Option<P>, slot: &mut HANDLE,\n+            let set_fd = |&: fd: &Option<P>, slot: &mut HANDLE,\n                           is_stdin: bool| {\n                 match *fd {\n                     None => {"}]}