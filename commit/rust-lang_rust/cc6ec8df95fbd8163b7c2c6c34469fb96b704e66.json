{"sha": "cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNmVjOGRmOTVmYmQ4MTYzYjdjMmM2YzM0NDY5ZmI5NmI3MDRlNjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-09T06:11:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-16T05:26:36Z"}, "message": "log: Introduce liblog, the old std::logging\n\nThis commit moves all logging out of the standard library into an external\ncrate. This crate is the new crate which is responsible for all logging macros\nand logging implementation. A few reasons for this change are:\n\n* The crate map has always been a bit of a code smell among rust programs. It\n  has difficulty being loaded on almost all platforms, and it's used almost\n  exclusively for logging and only logging. Removing the crate map is one of the\n  end goals of this movement.\n\n* The compiler has a fair bit of special support for logging. It has the\n  __log_level() expression as well as generating a global word per module\n  specifying the log level. This is unfairly favoring the built-in logging\n  system, and is much better done purely in libraries instead of the compiler\n  itself.\n\n* Initialization of logging is much easier to do if there is no reliance on a\n  magical crate map being available to set module log levels.\n\n* If the logging library can be written outside of the standard library, there's\n  no reason that it shouldn't be. It's likely that we're not going to build the\n  highest quality logging library of all time, so third-party libraries should\n  be able to provide just as high-quality logging systems as the default one\n  provided in the rust distribution.\n\nWith a migration such as this, the change does not come for free. There are some\nsubtle changes in the behavior of liblog vs the previous logging macros:\n\n* The core change of this migration is that there is no longer a physical\n  log-level per module. This concept is still emulated (it is quite useful), but\n  there is now only a global log level, not a local one. This global log level\n  is a reflection of the maximum of all log levels specified. The previously\n  generated logging code looked like:\n\n    if specified_level <= __module_log_level() {\n        println!(...)\n    }\n\n  The newly generated code looks like:\n\n    if specified_level <= ::log::LOG_LEVEL {\n        if ::log::module_enabled(module_path!()) {\n            println!(...)\n        }\n    }\n\n  Notably, the first layer of checking is still intended to be \"super fast\" in\n  that it's just a load of a global word and a compare. The second layer of\n  checking is executed to determine if the current module does indeed have\n  logging turned on.\n\n  This means that if any module has a debug log level turned on, all modules\n  with debug log levels get a little bit slower (they all do more expensive\n  dynamic checks to determine if they're turned on or not).\n\n  Semantically, this migration brings no change in this respect, but\n  runtime-wise, this will have a perf impact on some code.\n\n* A `RUST_LOG=::help` directive will no longer print out a list of all modules\n  that can be logged. This is because the crate map will no longer specify the\n  log levels of all modules, so the list of modules is not known. Additionally,\n  warnings can no longer be provided if a malformed logging directive was\n  supplied.\n\nThe new \"hello world\" for logging looks like:\n\n    #[phase(syntax, link)]\n    extern crate log;\n\n    fn main() {\n        debug!(\"Hello, world!\");\n    }", "tree": {"sha": "e42135ffbacece4c4353511f08ab9457c45fbe9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e42135ffbacece4c4353511f08ab9457c45fbe9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "html_url": "https://github.com/rust-lang/rust/commit/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "html_url": "https://github.com/rust-lang/rust/commit/e49c30a89a2f7fd4277bdbf5722a09b1d5700507"}], "stats": {"total": 3148, "additions": 1577, "deletions": 1571}, "files": [{"sha": "7c12b4edacb5b4f09dd8f2ed9606bb0ef157d957", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -51,7 +51,7 @@\n \n TARGET_CRATES := std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n-\t\t workcache url\n+\t\t workcache url log\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -60,15 +60,15 @@ DEPS_std := native:rustrt native:compiler-rt native:backtrace\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n-DEPS_syntax := std term serialize collections\n+DEPS_syntax := std term serialize collections log\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n-              collections time\n+              collections time log\n DEPS_rustdoc := rustc native:sundown serialize sync getopts collections \\\n                 test time\n DEPS_flate := std native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n-DEPS_serialize := std collections\n+DEPS_serialize := std collections log\n DEPS_term := std collections\n DEPS_semver := std\n DEPS_uuid := std serialize rand\n@@ -83,6 +83,7 @@ DEPS_time := std serialize\n DEPS_rand := std\n DEPS_url := std collections\n DEPS_workcache := std serialize collections std\n+DEPS_log := std sync\n \n TOOL_DEPS_compiletest := test green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc native"}, {"sha": "a1fcddcf6b351e245b84ae949735a560f9eea5c5", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,13 +9,16 @@\n // except according to those terms.\n \n #[crate_type = \"bin\"];\n+#[feature(phase)];\n \n #[allow(non_camel_case_types)];\n #[deny(warnings)];\n #[allow(deprecated_owned_vector)];\n \n extern crate test;\n extern crate getopts;\n+#[phase(link, syntax)]\n+extern crate log;\n \n use std::os;\n use std::io;"}, {"sha": "7233288a813288f7740f2ce84366ae3b21169ef5", "filename": "src/doc/rust.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -1055,7 +1055,7 @@ output slot type would normally be. For example:\n \n ~~~~\n fn my_err(s: &str) -> ! {\n-    info!(\"{}\", s);\n+    println!(\"{}\", s);\n     fail!();\n }\n ~~~~\n@@ -3885,6 +3885,9 @@ Rust provides several macros to log information. Here's a simple Rust program\n that demonstrates all four of them:\n \n ~~~~\n+#[feature(phase)];\n+#[phase(syntax, link)] extern crate log;\n+\n fn main() {\n     error!(\"This is an error log\")\n     warn!(\"This is a warn log\")"}, {"sha": "cdb521b96c42f6409d8c0b73946fc24dea99083b", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -796,7 +796,7 @@ unit, `()`, as the empty tuple if you like).\n ~~~~\n let mytup: (int, int, f64) = (10, 20, 30.0);\n match mytup {\n-  (a, b, c) => info!(\"{}\", a + b + (c as int))\n+  (a, b, c) => println!(\"{}\", a + b + (c as int))\n }\n ~~~~\n \n@@ -813,7 +813,7 @@ For example:\n struct MyTup(int, int, f64);\n let mytup: MyTup = MyTup(10, 20, 30.0);\n match mytup {\n-  MyTup(a, b, c) => info!(\"{}\", a + b + (c as int))\n+  MyTup(a, b, c) => println!(\"{}\", a + b + (c as int))\n }\n ~~~~\n \n@@ -1794,7 +1794,7 @@ use std::task::spawn;\n \n // proc is the closure which will be spawned.\n spawn(proc() {\n-    debug!(\"I'm a new task\")\n+    println!(\"I'm a new task\")\n });\n ~~~~\n "}, {"sha": "24478ff8c5fb56a17190269e6920ed6a05190039", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,7 +20,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[feature(macro_rules, managed_boxes, default_type_params)];\n+#[feature(macro_rules, managed_boxes, default_type_params, phase)];\n \n // NOTE remove the following two attributes after the next snapshot.\n #[allow(unrecognized_lint)];\n@@ -30,6 +30,7 @@\n extern crate rand;\n \n #[cfg(test)] extern crate test;\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n pub use bitv::Bitv;\n pub use btree::BTree;"}, {"sha": "2482359c6325a6c6bf876dcd4cb20f86c42d3ae3", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,9 +18,11 @@ Simple compression\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#[feature(phase)];\n+\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n use std::libc::{c_void, size_t, c_int};\n use std::libc;"}, {"sha": "6aa064bb69a6acf8e46850e4e7150405df42557c", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -86,7 +86,9 @@\n #[allow(missing_doc)];\n #[allow(deprecated_owned_vector)];\n \n-#[feature(globs)];\n+#[feature(globs, phase)];\n+\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n use std::cmp::Eq;\n use std::result::{Err, Ok};"}, {"sha": "78ea407d4eb53d19d6956eccd53331b4b7c80586", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -172,10 +172,11 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n // NB this does *not* include globs, please keep it that way.\n-#[feature(macro_rules)];\n+#[feature(macro_rules, phase)];\n #[allow(visible_private_types)];\n #[allow(deprecated_owned_vector)];\n \n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate rand;\n \n use std::mem::replace;"}, {"sha": "97924eca1b9fc19589e176707bb91e6080f0f508", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -178,14 +178,13 @@ impl GreenTask {\n                      f: proc()) -> ~GreenTask {\n         let TaskOpts {\n             notify_chan, name, stack_size,\n-            stderr, stdout, logger,\n+            stderr, stdout,\n         } = opts;\n \n         let mut green = GreenTask::new(pool, stack_size, f);\n         {\n             let task = green.task.get_mut_ref();\n             task.name = name;\n-            task.logger = logger;\n             task.stderr = stderr;\n             task.stdout = stdout;\n             match notify_chan {"}, {"sha": "d33ad0c8185ac9c25f4be20507f057377315cd7b", "filename": "src/liblog/directive.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -0,0 +1,134 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cmp;\n+use std::vec_ng::Vec;\n+\n+#[deriving(Show, Clone)]\n+pub struct LogDirective {\n+    name: Option<~str>,\n+    level: u32,\n+}\n+\n+static LOG_LEVEL_NAMES: [&'static str, ..4] = [\"error\", \"warn\", \"info\",\n+                                               \"debug\"];\n+\n+/// Parse an individual log level that is either a number or a symbolic log level\n+fn parse_log_level(level: &str) -> Option<u32> {\n+    from_str::<u32>(level).or_else(|| {\n+        let pos = LOG_LEVEL_NAMES.iter().position(|&name| name == level);\n+        pos.map(|p| p as u32 + 1)\n+    }).map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n+}\n+\n+/// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1\")\n+/// and return a vector with log directives.\n+///\n+/// Valid log levels are 0-255, with the most likely ones being 1-4 (defined in\n+/// std::).  Also supports string log levels of error, warn, info, and debug\n+pub fn parse_logging_spec(spec: &str) -> Vec<LogDirective> {\n+    let mut dirs = Vec::new();\n+    for s in spec.split(',') {\n+        if s.len() == 0 { continue }\n+        let mut parts = s.split('=');\n+        let (log_level, name) = match (parts.next(), parts.next(), parts.next()) {\n+            (Some(part0), None, None) => {\n+                // if the single argument is a log-level string or number,\n+                // treat that as a global fallback\n+                match parse_log_level(part0) {\n+                    Some(num) => (num, None),\n+                    None => (::MAX_LOG_LEVEL, Some(part0)),\n+                }\n+            }\n+            (Some(part0), Some(part1), None) => {\n+                match parse_log_level(part1) {\n+                    Some(num) => (num, Some(part0)),\n+                    _ => {\n+                        println!(\"warning: invalid logging spec '{}', \\\n+                                 ignoring it\", part1);\n+                        continue\n+                    }\n+                }\n+            },\n+            _ => {\n+                println!(\"warning: invalid logging spec '{}', \\\n+                         ignoring it\", s);\n+                continue\n+            }\n+        };\n+        dirs.push(LogDirective {\n+            name: name.map(|s| s.to_owned()),\n+            level: log_level,\n+        });\n+    }\n+    return dirs;\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::parse_logging_spec;\n+\n+    #[test]\n+    fn parse_logging_spec_valid() {\n+        let dirs = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4\");\n+        let dirs = dirs.as_slice();\n+        assert_eq!(dirs.len(), 3);\n+        assert_eq!(dirs[0].name, Some(~\"crate1::mod1\"));\n+        assert_eq!(dirs[0].level, 1);\n+\n+        assert_eq!(dirs[1].name, Some(~\"crate1::mod2\"));\n+        assert_eq!(dirs[1].level, ::MAX_LOG_LEVEL);\n+\n+        assert_eq!(dirs[2].name, Some(~\"crate2\"));\n+        assert_eq!(dirs[2].level, 4);\n+    }\n+\n+    #[test]\n+    fn parse_logging_spec_invalid_crate() {\n+        // test parse_logging_spec with multiple = in specification\n+        let dirs = parse_logging_spec(\"crate1::mod1=1=2,crate2=4\");\n+        let dirs = dirs.as_slice();\n+        assert_eq!(dirs.len(), 1);\n+        assert_eq!(dirs[0].name, Some(~\"crate2\"));\n+        assert_eq!(dirs[0].level, 4);\n+    }\n+\n+    #[test]\n+    fn parse_logging_spec_invalid_log_level() {\n+        // test parse_logging_spec with 'noNumber' as log level\n+        let dirs = parse_logging_spec(\"crate1::mod1=noNumber,crate2=4\");\n+        let dirs = dirs.as_slice();\n+        assert_eq!(dirs.len(), 1);\n+        assert_eq!(dirs[0].name, Some(~\"crate2\"));\n+        assert_eq!(dirs[0].level, 4);\n+    }\n+\n+    #[test]\n+    fn parse_logging_spec_string_log_level() {\n+        // test parse_logging_spec with 'warn' as log level\n+        let dirs = parse_logging_spec(\"crate1::mod1=wrong,crate2=warn\");\n+        let dirs = dirs.as_slice();\n+        assert_eq!(dirs.len(), 1);\n+        assert_eq!(dirs[0].name, Some(~\"crate2\"));\n+        assert_eq!(dirs[0].level, ::WARN);\n+    }\n+\n+    #[test]\n+    fn parse_logging_spec_global() {\n+        // test parse_logging_spec with no crate\n+        let dirs = parse_logging_spec(\"warn,crate2=4\");\n+        let dirs = dirs.as_slice();\n+        assert_eq!(dirs.len(), 2);\n+        assert_eq!(dirs[0].name, None);\n+        assert_eq!(dirs[0].level, 2);\n+        assert_eq!(dirs[1].name, Some(~\"crate2\"));\n+        assert_eq!(dirs[1].level, 4);\n+    }\n+}"}, {"sha": "6d2afa2a6431028fa71bb4007c0919fdac74c4c4", "filename": "src/liblog/lib.rs", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -0,0 +1,340 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+\n+Utilities for program-wide and customizable logging\n+\n+This module is used by the compiler when emitting output for the logging family\n+of macros. The methods of this module shouldn't necessarily be used directly,\n+but rather through the logging macros defined.\n+\n+There are five macros that the logging subsystem uses:\n+\n+* `log!(level, ...)` - the generic logging macro, takes a level as a u32 and any\n+                       related `format!` arguments\n+* `debug!(...)` - a macro hard-wired to the log level of `DEBUG`\n+* `info!(...)` - a macro hard-wired to the log level of `INFO`\n+* `warn!(...)` - a macro hard-wired to the log level of `WARN`\n+* `error!(...)` - a macro hard-wired to the log level of `ERROR`\n+\n+All of these macros use std::the same style of syntax as the `format!` syntax\n+extension. Details about the syntax can be found in the documentation of\n+`std::fmt` along with the Rust tutorial/manual.\n+\n+If you want to check at runtime if a given logging level is enabled (e.g. if the\n+information you would want to log is expensive to produce), you can use std::the\n+following macro:\n+\n+* `log_enabled!(level)` - returns true if logging of the given level is enabled\n+\n+## Enabling logging\n+\n+Log levels are controlled on a per-module basis, and by default all logging is\n+disabled except for `error!` (a log level of 1). Logging is controlled via the\n+`RUST_LOG` environment variable. The value of this environment variable is a\n+comma-separated list of logging directives. A logging directive is of the form:\n+\n+```notrust\n+path::to::module=log_level\n+```\n+\n+The path to the module is rooted in the name of the crate it was compiled for,\n+so if your program is contained in a file `hello.rs`, for example, to turn on\n+logging for this file you would use std::a value of `RUST_LOG=hello`.\n+Furthermore, this path is a prefix-search, so all modules nested in the\n+specified module will also have logging enabled.\n+\n+The actual `log_level` is optional to specify. If omitted, all logging will be\n+enabled. If specified, the it must be either a numeric in the range of 1-255, or\n+it must be one of the strings `debug`, `error`, `info`, or `warn`. If a numeric\n+is specified, then all logging less than or equal to that numeral is enabled.\n+For example, if logging level 3 is active, error, warn, and info logs will be\n+printed, but debug will be omitted.\n+\n+As the log level for a module is optional, the module to enable logging for is\n+also optional. If only a `log_level` is provided, then the global log level for\n+all modules is set to this value.\n+\n+Some examples of valid values of `RUST_LOG` are:\n+\n+```notrust\n+hello                // turns on all logging for the 'hello' module\n+info                 // turns on all info logging\n+hello=debug          // turns on debug logging for 'hello'\n+hello=3              // turns on info logging for 'hello'\n+hello,std::option    // turns on hello, and std's option logging\n+error,hello=warn     // turn on global error logging and also warn for hello\n+```\n+\n+## Performance and Side Effects\n+\n+Each of these macros will expand to code similar to:\n+\n+```rust,ignore\n+if log_level <= my_module_log_level() {\n+    ::log::log(log_level, format!(...));\n+}\n+```\n+\n+What this means is that each of these macros are very cheap at runtime if\n+they're turned off (just a load and an integer comparison). This also means that\n+if logging is disabled, none of the components of the log will be executed.\n+\n+*/\n+\n+#[crate_id = \"log#0.10-pre\"];\n+#[license = \"MIT/ASL2\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+\n+#[feature(macro_rules)];\n+#[deny(missing_doc)];\n+\n+extern crate sync;\n+\n+use std::cast;\n+use std::fmt;\n+use std::io::LineBufferedWriter;\n+use std::io;\n+use std::local_data;\n+use std::os;\n+use std::rt;\n+use std::vec;\n+use std::vec_ng::Vec;\n+\n+use sync::one::{Once, ONCE_INIT};\n+\n+pub mod macros;\n+mod directive;\n+\n+/// Maximum logging level of a module that can be specified. Common logging\n+/// levels are found in the DEBUG/INFO/WARN/ERROR constants.\n+pub static MAX_LOG_LEVEL: u32 = 255;\n+\n+/// The default logging level of a crate if no other is specified.\n+static DEFAULT_LOG_LEVEL: u32 = 1;\n+\n+/// An unsafe constant that is the maximum logging level of any module\n+/// specified. This is the first line of defense to determining whether a\n+/// logging statement should be run.\n+static mut LOG_LEVEL: u32 = MAX_LOG_LEVEL;\n+\n+static mut DIRECTIVES: *Vec<directive::LogDirective> =\n+    0 as *Vec<directive::LogDirective>;\n+\n+/// Debug log level\n+pub static DEBUG: u32 = 4;\n+/// Info log level\n+pub static INFO: u32 = 3;\n+/// Warn log level\n+pub static WARN: u32 = 2;\n+/// Error log level\n+pub static ERROR: u32 = 1;\n+\n+local_data_key!(local_logger: ~Logger)\n+\n+/// A trait used to represent an interface to a task-local logger. Each task\n+/// can have its own custom logger which can respond to logging messages\n+/// however it likes.\n+pub trait Logger {\n+    /// Logs a single message described by the `args` structure. The level is\n+    /// provided in case you want to do things like color the message, etc.\n+    fn log(&mut self, level: u32, args: &fmt::Arguments);\n+}\n+\n+struct DefaultLogger {\n+    handle: LineBufferedWriter<io::stdio::StdWriter>,\n+}\n+\n+impl Logger for DefaultLogger {\n+    // by default, just ignore the level\n+    fn log(&mut self, _level: u32, args: &fmt::Arguments) {\n+        match fmt::writeln(&mut self.handle, args) {\n+            Err(e) => fail!(\"failed to log: {}\", e),\n+            Ok(()) => {}\n+        }\n+    }\n+}\n+\n+impl Drop for DefaultLogger {\n+    fn drop(&mut self) {\n+        // FIXME(#12628): is failure the right thing to do?\n+        match self.handle.flush() {\n+            Err(e) => fail!(\"failed to flush a logger: {}\", e),\n+            Ok(()) => {}\n+        }\n+    }\n+}\n+\n+/// This function is called directly by the compiler when using the logging\n+/// macros. This function does not take into account whether the log level\n+/// specified is active or not, it will always log something if this method is\n+/// called.\n+///\n+/// It is not recommended to call this function directly, rather it should be\n+/// invoked through the logging family of macros.\n+pub fn log(level: u32, args: &fmt::Arguments) {\n+    // Completely remove the local logger from TLS in case anyone attempts to\n+    // frob the slot while we're doing the logging. This will destroy any logger\n+    // set during logging.\n+    let mut logger = local_data::pop(local_logger).unwrap_or_else(|| {\n+        ~DefaultLogger { handle: io::stderr() } as ~Logger\n+    });\n+    logger.log(level, args);\n+    local_data::set(local_logger, logger);\n+}\n+\n+/// Getter for the global log level. This is a function so that it can be called\n+/// safely\n+#[doc(hidden)]\n+#[inline(always)]\n+pub fn log_level() -> u32 { unsafe { LOG_LEVEL } }\n+\n+/// Replaces the task-local logger with the specified logger, returning the old\n+/// logger.\n+pub fn set_logger(logger: ~Logger) -> Option<~Logger> {\n+    let prev = local_data::pop(local_logger);\n+    local_data::set(local_logger, logger);\n+    return prev;\n+}\n+\n+/// Tests whether a given module's name is enabled for a particular level of\n+/// logging. This is the second layer of defense about determining whether a\n+/// module's log statement should be emitted or not.\n+#[doc(hidden)]\n+pub fn mod_enabled(level: u32, module: &str) -> bool {\n+    static mut INIT: Once = ONCE_INIT;\n+    unsafe { INIT.doit(init); }\n+\n+    // It's possible for many threads are in this function, only one of them\n+    // will peform the global initialization, but all of them will need to check\n+    // again to whether they should really be here or not. Hence, despite this\n+    // check being expanded manually in the logging macro, this function checks\n+    // the log level again.\n+    if level > unsafe { LOG_LEVEL } { return false }\n+\n+    // This assertion should never get tripped unless we're in an at_exit\n+    // handler after logging has been torn down and a logging attempt was made.\n+    assert!(unsafe { !DIRECTIVES.is_null() });\n+\n+    enabled(level, module, unsafe { (*DIRECTIVES).iter() })\n+}\n+\n+fn enabled(level: u32, module: &str,\n+           iter: vec::Items<directive::LogDirective>) -> bool {\n+    // Search for the longest match, the vector is assumed to be pre-sorted.\n+    for directive in iter.rev() {\n+        match directive.name {\n+            Some(ref name) if !module.starts_with(*name) => {},\n+            Some(..) | None => {\n+                return level <= directive.level\n+            }\n+        }\n+    }\n+    level <= DEFAULT_LOG_LEVEL\n+}\n+\n+/// Initialize logging for the current process.\n+///\n+/// This is not threadsafe at all, so initialization os performed through a\n+/// `Once` primitive (and this function is called from that primitive).\n+fn init() {\n+    let mut directives = match os::getenv(\"RUST_LOG\") {\n+        Some(spec) => directive::parse_logging_spec(spec),\n+        None => Vec::new(),\n+    };\n+\n+    // Sort the provided directives by length of their name, this allows a\n+    // little more efficient lookup at runtime.\n+    directives.sort_by(|a, b| {\n+        let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);\n+        let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);\n+        alen.cmp(&blen)\n+    });\n+\n+    let max_level = {\n+        let max = directives.iter().max_by(|d| d.level);\n+        max.map(|d| d.level).unwrap_or(DEFAULT_LOG_LEVEL)\n+    };\n+\n+    unsafe {\n+        LOG_LEVEL = max_level;\n+\n+        assert!(DIRECTIVES.is_null());\n+        DIRECTIVES = cast::transmute(~directives);\n+\n+        // Schedule the cleanup for this global for when the runtime exits.\n+        rt::at_exit(proc() {\n+            assert!(!DIRECTIVES.is_null());\n+            let _directives: ~Vec<directive::LogDirective> =\n+                cast::transmute(DIRECTIVES);\n+            DIRECTIVES = 0 as *Vec<directive::LogDirective>;\n+        });\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::enabled;\n+    use directive::LogDirective;\n+\n+    #[test]\n+    fn match_full_path() {\n+        let dirs = [LogDirective { name: Some(~\"crate2\"), level: 3 },\n+                    LogDirective { name: Some(~\"crate1::mod1\"), level: 2 }];\n+        assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n+        assert!(!enabled(3, \"crate1::mod1\", dirs.iter()));\n+        assert!(enabled(3, \"crate2\", dirs.iter()));\n+        assert!(!enabled(4, \"crate2\", dirs.iter()));\n+    }\n+\n+    #[test]\n+    fn no_match() {\n+        let dirs = [LogDirective { name: Some(~\"crate2\"), level: 3 },\n+                    LogDirective { name: Some(~\"crate1::mod1\"), level: 2 }];\n+        assert!(!enabled(2, \"crate3\", dirs.iter()));\n+    }\n+\n+    #[test]\n+    fn match_beginning() {\n+        let dirs = [LogDirective { name: Some(~\"crate2\"), level: 3 },\n+                    LogDirective { name: Some(~\"crate1::mod1\"), level: 2 }];\n+        assert!(enabled(3, \"crate2::mod1\", dirs.iter()));\n+    }\n+\n+    #[test]\n+    fn match_beginning_longest_match() {\n+        let dirs = [LogDirective { name: Some(~\"crate2\"), level: 3 },\n+                    LogDirective { name: Some(~\"crate2::mod\"), level: 4 },\n+                    LogDirective { name: Some(~\"crate1::mod1\"), level: 2 }];\n+        assert!(enabled(4, \"crate2::mod1\", dirs.iter()));\n+        assert!(!enabled(4, \"crate2\", dirs.iter()));\n+    }\n+\n+    #[test]\n+    fn match_default() {\n+        let dirs = [LogDirective { name: None, level: 3 },\n+                    LogDirective { name: Some(~\"crate1::mod1\"), level: 2 }];\n+        assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n+        assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n+    }\n+\n+    #[test]\n+    fn zero_level() {\n+        let dirs = [LogDirective { name: None, level: 3 },\n+                    LogDirective { name: Some(~\"crate1::mod1\"), level: 0 }];\n+        assert!(!enabled(1, \"crate1::mod1\", dirs.iter()));\n+        assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n+    }\n+}"}, {"sha": "1560eeebfcab25307513afe1737331c74bba7f78", "filename": "src/liblog/macros.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -0,0 +1,141 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Logging macros\n+\n+#[macro_escape];\n+\n+/// The standard logging macro\n+///\n+/// This macro will generically log over a provided level (of type u32) with a\n+/// format!-based argument list. See documentation in `std::fmt` for details on\n+/// how to use the syntax.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #[feature(phase)];\n+/// #[phase(syntax, link)] extern crate log;\n+///\n+/// # fn main() {\n+/// log!(log::DEBUG, \"this is a debug message\");\n+/// log!(log::WARN, \"this is a warning {}\", \"message\");\n+/// log!(6, \"this is a custom logging level: {level}\", level=6);\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! log(\n+    ($lvl:expr, $($arg:tt)+) => ({\n+        let lvl = $lvl;\n+        if log_enabled!(lvl) {\n+            format_args!(|args| { ::log::log(lvl, args) }, $($arg)+)\n+        }\n+    })\n+)\n+\n+/// A convenience macro for logging at the error log level.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #[feature(phase)];\n+/// #[phase(syntax, link)] extern crate log;\n+///\n+/// # fn main() {\n+/// # let error = 3;\n+/// error!(\"the build has failed with error code: {}\", error);\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! error(\n+    ($($arg:tt)*) => (log!(::log::ERROR, $($arg)*))\n+)\n+\n+/// A convenience macro for logging at the warning log level.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #[feature(phase)];\n+/// #[phase(syntax, link)] extern crate log;\n+///\n+/// # fn main() {\n+/// # let code = 3;\n+/// warn!(\"you may like to know that a process exited with: {}\", code);\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! warn(\n+    ($($arg:tt)*) => (log!(::log::WARN, $($arg)*))\n+)\n+\n+/// A convenience macro for logging at the info log level.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #[feature(phase)];\n+/// #[phase(syntax, link)] extern crate log;\n+///\n+/// # fn main() {\n+/// # let ret = 3;\n+/// info!(\"this function is about to return: {}\", ret);\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! info(\n+    ($($arg:tt)*) => (log!(::log::INFO, $($arg)*))\n+)\n+\n+/// A convenience macro for logging at the debug log level. This macro can also\n+/// be omitted at compile time by passing `--cfg ndebug` to the compiler. If\n+/// this option is not passed, then debug statements will be compiled.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #[feature(phase)];\n+/// #[phase(syntax, link)] extern crate log;\n+///\n+/// # fn main() {\n+/// debug!(\"x = {x}, y = {y}\", x=10, y=20);\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! debug(\n+    ($($arg:tt)*) => (if cfg!(not(ndebug)) { log!(::log::DEBUG, $($arg)*) })\n+)\n+\n+/// A macro to test whether a log level is enabled for the current module.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #[feature(phase)];\n+/// #[phase(syntax, link)] extern crate log;\n+///\n+/// # fn main() {\n+/// # struct Point { x: int, y: int }\n+/// # fn some_expensive_computation() -> Point { Point { x: 1, y: 2 } }\n+/// if log_enabled!(log::DEBUG) {\n+///     let x = some_expensive_computation();\n+///     debug!(\"x.x = {}, x.y = {}\", x.x, x.y);\n+/// }\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! log_enabled(\n+    ($lvl:expr) => ({\n+        let lvl = $lvl;\n+        (lvl != ::log::DEBUG || cfg!(not(ndebug))) &&\n+        lvl <= ::log::log_level() &&\n+        ::log::mod_enabled(lvl, module_path!())\n+    })\n+)"}, {"sha": "1d7938be2262083485e59540277bd2ef3685016d", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -209,7 +209,8 @@ impl Drop for Inner {\n         if self.close_on_drop && self.fd > libc::STDERR_FILENO {\n             let n = unsafe { libc::close(self.fd) };\n             if n != 0 {\n-                warn!(\"error {} when closing file descriptor {}\", n, self.fd);\n+                println!(\"error {} when closing file descriptor {}\", n,\n+                         self.fd);\n             }\n         }\n     }\n@@ -362,13 +363,10 @@ pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n     let mut buf = Vec::<u8>::with_capacity(size as uint);\n     let ptr = buf.as_mut_slice().as_mut_ptr() as *mut dirent_t;\n \n-    debug!(\"os::list_dir -- BEFORE OPENDIR\");\n-\n     let dir_ptr = p.with_ref(|buf| unsafe { opendir(buf) });\n \n     if dir_ptr as uint != 0 {\n         let mut paths = ~[];\n-        debug!(\"os::list_dir -- opendir() SUCCESS\");\n         let mut entry_ptr = 0 as *mut dirent_t;\n         while unsafe { readdir_r(dir_ptr, ptr, &mut entry_ptr) == 0 } {\n             if entry_ptr.is_null() { break }"}, {"sha": "615ed80a64866a06387ab48e57202d603d7a52a3", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -112,10 +112,7 @@ fn translate_error(errno: i32, detail: bool) -> IoError {\n             libc::ERROR_INVALID_FUNCTION => (io::InvalidInput,\n                                              \"illegal operation on a directory\"),\n \n-            x => {\n-                debug!(\"ignoring {}: {}\", x, os::last_os_error());\n-                (io::OtherIoError, \"unknown error\")\n-            }\n+            _ => (io::OtherIoError, \"unknown error\")\n         }\n     }\n \n@@ -141,10 +138,7 @@ fn translate_error(errno: i32, detail: bool) -> IoError {\n             x if x == libc::EAGAIN || x == libc::EWOULDBLOCK =>\n                 (io::ResourceUnavailable, \"resource temporarily unavailable\"),\n \n-            x => {\n-                debug!(\"ignoring {}: {}\", x, os::last_os_error());\n-                (io::OtherIoError, \"unknown error\")\n-            }\n+            _ => (io::OtherIoError, \"unknown error\")\n         }\n     }\n "}, {"sha": "a8018bec0a6e36b844206eab85be3538b2b7554f", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -89,10 +89,8 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n         };\n \n         let mut incoming = false;\n-        debug!(\"{} events to process\", n);\n         for event in events.slice_to(n as uint).iter() {\n             let fd = event.data as libc::c_int;\n-            debug!(\"data on fd {} (input = {})\", fd, input);\n             if fd == input {\n                 let mut buf = [0, ..1];\n                 // drain the input file descriptor of its input"}, {"sha": "7a42d1bfee368d2e7c50f5a83ad132ff6a75437b", "filename": "src/libnative/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -59,12 +59,11 @@ pub fn spawn(f: proc()) {\n pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n     let TaskOpts {\n         notify_chan, name, stack_size,\n-        logger, stderr, stdout,\n+        stderr, stdout,\n     } = opts;\n \n     let mut task = ~Task::new();\n     task.name = name;\n-    task.logger = logger;\n     task.stderr = stderr;\n     task.stdout = stdout;\n     match notify_chan {"}, {"sha": "1c1121f0940ce987a57ee9cf647178292dc4ec1f", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -501,10 +501,9 @@ pub mod write {\n  *    system linkers understand.\n  */\n \n-pub fn find_crate_id(attrs: &[ast::Attribute],\n-                     output: &OutputFilenames) -> CrateId {\n+pub fn find_crate_id(attrs: &[ast::Attribute], out_filestem: &str) -> CrateId {\n     match attr::find_crateid(attrs) {\n-        None => from_str(output.out_filestem).unwrap(),\n+        None => from_str(out_filestem).unwrap(),\n         Some(s) => s,\n     }\n }\n@@ -518,10 +517,9 @@ pub fn crate_id_hash(crate_id: &CrateId) -> ~str {\n     truncated_hash_result(&mut s).slice_to(8).to_owned()\n }\n \n-pub fn build_link_meta(krate: &ast::Crate,\n-                       output: &OutputFilenames) -> LinkMeta {\n+pub fn build_link_meta(krate: &ast::Crate, out_filestem: &str) -> LinkMeta {\n     let r = LinkMeta {\n-        crateid: find_crate_id(krate.attrs.as_slice(), output),\n+        crateid: find_crate_id(krate.attrs.as_slice(), out_filestem),\n         crate_hash: Svh::calculate(krate),\n     };\n     info!(\"{}\", r);"}, {"sha": "91425b89ba66988349ea13cc8fdbeef10c9bb049", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -46,6 +46,7 @@ use syntax::abi;\n use syntax::attr;\n use syntax::attr::{AttrMetaMethods};\n use syntax::codemap;\n+use syntax::crateid::CrateId;\n use syntax::diagnostic;\n use syntax::diagnostic::Emitter;\n use syntax::ext::base::CrateLoader;\n@@ -160,6 +161,15 @@ pub enum Input {\n     StrInput(~str)\n }\n \n+impl Input {\n+    fn filestem(&self) -> ~str {\n+        match *self {\n+            FileInput(ref ifile) => ifile.filestem_str().unwrap().to_str(),\n+            StrInput(_) => ~\"rust_out\",\n+        }\n+    }\n+}\n+\n pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n     -> ast::Crate {\n     let krate = time(sess.time_passes(), \"parsing\", (), |_| {\n@@ -182,6 +192,10 @@ pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n         krate.encode(&mut json);\n     }\n \n+    if sess.show_span() {\n+        front::show_span::run(sess, &krate);\n+    }\n+\n     krate\n }\n \n@@ -194,7 +208,8 @@ pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n /// standard library and prelude.\n pub fn phase_2_configure_and_expand(sess: Session,\n                                     loader: &mut CrateLoader,\n-                                    mut krate: ast::Crate)\n+                                    mut krate: ast::Crate,\n+                                    crate_id: &CrateId)\n                                     -> (ast::Crate, syntax::ast_map::Map) {\n     let time_passes = sess.time_passes();\n \n@@ -223,7 +238,8 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     krate = time(time_passes, \"expansion\", krate, |krate| {\n         let cfg = syntax::ext::expand::ExpansionConfig {\n             loader: loader,\n-            deriving_hash_type_parameter: sess.features.default_type_params.get()\n+            deriving_hash_type_parameter: sess.features.default_type_params.get(),\n+            crate_id: crate_id.clone(),\n         };\n         syntax::ext::expand::expand_crate(sess.parse_sess,\n                                           cfg,\n@@ -461,6 +477,9 @@ pub fn stop_after_phase_1(sess: Session) -> bool {\n         debug!(\"invoked with --parse-only, returning early from compile_input\");\n         return true;\n     }\n+    if sess.show_span() {\n+        return true;\n+    }\n     return sess.opts.debugging_opts & session::AST_JSON_NOEXPAND != 0;\n }\n \n@@ -484,7 +503,7 @@ fn write_out_deps(sess: Session,\n                   input: &Input,\n                   outputs: &OutputFilenames,\n                   krate: &ast::Crate) -> io::IoResult<()> {\n-    let id = link::find_crate_id(krate.attrs.as_slice(), outputs);\n+    let id = link::find_crate_id(krate.attrs.as_slice(), outputs.out_filestem);\n \n     let mut out_filenames = Vec::new();\n     for output_type in sess.opts.output_types.iter() {\n@@ -547,32 +566,29 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let (outputs, trans) = {\n+    let outputs;\n+    let trans = {\n         let (expanded_crate, ast_map) = {\n             let krate = phase_1_parse_input(sess, cfg, input);\n-            if sess.show_span() {\n-                front::show_span::run(sess, &krate);\n-                return;\n-            }\n             if stop_after_phase_1(sess) { return; }\n-            let loader = &mut Loader::new(sess);\n-            phase_2_configure_and_expand(sess, loader, krate)\n-        };\n-        let outputs = build_output_filenames(input,\n+            outputs = build_output_filenames(input,\n                                              outdir,\n                                              output,\n-                                             expanded_crate.attrs.as_slice(),\n+                                             krate.attrs.as_slice(),\n                                              sess);\n+            let loader = &mut Loader::new(sess);\n+            let id = link::find_crate_id(krate.attrs.as_slice(),\n+                                         outputs.out_filestem);\n+            phase_2_configure_and_expand(sess, loader, krate, &id)\n+        };\n \n         write_out_deps(sess, input, &outputs, &expanded_crate).unwrap();\n \n         if stop_after_phase_2(sess) { return; }\n \n         let analysis = phase_3_run_analysis_passes(sess, &expanded_crate, ast_map);\n         if stop_after_phase_3(sess) { return; }\n-        let trans = phase_4_translate_to_llvm(sess, expanded_crate,\n-                                              &analysis, &outputs);\n-        (outputs, trans)\n+        phase_4_translate_to_llvm(sess, expanded_crate, &analysis, &outputs)\n     };\n     phase_5_run_llvm_passes(sess, &trans, &outputs);\n     if stop_after_phase_5(sess) { return; }\n@@ -645,11 +661,13 @@ pub fn pretty_print_input(sess: Session,\n                           input: &Input,\n                           ppm: PpMode) {\n     let krate = phase_1_parse_input(sess, cfg, input);\n+    let id = link::find_crate_id(krate.attrs.as_slice(), input.filestem());\n \n     let (krate, ast_map, is_expanded) = match ppm {\n         PpmExpanded | PpmExpandedIdentified | PpmTyped => {\n             let loader = &mut Loader::new(sess);\n-            let (krate, ast_map) = phase_2_configure_and_expand(sess, loader, krate);\n+            let (krate, ast_map) = phase_2_configure_and_expand(sess, loader,\n+                                                                krate, &id);\n             (krate, Some(ast_map), true)\n         }\n         _ => (krate, None, false)\n@@ -1137,11 +1155,7 @@ pub fn build_output_filenames(input: &Input,\n                 None => Path::new(\".\")\n             };\n \n-            let mut stem = match *input {\n-                // FIXME (#9639): This needs to handle non-utf8 paths\n-                FileInput(ref ifile) => ifile.filestem_str().unwrap().to_str(),\n-                StrInput(_) => ~\"rust_out\"\n-            };\n+            let mut stem = input.filestem();\n \n             // If a crateid is present, we use it as the link name\n             let crateid = attr::find_crateid(attrs);"}, {"sha": "fb1ee16a9d2a45e230b9a1f3317fffea4fdae0f2", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -170,6 +170,7 @@ fn generate_test_harness(sess: session::Session, krate: ast::Crate)\n                              ExpansionConfig {\n                                  loader: loader,\n                                  deriving_hash_type_parameter: false,\n+                                 crate_id: from_str(\"test\").unwrap(),\n                              }),\n         path: RefCell::new(Vec::new()),\n         testfns: RefCell::new(Vec::new()),"}, {"sha": "66749cf5403a3478bbe3add18fc556cca480e167", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -30,7 +30,7 @@ This API is completely unstable and subject to change.\n #[allow(deprecated)];\n #[allow(deprecated_owned_vector)];\n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n-#[feature(quote, default_type_params)];\n+#[feature(quote, default_type_params, phase)];\n \n extern crate flate;\n extern crate arena;\n@@ -40,6 +40,8 @@ extern crate sync;\n extern crate getopts;\n extern crate collections;\n extern crate time;\n+#[phase(syntax, link)]\n+extern crate log;\n \n use back::link;\n use driver::session;\n@@ -318,7 +320,7 @@ pub fn run_compiler(args: &[~str]) {\n         let attrs = parse_crate_attrs(sess, &input);\n         let t_outputs = d::build_output_filenames(&input, &odir, &ofile,\n                                                   attrs.as_slice(), sess);\n-        let id = link::find_crate_id(attrs.as_slice(), &t_outputs);\n+        let id = link::find_crate_id(attrs.as_slice(), t_outputs.out_filestem);\n \n         if crate_id {\n             println!(\"{}\", id.to_str());"}, {"sha": "c2f5d0806a7984eb74d31eebda56c427470a080e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -2642,7 +2642,7 @@ pub fn trans_crate(sess: session::Session,\n         }\n     }\n \n-    let link_meta = link::build_link_meta(&krate, output);\n+    let link_meta = link::build_link_meta(&krate, output.out_filestem);\n \n     // Append \".rs\" to crate name as LLVM module identifier.\n     //"}, {"sha": "eda24fb6dc20a2379deff94e69cf87d6a4e487a3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -75,7 +75,9 @@ fn get_ast_and_resolve(cpath: &Path,\n \n     let krate = phase_1_parse_input(sess, cfg, &input);\n     let loader = &mut Loader::new(sess);\n-    let (krate, ast_map) = phase_2_configure_and_expand(sess, loader, krate);\n+    let id = from_str(\"rustdoc\").unwrap();\n+    let (krate, ast_map) = phase_2_configure_and_expand(sess, loader,\n+                                                        krate, &id);\n     let driver::driver::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n     } = phase_3_run_analysis_passes(sess, &krate, ast_map);"}, {"sha": "fff6e4dafb3035f33bb92d3d641e91ea9ca747f8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@\n #[crate_type = \"rlib\"];\n \n #[allow(deprecated_owned_vector)];\n-#[feature(globs, struct_variant, managed_boxes, macro_rules)];\n+#[feature(globs, struct_variant, managed_boxes, macro_rules, phase)];\n \n extern crate syntax;\n extern crate rustc;\n@@ -25,6 +25,8 @@ extern crate getopts;\n extern crate collections;\n extern crate testing = \"test\";\n extern crate time;\n+#[phase(syntax, link)]\n+extern crate log;\n \n use std::cell::RefCell;\n use std::local_data;"}, {"sha": "d8b7c52553836d7b4e98e3f1dd34052f15d05086", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -61,7 +61,9 @@ pub fn run(input: &str, libs: @RefCell<HashSet<Path>>, mut test_args: ~[~str]) -\n     let cfg = driver::build_configuration(sess);\n     let krate = driver::phase_1_parse_input(sess, cfg, &input);\n     let loader = &mut Loader::new(sess);\n-    let (krate, _) = driver::phase_2_configure_and_expand(sess, loader, krate);\n+    let id = from_str(\"rustdoc-test\").unwrap();\n+    let (krate, _) = driver::phase_2_configure_and_expand(sess, loader, krate,\n+                                                          &id);\n \n     let ctx = @core::DocContext {\n         krate: krate,"}, {"sha": "6cbfeee6aa7ad0628c72ef6f1030b2c79cf874c7", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -170,7 +170,6 @@ fn take_nonempty_prefix<T:Iterator<char>>(rdr: &mut T, pred: |char| -> bool)\n             }\n         }\n     }\n-    debug!(\"extracted nonempty prefix: {}\", buf);\n     (buf, ch)\n }\n "}, {"sha": "c27c5542ce1e0fb3d145dd03ee8850aeba2afac5", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -23,7 +23,7 @@ Core encoding and decoding interfaces.\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[allow(missing_doc)];\n #[forbid(non_camel_case_types)];\n-#[feature(macro_rules, managed_boxes, default_type_params)];\n+#[feature(macro_rules, managed_boxes, default_type_params, phase)];\n \n // NOTE remove the following two attributes after the next snapshot.\n #[allow(unrecognized_lint)];\n@@ -33,6 +33,8 @@ Core encoding and decoding interfaces.\n // test harness access\n #[cfg(test)]\n extern crate test;\n+#[phase(syntax, link)]\n+extern crate log;\n \n extern crate collections;\n "}, {"sha": "243f7b2055f397d0a95e47a60185e76cafcb6e15", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -97,6 +97,6 @@ pub unsafe fn annihilate() {\n \n     if debug_mem() {\n         // We do logging here w/o allocation.\n-        debug!(\"total boxes annihilated: {}\", n_total_boxes);\n+        println!(\"total boxes annihilated: {}\", n_total_boxes);\n     }\n }"}, {"sha": "c18d4e273c4773c1e3cfaf7a79e06dde01eae0ee", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -352,9 +352,7 @@ pub trait Reader {\n         let mut buf = [0];\n         loop {\n             match self.read(buf) {\n-                Ok(0) => {\n-                    debug!(\"read 0 bytes. trying again\");\n-                }\n+                Ok(0) => {}\n                 Ok(1) => return Ok(buf[0]),\n                 Ok(_) => unreachable!(),\n                 Err(e) => return Err(e)"}, {"sha": "9eeaf4635a482022c398c7d83bc39782d02a03a6", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -176,16 +176,14 @@ mod darwin_fd_limit {\n         if sysctl(&mut mib[0], 2, &mut maxfiles as *mut libc::c_int as *mut libc::c_void, &mut size,\n                   mut_null(), 0) != 0 {\n             let err = last_os_error();\n-            error!(\"raise_fd_limit: error calling sysctl: {}\", err);\n-            return;\n+            fail!(\"raise_fd_limit: error calling sysctl: {}\", err);\n         }\n \n         // Fetch the current resource limits\n         let mut rlim = rlimit{rlim_cur: 0, rlim_max: 0};\n         if getrlimit(RLIMIT_NOFILE, &mut rlim) != 0 {\n             let err = last_os_error();\n-            error!(\"raise_fd_limit: error calling getrlimit: {}\", err);\n-            return;\n+            fail!(\"raise_fd_limit: error calling getrlimit: {}\", err);\n         }\n \n         // Bump the soft limit to the smaller of kern.maxfilesperproc and the hard limit\n@@ -194,8 +192,7 @@ mod darwin_fd_limit {\n         // Set our newly-increased resource limit\n         if setrlimit(RLIMIT_NOFILE, &rlim) != 0 {\n             let err = last_os_error();\n-            error!(\"raise_fd_limit: error calling setrlimit: {}\", err);\n-            return;\n+            fail!(\"raise_fd_limit: error calling setrlimit: {}\", err);\n         }\n     }\n }"}, {"sha": "9e988eb4094eeceb2383d132a4e481b617e28aa0", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -398,9 +398,9 @@ pub trait Iterator<A> {\n     /// let xs = [1u, 4, 2, 3, 8, 9, 6];\n     /// let sum = xs.iter()\n     ///             .map(|&x| x)\n-    ///             .inspect(|&x| debug!(\"filtering {}\", x))\n+    ///             .inspect(|&x| println!(\"filtering {}\", x))\n     ///             .filter(|&x| x % 2 == 0)\n-    ///             .inspect(|&x| debug!(\"{} made it through\", x))\n+    ///             .inspect(|&x| println!(\"{} made it through\", x))\n     ///             .sum();\n     /// println!(\"{}\", sum);\n     /// ```"}, {"sha": "17c0e2235c0bf91a8d0f082211f7324f62a26126", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -53,7 +53,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n-          simd, linkage, default_type_params)];\n+          simd, linkage, default_type_params, phase)];\n \n // NOTE remove the following two attributes after the next snapshot.\n #[allow(unrecognized_lint)];\n@@ -73,6 +73,7 @@\n #[cfg(test)] extern crate rustuv;\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate green;\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n // Make and rand accessible for benchmarking/testcases\n #[cfg(test)] extern crate rand;\n@@ -178,7 +179,6 @@ pub mod path;\n pub mod cast;\n pub mod fmt;\n pub mod cleanup;\n-pub mod logging;\n pub mod mem;\n \n \n@@ -221,7 +221,6 @@ mod std {\n     pub use io;\n     pub use kinds;\n     pub use local_data;\n-    pub use logging;\n     pub use option;\n     pub use os;\n     pub use rt;"}, {"sha": "2271a7c23808f9b1c36f612d7d5328bf0cfff0da", "filename": "src/libstd/logging.rs", "status": "removed", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "patch": "@@ -1,184 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-Utilities for program-wide and customizable logging\n-\n-This module is used by the compiler when emitting output for the logging family\n-of macros. The methods of this module shouldn't necessarily be used directly,\n-but rather through the logging macros defined.\n-\n-There are five macros that the logging subsystem uses:\n-\n-* `log!(level, ...)` - the generic logging macro, takes a level as a u32 and any\n-                       related `format!` arguments\n-* `debug!(...)` - a macro hard-wired to the log level of `DEBUG`\n-* `info!(...)` - a macro hard-wired to the log level of `INFO`\n-* `warn!(...)` - a macro hard-wired to the log level of `WARN`\n-* `error!(...)` - a macro hard-wired to the log level of `ERROR`\n-\n-All of these macros use the same style of syntax as the `format!` syntax\n-extension. Details about the syntax can be found in the documentation of\n-`std::fmt` along with the Rust tutorial/manual.\n-\n-If you want to check at runtime if a given logging level is enabled (e.g. if the\n-information you would want to log is expensive to produce), you can use the\n-following macro:\n-\n-* `log_enabled!(level)` - returns true if logging of the given level is enabled\n-\n-## Enabling logging\n-\n-Log levels are controlled on a per-module basis, and by default all logging is\n-disabled except for `error!` (a log level of 1). Logging is controlled via the\n-`RUST_LOG` environment variable. The value of this environment variable is a\n-comma-separated list of logging directives. A logging directive is of the form:\n-\n-```ignore\n-path::to::module=log_level\n-```\n-\n-The path to the module is rooted in the name of the crate it was compiled for,\n-so if your program is contained in a file `hello.rs`, for example, to turn on\n-logging for this file you would use a value of `RUST_LOG=hello`. Furthermore,\n-this path is a prefix-search, so all modules nested in the specified module will\n-also have logging enabled.\n-\n-The actual `log_level` is optional to specify. If omitted, all logging will be\n-enabled. If specified, the it must be either a numeric in the range of 1-255, or\n-it must be one of the strings `debug`, `error`, `info`, or `warn`. If a numeric\n-is specified, then all logging less than or equal to that numeral is enabled.\n-For example, if logging level 3 is active, error, warn, and info logs will be\n-printed, but debug will be omitted.\n-\n-As the log level for a module is optional, the module to enable logging for is\n-also optional. If only a `log_level` is provided, then the global log level for\n-all modules is set to this value.\n-\n-Some examples of valid values of `RUST_LOG` are:\n-\n-```ignore\n-hello                // turns on all logging for the 'hello' module\n-info                 // turns on all info logging\n-hello=debug          // turns on debug logging for 'hello'\n-hello=3              // turns on info logging for 'hello'\n-hello,std::option    // turns on hello, and std's option logging\n-error,hello=warn     // turn on global error logging and also warn for hello\n-```\n-\n-## Performance and Side Effects\n-\n-Each of these macros will expand to code similar to:\n-\n-```rust,ignore\n-if log_level <= my_module_log_level() {\n-    ::std::logging::log(log_level, format!(...));\n-}\n-```\n-\n-What this means is that each of these macros are very cheap at runtime if\n-they're turned off (just a load and an integer comparison). This also means that\n-if logging is disabled, none of the components of the log will be executed.\n-\n-## Useful Values\n-\n-For convenience, if a value of `::help` is set for `RUST_LOG`, a program will\n-start, print out all modules registered for logging, and then exit.\n-\n-*/\n-\n-use fmt;\n-use io::LineBufferedWriter;\n-use io;\n-use io::Writer;\n-use mem::replace;\n-use ops::Drop;\n-use option::{Some, None, Option};\n-use prelude::drop;\n-use result::{Ok, Err};\n-use rt::local::Local;\n-use rt::task::Task;\n-\n-/// Debug log level\n-pub static DEBUG: u32 = 4;\n-/// Info log level\n-pub static INFO: u32 = 3;\n-/// Warn log level\n-pub static WARN: u32 = 2;\n-/// Error log level\n-pub static ERROR: u32 = 1;\n-\n-/// A trait used to represent an interface to a task-local logger. Each task\n-/// can have its own custom logger which can respond to logging messages\n-/// however it likes.\n-pub trait Logger {\n-    /// Logs a single message described by the `args` structure. The level is\n-    /// provided in case you want to do things like color the message, etc.\n-    fn log(&mut self, level: u32, args: &fmt::Arguments);\n-}\n-\n-struct DefaultLogger {\n-    handle: LineBufferedWriter<io::stdio::StdWriter>,\n-}\n-\n-impl Logger for DefaultLogger {\n-    // by default, just ignore the level\n-    fn log(&mut self, _level: u32, args: &fmt::Arguments) {\n-        match fmt::writeln(&mut self.handle, args) {\n-            Err(e) => fail!(\"failed to log: {}\", e),\n-            Ok(()) => {}\n-        }\n-    }\n-}\n-\n-impl Drop for DefaultLogger {\n-    fn drop(&mut self) {\n-        match self.handle.flush() {\n-            Err(e) => fail!(\"failed to flush a logger: {}\", e),\n-            Ok(()) => {}\n-        }\n-    }\n-}\n-\n-/// This function is called directly by the compiler when using the logging\n-/// macros. This function does not take into account whether the log level\n-/// specified is active or not, it will always log something if this method is\n-/// called.\n-///\n-/// It is not recommended to call this function directly, rather it should be\n-/// invoked through the logging family of macros.\n-pub fn log(level: u32, args: &fmt::Arguments) {\n-    // See io::stdio::with_task_stdout for why there's a few dances here. The\n-    // gist of it is that arbitrary code can run during logging (and set an\n-    // arbitrary logging handle into the task) so we need to be careful that the\n-    // local task is in TLS while we're running arbitrary code.\n-    let mut logger = {\n-        let mut task = Local::borrow(None::<Task>);\n-        task.get().logger.take()\n-    };\n-\n-    if logger.is_none() {\n-        logger = Some(~DefaultLogger { handle: io::stderr(), } as ~Logger);\n-    }\n-    logger.get_mut_ref().log(level, args);\n-\n-    let mut task = Local::borrow(None::<Task>);\n-    let prev = replace(&mut task.get().logger, logger);\n-    drop(task);\n-    drop(prev);\n-}\n-\n-/// Replaces the task-local logger with the specified logger, returning the old\n-/// logger.\n-pub fn set_logger(logger: ~Logger) -> Option<~Logger> {\n-    let mut task = Local::borrow(None::<Task>);\n-    replace(&mut task.get().logger, Some(logger))\n-}"}, {"sha": "6d96ea94d3115bfe220366db293cfcb20e3a56ac", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 101, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,107 +16,6 @@\n \n #[macro_escape];\n \n-/// The standard logging macro\n-///\n-/// This macro will generically log over a provided level (of type u32) with a\n-/// format!-based argument list. See documentation in `std::fmt` for details on\n-/// how to use the syntax, and documentation in `std::logging` for info about\n-/// logging macros.\n-///\n-/// # Example\n-///\n-/// ```\n-/// log!(::std::logging::DEBUG, \"this is a debug message\");\n-/// log!(::std::logging::WARN, \"this is a warning {}\", \"message\");\n-/// log!(6, \"this is a custom logging level: {level}\", level=6);\n-/// ```\n-#[macro_export]\n-macro_rules! log(\n-    ($lvl:expr, $($arg:tt)+) => ({\n-        let lvl = $lvl;\n-        if lvl <= __log_level() {\n-            format_args!(|args| {\n-                ::std::logging::log(lvl, args)\n-            }, $($arg)+)\n-        }\n-    })\n-)\n-\n-/// A convenience macro for logging at the error log level. See `std::logging`\n-/// for more information. about logging.\n-///\n-/// # Example\n-///\n-/// ```\n-/// # let error = 3;\n-/// error!(\"the build has failed with error code: {}\", error);\n-/// ```\n-#[macro_export]\n-macro_rules! error(\n-    ($($arg:tt)*) => (log!(1u32, $($arg)*))\n-)\n-\n-/// A convenience macro for logging at the warning log level. See `std::logging`\n-/// for more information. about logging.\n-///\n-/// # Example\n-///\n-/// ```\n-/// # let code = 3;\n-/// warn!(\"you may like to know that a process exited with: {}\", code);\n-/// ```\n-#[macro_export]\n-macro_rules! warn(\n-    ($($arg:tt)*) => (log!(2u32, $($arg)*))\n-)\n-\n-/// A convenience macro for logging at the info log level. See `std::logging`\n-/// for more information. about logging.\n-///\n-/// # Example\n-///\n-/// ```\n-/// # let ret = 3;\n-/// info!(\"this function is about to return: {}\", ret);\n-/// ```\n-#[macro_export]\n-macro_rules! info(\n-    ($($arg:tt)*) => (log!(3u32, $($arg)*))\n-)\n-\n-/// A convenience macro for logging at the debug log level. See `std::logging`\n-/// for more information. about logging.\n-///\n-/// # Example\n-///\n-/// ```\n-/// debug!(\"x = {x}, y = {y}\", x=10, y=20);\n-/// ```\n-#[macro_export]\n-macro_rules! debug(\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { log!(4u32, $($arg)*) })\n-)\n-\n-/// A macro to test whether a log level is enabled for the current module.\n-///\n-/// # Example\n-///\n-/// ```\n-/// # struct Point { x: int, y: int }\n-/// # fn some_expensive_computation() -> Point { Point { x: 1, y: 2 } }\n-/// if log_enabled!(std::logging::DEBUG) {\n-///     let x = some_expensive_computation();\n-///     debug!(\"x.x = {}, x.y = {}\", x.x, x.y);\n-/// }\n-/// ```\n-#[macro_export]\n-macro_rules! log_enabled(\n-    ($lvl:expr) => ({\n-        let lvl = $lvl;\n-        lvl <= __log_level() && (lvl != 4 || cfg!(not(ndebug)))\n-    })\n-)\n-\n /// The entry point for failure of rust tasks.\n ///\n /// This macro is used to inject failure into a rust task, causing the task to\n@@ -421,3 +320,15 @@ macro_rules! select {\n         { unreachable!() }\n     })\n }\n+\n+// When testing the standard library, we link to the liblog crate to get the\n+// logging macros. In doing so, the liblog crate was linked against the real\n+// version of libstd, and uses a different std::fmt module than the test crate\n+// uses. To get around this difference, we redefine the log!() macro here to be\n+// just a dumb version of what it should be.\n+#[cfg(test)]\n+macro_rules! log (\n+    ($lvl:expr, $($args:tt)*) => (\n+        if log_enabled!($lvl) { println!($($args)*) }\n+    )\n+)"}, {"sha": "0c46a5012994ad5aecd27b113aa242e03e3a821b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -1127,14 +1127,8 @@ impl Drop for MemoryMap {\n         if self.len == 0 { /* workaround for dummy_stack */ return; }\n \n         unsafe {\n-            match libc::munmap(self.data as *c_void, self.len as libc::size_t) {\n-                0 => (),\n-                -1 => match errno() as c_int {\n-                    libc::EINVAL => error!(\"invalid addr or len\"),\n-                    e => error!(\"unknown errno={}\", e)\n-                },\n-                r => error!(\"Unexpected result {}\", r)\n-            }\n+            // FIXME: what to do if this fails?\n+            let _ = libc::munmap(self.data as *c_void, self.len as libc::size_t);\n         }\n     }\n }"}, {"sha": "bf5ba6db5c3efde334884a7228e1c4e4f2e39434", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -163,7 +163,6 @@ pub unsafe fn read_and_zero<T>(dest: *mut T) -> T {\n   SAFETY NOTE: Pointer-arithmetic. Dragons be here.\n */\n pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: |*T|) {\n-    debug!(\"array_each_with_len: before iterate\");\n     if arr.is_null() {\n         fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n@@ -172,7 +171,6 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: |*T|) {\n         let n = arr.offset(e as int);\n         cb(*n);\n     }\n-    debug!(\"array_each_with_len: after iterate\");\n }\n \n /**\n@@ -189,7 +187,6 @@ pub unsafe fn array_each<T>(arr: **T, cb: |*T|) {\n         fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     let len = buf_len(arr);\n-    debug!(\"array_each inferred len: {}\", len);\n     array_each_with_len(arr, len, cb);\n }\n "}, {"sha": "aa024a53b89ecc812c12675d82d631cb74cff306", "filename": "src/libstd/rt/logging.rs", "status": "removed", "additions": 0, "deletions": 314, "changes": 314, "blob_url": "https://github.com/rust-lang/rust/blob/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "patch": "@@ -1,314 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use container::Container;\n-use from_str::from_str;\n-use iter::Iterator;\n-use libc::exit;\n-use option::{Some, None, Option};\n-use os;\n-use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n-use str::{Str, StrSlice};\n-use vec::{ImmutableVector, MutableTotalOrdVector, OwnedVector};\n-use vec_ng::Vec;\n-\n-struct LogDirective<'a> {\n-    name: Option<&'a str>,\n-    level: u32\n-}\n-\n-static MAX_LOG_LEVEL: u32 = 255;\n-static DEFAULT_LOG_LEVEL: u32 = 1;\n-static log_level_names : &'static[&'static str] = &'static[\"error\", \"warn\", \"info\", \"debug\"];\n-\n-/// Parse an individual log level that is either a number or a symbolic log level\n-fn parse_log_level(level: &str) -> Option<u32> {\n-    let num = from_str::<u32>(level);\n-    let mut log_level;\n-    match num {\n-        Some(num) => {\n-            if num < MAX_LOG_LEVEL {\n-                log_level = Some(num);\n-            } else {\n-                log_level = Some(MAX_LOG_LEVEL);\n-            }\n-        }\n-        _ => {\n-            let position = log_level_names.iter().position(|&name| name == level);\n-            match position {\n-                Some(position) => {\n-                    log_level = Some(::cmp::min(MAX_LOG_LEVEL, (position + 1) as u32))\n-                },\n-                _ => {\n-                    log_level = None;\n-                }\n-            }\n-        }\n-    }\n-    log_level\n-}\n-\n-/// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1\")\n-/// and return a vector with log directives.\n-/// Valid log levels are 0-255, with the most likely ones being 1-4 (defined in std::).\n-/// Also supports string log levels of error, warn, info, and debug\n-fn parse_logging_spec<'a>(spec: &'a str) -> Vec<LogDirective<'a>> {\n-    let mut dirs = Vec::new();\n-    for s in spec.split(',') {\n-        if s.len() == 0 { continue }\n-        let mut parts = s.split('=');\n-        let log_level;\n-        let name;\n-        match (parts.next(), parts.next(), parts.next()) {\n-            (Some(part0), None, None) => {\n-                //if the single argument is a log-level string or number,\n-                //treat that as a global fallback\n-                let possible_log_level = parse_log_level(part0);\n-                match possible_log_level {\n-                    Some(num) => {\n-                        name = None;\n-                        log_level = num;\n-                    },\n-                    None => {\n-                        log_level = MAX_LOG_LEVEL;\n-                        name = Some(part0);\n-                    }\n-                }\n-            }\n-            (Some(part0), Some(part1), None) => {\n-                let possible_log_level = parse_log_level(part1);\n-                match possible_log_level {\n-                    Some(num) => {\n-                        name = Some(part0);\n-                        log_level = num;\n-                    },\n-                    _ => {\n-                        rterrln!(\"warning: invalid logging spec '{}', \\\n-                                  ignoring it\", part1);\n-                        continue\n-                    }\n-                }\n-            },\n-            _ => {\n-                rterrln!(\"warning: invalid logging spec '{}', \\\n-                          ignoring it\", s);\n-                continue\n-            }\n-        }\n-        dirs.push(LogDirective { name: name, level: log_level });\n-    }\n-    return dirs;\n-}\n-\n-/// Set the log level of an entry in the crate map depending on the vector\n-/// of log directives\n-fn update_entry(dirs: &[LogDirective], entry: &ModEntry) -> u32 {\n-    let mut new_lvl: u32 = DEFAULT_LOG_LEVEL;\n-    let mut longest_match = -1i;\n-    for dir in dirs.iter() {\n-        match dir.name {\n-            None => {\n-                if longest_match == -1 {\n-                    longest_match = 0;\n-                    new_lvl = dir.level;\n-                }\n-            }\n-            Some(ref dir_name) => {\n-                let name = entry.name;\n-                let len = dir_name.len() as int;\n-                if name.starts_with(*dir_name) &&\n-                    len >= longest_match {\n-                    longest_match = len;\n-                    new_lvl = dir.level;\n-                }\n-            }\n-        };\n-    }\n-    unsafe { *entry.log_level = new_lvl; }\n-    if longest_match >= 0 { return 1; } else { return 0; }\n-}\n-\n-/// Set log level for every entry in crate_map according to the sepecification\n-/// in settings\n-fn update_log_settings(crate_map: &CrateMap, settings: &str) {\n-    if settings == \"::help\" || settings == \"?\" {\n-        rterrln!(\"\\nCrate log map:\\n\");\n-\n-        let mut entries = Vec::new();\n-        iter_crate_map(crate_map, |entry| entries.push(entry.name));\n-        entries.as_mut_slice().sort();\n-\n-        for name in entries.iter() {\n-            rterrln!(\" {}\", *name);\n-        }\n-        unsafe { exit(1); }\n-    }\n-    let dirs = parse_logging_spec(settings);\n-\n-    let mut n_matches: u32 = 0;\n-    iter_crate_map(crate_map, |entry| {\n-        let m = update_entry(dirs.as_slice(), entry);\n-        n_matches += m;\n-    });\n-\n-    if n_matches < (dirs.len() as u32) {\n-        rterrln!(\"warning: got {} RUST_LOG specs but only matched\\n\\\n-                  {} of them. You may have mistyped a RUST_LOG spec. \\n\\\n-                  Use RUST_LOG=::help to see the list of crates and modules.\\n\",\n-                 dirs.len(), n_matches);\n-    }\n-}\n-\n-/// Configure logging by traversing the crate map and setting the\n-/// per-module global logging flags based on the logging spec\n-pub fn init() {\n-    let log_spec = os::getenv(\"RUST_LOG\");\n-    match get_crate_map() {\n-        Some(crate_map) => {\n-            match log_spec {\n-                Some(spec) => update_log_settings(crate_map, spec.as_slice()),\n-                None => update_log_settings(crate_map, \"\"),\n-            }\n-        },\n-        _ => {\n-            match log_spec {\n-                Some(_) => {\n-                    rterrln!(\"warning: RUST_LOG set, but no crate map found.\");\n-                },\n-                None => {}\n-            }\n-        }\n-    }\n-}\n-\n-// Tests for parse_logging_spec()\n-#[test]\n-fn parse_logging_spec_valid() {\n-    let dirs = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4\");\n-    let dirs = dirs.as_slice();\n-    assert_eq!(dirs.len(), 3);\n-    assert_eq!(dirs[0].name, Some(\"crate1::mod1\"));\n-    assert_eq!(dirs[0].level, 1);\n-\n-    assert_eq!(dirs[1].name, Some(\"crate1::mod2\"));\n-    assert_eq!(dirs[1].level, MAX_LOG_LEVEL);\n-\n-    assert_eq!(dirs[2].name, Some(\"crate2\"));\n-    assert_eq!(dirs[2].level, 4);\n-}\n-\n-#[test]\n-fn parse_logging_spec_invalid_crate() {\n-    // test parse_logging_spec with multiple = in specification\n-    let dirs = parse_logging_spec(\"crate1::mod1=1=2,crate2=4\");\n-    let dirs = dirs.as_slice();\n-    assert_eq!(dirs.len(), 1);\n-    assert_eq!(dirs[0].name, Some(\"crate2\"));\n-    assert_eq!(dirs[0].level, 4);\n-}\n-\n-#[test]\n-fn parse_logging_spec_invalid_log_level() {\n-    // test parse_logging_spec with 'noNumber' as log level\n-    let dirs = parse_logging_spec(\"crate1::mod1=noNumber,crate2=4\");\n-    let dirs = dirs.as_slice();\n-    assert_eq!(dirs.len(), 1);\n-    assert_eq!(dirs[0].name, Some(\"crate2\"));\n-    assert_eq!(dirs[0].level, 4);\n-}\n-\n-#[test]\n-fn parse_logging_spec_string_log_level() {\n-    // test parse_logging_spec with 'warn' as log level\n-    let dirs = parse_logging_spec(\"crate1::mod1=wrong,crate2=warn\");\n-    let dirs = dirs.as_slice();\n-    assert_eq!(dirs.len(), 1);\n-    assert_eq!(dirs[0].name, Some(\"crate2\"));\n-    assert_eq!(dirs[0].level, 2);\n-}\n-\n-#[test]\n-fn parse_logging_spec_global() {\n-    // test parse_logging_spec with no crate\n-    let dirs = parse_logging_spec(\"warn,crate2=4\");\n-    let dirs = dirs.as_slice();\n-    assert_eq!(dirs.len(), 2);\n-    assert_eq!(dirs[0].name, None);\n-    assert_eq!(dirs[0].level, 2);\n-    assert_eq!(dirs[1].name, Some(\"crate2\"));\n-    assert_eq!(dirs[1].level, 4);\n-}\n-\n-// Tests for update_entry\n-#[test]\n-fn update_entry_match_full_path() {\n-    let dirs = [LogDirective { name: Some(\"crate1::mod1\"), level: 2 },\n-                LogDirective { name: Some(\"crate2\"), level: 3 }];\n-    let mut level = 0;\n-    {\n-        let entry = &ModEntry { name: \"crate1::mod1\", log_level: &mut level };\n-        assert_eq!(update_entry(dirs, entry), 1);\n-    }\n-    assert_eq!(level, 2);\n-}\n-\n-#[test]\n-fn update_entry_no_match() {\n-    let dirs = [LogDirective { name: Some(\"crate1::mod1\"), level: 2 },\n-                LogDirective { name: Some(\"crate2\"), level: 3 }];\n-    let mut level = 0;\n-    {\n-        let entry = &ModEntry { name: \"crate3::mod1\", log_level: &mut level };\n-        assert_eq!(update_entry(dirs, entry), 0);\n-    }\n-    assert_eq!(level, DEFAULT_LOG_LEVEL);\n-}\n-\n-#[test]\n-fn update_entry_match_beginning() {\n-    let dirs = [LogDirective { name: Some(\"crate1::mod1\"), level: 2 },\n-                LogDirective { name: Some(\"crate2\"), level: 3 }];\n-    let mut level = 0;\n-    {\n-        let entry= &ModEntry {name: \"crate2::mod1\", log_level: &mut level};\n-        assert_eq!(update_entry(dirs, entry), 1);\n-    }\n-    assert_eq!(level, 3);\n-}\n-\n-#[test]\n-fn update_entry_match_beginning_longest_match() {\n-    let dirs = [LogDirective { name: Some(\"crate1::mod1\"), level: 2 },\n-                LogDirective { name: Some(\"crate2\"), level: 3 },\n-                LogDirective { name: Some(\"crate2::mod\"), level: 4 }];\n-    let mut level = 0;\n-    {\n-        let entry = &ModEntry { name: \"crate2::mod1\", log_level: &mut level };\n-        assert_eq!(update_entry(dirs, entry), 1);\n-    }\n-    assert_eq!(level, 4);\n-}\n-\n-#[test]\n-fn update_entry_match_default() {\n-    let dirs = [LogDirective { name: Some(\"crate1::mod1\"), level: 2 },\n-                LogDirective { name: None, level: 3 }];\n-    let mut level = 0;\n-    {\n-        let entry = &ModEntry { name: \"crate1::mod1\", log_level: &mut level };\n-        assert_eq!(update_entry(dirs, entry), 1);\n-    }\n-    assert_eq!(level, 2);\n-    {\n-        let entry = &ModEntry { name: \"crate2::mod2\", log_level: &mut level };\n-        assert_eq!(update_entry(dirs, entry), 1);\n-    }\n-    assert_eq!(level, 3);\n-}"}, {"sha": "84e547619df5abbaea7224757e24eebdae8cb89a", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -104,9 +104,6 @@ pub mod env;\n /// The local, managed heap\n pub mod local_heap;\n \n-/// The Logger trait and implementations\n-pub mod logging;\n-\n /// Crate map\n pub mod crate_map;\n \n@@ -183,7 +180,6 @@ pub fn init(argc: int, argv: **u8) {\n     unsafe {\n         args::init(argc, argv);\n         env::init();\n-        logging::init();\n         local_ptr::init();\n         at_exit_imp::init();\n     }"}, {"sha": "8c617c1b59b18c6af5c081f5c0f6c1335706d7f6", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -21,7 +21,6 @@ use comm::Sender;\n use io::Writer;\n use iter::{Iterator, Take};\n use local_data;\n-use logging::Logger;\n use ops::Drop;\n use option::{Option, Some, None};\n use prelude::drop;\n@@ -51,7 +50,6 @@ pub struct Task {\n     destroyed: bool,\n     name: Option<SendStr>,\n \n-    logger: Option<~Logger>,\n     stdout: Option<~Writer>,\n     stderr: Option<~Writer>,\n \n@@ -95,7 +93,6 @@ impl Task {\n             death: Death::new(),\n             destroyed: false,\n             name: None,\n-            logger: None,\n             stdout: None,\n             stderr: None,\n             imp: None,\n@@ -129,11 +126,9 @@ impl Task {\n                 #[allow(unused_must_use)]\n                 fn close_outputs() {\n                     let mut task = Local::borrow(None::<Task>);\n-                    let logger = task.get().logger.take();\n                     let stderr = task.get().stderr.take();\n                     let stdout = task.get().stdout.take();\n                     drop(task);\n-                    drop(logger); // loggers are responsible for flushing\n                     match stdout { Some(mut w) => { w.flush(); }, None => {} }\n                     match stderr { Some(mut w) => { w.flush(); }, None => {} }\n                 }"}, {"sha": "9c88db6beb5f876e8422d4d2aee616d1fa53a009", "filename": "src/libstd/task.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -40,7 +40,6 @@ use any::Any;\n use comm::{Sender, Receiver, channel};\n use io::Writer;\n use kinds::{Send, marker};\n-use logging::Logger;\n use option::{None, Some, Option};\n use result::{Result, Ok, Err};\n use rt::local::Local;\n@@ -66,8 +65,6 @@ pub struct TaskOpts {\n     name: Option<SendStr>,\n     /// The size of the stack for the spawned task\n     stack_size: Option<uint>,\n-    /// Task-local logger (see std::logging)\n-    logger: Option<~Logger>,\n     /// Task-local stdout\n     stdout: Option<~Writer>,\n     /// Task-local stderr\n@@ -230,7 +227,6 @@ impl TaskOpts {\n             notify_chan: None,\n             name: None,\n             stack_size: None,\n-            logger: None,\n             stdout: None,\n             stderr: None,\n         }"}, {"sha": "924af6bfd423ce09453255222786194eebf8673e", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,6 +19,9 @@\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#[feature(phase)];\n+\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n #[allow(deprecated_owned_vector)];\n "}, {"sha": "f7983933990459a1c3dcb60e4c5720bc7fb8ab15", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,7 +18,6 @@ use parse::token;\n use print::pprust;\n use util::small_vector::SmallVector;\n \n-use std::logging;\n use std::cell::RefCell;\n use std::iter;\n use std::vec;\n@@ -538,7 +537,7 @@ pub fn map_crate<F: FoldOps>(krate: Crate, fold_ops: F) -> (Crate, Map) {\n         cx.fold_crate(krate)\n     };\n \n-    if log_enabled!(logging::DEBUG) {\n+    if log_enabled!(::log::DEBUG) {\n         let map = map.map.borrow();\n         // This only makes sense for ordered stores; note the\n         // enumerate to count the number of entries."}, {"sha": "b575cfaade644724e24c71ed2dee395bb6ff1cc8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -339,7 +339,12 @@ impl<'a> ExtCtxt<'a> {\n     pub fn backtrace(&self) -> Option<@ExpnInfo> { self.backtrace }\n     pub fn mod_push(&mut self, i: ast::Ident) { self.mod_path.push(i); }\n     pub fn mod_pop(&mut self) { self.mod_path.pop().unwrap(); }\n-    pub fn mod_path(&self) -> Vec<ast::Ident> { self.mod_path.clone() }\n+    pub fn mod_path(&self) -> Vec<ast::Ident> {\n+        let mut v = Vec::new();\n+        v.push(token::str_to_ident(self.ecfg.crate_id.name));\n+        v.extend(&mut self.mod_path.iter().map(|a| *a));\n+        return v;\n+    }\n     pub fn bt_push(&mut self, ei: codemap::ExpnInfo) {\n         match ei {\n             ExpnInfo {call_site: cs, callee: ref callee} => {"}, {"sha": "c24894af3be46307c4c8b96187ba337c08130735", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,6 +19,7 @@ use attr;\n use attr::AttrMetaMethods;\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n+use crateid::CrateId;\n use ext::base::*;\n use fold::*;\n use parse;\n@@ -871,6 +872,7 @@ impl<'a> Folder for MacroExpander<'a> {\n pub struct ExpansionConfig<'a> {\n     loader: &'a mut CrateLoader,\n     deriving_hash_type_parameter: bool,\n+    crate_id: CrateId,\n }\n \n pub fn expand_crate(parse_sess: @parse::ParseSess,\n@@ -1048,6 +1050,7 @@ mod test {\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             loader: &mut loader,\n             deriving_hash_type_parameter: false,\n+            crate_id: from_str(\"test\").unwrap(),\n         };\n         expand_crate(sess,cfg,crate_ast);\n     }\n@@ -1067,6 +1070,7 @@ mod test {\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             loader: &mut loader,\n             deriving_hash_type_parameter: false,\n+            crate_id: from_str(\"test\").unwrap(),\n         };\n         expand_crate(sess,cfg,crate_ast);\n     }\n@@ -1085,6 +1089,7 @@ mod test {\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             loader: &mut loader,\n             deriving_hash_type_parameter: false,\n+            crate_id: from_str(\"test\").unwrap(),\n         };\n         expand_crate(sess, cfg, crate_ast);\n     }\n@@ -1127,6 +1132,7 @@ mod test {\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             loader: &mut loader,\n             deriving_hash_type_parameter: false,\n+            crate_id: from_str(\"test\").unwrap(),\n         };\n         expand_crate(ps,cfg,crate_ast)\n     }"}, {"sha": "08b4fa7b44450620c898d7de7296e54aeb3538ea", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -26,9 +26,7 @@ This API is completely unstable and subject to change.\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[feature(macro_rules, globs, managed_boxes, default_type_params)];\n-#[allow(unknown_features)];// Note: remove it after a snapshot.\n-#[feature(quote)];\n+#[feature(macro_rules, globs, managed_boxes, default_type_params, phase, quote)];\n \n #[allow(deprecated)];\n #[deny(non_camel_case_types)];\n@@ -37,6 +35,8 @@ This API is completely unstable and subject to change.\n extern crate serialize;\n extern crate term;\n extern crate collections;\n+#[phase(syntax, link)]\n+extern crate log;\n \n pub mod util {\n     pub mod interner;"}, {"sha": "efadea16fe2f26eeb7a241f1907903bb82badc19", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -462,41 +462,40 @@ declare_special_idents_and_keywords! {\n         (20,                         Impl,       \"impl\");\n         (21,                         In,         \"in\");\n         (22,                         Let,        \"let\");\n-        (23,                         __LogLevel, \"__log_level\");\n-        (24,                         Loop,       \"loop\");\n-        (25,                         Match,      \"match\");\n-        (26,                         Mod,        \"mod\");\n-        (27,                         Mut,        \"mut\");\n-        (28,                         Once,       \"once\");\n-        (29,                         Priv,       \"priv\");\n-        (30,                         Pub,        \"pub\");\n-        (31,                         Ref,        \"ref\");\n-        (32,                         Return,     \"return\");\n+        (23,                         Loop,       \"loop\");\n+        (24,                         Match,      \"match\");\n+        (25,                         Mod,        \"mod\");\n+        (26,                         Mut,        \"mut\");\n+        (27,                         Once,       \"once\");\n+        (28,                         Priv,       \"priv\");\n+        (29,                         Pub,        \"pub\");\n+        (30,                         Ref,        \"ref\");\n+        (31,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME,   Self,       \"self\");\n-        (33,                         Struct,     \"struct\");\n-        (34,                         Super,      \"super\");\n-        (35,                         True,       \"true\");\n-        (36,                         Trait,      \"trait\");\n-        (37,                         Type,       \"type\");\n-        (38,                         Unsafe,     \"unsafe\");\n-        (39,                         Use,        \"use\");\n-        (40,                         While,      \"while\");\n-        (41,                         Continue,   \"continue\");\n-        (42,                         Proc,       \"proc\");\n-        (43,                         Box,        \"box\");\n+        (32,                         Struct,     \"struct\");\n+        (33,                         Super,      \"super\");\n+        (34,                         True,       \"true\");\n+        (35,                         Trait,      \"trait\");\n+        (36,                         Type,       \"type\");\n+        (37,                         Unsafe,     \"unsafe\");\n+        (38,                         Use,        \"use\");\n+        (39,                         While,      \"while\");\n+        (40,                         Continue,   \"continue\");\n+        (41,                         Proc,       \"proc\");\n+        (42,                         Box,        \"box\");\n \n         'reserved:\n-        (44,                         Alignof,    \"alignof\");\n-        (45,                         Be,         \"be\");\n-        (46,                         Offsetof,   \"offsetof\");\n-        (47,                         Pure,       \"pure\");\n-        (48,                         Sizeof,     \"sizeof\");\n-        (49,                         Typeof,     \"typeof\");\n-        (50,                         Unsized,    \"unsized\");\n-        (51,                         Yield,      \"yield\");\n-        (52,                         Do,         \"do\");\n+        (43,                         Alignof,    \"alignof\");\n+        (44,                         Be,         \"be\");\n+        (45,                         Offsetof,   \"offsetof\");\n+        (46,                         Pure,       \"pure\");\n+        (47,                         Sizeof,     \"sizeof\");\n+        (48,                         Typeof,     \"typeof\");\n+        (49,                         Unsized,    \"unsized\");\n+        (50,                         Yield,      \"yield\");\n+        (51,                         Do,         \"do\");\n     }\n }\n "}, {"sha": "089c1668bf39ba25a0b884551d7b44e09a4b2ccb", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -156,8 +156,6 @@ impl<T: Writer> Terminal<T> {\n             if s.is_ok() {\n                 try!(self.out.write(s.unwrap()));\n                 return Ok(true)\n-            } else {\n-                warn!(\"{}\", s.unwrap_err());\n             }\n         }\n         Ok(false)\n@@ -177,8 +175,6 @@ impl<T: Writer> Terminal<T> {\n             if s.is_ok() {\n                 try!(self.out.write(s.unwrap()));\n                 return Ok(true)\n-            } else {\n-                warn!(\"{}\", s.unwrap_err());\n             }\n         }\n         Ok(false)\n@@ -199,8 +195,6 @@ impl<T: Writer> Terminal<T> {\n                     if s.is_ok() {\n                         try!(self.out.write(s.unwrap()));\n                         return Ok(true)\n-                    } else {\n-                        warn!(\"{}\", s.unwrap_err());\n                     }\n                 }\n                 Ok(false)\n@@ -237,12 +231,6 @@ impl<T: Writer> Terminal<T> {\n         });\n         if s.is_ok() {\n             return self.out.write(s.unwrap())\n-        } else if self.num_colors > 0 {\n-            warn!(\"{}\", s.unwrap_err());\n-        } else {\n-            // if we support attributes but not color, it would be nice to still warn!()\n-            // but it's not worth testing all known attributes just for this.\n-            debug!(\"{}\", s.unwrap_err());\n         }\n         Ok(())\n     }"}, {"sha": "8ba3ad53121aee97158a7c160ddf5ba3e648e3c6", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -195,27 +195,15 @@ pub fn parse(file: &mut io::Reader,\n \n     assert!(names_bytes          > 0);\n \n-    debug!(\"names_bytes = {}\", names_bytes);\n-    debug!(\"bools_bytes = {}\", bools_bytes);\n-    debug!(\"numbers_count = {}\", numbers_count);\n-    debug!(\"string_offsets_count = {}\", string_offsets_count);\n-    debug!(\"string_table_bytes = {}\", string_table_bytes);\n-\n     if (bools_bytes as uint) > boolnames.len() {\n-        error!(\"expected bools_bytes to be less than {} but found {}\", boolnames.len(),\n-               bools_bytes);\n         return Err(~\"incompatible file: more booleans than expected\");\n     }\n \n     if (numbers_count as uint) > numnames.len() {\n-        error!(\"expected numbers_count to be less than {} but found {}\", numnames.len(),\n-               numbers_count);\n         return Err(~\"incompatible file: more numbers than expected\");\n     }\n \n     if (string_offsets_count as uint) > stringnames.len() {\n-        error!(\"expected string_offsets_count to be less than {} but found {}\", stringnames.len(),\n-               string_offsets_count);\n         return Err(~\"incompatible file: more string offsets than expected\");\n     }\n \n@@ -229,26 +217,19 @@ pub fn parse(file: &mut io::Reader,\n \n     try!(file.read_byte()); // consume NUL\n \n-    debug!(\"term names: {:?}\", term_names);\n-\n     let mut bools_map = HashMap::new();\n     if bools_bytes != 0 {\n         for i in range(0, bools_bytes) {\n             let b = try!(file.read_byte());\n             if b < 0 {\n-                error!(\"EOF reading bools after {} entries\", i);\n                 return Err(~\"error: expected more bools but hit EOF\");\n             } else if b == 1 {\n-                debug!(\"{} set\", bnames[i]);\n                 bools_map.insert(bnames[i].to_owned(), true);\n             }\n         }\n     }\n \n-    debug!(\"bools: {:?}\", bools_map);\n-\n     if (bools_bytes + names_bytes) % 2 == 1 {\n-        debug!(\"adjusting for padding between bools and numbers\");\n         try!(file.read_byte()); // compensate for padding\n     }\n \n@@ -257,14 +238,11 @@ pub fn parse(file: &mut io::Reader,\n         for i in range(0, numbers_count) {\n             let n = try!(file.read_le_u16());\n             if n != 0xFFFF {\n-                debug!(\"{}\\\\#{}\", nnames[i], n);\n                 numbers_map.insert(nnames[i].to_owned(), n);\n             }\n         }\n     }\n \n-    debug!(\"numbers: {:?}\", numbers_map);\n-\n     let mut string_map = HashMap::new();\n \n     if string_offsets_count != 0 {\n@@ -273,13 +251,9 @@ pub fn parse(file: &mut io::Reader,\n             string_offsets.push(try!(file.read_le_u16()));\n         }\n \n-        debug!(\"offsets: {:?}\", string_offsets);\n-\n         let string_table = try!(file.read_bytes(string_table_bytes as uint));\n \n         if string_table.len() != string_table_bytes as uint {\n-            error!(\"EOF reading string table after {} bytes, wanted {}\", string_table.len(),\n-                   string_table_bytes);\n             return Err(~\"error: hit EOF before end of string table\");\n         }\n "}, {"sha": "efd1fbcd1ac511c06d612bda6c62142f6b642e9d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -692,7 +692,6 @@ pub fn run_tests_console(opts: &TestOpts,\n                          tests: ~[TestDescAndFn]) -> io::IoResult<bool> {\n     fn callback<T: Writer>(event: &TestEvent,\n                            st: &mut ConsoleTestState<T>) -> io::IoResult<()> {\n-        debug!(\"callback(event={:?})\", event);\n         match (*event).clone() {\n             TeFiltered(ref filtered_tests) => st.write_run_start(filtered_tests.len()),\n             TeWait(ref test, padding) => st.write_test_start(test, padding),\n@@ -736,7 +735,6 @@ pub fn run_tests_console(opts: &TestOpts,\n     match tests.iter().max_by(|t|len_if_padded(*t)) {\n         Some(t) => {\n             let n = t.desc.name.to_str();\n-            debug!(\"Setting max_name_len from: {}\", n);\n             st.max_name_len = n.len();\n         },\n         None => {}\n@@ -825,7 +823,6 @@ fn run_tests(opts: &TestOpts,\n     // It's tempting to just spawn all the tests at once, but since we have\n     // many tests that run in other processes we would be making a big mess.\n     let concurrency = get_concurrency();\n-    debug!(\"using {} test tasks\", concurrency);\n \n     let mut remaining = filtered_tests;\n     remaining.reverse();\n@@ -1151,7 +1148,6 @@ impl MetricMap {\n         });\n \n         if ok {\n-            debug!(\"rewriting file '{:?}' with updated metrics\", p);\n             self.save(p).unwrap();\n         }\n         return (diff, ok)\n@@ -1202,8 +1198,6 @@ impl BenchHarness {\n \n     pub fn bench_n(&mut self, n: u64, f: |&mut BenchHarness|) {\n         self.iterations = n;\n-        debug!(\"running benchmark for {} iterations\",\n-               n as uint);\n         f(self);\n     }\n \n@@ -1228,9 +1222,6 @@ impl BenchHarness {\n         // (i.e. larger error bars).\n         if n == 0 { n = 1; }\n \n-        debug!(\"Initial run took {} ns, iter count that takes 1ms estimated as {}\",\n-               self.ns_per_iter(), n);\n-\n         let mut total_run = 0;\n         let samples : &mut [f64] = [0.0_f64, ..50];\n         loop {\n@@ -1252,12 +1243,6 @@ impl BenchHarness {\n             stats::winsorize(samples, 5.0);\n             let summ5 = stats::Summary::new(samples);\n \n-            debug!(\"{} samples, median {}, MAD={}, MADP={}\",\n-                   samples.len(),\n-                   summ.median as f64,\n-                   summ.median_abs_dev as f64,\n-                   summ.median_abs_dev_pct as f64);\n-\n             let now = precise_time_ns();\n             let loop_run = now - loop_start;\n "}, {"sha": "eb2b72cb630726dd885362164d76638088d3c721", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,9 +16,10 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[allow(missing_doc)];\n+#[feature(phase)];\n #[allow(deprecated_owned_vector)];\n \n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate serialize;\n \n use std::io::BufReader;"}, {"sha": "7479ddc3e57d39555f965dd799b4075899f40708", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -21,19 +21,19 @@ pub mod kitties {\n \n         pub fn eat(&mut self) -> bool {\n             if self.how_hungry > 0 {\n-                error!(\"OM NOM NOM\");\n+                println!(\"OM NOM NOM\");\n                 self.how_hungry -= 2;\n                 return true;\n             } else {\n-                error!(\"Not hungry!\");\n+                println!(\"Not hungry!\");\n                 return false;\n             }\n         }\n     }\n \n     impl cat {\n         pub fn meow(&mut self) {\n-            error!(\"Meow\");\n+            println!(\"Meow\");\n             self.meows += 1u;\n             if self.meows % 5u == 0u {\n                 self.how_hungry += 1;"}, {"sha": "e7e0e6d450a7e7745b8d9767b84b1d0d7efea735", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -25,7 +25,7 @@ pub mod kitty {\n \n     impl cat {\n         fn meow(&mut self) {\n-            error!(\"Meow\");\n+            println!(\"Meow\");\n             self.meows += 1u;\n             if self.meows % 5u == 0u {\n                 self.how_hungry += 1;\n@@ -39,12 +39,12 @@ pub mod kitty {\n \n         pub fn eat(&mut self) -> bool {\n             if self.how_hungry > 0 {\n-                error!(\"OM NOM NOM\");\n+                println!(\"OM NOM NOM\");\n                 self.how_hungry -= 2;\n                 return true;\n             }\n             else {\n-                error!(\"Not hungry!\");\n+                println!(\"Not hungry!\");\n                 return false;\n             }\n         }"}, {"sha": "d2c79bbe9cb2dc44ede7f153a1e0373b00d2c280", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -26,7 +26,7 @@ pub mod rustrt {\n \n pub fn fact(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = {}\", n);\n+        println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }"}, {"sha": "10725981a063d2f3574a6ab62da5ce4876379f2a", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(phase)];\n+#[phase(syntax, link)] extern crate log;\n+\n pub fn foo<T>() {\n     fn death() -> int { fail!() }\n     debug!(\"{:?}\", (||{ death() })());"}, {"sha": "db86be1dfd442d38fc1284f24fd3b0bd3595cea5", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -25,6 +25,6 @@ fn main() {\n \n     for i in range(0u, n) {\n         let x = i.to_str();\n-        info!(\"{}\", x);\n+        println!(\"{}\", x);\n     }\n }"}, {"sha": "be081afc39e8052083904a69087145769278b28c", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -40,15 +40,15 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n         match requests.recv_opt() {\n           Some(get_count) => { responses.send(count.clone()); }\n           Some(bytes(b)) => {\n-            //error!(\"server: received {:?} bytes\", b);\n+            //println!(\"server: received {:?} bytes\", b);\n             count += b;\n           }\n           None => { done = true; }\n           _ => { }\n         }\n     }\n     responses.send(count);\n-    //error!(\"server exiting\");\n+    //println!(\"server exiting\");\n }\n \n fn run(args: &[~str]) {\n@@ -66,10 +66,10 @@ fn run(args: &[~str]) {\n         worker_results.push(builder.future_result());\n         builder.spawn(proc() {\n             for _ in range(0u, size / workers) {\n-                //error!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n+                //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n-            //error!(\"worker {:?} exiting\", i);\n+            //println!(\"worker {:?} exiting\", i);\n         });\n     }\n     task::spawn(proc() {\n@@ -80,7 +80,7 @@ fn run(args: &[~str]) {\n         r.recv();\n     }\n \n-    //error!(\"sending stop message\");\n+    //println!(\"sending stop message\");\n     to_child.send(stop);\n     move_out(to_child);\n     let result = from_child.recv();\n@@ -103,6 +103,6 @@ fn main() {\n         args.clone()\n     };\n \n-    info!(\"{:?}\", args);\n+    println!(\"{:?}\", args);\n     run(args);\n }"}, {"sha": "518b2d4c9ef1d2498cd1a8bd111e41cb53d80045", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -35,15 +35,15 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n         match requests.recv_opt() {\n           Some(get_count) => { responses.send(count.clone()); }\n           Some(bytes(b)) => {\n-            //error!(\"server: received {:?} bytes\", b);\n+            //println!(\"server: received {:?} bytes\", b);\n             count += b;\n           }\n           None => { done = true; }\n           _ => { }\n         }\n     }\n     responses.send(count);\n-    //error!(\"server exiting\");\n+    //println!(\"server exiting\");\n }\n \n fn run(args: &[~str]) {\n@@ -60,10 +60,10 @@ fn run(args: &[~str]) {\n         worker_results.push(builder.future_result());\n         builder.spawn(proc() {\n             for _ in range(0u, size / workers) {\n-                //error!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n+                //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n-            //error!(\"worker {:?} exiting\", i);\n+            //println!(\"worker {:?} exiting\", i);\n         });\n         from_parent\n     } else {\n@@ -74,10 +74,10 @@ fn run(args: &[~str]) {\n             worker_results.push(builder.future_result());\n             builder.spawn(proc() {\n                 for _ in range(0u, size / workers) {\n-                    //error!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n+                    //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                     to_child.send(bytes(num_bytes));\n                 }\n-                //error!(\"worker {:?} exiting\", i);\n+                //println!(\"worker {:?} exiting\", i);\n             });\n         }\n         from_parent\n@@ -90,7 +90,7 @@ fn run(args: &[~str]) {\n         r.recv();\n     }\n \n-    //error!(\"sending stop message\");\n+    //println!(\"sending stop message\");\n     //to_child.send(stop);\n     //move_out(to_child);\n     let result = from_child.recv();\n@@ -113,6 +113,6 @@ fn main() {\n         args.clone()\n     };\n \n-    info!(\"{:?}\", args);\n+    println!(\"{:?}\", args);\n     run(args);\n }"}, {"sha": "6bf25f2149ce8e1c908b4ba3d682739a488844b5", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -57,7 +57,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n     for j in range(0u, count) {\n-        //error!(\"task %?, iter %?\", i, j);\n+        //println!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take_unwrap();\n         let num_port2 = num_port.take_unwrap();\n         send(&num_chan2, i * j);\n@@ -89,7 +89,7 @@ fn main() {\n     let mut futures = ~[];\n \n     for i in range(1u, num_tasks) {\n-        //error!(\"spawning %?\", i);\n+        //println!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n         let num_chan_2 = num_chan.clone();\n         let new_future = Future::spawn(proc() {"}, {"sha": "90d7da65e1f8f0201c5fd3967b7eca710755295f", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -52,7 +52,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n     for j in range(0u, count) {\n-        //error!(\"task %?, iter %?\", i, j);\n+        //println!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take_unwrap();\n         let num_port2 = num_port.take_unwrap();\n         send(&num_chan2, i * j);\n@@ -84,7 +84,7 @@ fn main() {\n     let mut futures = ~[];\n \n     for i in range(1u, num_tasks) {\n-        //error!(\"spawning %?\", i);\n+        //println!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n         let num_chan_2 = num_chan.clone();\n         let new_future = Future::spawn(proc() {"}, {"sha": "78cd5f4c30a36e6d019f859a2cc2ae5eb6ea4f96", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -70,7 +70,7 @@ fn stress_task(id: int) {\n         let n = 15;\n         assert_eq!(fib(n), fib(n));\n         i += 1;\n-        error!(\"{}: Completed {} iterations\", id, i);\n+        println!(\"{}: Completed {} iterations\", id, i);\n     }\n }\n "}, {"sha": "7f2cd368219d392eaa075073e2d54b2463fbe3ae", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -41,7 +41,7 @@ fn roundtrip(id: int, n_tasks: int, p: &Receiver<int>, ch: &Sender<int>) {\n             return;\n           }\n           token => {\n-            info!(\"thread: {}   got token: {}\", id, token);\n+            println!(\"thread: {}   got token: {}\", id, token);\n             ch.send(token - 1);\n             if token <= n_tasks {\n                 return;"}, {"sha": "e0938a8ae03106ce700ab561a7896b6d82ee62de", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -34,11 +34,11 @@ fn main() {\n \n fn run(repeat: int, depth: int) {\n     for _ in range(0, repeat) {\n-        info!(\"starting {:.4f}\", precise_time_s());\n+        println!(\"starting {:.4f}\", precise_time_s());\n         task::try(proc() {\n             recurse_or_fail(depth, None)\n         });\n-        info!(\"stopping {:.4f}\", precise_time_s());\n+        println!(\"stopping {:.4f}\", precise_time_s());\n     }\n }\n \n@@ -71,7 +71,7 @@ fn r(l: @nillist) -> r {\n \n fn recurse_or_fail(depth: int, st: Option<State>) {\n     if depth == 0 {\n-        info!(\"unwinding {:.4f}\", precise_time_s());\n+        println!(\"unwinding {:.4f}\", precise_time_s());\n         fail!();\n     } else {\n         let depth = depth - 1;"}, {"sha": "c3c255b2dc8ab191b40831760978f1c592ded823", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -66,5 +66,5 @@ fn main() {\n     let (sum_port, sum_chan) = stream::<int>();\n     start_chan.send(sum_chan);\n     let sum = sum_port.recv();\n-    error!(\"How many tasks? {} tasks.\", sum);\n+    println!(\"How many tasks? {} tasks.\", sum);\n }"}, {"sha": "da4b0677f8f355f27eb1a7e3c944d1b081e079c2", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast #[feature] doesn't work with check-fast\n #[feature(asm)];\n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "f183975ffe07862dc6d0077dc7ea9f2c665517a6", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast #[feature] doesn't work with check-fast\n #[feature(asm)];\n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "475052b637eab1d68c10a530a182b067deb2b2e6", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast #[feature] doesn't work with check-fast\n #[feature(asm)];\n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "664db071f828d083875712ca884e43d18ffd5fd2", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast #[feature] doesn't work with check-fast\n #[feature(asm)];\n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "77f47a028d698988a6d7a161f2b424ebd5f0e164", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,9 +11,9 @@\n fn test() {\n     let v: int;\n     v = 1; //~ NOTE prior assignment occurs here\n-    info!(\"v={}\", v);\n+    println!(\"v={}\", v);\n     v = 2; //~ ERROR re-assignment of immutable variable\n-    info!(\"v={}\", v);\n+    println!(\"v={}\", v);\n }\n \n fn main() {"}, {"sha": "4a392960a6533d42a5c789916dd4e06e77082ec0", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = || info!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "098c5aaec545c82385b7ff196df7bcdee0ade148", "filename": "src/test/compile-fail/attr-before-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     #[attr] //~ ERROR expected item after attributes\n-    info!(\"hi\");\n+    println!(\"hi\");\n }"}, {"sha": "8ccf2a9e67585b61b351e5dc251f3aff386aac8f", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -23,12 +23,12 @@ fn main() {\n     let a: clam = clam{x: @1, y: @2};\n     let b: clam = clam{x: @10, y: @20};\n     let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `@int`\n-    info!(\"{:?}\", z);\n+    println!(\"{:?}\", z);\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: @40};\n     let two: fish = fish{a: @2};\n     let answer: int = forty.a + two.a;\n     //~^ ERROR binary operation `+` cannot be applied to type `@int`\n-    info!(\"{:?}\", answer);\n+    println!(\"{:?}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "92643eca3c83b2be0aa1155b89ff26dc61e40c3a", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:expected `~str` but found `int`\n \n static i: ~str = 10i;\n-fn main() { info!(\"{:?}\", i); }\n+fn main() { println!(\"{:?}\", i); }"}, {"sha": "a60348c4a3a675f261d91325821866df4af5ad46", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@ struct X { x: () }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        println!(\"destructor runs\");\n     }\n }\n "}, {"sha": "87904399e032fca326f83f5ee3eedeff52e9ad3e", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        println!(\"destructor runs\");\n     }\n }\n "}, {"sha": "ba011d289255f7b47bb89400d3b68e5d1ee7fb7f", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        println!(\"destructor runs\");\n     }\n }\n "}, {"sha": "6858b7200db6ce8527bcda458fd35ab1f02a57b4", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        println!(\"destructor runs\");\n     }\n }\n "}, {"sha": "34b83af1d2ece4a1e7e70c0ed7d96789280d1d90", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        println!(\"destructor runs\");\n     }\n }\n "}, {"sha": "98d81db8261141e5825a7f017b0b2ef4015f77cb", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -21,6 +21,6 @@ fn coerce(b: ||) -> extern fn() {\n \n fn main() {\n     let i = 8;\n-    let f = coerce(|| error!(\"{:?}\", i) );\n+    let f = coerce(|| println!(\"{:?}\", i) );\n     f();\n }"}, {"sha": "cc0ed21410323265924c614f8f954ca06f9388e5", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ enum color { rgb(int, int, int), rgba(int, int, int, int), }\n fn main() {\n     let red: color = rgb(255, 0, 0);\n     match red {\n-      rgb(r, g, b) => { info!(\"rgb\"); }\n-      hsl(h, s, l) => { info!(\"hsl\"); }\n+      rgb(r, g, b) => { println!(\"rgb\"); }\n+      hsl(h, s, l) => { println!(\"hsl\"); }\n     }\n }"}, {"sha": "0f07cab3acc1b14f87962bdcff40bd0d60af11f3", "filename": "src/test/compile-fail/borrowck-and-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    info!(\"{}\", false && { i = 5; true });\n-    info!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+    println!(\"{}\", false && { i = 5; true });\n+    println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "64afb4861c34c22d7afb50183ca9c6d1033e19ea", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -21,7 +21,7 @@ fn a() {\n \n     p[0] = 5; //~ ERROR cannot assign\n \n-    info!(\"{}\", *q);\n+    println!(\"{}\", *q);\n }\n \n fn borrow(_x: &[int], _f: ||) {}"}, {"sha": "a37717ed5d99897d99e26165b6a65b55e5f3eee0", "filename": "src/test/compile-fail/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,6 +12,6 @@ fn force(f: ||) { f(); }\n fn main() {\n     let x: int;\n     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n-        info!(\"{}\", x);\n+        println!(\"{}\", x);\n     });\n }"}, {"sha": "4fccb5c3bca2ae5a76e5c95001976ef5bd503323", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ struct defer<'a> {\n impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         unsafe {\n-            error!(\"{:?}\", self.x);\n+            println!(\"{:?}\", self.x);\n         }\n     }\n }"}, {"sha": "de18759e30a4cedb60913c4698b14b35b0dc5fe6", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;\n     }\n \n-    info!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { info!(\"{}\", foo()); }\n+fn main() { println!(\"{}\", foo()); }"}, {"sha": "aa7ce4fa34788a61b5a8487f55517219c375ecd0", "filename": "src/test/compile-fail/borrowck-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;\n     }\n \n-    info!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { info!(\"{}\", foo()); }\n+fn main() { println!(\"{}\", foo()); }"}, {"sha": "a35b36fd78ca8e6d10256f1bd132ca74807cb254", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n fn main() {\n     let x: int; if 1 > 2 { x = 10; }"}, {"sha": "dabe0a594299795a99304b883e155ac99cb22897", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { info!(\"{:?}\", x); }\n+fn foo(x: int) { println!(\"{:?}\", x); }\n \n fn main() {\n     let x: int;\n     if 1 > 2 {\n-        info!(\"whoops\");\n+        println!(\"whoops\");\n     } else {\n         x = 10;\n     }"}, {"sha": "c44e2bee0520c0eb39589e4968f60687bd564567", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,5 +13,5 @@ fn main() {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n-    error!(\"{:?}\", f());\n+    println!(\"{:?}\", f());\n }"}, {"sha": "0fa2ee5be17b70bee58b5ffc4b7aefca50450b63", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,7 +18,7 @@ fn box_imm() {\n     let v = ~3;\n     let _w = &v;\n     task::spawn(proc() {\n-        info!(\"v={}\", *v);\n+        println!(\"v={}\", *v);\n         //~^ ERROR cannot move `v` into closure\n     });\n }\n@@ -27,7 +27,7 @@ fn box_imm_explicit() {\n     let v = ~3;\n     let _w = &v;\n     task::spawn(proc() {\n-        info!(\"v={}\", *v);\n+        println!(\"v={}\", *v);\n         //~^ ERROR cannot move\n     });\n }"}, {"sha": "e1e0bb4ceca8efa0eaa1fb7b1f0f9b3a71766577", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n                 }\n             }\n             let z = tail[0].clone();\n-            info!(\"{:?}\", z);\n+            println!(\"{:?}\", z);\n         }\n         _ => {\n             unreachable!();"}, {"sha": "738652dddb32aa928215ce8a9d4ee85bc7fdb03b", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let x: int = 3;\n     let y: &mut int = &mut x; //~ ERROR cannot borrow\n     *y = 5;\n-    info!(\"{:?}\", *y);\n+    println!(\"{:?}\", *y);\n }"}, {"sha": "270eeca4c4b6e3bde1bc65bbacc01c6fccf3f195", "filename": "src/test/compile-fail/borrowck-or-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    info!(\"{}\", false || { i = 5; true });\n-    info!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+    println!(\"{}\", false || { i = 5; true });\n+    println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "a64216df6c7fe1218c93509969bb753d6322aaef", "filename": "src/test/compile-fail/borrowck-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n fn main() {\n     let x: int;"}, {"sha": "8cdf1da5c934ce9dd4d7a1e09ded446f794e5ab9", "filename": "src/test/compile-fail/borrowck-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@ fn test(cond: bool) {\n         v = 3;\n         break;\n     }\n-    info!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+    println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n }\n \n fn main() {"}, {"sha": "5d8932c6e6fa8fbd677b6288f438610ea48108d3", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -22,12 +22,12 @@ struct cat {\n impl cat {\n   pub fn eat(&self) -> bool {\n     if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n+        println!(\"OM NOM NOM\");\n         self.how_hungry -= 2;\n         return true;\n     }\n     else {\n-        error!(\"Not hungry!\");\n+        println!(\"Not hungry!\");\n         return false;\n     }\n   }\n@@ -40,7 +40,7 @@ impl noisy for cat {\n \n impl cat {\n     fn meow(&self) {\n-      error!(\"Meow\");\n+      println!(\"Meow\");\n       self.meows += 1;\n       if self.meows % 5 == 0 {\n           self.how_hungry += 1;"}, {"sha": "b9e7004bd7ca42b4fc8992df980a0e5e8ea79bc5", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ struct cat {\n impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n-      error!(\"Meow\");\n+      println!(\"Meow\");\n       meows += 1u; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }"}, {"sha": "ac893277749e1dc0e09b3d19d7ea8d13768169eb", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     let x = foo(10);\n     let _y = x.clone();\n     //~^ ERROR does not implement any method in scope\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "c09938b2f7ddf8c08580c4e412d190880206d1eb", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,5 +14,5 @@\n \n fn main() {\n     return;\n-    info!(\"Paul is dead\");\n+    println!(\"Paul is dead\");\n }"}, {"sha": "af543b8d7823a626e2a792498c61e38079251cca", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@ struct X {\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"value: {}\", self.x);\n+        println!(\"value: {}\", self.x);\n     }\n }\n \n@@ -26,5 +26,5 @@ fn unwrap(x: X) -> ~str {\n fn main() {\n     let x = X { x: ~\"hello\" };\n     let y = unwrap(x);\n-    error!(\"contents: {}\", y);\n+    println!(\"contents: {}\", y);\n }"}, {"sha": "b716a7dd023ffb7ad39b73b96673c7adfaca6ece", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,15 +14,15 @@ struct X {\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"value: {}\", self.x);\n+        println!(\"value: {}\", self.x);\n     }\n }\n \n fn main() {\n     let x = X { x: ~\"hello\" };\n \n     match x {\n-        X { x: y } => error!(\"contents: {}\", y)\n+        X { x: y } => println!(\"contents: {}\", y)\n         //~^ ERROR cannot move out of type `X`, which defines the `Drop` trait\n     }\n }"}, {"sha": "9b82ead04285994e571fb9296471aca5c29d98c7", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern: unresolved name `this_does_nothing_what_the`.\n-fn main() { info!(\"doing\"); this_does_nothing_what_the; info!(\"boing\"); }\n+fn main() { println!(\"doing\"); this_does_nothing_what_the; println!(\"boing\"); }"}, {"sha": "6104c02c90a03332145a30a132a4822675ee5e8a", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ mod foo {\n }\n \n mod bar {\n-    fn x() { info!(\"x\"); }\n+    fn x() { println!(\"x\"); }\n \n     pub fn y() { }\n }"}, {"sha": "38cae6323203481078d8198957c52ae4b8e69f5d", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let a = if true { true };\n-    info!(\"{:?}\", a);\n+    println!(\"{:?}\", a);\n }"}, {"sha": "973e36e494ca6af2552cf07dd7f54518323a4e83", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,10 +15,10 @@\n use module_of_many_things::*;\n \n mod module_of_many_things {\n-    pub fn f1() { info!(\"f1\"); }\n-    pub fn f2() { info!(\"f2\"); }\n-    fn f3() { info!(\"f3\"); }\n-    pub fn f4() { info!(\"f4\"); }\n+    pub fn f1() { println!(\"f1\"); }\n+    pub fn f2() { println!(\"f2\"); }\n+    fn f3() { println!(\"f3\"); }\n+    pub fn f4() { println!(\"f4\"); }\n }\n \n "}, {"sha": "3f5127a55b8bfdf892457e1451710c381ca302e7", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,13 +14,13 @@\n \n mod circ1 {\n     pub use circ2::f2;\n-    pub fn f1() { info!(\"f1\"); }\n+    pub fn f1() { println!(\"f1\"); }\n     pub fn common() -> uint { return 0u; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n-    pub fn f2() { info!(\"f2\"); }\n+    pub fn f2() { println!(\"f2\"); }\n     pub fn common() -> uint { return 1u; }\n }\n "}, {"sha": "7f3319e6d90e668a4aa60e00b57998c2d0adeb1c", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,6 +12,6 @@\n use zed::bar;\n use zed::baz;\n mod zed {\n-    pub fn bar() { info!(\"bar\"); }\n+    pub fn bar() { println!(\"bar\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "721176e2e886014e569c3739fc4c75530fa9cf2f", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,6 +13,6 @@ use baz::zed::bar;  //~ ERROR unresolved import\n \n mod baz {}\n mod zed {\n-    pub fn bar() { info!(\"bar3\"); }\n+    pub fn bar() { println!(\"bar3\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "bd07433eeb095c40ab736c7c1b0c8b34fc0436ed", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,4 +11,4 @@\n // error-pattern: unresolved\n use main::bar;\n \n-fn main(args: ~[str]) { info!(\"foo\"); }\n+fn main(args: ~[str]) { println!(\"foo\"); }"}, {"sha": "af4d0ebe6bafa7dcb0e8e5c196b5de432290b844", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,4 +13,4 @@\n mod a { pub use b::foo; }\n mod b { pub use a::foo; }\n \n-fn main(args: ~[str]) { info!(\"loop\"); }\n+fn main(args: ~[str]) { println!(\"loop\"); }"}, {"sha": "3daced7a5ac1895ba15904664393df1d81ce5437", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,5 +13,5 @@\n fn foo(a: uint) -> uint { a }\n \n fn main() {\n-    info!(\"{:u}\", foo(10i)); //~ ERROR mismatched types\n+    println!(\"{:u}\", foo(10i)); //~ ERROR mismatched types\n }"}, {"sha": "80e0d037f7c5130e0efcba9319ed6b6ea278c5a0", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    error!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n+    println!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n }"}, {"sha": "bb24192445e84406be2404ee81a56df4795cdcba", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern: unresolved name `foobar`.\n \n-fn main(args: ~[str]) { info!(\"{:?}\", foobar); }\n+fn main(args: ~[str]) { println!(\"{:?}\", foobar); }"}, {"sha": "4106a77524845f85b68a150af39fee75ea8221ae", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@ struct C {\n \n impl Drop for C {\n     fn drop(&mut self) {\n-        error!(\"dropping: {:?}\", self.x);\n+        println!(\"dropping: {:?}\", self.x);\n     }\n }\n "}, {"sha": "684318bafc685097de76cef984253e59950d58e3", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,13 +19,13 @@ fn main()\n {\n \n     let _z = match g(1, 2) {\n-      g(x, x) => { info!(\"{:?}\", x + x); }\n+      g(x, x) => { println!(\"{:?}\", x + x); }\n       //~^ ERROR identifier `x` is bound more than once in the same pattern\n     };\n \n     let _z = match i(l(1, 2), m(3, 4)) {\n       i(l(x, _), m(_, x))  //~ ERROR identifier `x` is bound more than once in the same pattern\n-        => { error!(\"{:?}\", x + x); }\n+        => { println!(\"{:?}\", x + x); }\n     };\n \n     let _z = match (1, 2) {"}, {"sha": "85989c4a40a6b65b09cb58243863059a27d2a43a", "filename": "src/test/compile-fail/issue-3099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,5 +17,5 @@ fn a(x: ~str, y: ~str) -> ~str { //~ ERROR duplicate definition of value `a`\n }\n \n fn main() {\n-    info!(\"Result: \");\n+    println!(\"Result: \");\n }"}, {"sha": "cdfc990677657b00e71296e72fa3d8e2afce2cdb", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,5 +13,5 @@ fn main() {\n \n     static y: int = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n \n-    error!(\"{}\", y);\n+    println!(\"{}\", y);\n }"}, {"sha": "f9fb2daaf58a2ddbf5d3b0447ae05062cabd9692", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,5 +15,5 @@ fn main() {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }\n \n-    error!(\"{:?}\", Bar);\n+    println!(\"{:?}\", Bar);\n }"}, {"sha": "24a02821ee2a979973991cae23e34a007ec44e59", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,6 +11,6 @@\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n \n-fn bad_bang(i: uint) -> ! { info!(\"{}\", 3); }\n+fn bad_bang(i: uint) -> ! { println!(\"{}\", 3); }\n \n fn main() { bad_bang(5u); }"}, {"sha": "676d5212e998090617e721ff7f137f7705786e89", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn force(f: || -> int) -> int { f() }\n-fn main() { info!(\"{:?}\", force(|| {})); } //~ ERROR mismatched types\n+fn main() { println!(\"{:?}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "a64d7578af319d7c9b2f1d13a0b651a1775a441f", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        info!(\"{:?}\", y);\n+        println!(\"{:?}\", y);\n         loop {\n             loop {\n                 loop {"}, {"sha": "8aa85c03ad4ad5957f54ee7b658be37967da58b6", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        info!(\"{:?}\", y); //~ ERROR use of moved value: `y`\n+        println!(\"{:?}\", y); //~ ERROR use of moved value: `y`\n         while true { while true { while true { x = y; x.clone(); } } }\n         //~^ ERROR use of moved value: `y`\n     }"}, {"sha": "eccb3784325d9746c68a6cb19a17970770ce2e9a", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let x = ~5;\n     let y = x;\n-    info!(\"{:?}\", *x); //~ ERROR use of moved value: `x`\n+    println!(\"{:?}\", *x); //~ ERROR use of moved value: `x`\n     y.clone();\n }"}, {"sha": "8747d055ff945d7203038d3917d8278a0ba9b23e", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn send<T:Send>(ch: _chan<T>, data: T) {\n-    info!(\"{:?}\", ch);\n-    info!(\"{:?}\", data);\n+    println!(\"{:?}\", ch);\n+    println!(\"{:?}\", data);\n     fail!();\n }\n \n@@ -20,7 +20,7 @@ struct _chan<T>(int);\n // message after the send deinitializes it\n fn test00_start(ch: _chan<~int>, message: ~int, _count: ~int) {\n     send(ch, message);\n-    info!(\"{:?}\", message); //~ ERROR use of moved value: `message`\n+    println!(\"{:?}\", message); //~ ERROR use of moved value: `message`\n }\n \n fn main() { fail!(); }"}, {"sha": "3e1c9e850fa9e4b6926fefb45d06e0fb2fa33b5f", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,6 +16,6 @@ fn my_fail() -> ! { fail!(); }\n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    info!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n+    println!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n     let x: int;\n }"}, {"sha": "02e1f82e709e6e36cc907c43362b6cedf1454c54", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -26,5 +26,5 @@ fn main() {\n \n     assert_eq!((arc_v.get())[2], 3);\n \n-    info!(\"{:?}\", arc_v);\n+    println!(\"{:?}\", arc_v);\n }"}, {"sha": "5fed317fb09e3e4967566d137e3528ef194039f2", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,5 +24,5 @@ fn main() {\n \n     assert_eq!((arc_v.get())[2], 3); //~ ERROR use of moved value: `arc_v`\n \n-    info!(\"{:?}\", arc_v); //~ ERROR use of moved value: `arc_v`\n+    println!(\"{:?}\", arc_v); //~ ERROR use of moved value: `arc_v`\n }"}, {"sha": "68077d61c9f81643c2843546626aca65d202f1d1", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -34,6 +34,6 @@ fn main() {\n \n     task::spawn(proc() {\n         let y = x;   //~ ERROR does not fulfill `Send`\n-        error!(\"{:?}\", y);\n+        println!(\"{:?}\", y);\n     });\n }"}, {"sha": "778f3a3b997845b84f4fa487d425b4e080307699", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -39,5 +39,5 @@ fn foo(i:int) -> foo {\n fn main() {\n     let x = foo(10);\n     let _y = x.clone(); //~ ERROR does not implement any method in scope\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "c0749984cc9e38a064409884e9eea4ea9e8e6a68", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,5 +15,5 @@ struct foo {\n }\n \n fn main() {\n-    info!(\"{:?}\", foo{ x: 1 } as int);\n+    println!(\"{:?}\", foo{ x: 1 } as int);\n }"}, {"sha": "0b5c6ac4fb3e2c64581582a57bd21bacc37af8bd", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,4 +10,4 @@\n \n // compile-flags: -D type-overflow\n \n-fn main() { info!(\"{}\", 300u8); } //~ error: literal out of range for its type\n+fn main() { println!(\"{}\", 300u8); } //~ error: literal out of range for its type"}, {"sha": "c74d80df5dc271a7bc7250db3b68f76ac201eb2e", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n         let oof: Oof<[u8, .. 5], i32> = cast::transmute(foo);\n-        info!(\"{:?}\", oof);\n+        println!(\"{:?}\", oof);\n     }\n }"}, {"sha": "b9a8a53469d5a8a5f7c23acb43f1e4bdcadd7bac", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     let foo = Foo { bar: 1, baz: 10 };\n     unsafe {\n         let oof: Oof = cast::transmute(foo);\n-        info!(\"{:?}\", oof);\n+        println!(\"{:?}\", oof);\n     }\n }"}, {"sha": "22cc9fd283163aebc8fab61a5ffc272df88056e0", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ enum bar { t1((), Option<~[int]>), t2, }\n fn foo(t: bar) {\n     match t {\n       t1(_, Some::<int>(x)) => {\n-        info!(\"{:?}\", x);\n+        println!(\"{:?}\", x);\n       }\n       _ => { fail!(); }\n     }"}, {"sha": "6479a9404e2d560ba141e73b99a221b96d473b6c", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -41,7 +41,7 @@ fn main() {\n         // Can't do this copy\n         let x = ~~~A {y: r(i)};\n         let _z = x.clone(); //~ ERROR failed to find an implementation\n-        info!(\"{:?}\", x);\n+        println!(\"{:?}\", x);\n     }\n-    error!(\"{:?}\", *i);\n+    println!(\"{:?}\", *i);\n }"}, {"sha": "fb2dbacef84e72e9f28cab7800cbdb4859abf8da", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -33,5 +33,5 @@ fn dog() -> dog {\n fn main() {\n     let mut d = dog();\n     d.chase_cat();\n-    info!(\"cats_chased: {}\", d.cats_chased);\n+    println!(\"cats_chased: {}\", d.cats_chased);\n }"}, {"sha": "68920065d1967597eec36b09a94d5557e6e328af", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,6 +13,6 @@ fn wants_static_fn(_x: 'static ||) {}\n fn main() {\n     let i = 3;\n     wants_static_fn(|| { //~ ERROR cannot infer\n-        info!(\"i={}\", i);\n+        println!(\"i={}\", i);\n     })\n }"}, {"sha": "068ecb7118fc2859efb1d7e241b8276f622461d3", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,5 +24,5 @@ fn return_it<'a>() -> &'a int {\n \n fn main() {\n     let x = return_it();\n-    info!(\"foo={}\", *x);\n+    println!(\"foo={}\", *x);\n }"}, {"sha": "c20764e0728d129747811b652869bbadc6654d7d", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -27,5 +27,5 @@ fn return_it() -> &int {\n \n fn main() {\n     let x = return_it();\n-    info!(\"foo={}\", *x);\n+    println!(\"foo={}\", *x);\n }"}, {"sha": "da9e24b73143410dbd612f6e41b688be31439105", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ impl Drop for r {\n fn main() {\n     let i = ~r { b: true };\n     let _j = i.clone(); //~ ERROR failed to find an implementation\n-    info!(\"{:?}\", i);\n+    println!(\"{:?}\", i);\n }"}, {"sha": "a77d1b06f176dbe4565e1fd2764cb1b16af1ae35", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -35,6 +35,6 @@ fn main() {\n     let r2 = ~[~r { i: i2 }];\n     f(r1.clone(), r2.clone());\n     //~^ ERROR failed to find an implementation of\n-    info!(\"{:?}\", (r2, i1.get()));\n-    info!(\"{:?}\", (r1, i2.get()));\n+    println!(\"{:?}\", (r2, i1.get()));\n+    println!(\"{:?}\", (r1, i2.get()));\n }"}, {"sha": "be3f5ba7da86de9745b8f1690c5269e4a51b971e", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,5 +13,5 @@\n use std::libc;\n \n fn main() {\n-  info!(\"{:?}\", 1.0 as *libc::FILE); // Can't cast float to foreign.\n+  println!(\"{:?}\", 1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "19052d923e9f26dbd2206d24ca24343f744f8712", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,7 +13,7 @@\n \n fn f() {\n     let v = ~[1i];\n-    info!(\"{}\", v.some_field_name); //type error\n+    println!(\"{}\", v.some_field_name); //type error\n }\n \n fn main() { }"}, {"sha": "d93fe4f48d004af54779184f5b569f9f321d8b0e", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     let i = ~[r(0)];\n     let j = ~[r(1)];\n     let k = i + j;\n-    info!(\"{}\", j);\n+    println!(\"{}\", j);\n }"}, {"sha": "96918cfc6f7d3001e5ccb453dfc14daa467400e1", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { error!(\"{}\", s); fail!(\"quux\"); }\n+fn my_err(s: ~str) -> ! { println!(\"{}\", s); fail!(\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "96918cfc6f7d3001e5ccb453dfc14daa467400e1", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { error!(\"{}\", s); fail!(\"quux\"); }\n+fn my_err(s: ~str) -> ! { println!(\"{}\", s); fail!(\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "daec43ea99352806b5372d8620e5dc109586916c", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -22,8 +22,8 @@ fn main() {\n     // wrap around to a small number.\n \n     let idx = uint::MAX & !(uint::MAX >> 1u);\n-    error!(\"ov2 idx = 0x%x\", idx);\n+    println!(\"ov2 idx = 0x%x\", idx);\n \n     // This should fail.\n-    error!(\"ov2 0x%x\",  x[idx]);\n+    println!(\"ov2 0x%x\",  x[idx]);\n }"}, {"sha": "e262d088ba018477c9f6b2b79192f66c7255cd4b", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,17 +24,17 @@ fn main() {\n     // This test is only meaningful on 32-bit hosts.\n \n     let idx = u64::MAX & !(u64::MAX >> 1u);\n-    error!(\"ov3 idx = 0x%8.8x%8.8x\",\n+    println!(\"ov3 idx = 0x%8.8x%8.8x\",\n            (idx >> 32) as uint,\n            idx as uint);\n \n     // This should fail.\n-    error!(\"ov3 0x%x\",  x[idx]);\n+    println!(\"ov3 0x%x\",  x[idx]);\n }\n \n #[cfg(target_arch=\"x86_64\")]\n fn main() {\n     // This version just fails anyways, for symmetry on 64-bit hosts.\n     let x = ~[1u,2u,3u];\n-    error!(\"ov3 0x%x\",  x[200]);\n+    println!(\"ov3 0x%x\",  x[200]);\n }"}, {"sha": "152f90f974079358a138d5921ca6fbdc80d03609", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,12 +24,12 @@ fn main() {\n \n     let base = x.as_ptr() as uint;\n     let idx = base / mem::size_of::<uint>();\n-    error!(\"ov1 base = 0x{:x}\", base);\n-    error!(\"ov1 idx = 0x{:x}\", idx);\n-    error!(\"ov1 sizeof::<uint>() = 0x{:x}\", mem::size_of::<uint>());\n-    error!(\"ov1 idx * sizeof::<uint>() = 0x{:x}\",\n+    println!(\"ov1 base = 0x{:x}\", base);\n+    println!(\"ov1 idx = 0x{:x}\", idx);\n+    println!(\"ov1 sizeof::<uint>() = 0x{:x}\", mem::size_of::<uint>());\n+    println!(\"ov1 idx * sizeof::<uint>() = 0x{:x}\",\n            idx * mem::size_of::<uint>());\n \n     // This should fail.\n-    error!(\"ov1 0x{:x}\",  x[idx]);\n+    println!(\"ov1 0x{:x}\",  x[idx]);\n }"}, {"sha": "93f55261574ead6259bcf71de6d4af4e56e9ce41", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -44,7 +44,7 @@ fn main() {\n     for _ in range(0, 10u) {\n         task::spawn(proc() {\n             let result = count(5u);\n-            info!(\"result = %?\", result);\n+            println!(\"result = %?\", result);\n             fail!();\n         });\n     }"}, {"sha": "e23145ec2535798c676df3b5bb918e2624932b7d", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:woe\n-fn f(a: int) { info!(\"{}\", a); }\n+fn f(a: int) { println!(\"{}\", a); }\n \n fn main() { f(fail!(\"woe\")); }"}, {"sha": "b5f39e73fcb1a3bda1968b9c6a6d7a5d4dc53e7d", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,7 +17,7 @@ fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        info!(\"{}\", x);\n+        println!(\"{}\", x);\n     } else {\n         fail!(\"Number is odd\");\n     }"}, {"sha": "583a5c2010a3736940b1f3274a121257bdcb87ac", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { error!(\"{}\", s); fail!(\"quux\"); }\n+fn my_err(s: ~str) -> ! { println!(\"{}\", s); fail!(\"quux\"); }\n fn main() { if my_err(~\"bye\") { } }"}, {"sha": "a4a6739bfc1d49a858e5b9a1b7744e648b1e92ee", "filename": "src/test/run-fail/match-wildcards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fmatch-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fmatch-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-wildcards.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,4 +17,4 @@ fn cmp() -> int {\n     }\n }\n \n-fn main() { error!(\"{}\", cmp()); }\n+fn main() { println!(\"{}\", cmp()); }"}, {"sha": "06cba673b34c060fd7b5069db5c4b4718e0d9aab", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,5 +13,5 @@\n use std::result;\n \n fn main() {\n-    error!(\"{:?}\", result::Err::<int,~str>(~\"kitty\").unwrap());\n+    println!(\"{:?}\", result::Err::<int,~str>(~\"kitty\").unwrap());\n }"}, {"sha": "98d7d5cf43704bac80320a88c2860e1db71ba786", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#[feature(phase)];\n+#[phase(syntax, link)] extern crate log;\n use std::os;\n \n fn main() {"}, {"sha": "67f9f5a168fba2e918f6400852b4482cf51d71db", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#[feature(phase)];\n+#[phase(syntax, link)] extern crate log;\n use std::os;\n use std::task;\n "}, {"sha": "352e0f65644703b0ef1b49f379129638fff2a2e1", "filename": "src/test/run-fail/rt-set-exit-status.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:whatever\n \n+#[feature(phase)];\n+#[phase(syntax, link)] extern crate log;\n use std::os;\n \n fn main() {"}, {"sha": "04733552969c510e3f8d2db016de554509337bd5", "filename": "src/test/run-fail/too-much-recursion-unwinding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@\n // during unwinding\n \n fn recurse() {\n-    info!(\"don't optimize me out\");\n+    println!(\"don't optimize me out\");\n     recurse();\n }\n "}, {"sha": "a49760f3c58cbd112e905a591210eff24779aaaa", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,8 +19,8 @@ fn failfn() {\n fn main() {\n     let y = ~0;\n     let x: @proc() = @(proc() {\n-        error!(\"{:?}\", y.clone());\n+        println!(\"{:?}\", y.clone());\n     });\n     failfn();\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "49bcde75594dd09f1583a401cdf0873c170d703d", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -43,6 +43,6 @@ fn main() {\n         cast::forget(i1);\n         let x = @r(i1p);\n         failfn();\n-        error!(\"{:?}\", x);\n+        println!(\"{:?}\", x);\n     }\n }"}, {"sha": "6343b81fd2a8009bdbc8ed54d1fa589f85c19cc5", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ fn failfn() {\n fn main() {\n     let x = @~\"hi\";\n     failfn();\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "d9f425403eb07ae74b22648453b8e902ea8cb0bb", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ fn failfn() {\n fn main() {\n     let x = @~~0;\n     failfn();\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "045ffea0fcd4ca5a43f8f63b48c9e7042e69d8d8", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ fn failfn() {\n fn main() {\n     let x = @~0;\n     failfn();\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "957b631abd39ae89386b496f16d053193b0f81ed", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ fn failfn() {\n fn main() {\n     let x = @~[0, 1, 2, 3, 4, 5];\n     failfn();\n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n }"}, {"sha": "d5bada4a127f902ba503dd9b532f2834d7458130", "filename": "src/test/run-make/c-set-crate-map-manually/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Flib.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,9 +11,11 @@\n #[crate_id=\"boot#0.1\"];\n #[crate_type=\"dylib\"];\n #[no_uv];\n+#[feature(phase)];\n \n extern crate rustuv;\n extern crate green;\n+#[phase(syntax, link)] extern crate log;\n \n use std::rt::crate_map::{CrateMap, rust_set_crate_map};\n \n@@ -24,7 +26,7 @@ pub static set_crate_map: extern \"C\" fn(*CrateMap<'static>) = rust_set_crate_map\n #[no_mangle] // this needs to get called from C\n pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n     green::start(argc, argv, proc() {\n-        if log_enabled!(std::logging::DEBUG) { return }\n+        if log_enabled!(log::DEBUG) { return }\n         fail!()\n     })\n }"}, {"sha": "1c797d8369f6af84abc3a92c6560ca929cf9f6a5", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -83,7 +83,7 @@ fn check_pp<T>(cx: fake_ext_ctxt,\n     });\n     stdout().write_line(s);\n     if expect != ~\"\" {\n-        error!(\"expect: '%s', got: '%s'\", expect, s);\n+        println!(\"expect: '%s', got: '%s'\", expect, s);\n         assert_eq!(s, expect);\n     }\n }"}, {"sha": "a0233360a7ccf1f36567120122a1f9e00599f51c", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -36,7 +36,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> ~Invokable:<A> {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16).f();\n-    info!(\"a={:?} b={:?}\", a, b);\n+    println!(\"a={:?} b={:?}\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "24c63e5affc0dc36bcffd4398162900ac6d56792", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,6 +12,6 @@\n \n pub fn main() {\n     let a: int = 10;\n-    info!(\"{}\", a);\n+    println!(\"{}\", a);\n     assert_eq!(a * (a - 1), 90);\n }"}, {"sha": "e834aa5aa099dff1ba67a8ac966e18b87c3a68ca", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -28,6 +28,6 @@ pub fn main() {\n     assert_eq!(i32_b << 1, i32_b << 1);\n     assert_eq!(i32_b >> 1, i32_b >> 1);\n     assert_eq!(i32_b & i32_b << 1, 0);\n-    info!(\"{}\", i32_b | i32_b << 1);\n+    println!(\"{}\", i32_b | i32_b << 1);\n     assert_eq!(i32_b | i32_b << 1, 0x30303030);\n }"}, {"sha": "c2b276aac095b9e14b51ffb4979cfac895a439da", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,6 +18,6 @@ struct Triple { x: int, y: int, z: int }\n fn f<T,U>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    info!(\"{:?}\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n-    info!(\"{:?}\", f(5, 6).a);\n+    println!(\"{:?}\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n+    println!(\"{:?}\", f(5, 6).a);\n }"}, {"sha": "3e3d9aab84e89dd584f7ae6ca376a6d228632f29", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -81,7 +81,7 @@ fn test_class() {\n   let mut r = p(1, 2);\n \n   unsafe {\n-  error!(\"q = {:x}, r = {:x}\",\n+  println!(\"q = {:x}, r = {:x}\",\n          (::std::cast::transmute::<*p, uint>(&q)),\n          (::std::cast::transmute::<*p, uint>(&r)));\n   }"}, {"sha": "d359f488ca5ec261c0de4f0e4ce25d307e87a2e8", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -26,8 +26,8 @@ fn general() {\n     a ^= b;\n     b ^= a;\n     a = a ^ b;\n-    info!(\"{}\", a);\n-    info!(\"{}\", b);\n+    println!(\"{}\", a);\n+    println!(\"{}\", b);\n     assert_eq!(b, 1);\n     assert_eq!(a, 2);\n     assert_eq!(!0xf0 & 0xff, 0xf);"}, {"sha": "1957992e03d15074546673c967acf1849f1de609", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n     // Statement form does not require parentheses:\n     for i in v.iter() {\n-        info!(\"{:?}\", *i);\n+        println!(\"{:?}\", *i);\n     }\n \n }"}, {"sha": "2fb9bb9edfc911215f051518a8c0ffab74cf6603", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     fn as_buf<T>(s: ~str, f: |~str| -> T) -> T { f(s) }\n-    as_buf(~\"foo\", |foo: ~str| -> () error!(\"{}\", foo) );\n+    as_buf(~\"foo\", |foo: ~str| -> () println!(\"{}\", foo) );\n }"}, {"sha": "f14d42e17f3f3cbc2c2ef88144ddd0eb0f570563", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,6 +20,6 @@ pub fn main() {\n             odds += 1;\n         }\n     });\n-    error!(\"{:?}\", odds);\n+    println!(\"{:?}\", odds);\n     assert_eq!(odds, 4);\n }"}, {"sha": "deabead4876b3bbfacd88ebb6fa8e88412d6972d", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,6 +20,6 @@ pub fn main() {\n             sum += *i * *j;\n         });\n     });\n-    error!(\"{:?}\", sum);\n+    println!(\"{:?}\", sum);\n     assert_eq!(sum, 225);\n }"}, {"sha": "d90087ebdea7858fd416aafe4e70d070a4520d56", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -31,9 +31,9 @@ pub fn main() {\n     add_int(ints, 44);\n \n     iter_ints(ints, |i| {\n-        error!(\"int = {}\", *i);\n+        println!(\"int = {}\", *i);\n         true\n     });\n \n-    error!(\"ints={:?}\", ints);\n+    println!(\"ints={:?}\", ints);\n }"}, {"sha": "e9248864c02ad97d747e759110204708b5f3c01d", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -30,7 +30,7 @@ pub fn main() {\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n         x = @F {f: ~4};\n \n-        info!(\"&*b_x = {:p}\", &(*b_x));\n+        println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);\n         assert!(&(*x.f) as *int != &(*b_x) as *int);\n     })"}, {"sha": "6f6d8eba9c0c46cd16619a5e6618b529e95ba56a", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -30,7 +30,7 @@ pub fn main() {\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n         *x = @F{f: ~4};\n \n-        info!(\"&*b_x = {:p}\", &(*b_x));\n+        println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);\n         assert!(&(*x.f) as *int != &(*b_x) as *int);\n     })"}, {"sha": "cd2bfee700aa56b9296a30a36f030e7bdea97e50", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(&(*x) as *int, &(*b_x) as *int);\n         x = @22;\n \n-        info!(\"&*b_x = {:p}\", &(*b_x));\n+        println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);\n         assert!(&(*x) as *int != &(*b_x) as *int);\n     })"}, {"sha": "7c8008b1b3fc56b96f858da5a27d2fb8f0578571", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -27,13 +27,13 @@ fn testfn(cond: bool) {\n         exp = 4;\n     }\n \n-    info!(\"*r = {}, exp = {}\", *r, exp);\n+    println!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n \n     x = @5;\n     y = @6;\n \n-    info!(\"*r = {}, exp = {}\", *r, exp);\n+    println!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n     assert_eq!(x, @5);\n     assert_eq!(y, @6);"}, {"sha": "fda6bcc90c991e60ed29fcc3ba64cb7e19be3a39", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -30,7 +30,7 @@ pub fn main() {\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n         x = @F {f: ~4};\n \n-        info!(\"&*b_x = {:p}\", &(*b_x));\n+        println!(\"&*b_x = {:p}\", &(*b_x));\n         assert_eq!(*b_x, 3);\n         assert!(&(*x.f) as *int != &(*b_x) as *int);\n     })"}, {"sha": "1e003e1cb9eb008631dc715db21157735a386cde", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,7 +17,7 @@ fn is_odd(_n: int) -> bool { return true; }\n fn length_is_even(_vs: @int) -> bool { return true; }\n \n fn foo(_acc: int, n: int) {\n-    if is_odd(n) && length_is_even(some_box(1)) { error!(\"bloop\"); }\n+    if is_odd(n) && length_is_even(some_box(1)) { println!(\"bloop\"); }\n }\n \n pub fn main() { foo(67, 5); }"}, {"sha": "8f3f254dfe97a62f65e91bf984e415d63e0a6984", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,7 +17,7 @@ fn is_odd(_n: int) -> bool { return true; }\n fn length_is_even(_vs: @int) -> bool { return true; }\n \n fn foo(_acc: int, n: int) {\n-    if is_odd(n) || length_is_even(some_box(1)) { error!(\"bloop\"); }\n+    if is_odd(n) || length_is_even(some_box(1)) { println!(\"bloop\"); }\n }\n \n pub fn main() { foo(67, 5); }"}, {"sha": "59050a64f68f9e623eb273951da07860fd34ae5f", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,6 +17,6 @@ fn unbox<T:Clone>(b: Box<T>) -> T { return (*b.c).clone(); }\n pub fn main() {\n     let foo: int = 17;\n     let bfoo: Box<int> = Box {c: @foo};\n-    info!(\"see what's in our box\");\n+    println!(\"see what's in our box\");\n     assert_eq!(unbox::<int>(bfoo), foo);\n }"}, {"sha": "b1db8ad922332d0564ec31719ec37176c1d0218a", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,12 +12,16 @@\n // ignore-android (FIXME #11419)\n // exec-env:RUST_LOG=info\n \n+#[feature(phase)];\n+\n #[no_uv];\n extern crate native;\n+#[phase(syntax, link)]\n+extern crate log;\n \n use std::fmt;\n use std::io::{ChanReader, ChanWriter};\n-use std::logging::{set_logger, Logger};\n+use log::{set_logger, Logger};\n \n struct MyWriter(ChanWriter);\n "}, {"sha": "eacdd8f3978f6c80947c0cb507d7cef4ba462d31", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let x = 3;\n-    info!(\"&x={:x}\", (&x as *int as uint));\n+    println!(\"&x={:x}\", (&x as *int as uint));\n }"}, {"sha": "b276c8a8b07068b307b45752566f08a69facea51", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,6 +19,6 @@ use cci_borrow_lib::foo;\n pub fn main() {\n     let p = @22u;\n     let r = foo(p);\n-    info!(\"r={}\", r);\n+    println!(\"r={}\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "ee01849e7e7948f57f3297f3db1d61b13b589df3", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,13 +16,13 @@ use cci_impl_lib::uint_helpers;\n \n pub fn main() {\n     //let bt0 = sys::frame_address();\n-    //info!(\"%?\", bt0);\n+    //println!(\"%?\", bt0);\n \n     3u.to(10u, |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();\n-        //info!(\"%?\", bt1);\n+        //println!(\"%?\", bt1);\n         //assert!(bt0 == bt1);\n     })\n }"}, {"sha": "4a5770b3c6c246fa62ff42d25ec43ba50a194a84", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ extern crate cci_iter_lib;\n \n pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n-    //info!(\"%?\", bt0);\n+    //println!(\"%?\", bt0);\n     cci_iter_lib::iter([1, 2, 3], |i| {\n         println!(\"{}\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));"}, {"sha": "bd18acedbff4f401eff56bd5676769b6bd0eb2ac", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -21,12 +21,12 @@ pub fn main() {\n     // sys::frame_address() to determine if we are inlining is\n     // actually working.\n     //let bt0 = sys::frame_address();\n-    //info!(\"%?\", bt0);\n+    //println!(\"%?\", bt0);\n     iter(~[1u, 2u, 3u], |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();\n-        //info!(\"%?\", bt1);\n+        //println!(\"%?\", bt1);\n \n         //assert!(bt0 != bt1);\n     })"}, {"sha": "f4c95c5b232e0e0606dcf20ddc9d2585e836273c", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ struct cat {\n \n impl Drop for cat {\n     #[cat_dropper]\n-    fn drop(&mut self) { error!(\"{} landed on hir feet\" , self . name); }\n+    fn drop(&mut self) { println!(\"{} landed on hir feet\" , self . name); }\n }\n \n "}, {"sha": "c4dc0ac7412fd831d687ec0e72b053c57b8be885", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,7 +18,7 @@ impl Drop for cat {\n        Actually, cats don't always land on their feet when you drop them.\n     */\n     fn drop(&mut self) {\n-        error!(\"{} landed on hir feet\", self.name);\n+        println!(\"{} landed on hir feet\", self.name);\n     }\n }\n "}, {"sha": "a9a11361f9b0ea2b136ae4f9f5f460f0b79d2cc0", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ use cci_class_cast::kitty::cat;\n \n fn print_out(thing: ~ToStr, expected: ~str) {\n   let actual = thing.to_str();\n-  info!(\"{}\", actual);\n+  println!(\"{}\", actual);\n   assert_eq!(actual, expected);\n }\n "}, {"sha": "cdf235b113ee5291f24861b3801bfe1cb1864d15", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -22,15 +22,15 @@ struct dog {\n \n impl dog {\n     fn bark(&mut self) -> int {\n-      info!(\"Woof {} {}\", self.barks, self.volume);\n+      println!(\"Woof {} {}\", self.barks, self.volume);\n       self.barks += 1u;\n       if self.barks % 3u == 0u {\n           self.volume += 1;\n       }\n       if self.barks % 10u == 0u {\n           self.volume -= 2;\n       }\n-      info!(\"Grrr {} {}\", self.barks, self.volume);\n+      println!(\"Grrr {} {}\", self.barks, self.volume);\n       self.volume\n     }\n }\n@@ -70,7 +70,7 @@ impl cat {\n \n impl cat {\n     fn meow(&mut self) -> uint {\n-        info!(\"Meow\");\n+        println!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;"}, {"sha": "b57851ea3cfb995c0a469744e01be15f4b583ad4", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -27,20 +27,20 @@ impl noisy for cat {\n impl cat {\n   pub fn eat(&mut self) -> bool {\n     if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n+        println!(\"OM NOM NOM\");\n         self.how_hungry -= 2;\n         return true;\n     }\n     else {\n-        error!(\"Not hungry!\");\n+        println!(\"Not hungry!\");\n         return false;\n     }\n   }\n }\n \n impl cat {\n     fn meow(&mut self) {\n-      error!(\"Meow\");\n+      println!(\"Meow\");\n       self.meows += 1u;\n       if self.meows % 5u == 0u {\n           self.how_hungry += 1;"}, {"sha": "e70341612df2a64468ce1f4564e4456580a10c7e", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -39,11 +39,11 @@ impl<T> cat<T> {\n \n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            println!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         } else {\n-            error!(\"Not hungry!\");\n+            println!(\"Not hungry!\");\n             return false;\n         }\n     }\n@@ -107,7 +107,7 @@ impl<T> cat<T> {\n impl<T> cat<T> {\n     fn meow(&mut self) {\n         self.meows += 1;\n-        error!(\"Meow {}\", self.meows);\n+        println!(\"Meow {}\", self.meows);\n         if self.meows % 5 == 0 {\n             self.how_hungry += 1;\n         }"}, {"sha": "1b4a9fbd099f5eb441cbe5f857bd00e02f4b2f55", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -23,12 +23,12 @@ struct cat {\n impl cat {\n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            println!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         }\n         else {\n-            error!(\"Not hungry!\");\n+            println!(\"Not hungry!\");\n             return false;\n         }\n     }\n@@ -40,7 +40,7 @@ impl noisy for cat {\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        println!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;"}, {"sha": "d967310b907c4730955363d1953b63a5e0c8a99b", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,7 +24,7 @@ struct cat {\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        println!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;\n@@ -35,11 +35,11 @@ impl cat {\n impl cat {\n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            println!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         } else {\n-            error!(\"Not hungry!\");\n+            println!(\"Not hungry!\");\n             return false;\n         }\n     }"}, {"sha": "a93f7c9d73b3e4f928f359993c80d8b1115fc178", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,20 +24,20 @@ impl cat {\n \n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            println!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         }\n         else {\n-            error!(\"Not hungry!\");\n+            println!(\"Not hungry!\");\n             return false;\n         }\n     }\n }\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        println!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;\n@@ -61,7 +61,7 @@ impl fmt::Show for cat {\n \n fn print_out(thing: ~ToStr, expected: ~str) {\n   let actual = thing.to_str();\n-  info!(\"{}\", actual);\n+  println!(\"{}\", actual);\n   assert_eq!(actual, expected);\n }\n "}, {"sha": "26708e8f8a235464a1f34b7955bf26cfecc2dacf", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,19 +20,19 @@ impl cat {\n \n     pub fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n+            println!(\"OM NOM NOM\");\n             self.how_hungry -= 2;\n             return true;\n         } else {\n-            error!(\"Not hungry!\");\n+            println!(\"Not hungry!\");\n             return false;\n         }\n     }\n }\n \n impl cat {\n     fn meow(&mut self) {\n-        error!(\"Meow\");\n+        println!(\"Meow\");\n         self.meows += 1u;\n         if self.meows % 5u == 0u {\n             self.how_hungry += 1;"}, {"sha": "ea75ae2fc5c55a765444fb2578be6747c6d6c4a7", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -40,7 +40,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> ~Invokable:<A> {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16).f();\n-    info!(\"a={:?} b={:?}\", a, b);\n+    println!(\"a={:?} b={:?}\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "ae21d53b7e01d88a22dba6cf0b53a69a3bfd4609", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,13 +14,13 @@ pub fn main() {\n     let (tx, rx) = channel();\n     let _t = task::spawn(proc() { child(&tx) });\n     let y = rx.recv();\n-    error!(\"received\");\n-    error!(\"{:?}\", y);\n+    println!(\"received\");\n+    println!(\"{:?}\", y);\n     assert_eq!(y, 10);\n }\n \n fn child(c: &Sender<int>) {\n     error!(\"sending\");\n     c.send(10);\n-    error!(\"value sent\");\n+    println!(\"value sent\");\n }"}, {"sha": "cad7f05171ad08c9f35b384f26f91736d294ebbe", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -36,7 +36,7 @@ fn foo(x: int) -> int {\n \n pub fn main() {\n     let x: int = 2 + 2;\n-    info!(\"{}\", x);\n-    info!(\"hello, world\");\n-    info!(\"{}\", 10);\n+    println!(\"{}\", x);\n+    println!(\"hello, world\");\n+    println!(\"{}\", 10);\n }"}, {"sha": "8a2a00f56385d203fac3641d436d77e49cf1989e", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,11 @@\n // compile-flags: --cfg ndebug\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n+#[feature(phase)];\n+#[phase(syntax, link)]\n+extern crate log;\n+\n pub fn main() {\n-    // only fails if debug! evaluates its argument.\n+    // only fails if println! evaluates its argument.\n     debug!(\"{:?}\", { if true { fail!() } });\n }"}, {"sha": "324f1aade04a4da9de7430b59c5de8c071cf6c60", "filename": "src/test/run-pass/conditional-debug-macro-on.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,9 +12,9 @@\n // exec-env:RUST_LOG=conditional-debug-macro-on=4\n \n pub fn main() {\n-    // exits early if debug! evaluates its arguments, otherwise it\n+    // exits early if println! evaluates its arguments, otherwise it\n     // will hit the fail.\n-    debug!(\"{:?}\", { if true { return; } });\n+    println!(\"{:?}\", { if true { return; } });\n \n     fail!();\n }"}, {"sha": "8f78d54c7013714c202f879be5989afbe90bdbfe", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,4 +12,4 @@\n \n static i: int = 10;\n \n-pub fn main() { info!(\"{}\", i); }\n+pub fn main() { println!(\"{}\", i); }"}, {"sha": "23c143445abe962b72c432198353678de7c1c66d", "filename": "src/test/run-pass/dead-code-one-arm-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,4 +11,4 @@\n \n \n \n-pub fn main() { if 1 == 1 { return; } info!(\"Paul is dead\"); }\n+pub fn main() { if 1 == 1 { return; } println!(\"Paul is dead\"); }"}, {"sha": "6bac1511d55992875291778ea3034907d811c38d", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,5 +15,5 @@ use std::cell::Cell;\n pub fn main() {\n     let x = @Cell::new(5);\n     x.set(1000);\n-    info!(\"{:?}\", x.get());\n+    println!(\"{:?}\", x.get());\n }"}, {"sha": "2d33ac4e5dea0162c8638141f864809bbf9234fd", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,8 +14,8 @@ pub fn main() {\n     let v = &\"hello\";\n     let y : &str = &\"there\";\n \n-    info!(\"{}\", x);\n-    info!(\"{}\", y);\n+    println!(\"{}\", x);\n+    println!(\"{}\", y);\n \n     assert_eq!(x[0], 'h' as u8);\n     assert_eq!(x[4], 'o' as u8);\n@@ -30,29 +30,29 @@ pub fn main() {\n     let c = &\"cccc\";\n     let cc = &\"ccccc\";\n \n-    info!(\"{}\", a);\n+    println!(\"{}\", a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    info!(\"{}\", b);\n+    println!(\"{}\", b);\n \n     assert!(a < c);\n     assert!(a <= c);\n     assert!(a != c);\n     assert!(c >= a);\n     assert!(c > a);\n \n-    info!(\"{}\", c);\n+    println!(\"{}\", c);\n \n     assert!(c < cc);\n     assert!(c <= cc);\n     assert!(c != cc);\n     assert!(cc >= c);\n     assert!(cc > c);\n \n-    info!(\"{}\", cc);\n+    println!(\"{}\", cc);\n }"}, {"sha": "aaa3e3529d416e341506275396e76fb284f0767c", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -22,15 +22,15 @@ pub fn main() {\n     let c : &[int] = &[2,2,2,2,3];\n     let cc : &[int] = &[2,2,2,2,2,2];\n \n-    info!(\"{:?}\", a);\n+    println!(\"{:?}\", a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    info!(\"{:?}\", b);\n+    println!(\"{:?}\", b);\n \n     assert!(b < c);\n     assert!(b <= c);\n@@ -44,13 +44,13 @@ pub fn main() {\n     assert!(c >= a);\n     assert!(c > a);\n \n-    info!(\"{:?}\", c);\n+    println!(\"{:?}\", c);\n \n     assert!(a < cc);\n     assert!(a <= cc);\n     assert!(a != cc);\n     assert!(cc >= a);\n     assert!(cc > a);\n \n-    info!(\"{:?}\", cc);\n+    println!(\"{:?}\", cc);\n }"}, {"sha": "0b9b8fbcfd33a98c4a78b5492e43cc171a5a2e39", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,7 +13,7 @@ mod foo {\n         pub fn y() { super::super::foo::x(); }\n     }\n \n-    pub fn x() { info!(\"x\"); }\n+    pub fn x() { println!(\"x\"); }\n }\n \n pub fn main() { self::foo::bar::y(); }"}, {"sha": "a0d97383f0a3d9dbbe17d7ea285745564222cde1", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ pub mod foo {\n }\n \n pub mod bar {\n-    pub fn x() { info!(\"x\"); }\n+    pub fn x() { println!(\"x\"); }\n }\n \n pub fn main() { foo::x(); }"}, {"sha": "eaead09a2f7a94dba73abe34212468836d14e0e0", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,8 +19,8 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool {\n-        info!(\"{}\", *b1);\n-        info!(\"{}\", *b2);\n+        println!(\"{}\", *b1);\n+        println!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(@true, compare_box);"}, {"sha": "b3fbd8c765809003597fb69e97c23f5a54f1b838", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,8 +19,8 @@ fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n-        info!(\"{}\", *b1);\n-        info!(\"{}\", *b2);\n+        println!(\"{}\", *b1);\n+        println!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(~true, compare_box);"}, {"sha": "67f2d750cc024d98fc46c0293c4aab53327b3f03", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -31,13 +31,13 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn count(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = {}\", n);\n+        println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n     let result = count(1000u);\n-    info!(\"result = {}\", result);\n+    println!(\"result = {}\", result);\n     assert_eq!(result, 1000u);\n }"}, {"sha": "701ae33132dc38b60f4f3d53636eee7216b07577", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -32,7 +32,7 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn count(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = {}\", n);\n+        println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n@@ -42,7 +42,7 @@ pub fn main() {\n     // has a large stack)\n     task::spawn(proc() {\n         let result = count(1000u);\n-        info!(\"result = {}\", result);\n+        println!(\"result = {}\", result);\n         assert_eq!(result, 1000u);\n     });\n }"}, {"sha": "16142b2f8967cc5c4d9568ae68d0e6e8fef81d1e", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -31,13 +31,13 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn fact(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = {}\", n);\n+        println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n     let result = fact(10u);\n-    info!(\"result = {}\", result);\n+    println!(\"result = {}\", result);\n     assert_eq!(result, 3628800u);\n }"}, {"sha": "c67810bb17a8d05a35275d0c6f15faddc3a4847e", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -36,7 +36,7 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn count(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = {}\", n);\n+        println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n@@ -46,7 +46,7 @@ pub fn main() {\n     // has a large stack)\n     task::spawn(proc() {\n         let result = count(12u);\n-        info!(\"result = {}\", result);\n+        println!(\"result = {}\", result);\n         assert_eq!(result, 2048u);\n     });\n }"}, {"sha": "43c7887d3ef6cca30511aef207d8bec7ec210ca7", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,13 +15,13 @@ extern crate externcallback = \"externcallback#0.1\";\n \n fn fact(n: uint) -> uint {\n     unsafe {\n-        info!(\"n = {}\", n);\n+        println!(\"n = {}\", n);\n         externcallback::rustrt::rust_dbg_call(externcallback::cb, n)\n     }\n }\n \n pub fn main() {\n     let result = fact(10u);\n-    info!(\"result = {}\", result);\n+    println!(\"result = {}\", result);\n     assert_eq!(result, 3628800u);\n }"}, {"sha": "ba4f0ccfe648569b5808a93e05dd7952776c722e", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -41,7 +41,7 @@ pub fn main() {\n     for _ in range(0, 10u) {\n         task::spawn(proc() {\n             let result = count(5u);\n-            info!(\"result = {}\", result);\n+            println!(\"result = {}\", result);\n             assert_eq!(result, 16u);\n         });\n     }"}, {"sha": "172ec2f09050ca8e5bf03a33e386292bba5d06a1", "filename": "src/test/run-pass/fact.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffact.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,26 +12,26 @@\n \n \n fn f(x: int) -> int {\n-    // info!(\"in f:\");\n+    // println!(\"in f:\");\n \n-    info!(\"{}\", x);\n+    println!(\"{}\", x);\n     if x == 1 {\n-        // info!(\"bottoming out\");\n+        // println!(\"bottoming out\");\n \n         return 1;\n     } else {\n-        // info!(\"recurring\");\n+        // println!(\"recurring\");\n \n         let y: int = x * f(x - 1);\n-        // info!(\"returned\");\n+        // println!(\"returned\");\n \n-        info!(\"{}\", y);\n+        println!(\"{}\", y);\n         return y;\n     }\n }\n \n pub fn main() {\n     assert_eq!(f(5), 120);\n-    // info!(\"all done\");\n+    // println!(\"all done\");\n \n }"}, {"sha": "e29cad9c2a3fceab7dd95f538a7061b8cfdbd420", "filename": "src/test/run-pass/fat-arrow-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ enum color {\n }\n \n pub fn main() {\n-    error!(\"{}\", match red {\n+    println!(\"{}\", match red {\n         red => { 1 }\n         green => { 2 }\n         blue => { 3 }"}, {"sha": "08daf1bd80e423ca2f86dfa55df998c40c33d327", "filename": "src/test/run-pass/float-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-signature.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,5 +14,5 @@ pub fn main() {\n     fn foo(n: f64) -> f64 { return n + 0.12345; }\n     let n: f64 = 0.1;\n     let m: f64 = foo(n);\n-    info!(\"{}\", m);\n+    println!(\"{}\", m);\n }"}, {"sha": "277f0011c1cfb7a719b3d22059f794b4173799dd", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,9 +12,9 @@\n \n pub fn main() {\n     let pi = 3.1415927;\n-    info!(\"{:?}\", -pi * (pi + 2.0 / pi) - pi * 5.0);\n+    println!(\"{:?}\", -pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n-        info!(\"yes\");\n+        println!(\"yes\");\n     }\n }"}, {"sha": "455b71aff877a981c902871535c21f67636414e5", "filename": "src/test/run-pass/fn-bare-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    info!(\"This is a bare function\");\n+    println!(\"This is a bare function\");\n }\n \n pub fn main() {"}, {"sha": "7a728e18a290143a34181084f5612ca14bdfad08", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -21,8 +21,8 @@ pub fn main() {\n     let mut j: int = 0;\n     pairs(|p| {\n         let (_0, _1) = p;\n-        info!(\"{}\", _0);\n-        info!(\"{}\", _1);\n+        println!(\"{}\", _0);\n+        println!(\"{}\", _1);\n         assert_eq!(_0 + 10, i);\n         i += 1;\n         j = _1;"}, {"sha": "bb726773bb5dbe64936e9e6cef6bd48b71d2c145", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,13 +13,13 @@\n \n pub fn main() {\n     let mut sum: int = 0;\n-    first_ten(|i| { info!(\"main\"); info!(\"{}\", i); sum = sum + i; });\n-    info!(\"sum\");\n-    info!(\"{}\", sum);\n+    first_ten(|i| { println!(\"main\"); println!(\"{}\", i); sum = sum + i; });\n+    println!(\"sum\");\n+    println!(\"{}\", sum);\n     assert_eq!(sum, 45);\n }\n \n fn first_ten(it: |int|) {\n     let mut i: int = 0;\n-    while i < 10 { info!(\"first_ten\"); it(i); i = i + 1; }\n+    while i < 10 { println!(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "9e7344a8dfc05966b38b5668f9cc22f833e6c349", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,6 +15,6 @@ fn id<T>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = @100;\n     let actual = id::<@int>(expected);\n-    info!(\"{:?}\", *actual);\n+    println!(\"{:?}\", *actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "898d0c0ec2317f53aa350371866c51713d4a4674", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,6 +15,6 @@ fn id<T:Send>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = ~100;\n     let actual = id::<~int>(expected.clone());\n-    info!(\"{:?}\", *actual);\n+    println!(\"{:?}\", *actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "80f64d8df3d8fabb382006e987aa9711d7dc86b7", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -25,8 +25,8 @@ fn f<T:Clone>(t: T) -> Pair<T> {\n \n pub fn main() {\n     let b = f::<int>(10);\n-    info!(\"{:?}\" ,b.a);\n-    info!(\"{:?}\", b.b);\n+    println!(\"{:?}\" ,b.a);\n+    println!(\"{:?}\", b.b);\n     assert_eq!(b.a, 10);\n     assert_eq!(b.b, 10);\n }"}, {"sha": "9ee237e97f0e48076c35f0a668ca8dc5c60d4243", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,4 +12,4 @@\n \n fn f<T>(x: @T) -> @T { return x; }\n \n-pub fn main() { let x = f(@3); info!(\"{:?}\", *x); }\n+pub fn main() { let x = f(@3); println!(\"{:?}\", *x); }"}, {"sha": "c27aff53b6797a7cfc1e204d96c9e5e6c59376a1", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,4 +11,4 @@\n \n fn f<T>(x: ~T) -> ~T { return x; }\n \n-pub fn main() { let x = f(~3); info!(\"{:?}\", *x); }\n+pub fn main() { let x = f(~3); println!(\"{:?}\", *x); }"}, {"sha": "13a9d57e578d82dc4343d37301bfdba1d247a054", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -22,14 +22,14 @@ pub fn main() {\n     let p: Triple = Triple {x: 65, y: 66, z: 67};\n     let mut q: Triple = Triple {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n-    info!(\"{}\", y);\n+    println!(\"{}\", y);\n     assert_eq!(x, y);\n     b = id::<char>(a);\n-    info!(\"{}\", b);\n+    println!(\"{}\", b);\n     assert_eq!(a, b);\n     q = id::<Triple>(p);\n     x = p.z;\n     y = q.z;\n-    info!(\"{}\", y);\n+    println!(\"{}\", y);\n     assert_eq!(x, y);\n }"}, {"sha": "c20de257315f49f5682fd0b03c1a43e74f7bfb33", "filename": "src/test/run-pass/generic-tag-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@ enum foo<T> { arm(T), }\n \n fn altfoo<T>(f: foo<T>) {\n     let mut hit = false;\n-    match f { arm::<T>(_x) => { info!(\"in arm\"); hit = true; } }\n+    match f { arm::<T>(_x) => { println!(\"in arm\"); hit = true; } }\n     assert!((hit));\n }\n "}, {"sha": "e9848960180961df381341cfd2f92bd971fac9b4", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,12 +17,12 @@ struct Pair { x: int, y: int }\n \n pub fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    match nop { some::<int>(n) => { info!(\"{:?}\", n); assert!((n == 5)); } }\n+    match nop { some::<int>(n) => { println!(\"{:?}\", n); assert!((n == 5)); } }\n     let nop2: noption<Pair> = some(Pair{x: 17, y: 42});\n     match nop2 {\n       some(t) => {\n-        info!(\"{:?}\", t.x);\n-        info!(\"{:?}\", t.y);\n+        println!(\"{:?}\", t.x);\n+        println!(\"{:?}\", t.y);\n         assert_eq!(t.x, 17);\n         assert_eq!(t.y, 42);\n       }"}, {"sha": "99be8a5478c21b7efb7b9b77ff213ee855a56848", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,7 +12,7 @@\n \n fn mk() -> int { return 1; }\n \n-fn chk(a: int) { info!(\"{}\", a); assert!((a == 1)); }\n+fn chk(a: int) { println!(\"{}\", a); assert!((a == 1)); }\n \n fn apply<T>(produce: fn() -> T,\n             consume: fn(T)) {"}, {"sha": "2e9bd371e29ccbfaae98f4286cc94a3f6f28ec31", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n fn get_third<T>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n-    info!(\"{:?}\", get_third((1, 2, 3)));\n+    println!(\"{:?}\", get_third((1, 2, 3)));\n     assert_eq!(get_third((1, 2, 3)), 3);\n     assert_eq!(get_third((5u8, 6u8, 7u8)), 7u8);\n }"}, {"sha": "20d33a09f79e5dc1833a4870f0673ed4c383cc3c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -51,11 +51,11 @@ mod map_reduce {\n                 return;\n             }\n             let (tx, rx) = channel();\n-            error!(\"sending find_reducer\");\n+            println!(\"sending find_reducer\");\n             ctrl.send(find_reducer(key.as_bytes().to_owned(), tx));\n-            error!(\"receiving\");\n+            println!(\"receiving\");\n             let c = rx.recv();\n-            error!(\"{:?}\", c);\n+            println!(\"{:?}\", c);\n             im.insert(key, c);\n         }\n "}, {"sha": "97429131a7c3261b26aac2b96991153ded3f81aa", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,5 +12,5 @@\n \n pub fn main() {\n     let i: int = if false { fail!() } else { 5 };\n-    info!(\"{:?}\", i);\n+    println!(\"{:?}\", i);\n }"}, {"sha": "22b5281ef38f04b07d7617e70f77bed03edb29ec", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        info!(\"{}\", x);\n+        println!(\"{}\", x);\n     } else {\n         fail!();\n     }"}, {"sha": "dc5c7d11769b87c489f0d125015f8c6777b23b11", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,10 +16,10 @@ use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n \n mod module_of_many_things {\n-    pub fn f1() { info!(\"f1\"); }\n-    pub fn f2() { info!(\"f2\"); }\n-    fn f3() { info!(\"f3\"); }\n-    pub fn f4() { info!(\"f4\"); }\n+    pub fn f1() { println!(\"f1\"); }\n+    pub fn f2() { println!(\"f2\"); }\n+    fn f3() { println!(\"f3\"); }\n+    pub fn f4() { println!(\"f4\"); }\n }\n \n mod dug {\n@@ -28,8 +28,8 @@ mod dug {\n             pub mod and {\n                 pub mod too {\n                     pub mod deep {\n-                        pub fn nameless_fear() { info!(\"Boo!\"); }\n-                        pub fn also_redstone() { info!(\"Whatever.\"); }\n+                        pub fn nameless_fear() { println!(\"Boo!\"); }\n+                        pub fn also_redstone() { println!(\"Whatever.\"); }\n                     }\n                 }\n             }"}, {"sha": "5765df4dafad9d7a2a7eeea95aa606ffbd85dbe2", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n mod foo {\n-    pub fn x(y: int) { info!(\"{:?}\", y); }\n+    pub fn x(y: int) { println!(\"{:?}\", y); }\n }\n \n mod bar {"}, {"sha": "7a3c6a1387798adde23b4f5e0b8674ebcedd78fe", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    pub fn bar() { info!(\"bar\"); }\n+    pub fn bar() { println!(\"bar\"); }\n }\n \n pub fn main() { bar(); }"}, {"sha": "651f86e5898048bdfb63c6127286231520364fc0", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,7 +17,7 @@ use baz::zed::bar;\n \n mod baz {\n     pub mod zed {\n-        pub fn bar() { info!(\"bar2\"); }\n+        pub fn bar() { println!(\"bar2\"); }\n     }\n }\n "}, {"sha": "ff858e81bb8dc05a356f6a8e9c95a12dc954d389", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    pub fn bar() { info!(\"bar\"); }\n+    pub fn bar() { println!(\"bar\"); }\n }\n \n pub fn main() { let _zed = 42; bar(); }"}, {"sha": "f41e4d7d373f0f255684893c2d628f465970387d", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@ use foo::bar;\n mod foo {\n     pub use foo::zed::bar;\n     pub mod zed {\n-        pub fn bar() { info!(\"foo\"); }\n+        pub fn bar() { println!(\"foo\"); }\n     }\n }\n "}, {"sha": "cf8dfd5469c9fcd1c73e45d071955f5c98033689", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,7 +17,7 @@ use bar::baz;\n \n mod foo {\n     pub mod zed {\n-        pub fn baz() { info!(\"baz\"); }\n+        pub fn baz() { println!(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "fadbc53451905848789c82b580d80062ff4f5e83", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,7 +17,7 @@ use bar::baz;\n \n mod foo {\n     pub mod zed {\n-        pub fn baz() { info!(\"baz\"); }\n+        pub fn baz() { println!(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "69706a324b63b08dc5cd6cd788a966674663e974", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ use foo::x;\n use z = foo::x;\n \n mod foo {\n-    pub fn x(y: int) { info!(\"{}\", y); }\n+    pub fn x(y: int) { println!(\"{}\", y); }\n }\n \n pub fn main() { x(10); z(10); }"}, {"sha": "95a10df5f81286cea27e8c545aec3ec3308389fc", "filename": "src/test/run-pass/inner-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Finner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Finner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-module.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,7 +13,7 @@\n \n mod inner {\n     pub mod inner2 {\n-        pub fn hello() { info!(\"hello, modular world\"); }\n+        pub fn hello() { println!(\"hello, modular world\"); }\n     }\n     pub fn hello() { inner2::hello(); }\n }"}, {"sha": "18ff6fe18963800abf9d9cfaae008557df959dcf", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,11 +20,11 @@ pub fn main() {\n     assert_eq!(v[3i8], 3);\n     assert_eq!(v[3u32], 3);\n     assert_eq!(v[3i32], 3);\n-    info!(\"{}\", v[3u8]);\n+    println!(\"{}\", v[3u8]);\n     assert_eq!(s[3u], 'd' as u8);\n     assert_eq!(s[3u8], 'd' as u8);\n     assert_eq!(s[3i8], 'd' as u8);\n     assert_eq!(s[3u32], 'd' as u8);\n     assert_eq!(s[3i32], 'd' as u8);\n-    info!(\"{}\", s[3u8]);\n+    println!(\"{}\", s[3u8]);\n }"}, {"sha": "3f2c3f4fbd7ab41caac7e4b4b2b6ba43b4761e05", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,7 +20,7 @@ pub fn main () {\n     let args = os::args();\n     if args.len() > 1 && args[1] == ~\"child\" {\n         for _ in range(0, 1000) {\n-            error!(\"hello?\");\n+            println!(\"hello?\");\n         }\n         for _ in range(0, 1000) {\n             println!(\"hello?\");"}, {"sha": "48a1fd3f78327ddebbdf09b4c180160ca6013ebe", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,5 +17,5 @@ use collections::HashMap;\n pub fn main() {\n     let mut m = HashMap::new();\n     m.insert(\"foo\".as_bytes().to_owned(), \"bar\".as_bytes().to_owned());\n-    error!(\"{:?}\", m);\n+    println!(\"{:?}\", m);\n }"}, {"sha": "311ce2d64b20dc9feeef6cde53395ceb22e6175b", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -27,6 +27,6 @@ pub fn main() {\n         break;\n     }\n \n-    error!(\"{:?}\", x);\n+    println!(\"{:?}\", x);\n     assert_eq!(x, 42);\n }"}, {"sha": "a9ebfbcbf3322855036626d69e1da7f883b4c99a", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,7 +13,7 @@ struct cat {\n }\n \n fn meow() {\n-    error!(\"meow\")\n+    println!(\"meow\")\n }\n \n fn cat() -> cat {"}, {"sha": "2e294c30a3f76d3d0cb7bf13cb0ad84d70832662", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -296,16 +296,16 @@ pub mod pingpong {\n \n fn client(chan: pingpong::client::ping) {\n     let chan = pingpong::client::do_ping(chan);\n-    error!(\"Sent ping\");\n+    println!(\"Sent ping\");\n     let (_chan, _data) = pingpong::client::do_pong(chan);\n-    error!(\"Received pong\");\n+    println!(\"Received pong\");\n }\n \n fn server(chan: pingpong::server::ping) {\n     let (chan, _data) = pingpong::server::do_ping(chan);\n-    error!(\"Received ping\");\n+    println!(\"Received ping\");\n     let _chan = pingpong::server::do_pong(chan);\n-    error!(\"Sent pong\");\n+    println!(\"Sent pong\");\n }\n \n pub fn main() {"}, {"sha": "fccd9f3da0b9ec208bb5fa2c4600269f46364381", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,7 +18,7 @@ extern crate collections;\n use collections::HashMap;\n \n fn add_interfaces(managed_ip: ~str, device: HashMap<~str, int>)  {\n-     error!(\"{}, {:?}\", managed_ip, device.get(&~\"interfaces\"));\n+     println!(\"{}, {:?}\", managed_ip, device.get(&~\"interfaces\"));\n }\n \n pub fn main() {}"}, {"sha": "ca48f3ffd50d17893020906ef558ef209116dfec", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -29,7 +29,7 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n             (*s).clone()\n         }\n         option::Some(value) => {\n-            error!(\"{} was expected to be a string but is a {:?}\", key, value);\n+            println!(\"{} was expected to be a string but is a {:?}\", key, value);\n             default\n         }\n         option::None => {\n@@ -48,7 +48,7 @@ fn add_interface(_store: int, managed_ip: ~str, data: json::Json) -> (~str, obje\n             (label, bool_value(false))\n         }\n         _ => {\n-            error!(\"Expected dict for {} interfaces but found {:?}\", managed_ip, data);\n+            println!(\"Expected dict for {} interfaces but found {:?}\", managed_ip, data);\n             (~\"gnos:missing-interface\", bool_value(true))\n         }\n     }\n@@ -67,7 +67,7 @@ fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, json::Json\n         }\n         _ =>\n         {\n-            error!(\"Expected list for {} interfaces but found {:?}\", managed_ip,\n+            println!(\"Expected list for {} interfaces but found {:?}\", managed_ip,\n                    device.get(&~\"interfaces\"));\n             ~[]\n         }"}, {"sha": "0fa93f37840a18240910e8be8c9427cd52a39da8", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -54,7 +54,7 @@ fn square_from_char(c: char) -> square {\n       '.'  => { earth }\n       ' '  => { empty }\n       _ => {\n-        error!(\"invalid square: {:?}\", c);\n+        println!(\"invalid square: {:?}\", c);\n         fail!()\n       }\n     }"}, {"sha": "aeef29acd0eafde0268a26967598504111bcd89c", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -29,6 +29,6 @@ pub fn main() {\n     //  x.f();\n     // y.f();\n     // (*z).f();\n-    error!(\"ok so far...\");\n+    println!(\"ok so far...\");\n     z.f(); //segfault\n }"}, {"sha": "dc22ebce804e643d6fea7c1482c61dadb5acb820", "filename": "src/test/run-pass/issue-3109.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3109.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    error!(\"{:?}\", (\"hi there!\", \"you\"));\n+    println!(\"{:?}\", (\"hi there!\", \"you\"));\n }"}, {"sha": "424f4648d8e58e0d9e41eb2bb55b28230fc3f393", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -23,7 +23,7 @@ fn foo(name: ~str, samples_chan: Sender<Msg>) {\n         let mut samples_chan = samples_chan;\n         let callback: SamplesFn = proc(buffer) {\n             for i in range(0u, buffer.len()) {\n-                error!(\"{}: {}\", i, buffer[i])\n+                println!(\"{}: {}\", i, buffer[i])\n             }\n         };\n         samples_chan.send(GetSamples(name.clone(), callback));"}, {"sha": "8722376ab59e917e15dd4a113c7e938127671704", "filename": "src/test/run-pass/issue-4120.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-4120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-4120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4120.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,5 +17,5 @@ pub fn main()\n     unsafe {\n         libc::exit(0);\n     }\n-    error!(\"ack\");\n+    println!(\"ack\");\n }"}, {"sha": "99d943a2f6bdcfc693813101babded1631902b64", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,5 +17,5 @@ pub fn main() {\n     let a = A { x: 0 };\n \n     let A { x: ref x } = a;\n-    info!(\"{:?}\", x)\n+    println!(\"{:?}\", x)\n }"}, {"sha": "f51221c419ef070a86e6049adf13323afd1ea8f2", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n \n     match a {\n         A { x : ref x } => {\n-            info!(\"{:?}\", x)\n+            println!(\"{:?}\", x)\n         }\n     }\n }"}, {"sha": "538699512a3afe01fd0c3d4750e14bffe8d168c7", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n     let sa = A { a: 100 };\n     let sb = B { b: 200, pa: &sa };\n \n-    debug!(\"sa is {:?}\", sa);\n-    debug!(\"sb is {:?}\", sb);\n-    debug!(\"sb.pa is {:?}\", sb.get_pa());\n+    println!(\"sa is {:?}\", sa);\n+    println!(\"sb is {:?}\", sb);\n+    println!(\"sb.pa is {:?}\", sb.get_pa());\n }"}, {"sha": "b8d56f761b8df2e05ab2602e03d60b3b8ee7ab47", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,7 +10,7 @@\n \n fn test_stack_assign() {\n     let s: ~str = ~\"a\";\n-    info!(\"{}\", s.clone());\n+    println!(\"{}\", s.clone());\n     let t: ~str = ~\"a\";\n     assert!(s == t);\n     let u: ~str = ~\"b\";\n@@ -27,7 +27,7 @@ fn test_heap_assign() {\n     assert!((s != u));\n }\n \n-fn test_heap_log() { let s = ~\"a big ol' string\"; info!(\"{}\", s); }\n+fn test_heap_log() { let s = ~\"a big ol' string\"; println!(\"{}\", s); }\n \n fn test_stack_add() {\n     assert_eq!(~\"a\" + \"b\", ~\"ab\");\n@@ -49,7 +49,7 @@ fn test_append() {\n \n     let mut s = ~\"a\";\n     s.push_str(\"b\");\n-    info!(\"{}\", s.clone());\n+    println!(\"{}\", s.clone());\n     assert_eq!(s, ~\"ab\");\n \n     let mut s = ~\"c\";"}, {"sha": "794c4f4016e62729770e8674a292c4fe5c20499c", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ fn range_(a: int, b: int, it: |int|) {\n pub fn main() {\n     let mut sum: int = 0;\n     range_(0, 100, |x| sum += x );\n-    info!(\"{}\", sum);\n+    println!(\"{}\", sum);\n }"}, {"sha": "a664daeb7f8cb0748b25c4577569edd605dab3ab", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,7 +15,7 @@ struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let mut e = Refs{refs: ~[], n: 0};\n-    let _f: || = || error!(\"{}\", e.n);\n+    let _f: || = || println!(\"{}\", e.n);\n     let x: &[int] = e.refs;\n     assert_eq!(x.len(), 0);\n }"}, {"sha": "f0149c811f0d87f95065e15f864a5c7dc8c3d35d", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     fn invoke(f: ||) { f(); }\n     let k = ~22;\n     let _u = A {a: k.clone()};\n-    invoke(|| error!(\"{:?}\", k.clone()) )\n+    invoke(|| println!(\"{:?}\", k.clone()) )\n }"}, {"sha": "aa303aa3b817058014720d9f8e090fb588eaf32b", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert!((x));\n     let mut y: int = 10;\n-    info!(\"{:?}\", x || incr(&mut y));\n+    println!(\"{:?}\", x || incr(&mut y));\n     assert_eq!(y, 10);\n     if true && x { assert!((true)); } else { assert!((false)); }\n }"}, {"sha": "60f7689ecfa638b536111516e8ae9972d7ff1567", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn foo(x: int) { info!(\"{}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n pub fn main() { let mut x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "2e788737e4d71eb067ceff0ec4de17faaad304f1", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,8 +11,8 @@\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let mut y = 0;\n-    for i in x.iter() { info!(\"{:?}\", *i); y += *i; }\n-    info!(\"{:?}\", y);\n+    for i in x.iter() { println!(\"{:?}\", *i); y += *i; }\n+    println!(\"{:?}\", y);\n     assert_eq!(y, 6);\n     let s = ~\"hello there\";\n     let mut i: int = 0;\n@@ -25,8 +25,8 @@ pub fn main() {\n         // ...\n \n         i += 1;\n-        info!(\"{:?}\", i);\n-        info!(\"{:?}\", c);\n+        println!(\"{:?}\", i);\n+        println!(\"{:?}\", c);\n     }\n     assert_eq!(i, 11);\n }"}, {"sha": "0dba1830cbd2eaf2098363bf5642535969508b22", "filename": "src/test/run-pass/liveness-loop-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,7 +14,7 @@ fn test() {\n         v = 3;\n         break;\n     }\n-    info!(\"{}\", v);\n+    println!(\"{}\", v);\n }\n \n pub fn main() {"}, {"sha": "01eabad1596a95d7aba92affda999bb1dba4965b", "filename": "src/test/run-pass/log-err-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-err-phi.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { if false { error!(\"{}\", ~\"foo\" + \"bar\"); } }\n+pub fn main() { if false { println!(\"{}\", ~\"foo\" + \"bar\"); } }"}, {"sha": "b4a673284811a10c84cb5836a2b95a5bcd631d6e", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,8 +13,8 @@ enum Numbers {\n }\n \n pub fn main() {\n-    info!(\"{}\", 1);\n-    info!(\"{}\", 2.0);\n-    warn!(\"{:?}\", Three);\n-    error!(\"{:?}\", ~[4]);\n+    println!(\"{}\", 1);\n+    println!(\"{}\", 2.0);\n+    println!(\"{:?}\", Three);\n+    println!(\"{:?}\", ~[4]);\n }"}, {"sha": "b3a77aa96752f1f0de6a7dae3555d0cf3fc58321", "filename": "src/test/run-pass/logging-enabled-debug.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,10 +12,12 @@\n // compile-flags:--cfg ndebug\n // exec-env:RUST_LOG=logging-enabled-debug=debug\n \n-use std::logging;\n+#[feature(phase)];\n+#[phase(syntax, link)]\n+extern crate log;\n \n pub fn main() {\n-    if log_enabled!(logging::DEBUG) {\n+    if log_enabled!(log::DEBUG) {\n         fail!(\"what?! debugging?\");\n     }\n }"}, {"sha": "587e0b9d4c5fa92b1d69f369429c4854a649e94b", "filename": "src/test/run-pass/logging-enabled.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flogging-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flogging-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,13 +11,15 @@\n // ignore-fast\n // exec-env:RUST_LOG=logging-enabled=info\n \n-use std::logging;\n+#[feature(phase)];\n+#[phase(syntax, link)]\n+extern crate log;\n \n pub fn main() {\n-    if log_enabled!(logging::DEBUG) {\n+    if log_enabled!(log::DEBUG) {\n         fail!(\"what?! debugging?\");\n     }\n-    if !log_enabled!(logging::INFO) {\n+    if !log_enabled!(log::INFO) {\n         fail!(\"what?! no info?\");\n     }\n }"}, {"sha": "d582b770602369b1a38b5c850655118a35abea94", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n     let (tx, rx) = channel();\n     spawn(proc() {\n         let mut f = Foo(Cell::new(0));\n-        debug!(\"{}\", f);\n+        println!(\"{}\", f);\n         let Foo(ref mut f) = f;\n         assert!(f.get() == 1);\n         tx.send(());"}, {"sha": "b9b16d10b8c3c26d21ff95e96cab4241167dc9fd", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n   let mut i = 0u;\n   loop {\n-    error!(\"a\");\n+    println!(\"a\");\n     i += 1u;\n     if i == 10u {\n       break;\n@@ -23,7 +23,7 @@ pub fn main() {\n     if i == 21u {\n         break;\n     }\n-    error!(\"b\");\n+    println!(\"b\");\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n@@ -33,7 +33,7 @@ pub fn main() {\n   }\n   assert!(!is_even);\n   loop {\n-    error!(\"c\");\n+    println!(\"c\");\n     if i == 22u {\n         break;\n     }"}, {"sha": "fe1ef4817c6a9caa3f2580dfc58c843968a39251", "filename": "src/test/run-pass/macro-with-braces-in-expr-position.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -20,9 +20,9 @@ macro_rules! spawn {\n \n pub fn main() {\n     spawn! {\n-        info!(\"stmt\");\n+        println!(\"stmt\");\n     };\n     let _ = spawn! {\n-        info!(\"expr\");\n+        println!(\"expr\");\n     };\n }"}, {"sha": "7e55e227cc07b660dadcf1e0896c90687cae503d", "filename": "src/test/run-pass/match-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-bot.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,5 +12,5 @@\n pub fn main() {\n     let i: int =\n         match Some::<int>(3) { None::<int> => { fail!() } Some::<int>(_) => { 5 } };\n-    info!(\"{}\", i);\n+    println!(\"{}\", i);\n }"}, {"sha": "47b2ddd5022de7a87574ed2a0334b847b88d8161", "filename": "src/test/run-pass/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-join.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -25,4 +25,4 @@ fn foo<T>(y: Option<T>) {\n     return;\n }\n \n-pub fn main() { info!(\"hello\"); foo::<int>(Some::<int>(5)); }\n+pub fn main() { println!(\"hello\"); foo::<int>(Some::<int>(5)); }"}, {"sha": "e00ee11829547c0b8e4eb0611d8402e0a3fb0dad", "filename": "src/test/run-pass/match-pattern-drop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -13,20 +13,20 @@\n enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n-    info!(\"{:?}\", ::std::managed::refcount(s));\n+    println!(\"{:?}\", ::std::managed::refcount(s));\n     let count = ::std::managed::refcount(s);\n     let x: t = make_t(s); // ref up\n     assert_eq!(::std::managed::refcount(s), count + 1u);\n-    info!(\"{:?}\", ::std::managed::refcount(s));\n+    println!(\"{:?}\", ::std::managed::refcount(s));\n \n     match x {\n       make_t(y) => {\n-        info!(\"{:?}\", y); // ref up then down\n+        println!(\"{:?}\", y); // ref up then down\n \n       }\n-      _ => { info!(\"?\"); fail!(); }\n+      _ => { println!(\"?\"); fail!(); }\n     }\n-    info!(\"{:?}\", ::std::managed::refcount(s));\n+    println!(\"{:?}\", ::std::managed::refcount(s));\n     assert_eq!(::std::managed::refcount(s), count + 1u);\n     let _ = ::std::managed::refcount(s); // don't get bitten by last-use.\n }\n@@ -38,7 +38,7 @@ pub fn main() {\n \n     foo(s); // ref up then down\n \n-    info!(\"{}\", ::std::managed::refcount(s));\n+    println!(\"{}\", ::std::managed::refcount(s));\n     let count2 = ::std::managed::refcount(s);\n     assert_eq!(count, count2);\n }"}, {"sha": "9d59b197d3ab755ccf70beaaa32cf8090a70eaed", "filename": "src/test/run-pass/match-pattern-lit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,8 +12,8 @@\n \n fn altlit(f: int) -> int {\n     match f {\n-      10 => { info!(\"case 10\"); return 20; }\n-      11 => { info!(\"case 11\"); return 22; }\n+      10 => { println!(\"case 10\"); return 20; }\n+      11 => { println!(\"case 11\"); return 22; }\n       _  => fail!(\"the impossible happened\")\n     }\n }"}, {"sha": "e5be0e52b94976fb639955d3fdbed934b0d77a1a", "filename": "src/test/run-pass/match-pattern-no-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -12,8 +12,8 @@ enum maybe<T> { nothing, just(T), }\n \n fn foo(x: maybe<int>) {\n     match x {\n-        nothing => { error!(\"A\"); }\n-        just(_a) => { error!(\"B\"); }\n+        nothing => { println!(\"A\"); }\n+        just(_a) => { println!(\"B\"); }\n     }\n }\n "}, {"sha": "9fc3a7acf7179b04dd0bca83980e00eaf3c6554c", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     match ~100 {\n       ~x => {\n-        info!(\"{:?}\", x);\n+        println!(\"{:?}\", x);\n         assert_eq!(x, 100);\n       }\n     }"}, {"sha": "2109f7ef1eafc3f0fcd4b4c2cf9dc73291c91163", "filename": "src/test/run-pass/match-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n         Some(num) => num as u32\n     };\n     assert_eq!(f, 1234u32);\n-    error!(\"{}\", f)\n+    println!(\"{}\", f)\n }"}, {"sha": "e01128554c72613582438900a0b1fc47aa26599a", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -18,6 +18,6 @@ pub fn main() {\n     grow(&mut v);\n     grow(&mut v);\n     let len = v.len();\n-    info!(\"{}\", len);\n+    println!(\"{}\", len);\n     assert_eq!(len, 3 as uint);\n }"}, {"sha": "5f86cde261c5ce484a5f9527d56fcf66883049ab", "filename": "src/test/run-pass/nested-matchs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-matchs.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,9 +16,9 @@ fn foo() {\n       Some::<int>(_x) => {\n         let mut bar;\n         match None::<int> { None::<int> => { bar = 5; } _ => { baz(); } }\n-        info!(\"{:?}\", bar);\n+        println!(\"{:?}\", bar);\n       }\n-      None::<int> => { info!(\"hello\"); }\n+      None::<int> => { println!(\"hello\"); }\n     }\n }\n "}, {"sha": "bc03b0d27ca8dcc201bdb3371319d6de756a5aee", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -16,8 +16,8 @@ enum t { foo(int, uint), bar(int, Option<int>), }\n \n fn nested(o: t) {\n     match o {\n-        bar(_i, Some::<int>(_)) => { error!(\"wrong pattern matched\"); fail!(); }\n-        _ => { error!(\"succeeded\"); }\n+        bar(_i, Some::<int>(_)) => { println!(\"wrong pattern matched\"); fail!(); }\n+        _ => { println!(\"succeeded\"); }\n     }\n }\n "}, {"sha": "3f00cf7d18400e6b783a98b54b9e29972571cd27", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -14,15 +14,15 @@\n pub fn main() {\n     let mut x: int = 1;\n     x *= 2;\n-    info!(\"{}\", x);\n+    println!(\"{}\", x);\n     assert_eq!(x, 2);\n     x += 3;\n-    info!(\"{}\", x);\n+    println!(\"{}\", x);\n     assert_eq!(x, 5);\n     x *= x;\n-    info!(\"{}\", x);\n+    println!(\"{}\", x);\n     assert_eq!(x, 25);\n     x /= 5;\n-    info!(\"{}\", x);\n+    println!(\"{}\", x);\n     assert_eq!(x, 5);\n }"}, {"sha": "9a2e83ef2d07c129d8883123ccd5f31da8743a60", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;\n-        info!(\"{:?}\", b);\n+        println!(\"{:?}\", b);\n     }\n }"}, {"sha": "d9669812d2ad37711eb4388981fd2fdf54b3d8f3", "filename": "src/test/run-pass/paren-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fparen-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fparen-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparen-free.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n     let x = true;\n     if x { let mut i = 10; while i > 0 { i -= 1; } }\n-    match x { true => { info!(\"right\"); } false => { info!(\"wrong\"); } }\n+    match x { true => { println!(\"right\"); } false => { println!(\"wrong\"); } }\n }"}, {"sha": "45f19a30e86a0cb8b788ec40a92ed2459a0a17fa", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,6 +10,6 @@\n \n #[allow(unreachable_code)];\n \n-fn dont_call_me() { fail!(); info!(\"{}\", 1); }\n+fn dont_call_me() { fail!(); println!(\"{}\", 1); }\n \n pub fn main() { }"}, {"sha": "fed766b23d96c6650d772a652fe0e50e040c944f", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -10,8 +10,8 @@\n \n #[feature(managed_boxes)];\n \n-fn magic(x: A) { info!(\"{:?}\", x); }\n-fn magic2(x: @int) { info!(\"{:?}\", x); }\n+fn magic(x: A) { println!(\"{:?}\", x); }\n+fn magic2(x: @int) { println!(\"{:?}\", x); }\n \n struct A { a: @int }\n "}, {"sha": "53d2a47863b9d226b6d65223f64edd0ca638e50f", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -15,24 +15,24 @@\n use std::comm;\n \n fn starve_main(alive: Receiver<int>) {\n-    info!(\"signalling main\");\n+    println!(\"signalling main\");\n     alive.recv();\n-    info!(\"starving main\");\n+    println!(\"starving main\");\n     let mut i: int = 0;\n     loop { i += 1; }\n }\n \n pub fn main() {\n     let (port, chan) = stream();\n \n-    info!(\"main started\");\n+    println!(\"main started\");\n     spawn(proc() {\n         starve_main(port);\n     });\n     let mut i: int = 0;\n-    info!(\"main waiting for alive signal\");\n+    println!(\"main waiting for alive signal\");\n     chan.send(i);\n-    info!(\"main got alive signal\");\n-    while i < 50 { info!(\"main iterated\"); i += 1; }\n-    info!(\"main completed\");\n+    println!(\"main got alive signal\");\n+    while i < 50 { println!(\"main iterated\"); i += 1; }\n+    println!(\"main completed\");\n }"}, {"sha": "3bceefb831851ce1a0535cbc35470e0792772a33", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -11,5 +11,5 @@\n \n fn something(f: ||) { f(); }\n pub fn main() {\n-    something(|| error!(\"hi!\") );\n+    something(|| println!(\"hi!\") );\n }"}, {"sha": "26e6f568ce20c8964046095c68061522e9830df3", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -30,16 +30,16 @@ pub fn main() {\n \n     let x = @6;\n     let y = x.get();\n-    info!(\"y={}\", y);\n+    println!(\"y={}\", y);\n     assert_eq!(y, 6);\n \n     let x = ~6;\n     let y = x.get();\n-    info!(\"y={}\", y);\n+    println!(\"y={}\", y);\n     assert_eq!(y, 6);\n \n     let x = &6;\n     let y = x.get();\n-    info!(\"y={}\", y);\n+    println!(\"y={}\", y);\n     assert_eq!(y, 6);\n }"}, {"sha": "b958588622fb465ac9fac5903b67c1e60f775579", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "patch": "@@ -24,16 +24,16 @@ fn call_sum(x: &[int]) -> int { x.sum_() }\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let y = call_sum(x);\n-    info!(\"y=={}\", y);\n+    println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n     let x = ~[1, 2, 3];\n     let y = x.sum_();\n-    info!(\"y=={}\", y);\n+    println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n     let x = ~[1, 2, 3];\n     let y = x.sum_();\n-    info!(\"y=={}\", y);\n+    println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n }"}]}