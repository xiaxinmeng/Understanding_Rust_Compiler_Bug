{"sha": "d442f7756161eb36531772ed905680385f87f1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDJmNzc1NjE2MWViMzY1MzE3NzJlZDkwNTY4MDM4NWY4N2YxYTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-12T04:01:28Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:25Z"}, "message": "Rebase fixes.\n\nI've totally mangled the history with these rebases; sorry, future programmer!", "tree": {"sha": "8c9ff7113c02be1e77991d3de25f656e6206ef23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9ff7113c02be1e77991d3de25f656e6206ef23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d442f7756161eb36531772ed905680385f87f1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d442f7756161eb36531772ed905680385f87f1a4", "html_url": "https://github.com/rust-lang/rust/commit/d442f7756161eb36531772ed905680385f87f1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d442f7756161eb36531772ed905680385f87f1a4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7e5ed6601186b26a9e9f142cc07e18cd318d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7e5ed6601186b26a9e9f142cc07e18cd318d59", "html_url": "https://github.com/rust-lang/rust/commit/4f7e5ed6601186b26a9e9f142cc07e18cd318d59"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "9ce344586fd99a595e1a309cab064e8dce55f694", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -1598,15 +1598,15 @@ impl LintPass for MissingCopyImplementations {\n                 }\n                 ty::mk_struct(cx.tcx,\n                               ast_util::local_def(item.id),\n-                              Substs::empty())\n+                              cx.tcx.mk_substs(Substs::empty()))\n             }\n             ast::ItemEnum(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {\n                     return\n                 }\n                 ty::mk_enum(cx.tcx,\n                             ast_util::local_def(item.id),\n-                            Substs::empty())\n+                            cx.tcx.mk_substs(Substs::empty()))\n             }\n             _ => return,\n         };"}, {"sha": "ce02f4433181affe7b15fd83aa9da3563111bbe9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -803,14 +803,13 @@ bitflags! {\n     }\n }\n \n-impl Copy for TypeFlags {}\n-\n macro_rules! sty_debug_print {\n     ($ctxt: expr, $($variant: ident),*) => {{\n         // curious inner module to allow variant names to be used as\n         // variable names.\n         mod inner {\n             use middle::ty;\n+            #[deriving(Copy)]\n             struct DebugStat {\n                 total: uint,\n                 region_infer: uint,\n@@ -5704,7 +5703,7 @@ pub fn object_region_bounds<'tcx>(tcx: &ctxt<'tcx>,\n \n     let opt_trait_ref = opt_principal.map_or(Vec::new(), |principal| {\n         let substs = principal.substs().with_self_ty(open_ty);\n-        vec!(Rc::new(ty::Binder(ty::TraitRef::new(principal.def_id(), substs))))\n+        vec!(Rc::new(ty::Binder(ty::TraitRef::new(principal.def_id(), tcx.mk_substs(substs)))))\n     });\n \n     let param_bounds = ty::ParamBounds {\n@@ -6063,7 +6062,7 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                 }\n                 ty_rptr(r, m) => {\n                     byte!(13);\n-                    region(state, r);\n+                    region(state, *r);\n                     mt(state, m);\n                 }\n                 ty_bare_fn(opt_def_id, ref b) => {\n@@ -6123,7 +6122,7 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                 ty_unboxed_closure(d, r, _) => {\n                     byte!(24);\n                     did(state, d);\n-                    region(state, r);\n+                    region(state, *r);\n                 }\n             }\n             true\n@@ -6695,15 +6694,15 @@ pub fn can_type_implement_copy<'tcx>(tcx: &ctxt<'tcx>,\n                                      param_env: &ParameterEnvironment<'tcx>)\n                                      -> Result<(),CopyImplementationError> {\n     match self_type.sty {\n-        ty::ty_struct(struct_did, ref substs) => {\n+        ty::ty_struct(struct_did, substs) => {\n             let fields = ty::struct_fields(tcx, struct_did, substs);\n             for field in fields.iter() {\n                 if type_moves_by_default(tcx, field.mt.ty, param_env) {\n                     return Err(FieldDoesNotImplementCopy(field.name))\n                 }\n             }\n         }\n-        ty::ty_enum(enum_did, ref substs) => {\n+        ty::ty_enum(enum_did, substs) => {\n             let enum_variants = ty::enum_variants(tcx, enum_did);\n             for variant in enum_variants.iter() {\n                 for variant_arg_type in variant.args.iter() {"}, {"sha": "62092a67cbeb58959c0efa5a894a9d2b46d96368", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -759,7 +759,7 @@ impl<'tcx> Repr<'tcx> for ty::TraitRef<'tcx> {\n         let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n         format!(\"TraitRef({}, {})\",\n                 self.substs.self_ty().repr(tcx),\n-                parameterized(tcx, base.as_slice(), &self.substs, &trait_def.generics, self.def_id))\n+                parameterized(tcx, base.as_slice(), self.substs, &trait_def.generics, self.def_id))\n     }\n }\n "}, {"sha": "0ac8d6ba734d0137960513e7da705cedd5608b37", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -83,15 +83,15 @@ pub fn compile_input(sess: Session,\n         phase_save_analysis(&analysis.ty_cx.sess, analysis.ty_cx.map.krate(), &analysis, outdir);\n \n         if log_enabled!(::log::INFO) {\n-            println!(\"Pre-trans\")\n+            println!(\"Pre-trans\");\n             analysis.ty_cx.print_debug_stats();\n         }\n \n         if stop_after_phase_3(&analysis.ty_cx.sess) { return; }\n         let (tcx, trans) = phase_4_translate_to_llvm(analysis);\n \n         if log_enabled!(::log::INFO) {\n-            println!(\"Post-trans\")\n+            println!(\"Post-trans\");\n             tcx.print_debug_stats();\n         }\n "}, {"sha": "e3e0fffcd866013b055da141437ea64fcc705519", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -350,7 +350,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                               expr.id,\n                                               datum_ty,\n                                               |t| ty::mk_rptr(tcx,\n-                                                              ty::ReStatic,\n+                                                              tcx.mk_region(ty::ReStatic),\n                                                               ty::mt{\n                                                                   ty: t,\n                                                                   mutbl: ast::MutImmutable"}, {"sha": "793c5f5b4a058b0af0543e6d06688df4fdf76ad6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -1419,7 +1419,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     index += 1;\n                     Some(ty::mk_param(ccx.tcx,\n                                       subst::AssocSpace,\n-                                      index as u32 - 1,\n+                                      index - 1,\n                                       local_def(trait_item.ty_param.id))).into_iter()\n                 }\n                 ast::RequiredMethod(_) | ast::ProvidedMethod(_) => {"}, {"sha": "a2e2abab03e55fc933445d9973b56ddc1c064a03", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442f7756161eb36531772ed905680385f87f1a4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d442f7756161eb36531772ed905680385f87f1a4", "patch": "@@ -3746,9 +3746,9 @@ impl<'a> Parser<'a> {\n             if id.name == token::special_idents::invalid.name {\n                 P(spanned(lo,\n                           hi,\n-                          StmtMac(spanned(lo,\n+                          StmtMac(P(spanned(lo,\n                                           hi,\n-                                          MacInvocTT(pth, tts, EMPTY_CTXT)),\n+                                          MacInvocTT(pth, tts, EMPTY_CTXT))),\n                                   style)))\n             } else {\n                 // if it has a special ident, it's definitely an item\n@@ -3911,7 +3911,7 @@ impl<'a> Parser<'a> {\n                                 _ => {\n                                     let e = self.mk_mac_expr(span.lo,\n                                                              span.hi,\n-                                                             macro.node);\n+                                                             macro.and_then(|m| m.node));\n                                     let e =\n                                         self.parse_dot_or_call_expr_with(e);\n                                     self.handle_expression_like_statement("}]}