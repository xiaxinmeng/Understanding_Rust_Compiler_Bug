{"sha": "0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "node_id": "C_kwDOAAsO6NoAKDBmMjRlMTFlZjVjZDBhODM2M2FlMTc5MWNlZTNmOTZkZTNkMDg0NWM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T00:38:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-26T03:18:36Z"}, "message": "ICE in new solver if we see an inference variable", "tree": {"sha": "ec2da8e459c20c1e23f51c87761dd8149961322f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2da8e459c20c1e23f51c87761dd8149961322f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "html_url": "https://github.com/rust-lang/rust/commit/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a17174ee639f8e0a3cee307d5685d38beb474ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a17174ee639f8e0a3cee307d5685d38beb474ba", "html_url": "https://github.com/rust-lang/rust/commit/2a17174ee639f8e0a3cee307d5685d38beb474ba"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "7e4fc7191351f53587c3914494e402b75c46d7b6", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "patch": "@@ -321,9 +321,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Tuple(_)\n             | ty::Param(_)\n             | ty::Placeholder(..)\n-            | ty::Infer(_)\n+            | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Error(_) => return,\n-            ty::Bound(..) => bug!(\"unexpected bound type: {goal:?}\"),\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n             ty::Alias(_, alias_ty) => alias_ty,\n         };\n \n@@ -371,9 +372,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Tuple(_)\n             | ty::Param(_)\n             | ty::Placeholder(..)\n-            | ty::Infer(_)\n+            | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Error(_) => return,\n-            ty::Bound(..) => bug!(\"unexpected bound type: {goal:?}\"),\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n             ty::Dynamic(bounds, ..) => bounds,\n         };\n "}, {"sha": "b321adcb646bc17e8ab8322569a7f781d5669ead", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "patch": "@@ -427,7 +427,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         .subst(tcx, &[ty::GenericArg::from(goal.predicate.self_ty())])\n                 }\n \n-                ty::Infer(ty::TyVar(..)) | ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n+                ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n                     let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n                         LangItem::Sized,\n@@ -470,7 +470,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                     }\n                 },\n \n-                ty::Infer(ty::FreshTy(..) | ty::FreshIntTy(..) | ty::FreshFloatTy(..))\n+                ty::Infer(\n+                    ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_),\n+                )\n                 | ty::Bound(..) => bug!(\n                     \"unexpected self ty `{:?}` when normalizing `<T as Pointee>::Metadata`\",\n                     goal.predicate.self_ty()"}, {"sha": "676c0eb52647da1929611da313011b195cfabd37", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "patch": "@@ -24,15 +24,16 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         | ty::Never\n         | ty::Char => Ok(vec![]),\n \n-        ty::Placeholder(..)\n-        | ty::Dynamic(..)\n+        ty::Dynamic(..)\n         | ty::Param(..)\n         | ty::Foreign(..)\n         | ty::Alias(ty::Projection, ..)\n-        | ty::Bound(..)\n-        | ty::Infer(ty::TyVar(_)) => Err(NoSolution),\n+        | ty::Placeholder(..) => Err(NoSolution),\n \n-        ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{ty}`\")\n+        }\n \n         ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {\n             Ok(vec![element_ty])\n@@ -99,11 +100,12 @@ pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n         | ty::Foreign(..)\n         | ty::Alias(..)\n         | ty::Param(_)\n-        | ty::Infer(ty::TyVar(_)) => Err(NoSolution),\n+        | ty::Placeholder(..) => Err(NoSolution),\n \n-        ty::Placeholder(..)\n-        | ty::Bound(..)\n-        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{ty}`\")\n+        }\n \n         ty::Tuple(tys) => Ok(tys.to_vec()),\n \n@@ -148,11 +150,12 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n         | ty::Adt(_, _)\n         | ty::Alias(_, _)\n         | ty::Param(_)\n-        | ty::Infer(ty::TyVar(_)) => Err(NoSolution),\n+        | ty::Placeholder(..) => Err(NoSolution),\n \n-        ty::Placeholder(..)\n-        | ty::Bound(..)\n-        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{ty}`\")\n+        }\n \n         ty::Tuple(tys) => Ok(tys.to_vec()),\n \n@@ -215,9 +218,13 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         | ty::Tuple(_)\n         | ty::Alias(_, _)\n         | ty::Param(_)\n-        | ty::Placeholder(_)\n-        | ty::Bound(_, _)\n-        | ty::Infer(_)\n+        | ty::Placeholder(..)\n+        | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n         | ty::Error(_) => Err(NoSolution),\n+\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{self_ty}`\")\n+        }\n     }\n }"}]}