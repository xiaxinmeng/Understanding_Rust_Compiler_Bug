{"sha": "17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YzUyZDQ3ZTcwYWZmNGE2ZWUyOTBkZTU0NzUyMjhjZGIzY2MyYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T10:01:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T10:01:20Z"}, "message": "add tests for invalid float-to-int casts", "tree": {"sha": "3a3b9b0f842557afc787ad3a53479cae52ad46fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a3b9b0f842557afc787ad3a53479cae52ad46fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "html_url": "https://github.com/rust-lang/rust/commit/17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "html_url": "https://github.com/rust-lang/rust/commit/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2"}], "stats": {"total": 210, "additions": 210, "deletions": 0}, "files": [{"sha": "a56f4aefad3a7e5cdbbdfb2355c12b769874cc5a", "filename": "tests/compile-fail/intrinsics/float_to_int_32_inf1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, i32>(f32::INFINITY); } //~ ERROR: cannot be represented in target type `i32`\n+}"}, {"sha": "d18f75fcca8abdbf6d4a677547f7832c669a84f1", "filename": "tests/compile-fail/intrinsics/float_to_int_32_infneg1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY); } //~ ERROR: cannot be represented in target type `i32`\n+}"}, {"sha": "e1fe8c7cf2f7422ecba8d03502ea0e4fa475f58d", "filename": "tests/compile-fail/intrinsics/float_to_int_32_nan.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nan.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, u32>(f32::NAN); } //~ ERROR: cannot be represented in target type `u32`\n+}"}, {"sha": "38899045c92c0f9fe2d66932fc09958ae6113ad7", "filename": "tests/compile-fail/intrinsics/float_to_int_32_nanneg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, u32>(-f32::NAN); } //~ ERROR: cannot be represented in target type `u32`\n+}"}, {"sha": "f15cf9a9cd6433249e301cd45b935bf48d69328f", "filename": "tests/compile-fail/intrinsics/float_to_int_32_neg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_neg.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, u32>(-1.000000001f32); } //~ ERROR: cannot be represented in target type `u32`\n+}"}, {"sha": "ccbf917c8e89f7ddc106121c710f2774e0c7a7b2", "filename": "tests/compile-fail/intrinsics/float_to_int_32_too_big1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, i32>(2147483648.0f32); } //~ ERROR: cannot be represented in target type `i32`\n+}"}, {"sha": "6598fd36e038a3716f6843457b0fdb1bdaa208c6", "filename": "tests/compile-fail/intrinsics/float_to_int_32_too_big2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, u32>((u32::MAX-127) as f32); } //~ ERROR: cannot be represented in target type `u32`\n+}"}, {"sha": "89f09e1e3f18ab9ac082a88a387fb113a6cb2ad1", "filename": "tests/compile-fail/intrinsics/float_to_int_32_too_small1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f32, i32>(-2147483904.0f32); } //~ ERROR: cannot be represented in target type `i32`\n+}"}, {"sha": "e1a7b818d8539e14d36f42670a9d14bb312d09a6", "filename": "tests/compile-fail/intrinsics/float_to_int_64_inf1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, u128>(f64::INFINITY); } //~ ERROR: cannot be represented in target type `u128`\n+}"}, {"sha": "a1d757b1511e61b0ed6fef09867256f959492f2c", "filename": "tests/compile-fail/intrinsics/float_to_int_64_infneg1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY); } //~ ERROR: cannot be represented in target type `u128`\n+}"}, {"sha": "e48d19f1a6a86b0dbf03ef6bd09ad4e34b528ea7", "filename": "tests/compile-fail/intrinsics/float_to_int_64_infneg2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY); } //~ ERROR: cannot be represented in target type `i128`\n+}"}, {"sha": "03f378f5bcb7280e57c87f3bcd13bce1095836b2", "filename": "tests/compile-fail/intrinsics/float_to_int_64_nan.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_nan.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, u32>(f64::NAN); } //~ ERROR: cannot be represented in target type `u32`\n+}"}, {"sha": "d0b5a3e21cf9eb7778be9c58fa78eb2f8ca1f0f0", "filename": "tests/compile-fail/intrinsics/float_to_int_64_neg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_neg.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, u128>(-1.0000000000001f64); } //~ ERROR: cannot be represented in target type `u128`\n+}"}, {"sha": "f928f161872e2d46401e2841de24691a38ff3142", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i32>(2147483648.0f64); } //~ ERROR: cannot be represented in target type `i32`\n+}"}, {"sha": "feb24c362dda7275fab384d12336ef216383b8b9", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64); } //~ ERROR: cannot be represented in target type `i64`\n+}"}, {"sha": "cd491bfed7eb9d801c1ea15f66c22891878865b8", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64); } //~ ERROR: cannot be represented in target type `u64`\n+}"}, {"sha": "d5b24347b94194210b55db3aecac4a8abd7a95af", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, u128>(340282366920938463463374607431768211455.0f64); } //~ ERROR: cannot be represented in target type `u128`\n+}"}, {"sha": "9c31c690b4e8a4f8d66643800ccb86342c0c1558", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big5.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i128>(240282366920938463463374607431768211455.0f64); } //~ ERROR: cannot be represented in target type `i128`\n+}"}, {"sha": "08f2f9e3fd26c1a462ec0a7b9d36ecaa318d21e3", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_small1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i32>(-2147483649.0f64); } //~ ERROR: cannot be represented in target type `i32`\n+}"}, {"sha": "f7b205de5346c91784e482c1b8b88c43092b7115", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_small2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64); } //~ ERROR: cannot be represented in target type `i64`\n+}"}, {"sha": "779441f7448c8d844e028c9cd27375fae1a5c11f", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_small3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c52d47e70aff4a6ee290de5475228cdb3cc2a3/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs?ref=17c52d47e70aff4a6ee290de5475228cdb3cc2a3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+}\n+\n+fn main() {\n+    unsafe { float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431768211455.0f64); } //~ ERROR: cannot be represented in target type `i128`\n+}"}]}