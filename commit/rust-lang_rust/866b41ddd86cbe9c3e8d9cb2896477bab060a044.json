{"sha": "866b41ddd86cbe9c3e8d9cb2896477bab060a044", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NmI0MWRkZDg2Y2JlOWMzZThkOWNiMjg5NjQ3N2JhYjA2MGEwNDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-25T09:47:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-25T09:47:44Z"}, "message": "Merge #1733\n\n1733: Parse arbitrarily complex `box` patterns. r=matklad a=ecstatic-morse\n\nThis fully resolves the pattern part of #1412 by enabling the parsing of complex `box` patterns such as:\r\n\r\n```rust\r\nlet box Struct { box i, j: box Inner(box &x) } = todo!();\r\n```\r\n\r\nThis introduces a new `ast::BoxPat` (in the mold of `ast::RefPat`) that gets translated to `hir::Pat::Missing`.\n\nCo-authored-by: Dylan MacKenzie <ecstaticmorse@gmail.com>", "tree": {"sha": "2108601228076d62e833b732de52e182b8be4a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2108601228076d62e833b732de52e182b8be4a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/866b41ddd86cbe9c3e8d9cb2896477bab060a044", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdYllACRBK7hj4Ov3rIwAAdHIIAE5AocCCeS6lJQvbMhhPit7a\nL7TTmhNbW0nJbuhsAE+SCBbtoT6bJOP2FwUGNG59fIC6q0vDfZMzLcljdksIMDYR\nkraGO42j9X9bv3NceDbUB2W6kXxHxLDkS6i0QNsi6z3VWeTeQc7MSt2QsZJDSDXE\nzHdXpvBwrh2nVcAGc3xLxRmccHxD9ym19VRxRrDSlEP6O/Xw7E5NysAzOsMiCTDt\nHqMWp+PYNLZ6vtfYjw8tCwFBVgm/5UskNDw3bVbeBpPMbtblW6lZ8lOOV36ONwwZ\nRKPrF7D+gtbfynmpn9srTwqR2wRMWwG3gvDQUzs9nnr7pObSsjI2fpLHu4zzsR8=\n=e3kB\n-----END PGP SIGNATURE-----\n", "payload": "tree 2108601228076d62e833b732de52e182b8be4a0b\nparent fdece911fe8e2f3c22760ea22038a6d00cb70dfa\nparent c93903e9c7f64be2edcae0dfe62d8390514658b1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566726464 +0000\ncommitter GitHub <noreply@github.com> 1566726464 +0000\n\nMerge #1733\n\n1733: Parse arbitrarily complex `box` patterns. r=matklad a=ecstatic-morse\n\nThis fully resolves the pattern part of #1412 by enabling the parsing of complex `box` patterns such as:\r\n\r\n```rust\r\nlet box Struct { box i, j: box Inner(box &x) } = todo!();\r\n```\r\n\r\nThis introduces a new `ast::BoxPat` (in the mold of `ast::RefPat`) that gets translated to `hir::Pat::Missing`.\n\nCo-authored-by: Dylan MacKenzie <ecstaticmorse@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/866b41ddd86cbe9c3e8d9cb2896477bab060a044", "html_url": "https://github.com/rust-lang/rust/commit/866b41ddd86cbe9c3e8d9cb2896477bab060a044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/866b41ddd86cbe9c3e8d9cb2896477bab060a044/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdece911fe8e2f3c22760ea22038a6d00cb70dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdece911fe8e2f3c22760ea22038a6d00cb70dfa", "html_url": "https://github.com/rust-lang/rust/commit/fdece911fe8e2f3c22760ea22038a6d00cb70dfa"}, {"sha": "c93903e9c7f64be2edcae0dfe62d8390514658b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93903e9c7f64be2edcae0dfe62d8390514658b1", "html_url": "https://github.com/rust-lang/rust/commit/c93903e9c7f64be2edcae0dfe62d8390514658b1"}], "stats": {"total": 413, "additions": 305, "deletions": 108}, "files": [{"sha": "7cdc7555c551e456654f5639b7f5dff1c750d10d", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -1020,6 +1020,7 @@ where\n             }\n \n             // FIXME: implement\n+            ast::Pat::BoxPat(_) => Pat::Missing,\n             ast::Pat::LiteralPat(_) => Pat::Missing,\n             ast::Pat::SlicePat(_) | ast::Pat::RangePat(_) => Pat::Missing,\n         };"}, {"sha": "bc942ae010286ffc388fad8608189ac49f6fa3e1", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -414,8 +414,6 @@ pub(crate) fn match_arm_list(p: &mut Parser) {\n //         X | Y if Z => (),\n //         | X | Y if Z => (),\n //         | X => (),\n-//         box X => (),\n-//         Some(box X) => (),\n //     };\n // }\n fn match_arm(p: &mut Parser) -> BlockLike {"}, {"sha": "eae70ab85fbfbecfb76ec077281d5125b4aae249", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -56,37 +56,33 @@ const PAT_RECOVERY_SET: TokenSet =\n     token_set![LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW, R_PAREN, COMMA];\n \n fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n-    let la0 = p.nth(0);\n-    let la1 = p.nth(1);\n-    if la0 == T![ref]\n-        || la0 == T![mut]\n-        || la0 == T![box]\n-        || (la0 == IDENT && !(la1 == T![::] || la1 == T!['('] || la1 == T!['{'] || la1 == T![!]))\n-    {\n-        return Some(bind_pat(p, true));\n-    }\n-    if paths::is_use_path_start(p) {\n-        return Some(path_pat(p));\n-    }\n+    // Checks the token after an IDENT to see if a pattern is a path (Struct { .. }) or macro\n+    // (T![x]).\n+    let is_path_or_macro_pat =\n+        |la1| la1 == T![::] || la1 == T!['('] || la1 == T!['{'] || la1 == T![!];\n \n-    if is_literal_pat_start(p) {\n-        return Some(literal_pat(p));\n-    }\n+    let m = match p.nth(0) {\n+        T![box] => box_pat(p),\n+        T![ref] | T![mut] | IDENT if !is_path_or_macro_pat(p.nth(1)) => bind_pat(p, true),\n+\n+        _ if paths::is_use_path_start(p) => path_pat(p),\n+        _ if is_literal_pat_start(p) => literal_pat(p),\n \n-    let m = match la0 {\n         T![_] => placeholder_pat(p),\n         T![&] => ref_pat(p),\n         T!['('] => tuple_pat(p),\n         T!['['] => slice_pat(p),\n+\n         _ => {\n             p.err_recover(\"expected pattern\", recovery_set);\n             return None;\n         }\n     };\n+\n     Some(m)\n }\n \n-fn is_literal_pat_start(p: &mut Parser) -> bool {\n+fn is_literal_pat_start(p: &Parser) -> bool {\n     p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n         || p.at_ts(expressions::LITERAL_FIRST)\n }\n@@ -165,6 +161,9 @@ fn record_field_pat_list(p: &mut Parser) {\n             T![..] => p.bump(),\n             IDENT if p.nth(1) == T![:] => record_field_pat(p),\n             T!['{'] => error_block(p, \"expected ident\"),\n+            T![box] => {\n+                box_pat(p);\n+            }\n             _ => {\n                 bind_pat(p, false);\n             }\n@@ -261,11 +260,9 @@ fn pat_list(p: &mut Parser, ket: SyntaxKind) {\n //     let ref mut d = ();\n //     let e @ _ = ();\n //     let ref mut f @ g @ _ = ();\n-//     let box i = Box::new(1i32);\n // }\n fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     let m = p.start();\n-    p.eat(T![box]);\n     p.eat(T![ref]);\n     p.eat(T![mut]);\n     name(p);\n@@ -274,3 +271,17 @@ fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     }\n     m.complete(p, BIND_PAT)\n }\n+\n+// test box_pat\n+// fn main() {\n+//     let box i = ();\n+//     let box Outer { box i, j: box Inner(box &x) } = ();\n+//     let box ref mut i = ();\n+// }\n+fn box_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(T![box]));\n+    let m = p.start();\n+    p.bump();\n+    pattern(p);\n+    m.complete(p, BOX_PAT)\n+}"}, {"sha": "8ba29ebf8360bb2e77577b4557a74893f160c649", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -149,6 +149,7 @@ pub enum SyntaxKind {\n     IMPL_TRAIT_TYPE,\n     DYN_TRAIT_TYPE,\n     REF_PAT,\n+    BOX_PAT,\n     BIND_PAT,\n     PLACEHOLDER_PAT,\n     PATH_PAT,"}, {"sha": "90480b6ca5f21db8dde64db80228ffffe416586c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -307,6 +307,33 @@ impl BlockExpr {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct BoxPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for BoxPat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            BOX_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl BoxPat {\n+    pub fn pat(&self) -> Option<Pat> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BreakExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -2063,6 +2090,7 @@ impl ParenType {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Pat {\n     RefPat(RefPat),\n+    BoxPat(BoxPat),\n     BindPat(BindPat),\n     PlaceholderPat(PlaceholderPat),\n     PathPat(PathPat),\n@@ -2078,6 +2106,11 @@ impl From<RefPat> for Pat {\n         Pat::RefPat(node)\n     }\n }\n+impl From<BoxPat> for Pat {\n+    fn from(node: BoxPat) -> Pat {\n+        Pat::BoxPat(node)\n+    }\n+}\n impl From<BindPat> for Pat {\n     fn from(node: BindPat) -> Pat {\n         Pat::BindPat(node)\n@@ -2126,14 +2159,15 @@ impl From<LiteralPat> for Pat {\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            REF_PAT | BIND_PAT | PLACEHOLDER_PAT | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT\n-            | TUPLE_PAT | SLICE_PAT | RANGE_PAT | LITERAL_PAT => true,\n+            REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | PATH_PAT | RECORD_PAT\n+            | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT | LITERAL_PAT => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             REF_PAT => Pat::RefPat(RefPat { syntax }),\n+            BOX_PAT => Pat::BoxPat(BoxPat { syntax }),\n             BIND_PAT => Pat::BindPat(BindPat { syntax }),\n             PLACEHOLDER_PAT => Pat::PlaceholderPat(PlaceholderPat { syntax }),\n             PATH_PAT => Pat::PathPat(PathPat { syntax }),\n@@ -2150,6 +2184,7 @@ impl AstNode for Pat {\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             Pat::RefPat(it) => &it.syntax,\n+            Pat::BoxPat(it) => &it.syntax,\n             Pat::BindPat(it) => &it.syntax,\n             Pat::PlaceholderPat(it) => &it.syntax,\n             Pat::PathPat(it) => &it.syntax,"}, {"sha": "1836862fe04dbdd2042597a3bd59696cf92ea3c0", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -158,6 +158,7 @@ Grammar(\n         \"DYN_TRAIT_TYPE\",\n \n         \"REF_PAT\",\n+        \"BOX_PAT\",\n         \"BIND_PAT\",\n         \"PLACEHOLDER_PAT\",\n         \"PATH_PAT\",\n@@ -523,6 +524,7 @@ Grammar(\n         ),\n \n         \"RefPat\": ( options: [ \"Pat\" ]),\n+        \"BoxPat\": ( options: [ \"Pat\" ]),\n         \"BindPat\": (\n             options: [ \"Pat\" ],\n             traits: [\"NameOwner\"]\n@@ -552,6 +554,7 @@ Grammar(\n         \"Pat\": (\n             enum: [\n                 \"RefPat\",\n+                \"BoxPat\",\n                 \"BindPat\",\n                 \"PlaceholderPat\",\n                 \"PathPat\","}, {"sha": "d3fa2e468cc760c452b47529d30eb0923cd8edea", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let ref box i = ();\n+    let mut box i = ();\n+    let ref mut box i = ();\n+}\n+"}, {"sha": "0cdca4b55527e12d103baaa6ebea554ab5555e12", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.txt", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -0,0 +1,95 @@\n+SOURCE_FILE@[0; 91)\n+  FN_DEF@[0; 89)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK@[10; 89)\n+      L_CURLY@[10; 11) \"{\"\n+      WHITESPACE@[11; 16) \"\\n    \"\n+      LET_STMT@[16; 27)\n+        LET_KW@[16; 19) \"let\"\n+        WHITESPACE@[19; 20) \" \"\n+        BIND_PAT@[20; 27)\n+          REF_KW@[20; 23) \"ref\"\n+          WHITESPACE@[23; 24) \" \"\n+          ERROR@[24; 27)\n+            BOX_KW@[24; 27) \"box\"\n+      WHITESPACE@[27; 28) \" \"\n+      EXPR_STMT@[28; 35)\n+        BIN_EXPR@[28; 34)\n+          PATH_EXPR@[28; 29)\n+            PATH@[28; 29)\n+              PATH_SEGMENT@[28; 29)\n+                NAME_REF@[28; 29)\n+                  IDENT@[28; 29) \"i\"\n+          WHITESPACE@[29; 30) \" \"\n+          EQ@[30; 31) \"=\"\n+          WHITESPACE@[31; 32) \" \"\n+          TUPLE_EXPR@[32; 34)\n+            L_PAREN@[32; 33) \"(\"\n+            R_PAREN@[33; 34) \")\"\n+        SEMI@[34; 35) \";\"\n+      WHITESPACE@[35; 40) \"\\n    \"\n+      LET_STMT@[40; 51)\n+        LET_KW@[40; 43) \"let\"\n+        WHITESPACE@[43; 44) \" \"\n+        BIND_PAT@[44; 51)\n+          MUT_KW@[44; 47) \"mut\"\n+          WHITESPACE@[47; 48) \" \"\n+          ERROR@[48; 51)\n+            BOX_KW@[48; 51) \"box\"\n+      WHITESPACE@[51; 52) \" \"\n+      EXPR_STMT@[52; 59)\n+        BIN_EXPR@[52; 58)\n+          PATH_EXPR@[52; 53)\n+            PATH@[52; 53)\n+              PATH_SEGMENT@[52; 53)\n+                NAME_REF@[52; 53)\n+                  IDENT@[52; 53) \"i\"\n+          WHITESPACE@[53; 54) \" \"\n+          EQ@[54; 55) \"=\"\n+          WHITESPACE@[55; 56) \" \"\n+          TUPLE_EXPR@[56; 58)\n+            L_PAREN@[56; 57) \"(\"\n+            R_PAREN@[57; 58) \")\"\n+        SEMI@[58; 59) \";\"\n+      WHITESPACE@[59; 64) \"\\n    \"\n+      LET_STMT@[64; 79)\n+        LET_KW@[64; 67) \"let\"\n+        WHITESPACE@[67; 68) \" \"\n+        BIND_PAT@[68; 79)\n+          REF_KW@[68; 71) \"ref\"\n+          WHITESPACE@[71; 72) \" \"\n+          MUT_KW@[72; 75) \"mut\"\n+          WHITESPACE@[75; 76) \" \"\n+          ERROR@[76; 79)\n+            BOX_KW@[76; 79) \"box\"\n+      WHITESPACE@[79; 80) \" \"\n+      EXPR_STMT@[80; 87)\n+        BIN_EXPR@[80; 86)\n+          PATH_EXPR@[80; 81)\n+            PATH@[80; 81)\n+              PATH_SEGMENT@[80; 81)\n+                NAME_REF@[80; 81)\n+                  IDENT@[80; 81) \"i\"\n+          WHITESPACE@[81; 82) \" \"\n+          EQ@[82; 83) \"=\"\n+          WHITESPACE@[83; 84) \" \"\n+          TUPLE_EXPR@[84; 86)\n+            L_PAREN@[84; 85) \"(\"\n+            R_PAREN@[85; 86) \")\"\n+        SEMI@[86; 87) \";\"\n+      WHITESPACE@[87; 88) \"\\n\"\n+      R_CURLY@[88; 89) \"}\"\n+  WHITESPACE@[89; 91) \"\\n\\n\"\n+error 24: expected a name\n+error 27: expected SEMI\n+error 48: expected a name\n+error 51: expected SEMI\n+error 76: expected a name\n+error 79: expected SEMI"}, {"sha": "9e009e24f4e36058900b22da66b745f05e69a9cd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -5,7 +5,5 @@ fn foo() {\n         X | Y if Z => (),\n         | X | Y if Z => (),\n         | X => (),\n-        box X => (),\n-        Some(box X) => (),\n     };\n }"}, {"sha": "c2f256ac39258ddfb0d9a5c4eedf97a7a8e2b645", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.txt", "status": "modified", "additions": 12, "deletions": 47, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 215)\n-  FN_DEF@[0; 214)\n+SOURCE_FILE@[0; 167)\n+  FN_DEF@[0; 166)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,18 +8,18 @@ SOURCE_FILE@[0; 215)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK@[9; 214)\n+    BLOCK@[9; 166)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      EXPR_STMT@[15; 212)\n-        MATCH_EXPR@[15; 211)\n+      EXPR_STMT@[15; 164)\n+        MATCH_EXPR@[15; 163)\n           MATCH_KW@[15; 20) \"match\"\n           WHITESPACE@[20; 21) \" \"\n           TUPLE_EXPR@[21; 23)\n             L_PAREN@[21; 22) \"(\"\n             R_PAREN@[22; 23) \")\"\n           WHITESPACE@[23; 24) \" \"\n-          MATCH_ARM_LIST@[24; 211)\n+          MATCH_ARM_LIST@[24; 163)\n             L_CURLY@[24; 25) \"{\"\n             WHITESPACE@[25; 34) \"\\n        \"\n             MATCH_ARM@[34; 41)\n@@ -141,44 +141,9 @@ SOURCE_FILE@[0; 215)\n                 L_PAREN@[154; 155) \"(\"\n                 R_PAREN@[155; 156) \")\"\n             COMMA@[156; 157) \",\"\n-            WHITESPACE@[157; 166) \"\\n        \"\n-            MATCH_ARM@[166; 177)\n-              BIND_PAT@[166; 171)\n-                BOX_KW@[166; 169) \"box\"\n-                WHITESPACE@[169; 170) \" \"\n-                NAME@[170; 171)\n-                  IDENT@[170; 171) \"X\"\n-              WHITESPACE@[171; 172) \" \"\n-              FAT_ARROW@[172; 174) \"=>\"\n-              WHITESPACE@[174; 175) \" \"\n-              TUPLE_EXPR@[175; 177)\n-                L_PAREN@[175; 176) \"(\"\n-                R_PAREN@[176; 177) \")\"\n-            COMMA@[177; 178) \",\"\n-            WHITESPACE@[178; 187) \"\\n        \"\n-            MATCH_ARM@[187; 204)\n-              TUPLE_STRUCT_PAT@[187; 198)\n-                PATH@[187; 191)\n-                  PATH_SEGMENT@[187; 191)\n-                    NAME_REF@[187; 191)\n-                      IDENT@[187; 191) \"Some\"\n-                L_PAREN@[191; 192) \"(\"\n-                BIND_PAT@[192; 197)\n-                  BOX_KW@[192; 195) \"box\"\n-                  WHITESPACE@[195; 196) \" \"\n-                  NAME@[196; 197)\n-                    IDENT@[196; 197) \"X\"\n-                R_PAREN@[197; 198) \")\"\n-              WHITESPACE@[198; 199) \" \"\n-              FAT_ARROW@[199; 201) \"=>\"\n-              WHITESPACE@[201; 202) \" \"\n-              TUPLE_EXPR@[202; 204)\n-                L_PAREN@[202; 203) \"(\"\n-                R_PAREN@[203; 204) \")\"\n-            COMMA@[204; 205) \",\"\n-            WHITESPACE@[205; 210) \"\\n    \"\n-            R_CURLY@[210; 211) \"}\"\n-        SEMI@[211; 212) \";\"\n-      WHITESPACE@[212; 213) \"\\n\"\n-      R_CURLY@[213; 214) \"}\"\n-  WHITESPACE@[214; 215) \"\\n\"\n+            WHITESPACE@[157; 162) \"\\n    \"\n+            R_CURLY@[162; 163) \"}\"\n+        SEMI@[163; 164) \";\"\n+      WHITESPACE@[164; 165) \"\\n\"\n+      R_CURLY@[165; 166) \"}\"\n+  WHITESPACE@[166; 167) \"\\n\""}, {"sha": "820a9e72ce563a869028605287357cfc50ffdaa0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0112_bind_pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -5,5 +5,4 @@ fn main() {\n     let ref mut d = ();\n     let e @ _ = ();\n     let ref mut f @ g @ _ = ();\n-    let box i = Box::new(1i32);\n }"}, {"sha": "ab0f88507ea1da88dcc646b1e03a373e814a0f83", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0112_bind_pat.txt", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.txt?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 178)\n-  FN_DEF@[0; 177)\n+SOURCE_FILE@[0; 146)\n+  FN_DEF@[0; 145)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 7)\n@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 178)\n       L_PAREN@[7; 8) \"(\"\n       R_PAREN@[8; 9) \")\"\n     WHITESPACE@[9; 10) \" \"\n-    BLOCK@[10; 177)\n+    BLOCK@[10; 145)\n       L_CURLY@[10; 11) \"{\"\n       WHITESPACE@[11; 16) \"\\n    \"\n       LET_STMT@[16; 27)\n@@ -122,35 +122,6 @@ SOURCE_FILE@[0; 178)\n           L_PAREN@[140; 141) \"(\"\n           R_PAREN@[141; 142) \")\"\n         SEMI@[142; 143) \";\"\n-      WHITESPACE@[143; 148) \"\\n    \"\n-      LET_STMT@[148; 175)\n-        LET_KW@[148; 151) \"let\"\n-        WHITESPACE@[151; 152) \" \"\n-        BIND_PAT@[152; 157)\n-          BOX_KW@[152; 155) \"box\"\n-          WHITESPACE@[155; 156) \" \"\n-          NAME@[156; 157)\n-            IDENT@[156; 157) \"i\"\n-        WHITESPACE@[157; 158) \" \"\n-        EQ@[158; 159) \"=\"\n-        WHITESPACE@[159; 160) \" \"\n-        CALL_EXPR@[160; 174)\n-          PATH_EXPR@[160; 168)\n-            PATH@[160; 168)\n-              PATH@[160; 163)\n-                PATH_SEGMENT@[160; 163)\n-                  NAME_REF@[160; 163)\n-                    IDENT@[160; 163) \"Box\"\n-              COLONCOLON@[163; 165) \"::\"\n-              PATH_SEGMENT@[165; 168)\n-                NAME_REF@[165; 168)\n-                  IDENT@[165; 168) \"new\"\n-          ARG_LIST@[168; 174)\n-            L_PAREN@[168; 169) \"(\"\n-            LITERAL@[169; 173)\n-              INT_NUMBER@[169; 173) \"1i32\"\n-            R_PAREN@[173; 174) \")\"\n-        SEMI@[174; 175) \";\"\n-      WHITESPACE@[175; 176) \"\\n\"\n-      R_CURLY@[176; 177) \"}\"\n-  WHITESPACE@[177; 178) \"\\n\"\n+      WHITESPACE@[143; 144) \"\\n\"\n+      R_CURLY@[144; 145) \"}\"\n+  WHITESPACE@[145; 146) \"\\n\""}, {"sha": "9d458aa1e6bb8178a79d1765c2bec1dced26f29e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0143_box_pat.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rs?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let box i = ();\n+    let box Outer { box i, j: box Inner(box &x) } = ();\n+    let box ref mut i = ();\n+}"}, {"sha": "f0db58143c7de02545c9078fdcb724fab9e8fe4d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0143_box_pat.txt", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/866b41ddd86cbe9c3e8d9cb2896477bab060a044/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.txt?ref=866b41ddd86cbe9c3e8d9cb2896477bab060a044", "patch": "@@ -0,0 +1,109 @@\n+SOURCE_FILE@[0; 118)\n+  FN_DEF@[0; 117)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK@[10; 117)\n+      L_CURLY@[10; 11) \"{\"\n+      WHITESPACE@[11; 16) \"\\n    \"\n+      LET_STMT@[16; 31)\n+        LET_KW@[16; 19) \"let\"\n+        WHITESPACE@[19; 20) \" \"\n+        BOX_PAT@[20; 25)\n+          BOX_KW@[20; 23) \"box\"\n+          WHITESPACE@[23; 24) \" \"\n+          BIND_PAT@[24; 25)\n+            NAME@[24; 25)\n+              IDENT@[24; 25) \"i\"\n+        WHITESPACE@[25; 26) \" \"\n+        EQ@[26; 27) \"=\"\n+        WHITESPACE@[27; 28) \" \"\n+        TUPLE_EXPR@[28; 30)\n+          L_PAREN@[28; 29) \"(\"\n+          R_PAREN@[29; 30) \")\"\n+        SEMI@[30; 31) \";\"\n+      WHITESPACE@[31; 36) \"\\n    \"\n+      LET_STMT@[36; 87)\n+        LET_KW@[36; 39) \"let\"\n+        WHITESPACE@[39; 40) \" \"\n+        BOX_PAT@[40; 81)\n+          BOX_KW@[40; 43) \"box\"\n+          WHITESPACE@[43; 44) \" \"\n+          RECORD_PAT@[44; 81)\n+            PATH@[44; 49)\n+              PATH_SEGMENT@[44; 49)\n+                NAME_REF@[44; 49)\n+                  IDENT@[44; 49) \"Outer\"\n+            WHITESPACE@[49; 50) \" \"\n+            RECORD_FIELD_PAT_LIST@[50; 81)\n+              L_CURLY@[50; 51) \"{\"\n+              WHITESPACE@[51; 52) \" \"\n+              BOX_PAT@[52; 57)\n+                BOX_KW@[52; 55) \"box\"\n+                WHITESPACE@[55; 56) \" \"\n+                BIND_PAT@[56; 57)\n+                  NAME@[56; 57)\n+                    IDENT@[56; 57) \"i\"\n+              COMMA@[57; 58) \",\"\n+              WHITESPACE@[58; 59) \" \"\n+              RECORD_FIELD_PAT@[59; 79)\n+                NAME@[59; 60)\n+                  IDENT@[59; 60) \"j\"\n+                COLON@[60; 61) \":\"\n+                WHITESPACE@[61; 62) \" \"\n+                BOX_PAT@[62; 79)\n+                  BOX_KW@[62; 65) \"box\"\n+                  WHITESPACE@[65; 66) \" \"\n+                  TUPLE_STRUCT_PAT@[66; 79)\n+                    PATH@[66; 71)\n+                      PATH_SEGMENT@[66; 71)\n+                        NAME_REF@[66; 71)\n+                          IDENT@[66; 71) \"Inner\"\n+                    L_PAREN@[71; 72) \"(\"\n+                    BOX_PAT@[72; 78)\n+                      BOX_KW@[72; 75) \"box\"\n+                      WHITESPACE@[75; 76) \" \"\n+                      REF_PAT@[76; 78)\n+                        AMP@[76; 77) \"&\"\n+                        BIND_PAT@[77; 78)\n+                          NAME@[77; 78)\n+                            IDENT@[77; 78) \"x\"\n+                    R_PAREN@[78; 79) \")\"\n+              WHITESPACE@[79; 80) \" \"\n+              R_CURLY@[80; 81) \"}\"\n+        WHITESPACE@[81; 82) \" \"\n+        EQ@[82; 83) \"=\"\n+        WHITESPACE@[83; 84) \" \"\n+        TUPLE_EXPR@[84; 86)\n+          L_PAREN@[84; 85) \"(\"\n+          R_PAREN@[85; 86) \")\"\n+        SEMI@[86; 87) \";\"\n+      WHITESPACE@[87; 92) \"\\n    \"\n+      LET_STMT@[92; 115)\n+        LET_KW@[92; 95) \"let\"\n+        WHITESPACE@[95; 96) \" \"\n+        BOX_PAT@[96; 109)\n+          BOX_KW@[96; 99) \"box\"\n+          WHITESPACE@[99; 100) \" \"\n+          BIND_PAT@[100; 109)\n+            REF_KW@[100; 103) \"ref\"\n+            WHITESPACE@[103; 104) \" \"\n+            MUT_KW@[104; 107) \"mut\"\n+            WHITESPACE@[107; 108) \" \"\n+            NAME@[108; 109)\n+              IDENT@[108; 109) \"i\"\n+        WHITESPACE@[109; 110) \" \"\n+        EQ@[110; 111) \"=\"\n+        WHITESPACE@[111; 112) \" \"\n+        TUPLE_EXPR@[112; 114)\n+          L_PAREN@[112; 113) \"(\"\n+          R_PAREN@[113; 114) \")\"\n+        SEMI@[114; 115) \";\"\n+      WHITESPACE@[115; 116) \"\\n\"\n+      R_CURLY@[116; 117) \"}\"\n+  WHITESPACE@[117; 118) \"\\n\""}]}