{"sha": "c3522d063712abb90ff839254a4b269ede4f1fdd", "node_id": "C_kwDOAAsO6NoAKGMzNTIyZDA2MzcxMmFiYjkwZmY4MzkyNTRhNGIyNjllZGU0ZjFmZGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-16T14:07:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Move the resolver into a query", "tree": {"sha": "f852b05bd4ceaedae35da51e8d5f7d2e670daff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f852b05bd4ceaedae35da51e8d5f7d2e670daff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3522d063712abb90ff839254a4b269ede4f1fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3522d063712abb90ff839254a4b269ede4f1fdd", "html_url": "https://github.com/rust-lang/rust/commit/c3522d063712abb90ff839254a4b269ede4f1fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3522d063712abb90ff839254a4b269ede4f1fdd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e2f4f48743b3d89cd016e50c1d29c9ace1dd06", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e2f4f48743b3d89cd016e50c1d29c9ace1dd06", "html_url": "https://github.com/rust-lang/rust/commit/37e2f4f48743b3d89cd016e50c1d29c9ace1dd06"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "019ec0758d6efe0606aa65b00b59ed6f5ad7a290", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -33,6 +33,7 @@ use rustc_target::spec::{RelocModel, Target};\n /// <dt>dylib</dt>\n /// <dd>The metadata can be found in the `.rustc` section of the shared library.</dd>\n /// </dl>\n+#[derive(Debug)]\n pub struct DefaultMetadataLoader;\n \n fn load_metadata_with("}, {"sha": "d7e9e00f3b63bb40fc0df2d62cfc65e7aeef8a9f", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -320,7 +320,7 @@ fn run_compiler(\n             }\n \n             // Make sure name resolution and macro expansion is run.\n-            queries.global_ctxt()?;\n+            queries.global_ctxt()?.enter(|tcx| tcx.resolver_for_lowering(()));\n \n             if callbacks.after_expansion(compiler, queries) == Compilation::Stop {\n                 return early_exit();"}, {"sha": "c3a9e55224f85792d9310c1d86c1d8d967cdc91f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::PResult;\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n@@ -172,7 +173,7 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n #[instrument(level = \"trace\", skip(tcx, krate, resolver))]\n-pub fn configure_and_expand(\n+fn configure_and_expand(\n     tcx: TyCtxt<'_>,\n     mut krate: ast::Crate,\n     resolver: &mut Resolver<'_, '_>,\n@@ -564,6 +565,34 @@ fn write_out_deps(\n     }\n }\n \n+fn resolver_for_lowering<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (): (),\n+) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n+    let arenas = Resolver::arenas();\n+    let krate = tcx.crate_for_resolver(()).steal();\n+    let mut resolver = Resolver::new(\n+        tcx,\n+        &krate,\n+        tcx.crate_name(LOCAL_CRATE),\n+        tcx.metadata_loader(()).steal(),\n+        &arenas,\n+    );\n+    let krate = configure_and_expand(tcx, krate, &mut resolver);\n+\n+    // Make sure we don't mutate the cstore from here on.\n+    tcx.untracked().cstore.leak();\n+\n+    let ty::ResolverOutputs {\n+        global_ctxt: untracked_resolutions,\n+        ast_lowering: untracked_resolver_for_lowering,\n+    } = resolver.into_outputs();\n+\n+    let feed = tcx.feed_unit_query();\n+    feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+    tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, Lrc::new(krate))))\n+}\n+\n fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n     let sess = tcx.sess;\n     let _timer = sess.timer(\"prepare_outputs\");\n@@ -618,6 +647,7 @@ pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     providers.analysis = analysis;\n     providers.hir_crate = rustc_ast_lowering::lower_to_hir;\n     providers.output_filenames = output_filenames;\n+    providers.resolver_for_lowering = resolver_for_lowering;\n     proc_macro_decls::provide(providers);\n     rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);"}, {"sha": "c957578b59e1d4d51ec11d94756e2a3ba3af2d98", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -16,9 +16,8 @@ use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n+use rustc_middle::ty::{GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n-use rustc_resolve::Resolver;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::cstore::Untracked;\n use rustc_session::{output::find_crate_name, Session};\n@@ -216,34 +215,12 @@ impl<'tcx> Queries<'tcx> {\n             qcx.enter(|tcx| {\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);\n-                let (krate, resolver_outputs) = {\n-                    let _timer = sess.timer(\"configure_and_expand\");\n-\n-                    let arenas = Resolver::arenas();\n-                    let mut resolver = Resolver::new(\n-                        tcx,\n-                        &krate,\n-                        crate_name,\n-                        self.codegen_backend().metadata_loader(),\n-                        &arenas,\n-                    );\n-                    let krate = passes::configure_and_expand(tcx, krate, &mut resolver);\n-\n-                    // Make sure we don't mutate the cstore from here on.\n-                    tcx.untracked().cstore.leak();\n-                    (Lrc::new(krate), resolver.into_outputs())\n-                };\n-\n-                let ty::ResolverOutputs {\n-                    global_ctxt: untracked_resolutions,\n-                    ast_lowering: untracked_resolver_for_lowering,\n-                } = resolver_outputs;\n \n                 let feed = tcx.feed_unit_query();\n-                feed.resolver_for_lowering(\n-                    tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n+                feed.crate_for_resolver(tcx.arena.alloc(Steal::new(krate)));\n+                feed.metadata_loader(\n+                    tcx.arena.alloc(Steal::new(self.codegen_backend().metadata_loader())),\n                 );\n-                feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n                 feed.features_query(tcx.sess.features_untracked());\n             });\n             Ok(qcx)"}, {"sha": "d4019b5bf17eb3c1ed9455a59d3f91d801d235e3", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -35,6 +35,8 @@ macro_rules! arena_types {\n                 rustc_data_structures::sync::Lrc<rustc_ast::Crate>,\n             )>,\n             [] output_filenames: std::sync::Arc<rustc_session::config::OutputFilenames>,\n+            [] metadata_loader: rustc_data_structures::steal::Steal<Box<rustc_session::cstore::MetadataLoaderDyn>>,\n+            [] crate_for_resolver: rustc_data_structures::steal::Steal<rustc_ast::ast::Crate>,\n             [] resolutions: rustc_middle::ty::ResolverGlobalCtxt,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,"}, {"sha": "3b559c7f8adff5cfcb98b9cac6df176fdefd0767", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -33,7 +33,7 @@ rustc_queries! {\n     }\n \n     query resolver_for_lowering(_: ()) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n-        feedable\n+        eval_always\n         no_hash\n         desc { \"getting the resolver for lowering\" }\n     }\n@@ -2077,6 +2077,18 @@ rustc_queries! {\n         desc { \"looking up enabled feature gates\" }\n     }\n \n+    query metadata_loader((): ()) -> &'tcx Steal<Box<rustc_session::cstore::MetadataLoaderDyn>> {\n+        feedable\n+        no_hash\n+        desc { \"raw operations for metadata file access\" }\n+    }\n+\n+    query crate_for_resolver((): ()) -> &'tcx Steal<rustc_ast::ast::Crate> {\n+        feedable\n+        no_hash\n+        desc { \"the ast before macro expansion and name resolution\" }\n+    }\n+\n     /// Attempt to resolve the given `DefId` to an `Instance`, for the\n     /// given generics args (`SubstsRef`), returning one of:\n     ///  * `Ok(Some(instance))` on success"}, {"sha": "97aa930b5ec8e8b5422df3ae9d79b9d5a0d57ebd", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -200,7 +200,7 @@ pub enum ExternCrateSource {\n /// At the time of this writing, there is only one backend and one way to store\n /// metadata in library -- this trait just serves to decouple rustc_metadata from\n /// the archive reader, which depends on LLVM.\n-pub trait MetadataLoader {\n+pub trait MetadataLoader: std::fmt::Debug {\n     fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n     fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n }"}, {"sha": "4bd4780e25f6b0e42fa58cb9e58c7b658144f949", "filename": "tests/ui/panics/default-backtrace-ice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3522d063712abb90ff839254a4b269ede4f1fdd/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3522d063712abb90ff839254a4b269ede4f1fdd/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr?ref=c3522d063712abb90ff839254a4b269ede4f1fdd", "patch": "@@ -13,4 +13,5 @@ error: the compiler unexpectedly panicked. this is a bug.\n \n \n query stack during panic:\n+#0 [resolver_for_lowering] getting the resolver for lowering\n end of query stack"}]}