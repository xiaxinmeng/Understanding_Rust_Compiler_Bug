{"sha": "d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZWNmNzBmZDZiNjZiZTUyMDVlYmJlZjFjMDBjNzM2NmE3OGI3NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-15T05:39:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-15T05:39:35Z"}, "message": "Auto merge of #50259 - GuillaumeGomez:improve-results, r=ollie27\n\nRustdoc improvements\n\nFixes #50658. (last commit)\n\nA lot of small improvements.\n\nr? @QuietMisdreavus", "tree": {"sha": "5647d13d6e860f75054778fbd2aa6f5b3881d96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5647d13d6e860f75054778fbd2aa6f5b3881d96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "html_url": "https://github.com/rust-lang/rust/commit/d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d711dc9d57b7992d1d946ba1a7e10ee6693293c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d711dc9d57b7992d1d946ba1a7e10ee6693293c2", "html_url": "https://github.com/rust-lang/rust/commit/d711dc9d57b7992d1d946ba1a7e10ee6693293c2"}, {"sha": "f0db2cf14e8b58eb04d40e8aebea0a7a987097eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0db2cf14e8b58eb04d40e8aebea0a7a987097eb", "html_url": "https://github.com/rust-lang/rust/commit/f0db2cf14e8b58eb04d40e8aebea0a7a987097eb"}], "stats": {"total": 236, "additions": 161, "deletions": 75}, "files": [{"sha": "32cfb05bbe49bb752414fdca7ac8336e451597b9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "patch": "@@ -413,9 +413,9 @@ impl ToJson for Type {\n         match self.name {\n             Some(ref name) => {\n                 let mut data = BTreeMap::new();\n-                data.insert(\"name\".to_owned(), name.to_json());\n+                data.insert(\"n\".to_owned(), name.to_json());\n                 if let Some(ref generics) = self.generics {\n-                    data.insert(\"generics\".to_owned(), generics.to_json());\n+                    data.insert(\"g\".to_owned(), generics.to_json());\n                 }\n                 Json::Object(data)\n             },\n@@ -438,8 +438,12 @@ impl ToJson for IndexItemFunctionType {\n             Json::Null\n         } else {\n             let mut data = BTreeMap::new();\n-            data.insert(\"inputs\".to_owned(), self.inputs.to_json());\n-            data.insert(\"output\".to_owned(), self.output.to_json());\n+            if !self.inputs.is_empty() {\n+                data.insert(\"i\".to_owned(), self.inputs.to_json());\n+            }\n+            if let Some(ref output) = self.output {\n+                data.insert(\"o\".to_owned(), output.to_json());\n+            }\n             Json::Object(data)\n         }\n     }\n@@ -789,7 +793,8 @@ fn write_shared(cx: &Context,\n           format!(\n r#\"var themes = document.getElementById(\"theme-choices\");\n var themePicker = document.getElementById(\"theme-picker\");\n-themePicker.onclick = function() {{\n+\n+function switchThemeButtonState() {{\n     if (themes.style.display === \"block\") {{\n         themes.style.display = \"none\";\n         themePicker.style.borderBottomRightRadius = \"3px\";\n@@ -800,12 +805,29 @@ themePicker.onclick = function() {{\n         themePicker.style.borderBottomLeftRadius = \"0\";\n     }}\n }};\n+\n+function handleThemeButtonsBlur(e) {{\n+    var active = document.activeElement;\n+    var related = e.relatedTarget;\n+\n+    if (active.id !== \"themePicker\" &&\n+        (!active.parentNode || active.parentNode.id !== \"theme-choices\") &&\n+        (!related ||\n+         (related.id !== \"themePicker\" &&\n+          (!related.parentNode || related.parentNode.id !== \"theme-choices\")))) {{\n+        switchThemeButtonState();\n+    }}\n+}}\n+\n+themePicker.onclick = switchThemeButtonState;\n+themePicker.onblur = handleThemeButtonsBlur;\n [{}].forEach(function(item) {{\n     var but = document.createElement('button');\n     but.innerHTML = item;\n     but.onclick = function(el) {{\n         switchTheme(currentTheme, mainTheme, item);\n     }};\n+    but.onblur = handleThemeButtonsBlur;\n     themes.appendChild(but);\n }});\"#,\n                  themes.iter()\n@@ -879,8 +901,8 @@ themePicker.onclick = function() {{\n     }\n \n     fn show_item(item: &IndexItem, krate: &str) -> String {\n-        format!(\"{{'crate':'{}','ty':{},'name':'{}','path':'{}'{}}}\",\n-                krate, item.ty as usize, item.name, item.path,\n+        format!(\"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','p':'{}'{}}}\",\n+                krate, item.ty as usize, item.name, item.desc.replace(\"'\", \"\\\\'\"), item.path,\n                 if let Some(p) = item.parent_idx {\n                     format!(\",'parent':{}\", p)\n                 } else {\n@@ -1442,7 +1464,7 @@ impl<'a> Cache {\n                                 ty: item.type_(),\n                                 name: item_name.to_string(),\n                                 path: path.clone(),\n-                                desc: String::new(),\n+                                desc: plain_summary_line(item.doc_value()),\n                                 parent: None,\n                                 parent_idx: None,\n                                 search_type: get_index_search_type(&item),"}, {"sha": "9224bd1c5089037fb3788a6b123088a5c2f007d5", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 92, "deletions": 64, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "patch": "@@ -57,6 +57,12 @@\n             return this.indexOf(searchString, position) === position;\n         };\n     }\n+    if (!String.prototype.endsWith) {\n+        String.prototype.endsWith = function(suffix, length) {\n+            var l = length || this.length;\n+            return this.indexOf(suffix, l - suffix.length) !== -1;\n+        };\n+    }\n \n     function getPageId() {\n         var id = document.location.href.split('#')[1];\n@@ -454,12 +460,16 @@\n                         var obj = searchIndex[results[i].id];\n                         obj.lev = results[i].lev;\n                         if (isType !== true || obj.type) {\n+                            var res = buildHrefAndPath(obj);\n+                            obj.displayPath = pathSplitter(res[0]);\n+                            obj.fullPath = obj.displayPath + obj.name;\n+                            obj.href = res[1];\n                             out.push(obj);\n+                            if (out.length >= MAX_RESULTS) {\n+                                break;\n+                            }\n                         }\n                     }\n-                    if (out.length >= MAX_RESULTS) {\n-                        break;\n-                    }\n                 }\n                 return out;\n             }\n@@ -587,8 +597,8 @@\n                 // match as well.\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n                 if (val.generics.length > 0) {\n-                    if (obj.generics && obj.generics.length >= val.generics.length) {\n-                        var elems = obj.generics.slice(0);\n+                    if (obj.g && obj.g.length >= val.generics.length) {\n+                        var elems = obj.g.slice(0);\n                         var total = 0;\n                         var done = 0;\n                         // We need to find the type that matches the most to remove it in order\n@@ -620,11 +630,11 @@\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                if (obj.name === val.name) {\n+                if (obj.n === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n-                            if (obj.generics && obj.length >= val.generics.length) {\n-                                var elems = obj.generics.slice(0);\n+                            if (obj.g && obj.length >= val.generics.length) {\n+                                var elems = obj.g.slice(0);\n                                 var allFound = true;\n                                 var x;\n \n@@ -648,7 +658,7 @@\n                     }\n                     // If the type has generics but don't match, then it won't return at this point.\n                     // Otherwise, `checkGenerics` will return 0 and it'll return.\n-                    if (obj.generics && obj.generics.length !== 0) {\n+                    if (obj.g && obj.g.length !== 0) {\n                         var tmp_lev = checkGenerics(obj, val);\n                         if (tmp_lev <= MAX_LEV_DISTANCE) {\n                             return tmp_lev;\n@@ -659,22 +669,22 @@\n                 }\n                 // Names didn't match so let's check if one of the generic types could.\n                 if (literalSearch === true) {\n-                     if (obj.generics && obj.generics.length > 0) {\n-                        for (var x = 0; x < obj.generics.length; ++x) {\n-                            if (obj.generics[x] === val.name) {\n+                     if (obj.g && obj.g.length > 0) {\n+                        for (var x = 0; x < obj.g.length; ++x) {\n+                            if (obj.g[x] === val.name) {\n                                 return true;\n                             }\n                         }\n                     }\n                     return false;\n                 }\n-                var lev_distance = Math.min(levenshtein(obj.name, val.name), lev_distance);\n+                var lev_distance = Math.min(levenshtein(obj.n, val.name), lev_distance);\n                 if (lev_distance <= MAX_LEV_DISTANCE) {\n                     lev_distance = Math.min(checkGenerics(obj, val), lev_distance);\n-                } else if (obj.generics && obj.generics.length > 0) {\n+                } else if (obj.g && obj.g.length > 0) {\n                     // We can check if the type we're looking for is inside the generics!\n-                    for (var x = 0; x < obj.generics.length; ++x) {\n-                        lev_distance = Math.min(levenshtein(obj.generics[x], val.name),\n+                    for (var x = 0; x < obj.g.length; ++x) {\n+                        lev_distance = Math.min(levenshtein(obj.g[x], val.name),\n                                                 lev_distance);\n                     }\n                 }\n@@ -686,9 +696,9 @@\n             function findArg(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n \n-                if (obj && obj.type && obj.type.inputs.length > 0) {\n-                    for (var i = 0; i < obj.type.inputs.length; i++) {\n-                        var tmp = checkType(obj.type.inputs[i], val, literalSearch);\n+                if (obj && obj.type && obj.type.i && obj.type.i.length > 0) {\n+                    for (var i = 0; i < obj.type.i.length; i++) {\n+                        var tmp = checkType(obj.type.i[i], val, literalSearch);\n                         if (literalSearch === true && tmp === true) {\n                             return true;\n                         }\n@@ -704,8 +714,8 @@\n             function checkReturned(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n \n-                if (obj && obj.type && obj.type.output) {\n-                    var tmp = checkType(obj.type.output, val, literalSearch);\n+                if (obj && obj.type && obj.type.o) {\n+                    var tmp = checkType(obj.type.o, val, literalSearch);\n                     if (literalSearch === true && tmp === true) {\n                         return true;\n                     }\n@@ -850,7 +860,7 @@\n                     var fullId = generateId(ty);\n \n                     // allow searching for void (no output) functions as well\n-                    var typeOutput = type.output ? type.output.name : \"\";\n+                    var typeOutput = type.o ? type.o.name : \"\";\n                     var returned = checkReturned(ty, output, true);\n                     if (output.name === \"*\" || returned === true) {\n                         var in_args = false;\n@@ -1017,6 +1027,13 @@\n                     ALIASES[window.currentCrate][query.raw]) {\n                 var aliases = ALIASES[window.currentCrate][query.raw];\n                 for (var i = 0; i < aliases.length; ++i) {\n+                    aliases[i].is_alias = true;\n+                    aliases[i].alias = query.raw;\n+                    aliases[i].path = aliases[i].p;\n+                    var res = buildHrefAndPath(aliases[i]);\n+                    aliases[i].displayPath = pathSplitter(res[0]);\n+                    aliases[i].fullPath = aliases[i].displayPath + aliases[i].name;\n+                    aliases[i].href = res[1];\n                     ret['others'].unshift(aliases[i]);\n                     if (ret['others'].length > MAX_RESULTS) {\n                         ret['others'].pop();\n@@ -1179,16 +1196,6 @@\n             };\n         }\n \n-        function escape(content) {\n-            var h1 = document.createElement('h1');\n-            h1.textContent = content;\n-            return h1.innerHTML;\n-        }\n-\n-        function pathSplitter(path) {\n-            return '<span>' + path.replace(/::/g, '::</span><span>');\n-        }\n-\n         function buildHrefAndPath(item) {\n             var displayPath;\n             var href;\n@@ -1227,38 +1234,54 @@\n             return [displayPath, href];\n         }\n \n+        function escape(content) {\n+            var h1 = document.createElement('h1');\n+            h1.textContent = content;\n+            return h1.innerHTML;\n+        }\n+\n+        function pathSplitter(path) {\n+            var tmp = '<span>' + path.replace(/::/g, '::</span><span>');\n+            if (tmp.endsWith(\"<span>\")) {\n+                return tmp.slice(0, tmp.length - 6);\n+            }\n+            return tmp;\n+        }\n+\n         function addTab(array, query, display) {\n             var extraStyle = '';\n             if (display === false) {\n                 extraStyle = ' style=\"display: none;\"';\n             }\n \n             var output = '';\n+            var duplicates = {};\n+            var length = 0;\n             if (array.length > 0) {\n                 output = '<table class=\"search-results\"' + extraStyle + '>';\n-                var shown = [];\n \n                 array.forEach(function(item) {\n-                    var name, type, href, displayPath;\n-\n-                    var id_ty = item.ty + item.path + item.name;\n-                    if (shown.indexOf(id_ty) !== -1) {\n-                        return;\n-                    }\n+                    var name, type;\n \n-                    shown.push(id_ty);\n                     name = item.name;\n                     type = itemTypes[item.ty];\n \n-                    var res = buildHrefAndPath(item);\n-                    var href = res[1];\n-                    var displayPath = res[0];\n+                    if (item.is_alias !== true) {\n+                        if (duplicates[item.fullPath]) {\n+                            return;\n+                        }\n+                        duplicates[item.fullPath] = true;\n+                    }\n+                    length += 1;\n \n                     output += '<tr class=\"' + type + ' result\"><td>' +\n-                              '<a href=\"' + href + '\">' +\n-                              pathSplitter(displayPath) + '<span class=\"' + type + '\">' +\n+                              '<a href=\"' + item.href + '\">' +\n+                              (item.is_alias === true ?\n+                               ('<span class=\"alias\"><b>' + item.alias + ' </b></span><span ' +\n+                                  'class=\"grey\"><i>&nbsp;- see&nbsp;</i></span>') : '') +\n+                              item.displayPath + '<span class=\"' + type + '\">' +\n                               name + '</span></a></td><td>' +\n-                              '<a href=\"' + href + '\">' +\n+                              '<a href=\"' + item.href + '\">' +\n                               '<span class=\"desc\">' + escape(item.desc) +\n                               '&nbsp;</span></a></td></tr>';\n                 });\n@@ -1269,7 +1292,7 @@\n                     encodeURIComponent('rust ' + query.query) +\n                     '\">DuckDuckGo</a>?</div>';\n             }\n-            return output;\n+            return [output, length];\n         }\n \n         function makeTabHeader(tabNb, text, nbElems) {\n@@ -1284,28 +1307,28 @@\n             if (results['others'].length === 1 &&\n                 getCurrentValue('rustdoc-go-to-only-result') === \"true\") {\n                 var elem = document.createElement('a');\n-                var res = buildHrefAndPath(results['others'][0]);\n-                elem.href = res[1];\n+                elem.href = results['others'][0].href;\n                 elem.style.display = 'none';\n                 // For firefox, we need the element to be in the DOM so it can be clicked.\n                 document.body.appendChild(elem);\n                 elem.click();\n             }\n-            var output, query = getQuery(search_input.value);\n+            var query = getQuery(search_input.value);\n \n             currentResults = query.id;\n-            output = '<h1>Results for ' + escape(query.query) +\n+\n+            var ret_others = addTab(results['others'], query);\n+            var ret_in_args = addTab(results['in_args'], query, false);\n+            var ret_returned = addTab(results['returned'], query, false);\n+\n+            var output = '<h1>Results for ' + escape(query.query) +\n                 (query.type ? ' (type: ' + escape(query.type) + ')' : '') + '</h1>' +\n                 '<div id=\"titles\">' +\n-                makeTabHeader(0, \"In Names\", results['others'].length) +\n-                makeTabHeader(1, \"In Parameters\", results['in_args'].length) +\n-                makeTabHeader(2, \"In Return Types\", results['returned'].length) +\n-                '</div><div id=\"results\">';\n-\n-            output += addTab(results['others'], query);\n-            output += addTab(results['in_args'], query, false);\n-            output += addTab(results['returned'], query, false);\n-            output += '</div>';\n+                makeTabHeader(0, \"In Names\", ret_others[1]) +\n+                makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n+                makeTabHeader(2, \"In Return Types\", ret_returned[1]) +\n+                '</div><div id=\"results\">' +\n+                ret_others[0] + ret_in_args[0] + ret_returned[0] + '</div>';\n \n             addClass(document.getElementById('main'), 'hidden');\n             var search = document.getElementById('search');\n@@ -1347,12 +1370,13 @@\n                 }\n             }\n             if (queries.length > 1) {\n-                function getSmallest(arrays, positions) {\n+                function getSmallest(arrays, positions, notDuplicates) {\n                     var start = null;\n \n                     for (var it = 0; it < positions.length; ++it) {\n                         if (arrays[it].length > positions[it] &&\n-                            (start === null || start > arrays[it][positions[it]].lev)) {\n+                            (start === null || start > arrays[it][positions[it]].lev) &&\n+                            !notDuplicates[arrays[it][positions[it]].fullPath]) {\n                             start = arrays[it][positions[it]].lev;\n                         }\n                     }\n@@ -1362,19 +1386,23 @@\n                 function mergeArrays(arrays) {\n                     var ret = [];\n                     var positions = [];\n+                    var notDuplicates = {};\n \n                     for (var x = 0; x < arrays.length; ++x) {\n                         positions.push(0);\n                     }\n                     while (ret.length < MAX_RESULTS) {\n-                        var smallest = getSmallest(arrays, positions);\n+                        var smallest = getSmallest(arrays, positions, notDuplicates);\n+\n                         if (smallest === null) {\n                             break;\n                         }\n                         for (x = 0; x < arrays.length && ret.length < MAX_RESULTS; ++x) {\n                             if (arrays[x].length > positions[x] &&\n-                                    arrays[x][positions[x]].lev === smallest) {\n+                                    arrays[x][positions[x]].lev === smallest &&\n+                                    !notDuplicates[arrays[x][positions[x]].fullPath]) {\n                                 ret.push(arrays[x][positions[x]]);\n+                                notDuplicates[arrays[x][positions[x]].fullPath] = true;\n                                 positions[x] += 1;\n                             }\n                         }"}, {"sha": "493a75e25211df925b16ddbd700a3aadc3ff5e42", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "patch": "@@ -382,7 +382,7 @@ kbd {\n }\n \n #theme-choices > button:hover, #theme-choices > button:focus {\n-\tbackground-color: #444;\n+\tbackground-color: #4e4e4e;\n }\n \n @media (max-width: 700px) {\n@@ -397,3 +397,10 @@ kbd {\n #all-types:hover {\n \tbackground-color: #606060;\n }\n+\n+.search-results td span.alias {\n+\tcolor: #fff;\n+}\n+.search-results td span.grey {\n+\tcolor: #ccc;\n+}\n\\ No newline at end of file"}, {"sha": "22f4635fb02e13ac5f23554f505503a08e46728a", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "patch": "@@ -390,4 +390,11 @@ kbd {\n }\n #all-types:hover {\n \tbackground-color: #f9f9f9;\n+}\n+\n+.search-results td span.alias {\n+\tcolor: #000;\n+}\n+.search-results td span.grey {\n+\tcolor: #999;\n }\n\\ No newline at end of file"}, {"sha": "0f29607d5c993ba74f278aa04d3d2b111a3b3388", "filename": "src/test/rustdoc-js/deduplication.js", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Ftest%2Frustdoc-js%2Fdeduplication.js", "raw_url": "https://github.com/rust-lang/rust/raw/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Ftest%2Frustdoc-js%2Fdeduplication.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fdeduplication.js?ref=d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-order\n+\n+const QUERY = 'is_nan';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::f32', 'name': 'is_nan' },\n+        { 'path': 'std::f64', 'name': 'is_nan' },\n+        { 'path': 'std::option::Option', 'name': 'is_none' },\n+    ],\n+};"}, {"sha": "47667d93cb7f12b088a7e63840747c27075d058d", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/d5ecf70fd6b66be5205ebbef1c00c7366a78b751/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=d5ecf70fd6b66be5205ebbef1c00c7366a78b751", "patch": "@@ -160,10 +160,11 @@ function main(argv) {\n     // execQuery first parameter is built in getQuery (which takes in the search input).\n     // execQuery last parameter is built in buildIndex.\n     // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"levenshtein\", \"validateResult\", \"getQuery\", \"buildIndex\", \"execQuery\",\n-                           \"execSearch\"];\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n     finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n     finalJS += ALIASES;\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);"}]}