{"sha": "1812a7b540e929bb1688880541fb4c8e3b80bf6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTJhN2I1NDBlOTI5YmIxNjg4ODgwNTQxZmI0YzhlM2I4MGJmNmQ=", "commit": {"author": {"name": "Raphael Catolino", "email": "raphael.catolino@gmail.com", "date": "2014-01-07T23:56:16Z"}, "committer": {"name": "Raphael Catolino", "email": "raphael.catolino@gmail.com", "date": "2014-01-07T23:56:16Z"}, "message": "Remove unnecessary substitution of type params when generating\nvtable methods before translating the ref to the method itself.", "tree": {"sha": "6e4bdbd6d95e490780f4c3d3342d0bc0382af226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4bdbd6d95e490780f4c3d3342d0bc0382af226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1812a7b540e929bb1688880541fb4c8e3b80bf6d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1812a7b540e929bb1688880541fb4c8e3b80bf6d", "html_url": "https://github.com/rust-lang/rust/commit/1812a7b540e929bb1688880541fb4c8e3b80bf6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1812a7b540e929bb1688880541fb4c8e3b80bf6d/comments", "author": {"login": "rcatolino", "id": 600382, "node_id": "MDQ6VXNlcjYwMDM4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/600382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcatolino", "html_url": "https://github.com/rcatolino", "followers_url": "https://api.github.com/users/rcatolino/followers", "following_url": "https://api.github.com/users/rcatolino/following{/other_user}", "gists_url": "https://api.github.com/users/rcatolino/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcatolino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcatolino/subscriptions", "organizations_url": "https://api.github.com/users/rcatolino/orgs", "repos_url": "https://api.github.com/users/rcatolino/repos", "events_url": "https://api.github.com/users/rcatolino/events{/privacy}", "received_events_url": "https://api.github.com/users/rcatolino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcatolino", "id": 600382, "node_id": "MDQ6VXNlcjYwMDM4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/600382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcatolino", "html_url": "https://github.com/rcatolino", "followers_url": "https://api.github.com/users/rcatolino/followers", "following_url": "https://api.github.com/users/rcatolino/following{/other_user}", "gists_url": "https://api.github.com/users/rcatolino/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcatolino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcatolino/subscriptions", "organizations_url": "https://api.github.com/users/rcatolino/orgs", "repos_url": "https://api.github.com/users/rcatolino/repos", "events_url": "https://api.github.com/users/rcatolino/events{/privacy}", "received_events_url": "https://api.github.com/users/rcatolino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc395bc71e02a7726565725ce026758f948b2d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc395bc71e02a7726565725ce026758f948b2d76", "html_url": "https://github.com/rust-lang/rust/commit/bc395bc71e02a7726565725ce026758f948b2d76"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "ae756aa75ac63a16246820f4b93fc2975a3b0df2", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812a7b540e929bb1688880541fb4c8e3b80bf6d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812a7b540e929bb1688880541fb4c8e3b80bf6d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=1812a7b540e929bb1688880541fb4c8e3b80bf6d", "patch": "@@ -630,11 +630,8 @@ fn emit_vtable_methods(bcx: @Block,\n         debug!(\"(making impl vtable) emitting method {} at subst {}\",\n                m.repr(tcx),\n                substs.repr(tcx));\n-        let fty = ty::subst_tps(tcx,\n-                                substs,\n-                                None,\n-                                ty::mk_bare_fn(tcx, m.fty.clone()));\n-        if m.generics.has_type_params() || ty::type_has_self(fty) {\n+        if m.generics.has_type_params() ||\n+           ty::type_has_self(ty::mk_bare_fn(tcx, m.fty.clone())) {\n             debug!(\"(making impl vtable) method has self or type params: {}\",\n                    tcx.sess.str_of(ident));\n             C_null(Type::nil().ptr_to())"}, {"sha": "af9633d679e655ace507a228218af95ee776e2fb", "filename": "src/test/run-pass/trait-cast-generic.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1812a7b540e929bb1688880541fb4c8e3b80bf6d/src%2Ftest%2Frun-pass%2Ftrait-cast-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812a7b540e929bb1688880541fb4c8e3b80bf6d/src%2Ftest%2Frun-pass%2Ftrait-cast-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast-generic.rs?ref=1812a7b540e929bb1688880541fb4c8e3b80bf6d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing casting of a generic Struct to a Trait with a generic method.\n+// This is test for issue 10955.\n+#[allow(unused_variable)];\n+\n+trait Foo {\n+    fn f<A>(a: A) -> A {\n+        a\n+    }\n+}\n+\n+struct Bar<T> {\n+    x: T,\n+}\n+\n+impl<T> Foo for Bar<T> { }\n+\n+pub fn main() {\n+    let a = Bar { x: 1 };\n+    let b = &a as &Foo;\n+}"}]}