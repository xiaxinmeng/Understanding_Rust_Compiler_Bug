{"sha": "f450b2b379794ba9f367f9dadbd2d70913da8560", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTBiMmIzNzk3OTRiYTlmMzY3ZjlkYWRiZDJkNzA5MTNkYTg1NjA=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-16T09:36:43Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-16T13:57:56Z"}, "message": "Remove CloneableTuple and ImmutableTuple traits\n\nThese are adequately covered by the Tuple2 trait.", "tree": {"sha": "a87a5ecceb67042fc962f0cc372c8cf950482ba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87a5ecceb67042fc962f0cc372c8cf950482ba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f450b2b379794ba9f367f9dadbd2d70913da8560", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f450b2b379794ba9f367f9dadbd2d70913da8560", "html_url": "https://github.com/rust-lang/rust/commit/f450b2b379794ba9f367f9dadbd2d70913da8560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f450b2b379794ba9f367f9dadbd2d70913da8560/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0654c47c0d47478cdafec89ae250a86b4f2c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0654c47c0d47478cdafec89ae250a86b4f2c17", "html_url": "https://github.com/rust-lang/rust/commit/cf0654c47c0d47478cdafec89ae250a86b4f2c17"}], "stats": {"total": 102, "additions": 11, "deletions": 91}, "files": [{"sha": "03c67276049ec32fefa8ac3e633b5109737554c2", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -95,13 +95,9 @@ syn keyword rustTrait Buffer Writer Reader Seek\n syn keyword rustTrait Str StrVector StrSlice OwnedStr IntoMaybeOwned\n syn keyword rustTrait IterBytes\n syn keyword rustTrait ToStr IntoStr\n-syn keyword rustTrait CloneableTuple ImmutableTuple\n syn keyword rustTrait Tuple1 Tuple2 Tuple3 Tuple4\n syn keyword rustTrait Tuple5 Tuple6 Tuple7 Tuple8\n syn keyword rustTrait Tuple9 Tuple10 Tuple11 Tuple12\n-syn keyword rustTrait ImmutableTuple1 ImmutableTuple2 ImmutableTuple3 ImmutableTuple4\n-syn keyword rustTrait ImmutableTuple5 ImmutableTuple6 ImmutableTuple7 ImmutableTuple8\n-syn keyword rustTrait ImmutableTuple9 ImmutableTuple10 ImmutableTuple11 ImmutableTuple12\n syn keyword rustTrait ImmutableEqVector ImmutableTotalOrdVector ImmutableCloneableVector\n syn keyword rustTrait OwnedVector OwnedCloneableVector OwnedEqVector MutableVector\n syn keyword rustTrait Vector VectorVector CloneableVector ImmutableVector"}, {"sha": "b796535371f7a0be7c44f16e799a5c118c09d216", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -529,7 +529,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*c_void| -> T) -> T {\n             let mut tmps = vec::with_capacity(env.len());\n \n             for pair in env.iter() {\n-                let kv = format!(\"{}={}\", pair.first(), pair.second());\n+                let kv = format!(\"{}={}\", *pair.ref0(), *pair.ref1());\n                 tmps.push(kv.to_c_str());\n             }\n \n@@ -553,7 +553,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n             let mut blk = ~[];\n \n             for pair in env.iter() {\n-                let kv = format!(\"{}={}\", pair.first(), pair.second());\n+                let kv = format!(\"{}={}\", *pair.ref0(), *pair.ref1());\n                 blk.push_all(kv.as_bytes());\n                 blk.push(0);\n             }"}, {"sha": "fc5e48a161f1329653829a7dac036cea136f8089", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -599,7 +599,7 @@ fn const_expr_unadjusted(cx: @CrateContext, e: &ast::Expr,\n                 const_eval::const_uint(i) => i as uint,\n                 _ => cx.sess.span_bug(count.span, \"count must be integral const expression.\")\n             };\n-            let vs = vec::from_elem(n, const_expr(cx, elem, is_local).first());\n+            let vs = vec::from_elem(n, const_expr(cx, elem, is_local).val0());\n             let v = if vs.iter().any(|vi| val_ty(*vi) != llunitty) {\n                 C_struct(vs, false)\n             } else {"}, {"sha": "0dcbfe491c312e3eb121bc4c0f23bfb660a875ec", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -4604,7 +4604,7 @@ pub fn determine_inherited_purity(parent: (ast::Purity, ast::NodeId),\n     // purity inferred for it, then check it under its parent's purity.\n     // Otherwise, use its own\n     match child_sigil {\n-        ast::BorrowedSigil if child.first() == ast::ImpureFn => parent,\n+        ast::BorrowedSigil if child.val0() == ast::ImpureFn => parent,\n         _ => child\n     }\n }"}, {"sha": "e5a89fc42e1521227a2029373d607ffdcafae7ef", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -2611,7 +2611,7 @@ mod tests {\n         assert_eq!(vi.size_hint(), (10, Some(10)));\n \n         assert_eq!(c.take(5).size_hint(), (5, Some(5)));\n-        assert_eq!(c.skip(5).size_hint().second(), None);\n+        assert_eq!(c.skip(5).size_hint().val1(), None);\n         assert_eq!(c.take_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.skip_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.enumerate().size_hint(), (uint::MAX, None));"}, {"sha": "bd21bb4e75444a5b5fd58ea0dfc3f8e51c1113c5", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -67,7 +67,6 @@ pub use io::{Buffer, Writer, Reader, Seek};\n pub use str::{Str, StrVector, StrSlice, OwnedStr, IntoMaybeOwned};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, IntoStr};\n-pub use tuple::{CloneableTuple, ImmutableTuple};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};"}, {"sha": "0a7f513581c0db0c31014cae742555b2d040711f", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -567,14 +567,14 @@ impl<'a> Iterator<&'a str> for StrSplits<'a> {\n // Helper functions used for Unicode normalization\n fn canonical_sort(comb: &mut [(char, u8)]) {\n     use iter::range;\n-    use tuple::CloneableTuple;\n+    use tuple::Tuple2;\n \n     let len = comb.len();\n     for i in range(0, len) {\n         let mut swapped = false;\n         for j in range(1, len-i) {\n-            let classA = comb[j-1].second();\n-            let classB = comb[j].second();\n+            let classA = *comb[j-1].ref1();\n+            let classB = *comb[j].ref1();\n             if classA != 0 && classB != 0 && classA > classB {\n                 comb.swap(j-1, j);\n                 swapped = true;"}, {"sha": "7a81e69f30ac8b717c8f68f00593692dd0f31c3b", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 1, "deletions": 76, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -19,66 +19,6 @@ use fmt;\n use result::{Ok, Err};\n use to_str::ToStr;\n \n-/// Method extensions to pairs where both types satisfy the `Clone` bound\n-pub trait CloneableTuple<T, U> {\n-    /// Return the first element of self\n-    fn first(&self) -> T;\n-    /// Return the second element of self\n-    fn second(&self) -> U;\n-    /// Return the results of swapping the two elements of self\n-    fn swap(&self) -> (U, T);\n-}\n-\n-impl<T:Clone,U:Clone> CloneableTuple<T, U> for (T, U) {\n-    /// Return the first element of self\n-    #[inline]\n-    fn first(&self) -> T {\n-        match *self {\n-            (ref t, _) => (*t).clone(),\n-        }\n-    }\n-\n-    /// Return the second element of self\n-    #[inline]\n-    fn second(&self) -> U {\n-        match *self {\n-            (_, ref u) => (*u).clone(),\n-        }\n-    }\n-\n-    /// Return the results of swapping the two elements of self\n-    #[inline]\n-    fn swap(&self) -> (U, T) {\n-        match (*self).clone() {\n-            (t, u) => (u, t),\n-        }\n-    }\n-}\n-\n-/// Method extensions for pairs where the types don't necessarily satisfy the\n-/// `Clone` bound\n-pub trait ImmutableTuple<T, U> {\n-    /// Return a reference to the first element of self\n-    fn first_ref<'a>(&'a self) -> &'a T;\n-    /// Return a reference to the second element of self\n-    fn second_ref<'a>(&'a self) -> &'a U;\n-}\n-\n-impl<T, U> ImmutableTuple<T, U> for (T, U) {\n-    #[inline]\n-    fn first_ref<'a>(&'a self) -> &'a T {\n-        match *self {\n-            (ref t, _) => t,\n-        }\n-    }\n-    #[inline]\n-    fn second_ref<'a>(&'a self) -> &'a U {\n-        match *self {\n-            (_, ref u) => u,\n-        }\n-    }\n-}\n-\n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {\n     ($(\n@@ -339,26 +279,11 @@ mod tests {\n     use clone::Clone;\n     use cmp::*;\n \n-    #[test]\n-    fn test_tuple_ref() {\n-        let x = (~\"foo\", ~\"bar\");\n-        assert_eq!(x.first_ref(), &~\"foo\");\n-        assert_eq!(x.second_ref(), &~\"bar\");\n-    }\n-\n-    #[test]\n-    fn test_tuple() {\n-        assert_eq!((948, 4039.48).first(), 948);\n-        assert_eq!((34.5, ~\"foo\").second(), ~\"foo\");\n-        assert_eq!(('a', 2).swap(), (2, 'a'));\n-    }\n-\n     #[test]\n     fn test_clone() {\n         let a = (1, ~\"2\");\n         let b = a.clone();\n-        assert_eq!(a.first(), b.first());\n-        assert_eq!(a.second(), b.second());\n+        assert_eq!(a, b);\n     }\n \n     #[test]"}, {"sha": "51eb65b1d5c7ed7beed723a61c8946523f002f46", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f450b2b379794ba9f367f9dadbd2d70913da8560/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=f450b2b379794ba9f367f9dadbd2d70913da8560", "patch": "@@ -90,8 +90,8 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 managed: @Cons((), st.managed),\n                 unique: ~Cons((), @*st.unique),\n-                tuple: (@Cons((), st.tuple.first()),\n-                        ~Cons((), @*st.tuple.second())),\n+                tuple: (@Cons((), st.tuple.ref0().clone()),\n+                        ~Cons((), @*st.tuple.ref1().clone())),\n                 vec: st.vec + &[@Cons((), *st.vec.last().unwrap())],\n                 res: r(@Cons((), st.res._l))\n             }"}]}