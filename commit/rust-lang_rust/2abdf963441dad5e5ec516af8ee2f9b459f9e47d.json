{"sha": "2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYmRmOTYzNDQxZGFkNWU1ZWM1MTZhZjhlZTJmOWI0NTlmOWU0N2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-22T14:51:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-28T17:27:57Z"}, "message": "Add an AST sanity checking pass and use it to catch some illegal lifetime/label names", "tree": {"sha": "903a774d07993a87ffbe0c7f3f0ec77e1cec4d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903a774d07993a87ffbe0c7f3f0ec77e1cec4d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "html_url": "https://github.com/rust-lang/rust/commit/2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1776fe244d8603006536dceb7a21967e1c21f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1776fe244d8603006536dceb7a21967e1c21f9c", "html_url": "https://github.com/rust-lang/rust/commit/f1776fe244d8603006536dceb7a21967e1c21f9c"}], "stats": {"total": 141, "additions": 139, "deletions": 2}, "files": [{"sha": "41086b5d1c990651cfdb774e595b3335ee5330a7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -204,6 +204,12 @@ declare_lint! {\n     \"object-unsafe non-principal fragments in object types were erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub LIFETIME_UNDERSCORE,\n+    Warn,\n+    \"lifetimes or labels named `'_` were erroneously allowed\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -242,7 +248,8 @@ impl LintPass for HardwiredLints {\n             SUPER_OR_SELF_IN_GLOBAL_PATH,\n             UNSIZED_IN_TUPLE,\n             OBJECT_UNSAFE_FRAGMENT,\n-            HR_LIFETIME_IN_ASSOC_TYPE\n+            HR_LIFETIME_IN_ASSOC_TYPE,\n+            LIFETIME_UNDERSCORE\n         )\n     }\n }"}, {"sha": "570135e071378fc132bd2915c59854e64cd22284", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -38,7 +38,7 @@ use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n use rustc::hir::lowering::lower_crate;\n-use rustc_passes::{no_asm, loops, consts, rvalues, static_recursion};\n+use rustc_passes::{ast_sanity, no_asm, loops, consts, rvalues, static_recursion};\n use rustc_const_eval::check_match;\n use super::Compilation;\n \n@@ -166,6 +166,10 @@ pub fn compile_input(sess: &Session,\n              \"early lint checks\",\n              || lint::check_ast_crate(sess, &expanded_crate));\n \n+        time(sess.time_passes(),\n+             \"AST sanity checking\",\n+             || ast_sanity::check_crate(sess, &expanded_crate));\n+\n         let (analysis, resolutions, mut hir_forest) = {\n             lower_and_resolve(sess, &id, &mut defs, &expanded_crate,\n                               &sess.dep_graph, control.make_glob_map)"}, {"sha": "ed12d0d9f3c11230f0b08d465f75c11f18065f1a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -202,6 +202,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(HR_LIFETIME_IN_ASSOC_TYPE),\n             reference: \"issue #33685 <https://github.com/rust-lang/rust/issues/33685>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LIFETIME_UNDERSCORE),\n+            reference: \"RFC 1177 <https://github.com/rust-lang/rfcs/pull/1177>\",\n+        },\n         ]);\n \n     // We have one lint pass defined specially"}, {"sha": "22f73896f099f3bc72cafade3847b3f2c7fc0203", "filename": "src/librustc_passes/ast_sanity.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_passes%2Fast_sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_passes%2Fast_sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_sanity.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Sanity check AST before lowering it to HIR\n+//\n+// This pass is supposed to catch things that fit into AST data structures,\n+// but not permitted by the language. It runs after expansion when AST is frozen,\n+// so it can check for erroneous constructions produced by syntax extensions.\n+// This pass is supposed to perform only simple checks not requiring name resolution\n+// or type checking or some other kind of complex analysis.\n+\n+use rustc::lint;\n+use rustc::session::Session;\n+use syntax::ast::*;\n+use syntax::codemap::Span;\n+use syntax::errors;\n+use syntax::parse::token::keywords;\n+use syntax::visit::{self, Visitor};\n+\n+struct SanityChecker<'a> {\n+    session: &'a Session,\n+}\n+\n+impl<'a> SanityChecker<'a> {\n+    fn err_handler(&self) -> &errors::Handler {\n+        &self.session.parse_sess.span_diagnostic\n+    }\n+\n+    fn check_label(&self, label: Ident, span: Span, id: NodeId) {\n+        if label.name == keywords::StaticLifetime.name() {\n+            self.err_handler().span_err(span, &format!(\"invalid label name `{}`\", label.name));\n+        }\n+        if label.name.as_str() == \"'_\" {\n+            self.session.add_lint(\n+                lint::builtin::LIFETIME_UNDERSCORE, id, span,\n+                format!(\"invalid label name `{}`\", label.name)\n+            );\n+        }\n+    }\n+}\n+\n+impl<'a, 'v> Visitor<'v> for SanityChecker<'a> {\n+    fn visit_lifetime(&mut self, lt: &Lifetime) {\n+        if lt.name.as_str() == \"'_\" {\n+            self.session.add_lint(\n+                lint::builtin::LIFETIME_UNDERSCORE, lt.id, lt.span,\n+                format!(\"invalid lifetime name `{}`\", lt.name)\n+            );\n+        }\n+\n+        visit::walk_lifetime(self, lt)\n+    }\n+\n+    fn visit_expr(&mut self, expr: &Expr) {\n+        match expr.node {\n+            ExprKind::While(_, _, Some(ident)) | ExprKind::Loop(_, Some(ident)) |\n+            ExprKind::WhileLet(_, _, _, Some(ident)) | ExprKind::ForLoop(_, _, _, Some(ident)) => {\n+                self.check_label(ident, expr.span, expr.id);\n+            }\n+            ExprKind::Break(Some(ident)) | ExprKind::Again(Some(ident)) => {\n+                self.check_label(ident.node, ident.span, expr.id);\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_expr(self, expr)\n+    }\n+}\n+\n+pub fn check_crate(session: &Session, krate: &Crate) {\n+    visit::walk_crate(&mut SanityChecker { session: session }, krate)\n+}"}, {"sha": "9e5cc13904097434fb315cf5642d54c49d0298d1", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -37,6 +37,7 @@ extern crate rustc_const_math;\n \n pub mod diagnostics;\n \n+pub mod ast_sanity;\n pub mod consts;\n pub mod loops;\n pub mod no_asm;"}, {"sha": "a0fb25ea06eac2546f697e3c82221d8569c78a55", "filename": "src/test/compile-fail/label-static.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Ftest%2Fcompile-fail%2Flabel-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Ftest%2Fcompile-fail%2Flabel-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flabel-static.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    'static: loop { //~ ERROR invalid label name `'static`\n+        break 'static //~ ERROR invalid label name `'static`\n+    }\n+}"}, {"sha": "102d3576e5467922bb8afb530b8d8c197f3300df", "filename": "src/test/compile-fail/lifetime-underscore.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abdf963441dad5e5ec516af8ee2f9b459f9e47d/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs?ref=2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(lifetime_underscore)]\n+\n+fn _f<'_>() //~ ERROR invalid lifetime name `'_`\n+//~^ WARN this was previously accepted\n+    -> &'_ u8 //~ ERROR invalid lifetime name `'_`\n+    //~^ WARN this was previously accepted\n+{\n+    panic!();\n+}\n+\n+fn main() {\n+    '_: loop { //~ ERROR invalid label name `'_`\n+    //~^ WARN this was previously accepted\n+        break '_ //~ ERROR invalid label name `'_`\n+        //~^ WARN this was previously accepted\n+    }\n+}"}]}