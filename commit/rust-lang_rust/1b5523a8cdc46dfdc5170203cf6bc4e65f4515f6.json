{"sha": "1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "node_id": "C_kwDOAAsO6NoAKDFiNTUyM2E4Y2RjNDZkZmRjNTE3MDIwM2NmNmJjNGU2NWY0NTE1ZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T21:01:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T21:01:20Z"}, "message": "Auto merge of #14913 - HKalbasi:fix14844, r=HKalbasi\n\nEvaluate `UnevalutedConst` before trait solving\n\ncc #14844", "tree": {"sha": "0c9530b187aa6dc2ef4fe966478ed6bf74766c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9530b187aa6dc2ef4fe966478ed6bf74766c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "html_url": "https://github.com/rust-lang/rust/commit/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "html_url": "https://github.com/rust-lang/rust/commit/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3"}, {"sha": "cd4bffdd69c33e3987307ef06db3096385fbeec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4bffdd69c33e3987307ef06db3096385fbeec9", "html_url": "https://github.com/rust-lang/rust/commit/cd4bffdd69c33e3987307ef06db3096385fbeec9"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "e33d8f1795e2e0198982ad05c34df73f43722791", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "patch": "@@ -15,11 +15,11 @@ use triomphe::Arc;\n \n use super::{InferOk, InferResult, InferenceContext, TypeError};\n use crate::{\n-    db::HirDatabase, fold_tys_and_consts, static_lifetime, to_chalk_trait_id, traits::FnTrait,\n-    AliasEq, AliasTy, BoundVar, Canonical, Const, ConstValue, DebruijnIndex, GenericArg,\n-    GenericArgData, Goal, Guidance, InEnvironment, InferenceVar, Interner, Lifetime, ParamKind,\n-    ProjectionTy, ProjectionTyExt, Scalar, Solution, Substitution, TraitEnvironment, Ty, TyBuilder,\n-    TyExt, TyKind, VariableKind,\n+    consteval::unknown_const, db::HirDatabase, fold_tys_and_consts, static_lifetime,\n+    to_chalk_trait_id, traits::FnTrait, AliasEq, AliasTy, BoundVar, Canonical, Const, ConstValue,\n+    DebruijnIndex, GenericArg, GenericArgData, Goal, Guidance, InEnvironment, InferenceVar,\n+    Interner, Lifetime, ParamKind, ProjectionTy, ProjectionTyExt, Scalar, Solution, Substitution,\n+    TraitEnvironment, Ty, TyBuilder, TyExt, TyKind, VariableKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -256,10 +256,10 @@ impl<'a> InferenceTable<'a> {\n                                 {\n                                     eval\n                                 } else {\n-                                    c\n+                                    unknown_const(c.data(Interner).ty.clone())\n                                 }\n                             } else {\n-                                c\n+                                unknown_const(c.data(Interner).ty.clone())\n                             }\n                         }\n                         _ => c,"}, {"sha": "8f4b807f560b40b20dac4e8623fb4aa40c2cd541", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "patch": "@@ -1912,3 +1912,26 @@ fn main() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn regression_14844_2() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: fn\n+pub const ONE: usize = 1;\n+\n+pub type MyInner = Inner<ONE>;\n+\n+pub struct Inner<const P: usize>();\n+\n+impl Inner<1> {\n+    fn map<F>(&self, func: F) -> bool\n+    where\n+        F: Fn(&MyInner) -> bool,\n+    {\n+        func(self)\n+    }\n+}\n+        \"#,\n+    );\n+}"}, {"sha": "f40b7db3a5512e28accba338c0d0703432d49d8c", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "patch": "@@ -2,7 +2,7 @@\n \n use std::env::var;\n \n-use chalk_ir::GoalData;\n+use chalk_ir::{fold::TypeFoldable, DebruijnIndex, GoalData};\n use chalk_recursive::Cache;\n use chalk_solve::{logging_db::LoggingRustIrDatabase, rust_ir, Solver};\n \n@@ -16,9 +16,9 @@ use stdx::panic_context;\n use triomphe::Arc;\n \n use crate::{\n-    db::HirDatabase, infer::unify::InferenceTable, AliasEq, AliasTy, Canonical, DomainGoal, Goal,\n-    Guidance, InEnvironment, Interner, ProjectionTy, ProjectionTyExt, Solution, TraitRefExt, Ty,\n-    TyKind, WhereClause,\n+    db::HirDatabase, infer::unify::InferenceTable, utils::UnevaluatedConstEvaluatorFolder, AliasEq,\n+    AliasTy, Canonical, DomainGoal, Goal, Guidance, InEnvironment, Interner, ProjectionTy,\n+    ProjectionTyExt, Solution, TraitRefExt, Ty, TyKind, WhereClause,\n };\n \n /// This controls how much 'time' we give the Chalk solver before giving up.\n@@ -106,6 +106,12 @@ pub(crate) fn trait_solve_query(\n         }\n     }\n \n+    // Chalk see `UnevaluatedConst` as a unique concrete value, but we see it as an alias for another const. So\n+    // we should get rid of it when talking to chalk.\n+    let goal = goal\n+        .try_fold_with(&mut UnevaluatedConstEvaluatorFolder { db }, DebruijnIndex::INNERMOST)\n+        .unwrap();\n+\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n     let u_canonical = chalk_ir::UCanonical { canonical: goal, universes: 1 };"}, {"sha": "f60b4607f224c825824144c54f7d4a5006308499", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=1b5523a8cdc46dfdc5170203cf6bc4e65f4515f6", "patch": "@@ -4,7 +4,11 @@\n use std::iter;\n \n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, fold::Shift, BoundVar, DebruijnIndex, Mutability};\n+use chalk_ir::{\n+    cast::Cast,\n+    fold::{FallibleTypeFolder, Shift},\n+    BoundVar, DebruijnIndex, Mutability,\n+};\n use either::Either;\n use hir_def::{\n     db::DefDatabase,\n@@ -26,8 +30,8 @@ use smallvec::{smallvec, SmallVec};\n use stdx::never;\n \n use crate::{\n-    db::HirDatabase, ChalkTraitId, GenericArg, Interner, Substitution, TraitRef, TraitRefExt, Ty,\n-    TyExt, WhereClause,\n+    consteval::unknown_const, db::HirDatabase, ChalkTraitId, Const, ConstScalar, GenericArg,\n+    Interner, Substitution, TraitRef, TraitRefExt, Ty, TyExt, WhereClause,\n };\n \n pub(crate) fn fn_traits(\n@@ -403,3 +407,36 @@ pub(crate) fn pattern_matching_dereference_count(\n     }\n     r\n }\n+\n+pub(crate) struct UnevaluatedConstEvaluatorFolder<'a> {\n+    pub(crate) db: &'a dyn HirDatabase,\n+}\n+\n+impl FallibleTypeFolder<Interner> for UnevaluatedConstEvaluatorFolder<'_> {\n+    type Error = ();\n+\n+    fn as_dyn(&mut self) -> &mut dyn FallibleTypeFolder<Interner, Error = ()> {\n+        self\n+    }\n+\n+    fn interner(&self) -> Interner {\n+        Interner\n+    }\n+\n+    fn try_fold_const(\n+        &mut self,\n+        constant: Const,\n+        _outer_binder: DebruijnIndex,\n+    ) -> Result<Const, Self::Error> {\n+        if let chalk_ir::ConstValue::Concrete(c) = &constant.data(Interner).value {\n+            if let ConstScalar::UnevaluatedConst(id, subst) = &c.interned {\n+                if let Ok(eval) = self.db.const_eval(*id, subst.clone()) {\n+                    return Ok(eval);\n+                } else {\n+                    return Ok(unknown_const(constant.data(Interner).ty.clone()));\n+                }\n+            }\n+        }\n+        Ok(constant)\n+    }\n+}"}]}