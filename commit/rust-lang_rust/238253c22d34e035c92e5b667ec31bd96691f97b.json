{"sha": "238253c22d34e035c92e5b667ec31bd96691f97b", "node_id": "C_kwDOAAsO6NoAKDIzODI1M2MyMmQzNGUwMzVjOTJlNWI2NjdlYzMxYmQ5NjY5MWY5N2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T10:38:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T10:38:19Z"}, "message": "Auto merge of #12355 - ruabmbua:fix-inference-pattern-wildcards, r=flodiebold\n\nFix inference when pattern matching a tuple field with a wildcard\n\nThis should fix the following issue:  https://github.com/rust-lang/rust-analyzer/issues/12331\n\n* Replaced the `err_ty` in `infer_pat()` with a new type variable.\n* Had to change the iterator code a bit, to get around multiple mutable borrows of `self` in `infer_pat()`.\nAlso added a test\n* Also added a test", "tree": {"sha": "f616962e81138f2ae0b9c807f95d6ca0a5199482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f616962e81138f2ae0b9c807f95d6ca0a5199482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/238253c22d34e035c92e5b667ec31bd96691f97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/238253c22d34e035c92e5b667ec31bd96691f97b", "html_url": "https://github.com/rust-lang/rust/commit/238253c22d34e035c92e5b667ec31bd96691f97b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/238253c22d34e035c92e5b667ec31bd96691f97b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c626034f11506a8f64c42c56edf41bea107fb210", "url": "https://api.github.com/repos/rust-lang/rust/commits/c626034f11506a8f64c42c56edf41bea107fb210", "html_url": "https://github.com/rust-lang/rust/commit/c626034f11506a8f64c42c56edf41bea107fb210"}, {"sha": "86bb27f1a4029ebf7d487add52b1dc2132c154d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/86bb27f1a4029ebf7d487add52b1dc2132c154d9", "html_url": "https://github.com/rust-lang/rust/commit/86bb27f1a4029ebf7d487add52b1dc2132c154d9"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "dbce0f7cd4fb89e3ef0e0e7635ed690b7963a520", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/238253c22d34e035c92e5b667ec31bd96691f97b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238253c22d34e035c92e5b667ec31bd96691f97b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=238253c22d34e035c92e5b667ec31bd96691f97b", "patch": "@@ -1,6 +1,6 @@\n //! Type inference for patterns.\n \n-use std::iter::repeat;\n+use std::iter::repeat_with;\n \n use chalk_ir::Mutability;\n use hir_def::{\n@@ -140,15 +140,28 @@ impl<'a> InferenceContext<'a> {\n                     }\n                     None => ((&args[..], &[][..]), 0),\n                 };\n-                let err_ty = self.err_ty();\n-                let mut expectations_iter =\n-                    expectations.iter().map(|a| a.assert_ty_ref(Interner)).chain(repeat(&err_ty));\n-                let mut infer_pat = |(&pat, ty)| self.infer_pat(pat, ty, default_bm);\n+                let mut expectations_iter = expectations\n+                    .iter()\n+                    .cloned()\n+                    .map(|a| a.assert_ty_ref(Interner).clone())\n+                    .chain(repeat_with(|| self.table.new_type_var()));\n \n                 let mut inner_tys = Vec::with_capacity(n_uncovered_patterns + args.len());\n-                inner_tys.extend(pre.iter().zip(expectations_iter.by_ref()).map(&mut infer_pat));\n-                inner_tys.extend(expectations_iter.by_ref().take(n_uncovered_patterns).cloned());\n-                inner_tys.extend(post.iter().zip(expectations_iter).map(infer_pat));\n+\n+                inner_tys\n+                    .extend(expectations_iter.by_ref().take(n_uncovered_patterns + args.len()));\n+\n+                // Process pre\n+                for (ty, pat) in inner_tys.iter_mut().zip(pre) {\n+                    *ty = self.infer_pat(*pat, ty, default_bm);\n+                }\n+\n+                // Process post\n+                for (ty, pat) in\n+                    inner_tys.iter_mut().skip(pre.len() + n_uncovered_patterns).zip(post)\n+                {\n+                    *ty = self.infer_pat(*pat, ty, default_bm);\n+                }\n \n                 TyKind::Tuple(inner_tys.len(), Substitution::from_iter(Interner, inner_tys))\n                     .intern(Interner)"}, {"sha": "399553356b04112997c951e2de528175f9f441f7", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/238253c22d34e035c92e5b667ec31bd96691f97b/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238253c22d34e035c92e5b667ec31bd96691f97b/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=238253c22d34e035c92e5b667ec31bd96691f97b", "patch": "@@ -969,3 +969,23 @@ fn main() {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn tuple_wildcard() {\n+    check_types(\n+        r#\"\n+fn main() {\n+    enum Option<T> {Some(T), None}\n+    use Option::*;\n+\n+    let mut x = None;\n+    x;\n+  //^ Option<(i32, i32)>\n+\n+    if let Some((_, _a)) = x {}\n+\n+    x = Some((1, 2));\n+}\n+        \"#,\n+    );\n+}"}]}