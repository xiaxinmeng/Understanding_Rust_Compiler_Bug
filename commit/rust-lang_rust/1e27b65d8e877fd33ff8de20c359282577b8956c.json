{"sha": "1e27b65d8e877fd33ff8de20c359282577b8956c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMjdiNjVkOGU4NzdmZDMzZmY4ZGUyMGMzNTkyODI1NzdiODk1NmM=", "commit": {"author": {"name": "Noah", "email": "33094578+coolreader18@users.noreply.github.com", "date": "2020-12-03T18:37:19Z"}, "committer": {"name": "Noah", "email": "33094578+coolreader18@users.noreply.github.com", "date": "2020-12-12T20:45:54Z"}, "message": "Recover on `const impl<> X for Y`", "tree": {"sha": "0778024221a5563ad0ff9060b840ba13467eec3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0778024221a5563ad0ff9060b840ba13467eec3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e27b65d8e877fd33ff8de20c359282577b8956c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEBPnEEc45c65Y0bFu6MFBRq4zcZUFAl/VLAIACgkQ6MFBRq4z\ncZUrVwf+NtcVZrk8KeLTeBz2cLa77wHD0hZOIesryh6lTju9cX/c0pw0aEB1vTgn\njkzzjMjfR8vwV8Y33t2uYDYL+3njs0HOPp0cKwF64uUms80XNZQj3Cbx6bPmxZ7W\n/QH5c+ZV5iSpj5gdYcdhex3OofcXKB8k6xwv+D1GyNoxfoOxd+SOyx5A2sXJy7OF\nywfIDVL7mG+gu4y22CvKojblGvch+Uo3IWCYjst/Zp0PRvFTzBKX2s2+o09iqNUR\nNNDfs4RkmU4xPSdrFHfxalW0u77o6/WdTUqdKZoAeGLQ+IA5tc2xszy6CqbCJTe7\nbXPvjC738YnJ9njyDNqQjW/S3pqDBg==\n=LdBX\n-----END PGP SIGNATURE-----", "payload": "tree 0778024221a5563ad0ff9060b840ba13467eec3f\nparent b4def89d76896eec73b4af33642ba7e5eb53c567\nauthor Noah <33094578+coolreader18@users.noreply.github.com> 1607020639 -0600\ncommitter Noah <33094578+coolreader18@users.noreply.github.com> 1607805954 -0600\n\nRecover on `const impl<> X for Y`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e27b65d8e877fd33ff8de20c359282577b8956c", "html_url": "https://github.com/rust-lang/rust/commit/1e27b65d8e877fd33ff8de20c359282577b8956c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e27b65d8e877fd33ff8de20c359282577b8956c/comments", "author": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "committer": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4def89d76896eec73b4af33642ba7e5eb53c567", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4def89d76896eec73b4af33642ba7e5eb53c567", "html_url": "https://github.com/rust-lang/rust/commit/b4def89d76896eec73b4af33642ba7e5eb53c567"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "4c92c198679f99ad8cf09883cba6bd488d5fac20", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1e27b65d8e877fd33ff8de20c359282577b8956c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e27b65d8e877fd33ff8de20c359282577b8956c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=1e27b65d8e877fd33ff8de20c359282577b8956c", "patch": "@@ -247,9 +247,14 @@ impl<'a> Parser<'a> {\n             (ident, ItemKind::Static(ty, m, expr))\n         } else if let Const::Yes(const_span) = self.parse_constness() {\n             // CONST ITEM\n-            self.recover_const_mut(const_span);\n-            let (ident, ty, expr) = self.parse_item_global(None)?;\n-            (ident, ItemKind::Const(def(), ty, expr))\n+            if self.token.is_keyword(kw::Impl) {\n+                // recover from `const impl`, suggest `impl const`\n+                self.recover_const_impl(const_span, attrs, def())?\n+            } else {\n+                self.recover_const_mut(const_span);\n+                let (ident, ty, expr) = self.parse_item_global(None)?;\n+                (ident, ItemKind::Const(def(), ty, expr))\n+            }\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n             self.parse_item_trait(attrs, lo)?\n@@ -988,6 +993,36 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Recover on `const impl` with `const` already eaten.\n+    fn recover_const_impl(\n+        &mut self,\n+        const_span: Span,\n+        attrs: &mut Vec<Attribute>,\n+        defaultness: Defaultness,\n+    ) -> PResult<'a, ItemInfo> {\n+        let impl_span = self.token.span;\n+        let mut err = self.expected_ident_found();\n+        let mut impl_info = self.parse_item_impl(attrs, defaultness)?;\n+        match impl_info.1 {\n+            // only try to recover if this is implementing a trait for a type\n+            ItemKind::Impl { of_trait: Some(ref trai), ref mut constness, .. } => {\n+                *constness = Const::Yes(const_span);\n+\n+                let before_trait = trai.path.span.shrink_to_lo();\n+                let const_up_to_impl = const_span.with_hi(impl_span.lo());\n+                err.multipart_suggestion(\n+                    \"you might have meant to write a const trait impl\",\n+                    vec![(const_up_to_impl, \"\".to_owned()), (before_trait, \"const \".to_owned())],\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+            }\n+            ItemKind::Impl { .. } => return Err(err),\n+            _ => unreachable!(),\n+        }\n+        Ok(impl_info)\n+    }\n+\n     /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty (= $expr)?` with\n     /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n     ///"}, {"sha": "936c90e88aaeecdd4d75270ee0865e98c0cce5b7", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-norecover.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.rs?ref=1e27b65d8e877fd33ff8de20c359282577b8956c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+const impl Foo { //~ ERROR: expected identifier, found keyword\n+    fn bar() {}\n+}\n+\n+fn main() {\n+     // shouldn't error here because we shouldn't have been able to recover above\n+     Foo::bar();\n+}"}, {"sha": "612511a479956d388544f40d7ba023fb7c77d1c4", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-norecover.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.stderr?ref=1e27b65d8e877fd33ff8de20c359282577b8956c", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found keyword `impl`\n+  --> $DIR/const-impl-norecover.rs:6:7\n+   |\n+LL | const impl Foo {\n+   |       ^^^^ expected identifier, found keyword\n+\n+error: aborting due to previous error\n+"}, {"sha": "fd3dd2cef9d1c9c8ba95d8d6e51ec9fceff8f1e1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs?ref=1e27b65d8e877fd33ff8de20c359282577b8956c", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {}\n+\n+const impl Foo for i32 {} //~ ERROR: expected identifier, found keyword\n+\n+trait Bar {}\n+\n+const impl<T: Foo> Bar for T {} //~ ERROR: expected identifier, found keyword\n+\n+const fn still_implements<T: Bar>() {}\n+\n+const _: () = still_implements::<i32>();\n+\n+fn main() {}"}, {"sha": "84fb619dc9648815d6c83b6c3bb4054c3838e787", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e27b65d8e877fd33ff8de20c359282577b8956c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr?ref=1e27b65d8e877fd33ff8de20c359282577b8956c", "patch": "@@ -0,0 +1,24 @@\n+error: expected identifier, found keyword `impl`\n+  --> $DIR/const-impl-recovery.rs:6:7\n+   |\n+LL | const impl Foo for i32 {}\n+   |       ^^^^ expected identifier, found keyword\n+   |\n+help: you might have meant to write a const trait impl\n+   |\n+LL | impl const Foo for i32 {}\n+   |--    ^^^^^\n+\n+error: expected identifier, found keyword `impl`\n+  --> $DIR/const-impl-recovery.rs:10:7\n+   |\n+LL | const impl<T: Foo> Bar for T {}\n+   |       ^^^^ expected identifier, found keyword\n+   |\n+help: you might have meant to write a const trait impl\n+   |\n+LL | impl<T: Foo> const Bar for T {}\n+   |--            ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}