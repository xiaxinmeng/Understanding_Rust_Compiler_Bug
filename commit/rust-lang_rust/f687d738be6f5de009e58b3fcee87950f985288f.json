{"sha": "f687d738be6f5de009e58b3fcee87950f985288f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODdkNzM4YmU2ZjVkZTAwOWU1OGIzZmNlZTg3OTUwZjk4NTI4OGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-01T00:32:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-01T00:32:59Z"}, "message": "Merge #7102\n\n7102: Fix completion of Default struct update syntax r=Veykril a=nick96\n\nPreviously the inserted text was always `..Default::default()` which ends up as `...Default::default()`\r\nif `.` was typed. Now  checks if the current token is `.` and inserts `.Default::default()`\r\nif it is, so `..Default::default()` is correctly completed.\r\n\r\nI think there's probably a better way to implement this context aware completion because I've seen it in other parts of rust-analyzer as a user but I'm not sure how to do it.\r\n\r\nFixes #6969\n\nCo-authored-by: Nick Spain <nicholas.spain@stileeducation.com>", "tree": {"sha": "c4c92625c917a05a732866a0b5c8970fca81034b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c92625c917a05a732866a0b5c8970fca81034b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f687d738be6f5de009e58b3fcee87950f985288f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7m27CRBK7hj4Ov3rIwAAdHIIAF5tUWnAKXVvialGXRxxO5OI\n7KeCsbP9BaZ5c2OcX2WBJhQp3A2yvmua1piY5oTF+6fPwmbrxsTpWzNf13JnDBrf\nxnyzWl2DHZKsJcHxs4e+JOBDHUM4gHIVIM499VLiwFI6An5vfldaOAFnKtOL6sTW\nfn337ScRNb177jIAvRTcp0guDweV7timbuNUhjnKZXkZVZTJ/Gq5wCmBMXagE9w4\nTpRGh7skFxsNBubjdzP0NZOdqCOYLWsrqjkI2pUsO2FdzJCPnUE0dTNZmlKbQY4T\nTEKv/gziqsp2yYRLr83v1hjsR7Nv7z3CnX6beKwHLNt1Bv02M1b2juggB4adnR4=\n=rlxe\n-----END PGP SIGNATURE-----\n", "payload": "tree c4c92625c917a05a732866a0b5c8970fca81034b\nparent 339aab37744e7bfcab1def72acb26b81da6408ce\nparent 3d95c665561709f4017f28b2fb00a0bfb4661887\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609461179 +0000\ncommitter GitHub <noreply@github.com> 1609461179 +0000\n\nMerge #7102\n\n7102: Fix completion of Default struct update syntax r=Veykril a=nick96\n\nPreviously the inserted text was always `..Default::default()` which ends up as `...Default::default()`\r\nif `.` was typed. Now  checks if the current token is `.` and inserts `.Default::default()`\r\nif it is, so `..Default::default()` is correctly completed.\r\n\r\nI think there's probably a better way to implement this context aware completion because I've seen it in other parts of rust-analyzer as a user but I'm not sure how to do it.\r\n\r\nFixes #6969\n\nCo-authored-by: Nick Spain <nicholas.spain@stileeducation.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f687d738be6f5de009e58b3fcee87950f985288f", "html_url": "https://github.com/rust-lang/rust/commit/f687d738be6f5de009e58b3fcee87950f985288f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f687d738be6f5de009e58b3fcee87950f985288f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339aab37744e7bfcab1def72acb26b81da6408ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/339aab37744e7bfcab1def72acb26b81da6408ce", "html_url": "https://github.com/rust-lang/rust/commit/339aab37744e7bfcab1def72acb26b81da6408ce"}, {"sha": "3d95c665561709f4017f28b2fb00a0bfb4661887", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d95c665561709f4017f28b2fb00a0bfb4661887", "html_url": "https://github.com/rust-lang/rust/commit/3d95c665561709f4017f28b2fb00a0bfb4661887"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "e58b9a27448b0e71c4a403800f594d7396ba7aff", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f687d738be6f5de009e58b3fcee87950f985288f/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f687d738be6f5de009e58b3fcee87950f985288f/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=f687d738be6f5de009e58b3fcee87950f985288f", "patch": "@@ -20,13 +20,17 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n \n             let missing_fields = ctx.sema.record_literal_missing_fields(record_lit);\n             if impl_default_trait && !missing_fields.is_empty() {\n+                let completion_text = \"..Default::default()\";\n+                let completion_text = completion_text\n+                    .strip_prefix(ctx.token.to_string().as_str())\n+                    .unwrap_or(completion_text);\n                 acc.add(\n                     CompletionItem::new(\n                         CompletionKind::Snippet,\n                         ctx.source_range(),\n                         \"..Default::default()\",\n                     )\n-                    .insert_text(\"..Default::default()\")\n+                    .insert_text(completion_text)\n                     .kind(CompletionItemKind::Field)\n                     .build(),\n                 );\n@@ -48,7 +52,10 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use ide_db::helpers::FamousDefs;\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{\n+        test_utils::{self, completion_list},\n+        CompletionKind,\n+    };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);\n@@ -63,6 +70,18 @@ mod tests {\n         expect.assert_eq(&actual);\n     }\n \n+    fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+        test_utils::check_edit(\n+            what,\n+            &format!(\n+                \"//- /main.rs crate:main deps:core{}\\n{}\",\n+                ra_fixture_before,\n+                FamousDefs::FIXTURE,\n+            ),\n+            &(ra_fixture_after.to_owned() + \"\\n\"),\n+        );\n+    }\n+\n     #[test]\n     fn test_record_literal_field_default() {\n         let test_code = r#\"\n@@ -101,6 +120,51 @@ fn process(f: S) {\n         );\n     }\n \n+    #[test]\n+    fn test_record_literal_field_default_completion() {\n+        check_edit(\n+            \"..Default::default()\",\n+            r#\"\n+struct S { foo: u32, bar: usize }\n+\n+impl core::default::Default for S {\n+    fn default() -> Self {\n+        S {\n+            foo: 0,\n+            bar: 0,\n+        }\n+    }\n+}\n+\n+fn process(f: S) {\n+    let other = S {\n+        foo: 5,\n+        .<|>\n+    };\n+}\n+\"#,\n+            r#\"\n+struct S { foo: u32, bar: usize }\n+\n+impl core::default::Default for S {\n+    fn default() -> Self {\n+        S {\n+            foo: 0,\n+            bar: 0,\n+        }\n+    }\n+}\n+\n+fn process(f: S) {\n+    let other = S {\n+        foo: 5,\n+        ..Default::default()\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_record_literal_field_without_default() {\n         let test_code = r#\""}]}