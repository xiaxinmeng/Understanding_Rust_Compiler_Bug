{"sha": "ab5bec25530aac43dfd64384b405c909b6e405e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWJlYzI1NTMwYWFjNDNkZmQ2NDM4NGI0MDVjOTA5YjZlNDA1ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T15:24:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T15:24:58Z"}, "message": "Auto merge of #42634 - Zoxc:for-desugar2, r=nikomatsakis\n\nChange the for-loop desugar so the `break` does not affect type inference. Fixes #42618\n\nRewrite the `for` loop desugaring to avoid contaminating the inference results. Under the older desugaring, `for x in vec![] { .. }` would erroneously type-check, even though the type of `vec![]` is unconstrained. (written by @nikomatsakis)", "tree": {"sha": "cd10ff6cf849e2c3b92dee464495dbfc83c96503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd10ff6cf849e2c3b92dee464495dbfc83c96503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5bec25530aac43dfd64384b405c909b6e405e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bec25530aac43dfd64384b405c909b6e405e3", "html_url": "https://github.com/rust-lang/rust/commit/ab5bec25530aac43dfd64384b405c909b6e405e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bec25530aac43dfd64384b405c909b6e405e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fa27928aceda1362a2266d9b9bf129999bc00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fa27928aceda1362a2266d9b9bf129999bc00a", "html_url": "https://github.com/rust-lang/rust/commit/74fa27928aceda1362a2266d9b9bf129999bc00a"}, {"sha": "1409e707a2e6b152ab66a9d836e5e367f6f066cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1409e707a2e6b152ab66a9d836e5e367f6f066cc", "html_url": "https://github.com/rust-lang/rust/commit/1409e707a2e6b152ab66a9d836e5e367f6f066cc"}], "stats": {"total": 149, "additions": 137, "deletions": 12}, "files": [{"sha": "c91fd16391aafc0b11e6fa783fe6fd595dcbc203", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=ab5bec25530aac43dfd64384b405c909b6e405e3", "patch": "@@ -191,10 +191,12 @@\n //! {\n //!     let result = match IntoIterator::into_iter(values) {\n //!         mut iter => loop {\n-//!             let x = match iter.next() {\n-//!                 Some(val) => val,\n+//!             let next;\n+//!             match iter.next() {\n+//!                 Some(val) => next = val,\n //!                 None => break,\n //!             };\n+//!             let x = next;\n //!             let () = { println!(\"{}\", x); };\n //!         },\n //!     };"}, {"sha": "62bedcdfcbe610b534042aa06bbe568745b2858e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ab5bec25530aac43dfd64384b405c909b6e405e3", "patch": "@@ -2170,11 +2170,13 @@ impl<'a> LoweringContext<'a> {\n                 //     let result = match ::std::iter::IntoIterator::into_iter(<head>) {\n                 //       mut iter => {\n                 //         [opt_ident]: loop {\n-                //           let <pat> = match ::std::iter::Iterator::next(&mut iter) {\n-                //             ::std::option::Option::Some(val) => val,\n+                //           let mut _next;\n+                //           match ::std::iter::Iterator::next(&mut iter) {\n+                //             ::std::option::Option::Some(val) => _next = val,\n                 //             ::std::option::Option::None => break\n                 //           };\n-                //           SemiExpr(<body>);\n+                //           let <pat> = _next;\n+                //           StmtExpr(<body>);\n                 //         }\n                 //       }\n                 //     };\n@@ -2186,13 +2188,22 @@ impl<'a> LoweringContext<'a> {\n \n                 let iter = self.str_to_ident(\"iter\");\n \n-                // `::std::option::Option::Some(val) => val`\n+                let next_ident = self.str_to_ident(\"_next\");\n+                let next_pat = self.pat_ident_binding_mode(e.span,\n+                                                           next_ident,\n+                                                           hir::BindByValue(hir::MutMutable));\n+\n+                // `::std::option::Option::Some(val) => next = val`\n                 let pat_arm = {\n                     let val_ident = self.str_to_ident(\"val\");\n                     let val_pat = self.pat_ident(e.span, val_ident);\n                     let val_expr = P(self.expr_ident(e.span, val_ident, val_pat.id));\n+                    let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n+                    let assign = P(self.expr(e.span,\n+                                             hir::ExprAssign(next_expr, val_expr),\n+                                             ThinVec::new()));\n                     let some_pat = self.pat_some(e.span, val_pat);\n-                    self.arm(hir_vec![some_pat], val_expr)\n+                    self.arm(hir_vec![some_pat], assign)\n                 };\n \n                 // `::std::option::Option::None => break`\n@@ -2222,10 +2233,20 @@ impl<'a> LoweringContext<'a> {\n                                                hir::MatchSource::ForLoopDesugar),\n                                 ThinVec::new()))\n                 };\n+                let match_stmt = respan(e.span, hir::StmtExpr(match_expr, self.next_id()));\n+\n+                let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n+\n+                // `let mut _next`\n+                let next_let = self.stmt_let_pat(e.span,\n+                    None,\n+                    next_pat,\n+                    hir::LocalSource::ForLoopDesugar);\n \n+                // `let <pat> = _next`\n                 let pat = self.lower_pat(pat);\n                 let pat_let = self.stmt_let_pat(e.span,\n-                    match_expr,\n+                    Some(next_expr),\n                     pat,\n                     hir::LocalSource::ForLoopDesugar);\n \n@@ -2234,7 +2255,12 @@ impl<'a> LoweringContext<'a> {\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n                 let body_stmt = respan(e.span, hir::StmtExpr(body_expr, self.next_id()));\n \n-                let loop_block = P(self.block_all(e.span, hir_vec![pat_let, body_stmt], None));\n+                let loop_block = P(self.block_all(e.span,\n+                                                  hir_vec![next_let,\n+                                                           match_stmt,\n+                                                           pat_let,\n+                                                           body_stmt],\n+                                                  None));\n \n                 // `[opt_ident]: loop { ... }`\n                 let loop_expr = hir::ExprLoop(loop_block, self.lower_opt_sp_ident(opt_ident),\n@@ -2601,14 +2627,14 @@ impl<'a> LoweringContext<'a> {\n \n     fn stmt_let_pat(&mut self,\n                     sp: Span,\n-                    ex: P<hir::Expr>,\n+                    ex: Option<P<hir::Expr>>,\n                     pat: P<hir::Pat>,\n                     source: hir::LocalSource)\n                     -> hir::Stmt {\n         let local = P(hir::Local {\n             pat: pat,\n             ty: None,\n-            init: Some(ex),\n+            init: ex,\n             id: self.next_id(),\n             span: sp,\n             attrs: ThinVec::new(),\n@@ -2626,7 +2652,7 @@ impl<'a> LoweringContext<'a> {\n             self.pat_ident(sp, ident)\n         };\n         let pat_id = pat.id;\n-        (self.stmt_let_pat(sp, ex, pat, hir::LocalSource::Normal), pat_id)\n+        (self.stmt_let_pat(sp, Some(ex), pat, hir::LocalSource::Normal), pat_id)\n     }\n \n     fn block_expr(&mut self, expr: P<hir::Expr>) -> hir::Block {"}, {"sha": "fb5553166bafb1fd070a5ad8202f72c5b8b9747d", "filename": "src/test/compile-fail/for-loop-unconstrained-element-type.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Fcompile-fail%2Ffor-loop-unconstrained-element-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Fcompile-fail%2Ffor-loop-unconstrained-element-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-unconstrained-element-type.rs?ref=ab5bec25530aac43dfd64384b405c909b6e405e3", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `for` loops don't introduce artificial\n+// constraints on the type of the binding (`i`).\n+// Subtle changes in the desugaring can cause the\n+// type of elements in the vector to (incorrectly)\n+// fallback to `!` or `()`.\n+\n+fn main() {\n+    for i in Vec::new() { } //~ ERROR type annotations needed\n+}"}, {"sha": "7a088b513347282d508a35a6c9e6228c948e5cd0", "filename": "src/test/run-pass/for-loop-lifetime-of-unbound-values.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Frun-pass%2Ffor-loop-lifetime-of-unbound-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Frun-pass%2Ffor-loop-lifetime-of-unbound-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-lifetime-of-unbound-values.rs?ref=ab5bec25530aac43dfd64384b405c909b6e405e3", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test when destructors run in a for loop. The intention is\n+// that the value for each iteration is dropped *after* the loop\n+// body has executed. This is true even when the value is assigned\n+// to a `_` pattern (and hence ignored).\n+\n+use std::cell::Cell;\n+\n+struct Flag<'a>(&'a Cell<bool>);\n+\n+impl<'a> Drop for Flag<'a> {\n+    fn drop(&mut self) {\n+        self.0.set(false)\n+    }\n+}\n+\n+fn main() {\n+    let alive2 = Cell::new(true);\n+    for _i in std::iter::once(Flag(&alive2)) {\n+        // The Flag value should be alive in the for loop body\n+        assert_eq!(alive2.get(), true);\n+    }\n+    // The Flag value should be dead outside of the loop\n+    assert_eq!(alive2.get(), false);\n+\n+    let alive = Cell::new(true);\n+    for _ in std::iter::once(Flag(&alive)) {\n+        // The Flag value should be alive in the for loop body even if it wasn't\n+        // bound by the for loop\n+        assert_eq!(alive.get(), true);\n+    }\n+    // The Flag value should be dead outside of the loop\n+    assert_eq!(alive.get(), false);\n+}"}, {"sha": "14ce23b07242c84d378af3dbe54c37e897464096", "filename": "src/test/run-pass/for-loop-mut-ref-element.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Frun-pass%2Ffor-loop-mut-ref-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Frun-pass%2Ffor-loop-mut-ref-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-mut-ref-element.rs?ref=ab5bec25530aac43dfd64384b405c909b6e405e3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that for loops can bind elements as mutable references\n+\n+fn main() {\n+    for ref mut _a in std::iter::once(true) {}\n+}\n\\ No newline at end of file"}, {"sha": "b36afcf87b3ee2fc089ff2cbb05dc0ce73b73176", "filename": "src/test/run-pass/for-loop-unconstrained-element-type-i32-fallback.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bec25530aac43dfd64384b405c909b6e405e3/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs?ref=ab5bec25530aac43dfd64384b405c909b6e405e3", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the type of `sum` falls back to `i32` here,\n+// and that the for loop desugaring doesn't inferfere with\n+// that.\n+\n+fn main() {\n+    let mut sum = 0;\n+    for i in Vec::new() {\n+        sum += i;\n+    }\n+}"}]}