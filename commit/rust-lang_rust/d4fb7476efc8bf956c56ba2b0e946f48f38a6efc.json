{"sha": "d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmI3NDc2ZWZjOGJmOTU2YzU2YmEyYjBlOTQ2ZjQ4ZjM4YTZlZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T12:18:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T12:38:32Z"}, "message": "Better names", "tree": {"sha": "43f190a26a4a8ed68fa28bbd234ca977a2f6dd6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f190a26a4a8ed68fa28bbd234ca977a2f6dd6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "html_url": "https://github.com/rust-lang/rust/commit/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0bd500363fd2953c2a469083b00be54c602ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0bd500363fd2953c2a469083b00be54c602ebb", "html_url": "https://github.com/rust-lang/rust/commit/8a0bd500363fd2953c2a469083b00be54c602ebb"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "3ba91b3f569201b8364643abaeaeb02c92cc282e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn highlight(\n     };\n \n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n-    let mut stack = highlights::Highlights::new(range_to_highlight);\n+    let mut hl = highlights::Highlights::new(range_to_highlight);\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n     let mut current_macro_rules: Option<ast::MacroRules> = None;\n@@ -98,7 +98,7 @@ pub(crate) fn highlight(\n         match event.clone().map(|it| it.into_node().and_then(ast::MacroCall::cast)) {\n             WalkEvent::Enter(Some(mc)) => {\n                 if let Some(range) = macro_call_range(&mc) {\n-                    stack.add(HlRange {\n+                    hl.add(HlRange {\n                         range,\n                         highlight: HlTag::Symbol(SymbolKind::Macro).into(),\n                         binding_hash: None,\n@@ -136,7 +136,7 @@ pub(crate) fn highlight(\n                     inside_attribute = false\n                 }\n                 if let Some((new_comments, inj)) = injection::extract_doc_comments(node) {\n-                    injection::highlight_doc_comment(new_comments, inj, &mut stack);\n+                    injection::highlight_doc_comment(new_comments, inj, &mut hl);\n                 }\n             }\n             WalkEvent::Enter(NodeOrToken::Node(node)) if ast::Attr::can_cast(node.kind()) => {\n@@ -181,7 +181,7 @@ pub(crate) fn highlight(\n         if let Some(token) = element.as_token().cloned().and_then(ast::String::cast) {\n             if token.is_raw() {\n                 let expanded = element_to_highlight.as_token().unwrap().clone();\n-                if injection::highlight_injection(&mut stack, &sema, token, expanded).is_some() {\n+                if injection::highlight_injection(&mut hl, &sema, token, expanded).is_some() {\n                     continue;\n                 }\n             }\n@@ -198,18 +198,18 @@ pub(crate) fn highlight(\n             }\n \n             if macro_rules_highlighter.highlight(element_to_highlight.clone()).is_none() {\n-                stack.add(HlRange { range, highlight, binding_hash });\n+                hl.add(HlRange { range, highlight, binding_hash });\n             }\n \n             if let Some(string) =\n                 element_to_highlight.as_token().cloned().and_then(ast::String::cast)\n             {\n-                format_string_highlighter.highlight_format_string(&mut stack, &string, range);\n+                format_string_highlighter.highlight_format_string(&mut hl, &string, range);\n                 // Highlight escape sequences\n                 if let Some(char_ranges) = string.char_ranges() {\n                     for (piece_range, _) in char_ranges.iter().filter(|(_, char)| char.is_ok()) {\n                         if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n-                            stack.add(HlRange {\n+                            hl.add(HlRange {\n                                 range: piece_range + range.start(),\n                                 highlight: HlTag::EscapeSequence.into(),\n                                 binding_hash: None,\n@@ -221,7 +221,7 @@ pub(crate) fn highlight(\n         }\n     }\n \n-    stack.to_vec()\n+    hl.to_vec()\n }\n \n fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {"}, {"sha": "0ee7bc96e21c62f0aa69b22ebb83f3f26317d05a", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "patch": "@@ -20,26 +20,26 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let ranges = highlight(db, file_id, None, false);\n+    let hl_ranges = highlight(db, file_id, None, false);\n     let text = parse.tree().syntax().to_string();\n     let mut buf = String::new();\n     buf.push_str(&STYLE);\n     buf.push_str(\"<pre><code>\");\n-    for range in &ranges {\n-        let curr = &text[range.range];\n-        if range.highlight.is_empty() {\n-            format_to!(buf, \"{}\", html_escape(curr));\n+    for r in &hl_ranges {\n+        let chunk = html_escape(&text[r.range]);\n+        if r.highlight.is_empty() {\n+            format_to!(buf, \"{}\", chunk);\n             continue;\n         }\n \n-        let class = range.highlight.to_string().replace('.', \" \");\n-        let color = match (rainbow, range.binding_hash) {\n+        let class = r.highlight.to_string().replace('.', \" \");\n+        let color = match (rainbow, r.binding_hash) {\n             (true, Some(hash)) => {\n                 format!(\" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\", hash, rainbowify(hash))\n             }\n             _ => \"\".into(),\n         };\n-        format_to!(buf, \"<span class=\\\"{}\\\"{}>{}</span>\", class, color, html_escape(curr));\n+        format_to!(buf, \"<span class=\\\"{}\\\"{}>{}</span>\", class, color, chunk);\n     }\n     buf.push_str(\"</code></pre>\");\n     buf"}, {"sha": "22d7f601a2a4d99b874336d910a98d6666739f0c", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "patch": "@@ -12,7 +12,7 @@ use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n use super::{highlights::Highlights, injector::Injector};\n \n pub(super) fn highlight_injection(\n-    acc: &mut Highlights,\n+    hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n     literal: ast::String,\n     expanded: SyntaxToken,\n@@ -21,24 +21,25 @@ pub(super) fn highlight_injection(\n     if !active_parameter.name.starts_with(\"ra_fixture\") {\n         return None;\n     }\n+\n     let value = literal.value()?;\n     let marker_info = MarkerInfo::new(&*value);\n     let (analysis, tmp_file_id) = Analysis::from_single_file(marker_info.cleaned_text.clone());\n \n     if let Some(range) = literal.open_quote_text_range() {\n-        acc.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n+        hl.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n     }\n \n-    for mut h in analysis.highlight(tmp_file_id).unwrap() {\n-        let range = marker_info.map_range_up(h.range);\n+    for mut hl_range in analysis.highlight(tmp_file_id).unwrap() {\n+        let range = marker_info.map_range_up(hl_range.range);\n         if let Some(range) = literal.map_range_up(range) {\n-            h.range = range;\n-            acc.add(h);\n+            hl_range.range = range;\n+            hl.add(hl_range);\n         }\n     }\n \n     if let Some(range) = literal.close_quote_text_range() {\n-        acc.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n+        hl.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n     }\n \n     Some(())"}]}