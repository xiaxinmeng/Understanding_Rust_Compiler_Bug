{"sha": "6598d33bd0edf22adb24423851bf2761cae0ada0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OThkMzNiZDBlZGYyMmFkYjI0NDIzODUxYmYyNzYxY2FlMGFkYTA=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-10-25T23:51:41Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-10-26T00:20:32Z"}, "message": "Update parse::test::string_to_tts_1 test", "tree": {"sha": "ae15cb622bcf295deea8ba878b2c4a0c5043c299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae15cb622bcf295deea8ba878b2c4a0c5043c299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6598d33bd0edf22adb24423851bf2761cae0ada0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6598d33bd0edf22adb24423851bf2761cae0ada0", "html_url": "https://github.com/rust-lang/rust/commit/6598d33bd0edf22adb24423851bf2761cae0ada0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6598d33bd0edf22adb24423851bf2761cae0ada0/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "html_url": "https://github.com/rust-lang/rust/commit/94d6eee3357e24913d1331b1fe0bd4e4524bdab6"}], "stats": {"total": 213, "additions": 100, "deletions": 113}, "files": [{"sha": "2965094f23662f396aeb47ec7fcd3f6da47e740a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 100, "deletions": 113, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/6598d33bd0edf22adb24423851bf2761cae0ada0/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6598d33bd0edf22adb24423851bf2761cae0ada0/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6598d33bd0edf22adb24423851bf2761cae0ada0", "patch": "@@ -793,54 +793,47 @@ mod test {\n         let tts = string_to_tts(\"macro_rules! zip (($a)=>($a))\".to_string());\n         let tts: &[ast::TokenTree] = tts.as_slice();\n         match tts {\n-            [ast::TtToken(_, _),\n+            [ast::TtToken(_, token::IDENT(name_macro_rules, false)),\n              ast::TtToken(_, token::NOT),\n-             ast::TtToken(_, _),\n-             ast::TtDelimited(_, ast::TtToken(_, token::LPAREN),\n-                          ref delim_elts,\n-                          ast::TtToken(_, token::RPAREN))] => {\n-                let delim_elts: &[ast::TokenTree] = delim_elts.as_slice();\n-                match delim_elts {\n-                    [ast::TtDelimited(_, ast::TtToken(_, token::LPAREN),\n-                                  ref first_set,\n-                                  ast::TtToken(_, token::RPAREN)),\n-                     ast::TtToken(_, token::FAT_ARROW),\n-                     ast::TtDelimited(_, ast::TtToken(_, token::LPAREN),\n-                                  ref second_set,\n-                                  ast::TtToken(_, token::RPAREN))] => {\n-                        let first_set: &[ast::TokenTree] =\n-                            first_set.as_slice();\n-                        match first_set {\n-                            [ast::TtToken(_, token::DOLLAR), ast::TtToken(_, _)] => {\n-                                let second_set: &[ast::TokenTree] =\n-                                    second_set.as_slice();\n-                                match second_set {\n-                                    [ast::TtToken(_, token::DOLLAR), ast::TtToken(_, _)] => {\n-                                        assert_eq!(\"correct\",\"correct\")\n-                                    }\n-                                    _ => assert_eq!(\"wrong 4\",\"correct\")\n-                                }\n-                            },\n-                            _ => {\n-                                error!(\"failing value 3: {}\",first_set);\n-                                assert_eq!(\"wrong 3\",\"correct\")\n-                            }\n+             ast::TtToken(_, token::IDENT(name_zip, false)),\n+             ast::TtDelimited(_, ref macro_delimed)]\n+            if name_macro_rules.as_str() == \"macro_rules\"\n+            && name_zip.as_str() == \"zip\" => {\n+                let (ref macro_open, ref macro_tts, ref macro_close) = **macro_delimed;\n+                match (macro_open, macro_tts.as_slice(), macro_close) {\n+                    (&ast::Delimiter { token: token::LPAREN, .. },\n+                     [ast::TtDelimited(_, ref first_delimed),\n+                      ast::TtToken(_, token::FAT_ARROW),\n+                      ast::TtDelimited(_, ref second_delimed)],\n+                     &ast::Delimiter { token: token::RPAREN, .. }) => {\n+                        let (ref first_open, ref first_tts, ref first_close) = **first_delimed;\n+                        match (first_open, first_tts.as_slice(), first_close) {\n+                            (&ast::Delimiter { token: token::LPAREN, .. },\n+                             [ast::TtToken(_, token::DOLLAR),\n+                              ast::TtToken(_, token::IDENT(name, false))],\n+                             &ast::Delimiter { token: token::RPAREN, .. })\n+                            if name.as_str() == \"a\" => {},\n+                            _ => fail!(\"value 3: {}\", **first_delimed),\n+                        }\n+                        let (ref second_open, ref second_tts, ref second_close) = **second_delimed;\n+                        match (second_open, second_tts.as_slice(), second_close) {\n+                            (&ast::Delimiter { token: token::LPAREN, .. },\n+                             [ast::TtToken(_, token::DOLLAR),\n+                              ast::TtToken(_, token::IDENT(name, false))],\n+                             &ast::Delimiter { token: token::RPAREN, .. })\n+                            if name.as_str() == \"a\" => {},\n+                            _ => fail!(\"value 4: {}\", **second_delimed),\n                         }\n                     },\n-                    _ => {\n-                        error!(\"failing value 2: {}\",delim_elts);\n-                        assert_eq!(\"wrong\",\"correct\");\n-                    }\n+                    _ => fail!(\"value 2: {}\", **macro_delimed),\n                 }\n             },\n-            _ => {\n-                error!(\"failing value: {}\",tts);\n-                assert_eq!(\"wrong 1\",\"correct\");\n-            },\n+            _ => fail!(\"value: {}\",tts),\n         }\n     }\n \n-    #[test] fn string_to_tts_1 () {\n+    #[test]\n+    fn string_to_tts_1 () {\n         let tts = string_to_tts(\"fn a (b : int) { b; }\".to_string());\n         assert_eq!(json::encode(&tts),\n         \"[\\\n@@ -873,94 +866,88 @@ mod test {\n     {\\\n         \\\"variant\\\":\\\"TtDelimited\\\",\\\n         \\\"fields\\\":[\\\n+            null,\\\n             [\\\n                 {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        \\\"LPAREN\\\"\\\n-                    ]\\\n-                },\\\n-                {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        {\\\n-                            \\\"variant\\\":\\\"IDENT\\\",\\\n-                            \\\"fields\\\":[\\\n-                                \\\"b\\\",\\\n-                                false\\\n-                            ]\\\n-                        }\\\n-                    ]\\\n-                },\\\n-                {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        \\\"COLON\\\"\\\n-                    ]\\\n-                },\\\n-                {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        {\\\n-                            \\\"variant\\\":\\\"IDENT\\\",\\\n-                            \\\"fields\\\":[\\\n-                                \\\"int\\\",\\\n-                                false\\\n-                            ]\\\n-                        }\\\n-                    ]\\\n+                    \\\"span\\\":null,\\\n+                    \\\"token\\\":\\\"LPAREN\\\"\\\n                 },\\\n+                [\\\n+                    {\\\n+                        \\\"variant\\\":\\\"TtToken\\\",\\\n+                        \\\"fields\\\":[\\\n+                            null,\\\n+                            {\\\n+                                \\\"variant\\\":\\\"IDENT\\\",\\\n+                                \\\"fields\\\":[\\\n+                                    \\\"b\\\",\\\n+                                    false\\\n+                                ]\\\n+                            }\\\n+                        ]\\\n+                    },\\\n+                    {\\\n+                        \\\"variant\\\":\\\"TtToken\\\",\\\n+                        \\\"fields\\\":[\\\n+                            null,\\\n+                            \\\"COLON\\\"\\\n+                        ]\\\n+                    },\\\n+                    {\\\n+                        \\\"variant\\\":\\\"TtToken\\\",\\\n+                        \\\"fields\\\":[\\\n+                            null,\\\n+                            {\\\n+                                \\\"variant\\\":\\\"IDENT\\\",\\\n+                                \\\"fields\\\":[\\\n+                                    \\\"int\\\",\\\n+                                    false\\\n+                                ]\\\n+                            }\\\n+                        ]\\\n+                    }\\\n+                ],\\\n                 {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        \\\"RPAREN\\\"\\\n-                    ]\\\n+                    \\\"span\\\":null,\\\n+                    \\\"token\\\":\\\"RPAREN\\\"\\\n                 }\\\n             ]\\\n         ]\\\n     },\\\n     {\\\n         \\\"variant\\\":\\\"TtDelimited\\\",\\\n         \\\"fields\\\":[\\\n+            null,\\\n             [\\\n                 {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        \\\"LBRACE\\\"\\\n-                    ]\\\n-                },\\\n-                {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        {\\\n-                            \\\"variant\\\":\\\"IDENT\\\",\\\n-                            \\\"fields\\\":[\\\n-                                \\\"b\\\",\\\n-                                false\\\n-                            ]\\\n-                        }\\\n-                    ]\\\n-                },\\\n-                {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        \\\"SEMI\\\"\\\n-                    ]\\\n+                    \\\"span\\\":null,\\\n+                    \\\"token\\\":\\\"LBRACE\\\"\\\n                 },\\\n+                [\\\n+                    {\\\n+                        \\\"variant\\\":\\\"TtToken\\\",\\\n+                        \\\"fields\\\":[\\\n+                            null,\\\n+                            {\\\n+                                \\\"variant\\\":\\\"IDENT\\\",\\\n+                                \\\"fields\\\":[\\\n+                                    \\\"b\\\",\\\n+                                    false\\\n+                                ]\\\n+                            }\\\n+                        ]\\\n+                    },\\\n+                    {\\\n+                        \\\"variant\\\":\\\"TtToken\\\",\\\n+                        \\\"fields\\\":[\\\n+                            null,\\\n+                            \\\"SEMI\\\"\\\n+                        ]\\\n+                    }\\\n+                ],\\\n                 {\\\n-                    \\\"variant\\\":\\\"TtToken\\\",\\\n-                    \\\"fields\\\":[\\\n-                        null,\\\n-                        \\\"RBRACE\\\"\\\n-                    ]\\\n+                    \\\"span\\\":null,\\\n+                    \\\"token\\\":\\\"RBRACE\\\"\\\n                 }\\\n             ]\\\n         ]\\"}]}