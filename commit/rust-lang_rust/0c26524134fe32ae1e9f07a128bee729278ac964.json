{"sha": "0c26524134fe32ae1e9f07a128bee729278ac964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjY1MjQxMzRmZTMyYWUxZTlmMDdhMTI4YmVlNzI5Mjc4YWM5NjQ=", "commit": {"author": {"name": "Nick Howell", "email": "howellnick@gmail.com", "date": "2015-01-04T17:31:02Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-17T15:51:53Z"}, "message": "doc: Remove extra whitespace in the middle of lines to provide alignment\n\n\"Idiomatic code should not use extra whitespace in the middle of a line to provide alignment.\"\nhttp://aturon.github.io/style/whitespace.html\n\nI realize the linked page still needs an RFC, but the docs should be written in accordance with the guidelines nevertheless.", "tree": {"sha": "d6e2a8b40526b530b574cea7f3824eee72fc5a90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e2a8b40526b530b574cea7f3824eee72fc5a90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c26524134fe32ae1e9f07a128bee729278ac964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c26524134fe32ae1e9f07a128bee729278ac964", "html_url": "https://github.com/rust-lang/rust/commit/0c26524134fe32ae1e9f07a128bee729278ac964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c26524134fe32ae1e9f07a128bee729278ac964/comments", "author": {"login": "nhowell", "id": 200475, "node_id": "MDQ6VXNlcjIwMDQ3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/200475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhowell", "html_url": "https://github.com/nhowell", "followers_url": "https://api.github.com/users/nhowell/followers", "following_url": "https://api.github.com/users/nhowell/following{/other_user}", "gists_url": "https://api.github.com/users/nhowell/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhowell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhowell/subscriptions", "organizations_url": "https://api.github.com/users/nhowell/orgs", "repos_url": "https://api.github.com/users/nhowell/repos", "events_url": "https://api.github.com/users/nhowell/events{/privacy}", "received_events_url": "https://api.github.com/users/nhowell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34fa70fba5425cbbb96bce783e9fd5c23dd9b471", "url": "https://api.github.com/repos/rust-lang/rust/commits/34fa70fba5425cbbb96bce783e9fd5c23dd9b471", "html_url": "https://github.com/rust-lang/rust/commit/34fa70fba5425cbbb96bce783e9fd5c23dd9b471"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "2df769b3c2c67c1484610617d97f62ea1a6ee6b6", "filename": "src/doc/trpl/arrays-vectors-and-slices.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -5,7 +5,7 @@ things. The most basic is the *array*, a fixed-size list of elements of the\n same type. By default, arrays are immutable.\n \n ```{rust}\n-let a = [1, 2, 3];     // a: [i32; 3]\n+let a = [1, 2, 3]; // a: [i32; 3]\n let mut m = [1, 2, 3]; // mut m: [i32; 3]\n ```\n \n@@ -68,7 +68,7 @@ let mut nums = vec![1, 2, 3]; // mut nums: Vec<i32>\n \n nums.push(4);\n \n-println!(\"The length of nums is now {}\", nums.len());   // Prints 4\n+println!(\"The length of nums is now {}\", nums.len()); // Prints 4\n ```\n \n Vectors have many more useful methods.\n@@ -82,10 +82,10 @@ arrays:\n \n ```{rust}\n let a = [0, 1, 2, 3, 4];\n-let middle = &a[1..4];     // A slice of a: just the elements 1, 2, and 3\n+let middle = &a[1..4]; // A slice of a: just the elements 1, 2, and 3\n \n for e in middle.iter() {\n-    println!(\"{}\", e);          // Prints 1, 2, 3\n+    println!(\"{}\", e); // Prints 1, 2, 3\n }\n ```\n "}, {"sha": "f584fe8d7a323347531964da56467d8aeae5ff1c", "filename": "src/doc/trpl/compound-data-types.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -51,7 +51,7 @@ arity and contained types.\n \n ```rust\n let mut x = (1, 2); // x: (i32, i32)\n-let y = (2, 3);     // y: (i32, i32)\n+let y = (2, 3); // y: (i32, i32)\n \n x = y;\n ```\n@@ -156,7 +156,7 @@ These two will not be equal, even if they have the same values:\n ```{rust}\n # struct Color(i32, i32, i32);\n # struct Point(i32, i32, i32);\n-let black  = Color(0, 0, 0);\n+let black = Color(0, 0, 0);\n let origin = Point(0, 0, 0);\n ```\n "}, {"sha": "d66142edf3fc9b1b4cae7d7eedc140517dfae296", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -60,12 +60,12 @@ fn probability(_: &Event) -> f64 {\n \n fn descriptive_probability(event: Event) -> &'static str {\n     match probability(&event) {\n-        1.00          => \"certain\",\n-        0.00          => \"impossible\",\n+        1.00 => \"certain\",\n+        0.00 => \"impossible\",\n         0.00 ... 0.25 => \"very unlikely\",\n         0.25 ... 0.50 => \"unlikely\",\n         0.50 ... 0.75 => \"likely\",\n-        0.75 ... 1.00  => \"very likely\",\n+        0.75 ... 1.00 => \"very likely\",\n     }\n }\n \n@@ -97,12 +97,12 @@ fn probability(_: &Event) -> f64 {\n \n fn descriptive_probability(event: Event) -> &'static str {\n     match probability(&event) {\n-        1.00          => \"certain\",\n-        0.00          => \"impossible\",\n+        1.00 => \"certain\",\n+        0.00 => \"impossible\",\n         0.00 ... 0.25 => \"very unlikely\",\n         0.25 ... 0.50 => \"unlikely\",\n         0.50 ... 0.75 => \"likely\",\n-        0.75 ... 1.00  => \"very likely\",\n+        0.75 ... 1.00 => \"very likely\",\n         _ => unreachable!()\n     }\n }"}, {"sha": "6f67c88f2c0cca1e6c15becc9da45925671e89b1", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -297,9 +297,9 @@ fn main() {\n     println!(\"You guessed: {}\", input);\n \n     match cmp(input, secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Less => println!(\"Too small!\"),\n         Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n+        Ordering::Equal => println!(\"You win!\"),\n     }\n }\n \n@@ -352,9 +352,9 @@ fn main() {\n     println!(\"You guessed: {}\", input);\n \n     match cmp(input, secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Less => println!(\"Too small!\"),\n         Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n+        Ordering::Equal => println!(\"You win!\"),\n     }\n }\n \n@@ -422,8 +422,8 @@ In this case, we say `x` is a `u32` explicitly, so Rust is able to properly\n tell `random()` what to generate. In a similar fashion, both of these work:\n \n ```{rust,ignore}\n-let input_num = \"5\".parse::<u32>();         // input_num: Option<u32>\n-let input_num: Option<u32> = \"5\".parse();   // input_num: Option<u32>\n+let input_num = \"5\".parse::<u32>(); // input_num: Option<u32>\n+let input_num: Option<u32> = \"5\".parse(); // input_num: Option<u32>\n ```\n \n Anyway, with us now converting our input to a number, our code looks like this:\n@@ -450,9 +450,9 @@ fn main() {\n     println!(\"You guessed: {}\", input_num);\n \n     match cmp(input_num, secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Less => println!(\"Too small!\"),\n         Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n+        Ordering::Equal => println!(\"You win!\"),\n     }\n }\n \n@@ -499,7 +499,7 @@ fn main() {\n \n     let num = match input_num {\n         Some(num) => num,\n-        None      => {\n+        None => {\n             println!(\"Please input a number!\");\n             return;\n         }\n@@ -509,9 +509,9 @@ fn main() {\n     println!(\"You guessed: {}\", num);\n \n     match cmp(num, secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Less => println!(\"Too small!\"),\n         Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n+        Ordering::Equal => println!(\"You win!\"),\n     }\n }\n \n@@ -566,7 +566,7 @@ fn main() {\n \n     let num = match input_num {\n         Some(num) => num,\n-        None      => {\n+        None => {\n             println!(\"Please input a number!\");\n             return;\n         }\n@@ -576,9 +576,9 @@ fn main() {\n     println!(\"You guessed: {}\", num);\n \n     match cmp(num, secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Less => println!(\"Too small!\"),\n         Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n+        Ordering::Equal => println!(\"You win!\"),\n     }\n }\n \n@@ -642,7 +642,7 @@ fn main() {\n \n         let num = match input_num {\n             Some(num) => num,\n-            None      => {\n+            None => {\n                 println!(\"Please input a number!\");\n                 return;\n             }\n@@ -652,9 +652,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Less => println!(\"Too small!\"),\n             Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => println!(\"You win!\"),\n+            Ordering::Equal => println!(\"You win!\"),\n         }\n     }\n }\n@@ -718,7 +718,7 @@ fn main() {\n \n         let num = match input_num {\n             Some(num) => num,\n-            None      => {\n+            None => {\n                 println!(\"Please input a number!\");\n                 return;\n             }\n@@ -728,9 +728,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Less => println!(\"Too small!\"),\n             Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => {\n+            Ordering::Equal => {\n                 println!(\"You win!\");\n                 return;\n             },\n@@ -774,7 +774,7 @@ fn main() {\n \n         let num = match input_num {\n             Some(num) => num,\n-            None      => {\n+            None => {\n                 println!(\"Please input a number!\");\n                 continue;\n             }\n@@ -784,9 +784,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Less => println!(\"Too small!\"),\n             Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => {\n+            Ordering::Equal => {\n                 println!(\"You win!\");\n                 return;\n             },\n@@ -851,7 +851,7 @@ fn main() {\n \n         let num = match input_num {\n             Some(num) => num,\n-            None      => {\n+            None => {\n                 println!(\"Please input a number!\");\n                 continue;\n             }\n@@ -861,9 +861,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Less => println!(\"Too small!\"),\n             Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => {\n+            Ordering::Equal => {\n                 println!(\"You win!\");\n                 return;\n             },"}, {"sha": "75b3f8b06fc3b83ac19ab23315e1b20ce8bf0860", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -143,7 +143,7 @@ let greater_than_forty_two = range(0, 100)\n \n match greater_than_forty_two {\n     Some(_) => println!(\"We got some numbers!\"),\n-    None    => println!(\"No numbers found :(\"),\n+    None => println!(\"No numbers found :(\"),\n }\n ```\n "}, {"sha": "28f02b1ffe1528239ba2ba798a12dad126dde496", "filename": "src/doc/trpl/looping.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Flooping.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Flooping.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flooping.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -54,7 +54,7 @@ The other kind of looping construct in Rust is the `while` loop. It looks like\n this:\n \n ```{rust}\n-let mut x = 5;        // mut x: u32\n+let mut x = 5; // mut x: u32\n let mut done = false; // mut done: bool\n \n while !done {"}, {"sha": "73bc775a1b29063fc9a384d3870b12f47490bd32", "filename": "src/doc/trpl/match.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmatch.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -84,9 +84,9 @@ fn main() {\n     let y = 10;\n \n     match cmp(x, y) {\n-        Ordering::Less    => println!(\"less\"),\n+        Ordering::Less => println!(\"less\"),\n         Ordering::Greater => println!(\"greater\"),\n-        Ordering::Equal   => println!(\"equal\"),\n+        Ordering::Equal => println!(\"equal\"),\n     }\n }\n ```\n@@ -112,12 +112,12 @@ fn main() {\n \n     match x {\n         OptionalInt::Value(n) => println!(\"x is {}\", n),\n-        OptionalInt::Missing  => println!(\"x is missing!\"),\n+        OptionalInt::Missing => println!(\"x is missing!\"),\n     }\n \n     match y {\n         OptionalInt::Value(n) => println!(\"y is {}\", n),\n-        OptionalInt::Missing  => println!(\"y is missing!\"),\n+        OptionalInt::Missing => println!(\"y is missing!\"),\n     }\n }\n ```\n@@ -146,9 +146,9 @@ fn main() {\n     let y = 10;\n \n     println!(\"{}\", match cmp(x, y) {\n-        Ordering::Less    => \"less\",\n+        Ordering::Less => \"less\",\n         Ordering::Greater => \"greater\",\n-        Ordering::Equal   => \"equal\",\n+        Ordering::Equal => \"equal\",\n     });\n }\n ```"}, {"sha": "9ced5bb656c42774a6df44b9bb8aaa8afce28247", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -517,31 +517,31 @@ Here are some examples of functions with elided lifetimes, and the version of\n what the elided lifetimes are expand to:\n \n ```{rust,ignore}\n-fn print(s: &str);                                      // elided\n-fn print<'a>(s: &'a str);                               // expanded\n+fn print(s: &str); // elided\n+fn print<'a>(s: &'a str); // expanded\n \n-fn debug(lvl: u32, s: &str);                           // elided\n-fn debug<'a>(lvl: u32, s: &'a str);                    // expanded\n+fn debug(lvl: u32, s: &str); // elided\n+fn debug<'a>(lvl: u32, s: &'a str); // expanded\n \n // In the preceeding example, `lvl` doesn't need a lifetime because it's not a\n // reference (`&`). Only things relating to references (such as a `struct`\n // which contains a reference) need lifetimes.\n \n-fn substr(s: &str, until: u32) -> &str;                // elided\n-fn substr<'a>(s: &'a str, until: u32) -> &'a str;      // expanded\n+fn substr(s: &str, until: u32) -> &str; // elided\n+fn substr<'a>(s: &'a str, until: u32) -> &'a str; // expanded\n \n-fn get_str() -> &str;                                   // ILLEGAL, no inputs\n+fn get_str() -> &str; // ILLEGAL, no inputs\n \n-fn frob(s: &str, t: &str) -> &str;                      // ILLEGAL, two inputs\n+fn frob(s: &str, t: &str) -> &str; // ILLEGAL, two inputs\n \n-fn get_mut(&mut self) -> &mut T;                        // elided\n-fn get_mut<'a>(&'a mut self) -> &'a mut T;              // expanded\n+fn get_mut(&mut self) -> &mut T; // elided\n+fn get_mut<'a>(&'a mut self) -> &'a mut T; // expanded\n \n-fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\n+fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command // elided\n fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n \n-fn new(buf: &mut [u8]) -> BufWriter;                    // elided\n-fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>          // expanded\n+fn new(buf: &mut [u8]) -> BufWriter; // elided\n+fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a> // expanded\n ```\n \n # Related Resources"}, {"sha": "5c7b406a6fc4398f555a74af8452c69151360ada", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -68,7 +68,7 @@ let x = OptionalInt::Value(5);\n \n match x {\n     OptionalInt::Value(..) => println!(\"Got an int!\"),\n-    OptionalInt::Missing   => println!(\"No such luck.\"),\n+    OptionalInt::Missing => println!(\"No such luck.\"),\n }\n ```\n \n@@ -85,7 +85,7 @@ let x = OptionalInt::Value(5);\n match x {\n     OptionalInt::Value(i) if i > 5 => println!(\"Got an int bigger than five!\"),\n     OptionalInt::Value(..) => println!(\"Got an int!\"),\n-    OptionalInt::Missing   => println!(\"No such luck.\"),\n+    OptionalInt::Missing => println!(\"No such luck.\"),\n }\n ```\n "}, {"sha": "d74c10b814507f5d45d1dcd3b66443248728b184", "filename": "src/doc/trpl/pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpointers.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -463,7 +463,7 @@ fn succ(x: &i32) -> i32 { *x + 1 }\n \n let ref_x = &5;\n let box_x = Box::new(5);\n-let rc_x  = Rc::new(5);\n+let rc_x = Rc::new(5);\n \n succ(ref_x);\n succ(&*box_x);"}, {"sha": "7145139bba57e9296b380eb16d7cc0b7718c3637", "filename": "src/doc/trpl/standard-input.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstandard-input.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -83,12 +83,12 @@ fn main() {\n \n     match x {\n         OptionalInt::Value(n) => println!(\"x is {}\", n),\n-        OptionalInt::Missing  => println!(\"x is missing!\"),\n+        OptionalInt::Missing => println!(\"x is missing!\"),\n     }\n \n     match y {\n         OptionalInt::Value(n) => println!(\"y is {}\", n),\n-        OptionalInt::Missing  => println!(\"y is missing!\"),\n+        OptionalInt::Missing => println!(\"y is missing!\"),\n     }\n }\n ```\n@@ -141,11 +141,11 @@ use std::io;\n fn main() {\n     println!(\"Type something!\");\n \n-                                                  // here, we'll show the types at each step\n+    // here, we'll show the types at each step\n \n-    let input = io::stdin()                       // std::io::stdio::StdinReader\n-                  .read_line()                    // IoResult<String>\n-                  .ok()                           // Option<String>\n+    let input = io::stdin() // std::io::stdio::StdinReader\n+                  .read_line() // IoResult<String>\n+                  .ok() // Option<String>\n                   .expect(\"Failed to read line\"); // String\n \n     println!(\"{}\", input);"}, {"sha": "de6d311be57edc1149c3ff96019954942888fd22", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c26524134fe32ae1e9f07a128bee729278ac964/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=0c26524134fe32ae1e9f07a128bee729278ac964", "patch": "@@ -567,8 +567,8 @@ pub extern fn dot_product(a: *const u32, a_len: u32,\n \n #[lang = \"panic_fmt\"]\n extern fn panic_fmt(args: &core::fmt::Arguments,\n-                       file: &str,\n-                       line: u32) -> ! {\n+                    file: &str,\n+                    line: u32) -> ! {\n     loop {}\n }\n "}]}