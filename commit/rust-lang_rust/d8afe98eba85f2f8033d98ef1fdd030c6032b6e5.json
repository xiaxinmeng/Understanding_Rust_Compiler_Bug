{"sha": "d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YWZlOThlYmE4NWYyZjgwMzNkOThlZjFmZGQwMzBjNjAzMmI2ZTU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-19T01:05:29Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-05T00:05:55Z"}, "message": "Clean up docs for 'as' keyword", "tree": {"sha": "5dbfc4e6c03969f8d174f172f0ae82a5f5c7b1ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dbfc4e6c03969f8d174f172f0ae82a5f5c7b1ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "html_url": "https://github.com/rust-lang/rust/commit/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d30a7b490065f0aa56f58e508a11546445aea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d30a7b490065f0aa56f58e508a11546445aea9", "html_url": "https://github.com/rust-lang/rust/commit/a4d30a7b490065f0aa56f58e508a11546445aea9"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "b990b78570393f4f441381b0541dbf36a1612cd0", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "patch": "@@ -15,18 +15,24 @@\n /// ```\n ///\n /// In general, any cast that can be performed via ascribing the type can also be done using `as`,\n-/// so instead of writing `let x: u32 = 123`, you can write `let x = 123 as u32` (Note: `let x: u32\n-/// = 123` would be best in that situation). The same is not true in the other direction, however,\n+/// so instead of writing `let x: u32 = 123`, you can write `let x = 123 as u32` (note: `let x: u32\n+/// = 123` would be best in that situation). The same is not true in the other direction, however;\n /// explicitly using `as` allows a few more coercions that aren't allowed implicitly, such as\n /// changing the type of a raw pointer or turning closures into raw pointers.\n ///\n-/// Other places `as` is used include as extra syntax for [`crate`] and `use`, to change the name\n-/// something is imported as.\n+/// `as` is also used to rename imports in [`use`] and [`extern crate`] statements:\n ///\n-/// For more information on what `as` is capable of, see the [Reference]\n+/// ```\n+/// # #[allow(unused_imports)]\n+/// use std::{mem as memory, net as network};\n+/// // Now you can use the names `memory` and `network` to refer to `std::mem` and `std::net`.\n+/// ```\n+///\n+/// For more information on what `as` is capable of, see the [Reference].\n ///\n /// [Reference]: ../reference/expressions/operator-expr.html#type-cast-expressions\n-/// [`crate`]: keyword.crate.html\n+/// [`use`]: keyword.use.html\n+/// [`extern crate`]: keyword.crate.html\n mod as_keyword {}\n \n #[doc(keyword = \"break\")]\n@@ -397,6 +403,7 @@ mod enum_keyword {}\n /// [Rust book]:\n /// ../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n /// [Reference]: ../reference/items/external-blocks.html\n+/// [`crate`]: keyword.crate.html\n mod extern_keyword {}\n \n #[doc(keyword = \"false\")]"}]}