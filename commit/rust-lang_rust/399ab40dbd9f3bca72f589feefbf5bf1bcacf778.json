{"sha": "399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "node_id": "C_kwDOAAsO6NoAKDM5OWFiNDBkYmQ5ZjNiY2E3MmY1ODlmZWVmYmY1YmYxYmNhY2Y3Nzg", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-10T16:31:40Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-13T22:05:25Z"}, "message": "get rid of normalize_generic_arg... queries", "tree": {"sha": "83dcb60f129e0c96c9300999c60d236c42babe8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83dcb60f129e0c96c9300999c60d236c42babe8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "html_url": "https://github.com/rust-lang/rust/commit/399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8250eef6857c19acb1b9db003ce918b33583835f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8250eef6857c19acb1b9db003ce918b33583835f", "html_url": "https://github.com/rust-lang/rust/commit/8250eef6857c19acb1b9db003ce918b33583835f"}], "stats": {"total": 50, "additions": 9, "deletions": 41}, "files": [{"sha": "78e33544655f0312ade64fc5598f83364437fff1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "patch": "@@ -1658,27 +1658,6 @@ rustc_queries! {\n         remap_env_constness\n     }\n \n-    // FIXME: Implement `normalize_generic_arg_after_erasing_regions` and\n-    // `normalize_mir_const_after_erasing_regions` in terms of\n-    // `try_normalize_generic_arg_after_erasing_regions` and\n-    // `try_normalize_mir_const_after_erasing_regions`, respectively.\n-\n-    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n-    query normalize_generic_arg_after_erasing_regions(\n-        goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n-    ) -> GenericArg<'tcx> {\n-        desc { \"normalizing `{}`\", goal.value }\n-        remap_env_constness\n-    }\n-\n-    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n-    query normalize_mir_const_after_erasing_regions(\n-        goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n-    ) -> mir::ConstantKind<'tcx> {\n-        desc { \"normalizing `{}`\", goal.value }\n-        remap_env_constness\n-    }\n-\n     /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n     query try_normalize_generic_arg_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>"}, {"sha": "312093b4f885985f21e882ca70ea041a3ce23ce7", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "patch": "@@ -176,7 +176,10 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(arg);\n         debug!(?arg);\n \n-        self.tcx.normalize_generic_arg_after_erasing_regions(arg)\n+        self.tcx.try_normalize_generic_arg_after_erasing_regions(arg).unwrap_or_else(|_| bug!(\n+                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n+                arg.value\n+            ))\n     }\n }\n \n@@ -197,7 +200,9 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n         // FIXME: This *probably* needs canonicalization too!\n         let arg = self.param_env.and(c);\n-        self.tcx.normalize_mir_const_after_erasing_regions(arg)\n+        self.tcx\n+            .try_normalize_mir_const_after_erasing_regions(arg)\n+            .unwrap_or_else(|_| bug!(\"failed to normalize {:?}\", c))\n     }\n }\n "}, {"sha": "87530cf9961b10a3406a0a3a75cee23955b30634", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399ab40dbd9f3bca72f589feefbf5bf1bcacf778/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "patch": "@@ -8,30 +8,14 @@ use std::sync::atomic::Ordering;\n \n crate fn provide(p: &mut Providers) {\n     *p = Providers {\n-        normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n-            debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n+        try_normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n+            debug!(\"try_normalize_generic_arg_after_erasing_regions(goal={:#?}\", goal);\n \n             tcx.sess\n                 .perf_stats\n                 .normalize_generic_arg_after_erasing_regions\n                 .fetch_add(1, Ordering::Relaxed);\n \n-            let (param_env, goal) = goal.into_parts();\n-            tcx.try_normalize_erasing_regions(param_env, goal).unwrap_or_else(|_| bug!(\n-                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n-                goal\n-            ))\n-        },\n-        normalize_mir_const_after_erasing_regions: |tcx, goal| {\n-            let (param_env, goal) = goal.into_parts();\n-            tcx.try_normalize_erasing_regions(param_env, goal).unwrap_or_else(|_| bug!(\n-                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n-                goal\n-            ))\n-        },\n-        try_normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n-            debug!(\"try_normalize_generic_arg_after_erasing_regions(goal={:#?}\", goal);\n-\n             try_normalize_after_erasing_regions(tcx, goal)\n         },\n         try_normalize_mir_const_after_erasing_regions: |tcx, goal| {"}]}