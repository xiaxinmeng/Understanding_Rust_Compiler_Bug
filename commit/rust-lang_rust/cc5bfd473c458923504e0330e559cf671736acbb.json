{"sha": "cc5bfd473c458923504e0330e559cf671736acbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNWJmZDQ3M2M0NTg5MjM1MDRlMDMzMGU1NTljZjY3MTczNmFjYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T22:40:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T22:40:42Z"}, "message": "Auto merge of #5888 - matthiaskrgr:lints, r=yaahc\n\nmake a bunch of lints texts adhere to rustc dev guide\n\nAccording to the rustc-dev guide: \"The text should be matter of fact and avoid capitalization and periods, unless multiple sentences are needed\"\n\nchangelog: make some lint output adhere to the rustc-dev guide", "tree": {"sha": "d3d4505cb298c15a04559e912a2e1337008c8b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d4505cb298c15a04559e912a2e1337008c8b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc5bfd473c458923504e0330e559cf671736acbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5bfd473c458923504e0330e559cf671736acbb", "html_url": "https://github.com/rust-lang/rust/commit/cc5bfd473c458923504e0330e559cf671736acbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc5bfd473c458923504e0330e559cf671736acbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16831891da49422e08c597a3857c2091ca220cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/16831891da49422e08c597a3857c2091ca220cbc", "html_url": "https://github.com/rust-lang/rust/commit/16831891da49422e08c597a3857c2091ca220cbc"}, {"sha": "6d0b5e24dfc8232123984fcefface485aa7fbc3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b5e24dfc8232123984fcefface485aa7fbc3c", "html_url": "https://github.com/rust-lang/rust/commit/6d0b5e24dfc8232123984fcefface485aa7fbc3c"}], "stats": {"total": 399, "additions": 193, "deletions": 206}, "files": [{"sha": "376ac55f9c98ca60b1a96cf637174108a6d221c4", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -605,7 +605,7 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::as\n                         cx,\n                         EMPTY_LINE_AFTER_OUTER_ATTR,\n                         begin_of_attr_to_item,\n-                        \"Found an empty line after an outer attribute. \\\n+                        \"found an empty line after an outer attribute. \\\n                         Perhaps you forgot to add a `!` to make it an inner attribute?\",\n                     );\n                 }"}, {"sha": "cdb49d777d8dae2aeee008054b61dee8c293f092", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -82,8 +82,8 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n                             cx,\n                             NAIVE_BYTECOUNT,\n                             expr.span,\n-                            \"You appear to be counting bytes the naive way\",\n-                            \"Consider using the bytecount crate\",\n+                            \"you appear to be counting bytes the naive way\",\n+                            \"consider using the bytecount crate\",\n                             format!(\"bytecount::count({}, {})\",\n                                     snippet_with_applicability(cx, haystack.span, \"..\", &mut applicability),\n                                     snippet_with_applicability(cx, needle.span, \"..\", &mut applicability)),"}, {"sha": "28c1a54d2c5a6a1c1ecc2749737c668b5da8f182", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n                     cx,\n                     CHECKED_CONVERSIONS,\n                     item.span,\n-                    \"Checked cast can be simplified.\",\n+                    \"checked cast can be simplified\",\n                     \"try\",\n                     format!(\"{}::try_from({}).is_ok()\", to_type, snippet),\n                     applicability,"}, {"sha": "874e19d9e9fb356d96db39f9079a6e5ecec157c7", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultTraitAccess {\n                                 cx,\n                                 DEFAULT_TRAIT_ACCESS,\n                                 expr.span,\n-                                &format!(\"Calling `{}` is more clear than this expression\", replacement),\n+                                &format!(\"calling `{}` is more clear than this expression\", replacement),\n                                 \"try\",\n                                 replacement,\n                                 Applicability::Unspecified, // First resolve the TODO above"}, {"sha": "bae7c4647d487a898c944adbaa0d62aa2c124dd3", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> DoubleComparisons {\n                     cx,\n                     DOUBLE_COMPARISONS,\n                     span,\n-                    \"This binary expression can be simplified\",\n+                    \"this binary expression can be simplified\",\n                     \"try\",\n                     sugg,\n                     applicability,"}, {"sha": "abbcaf43f4151adcdfc44c0954d6e797531667f4", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -45,41 +45,28 @@ impl EarlyLintPass for DoubleParens {\n             return;\n         }\n \n+        let msg: &str = \"consider removing unnecessary double parentheses\";\n+\n         match expr.kind {\n             ExprKind::Paren(ref in_paren) => match in_paren.kind {\n                 ExprKind::Paren(_) | ExprKind::Tup(_) => {\n-                    span_lint(\n-                        cx,\n-                        DOUBLE_PARENS,\n-                        expr.span,\n-                        \"Consider removing unnecessary double parentheses\",\n-                    );\n+                    span_lint(cx, DOUBLE_PARENS, expr.span, &msg);\n                 },\n                 _ => {},\n             },\n             ExprKind::Call(_, ref params) => {\n                 if params.len() == 1 {\n                     let param = &params[0];\n                     if let ExprKind::Paren(_) = param.kind {\n-                        span_lint(\n-                            cx,\n-                            DOUBLE_PARENS,\n-                            param.span,\n-                            \"Consider removing unnecessary double parentheses\",\n-                        );\n+                        span_lint(cx, DOUBLE_PARENS, param.span, &msg);\n                     }\n                 }\n             },\n             ExprKind::MethodCall(_, ref params, _) => {\n                 if params.len() == 2 {\n                     let param = &params[1];\n                     if let ExprKind::Paren(_) = param.kind {\n-                        span_lint(\n-                            cx,\n-                            DOUBLE_PARENS,\n-                            param.span,\n-                            \"Consider removing unnecessary double parentheses\",\n-                        );\n+                        span_lint(cx, DOUBLE_PARENS, param.span, &msg);\n                     }\n                 }\n             },"}, {"sha": "ec3b6afa6300f13b76f17e40337b3efaeabfbeec", "filename": "clippy_lints/src/drop_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -33,11 +33,11 @@ declare_clippy_lint! {\n     /// ```\n     pub DROP_BOUNDS,\n     correctness,\n-    \"Bounds of the form `T: Drop` are useless\"\n+    \"bounds of the form `T: Drop` are useless\"\n }\n \n-const DROP_BOUNDS_SUMMARY: &str = \"Bounds of the form `T: Drop` are useless. \\\n-                                   Use `std::mem::needs_drop` to detect if a type has drop glue.\";\n+const DROP_BOUNDS_SUMMARY: &str = \"bounds of the form `T: Drop` are useless, \\\n+                                   use `std::mem::needs_drop` to detect if a type has drop glue\";\n \n declare_lint_pass!(DropBounds => [DROP_BOUNDS]);\n "}, {"sha": "ac1c7aa9bbbe998977c3484eef37d1d8893572c4", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -374,7 +374,7 @@ impl<'tcx> Functions {\n         }\n \n         if line_count > self.max_lines {\n-            span_lint(cx, TOO_MANY_LINES, span, \"This function has a large number of lines.\")\n+            span_lint(cx, TOO_MANY_LINES, span, \"this function has a large number of lines\")\n         }\n     }\n "}, {"sha": "02789735c17a313b1aa152aa01eadc3df3bf1692", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -271,7 +271,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                         cx,\n                         BUILTIN_TYPE_SHADOW,\n                         param.ident.span,\n-                        &format!(\"This generic shadows the built-in type `{}`\", name),\n+                        &format!(\"this generic shadows the built-in type `{}`\", name),\n                     );\n                 }\n             }\n@@ -298,9 +298,9 @@ impl EarlyLintPass for MiscEarlyLints {\n                     cx,\n                     UNNEEDED_FIELD_PATTERN,\n                     pat.span,\n-                    \"All the struct fields are matched to a wildcard pattern, consider using `..`.\",\n+                    \"all the struct fields are matched to a wildcard pattern, consider using `..`\",\n                     None,\n-                    &format!(\"Try with `{} {{ .. }}` instead\", type_name),\n+                    &format!(\"try with `{} {{ .. }}` instead\", type_name),\n                 );\n                 return;\n             }\n@@ -313,7 +313,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 cx,\n                                 UNNEEDED_FIELD_PATTERN,\n                                 field.span,\n-                                \"You matched a field with a wildcard pattern. Consider using `..` instead\",\n+                                \"you matched a field with a wildcard pattern, consider using `..` instead\",\n                             );\n                         } else {\n                             let mut normal = vec![];\n@@ -333,10 +333,10 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 cx,\n                                 UNNEEDED_FIELD_PATTERN,\n                                 field.span,\n-                                \"You matched a field with a wildcard pattern. Consider using `..` \\\n+                                \"you matched a field with a wildcard pattern, consider using `..` \\\n                                  instead\",\n                                 None,\n-                                &format!(\"Try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n+                                &format!(\"try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n                             );\n                         }\n                     }"}, {"sha": "dc5aa6691396b14220376178adcac0afe5a374af", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -243,7 +243,7 @@ fn check_comparison<'a, 'tcx>(\n                         cx,\n                         BOOL_COMPARISON,\n                         e.span,\n-                        \"This comparison might be written more concisely\",\n+                        \"this comparison might be written more concisely\",\n                         \"try simplifying it as shown\",\n                         format!(\n                             \"{} != {}\","}, {"sha": "4fb899125e8ad9f0612149d10b97ecf360bc778c", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -79,10 +79,10 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                         cx,\n                         NEG_CMP_OP_ON_PARTIAL_ORD,\n                         expr.span,\n-                        \"The use of negated comparison operators on partially ordered \\\n-                        types produces code that is hard to read and refactor. Please \\\n+                        \"the use of negated comparison operators on partially ordered \\\n+                        types produces code that is hard to read and refactor, please \\\n                         consider using the `partial_cmp` method instead, to make it \\\n-                        clear that the two values could be incomparable.\"\n+                        clear that the two values could be incomparable\"\n                     )\n                 }\n             }"}, {"sha": "aa550510867f9af5df50165cdf9ef18845ca9a4f", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -47,7 +47,7 @@ fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n         if let Constant::Int(1) = consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit));\n         if cx.typeck_results().expr_ty(exp).is_integral();\n         then {\n-            span_lint(cx, NEG_MULTIPLY, span, \"Negation by multiplying with `-1`\");\n+            span_lint(cx, NEG_MULTIPLY, span, \"negation by multiplying with `-1`\");\n         }\n     }\n }"}, {"sha": "3c041bac234a589f8034f1dd5ede89db0b6c1c8b", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -42,13 +42,13 @@ impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n                 if let BinOpKind::Lt = op.node {\n                     if let BinOpKind::Add = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n+                            \"you are trying to use classic C overflow conditions that will fail in Rust\");\n                     }\n                 }\n                 if let BinOpKind::Gt = op.node {\n                     if let BinOpKind::Sub = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n+                            \"you are trying to use classic C underflow conditions that will fail in Rust\");\n                     }\n                 }\n             }\n@@ -67,13 +67,13 @@ impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n                 if let BinOpKind::Gt = op.node {\n                     if let BinOpKind::Add = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n+                            \"you are trying to use classic C overflow conditions that will fail in Rust\");\n                     }\n                 }\n                 if let BinOpKind::Lt = op.node {\n                     if let BinOpKind::Sub = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n+                            \"you are trying to use classic C underflow conditions that will fail in Rust\");\n                     }\n                 }\n             }"}, {"sha": "b8583402928b424013200de3d1680352c3f34b12", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n                     cx,\n                     PATH_BUF_PUSH_OVERWRITE,\n                     lit.span,\n-                    \"Calling `push` with '/' or '\\\\' (file system root) will overwrite the previous path definition\",\n+                    \"calling `push` with '/' or '\\\\' (file system root) will overwrite the previous path definition\",\n                     \"try\",\n                     format!(\"\\\"{}\\\"\", pushed_path_lit.trim_start_matches(|c| c == '/' || c == '\\\\')),\n                     Applicability::MachineApplicable,"}, {"sha": "460d631fab0fdc62ac9207e3112c9bfb65383937", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                     cx,\n                     CMP_NULL,\n                     expr.span,\n-                    \"Comparing with null is better expressed by the `.is_null()` method\",\n+                    \"comparing with null is better expressed by the `.is_null()` method\",\n                 );\n             }\n         }"}, {"sha": "f88075798ca7515d61b6f478933956c8f3804add", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n                          span_lint(cx,\n                                    RANGE_ZIP_WITH_LEN,\n                                    expr.span,\n-                                   &format!(\"It is more idiomatic to use `{}.iter().enumerate()`\",\n+                                   &format!(\"it is more idiomatic to use `{}.iter().enumerate()`\",\n                                             snippet(cx, iter_args[0].span, \"_\")));\n                     }\n                 }"}, {"sha": "7bbcc67aa2ddf13db6eb565df72047355c2f1666", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -86,13 +86,13 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n         if !item.span.from_expansion() {\n             if let ItemKind::Const(_, ref var_type, _) = item.kind {\n-                self.visit_type(var_type, cx, \"Constants have by default a `'static` lifetime\");\n+                self.visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)\n             }\n \n             if let ItemKind::Static(ref var_type, _, _) = item.kind {\n-                self.visit_type(var_type, cx, \"Statics have by default a `'static` lifetime\");\n+                self.visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }\n     }"}, {"sha": "3fda00403c611890e9053cb60bb7b9cfcdcba720", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -92,7 +92,7 @@ impl EarlyLintPass for RefInDeref {\n                     cx,\n                     REF_IN_DEREF,\n                     object.span,\n-                    \"Creating a reference that is immediately dereferenced.\",\n+                    \"creating a reference that is immediately dereferenced\",\n                     \"try this\",\n                     snippet_with_applicability(cx, inner.span, \"_\", &mut applicability).to_string(),\n                     applicability,"}, {"sha": "4e335a0222f2067c3fd33e05f9bed56c5fa91bff", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n                     cx,\n                     SUSPICIOUS_ARITHMETIC_IMPL,\n                     binop.span,\n-                    &format!(r#\"Suspicious use of binary operator in `{}` impl\"#, impl_trait),\n+                    &format!(\"suspicious use of binary operator in `{}` impl\", impl_trait),\n                 );\n             }\n \n@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n                     cx,\n                     SUSPICIOUS_OP_ASSIGN_IMPL,\n                     binop.span,\n-                    &format!(r#\"Suspicious use of binary operator in `{}` impl\"#, impl_trait),\n+                    &format!(\"suspicious use of binary operator in `{}` impl\", impl_trait),\n                 );\n             }\n         }"}, {"sha": "ea4b8172c9c2e8bb6f5b61bdb7a8e407b8612cb8", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -181,8 +181,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             self.cx,\n                             UNNECESSARY_UNWRAP,\n                             expr.span,\n-                            &format!(\"You checked before that `{}()` cannot fail. \\\n-                            Instead of checking and unwrapping, it's better to use `if let` or `match`.\",\n+                            &format!(\"you checked before that `{}()` cannot fail, \\\n+                            instead of checking and unwrapping, it's better to use `if let` or `match`\",\n                             method_name.ident.name),\n                             |diag| { diag.span_label(unwrappable.check.span, \"the check is happening here\"); },\n                         );\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             self.cx,\n                             PANICKING_UNWRAP,\n                             expr.span,\n-                            &format!(\"This call to `{}()` will always panic.\",\n+                            &format!(\"this call to `{}()` will always panic\",\n                             method_name.ident.name),\n                             |diag| { diag.span_label(unwrappable.check.span, \"because of this check\"); },\n                         );"}, {"sha": "a3975683cb3021395a7a9f4a29c6ef585455bb09", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -75,12 +75,12 @@ pub fn get_attr<'a>(\n                 })\n                 .map_or_else(\n                     || {\n-                        sess.span_err(attr_segments[1].ident.span, \"Usage of unknown attribute\");\n+                        sess.span_err(attr_segments[1].ident.span, \"usage of unknown attribute\");\n                         false\n                     },\n                     |deprecation_status| {\n                         let mut diag =\n-                            sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n+                            sess.struct_span_err(attr_segments[1].ident.span, \"usage of deprecated attribute\");\n                         match *deprecation_status {\n                             DeprecationStatus::Deprecated => {\n                                 diag.emit();"}, {"sha": "dc8779748e0ec534bd881a05e233b1040f6549d2", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -412,7 +412,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"drop_bounds\",\n         group: \"correctness\",\n-        desc: \"Bounds of the form `T: Drop` are useless\",\n+        desc: \"bounds of the form `T: Drop` are useless\",\n         deprecation: None,\n         module: \"drop_bounds\",\n     },"}, {"sha": "fb12257021a1e7e0f0751c65c233392c0d8572fa", "filename": "tests/ui-toml/functions_maxlines/test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: This function has a large number of lines.\n+error: this function has a large number of lines\n   --> $DIR/test.rs:18:1\n    |\n LL | / fn too_many_lines() {\n@@ -9,7 +9,7 @@ LL | | }\n    |\n    = note: `-D clippy::too-many-lines` implied by `-D warnings`\n \n-error: This function has a large number of lines.\n+error: this function has a large number of lines\n   --> $DIR/test.rs:38:1\n    |\n LL | / fn comment_before_code() {"}, {"sha": "55d94b8257dba3b96408dad7eb849811623e0114", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -84,25 +84,25 @@ error: order comparisons between booleans can be simplified\n LL |     if x > y {\n    |        ^^^^^ help: try simplifying it as shown: `x & !y`\n \n-error: This comparison might be written more concisely\n+error: this comparison might be written more concisely\n   --> $DIR/bool_comparison.rs:120:8\n    |\n LL |     if a == !b {};\n    |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n \n-error: This comparison might be written more concisely\n+error: this comparison might be written more concisely\n   --> $DIR/bool_comparison.rs:121:8\n    |\n LL |     if !a == b {};\n    |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n \n-error: This comparison might be written more concisely\n+error: this comparison might be written more concisely\n   --> $DIR/bool_comparison.rs:125:8\n    |\n LL |     if b == !a {};\n    |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n \n-error: This comparison might be written more concisely\n+error: this comparison might be written more concisely\n   --> $DIR/bool_comparison.rs:126:8\n    |\n LL |     if !b == a {};"}, {"sha": "f42b246afd29319233c12bde09cb35726f959776", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: This generic shadows the built-in type `u32`\n+error: this generic shadows the built-in type `u32`\n   --> $DIR/builtin-type-shadow.rs:4:8\n    |\n LL | fn foo<u32>(a: u32) -> u32 {"}, {"sha": "1dc37fc8b259f576d046aeec7090a998465cabd0", "filename": "tests/ui/bytecount.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fbytecount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fbytecount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,26 +1,26 @@\n-error: You appear to be counting bytes the naive way\n+error: you appear to be counting bytes the naive way\n   --> $DIR/bytecount.rs:5:13\n    |\n LL |     let _ = x.iter().filter(|&&a| a == 0).count(); // naive byte count\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count(x, 0)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the bytecount crate: `bytecount::count(x, 0)`\n    |\n note: the lint level is defined here\n   --> $DIR/bytecount.rs:1:8\n    |\n LL | #[deny(clippy::naive_bytecount)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: You appear to be counting bytes the naive way\n+error: you appear to be counting bytes the naive way\n   --> $DIR/bytecount.rs:7:13\n    |\n LL |     let _ = (&x[..]).iter().filter(|&a| *a == 0).count(); // naive byte count\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count((&x[..]), 0)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the bytecount crate: `bytecount::count((&x[..]), 0)`\n \n-error: You appear to be counting bytes the naive way\n+error: you appear to be counting bytes the naive way\n   --> $DIR/bytecount.rs:19:13\n    |\n LL |     let _ = x.iter().filter(|a| b + 1 == **a).count(); // naive byte count\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count(x, b + 1)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the bytecount crate: `bytecount::count(x, b + 1)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "18518def0acbe42e596234de18964803d6059a18", "filename": "tests/ui/checked_conversions.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,96 +1,96 @@\n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:17:13\n    |\n LL |     let _ = value <= (u32::max_value() as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:18:13\n    |\n LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:22:13\n    |\n LL |     let _ = value <= i64::from(u16::max_value()) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:23:13\n    |\n LL |     let _ = value <= i64::from(u16::MAX) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:27:13\n    |\n LL |     let _ = value <= (u8::max_value() as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:28:13\n    |\n LL |     let _ = value <= (u8::MAX as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:34:13\n    |\n LL |     let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:35:13\n    |\n LL |     let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:39:13\n    |\n LL |     let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:40:13\n    |\n LL |     let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:46:13\n    |\n LL |     let _ = value <= i32::max_value() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:47:13\n    |\n LL |     let _ = value <= i32::MAX as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:51:13\n    |\n LL |     let _ = value <= isize::max_value() as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:52:13\n    |\n LL |     let _ = value <= isize::MAX as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:56:13\n    |\n LL |     let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified.\n+error: checked cast can be simplified\n   --> $DIR/checked_conversions.rs:57:13\n    |\n LL |     let _ = value <= u16::MAX as u32 && value as i32 == 5;"}, {"sha": "33bb5136ef8e70ff8c5a24fd0a1f90fb9b75ac27", "filename": "tests/ui/checked_unwrap/complex_conditionals.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:8:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:9:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -27,7 +27,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:10:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -36,7 +36,7 @@ LL |     if x.is_ok() && y.is_err() {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:11:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -45,7 +45,7 @@ LL |     if x.is_ok() && y.is_err() {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:25:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -54,7 +54,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:26:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -63,7 +63,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:27:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -72,7 +72,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:28:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -81,15 +81,15 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:32:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:33:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -98,7 +98,7 @@ LL |         x.unwrap(); // unnecessary\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:34:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -107,7 +107,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:35:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -116,7 +116,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:36:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -125,7 +125,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         z.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:37:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -134,7 +134,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         z.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:45:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -143,7 +143,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:46:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -152,7 +152,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:47:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -161,7 +161,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         y.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:48:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -170,7 +170,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         y.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:49:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -179,7 +179,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         z.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:50:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {"}, {"sha": "a01f7f956f629c80ac8affb2f702a1b148b794d2", "filename": "tests/ui/checked_unwrap/complex_conditionals_nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals_nested.rs:8:13\n    |\n LL |         if x.is_some() {\n@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals_nested.rs:10:13\n    |\n LL |         if x.is_some() {"}, {"sha": "416ec1a01ab3aa27e59b9ed44bd9d8cde45c911e", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:39:9\n    |\n LL |     if x.is_some() {\n@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:41:9\n    |\n LL |     if x.is_some() {\n@@ -27,15 +27,15 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:44:9\n    |\n LL |     if x.is_none() {\n    |        ----------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:46:9\n    |\n LL |     if x.is_none() {\n@@ -44,7 +44,7 @@ LL |     if x.is_none() {\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:7:13\n    |\n LL |         if $a.is_some() {\n@@ -57,15 +57,15 @@ LL |     m!(x);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:54:9\n    |\n LL |     if x.is_ok() {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/simple_conditionals.rs:55:9\n    |\n LL |     if x.is_ok() {\n@@ -74,7 +74,7 @@ LL |         x.unwrap(); // unnecessary\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:57:9\n    |\n LL |     if x.is_ok() {\n@@ -83,7 +83,7 @@ LL |     if x.is_ok() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:58:9\n    |\n LL |     if x.is_ok() {\n@@ -92,15 +92,15 @@ LL |     if x.is_ok() {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:61:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:62:9\n    |\n LL |     if x.is_err() {\n@@ -109,7 +109,7 @@ LL |         x.unwrap(); // will panic\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:64:9\n    |\n LL |     if x.is_err() {\n@@ -118,7 +118,7 @@ LL |     if x.is_err() {\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/simple_conditionals.rs:65:9\n    |\n LL |     if x.is_err() {"}, {"sha": "a1f4c70fb2786ede59a99564e629a4715ab3fca7", "filename": "tests/ui/cmp_null.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,12 +1,12 @@\n-error: Comparing with null is better expressed by the `.is_null()` method\n+error: comparing with null is better expressed by the `.is_null()` method\n   --> $DIR/cmp_null.rs:9:8\n    |\n LL |     if p == ptr::null() {\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-null` implied by `-D warnings`\n \n-error: Comparing with null is better expressed by the `.is_null()` method\n+error: comparing with null is better expressed by the `.is_null()` method\n   --> $DIR/cmp_null.rs:14:8\n    |\n LL |     if m == ptr::null_mut() {"}, {"sha": "26b2057548bd9e46b3dc94c7a6ff6366a30b33ce", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,48 +1,48 @@\n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:8:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n    = note: `-D clippy::default-trait-access` implied by `-D warnings`\n \n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:12:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:14:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:18:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n+error: calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:28:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n    |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n \n-error: Calling `TupleDerivedDefault::default()` is more clear than this expression\n+error: calling `TupleDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:34:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n-error: Calling `ArrayDerivedDefault::default()` is more clear than this expression\n+error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:36:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n-error: Calling `TupleStructDerivedDefault::default()` is more clear than this expression\n+error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:40:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();"}, {"sha": "05ef4e25f7f870b8b8c9056ff6f540de89617b1b", "filename": "tests/ui/double_comparison.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdouble_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdouble_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,48 +1,48 @@\n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:6:8\n    |\n LL |     if x == y || x < y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n    |\n    = note: `-D clippy::double-comparisons` implied by `-D warnings`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:9:8\n    |\n LL |     if x < y || x == y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:12:8\n    |\n LL |     if x == y || x > y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x >= y`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:15:8\n    |\n LL |     if x > y || x == y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x >= y`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:18:8\n    |\n LL |     if x < y || x > y {\n    |        ^^^^^^^^^^^^^^ help: try: `x != y`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:21:8\n    |\n LL |     if x > y || x < y {\n    |        ^^^^^^^^^^^^^^ help: try: `x != y`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:24:8\n    |\n LL |     if x <= y && x >= y {\n    |        ^^^^^^^^^^^^^^^^ help: try: `x == y`\n \n-error: This binary expression can be simplified\n+error: this binary expression can be simplified\n   --> $DIR/double_comparison.rs:27:8\n    |\n LL |     if x >= y && x <= y {"}, {"sha": "40fcad2ab1d4a64b5c88a7a451d08f9180379784", "filename": "tests/ui/double_parens.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,36 +1,36 @@\n-error: Consider removing unnecessary double parentheses\n+error: consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:15:5\n    |\n LL |     ((0))\n    |     ^^^^^\n    |\n    = note: `-D clippy::double-parens` implied by `-D warnings`\n \n-error: Consider removing unnecessary double parentheses\n+error: consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:19:14\n    |\n LL |     dummy_fn((0));\n    |              ^^^\n \n-error: Consider removing unnecessary double parentheses\n+error: consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:23:20\n    |\n LL |     x.dummy_method((0));\n    |                    ^^^\n \n-error: Consider removing unnecessary double parentheses\n+error: consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:27:5\n    |\n LL |     ((1, 2))\n    |     ^^^^^^^^\n \n-error: Consider removing unnecessary double parentheses\n+error: consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:31:5\n    |\n LL |     (())\n    |     ^^^^\n \n-error: Consider removing unnecessary double parentheses\n+error: consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:53:16\n    |\n LL |     assert_eq!(((1, 2)), (1, 2), \"Error\");"}, {"sha": "8208c0ed7e3985e6e4059d4373574622f8540fb4", "filename": "tests/ui/drop_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,12 +1,12 @@\n-error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n+error: bounds of the form `T: Drop` are useless, use `std::mem::needs_drop` to detect if a type has drop glue\n   --> $DIR/drop_bounds.rs:2:11\n    |\n LL | fn foo<T: Drop>() {}\n    |           ^^^^\n    |\n    = note: `#[deny(clippy::drop_bounds)]` on by default\n \n-error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n+error: bounds of the form `T: Drop` are useless, use `std::mem::needs_drop` to detect if a type has drop glue\n   --> $DIR/drop_bounds.rs:5:8\n    |\n LL |     T: Drop,"}, {"sha": "594fca44a321071ac46cdc9ad5bcac5676f69218", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n+error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:11:1\n    |\n LL | / #[crate_type = \"lib\"]\n@@ -9,15 +9,15 @@ LL | | fn with_one_newline_and_comment() { assert!(true) }\n    |\n    = note: `-D clippy::empty-line-after-outer-attr` implied by `-D warnings`\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n+error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:23:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | fn with_one_newline() { assert!(true) }\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n+error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:28:1\n    |\n LL | / #[crate_type = \"lib\"]\n@@ -26,23 +26,23 @@ LL | |\n LL | | fn with_two_newlines() { assert!(true) }\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n+error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:35:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | enum Baz {\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n+error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:43:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | struct Foo {\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n+error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:51:1\n    |\n LL | / #[crate_type = \"lib\"]"}, {"sha": "c640c82d6d7c991e9df76d297118ea3de576a4cf", "filename": "tests/ui/functions_maxlines.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Ffunctions_maxlines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Ffunctions_maxlines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions_maxlines.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: This function has a large number of lines.\n+error: this function has a large number of lines\n   --> $DIR/functions_maxlines.rs:58:1\n    |\n LL | / fn bad_lines() {"}, {"sha": "c78560007217df78dd4f78a65810cb4956cabfef", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,24 +1,24 @@\n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:16:21\n    |\n LL |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:19:30\n    |\n LL |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:22:24\n    |\n LL |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:25:33\n    |\n LL |     let _not_greater_or_equal = !(a_value >= another_value);"}, {"sha": "ad677f6d6fb9bf46c897fb122dc798883cb21ac4", "filename": "tests/ui/neg_multiply.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,12 +1,12 @@\n-error: Negation by multiplying with `-1`\n+error: negation by multiplying with `-1`\n   --> $DIR/neg_multiply.rs:27:5\n    |\n LL |     x * -1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::neg-multiply` implied by `-D warnings`\n \n-error: Negation by multiplying with `-1`\n+error: negation by multiplying with `-1`\n   --> $DIR/neg_multiply.rs:29:5\n    |\n LL |     -1 * x;"}, {"sha": "19e843c2c0a50d5b468a9a2a4447db3bcac7f6e2", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,48 +1,48 @@\n-error: You are trying to use classic C overflow conditions that will fail in Rust.\n+error: you are trying to use classic C overflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:8:8\n    |\n LL |     if a + b < a {}\n    |        ^^^^^^^^^\n    |\n    = note: `-D clippy::overflow-check-conditional` implied by `-D warnings`\n \n-error: You are trying to use classic C overflow conditions that will fail in Rust.\n+error: you are trying to use classic C overflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:9:8\n    |\n LL |     if a > a + b {}\n    |        ^^^^^^^^^\n \n-error: You are trying to use classic C overflow conditions that will fail in Rust.\n+error: you are trying to use classic C overflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:10:8\n    |\n LL |     if a + b < b {}\n    |        ^^^^^^^^^\n \n-error: You are trying to use classic C overflow conditions that will fail in Rust.\n+error: you are trying to use classic C overflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:11:8\n    |\n LL |     if b > a + b {}\n    |        ^^^^^^^^^\n \n-error: You are trying to use classic C underflow conditions that will fail in Rust.\n+error: you are trying to use classic C underflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:12:8\n    |\n LL |     if a - b > b {}\n    |        ^^^^^^^^^\n \n-error: You are trying to use classic C underflow conditions that will fail in Rust.\n+error: you are trying to use classic C underflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:13:8\n    |\n LL |     if b < a - b {}\n    |        ^^^^^^^^^\n \n-error: You are trying to use classic C underflow conditions that will fail in Rust.\n+error: you are trying to use classic C underflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:14:8\n    |\n LL |     if a - b > a {}\n    |        ^^^^^^^^^\n \n-error: You are trying to use classic C underflow conditions that will fail in Rust.\n+error: you are trying to use classic C underflow conditions that will fail in Rust\n   --> $DIR/overflow_check_conditional.rs:15:8\n    |\n LL |     if a < a - b {}"}, {"sha": "bb8dce2bbba4b3f4d560b34bd76577cdd5a6b17e", "filename": "tests/ui/path_buf_push_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fpath_buf_push_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fpath_buf_push_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpath_buf_push_overwrite.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: Calling `push` with '/' or '/' (file system root) will overwrite the previous path definition\n+error: calling `push` with '/' or '/' (file system root) will overwrite the previous path definition\n   --> $DIR/path_buf_push_overwrite.rs:7:12\n    |\n LL |     x.push(\"/bar\");"}, {"sha": "dcb5061371f80e94f416288eb13e8fcd7c13d222", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: It is more idiomatic to use `v1.iter().enumerate()`\n+error: it is more idiomatic to use `v1.iter().enumerate()`\n   --> $DIR/range.rs:5:14\n    |\n LL |     let _x = v1.iter().zip(0..v1.len());"}, {"sha": "649831f9c069af3d30a60cbf1d06a14f3b83ab9b", "filename": "tests/ui/redundant_static_lifetimes.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fredundant_static_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fredundant_static_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,96 +1,96 @@\n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:8:17\n    |\n LL | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n    |                -^^^^^^^---- help: consider removing `'static`: `&str`\n    |\n    = note: `-D clippy::redundant-static-lifetimes` implied by `-D warnings`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:12:21\n    |\n LL | const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                    -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:14:32\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                               -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:14:47\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:16:17\n    |\n LL | const VAR_SIX: &'static u8 = &5;\n    |                -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:18:20\n    |\n LL | const VAR_HEIGHT: &'static Foo = &Foo {};\n    |                   -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:20:19\n    |\n LL | const VAR_SLICE: &'static [u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:22:19\n    |\n LL | const VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                  -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:24:19\n    |\n LL | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:26:25\n    |\n LL | static STATIC_VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n    |                        -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:30:29\n    |\n LL | static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                            -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:32:25\n    |\n LL | static STATIC_VAR_SIX: &'static u8 = &5;\n    |                        -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:34:28\n    |\n LL | static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n    |                           -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:36:27\n    |\n LL | static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:38:27\n    |\n LL | static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                          -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:40:27\n    |\n LL | static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static."}, {"sha": "cc7e55a757a32895778366d2974b2cef05075183", "filename": "tests/ui/redundant_static_lifetimes_multiple.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fredundant_static_lifetimes_multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fredundant_static_lifetimes_multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes_multiple.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,60 +1,60 @@\n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:3:18\n    |\n LL | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n    |                 -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n    |\n    = note: `-D clippy::redundant-static-lifetimes` implied by `-D warnings`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:3:30\n    |\n LL | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n    |                             -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:5:29\n    |\n LL | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n    |                            -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n \n-error: Constants have by default a `'static` lifetime\n+error: constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:5:39\n    |\n LL | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n    |                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:7:40\n    |\n LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                                       -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:7:55\n    |\n LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:9:26\n    |\n LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n    |                         -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:9:38\n    |\n LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n    |                                     -^^^^^^^---- help: consider removing `'static`: `&str`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:11:37\n    |\n LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n    |                                    -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n \n-error: Statics have by default a `'static` lifetime\n+error: statics have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes_multiple.rs:11:47\n    |\n LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];"}, {"sha": "88046762483567d267329223c4c81aa6fc87b8f8", "filename": "tests/ui/renamed_builtin_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Frenamed_builtin_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Frenamed_builtin_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frenamed_builtin_attr.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: Usage of deprecated attribute\n+error: usage of deprecated attribute\n   --> $DIR/renamed_builtin_attr.rs:3:11\n    |\n LL | #[clippy::cyclomatic_complexity = \"1\"]"}, {"sha": "23d47e3f1ff085b647451daa653918cf31093863", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,20 +1,20 @@\n-error: Suspicious use of binary operator in `Add` impl\n+error: suspicious use of binary operator in `Add` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:11:20\n    |\n LL |         Foo(self.0 - other.0)\n    |                    ^\n    |\n    = note: `-D clippy::suspicious-arithmetic-impl` implied by `-D warnings`\n \n-error: Suspicious use of binary operator in `AddAssign` impl\n+error: suspicious use of binary operator in `AddAssign` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:17:23\n    |\n LL |         *self = *self - other;\n    |                       ^\n    |\n    = note: `#[deny(clippy::suspicious_op_assign_impl)]` on by default\n \n-error: Suspicious use of binary operator in `MulAssign` impl\n+error: suspicious use of binary operator in `MulAssign` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:30:16\n    |\n LL |         self.0 /= other.0;"}, {"sha": "618c5980d64e5bdc83b64b24f9405695cbf6cbef", "filename": "tests/ui/unknown_attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Funknown_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Funknown_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_attribute.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: Usage of unknown attribute\n+error: usage of unknown attribute\n   --> $DIR/unknown_attribute.rs:1:11\n    |\n LL | #[clippy::unknown]"}, {"sha": "d0a0f219097e5f20b2aa325c345fc2b71128c4d8", "filename": "tests/ui/unnecessary_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Funnecessary_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Funnecessary_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_ref.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,4 +1,4 @@\n-error: Creating a reference that is immediately dereferenced.\n+error: creating a reference that is immediately dereferenced\n   --> $DIR/unnecessary_ref.rs:13:17\n    |\n LL |     let inner = (&outer).inner;"}, {"sha": "b8d3c2945322b66e6e59859595fb44a12379ebc9", "filename": "tests/ui/unneeded_field_pattern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Funneeded_field_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc5bfd473c458923504e0330e559cf671736acbb/tests%2Fui%2Funneeded_field_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.stderr?ref=cc5bfd473c458923504e0330e559cf671736acbb", "patch": "@@ -1,19 +1,19 @@\n-error: You matched a field with a wildcard pattern. Consider using `..` instead\n+error: you matched a field with a wildcard pattern, consider using `..` instead\n   --> $DIR/unneeded_field_pattern.rs:14:15\n    |\n LL |         Foo { a: _, b: 0, .. } => {},\n    |               ^^^^\n    |\n    = note: `-D clippy::unneeded-field-pattern` implied by `-D warnings`\n-   = help: Try with `Foo { b: 0, .. }`\n+   = help: try with `Foo { b: 0, .. }`\n \n-error: All the struct fields are matched to a wildcard pattern, consider using `..`.\n+error: all the struct fields are matched to a wildcard pattern, consider using `..`\n   --> $DIR/unneeded_field_pattern.rs:16:9\n    |\n LL |         Foo { a: _, b: _, c: _ } => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Try with `Foo { .. }` instead\n+   = help: try with `Foo { .. }` instead\n \n error: aborting due to 2 previous errors\n "}]}