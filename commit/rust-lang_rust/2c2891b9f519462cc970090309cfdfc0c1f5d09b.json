{"sha": "2c2891b9f519462cc970090309cfdfc0c1f5d09b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjg5MWI5ZjUxOTQ2MmNjOTcwMDkwMzA5Y2ZkZmMwYzFmNWQwOWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-16T14:03:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-20T08:36:49Z"}, "message": "Add structured suggestions for proc macro use imports", "tree": {"sha": "f5b2ea812c094532810d05a84a2d6ed5d0a1ad54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b2ea812c094532810d05a84a2d6ed5d0a1ad54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2891b9f519462cc970090309cfdfc0c1f5d09b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloSlCQACgkQpp+NIls6\n19kGhg//Ye6Y1gDHeRGoGA6T4991FAFDy2Akm86jA8iigdGScjfagjyMa1m3UlQ0\nmAXVMUXLV6n9lsRPJJlwwxkraYmQaEGIYGjkG8w1UMtxHPRzoXrA1+7tKbFYD+Hs\nD1iQYKQ8a70hFD0ox9diBNNNfRyuYE7GF4kliNKsw7Pqc3mAr6SiIe+8dzpj1HRY\n8+xWL7NWC0DQH5WRFxx2jxiQnjlnFsiaRGiY/dIEMHwSJmSUq2ZCBM+DQKDVVnuW\nPIzyiSru7QW/pEZhKh240/rPF6ic7WGQgUlhGIDuDRxPMU9vL2u0RxVDwilg0sP4\nv6cmRvSKRo1R+j0x+Tc6HhFTQF8CRGjDbRd3yMkV5bLw4TfW+HDiqJrtJ4EpCQ75\nTuBYq95la1qbRdZT1iWz32BjOlnp6TCB5mPScDLrgUFEebpo7iU2Oq4mmUrUxka4\nXAsMkqcGcy5HUOARQi7NabOz31W1n8WBHNTzOC2miTBu0NXh0kRVQV/PBwIQnW6D\ncJqSdf9iNFHu9jx85UvUQ2fTsYxlGFHhleu4/g9dyAVtKbhv5yKuGQvOj4gJcMO9\nFAiUT1VhoSX/yvHgEFnd5H+tVOTufG5QBLCBF5XHYX/m6YJtE9IroeSVxLfIeaAT\nohqYMiOaccyhkEZpDZ//BVi50zrdrv2xC7LTkfBk5UN9GPrKDp4=\n=0Rsv\n-----END PGP SIGNATURE-----", "payload": "tree f5b2ea812c094532810d05a84a2d6ed5d0a1ad54\nparent a24edb9bcef35b7ac540c6906f1c8672aa603b0d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510841005 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511167009 +0100\n\nAdd structured suggestions for proc macro use imports\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2891b9f519462cc970090309cfdfc0c1f5d09b", "html_url": "https://github.com/rust-lang/rust/commit/2c2891b9f519462cc970090309cfdfc0c1f5d09b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2891b9f519462cc970090309cfdfc0c1f5d09b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "html_url": "https://github.com/rust-lang/rust/commit/a24edb9bcef35b7ac540c6906f1c8672aa603b0d"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "352c4589c5a69c1e649eb7446bfbf53a7c69f9b4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2891b9f519462cc970090309cfdfc0c1f5d09b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2891b9f519462cc970090309cfdfc0c1f5d09b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2c2891b9f519462cc970090309cfdfc0c1f5d09b", "patch": "@@ -1290,6 +1290,8 @@ pub struct Resolver<'a> {\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n     /// `use` injections are delayed for better placement and deduplication\n     use_injections: Vec<UseError<'a>>,\n+    /// `use` injections for proc macros wrongly imported with #[macro_use]\n+    proc_mac_errors: Vec<macros::ProcMacError>,\n \n     gated_errors: FxHashSet<Span>,\n     disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n@@ -1498,6 +1500,7 @@ impl<'a> Resolver<'a> {\n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n             use_injections: Vec::new(),\n+            proc_mac_errors: Vec::new(),\n             gated_errors: FxHashSet(),\n             disallowed_shadowing: Vec::new(),\n \n@@ -3551,6 +3554,7 @@ impl<'a> Resolver<'a> {\n     fn report_errors(&mut self, krate: &Crate) {\n         self.report_shadowing_errors();\n         self.report_with_use_injections(krate);\n+        self.report_proc_macro_import(krate);\n         let mut reported_spans = FxHashSet();\n \n         for &AmbiguityError { span, name, b1, b2, lexical, legacy } in &self.ambiguity_errors {"}, {"sha": "3d1d7c0c48a1e92135ddbe38517779b42a0a7bbd", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2c2891b9f519462cc970090309cfdfc0c1f5d09b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2891b9f519462cc970090309cfdfc0c1f5d09b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2c2891b9f519462cc970090309cfdfc0c1f5d09b", "patch": "@@ -83,6 +83,14 @@ pub struct LegacyBinding<'a> {\n     pub span: Span,\n }\n \n+pub struct ProcMacError {\n+    crate_name: Symbol,\n+    name: Symbol,\n+    module: ast::NodeId,\n+    use_span: Span,\n+    warn_msg: &'static str,\n+}\n+\n #[derive(Copy, Clone)]\n pub enum MacroBinding<'a> {\n     Legacy(&'a LegacyBinding<'a>),\n@@ -779,12 +787,37 @@ impl<'a> Resolver<'a> {\n             _ => return,\n         };\n \n-        let crate_name = self.cstore.crate_name_untracked(krate);\n+        let def_id = self.current_module.normal_ancestor_id;\n+        let node_id = self.definitions.as_local_node_id(def_id).unwrap();\n+\n+        self.proc_mac_errors.push(ProcMacError {\n+            crate_name: self.cstore.crate_name_untracked(krate),\n+            name,\n+            module: node_id,\n+            use_span,\n+            warn_msg,\n+        });\n+    }\n+\n+    pub fn report_proc_macro_import(&mut self, krate: &ast::Crate) {\n+        for err in self.proc_mac_errors.drain(..) {\n+            let (span, found_use) = ::UsePlacementFinder::check(krate, err.module);\n \n-        self.session.struct_span_err(use_span, warn_msg)\n-            .help(&format!(\"instead, import the procedural macro like any other item: \\\n-                             `use {}::{};`\", crate_name, name))\n-            .emit();\n+            if let Some(span) = span {\n+                let found_use = if found_use { \"\" } else { \"\\n\" };\n+                self.session.struct_span_err(err.use_span, err.warn_msg)\n+                    .span_suggestion(\n+                        span,\n+                        \"instead, import the procedural macro like any other item\",\n+                        format!(\"use {}::{};{}\", err.crate_name, err.name, found_use),\n+                    ).emit();\n+            } else {\n+                self.session.struct_span_err(err.use_span, err.warn_msg)\n+                    .help(&format!(\"instead, import the procedural macro like any other item: \\\n+                                    `use {}::{};`\", err.crate_name, err.name))\n+                    .emit();\n+            }\n+        }\n     }\n \n     fn gate_legacy_custom_derive(&mut self, name: Symbol, span: Span) {"}, {"sha": "146d0ff72d83f7b16bad3a761bed7d8f0fead8ef", "filename": "src/test/ui/issue-35976.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c2891b9f519462cc970090309cfdfc0c1f5d09b/src%2Ftest%2Fui%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2891b9f519462cc970090309cfdfc0c1f5d09b/src%2Ftest%2Fui%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35976.stderr?ref=2c2891b9f519462cc970090309cfdfc0c1f5d09b", "patch": "@@ -3,7 +3,6 @@ error: the `wait` method cannot be invoked on a trait object\n    |\n 24 |     arg.wait();\n    |         ^^^^\n-   |\n help: another candidate was found in the following trait, perhaps add a `use` for it:\n    |\n 11 | use private::Future;"}]}