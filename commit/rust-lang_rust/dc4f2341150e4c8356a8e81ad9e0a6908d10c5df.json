{"sha": "dc4f2341150e4c8356a8e81ad9e0a6908d10c5df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNGYyMzQxMTUwZTRjODM1NmE4ZTgxYWQ5ZTBhNjkwOGQxMGM1ZGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-29T15:09:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-29T15:09:17Z"}, "message": "Implement float binops", "tree": {"sha": "be4201d3aa2e49e1184391140f2b33cd0010798b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4201d3aa2e49e1184391140f2b33cd0010798b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df", "html_url": "https://github.com/rust-lang/rust/commit/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaa122d34b37c5335fd683b86c380395e9d201c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaa122d34b37c5335fd683b86c380395e9d201c", "html_url": "https://github.com/rust-lang/rust/commit/ebaa122d34b37c5335fd683b86c380395e9d201c"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "7c1efe263f69ca1ec2938487aa3c83272b01d954", "filename": "Readme.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=dc4f2341150e4c8356a8e81ad9e0a6908d10c5df", "patch": "@@ -41,7 +41,6 @@ $ ./build.sh\n * Unsized types\n * Slice indexing\n * Sub slice\n-* Closures\n * Some rvalue's\n \n * Inline assembly"}, {"sha": "6c060be973bbebba023774132fa61387eeb495a1", "filename": "src/base.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4f2341150e4c8356a8e81ad9e0a6908d10c5df/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=dc4f2341150e4c8356a8e81ad9e0a6908d10c5df", "patch": "@@ -252,6 +252,9 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                         TypeVariants::TyInt(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true, false)\n                         }\n+                        TypeVariants::TyFloat(_) => {\n+                            trans_float_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n+                        }\n                         TypeVariants::TyChar => {\n                             trans_char_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n                         }\n@@ -413,6 +416,10 @@ macro_rules! binop_match {\n         let b = $fx.bcx.ins().icmp(IntCC::$cc, $lhs, $rhs);\n         $fx.bcx.ins().bint(types::I8, b)\n     }};\n+    (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, fcmp($cc:ident)) => {{\n+        let b = $fx.bcx.ins().fcmp(FloatCC::$cc, $lhs, $rhs);\n+        $fx.bcx.ins().bint(types::I8, b)\n+    }};\n     (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $name:ident) => {\n         $fx.bcx.ins().$name($lhs, $rhs)\n     };\n@@ -430,7 +437,7 @@ macro_rules! binop_match {\n     }\n }\n \n-pub fn trans_bool_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n+fn trans_bool_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n     let res = binop_match! {\n         fx, bin_op, false, lhs, rhs, \"bool\";\n         Add (_) bug;\n@@ -492,7 +499,34 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinO\n     CValue::ByVal(res, fx.layout_of(ty))\n }\n \n-pub fn trans_char_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n+fn trans_float_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n+    let res = binop_match! {\n+        fx, bin_op, false, lhs, rhs, \"bool\";\n+        Add (_) fadd;\n+        Sub (_) fsub;\n+        Mul (_) fmul;\n+        Div (_) fdiv;\n+        Rem (_) bug;\n+        BitXor (_) bxor;\n+        BitAnd (_) band;\n+        BitOr (_) bor;\n+        Shl (_) bug;\n+        Shr (_) bug;\n+\n+        Eq (_) fcmp(Equal);\n+        Lt (_) fcmp(LessThan);\n+        Le (_) fcmp(LessThanOrEqual);\n+        Ne (_) fcmp(NotEqual);\n+        Ge (_) fcmp(GreaterThanOrEqual);\n+        Gt (_) fcmp(GreaterThan);\n+\n+        Offset (_) bug;\n+    };\n+\n+    CValue::ByVal(res, fx.layout_of(ty))\n+}\n+\n+fn trans_char_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n     let res = binop_match! {\n         fx, bin_op, false, lhs, rhs, \"char\";\n         Add (_) bug;"}]}