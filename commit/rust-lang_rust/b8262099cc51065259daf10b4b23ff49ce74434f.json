{"sha": "b8262099cc51065259daf10b4b23ff49ce74434f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjYyMDk5Y2M1MTA2NTI1OWRhZjEwYjRiMjNmZjQ5Y2U3NDQzNGY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-23T21:54:35Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-23T21:54:35Z"}, "message": "Get rid of field_type again", "tree": {"sha": "b034786fe0a238914703191d5065a4c1ffc2d92c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b034786fe0a238914703191d5065a4c1ffc2d92c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8262099cc51065259daf10b4b23ff49ce74434f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8262099cc51065259daf10b4b23ff49ce74434f", "html_url": "https://github.com/rust-lang/rust/commit/b8262099cc51065259daf10b4b23ff49ce74434f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8262099cc51065259daf10b4b23ff49ce74434f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65803748d3a4c940b54071caa85b2b71e9d8697", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65803748d3a4c940b54071caa85b2b71e9d8697", "html_url": "https://github.com/rust-lang/rust/commit/e65803748d3a4c940b54071caa85b2b71e9d8697"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "ca9a7f7fa0adb9daeeca25d6679ef48573689c36", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b8262099cc51065259daf10b4b23ff49ce74434f", "patch": "@@ -514,8 +514,7 @@ impl Field {\n \n     /// Returns the type as in the signature of the struct (i.e., with\n     /// placeholder types for type parameters). Only use this in the context of\n-    /// the field *definition*; if you've already got a variable of the struct\n-    /// type, use `Type::field_type` to get to the field type.\n+    /// the field definition.\n     pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n         let var_id = self.parent.into();\n         let generic_def_id: GenericDefId = match self.parent {\n@@ -1944,18 +1943,6 @@ impl Type {\n         }\n     }\n \n-    pub fn field_type(&self, db: &dyn HirDatabase, field: Field) -> Option<Type> {\n-        let (adt_id, substs) = self.ty.as_adt()?;\n-        let variant_id: hir_def::VariantId = field.parent.into();\n-        if variant_id.adt_id() != adt_id {\n-            return None;\n-        }\n-\n-        let ty = db.field_types(variant_id).get(field.id)?.clone();\n-        let ty = ty.substitute(&Interner, substs);\n-        Some(self.derived(ty))\n-    }\n-\n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n         let (variant_id, substs) = match self.ty.kind(&Interner) {\n             &TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),"}, {"sha": "3aa467e3ca304a5e5216f1125bc0d67f4978b5d3", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=b8262099cc51065259daf10b4b23ff49ce74434f", "patch": "@@ -227,7 +227,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     pub fn resolve_record_field(\n         &self,\n         field: &ast::RecordExprField,\n-    ) -> Option<(Field, Option<Local>)> {\n+    ) -> Option<(Field, Option<Local>, Type)> {\n         self.imp.resolve_record_field(field)\n     }\n \n@@ -518,7 +518,10 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax()).resolve_field(self.db, field)\n     }\n \n-    fn resolve_record_field(&self, field: &ast::RecordExprField) -> Option<(Field, Option<Local>)> {\n+    fn resolve_record_field(\n+        &self,\n+        field: &ast::RecordExprField,\n+    ) -> Option<(Field, Option<Local>, Type)> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n "}, {"sha": "5a3d80e8e3fbd691f15553cd680a0ff42ca4a1c1", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=b8262099cc51065259daf10b4b23ff49ce74434f", "patch": "@@ -161,7 +161,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::RecordExprField,\n-    ) -> Option<(Field, Option<Local>)> {\n+    ) -> Option<(Field, Option<Local>, Type)> {\n         let record_expr = ast::RecordExpr::cast(field.syntax().parent().and_then(|p| p.parent())?)?;\n         let expr = ast::Expr::from(record_expr);\n         let expr_id = self.body_source_map.as_ref()?.node_expr(InFile::new(self.file_id, &expr))?;\n@@ -178,10 +178,13 @@ impl SourceAnalyzer {\n                 _ => None,\n             }\n         };\n+        let (_, subst) = self.infer.as_ref()?.type_of_expr.get(expr_id)?.as_adt()?;\n         let variant = self.infer.as_ref()?.variant_resolution_for_expr(expr_id)?;\n         let variant_data = variant.variant_data(db.upcast());\n         let field = FieldId { parent: variant, local_id: variant_data.field(&local_name)? };\n-        Some((field.into(), local))\n+        let field_ty =\n+            db.field_types(variant).get(field.local_id)?.clone().substitute(&Interner, subst);\n+        Some((field.into(), local, Type::new_with_resolver(db, &self.resolver, field_ty)?))\n     }\n \n     pub(crate) fn resolve_record_pat_field("}, {"sha": "89f7b2c2c37975d063d550f7cf677a0f63972c7f", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=b8262099cc51065259daf10b4b23ff49ce74434f", "patch": "@@ -85,7 +85,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n \n fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let record_field: ast::RecordExprField = ctx.find_node_at_offset()?;\n-    let (record_field_def, _) = ctx.sema.resolve_record_field(&record_field)?;\n+    let (record_field_def, _, _) = ctx.sema.resolve_record_field(&record_field)?;\n \n     let current_module = ctx.sema.scope(record_field.syntax()).module()?;\n     let visibility = record_field_def.visibility(ctx.db());"}, {"sha": "1ec59ff804d602f2f17e7f275e3bc87ed118e723", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=b8262099cc51065259daf10b4b23ff49ce74434f", "patch": "@@ -339,13 +339,12 @@ impl<'a> CompletionContext<'a> {\n                         cov_mark::hit!(expected_type_struct_field_without_leading_char);\n                         // wouldn't try {} be nice...\n                         (|| {\n-                            let record_ty = self.sema.type_of_expr(&ast::Expr::cast(node.parent()?)?)?;\n                             let expr_field = self.token.prev_sibling_or_token()?\n-                            .into_node()\n+                                      .into_node()\n                                       .and_then(|node| ast::RecordExprField::cast(node))?;\n-                            let field = self.sema.resolve_record_field(&expr_field)?.0;\n+                            let (_, _, ty) = self.sema.resolve_record_field(&expr_field)?;\n                             Some((\n-                                record_ty.field_type(self.db, field),\n+                                Some(ty),\n                                 expr_field.field_name().map(NameOrNameRef::NameRef),\n                             ))\n                         })().unwrap_or((None, None))"}, {"sha": "1dcccbb8be7cb436e06fe5e6fa2fb3c79159ec30", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8262099cc51065259daf10b4b23ff49ce74434f/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=b8262099cc51065259daf10b4b23ff49ce74434f", "patch": "@@ -311,7 +311,7 @@ impl NameRefClass {\n         }\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(name_ref) {\n-            if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n+            if let Some((field, local, _)) = sema.resolve_record_field(&record_field) {\n                 let field = Definition::Field(field);\n                 let res = match local {\n                     None => NameRefClass::Definition(field),"}]}