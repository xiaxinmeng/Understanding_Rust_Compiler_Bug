{"sha": "5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "node_id": "C_kwDOAAsO6NoAKDViOWNjMjA2OGYzYjQwNjJkNmNkMmZmNTNjMTY2MTdhMWE0YzBiMGU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-09-16T15:53:50Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-09-21T06:24:23Z"}, "message": "use indexmap instead of hashmap", "tree": {"sha": "5533f62c837e56eee8eb73b3431cf0c0bc074fd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5533f62c837e56eee8eb73b3431cf0c0bc074fd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "html_url": "https://github.com/rust-lang/rust/commit/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "html_url": "https://github.com/rust-lang/rust/commit/ca2c55d264183cb61b9499fd9acbfb9997b9b85f"}], "stats": {"total": 81, "additions": 10, "deletions": 71}, "files": [{"sha": "4b4f65a062f6329d1a23b0b565062cec88382ef9", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "patch": "@@ -1,9 +1,9 @@\n use crate::ich;\n use crate::middle::cstore::CrateStore;\n-use crate::ty::{fast_reject, TyCtxt};\n+use crate::ty::TyCtxt;\n \n use rustc_ast as ast;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n@@ -14,9 +14,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData};\n \n-use smallvec::SmallVec;\n-use std::cmp::Ord;\n-\n fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n     debug_assert!(!ich::IGNORED_ATTRIBUTES.is_empty());\n     ich::IGNORED_ATTRIBUTES.iter().copied().collect()\n@@ -241,39 +238,3 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n }\n \n impl rustc_session::HashStableContext for StableHashingContext<'a> {}\n-\n-pub fn hash_stable_trait_impls<'a>(\n-    hcx: &mut StableHashingContext<'a>,\n-    hasher: &mut StableHasher,\n-    blanket_impls: &[DefId],\n-    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n-) {\n-    {\n-        let mut blanket_impls: SmallVec<[_; 8]> =\n-            blanket_impls.iter().map(|&def_id| hcx.def_path_hash(def_id)).collect();\n-\n-        if blanket_impls.len() > 1 {\n-            blanket_impls.sort_unstable();\n-        }\n-\n-        blanket_impls.hash_stable(hcx, hasher);\n-    }\n-\n-    {\n-        let mut keys: SmallVec<[_; 8]> =\n-            non_blanket_impls.keys().map(|k| (k, k.map_def(|d| hcx.def_path_hash(d)))).collect();\n-        keys.sort_unstable_by(|&(_, ref k1), &(_, ref k2)| k1.cmp(k2));\n-        keys.len().hash_stable(hcx, hasher);\n-        for (key, ref stable_key) in keys {\n-            stable_key.hash_stable(hcx, hasher);\n-            let mut impls: SmallVec<[_; 8]> =\n-                non_blanket_impls[key].iter().map(|&impl_id| hcx.def_path_hash(impl_id)).collect();\n-\n-            if impls.len() > 1 {\n-                impls.sort_unstable();\n-            }\n-\n-            impls.hash_stable(hcx, hasher);\n-        }\n-    }\n-}"}, {"sha": "e8e5c4a2669906d31805c081b0d543616505f050", "filename": "compiler/rustc_middle/src/ich/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fmod.rs?ref=5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "patch": "@@ -1,8 +1,6 @@\n //! ICH - Incremental Compilation Hash\n \n-pub use self::hcx::{\n-    hash_stable_trait_impls, NodeIdHashingMode, StableHashingContext, StableHashingContextProvider,\n-};\n+pub use self::hcx::{NodeIdHashingMode, StableHashingContext, StableHashingContextProvider};\n use rustc_span::symbol::{sym, Symbol};\n \n mod hcx;"}, {"sha": "ab47c2a7636f95224adc7270b3588f928b3c5ee9", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "patch": "@@ -1,9 +1,7 @@\n-use crate::ich::{self, StableHashingContext};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, TyCtxt};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_span::symbol::Ident;\n@@ -50,7 +48,7 @@ impl Graph {\n \n /// Children of a given impl, grouped into blanket/non-blanket varieties as is\n /// done in `TraitDef`.\n-#[derive(Default, TyEncodable, TyDecodable, Debug)]\n+#[derive(Default, TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct Children {\n     // Impls of a trait (or specializations of a given impl). To allow for\n     // quicker lookup, the impls are indexed by a simplified version of their\n@@ -62,7 +60,7 @@ pub struct Children {\n     // together *all* the impls for a trait, and are populated prior to building\n     // the specialization graph.\n     /// Impls of the trait.\n-    pub non_blanket_impls: FxHashMap<SimplifiedType, Vec<DefId>>,\n+    pub non_blanket_impls: FxIndexMap<SimplifiedType, Vec<DefId>>,\n \n     /// Blanket impls associated with the trait.\n     pub blanket_impls: Vec<DefId>,\n@@ -235,11 +233,3 @@ pub fn ancestors(\n         })\n     }\n }\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for Children {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Children { ref non_blanket_impls, ref blanket_impls } = *self;\n-\n-        ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, non_blanket_impls);\n-    }\n-}"}, {"sha": "25a310b12db58ea34d512e12d7037544272f6f33", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "patch": "@@ -1,4 +1,3 @@\n-use crate::ich::{self, StableHashingContext};\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n@@ -7,8 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n \n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorReported;\n use rustc_macros::HashStable;\n \n@@ -66,11 +64,11 @@ pub enum TraitSpecializationKind {\n     AlwaysApplicable,\n }\n \n-#[derive(Default, Debug)]\n+#[derive(Default, Debug, HashStable)]\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n     /// Impls indexed by their simplified self type, for fast lookup.\n-    non_blanket_impls: FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n+    non_blanket_impls: FxIndexMap<fast_reject::SimplifiedType, Vec<DefId>>,\n }\n \n impl TraitImpls {\n@@ -249,11 +247,3 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n \n     impls\n }\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for TraitImpls {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let TraitImpls { ref blanket_impls, ref non_blanket_impls } = *self;\n-\n-        ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, non_blanket_impls);\n-    }\n-}"}, {"sha": "0efc46edb063da8728b58b3447f03057f01f7bd5", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=5b9cc2068f3b4062d6cd2ff53c16617a1a4c0b0e", "patch": "@@ -216,7 +216,7 @@ impl ChildrenExt for Children {\n }\n \n fn iter_children(children: &mut Children) -> impl Iterator<Item = DefId> + '_ {\n-    let nonblanket = children.non_blanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n+    let nonblanket = children.non_blanket_impls.iter().flat_map(|(_, v)| v.iter());\n     children.blanket_impls.iter().chain(nonblanket).cloned()\n }\n "}]}