{"sha": "ceac155211e8330782024f1c6e8e10cf03245a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYWMxNTUyMTFlODMzMDc4MjAyNGYxYzZlOGUxMGNmMDMyNDVhOGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-06T22:46:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-06T22:46:39Z"}, "message": "For #2229, recognize 'again' in place of 'cont', final change pending snapshot.", "tree": {"sha": "b2485d7933e4b097455b6d9b600867c03261cde4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2485d7933e4b097455b6d9b600867c03261cde4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceac155211e8330782024f1c6e8e10cf03245a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceac155211e8330782024f1c6e8e10cf03245a8d", "html_url": "https://github.com/rust-lang/rust/commit/ceac155211e8330782024f1c6e8e10cf03245a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceac155211e8330782024f1c6e8e10cf03245a8d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20f63d095cdafe378821779fcf9f11bc3cfce78", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20f63d095cdafe378821779fcf9f11bc3cfce78", "html_url": "https://github.com/rust-lang/rust/commit/e20f63d095cdafe378821779fcf9f11bc3cfce78"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "f002393b71aced2ac46ef27fb2344fe2ed40d36d", "filename": "doc/rust.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -209,9 +209,9 @@ import export use mod\n The keywords in [source files](#source-files) are the following strings:\n \n ~~~~~~~~ {.keyword}\n-alt assert\n+alt again assert\n break\n-check claim class const cont copy\n+check claim class const copy\n drop\n else enum export extern\n fail false fn for\n@@ -2034,19 +2034,19 @@ break_expr : \"break\" ;\n Executing a `break` expression immediately terminates the innermost loop\n enclosing it. It is only permitted in the body of a loop.\n \n-### Continue expressions\n+### Again expressions\n \n ~~~~~~~~{.ebnf .gram}\n-break_expr : \"cont\" ;\n+again_expr : \"again\" ;\n ~~~~~~~~\n \n-Evaluating a `cont` expression immediately terminates the current iteration of\n+Evaluating an `again` expression immediately terminates the current iteration of\n the innermost loop enclosing it, returning control to the loop *head*. In the\n case of a `while` loop, the head is the conditional expression controlling the\n-loop. In the case of a `for` loop, the head is the vector-element increment\n-controlling the loop.\n+loop. In the case of a `for` loop, the head is the call-expression controlling\n+the loop.\n \n-A `cont` expression is only permitted in the body of a loop.\n+An `again` expression is only permitted in the body of a loop.\n \n \n ### For expressions"}, {"sha": "149afee960f0554852ae0e0ee5b66eabac120950", "filename": "doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -783,7 +783,7 @@ a specific value, are not allowed.\n \n `while` produces a loop that runs as long as its given condition\n (which must have type `bool`) evaluates to true. Inside a loop, the\n-keyword `break` can be used to abort the loop, and `cont` can be used\n+keyword `break` can be used to abort the loop, and `again` can be used\n to abort the current iteration and continue with the next.\n \n ~~~~\n@@ -1187,7 +1187,7 @@ Empty argument lists can be omitted from `do` expressions.\n \n Most iteration in Rust is done with `for` loops. Like `do`,\n `for` is a nice syntax for doing control flow with closures.\n-Additionally, within a `for` loop, `break, `cont`, and `ret`\n+Additionally, within a `for` loop, `break, `again`, and `ret`\n work just as they do with `while` and `loop`.\n \n Consider again our `each` function, this time improved to\n@@ -1221,8 +1221,8 @@ each(~[2, 4, 8, 5, 16], |n| {\n With `for`, functions like `each` can be treated more\n like builtin looping structures. When calling `each`\n in a `for` loop, instead of returning `false` to break\n-out of the loop, you just write `break`. To continue\n-to the next iteration, write `cont`.\n+out of the loop, you just write `break`. To skip ahead\n+to the next iteration, write `again`.\n \n ~~~~\n # import each = vec::each;"}, {"sha": "a9691a836cb678f1be568c3f022870d80c72fcfd", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -56,9 +56,9 @@\n \t\t\t\t\t\"trait\" \"fn\" \"enum\" \"iface\"\n \t\t\t\t\t\"impl\"))\n       (puthash word 'def table))\n-    (dolist (word '(\"assert\"\n+    (dolist (word '(\"again\" \"assert\"\n                     \"break\"\n-                    \"check\" \"claim\" \"cont\" \"copy\"\n+                    \"check\" \"claim\" \"copy\"\n                     \"do\" \"drop\"\n                     \"else\" \"export\" \"extern\"\n                     \"fail\" \"for\""}, {"sha": "4faf7a2f48d0c913f49c66b402b7c20d668f21e6", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -42,7 +42,7 @@ fn common_exprs() -> ~[ast::expr] {\n     }\n \n     ~[dse(ast::expr_break),\n-     dse(ast::expr_cont),\n+     dse(ast::expr_again),\n      dse(ast::expr_fail(option::none)),\n      dse(ast::expr_fail(option::some(\n          @dse(ast::expr_lit(@dsl(ast::lit_str(@\"boo\"))))))),"}, {"sha": "1941d809d7b8740a89c5f9bbcc384fb0aa5ef272", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -336,7 +336,7 @@ enum expr_ {\n     expr_addr_of(mutability, @expr),\n     expr_fail(option<@expr>),\n     expr_break,\n-    expr_cont,\n+    expr_again,\n     expr_ret(option<@expr>),\n     expr_log(int, @expr, @expr),\n "}, {"sha": "7f83b16b8ab71600d5f07f978559c06a50cfbe95", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -464,7 +464,7 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           }\n           expr_path(pth) { expr_path(fld.fold_path(pth)) }\n           expr_fail(e) { expr_fail(option::map(e, fld.fold_expr)) }\n-          expr_break | expr_cont { copy e }\n+          expr_break | expr_again { copy e }\n           expr_ret(e) { expr_ret(option::map(e, fld.fold_expr)) }\n           expr_log(i, lv, e) { expr_log(i, fld.fold_expr(lv),\n                                         fld.fold_expr(e)) }"}, {"sha": "3f430f8a98896a176ab337d73a5b1ad811d68a30", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -966,8 +966,9 @@ class parser {\n         } else if self.eat_keyword(\"break\") {\n             ex = expr_break;\n             hi = self.span.hi;\n-        } else if self.eat_keyword(\"cont\") {\n-            ex = expr_cont;\n+        } else if self.eat_keyword(\"cont\") ||\n+            self.eat_keyword(\"again\") {\n+            ex = expr_again;\n             hi = self.span.hi;\n         } else if self.eat_keyword(\"copy\") {\n             let e = self.parse_expr();"}, {"sha": "b3fad7e9ffd940e00cabe94c66b685b65188d2ba", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -304,8 +304,7 @@ fn contextual_keyword_table() -> hashmap<str, ()> {\n fn restricted_keyword_table() -> hashmap<str, ()> {\n     let words = str_hash();\n     let keys = ~[\n-        \"alt\",\n-        \"assert\",\n+        \"alt\", \"again\", \"assert\",\n         \"break\",\n         \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\",\n         \"do\", \"drop\","}, {"sha": "f7acf9ea688039c267331823bf2c38a15ecf45c8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -1063,7 +1063,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         }\n       }\n       ast::expr_break { word(s.s, \"break\"); }\n-      ast::expr_cont { word(s.s, \"cont\"); }\n+      ast::expr_again { word(s.s, \"again\"); }\n       ast::expr_ret(result) {\n         word(s.s, \"ret\");\n         alt result {"}, {"sha": "0a7e757bbba8989a1eb215ec1bbc0f89bbc17e8c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -421,7 +421,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_path(p) { visit_path(p, e, v); }\n       expr_fail(eo) { visit_expr_opt(eo, e, v); }\n       expr_break { }\n-      expr_cont { }\n+      expr_again { }\n       expr_ret(eo) { visit_expr_opt(eo, e, v); }\n       expr_log(_, lv, x) {\n         v.visit_expr(lv, e, v);"}, {"sha": "1a2b4d7834eca382fdbd19a786354cdb89aaf11d", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -176,7 +176,7 @@ impl public_methods for borrowck_ctxt {\n           ast::expr_new(*) | ast::expr_binary(*) | ast::expr_while(*) |\n           ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n           ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n-          ast::expr_cont | ast::expr_rec(*) {\n+          ast::expr_again | ast::expr_rec(*) {\n             ret self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "e8e2c57a8b227bae4f85b0f19adfd1e04ba1a19f", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -33,7 +33,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n                     tcx.sess.span_err(e.span, \"`break` outside of loop\");\n                 }\n               }\n-              expr_cont {\n+              expr_again {\n                 if !cx.in_loop {\n                     tcx.sess.span_err(e.span, \"`cont` outside of loop\");\n                 }"}, {"sha": "50ab6b4b627bf80f288e6ef2c7bc5038e0757362", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -470,7 +470,7 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       expr_assert(*) | expr_check(*) | expr_addr_of(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n       expr_unary(*) | expr_fail(*) |\n-      expr_break | expr_cont | expr_lit(_) | expr_ret(*) |\n+      expr_break | expr_again | expr_lit(_) | expr_ret(*) |\n       expr_block(*) | expr_move(*) | expr_assign(*) | expr_swap(*) |\n       expr_assign_op(*) | expr_mac(*) {\n           visit::visit_expr(expr, self, vt);\n@@ -1009,7 +1009,7 @@ class liveness {\n             self.break_ln\n           }\n \n-          expr_cont {\n+          expr_again {\n             if !self.cont_ln.is_valid() {\n                 self.tcx.sess.span_bug(\n                     expr.span, \"cont with invalid cont_ln\");\n@@ -1457,7 +1457,7 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       expr_assert(*) | expr_check(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) |\n       expr_cast(*) | expr_unary(*) | expr_fail(*) |\n-      expr_ret(*) | expr_break | expr_cont | expr_lit(_) |\n+      expr_ret(*) | expr_break | expr_again | expr_lit(_) |\n       expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) {\n         visit::visit_expr(expr, self, vt);\n       }"}, {"sha": "459b14038450e2d6417f812e3bef48852e7ec3a8", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -3644,7 +3644,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             assert dest == ignore;\n             ret trans_break(bcx);\n           }\n-          ast::expr_cont {\n+          ast::expr_again {\n             assert dest == ignore;\n             ret trans_cont(bcx);\n           }"}, {"sha": "386bf06ef1434a441789636b6e1e32bdb7742596", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -242,7 +242,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n         })\n       }\n       expr_alt(_, _, _) | expr_block(_) | expr_if(_, _, _) |\n-      expr_while(_, _) | expr_fail(_) | expr_break | expr_cont |\n+      expr_while(_, _) | expr_fail(_) | expr_break | expr_again |\n       expr_unary(_, _) | expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n       expr_if_check(_, _, _) | expr_mac(_) | expr_addr_of(_, _) |\n       expr_ret(_) | expr_loop(_) |"}, {"sha": "c2c8810ec1bb19934233094e56d35b1998d041c8", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -446,7 +446,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         join_then_else(fcx, p, conseq, maybe_alt, e.id, if_check);\n       }\n       expr_break { clear_pp(expr_pp(fcx.ccx, e)); }\n-      expr_cont { clear_pp(expr_pp(fcx.ccx, e)); }\n+      expr_again { clear_pp(expr_pp(fcx.ccx, e)); }\n       expr_mac(_) { fcx.ccx.tcx.sess.bug(\"unexpanded macro\"); }\n     }\n }"}, {"sha": "f6cf240eeca3469b3c41a648d3223374ce402d71", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -498,7 +498,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         ret join_then_else(fcx, p, conseq, maybe_alt, e.id, if_check, pres);\n       }\n       expr_break { ret pure_exp(fcx.ccx, e.id, pres); }\n-      expr_cont { ret pure_exp(fcx.ccx, e.id, pres); }\n+      expr_again { ret pure_exp(fcx.ccx, e.id, pres); }\n     }\n }\n "}, {"sha": "a983240489ac87384e6ce4a451acc19ee198a456", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -1220,7 +1220,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         fcx.write_bot(id);\n       }\n       ast::expr_break { fcx.write_bot(id); bot = true; }\n-      ast::expr_cont { fcx.write_bot(id); bot = true; }\n+      ast::expr_again { fcx.write_bot(id); bot = true; }\n       ast::expr_ret(expr_opt) {\n         bot = true;\n         let ret_ty = alt fcx.indirect_ret_ty {"}, {"sha": "26b3077210511129cf21bb204ff6d02f19bf7d92", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac155211e8330782024f1c6e8e10cf03245a8d/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=ceac155211e8330782024f1c6e8e10cf03245a8d", "patch": "@@ -57,7 +57,7 @@ fn loop_query(b: ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n \n fn has_nonlocal_exits(b: ast::blk) -> bool {\n     do loop_query(b) |e| { alt e {\n-      ast::expr_break | ast::expr_cont { true }\n+      ast::expr_break | ast::expr_again { true }\n       _ { false }}}\n }\n "}]}