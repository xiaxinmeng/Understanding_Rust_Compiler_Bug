{"sha": "1f923c2a415288c4122800e0862e2c478a2ad9c9", "node_id": "C_kwDOAAsO6NoAKDFmOTIzYzJhNDE1Mjg4YzQxMjI4MDBlMDg2MmUyYzQ3OGEyYWQ5Yzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-25T13:14:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-25T13:14:14Z"}, "message": "Rollup merge of #98431 - WaffleLapkin:mut_pat_suggestions, r=compiler-errors\n\nSuggest defining variable as mutable on `&mut _` type mismatch in pats\n\nSuggest writing `mut a` where `&mut a` was written but a non-ref type provided.\n\nSince we still don't have \"apply either one of the suggestions but not both\" kind of thing, the interaction with the suggestion of removing `&[mut]` or moving it to the type is weird, and idk how to make it better..\n\nr? ``@compiler-errors``", "tree": {"sha": "3915fc63ef97a2b39de400aeca5e6f7a4e6ac442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3915fc63ef97a2b39de400aeca5e6f7a4e6ac442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f923c2a415288c4122800e0862e2c478a2ad9c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitwomCRBK7hj4Ov3rIwAAgvQIAGdz9guExQ61QfmqgAnsnHtB\nMEAlXfGhn8Sbi1xXHJ3sREgVyRtUw0gbaPEihLoWG3CeFTwig6KCZY06qhc20MHR\neQPcLGK5GnTrkruHXlEodQFoBmBlpGy+tEKfk34clQir6WiIMJjDBm/iSeNnz/z3\nZ7liAqxeI/jilHhP95FRqfz0xv4ZADcVjsqP3YYVQQuUBNnViyU4PW6N7JUwNm+p\nT2OdSmFLrFKeVrXIm2mSCMOAisUF6cK3qc0KAM1zD0MbOlpX2OfeNKo1d67AaEE+\nQjMToZanKYysXYMGDNqkYq2tvpkhOJlbdLUngTaVGHoKqD3JnkjQAjkJZ7xYDv4=\n=cCbV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3915fc63ef97a2b39de400aeca5e6f7a4e6ac442\nparent ea07b969eacb4d932afba25ad64050719c7fe73a\nparent 1dfb53b7dad1d5f68466a68b068b8030d216ce3f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656162854 +0200\ncommitter GitHub <noreply@github.com> 1656162854 +0200\n\nRollup merge of #98431 - WaffleLapkin:mut_pat_suggestions, r=compiler-errors\n\nSuggest defining variable as mutable on `&mut _` type mismatch in pats\n\nSuggest writing `mut a` where `&mut a` was written but a non-ref type provided.\n\nSince we still don't have \"apply either one of the suggestions but not both\" kind of thing, the interaction with the suggestion of removing `&[mut]` or moving it to the type is weird, and idk how to make it better..\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f923c2a415288c4122800e0862e2c478a2ad9c9", "html_url": "https://github.com/rust-lang/rust/commit/1f923c2a415288c4122800e0862e2c478a2ad9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f923c2a415288c4122800e0862e2c478a2ad9c9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea07b969eacb4d932afba25ad64050719c7fe73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea07b969eacb4d932afba25ad64050719c7fe73a", "html_url": "https://github.com/rust-lang/rust/commit/ea07b969eacb4d932afba25ad64050719c7fe73a"}, {"sha": "1dfb53b7dad1d5f68466a68b068b8030d216ce3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dfb53b7dad1d5f68466a68b068b8030d216ce3f", "html_url": "https://github.com/rust-lang/rust/commit/1dfb53b7dad1d5f68466a68b068b8030d216ce3f"}], "stats": {"total": 174, "additions": 173, "deletions": 1}, "files": [{"sha": "e1ec9f13cd16605b666316116cfd8769e0e2ad97", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1f923c2a415288c4122800e0862e2c478a2ad9c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f923c2a415288c4122800e0862e2c478a2ad9c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=1f923c2a415288c4122800e0862e2c478a2ad9c9", "patch": "@@ -663,6 +663,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ast::Mutability::Not => \"\",\n             };\n \n+            let mut_var_suggestion = 'block: {\n+                if !matches!(mutbl, ast::Mutability::Mut) {\n+                    break 'block None;\n+                }\n+\n+                let ident_kind = match binding_parent {\n+                    hir::Node::Param(_) => \"parameter\",\n+                    hir::Node::Local(_) => \"variable\",\n+                    hir::Node::Arm(_) => \"binding\",\n+\n+                    // Provide diagnostics only if the parent pattern is struct-like,\n+                    // i.e. where `mut binding` makes sense\n+                    hir::Node::Pat(Pat { kind, .. }) => match kind {\n+                        PatKind::Struct(..)\n+                        | PatKind::TupleStruct(..)\n+                        | PatKind::Or(..)\n+                        | PatKind::Tuple(..)\n+                        | PatKind::Slice(..) => \"binding\",\n+\n+                        PatKind::Wild\n+                        | PatKind::Binding(..)\n+                        | PatKind::Path(..)\n+                        | PatKind::Box(..)\n+                        | PatKind::Ref(..)\n+                        | PatKind::Lit(..)\n+                        | PatKind::Range(..) => break 'block None,\n+                    },\n+\n+                    // Don't provide suggestions in other cases\n+                    _ => break 'block None,\n+                };\n+\n+                Some((\n+                    pat.span,\n+                    format!(\"to declare a mutable {ident_kind} use\"),\n+                    format!(\"mut {binding}\"),\n+                ))\n+\n+            };\n+\n             match binding_parent {\n                 // Check that there is explicit type (ie this is not a closure param with inferred type)\n                 // so we don't suggest moving something to the type that does not exist\n@@ -675,6 +715,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ],\n                         Applicability::MachineApplicable\n                     );\n+\n+                    if let Some((sp, msg, sugg)) = mut_var_suggestion {\n+                        err.span_note(sp, format!(\"{msg}: `{sugg}`\"));\n+                    }\n                 }\n                 hir::Node::Param(_) | hir::Node::Arm(_) | hir::Node::Pat(_) => {\n                     // rely on match ergonomics or it might be nested `&&pat`\n@@ -684,6 +728,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"\",\n                         Applicability::MaybeIncorrect,\n                     );\n+\n+                    if let Some((sp, msg, sugg)) = mut_var_suggestion {\n+                        err.span_note(sp, format!(\"{msg}: `{sugg}`\"));\n+                    }\n+                }\n+                _ if let Some((sp, msg, sugg)) = mut_var_suggestion => {\n+                    err.span_suggestion(sp, msg, sugg, Applicability::MachineApplicable);\n                 }\n                 _ => {} // don't provide suggestions in other cases #55175\n             }"}, {"sha": "d50acd1ac62d2d523e0ca991d0b018a43df4ef42", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed?ref=1f923c2a415288c4122800e0862e2c478a2ad9c9", "patch": "@@ -21,4 +21,17 @@ fn main() {\n     let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n     let _ = |&_a: &u32| (); //~ ERROR mismatched types\n     let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+\n+    #[allow(unused_mut)]\n+    {\n+        struct S(u8);\n+\n+        let mut _a = 0; //~ ERROR mismatched types\n+        let S(_b) = S(0); //~ ERROR mismatched types\n+        let (_c,) = (0,); //~ ERROR mismatched types\n+\n+        match 0 {\n+            _d => {} //~ ERROR mismatched types\n+        }\n+    }\n }"}, {"sha": "1a77f687692242c03684531315b8a8184916dde3", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs?ref=1f923c2a415288c4122800e0862e2c478a2ad9c9", "patch": "@@ -21,4 +21,17 @@ fn main() {\n     let _ = |&mut &_a: &mut u32| (); //~ ERROR mismatched types\n     let _ = |&&mut _a: &u32| (); //~ ERROR mismatched types\n     let _ = |&mut &mut _a: &mut u32| (); //~ ERROR mismatched types\n+\n+    #[allow(unused_mut)]\n+    {\n+        struct S(u8);\n+\n+        let &mut _a = 0; //~ ERROR mismatched types\n+        let S(&mut _b) = S(0); //~ ERROR mismatched types\n+        let (&mut _c,) = (0,); //~ ERROR mismatched types\n+\n+        match 0 {\n+            &mut _d => {} //~ ERROR mismatched types\n+        }\n+    }\n }"}, {"sha": "d9501a9bbc61e3fa75640a7a0e2b7913c2d63e13", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=1f923c2a415288c4122800e0862e2c478a2ad9c9", "patch": "@@ -24,6 +24,11 @@ LL | fn _f1(&mut _a: u32) {}\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:4:8\n+   |\n+LL | fn _f1(&mut _a: u32) {}\n+   |        ^^^^^^^\n help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL - fn _f1(&mut _a: u32) {}\n@@ -122,6 +127,11 @@ LL |     let _: fn(u32) = |&mut _a| ();\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:12:23\n+   |\n+LL |     let _: fn(u32) = |&mut _a| ();\n+   |                       ^^^^^^^\n help: consider removing `&mut` from the pattern\n    |\n LL -     let _: fn(u32) = |&mut _a| ();\n@@ -222,6 +232,11 @@ LL |     let _ = |&mut _a: u32| ();\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:19:14\n+   |\n+LL |     let _ = |&mut _a: u32| ();\n+   |              ^^^^^^^\n help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL -     let _ = |&mut _a: u32| ();\n@@ -292,6 +307,81 @@ LL -     let _ = |&mut &mut _a: &mut u32| ();\n LL +     let _ = |&mut _a: &mut u32| ();\n    |\n \n-error: aborting due to 18 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:29:13\n+   |\n+LL |         let &mut _a = 0;\n+   |             ^^^^^^^   - this expression has type `{integer}`\n+   |             |\n+   |             expected integer, found `&mut _`\n+   |             help: to declare a mutable variable use: `mut _a`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:30:15\n+   |\n+LL |         let S(&mut _b) = S(0);\n+   |               ^^^^^^^    ---- this expression has type `S`\n+   |               |\n+   |               expected `u8`, found `&mut _`\n+   |\n+   = note:           expected type `u8`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut _b`\n+  --> $DIR/ref-pat-suggestions.rs:30:15\n+   |\n+LL |         let S(&mut _b) = S(0);\n+   |               ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -         let S(&mut _b) = S(0);\n+LL +         let S(_b) = S(0);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:31:14\n+   |\n+LL |         let (&mut _c,) = (0,);\n+   |              ^^^^^^^     ---- this expression has type `({integer},)`\n+   |              |\n+   |              expected integer, found `&mut _`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut _c`\n+  --> $DIR/ref-pat-suggestions.rs:31:14\n+   |\n+LL |         let (&mut _c,) = (0,);\n+   |              ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -         let (&mut _c,) = (0,);\n+LL +         let (_c,) = (0,);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:34:13\n+   |\n+LL |         match 0 {\n+   |               - this expression has type `{integer}`\n+LL |             &mut _d => {}\n+   |             ^^^^^^^ expected integer, found `&mut _`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut _d`\n+  --> $DIR/ref-pat-suggestions.rs:34:13\n+   |\n+LL |             &mut _d => {}\n+   |             ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -             &mut _d => {}\n+LL +             _d => {}\n+   |\n+\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "f064a25a9c9a45b0311276572691609b932fdf8e", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f923c2a415288c4122800e0862e2c478a2ad9c9/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=1f923c2a415288c4122800e0862e2c478a2ad9c9", "patch": "@@ -8,6 +8,11 @@ LL |     for ((_, _), (&mut c, _)) in &mut map {\n    |\n    = note:           expected type `char`\n            found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut c`\n+  --> $DIR/for-loop-bad-item.rs:7:19\n+   |\n+LL |     for ((_, _), (&mut c, _)) in &mut map {\n+   |                   ^^^^^^\n help: consider removing `&mut` from the pattern\n    |\n LL -     for ((_, _), (&mut c, _)) in &mut map {"}]}