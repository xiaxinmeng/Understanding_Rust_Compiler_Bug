{"sha": "e2f90091cf652218fe456ec1a54892fe1ceabb36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjkwMDkxY2Y2NTIyMThmZTQ1NmVjMWE1NDg5MmZlMWNlYWJiMzY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T21:23:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T12:18:12Z"}, "message": "libcore: Move Cell to core and de-~mut core and std", "tree": {"sha": "05fa716cc71d35bb3e288b36fa458a16785a2e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fa716cc71d35bb3e288b36fa458a16785a2e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f90091cf652218fe456ec1a54892fe1ceabb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f90091cf652218fe456ec1a54892fe1ceabb36", "html_url": "https://github.com/rust-lang/rust/commit/e2f90091cf652218fe456ec1a54892fe1ceabb36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f90091cf652218fe456ec1a54892fe1ceabb36/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c483aab4ae391eb26dae5a17d40c148551a6c674", "url": "https://api.github.com/repos/rust-lang/rust/commits/c483aab4ae391eb26dae5a17d40c148551a6c674", "html_url": "https://github.com/rust-lang/rust/commit/c483aab4ae391eb26dae5a17d40c148551a6c674"}], "stats": {"total": 117, "additions": 60, "deletions": 57}, "files": [{"sha": "5887df6802f57502ecb705fe08a2d9e64c7d498c", "filename": "src/libcore/cell.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::option;\n-use core::prelude::*;\n+use option;\n+use prelude::*;\n \n /// A dynamic, mutable location.\n ///", "previous_filename": "src/libstd/cell.rs"}, {"sha": "ed18388f5783b48633179280ff6da8721d21a5ff", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -143,6 +143,7 @@ pub mod dlist;\n #[path=\"iter-trait.rs\"] #[merge = \"iter-trait/dlist.rs\"]\n pub mod dlist_iter;\n pub mod hashmap;\n+pub mod cell;\n \n \n /* Tasks and communication */"}, {"sha": "15a6e700ffd841a2479c1d124cfb47e1496e01f8", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -86,6 +86,7 @@ bounded and unbounded protocols allows for less code duplication.\n \n use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};\n+use cell::Cell;\n use either::{Either, Left, Right};\n use kinds::Owned;\n use libc;\n@@ -917,11 +918,9 @@ pub fn spawn_service<T:Owned,Tb:Owned>(\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n-    let server = ~mut Some(server);\n-    do task::spawn || {\n-        let mut server_ = None;\n-        server_ <-> *server;\n-        service(option::unwrap(server_))\n+    let server = Cell(server);\n+    do task::spawn {\n+        service(server.take());\n     }\n \n     client\n@@ -941,11 +940,9 @@ pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n-    let server = ~mut Some(server);\n-    do task::spawn || {\n-        let mut server_ = None;\n-        server_ <-> *server;\n-        service(option::unwrap(server_))\n+    let server = Cell(server);\n+    do task::spawn {\n+        service(server.take())\n     }\n \n     client"}, {"sha": "2580efe6d09687dceff3e587cd4553b2dab2bc4e", "filename": "src/libcore/private.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -107,10 +107,14 @@ fn compare_and_swap(address: &mut int, oldval: int, newval: int) -> bool {\n  * Shared state & exclusive ARC\n  ****************************************************************************/\n \n+struct UnwrapProtoInner {\n+    contents: Option<(comm::ChanOne<()>,  comm::PortOne<bool>)>,\n+}\n+\n // An unwrapper uses this protocol to communicate with the \"other\" task that\n // drops the last refcount on an arc. Unfortunately this can't be a proper\n // pipe protocol because the unwrapper has to access both stages at once.\n-type UnwrapProto = ~mut Option<(comm::ChanOne<()>,  comm::PortOne<bool>)>;\n+type UnwrapProto = ~UnwrapProtoInner;\n \n struct ArcData<T> {\n     mut count:     libc::intptr_t,\n@@ -139,9 +143,10 @@ struct ArcDestruct<T> {\n                     // reference. In effect, being here means we're the only\n                     // *awake* task with the data.\n                     if data.unwrapper != 0 {\n-                        let p: UnwrapProto =\n+                        let mut p: UnwrapProto =\n                             cast::reinterpret_cast(&data.unwrapper);\n-                        let (message, response) = option::swap_unwrap(p);\n+                        let (message, response) =\n+                            option::swap_unwrap(&mut p.contents);\n                         // Send 'ready' and wait for a response.\n                         comm::send_one(message, ());\n                         // Unkillable wait. Message guaranteed to come.\n@@ -196,7 +201,9 @@ pub unsafe fn unwrap_shared_mutable_state<T:Owned>(rc: SharedMutableState<T>)\n         let ptr: ~ArcData<T> = cast::reinterpret_cast(&rc.data);\n         let (p1,c1) = comm::oneshot(); // ()\n         let (p2,c2) = comm::oneshot(); // bool\n-        let server: UnwrapProto = ~mut Some((c1,p2));\n+        let mut server: UnwrapProto = ~UnwrapProtoInner {\n+            contents: Some((c1,p2))\n+        };\n         let serverp: int = cast::transmute(server);\n         // Try to put our server end in the unwrapper slot.\n         if compare_and_swap(&mut ptr.unwrapper, 0, serverp) {\n@@ -409,8 +416,9 @@ pub fn unwrap_exclusive<T:Owned>(arc: Exclusive<T>) -> T {\n pub mod tests {\n     use core::option::{None, Some};\n \n-    use option;\n+    use cell::Cell;\n     use comm;\n+    use option;\n     use private::{exclusive, unwrap_exclusive};\n     use result;\n     use task;\n@@ -423,7 +431,7 @@ pub mod tests {\n         let num_tasks = 10;\n         let count = 10;\n \n-        let total = exclusive(~mut 0);\n+        let total = exclusive(~0);\n \n         for uint::range(0, num_tasks) |_i| {\n             let total = total.clone();\n@@ -472,21 +480,20 @@ pub mod tests {\n     #[test]\n     pub fn exclusive_unwrap_contended() {\n         let x = exclusive(~~\"hello\");\n-        let x2 = ~mut Some(x.clone());\n-        do task::spawn || {\n-            let x2 = option::swap_unwrap(x2);\n+        let x2 = Cell(x.clone());\n+        do task::spawn {\n+            let x2 = x2.take();\n             do x2.with |_hello| { }\n             task::yield();\n         }\n         assert unwrap_exclusive(x) == ~~\"hello\";\n \n         // Now try the same thing, but with the child task blocking.\n         let x = exclusive(~~\"hello\");\n-        let x2 = ~mut Some(x.clone());\n+        let x2 = Cell(x.clone());\n         let mut res = None;\n-        do task::task().future_result(|+r| res = Some(r)).spawn\n-              || {\n-            let x2 = option::swap_unwrap(x2);\n+        do task::task().future_result(|+r| res = Some(r)).spawn {\n+            let x2 = x2.take();\n             assert unwrap_exclusive(x2) == ~~\"hello\";\n         }\n         // Have to get rid of our reference before blocking.\n@@ -498,11 +505,10 @@ pub mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn exclusive_unwrap_conflict() {\n         let x = exclusive(~~\"hello\");\n-        let x2 = ~mut Some(x.clone());\n+        let x2 = Cell(x.clone());\n         let mut res = None;\n-        do task::task().future_result(|+r| res = Some(r)).spawn\n-           || {\n-            let x2 = option::swap_unwrap(x2);\n+        do task::task().future_result(|+r| res = Some(r)).spawn {\n+            let x2 = x2.take();\n             assert unwrap_exclusive(x2) == ~~\"hello\";\n         }\n         assert unwrap_exclusive(x) == ~~\"hello\";"}, {"sha": "8445638850cd06bdc64a45fed087798757837b5a", "filename": "src/libcore/private/weak_task.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fprivate%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Fprivate%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fweak_task.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -18,16 +18,17 @@ it is running, sending a notification to the task that the runtime\n is trying to shut down.\n */\n \n+use cell::Cell;\n+use comm::{GenericSmartChan, stream};\n+use comm::{Port, Chan, SharedChan, GenericChan, GenericPort};\n+use hashmap::linear::LinearMap;\n+use ops::Drop;\n use option::{Some, None, swap_unwrap};\n use private::at_exit::at_exit;\n-use private::global::global_data_clone_create;\n use private::finally::Finally;\n-use comm::{Port, Chan, SharedChan, GenericChan,\n-           GenericPort, GenericSmartChan, stream};\n-use task::{Task, task, spawn};\n+use private::global::global_data_clone_create;\n use task::rt::{task_id, get_task_id};\n-use hashmap::linear::LinearMap;\n-use ops::Drop;\n+use task::{Task, task, spawn};\n \n type ShutdownMsg = ();\n \n@@ -37,14 +38,13 @@ pub unsafe fn weaken_task(f: &fn(Port<ShutdownMsg>)) {\n     let service = global_data_clone_create(global_data_key,\n                                            create_global_service);\n     let (shutdown_port, shutdown_chan) = stream::<ShutdownMsg>();\n-    let shutdown_port = ~mut Some(shutdown_port);\n+    let shutdown_port = Cell(shutdown_port);\n     let task = get_task_id();\n     // Expect the weak task service to be alive\n     assert service.try_send(RegisterWeakTask(task, shutdown_chan));\n     unsafe { rust_dec_kernel_live_count(); }\n     do fn&() {\n-        let shutdown_port = swap_unwrap(&mut *shutdown_port);\n-        f(shutdown_port)\n+        f(shutdown_port.take())\n     }.finally || {\n         unsafe { rust_inc_kernel_live_count(); }\n         // Service my have already exited\n@@ -67,16 +67,15 @@ fn create_global_service() -> ~WeakTaskService {\n \n     debug!(\"creating global weak task service\");\n     let (port, chan) = stream::<ServiceMsg>();\n-    let port = ~mut Some(port);\n+    let port = Cell(port);\n     let chan = SharedChan(chan);\n     let chan_clone = chan.clone();\n \n     do task().unlinked().spawn {\n         debug!(\"running global weak task service\");\n-        let port = swap_unwrap(&mut *port);\n-        let port = ~mut Some(port);\n+        let port = Cell(port.take());\n         do fn&() {\n-            let port = swap_unwrap(&mut *port);\n+            let port = port.take();\n             // The weak task service is itself a weak task\n             debug!(\"weakening the weak service task\");\n             unsafe { rust_dec_kernel_live_count(); }"}, {"sha": "4c3abb09756e99b05d625e8afb1ba0a6f85335b4", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -602,7 +602,6 @@ fn test_repr() {\n     exact_test(&(@10), \"@10\");\n     exact_test(&(@mut 10), \"@10\");\n     exact_test(&(~10), \"~10\");\n-    exact_test(&(~mut 10), \"~mut 10\");\n     exact_test(&(&10), \"&10\");\n     let mut x = 10;\n     exact_test(&(&mut x), \"&mut 10\");"}, {"sha": "2a640e4bf8cf731de5d4909e6caf99a41ac89044", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -34,6 +34,7 @@\n  */\n \n use cast;\n+use cell::Cell;\n use cmp;\n use cmp::Eq;\n use iter;\n@@ -397,9 +398,9 @@ impl TaskBuilder {\n     }\n     /// Runs a task, while transfering ownership of one argument to the child.\n     fn spawn_with<A:Owned>(arg: A, f: fn~(v: A)) {\n-        let arg = ~mut Some(arg);\n-        do self.spawn || {\n-            f(option::swap_unwrap(arg))\n+        let arg = Cell(arg);\n+        do self.spawn {\n+            f(arg.take());\n         }\n     }\n "}, {"sha": "5110f70ff11be9762f8616625e520b71cdc6b064", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -73,6 +73,7 @@\n #[doc(hidden)]; // FIXME #3538\n \n use cast;\n+use cell::Cell;\n use container::Map;\n use option;\n use comm::{Chan, GenericChan, GenericPort, Port, stream};\n@@ -530,11 +531,11 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n         gen_child_taskgroup(opts.linked, opts.supervised);\n \n     unsafe {\n-        let child_data = ~mut Some((child_tg, ancestors, f));\n+        let child_data = Cell((child_tg, ancestors, f));\n         // Being killed with the unsafe task/closure pointers would leak them.\n         do unkillable {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n-            let (child_tg, ancestors, f) = option::swap_unwrap(child_data);\n+            let (child_tg, ancestors, f) = child_data.take();\n             // Create child task.\n             let new_task = match opts.sched.mode {\n                 DefaultScheduler => rt::new_task(),\n@@ -571,10 +572,10 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n                           ancestors: AncestorList, is_main: bool,\n                           notify_chan: Option<Chan<TaskResult>>,\n                           f: fn~()) -> fn~() {\n-        let child_data = ~mut Some((child_arc, ancestors));\n+        let child_data = Cell((child_arc, ancestors));\n         return fn~() {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n-            let mut (child_arc, ancestors) = option::swap_unwrap(child_data);\n+            let mut (child_arc, ancestors) = child_data.take();\n             // Child task runs this code.\n \n             // Even if the below code fails to kick the child off, we must"}, {"sha": "ee598686652522f070565cb2ece010de590fbd4f", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -549,6 +549,7 @@ use syntax::codemap;\n use util::common::indenter;\n use util::ppaux::note_and_explain_region;\n \n+use core::cell::{Cell, empty_cell};\n use core::cmp;\n use core::dvec::DVec;\n use core::to_bytes;\n@@ -557,7 +558,6 @@ use core::vec;\n use result::Result;\n use result::{Ok, Err};\n use std::oldmap::HashMap;\n-use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n use syntax::codemap::span;\n use syntax::codemap;"}, {"sha": "251e21578a5235b712aa570b3063a86b6ccbe311", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -314,8 +314,8 @@ fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n+    use core::cell::Cell;\n     use core::comm::*;\n-    use std::cell::Cell;\n     let (p, ch) = stream();\n     let ch = SharedChan(ch);\n     let ch_capture = ch.clone();"}, {"sha": "1c45fdafa189c0757f5fd886e8d4e8c7749f05b9", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -21,8 +21,8 @@ use core::prelude::*;\n \n use parse;\n use util;\n-use std::cell::Cell;\n \n+use core::cell::Cell;\n use core::comm::{stream, Chan, SharedChan, Port};\n use core::vec;\n use core::ops::Drop;"}, {"sha": "11a1b9f357657568f2b563081011301c80f1948a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use core::cell::Cell;\n use core::cmp;\n use core::os;\n use core::result;\n@@ -18,7 +19,6 @@ use core::run::ProgramOutput;\n use core::vec;\n use core::result::Result;\n use std::getopts;\n-use std::cell::Cell;\n \n /// The type of document to output\n pub enum OutputFormat {"}, {"sha": "f64f365496d838d935718d041f44c7f1232d7791", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -34,11 +34,11 @@ use sort_pass;\n use trim_pass;\n use unindent_pass;\n \n+use core::cell::Cell;\n use core::iter;\n use core::str;\n use core::vec;\n use std::par;\n-use std::cell::Cell;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {"}, {"sha": "83f35418b0b1f062e8dc72e55d91edb51069ef57", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -20,8 +20,8 @@ use fold;\n use pass::Pass;\n use util::NominalOp;\n \n+use core::cell::Cell;\n use std::par;\n-use std::cell::Cell;\n \n pub fn mk_pass(name: ~str, op: @fn(&str) -> ~str) -> Pass {\n     let op = Cell(op);"}, {"sha": "854abfdd112e67d99b4d1ffca0e0aab0cbfa2f52", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e2f90091cf652218fe456ec1a54892fe1ceabb36/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=e2f90091cf652218fe456ec1a54892fe1ceabb36", "patch": "@@ -54,7 +54,6 @@ pub mod uv_global_loop;\n \n pub mod c_vec;\n pub mod timer;\n-pub mod cell;\n pub mod io_util;\n \n // Concurrency"}]}