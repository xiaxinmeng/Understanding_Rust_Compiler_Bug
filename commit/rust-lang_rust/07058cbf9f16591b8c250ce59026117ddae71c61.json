{"sha": "07058cbf9f16591b8c250ce59026117ddae71c61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MDU4Y2JmOWYxNjU5MWI4YzI1MGNlNTkwMjYxMTdkZGFlNzFjNjE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T11:21:12Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T15:18:42Z"}, "message": "Adjust the assist group name", "tree": {"sha": "5667cabf39e6223b2e45bfea6cb979d8689a8cb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5667cabf39e6223b2e45bfea6cb979d8689a8cb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07058cbf9f16591b8c250ce59026117ddae71c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07058cbf9f16591b8c250ce59026117ddae71c61", "html_url": "https://github.com/rust-lang/rust/commit/07058cbf9f16591b8c250ce59026117ddae71c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07058cbf9f16591b8c250ce59026117ddae71c61/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f7028d3f21b578b424a2b95998c2b9568aea80", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f7028d3f21b578b424a2b95998c2b9568aea80", "html_url": "https://github.com/rust-lang/rust/commit/24f7028d3f21b578b424a2b95998c2b9568aea80"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "c564f5027c8129f8943eba72a2cc3d10fc60b4d9", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/07058cbf9f16591b8c250ce59026117ddae71c61/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07058cbf9f16591b8c250ce59026117ddae71c61/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=07058cbf9f16591b8c250ce59026117ddae71c61", "patch": "@@ -1,9 +1,3 @@\n-use ra_ide_db::{imports_locator::ImportsLocator, RootDatabase};\n-use ra_syntax::{\n-    ast::{self, AstNode},\n-    SyntaxNode,\n-};\n-\n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n     insert_use_statement, AssistId,\n@@ -13,7 +7,12 @@ use hir::{\n     AssocContainerId, AssocItem, Crate, Function, ModPath, Module, ModuleDef, PathResolution,\n     SourceAnalyzer, Trait, Type,\n };\n+use ra_ide_db::{imports_locator::ImportsLocator, RootDatabase};\n use ra_prof::profile;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    SyntaxNode,\n+};\n use rustc_hash::FxHashSet;\n use std::collections::BTreeSet;\n \n@@ -50,9 +49,13 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    let mut group =\n-        // TODO kb create another method and add something about traits there\n-        ctx.add_assist_group(format!(\"Import {}\", auto_import_assets.get_search_query()));\n+    let assist_group_name = if proposed_imports.len() == 1 {\n+        format!(\"Import `{}`\", proposed_imports.iter().next().unwrap())\n+    } else {\n+        auto_import_assets.get_import_group_message()\n+    };\n+\n+    let mut group = ctx.add_assist_group(assist_group_name);\n     for import in proposed_imports {\n         group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n             edit.target(auto_import_assets.syntax_under_caret.text_range());\n@@ -119,6 +122,19 @@ impl AutoImportAssets {\n         }\n     }\n \n+    fn get_import_group_message(&self) -> String {\n+        match &self.import_candidate {\n+            ImportCandidate::UnqualifiedName(name_ref)\n+            | ImportCandidate::QualifierStart(name_ref) => format!(\"Import {}\", name_ref.syntax()),\n+            ImportCandidate::TraitFunction(_, trait_function) => {\n+                format!(\"Import a trait for function {}\", trait_function.syntax())\n+            }\n+            ImportCandidate::TraitMethod(_, trait_method) => {\n+                format!(\"Import a trait for method {}\", trait_method.syntax())\n+            }\n+        }\n+    }\n+\n     fn search_for_imports(\n         &self,\n         db: &RootDatabase,"}]}