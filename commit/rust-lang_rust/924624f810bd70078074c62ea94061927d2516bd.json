{"sha": "924624f810bd70078074c62ea94061927d2516bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNDYyNGY4MTBiZDcwMDc4MDc0YzYyZWE5NDA2MTkyN2QyNTE2YmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-16T21:37:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:02:57Z"}, "message": "some failures are impossible", "tree": {"sha": "63e61b379d6d14687427bcd2619121e54acb7079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e61b379d6d14687427bcd2619121e54acb7079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/924624f810bd70078074c62ea94061927d2516bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/924624f810bd70078074c62ea94061927d2516bd", "html_url": "https://github.com/rust-lang/rust/commit/924624f810bd70078074c62ea94061927d2516bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/924624f810bd70078074c62ea94061927d2516bd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef52be031ca7a75863b937e68799de66557563ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef52be031ca7a75863b937e68799de66557563ce", "html_url": "https://github.com/rust-lang/rust/commit/ef52be031ca7a75863b937e68799de66557563ce"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "152171aed066aff3814625186d486c237ac10fd8", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924624f810bd70078074c62ea94061927d2516bd/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924624f810bd70078074c62ea94061927d2516bd/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=924624f810bd70078074c62ea94061927d2516bd", "patch": "@@ -473,7 +473,7 @@ impl<'tcx> Stack {\n                     \"no item to reborrow as {} from tag {} found in borrow stack\", new_kind, derived_from,\n             )))?;\n         // With this we can compute the permission for the new pointer.\n-        let new_perm = new_kind.new_perm(derived_from_perm)?;\n+        let new_perm = new_kind.new_perm(derived_from_perm).expect(\"this should never fail\");\n \n         // We behave very differently for the \"unsafe\" case of a shared-read-write pointer\n         // (\"unsafe\" because this also applies to shared references with interior mutability)."}]}