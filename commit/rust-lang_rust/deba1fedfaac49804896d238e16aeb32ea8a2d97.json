{"sha": "deba1fedfaac49804896d238e16aeb32ea8a2d97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYmExZmVkZmFhYzQ5ODA0ODk2ZDIzOGUxNmFlYjMyZWE4YTJkOTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T16:16:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T16:53:05Z"}, "message": ":arrow_up: rustc_lexer", "tree": {"sha": "c32cdf798044f1e557dec9209afa05cfe8f94790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32cdf798044f1e557dec9209afa05cfe8f94790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deba1fedfaac49804896d238e16aeb32ea8a2d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deba1fedfaac49804896d238e16aeb32ea8a2d97", "html_url": "https://github.com/rust-lang/rust/commit/deba1fedfaac49804896d238e16aeb32ea8a2d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deba1fedfaac49804896d238e16aeb32ea8a2d97/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbeb07e5ca9f0c22e2e6f6ab33f350f24e8fff3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbeb07e5ca9f0c22e2e6f6ab33f350f24e8fff3f", "html_url": "https://github.com/rust-lang/rust/commit/bbeb07e5ca9f0c22e2e6f6ab33f350f24e8fff3f"}], "stats": {"total": 198, "additions": 78, "deletions": 120}, "files": [{"sha": "85db6d1797d1b8c0efa4a78342628c2914f72760", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deba1fedfaac49804896d238e16aeb32ea8a2d97/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/deba1fedfaac49804896d238e16aeb32ea8a2d97/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=deba1fedfaac49804896d238e16aeb32ea8a2d97", "patch": "@@ -1256,7 +1256,7 @@ dependencies = [\n \n [[package]]\n name = \"ra_rustc_lexer\"\n-version = \"0.1.0-pre.2\"\n+version = \"0.1.0-pre.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1268,7 +1268,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_parser 0.1.0\",\n- \"ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_rustc_lexer 0.1.0-pre.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2134,7 +2134,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n \"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n-\"checksum ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6baccda91574dfadd7f8a0bc8f9f110f874b6b484289b2536d3dbf4f0d5d97bb\"\n+\"checksum ra_rustc_lexer 0.1.0-pre.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04371af481820ff8d35c7d12b503eb09cf9e1bd246269bf4a33e3d8c54fa3a4a\"\n \"checksum ra_vfs 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6918c38f6ab45101f1ddd6110eda831a735b5e9ca6c96d1ceedb7d13ecaeb0f4\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n \"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\""}, {"sha": "0ead277b2f8abde205d25e3173c9baca4b98228f", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba1fedfaac49804896d238e16aeb32ea8a2d97/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/deba1fedfaac49804896d238e16aeb32ea8a2d97/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=deba1fedfaac49804896d238e16aeb32ea8a2d97", "patch": "@@ -10,7 +10,7 @@ repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n [dependencies]\n itertools = \"0.8.0\"\n rowan = \"0.6.1\"\n-ra_rustc_lexer = { version = \"0.1.0-pre.2\" }\n+ra_rustc_lexer = { version = \"0.1.0-pre.3\", features = [\"unicode-xid\"] }\n \n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations"}, {"sha": "bdb01d40b387b5dd11347e51fa48ad7f482e8e98", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 48, "deletions": 88, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/deba1fedfaac49804896d238e16aeb32ea8a2d97/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba1fedfaac49804896d238e16aeb32ea8a2d97/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=deba1fedfaac49804896d238e16aeb32ea8a2d97", "patch": "@@ -12,16 +12,16 @@ pub struct Token {\n     pub len: TextUnit,\n }\n \n-fn match_literal_kind(kind: ra_rustc_lexer::LiteralKind) -> SyntaxKind {\n+fn match_literal_kind(kind: rustc_lexer::LiteralKind) -> SyntaxKind {\n     match kind {\n-        ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n-        ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n-        ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n-        ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n-        ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n-        ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n-        ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n-        ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n+        rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n+        rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n+        rustc_lexer::LiteralKind::Char { .. } => CHAR,\n+        rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n+        rustc_lexer::LiteralKind::Str { .. } => STRING,\n+        rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n+        rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n+        rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n     }\n }\n \n@@ -32,95 +32,55 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n     }\n     let mut text = text;\n     let mut acc = Vec::new();\n-    if let Some(len) = ra_rustc_lexer::strip_shebang(text) {\n+    if let Some(len) = rustc_lexer::strip_shebang(text) {\n         acc.push(Token { kind: SHEBANG, len: TextUnit::from_usize(len) });\n         text = &text[len..];\n     }\n     while !text.is_empty() {\n-        let rustc_token = ra_rustc_lexer::first_token(text);\n-        macro_rules! decompose {\n-            ($t1:expr, $t2:expr) => {{\n-                acc.push(Token { kind: $t1, len: 1.into() });\n-                acc.push(Token { kind: $t2, len: 1.into() });\n-                text = &text[2..];\n-                continue;\n-            }};\n-            ($t1:expr, $t2:expr, $t3:expr) => {{\n-                acc.push(Token { kind: $t1, len: 1.into() });\n-                acc.push(Token { kind: $t2, len: 1.into() });\n-                acc.push(Token { kind: $t3, len: 1.into() });\n-                text = &text[3..];\n-                continue;\n-            }};\n-        }\n+        let rustc_token = rustc_lexer::first_token(text);\n         let kind = match rustc_token.kind {\n-            ra_rustc_lexer::TokenKind::LineComment => COMMENT,\n-            ra_rustc_lexer::TokenKind::BlockComment { .. } => COMMENT,\n-            ra_rustc_lexer::TokenKind::Whitespace => WHITESPACE,\n-            ra_rustc_lexer::TokenKind::Ident => {\n+            rustc_lexer::TokenKind::LineComment => COMMENT,\n+            rustc_lexer::TokenKind::BlockComment { .. } => COMMENT,\n+            rustc_lexer::TokenKind::Whitespace => WHITESPACE,\n+            rustc_lexer::TokenKind::Ident => {\n                 let token_text = &text[..rustc_token.len];\n                 if token_text == \"_\" {\n                     UNDERSCORE\n                 } else {\n                     SyntaxKind::from_keyword(&text[..rustc_token.len]).unwrap_or(IDENT)\n                 }\n             }\n-            ra_rustc_lexer::TokenKind::RawIdent => IDENT,\n-            ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n-            ra_rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n-            ra_rustc_lexer::TokenKind::Semi => SEMI,\n-            ra_rustc_lexer::TokenKind::Comma => COMMA,\n-            ra_rustc_lexer::TokenKind::DotDotDot => decompose!(DOT, DOT, DOT),\n-            ra_rustc_lexer::TokenKind::DotDotEq => decompose!(DOT, DOT, EQ),\n-            ra_rustc_lexer::TokenKind::DotDot => decompose!(DOT, DOT),\n-            ra_rustc_lexer::TokenKind::Dot => DOT,\n-            ra_rustc_lexer::TokenKind::OpenParen => L_PAREN,\n-            ra_rustc_lexer::TokenKind::CloseParen => R_PAREN,\n-            ra_rustc_lexer::TokenKind::OpenBrace => L_CURLY,\n-            ra_rustc_lexer::TokenKind::CloseBrace => R_CURLY,\n-            ra_rustc_lexer::TokenKind::OpenBracket => L_BRACK,\n-            ra_rustc_lexer::TokenKind::CloseBracket => R_BRACK,\n-            ra_rustc_lexer::TokenKind::At => AT,\n-            ra_rustc_lexer::TokenKind::Pound => POUND,\n-            ra_rustc_lexer::TokenKind::Tilde => TILDE,\n-            ra_rustc_lexer::TokenKind::Question => QUESTION,\n-            ra_rustc_lexer::TokenKind::ColonColon => decompose!(COLON, COLON),\n-            ra_rustc_lexer::TokenKind::Colon => COLON,\n-            ra_rustc_lexer::TokenKind::Dollar => DOLLAR,\n-            ra_rustc_lexer::TokenKind::EqEq => decompose!(EQ, EQ),\n-            ra_rustc_lexer::TokenKind::Eq => EQ,\n-            ra_rustc_lexer::TokenKind::FatArrow => decompose!(EQ, R_ANGLE),\n-            ra_rustc_lexer::TokenKind::Ne => decompose!(EXCL, EQ),\n-            ra_rustc_lexer::TokenKind::Not => EXCL,\n-            ra_rustc_lexer::TokenKind::Le => decompose!(L_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::LArrow => decompose!(COLON, MINUS),\n-            ra_rustc_lexer::TokenKind::Lt => L_ANGLE,\n-            ra_rustc_lexer::TokenKind::ShlEq => decompose!(L_ANGLE, L_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::Shl => decompose!(L_ANGLE, L_ANGLE),\n-            ra_rustc_lexer::TokenKind::Ge => decompose!(R_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::Gt => R_ANGLE,\n-            ra_rustc_lexer::TokenKind::ShrEq => decompose!(R_ANGLE, R_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::Shr => decompose!(R_ANGLE, R_ANGLE),\n-            ra_rustc_lexer::TokenKind::RArrow => decompose!(MINUS, R_ANGLE),\n-            ra_rustc_lexer::TokenKind::Minus => MINUS,\n-            ra_rustc_lexer::TokenKind::MinusEq => decompose!(MINUS, EQ),\n-            ra_rustc_lexer::TokenKind::And => AMP,\n-            ra_rustc_lexer::TokenKind::AndAnd => decompose!(AMP, AMP),\n-            ra_rustc_lexer::TokenKind::AndEq => decompose!(AMP, EQ),\n-            ra_rustc_lexer::TokenKind::Or => PIPE,\n-            ra_rustc_lexer::TokenKind::OrOr => decompose!(PIPE, PIPE),\n-            ra_rustc_lexer::TokenKind::OrEq => decompose!(PIPE, EQ),\n-            ra_rustc_lexer::TokenKind::PlusEq => decompose!(PLUS, EQ),\n-            ra_rustc_lexer::TokenKind::Plus => PLUS,\n-            ra_rustc_lexer::TokenKind::StarEq => decompose!(STAR, EQ),\n-            ra_rustc_lexer::TokenKind::Star => STAR,\n-            ra_rustc_lexer::TokenKind::SlashEq => decompose!(SLASH, EQ),\n-            ra_rustc_lexer::TokenKind::Slash => SLASH,\n-            ra_rustc_lexer::TokenKind::CaretEq => decompose!(CARET, EQ),\n-            ra_rustc_lexer::TokenKind::Caret => CARET,\n-            ra_rustc_lexer::TokenKind::PercentEq => decompose!(PERCENT, EQ),\n-            ra_rustc_lexer::TokenKind::Percent => PERCENT,\n-            ra_rustc_lexer::TokenKind::Unknown => ERROR,\n+            rustc_lexer::TokenKind::RawIdent => IDENT,\n+            rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n+            rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n+            rustc_lexer::TokenKind::Semi => SEMI,\n+            rustc_lexer::TokenKind::Comma => COMMA,\n+            rustc_lexer::TokenKind::Dot => DOT,\n+            rustc_lexer::TokenKind::OpenParen => L_PAREN,\n+            rustc_lexer::TokenKind::CloseParen => R_PAREN,\n+            rustc_lexer::TokenKind::OpenBrace => L_CURLY,\n+            rustc_lexer::TokenKind::CloseBrace => R_CURLY,\n+            rustc_lexer::TokenKind::OpenBracket => L_BRACK,\n+            rustc_lexer::TokenKind::CloseBracket => R_BRACK,\n+            rustc_lexer::TokenKind::At => AT,\n+            rustc_lexer::TokenKind::Pound => POUND,\n+            rustc_lexer::TokenKind::Tilde => TILDE,\n+            rustc_lexer::TokenKind::Question => QUESTION,\n+            rustc_lexer::TokenKind::Colon => COLON,\n+            rustc_lexer::TokenKind::Dollar => DOLLAR,\n+            rustc_lexer::TokenKind::Eq => EQ,\n+            rustc_lexer::TokenKind::Not => EXCL,\n+            rustc_lexer::TokenKind::Lt => L_ANGLE,\n+            rustc_lexer::TokenKind::Gt => R_ANGLE,\n+            rustc_lexer::TokenKind::Minus => MINUS,\n+            rustc_lexer::TokenKind::And => AMP,\n+            rustc_lexer::TokenKind::Or => PIPE,\n+            rustc_lexer::TokenKind::Plus => PLUS,\n+            rustc_lexer::TokenKind::Star => STAR,\n+            rustc_lexer::TokenKind::Slash => SLASH,\n+            rustc_lexer::TokenKind::Caret => CARET,\n+            rustc_lexer::TokenKind::Percent => PERCENT,\n+            rustc_lexer::TokenKind::Unknown => ERROR,\n         };\n         let token = Token { kind, len: TextUnit::from_usize(rustc_token.len) };\n         acc.push(token);\n@@ -130,12 +90,12 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n }\n \n pub fn classify_literal(text: &str) -> Option<Token> {\n-    let t = ra_rustc_lexer::first_token(text);\n+    let t = rustc_lexer::first_token(text);\n     if t.len != text.len() {\n         return None;\n     }\n     let kind = match t.kind {\n-        ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n+        rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n         _ => return None,\n     };\n     Some(Token { kind, len: TextUnit::from_usize(t.len) })"}, {"sha": "a8c789e0ca2e0181077771eb82068e153798da45", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/deba1fedfaac49804896d238e16aeb32ea8a2d97/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba1fedfaac49804896d238e16aeb32ea8a2d97/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=deba1fedfaac49804896d238e16aeb32ea8a2d97", "patch": "@@ -1,6 +1,6 @@\n mod block;\n \n-use ra_rustc_lexer::unescape;\n+use rustc_lexer::unescape;\n \n use crate::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n@@ -32,64 +32,62 @@ pub enum EscapeError {\n     NonAsciiCharInByte,\n }\n \n-impl From<ra_rustc_lexer::unescape::EscapeError> for EscapeError {\n-    fn from(err: ra_rustc_lexer::unescape::EscapeError) -> Self {\n+impl From<rustc_lexer::unescape::EscapeError> for EscapeError {\n+    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n         match err {\n-            ra_rustc_lexer::unescape::EscapeError::ZeroChars => EscapeError::ZeroChars,\n-            ra_rustc_lexer::unescape::EscapeError::MoreThanOneChar => EscapeError::MoreThanOneChar,\n-            ra_rustc_lexer::unescape::EscapeError::LoneSlash => EscapeError::LoneSlash,\n-            ra_rustc_lexer::unescape::EscapeError::InvalidEscape => EscapeError::InvalidEscape,\n-            ra_rustc_lexer::unescape::EscapeError::BareCarriageReturn\n-            | ra_rustc_lexer::unescape::EscapeError::BareCarriageReturnInRawString => {\n+            rustc_lexer::unescape::EscapeError::ZeroChars => EscapeError::ZeroChars,\n+            rustc_lexer::unescape::EscapeError::MoreThanOneChar => EscapeError::MoreThanOneChar,\n+            rustc_lexer::unescape::EscapeError::LoneSlash => EscapeError::LoneSlash,\n+            rustc_lexer::unescape::EscapeError::InvalidEscape => EscapeError::InvalidEscape,\n+            rustc_lexer::unescape::EscapeError::BareCarriageReturn\n+            | rustc_lexer::unescape::EscapeError::BareCarriageReturnInRawString => {\n                 EscapeError::BareCarriageReturn\n             }\n-            ra_rustc_lexer::unescape::EscapeError::EscapeOnlyChar => EscapeError::EscapeOnlyChar,\n-            ra_rustc_lexer::unescape::EscapeError::TooShortHexEscape => {\n-                EscapeError::TooShortHexEscape\n-            }\n-            ra_rustc_lexer::unescape::EscapeError::InvalidCharInHexEscape => {\n+            rustc_lexer::unescape::EscapeError::EscapeOnlyChar => EscapeError::EscapeOnlyChar,\n+            rustc_lexer::unescape::EscapeError::TooShortHexEscape => EscapeError::TooShortHexEscape,\n+            rustc_lexer::unescape::EscapeError::InvalidCharInHexEscape => {\n                 EscapeError::InvalidCharInHexEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::OutOfRangeHexEscape => {\n+            rustc_lexer::unescape::EscapeError::OutOfRangeHexEscape => {\n                 EscapeError::OutOfRangeHexEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::NoBraceInUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::NoBraceInUnicodeEscape => {\n                 EscapeError::NoBraceInUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::InvalidCharInUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::InvalidCharInUnicodeEscape => {\n                 EscapeError::InvalidCharInUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::EmptyUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::EmptyUnicodeEscape => {\n                 EscapeError::EmptyUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::UnclosedUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::UnclosedUnicodeEscape => {\n                 EscapeError::UnclosedUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::LeadingUnderscoreUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::LeadingUnderscoreUnicodeEscape => {\n                 EscapeError::LeadingUnderscoreUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::OverlongUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::OverlongUnicodeEscape => {\n                 EscapeError::OverlongUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::LoneSurrogateUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::LoneSurrogateUnicodeEscape => {\n                 EscapeError::LoneSurrogateUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::OutOfRangeUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::OutOfRangeUnicodeEscape => {\n                 EscapeError::OutOfRangeUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::UnicodeEscapeInByte => {\n+            rustc_lexer::unescape::EscapeError::UnicodeEscapeInByte => {\n                 EscapeError::UnicodeEscapeInByte\n             }\n-            ra_rustc_lexer::unescape::EscapeError::NonAsciiCharInByte\n-            | ra_rustc_lexer::unescape::EscapeError::NonAsciiCharInByteString => {\n+            rustc_lexer::unescape::EscapeError::NonAsciiCharInByte\n+            | rustc_lexer::unescape::EscapeError::NonAsciiCharInByteString => {\n                 EscapeError::NonAsciiCharInByte\n             }\n         }\n     }\n }\n \n-impl From<ra_rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n-    fn from(err: ra_rustc_lexer::unescape::EscapeError) -> Self {\n+impl From<rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n+    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n         SyntaxErrorKind::EscapeError(err.into())\n     }\n }"}]}