{"sha": "23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "node_id": "C_kwDOAAsO6NoAKDIzNjM3ZTIwY2RmM2Y3YjhlMDFiNDJkYmFmMjUzNTdlNWQzYzMxYWU", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2021-10-06T20:26:36Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2021-11-21T16:05:55Z"}, "message": "libcore: assume the input of `next_code_point` and `next_code_point_reverse` is UTF-8-like\n\nThe functions are now `unsafe` and they use `Option::unwrap_unchecked` instead of `unwrap_or_0`\n\n`unwrap_or_0` was added in 42357d772b8a3a1ce4395deeac0a5cf1f66e951d. I guess `unwrap_unchecked` was not available back then.\n\nGiven this example:\n\n```rust\npub fn first_char(s: &str) -> Option<char> {\n    s.chars().next()\n}\n```\n\nPreviously, the following assembly was produced:\n\n```asm\n_ZN7example10first_char17ha056ddea6bafad1cE:\n\t.cfi_startproc\n\ttest\trsi, rsi\n\tje\t.LBB0_1\n\tmovzx\tedx, byte ptr [rdi]\n\ttest\tdl, dl\n\tjs\t.LBB0_3\n\tmov\teax, edx\n\tret\n.LBB0_1:\n\tmov\teax, 1114112\n\tret\n.LBB0_3:\n\tlea\tr8, [rdi + rsi]\n\txor\teax, eax\n\tmov\tr9, r8\n\tcmp\trsi, 1\n\tje\t.LBB0_5\n\tmovzx\teax, byte ptr [rdi + 1]\n\tadd\trdi, 2\n\tand\teax, 63\n\tmov\tr9, rdi\n.LBB0_5:\n\tmov\tecx, edx\n\tand\tecx, 31\n\tcmp\tdl, -33\n\tjbe\t.LBB0_6\n\tcmp\tr9, r8\n\tje\t.LBB0_9\n\tmovzx\tesi, byte ptr [r9]\n\tadd\tr9, 1\n\tand\tesi, 63\n\tshl\teax, 6\n\tor\teax, esi\n\tcmp\tdl, -16\n\tjb\t.LBB0_12\n.LBB0_13:\n\tcmp\tr9, r8\n\tje\t.LBB0_14\n\tmovzx\tedx, byte ptr [r9]\n\tand\tedx, 63\n\tjmp\t.LBB0_16\n.LBB0_6:\n\tshl\tecx, 6\n\tor\teax, ecx\n\tret\n.LBB0_9:\n\txor\tesi, esi\n\tmov\tr9, r8\n\tshl\teax, 6\n\tor\teax, esi\n\tcmp\tdl, -16\n\tjae\t.LBB0_13\n.LBB0_12:\n\tshl\tecx, 12\n\tor\teax, ecx\n\tret\n.LBB0_14:\n\txor\tedx, edx\n.LBB0_16:\n\tand\tecx, 7\n\tshl\tecx, 18\n\tshl\teax, 6\n\tor\teax, ecx\n\tor\teax, edx\n\tret\n```\n\nAfter this change, the assembly is reduced to:\n\n```asm\n_ZN7example10first_char17h4318683472f884ccE:\n\t.cfi_startproc\n\ttest\trsi, rsi\n\tje\t.LBB0_1\n\tmovzx\tecx, byte ptr [rdi]\n\ttest\tcl, cl\n\tjs\t.LBB0_3\n\tmov\teax, ecx\n\tret\n.LBB0_1:\n\tmov\teax, 1114112\n\tret\n.LBB0_3:\n\tmov\teax, ecx\n\tand\teax, 31\n\tmovzx\tesi, byte ptr [rdi + 1]\n\tand\tesi, 63\n\tcmp\tcl, -33\n\tjbe\t.LBB0_4\n\tmovzx\tedx, byte ptr [rdi + 2]\n\tshl\tesi, 6\n\tand\tedx, 63\n\tor\tedx, esi\n\tcmp\tcl, -16\n\tjb\t.LBB0_7\n\tmovzx\tecx, byte ptr [rdi + 3]\n\tand\teax, 7\n\tshl\teax, 18\n\tshl\tedx, 6\n\tand\tecx, 63\n\tor\tecx, edx\n\tor\teax, ecx\n\tret\n.LBB0_4:\n\tshl\teax, 6\n\tor\teax, esi\n\tret\n.LBB0_7:\n\tshl\teax, 12\n\tor\teax, edx\n\tret\n```", "tree": {"sha": "46020c09f2853966b1fd3cd36273be410464af20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46020c09f2853966b1fd3cd36273be410464af20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "html_url": "https://github.com/rust-lang/rust/commit/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bfde2f1f4fc9409ecb63dfe1370df66171cf861", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfde2f1f4fc9409ecb63dfe1370df66171cf861", "html_url": "https://github.com/rust-lang/rust/commit/3bfde2f1f4fc9409ecb63dfe1370df66171cf861"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "4841044671659add949d8ead7bb65d9ade087318", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "patch": "@@ -39,10 +39,9 @@ impl<'a> Iterator for Chars<'a> {\n \n     #[inline]\n     fn next(&mut self) -> Option<char> {\n-        next_code_point(&mut self.iter).map(|ch| {\n-            // SAFETY: `str` invariant says `ch` is a valid Unicode Scalar Value.\n-            unsafe { char::from_u32_unchecked(ch) }\n-        })\n+        // SAFETY: `str` invariant says `self.iter` is a valid UTF-8 string and\n+        // the resulting `ch` is a valid Unicode Scalar Value.\n+        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }\n     }\n \n     #[inline]\n@@ -81,10 +80,9 @@ impl fmt::Debug for Chars<'_> {\n impl<'a> DoubleEndedIterator for Chars<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<char> {\n-        next_code_point_reverse(&mut self.iter).map(|ch| {\n-            // SAFETY: `str` invariant says `ch` is a valid Unicode Scalar Value.\n-            unsafe { char::from_u32_unchecked(ch) }\n-        })\n+        // SAFETY: `str` invariant says `self.iter` is a valid UTF-8 string and\n+        // the resulting `ch` is a valid Unicode Scalar Value.\n+        unsafe { next_code_point_reverse(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }\n     }\n }\n "}, {"sha": "be9c41a491b8e8f68b33e24c6b3a3fdc480185e7", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "patch": "@@ -25,19 +25,15 @@ pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {\n     (byte as i8) < -64\n }\n \n-#[inline]\n-const fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n-    match opt {\n-        Some(&byte) => byte,\n-        None => 0,\n-    }\n-}\n-\n /// Reads the next code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n+///\n+/// # Safety\n+///\n+/// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n #[inline]\n-pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n+pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n     // Decode UTF-8\n     let x = *bytes.next()?;\n     if x < 128 {\n@@ -48,18 +44,24 @@ pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<\n     // Decode from a byte combination out of: [[[x y] z] w]\n     // NOTE: Performance is sensitive to the exact formulation here\n     let init = utf8_first_byte(x, 2);\n-    let y = unwrap_or_0(bytes.next());\n+    // SAFETY: `bytes` produces an UTF-8-like string,\n+    // so the iterator must produce a value here.\n+    let y = unsafe { *bytes.next().unwrap_unchecked() };\n     let mut ch = utf8_acc_cont_byte(init, y);\n     if x >= 0xE0 {\n         // [[x y z] w] case\n         // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid\n-        let z = unwrap_or_0(bytes.next());\n+        // SAFETY: `bytes` produces an UTF-8-like string,\n+        // so the iterator must produce a value here.\n+        let z = unsafe { *bytes.next().unwrap_unchecked() };\n         let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);\n         ch = init << 12 | y_z;\n         if x >= 0xF0 {\n             // [x y z w] case\n             // use only the lower 3 bits of `init`\n-            let w = unwrap_or_0(bytes.next());\n+            // SAFETY: `bytes` produces an UTF-8-like string,\n+            // so the iterator must produce a value here.\n+            let w = unsafe { *bytes.next().unwrap_unchecked() };\n             ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);\n         }\n     }\n@@ -69,8 +71,12 @@ pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<\n \n /// Reads the last code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n+///\n+/// # Safety\n+///\n+/// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string\n #[inline]\n-pub(super) fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\n+pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\n where\n     I: DoubleEndedIterator<Item = &'a u8>,\n {\n@@ -83,13 +89,19 @@ where\n     // Multibyte case follows\n     // Decode from a byte combination out of: [x [y [z w]]]\n     let mut ch;\n-    let z = unwrap_or_0(bytes.next_back());\n+    // SAFETY: `bytes` produces an UTF-8-like string,\n+    // so the iterator must produce a value here.\n+    let z = unsafe { *bytes.next_back().unwrap_unchecked() };\n     ch = utf8_first_byte(z, 2);\n     if utf8_is_cont_byte(z) {\n-        let y = unwrap_or_0(bytes.next_back());\n+        // SAFETY: `bytes` produces an UTF-8-like string,\n+        // so the iterator must produce a value here.\n+        let y = unsafe { *bytes.next_back().unwrap_unchecked() };\n         ch = utf8_first_byte(y, 3);\n         if utf8_is_cont_byte(y) {\n-            let x = unwrap_or_0(bytes.next_back());\n+            // SAFETY: `bytes` produces an UTF-8-like string,\n+            // so the iterator must produce a value here.\n+            let x = unsafe { *bytes.next_back().unwrap_unchecked() };\n             ch = utf8_first_byte(x, 4);\n             ch = utf8_acc_cont_byte(ch, y);\n         }"}, {"sha": "6e29bc61454c85076260a5f6412702a790506f04", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=23637e20cdf3f7b8e01b42dbaf25357e5d3c31ae", "patch": "@@ -809,7 +809,8 @@ impl<'a> Iterator for Wtf8CodePoints<'a> {\n \n     #[inline]\n     fn next(&mut self) -> Option<CodePoint> {\n-        next_code_point(&mut self.bytes).map(|c| CodePoint { value: c })\n+        // SAFETY: `self.bytes` has been created from a WTF-8 string\n+        unsafe { next_code_point(&mut self.bytes).map(|c| CodePoint { value: c }) }\n     }\n \n     #[inline]"}]}