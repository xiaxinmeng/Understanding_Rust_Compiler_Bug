{"sha": "dcea71720852cf6b7d682d6caa054a2d6fb96068", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZWE3MTcyMDg1MmNmNmI3ZDY4MmQ2Y2FhMDU0YTJkNmZiOTYwNjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-19T22:57:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-19T22:57:31Z"}, "message": "librustc: Fix botched merge. rs=merge", "tree": {"sha": "77fce57400f1dde62ca8f45bff2da256c11b8767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77fce57400f1dde62ca8f45bff2da256c11b8767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcea71720852cf6b7d682d6caa054a2d6fb96068", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcea71720852cf6b7d682d6caa054a2d6fb96068", "html_url": "https://github.com/rust-lang/rust/commit/dcea71720852cf6b7d682d6caa054a2d6fb96068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcea71720852cf6b7d682d6caa054a2d6fb96068/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93b3cd5c3783eabd527607adda891d8a84dab4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93b3cd5c3783eabd527607adda891d8a84dab4f", "html_url": "https://github.com/rust-lang/rust/commit/f93b3cd5c3783eabd527607adda891d8a84dab4f"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "efb11271af6d50136982d0120cb395d543ba73e8", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dcea71720852cf6b7d682d6caa054a2d6fb96068/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcea71720852cf6b7d682d6caa054a2d6fb96068/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=dcea71720852cf6b7d682d6caa054a2d6fb96068", "patch": "@@ -1976,6 +1976,7 @@ pub trait ImmutableVector<'self, T> {\n     fn alli(&self, f: &fn(uint, t: &T) -> bool) -> bool;\n     fn flat_map<U>(&self, f: &fn(t: &T) -> ~[U]) -> ~[U];\n     fn filter_mapped<U:Copy>(&self, f: &fn(t: &T) -> Option<U>) -> ~[U];\n+    unsafe fn unsafe_ref(&self, index: uint) -> *T;\n }\n \n /// Extension methods for vectors\n@@ -2097,6 +2098,14 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     fn filter_mapped<U:Copy>(&self, f: &fn(t: &T) -> Option<U>) -> ~[U] {\n         filter_mapped(*self, f)\n     }\n+\n+    /// Returns a pointer to the element at the given index, without doing\n+    /// bounds checking.\n+    #[inline(always)]\n+    unsafe fn unsafe_ref(&self, index: uint) -> *T {\n+        let (ptr, _): (*T, uint) = transmute(*self);\n+        ptr.offset(index)\n+    }\n }\n \n pub trait ImmutableEqVector<T:Eq> {"}, {"sha": "30c14ab679f31d01ded824f72afe54da1a61a1a3", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcea71720852cf6b7d682d6caa054a2d6fb96068/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcea71720852cf6b7d682d6caa054a2d6fb96068/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=dcea71720852cf6b7d682d6caa054a2d6fb96068", "patch": "@@ -288,11 +288,15 @@ pub impl Reflector {\n                 let arg = unsafe {\n                     llvm::LLVMGetParam(llfdecl, first_real_arg as c_uint)\n                 };\n-                let fcx = new_fn_ctxt(ccx, ~[], llfdecl, None);\n+                let fcx = new_fn_ctxt(ccx,\n+                                      ~[],\n+                                      llfdecl,\n+                                      ty::mk_uint(ccx.tcx),\n+                                      None);\n                 let bcx = top_scope_block(fcx, None);\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg);\n-                Store(bcx, ret, fcx.llretptr);\n+                Store(bcx, ret, fcx.llretptr.get());\n                 cleanup_and_Br(bcx, bcx, fcx.llreturn);\n                 finish_fn(fcx, bcx.llbb);\n                 llfdecl"}, {"sha": "2483cacd1a69f74e1cba417fbe5e056090b9eaab", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcea71720852cf6b7d682d6caa054a2d6fb96068/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcea71720852cf6b7d682d6caa054a2d6fb96068/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dcea71720852cf6b7d682d6caa054a2d6fb96068", "patch": "@@ -376,10 +376,10 @@ pub struct ident_interner {\n \n pub impl ident_interner {\n     fn intern(&self, val: @~str) -> ast::ident {\n-        ast::ident { repr: self.interner.intern(val), ctxt: 0}\n+        ast::ident { repr: self.interner.intern(val), ctxt: 0 }\n     }\n     fn gensym(&self, val: @~str) -> ast::ident {\n-        ast::ident { repr: self.interner.gensym(val), ctxt: 0}\n+        ast::ident { repr: self.interner.gensym(val), ctxt: 0 }\n     }\n     fn get(&self, idx: ast::ident) -> @~str {\n         self.interner.get(idx.repr)\n@@ -388,9 +388,9 @@ pub impl ident_interner {\n         self.interner.len()\n     }\n     fn find_equiv<Q:Hash + IterBytes + Equiv<@~str>>(&self, val: &Q)\n-                                                  -> Option<ast::ident> {\n+                                                     -> Option<ast::ident> {\n         match self.interner.find_equiv(val) {\n-            Some(v) => Some(ast::ident { repr: v }),\n+            Some(v) => Some(ast::ident { repr: v, ctxt: 0 }),\n             None => None,\n         }\n     }"}]}