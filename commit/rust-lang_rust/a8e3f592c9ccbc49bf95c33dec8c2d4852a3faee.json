{"sha": "a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTNmNTkyYzljY2JjNDliZjk1YzMzZGVjOGMyZDQ4NTJhM2ZhZWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-30T09:14:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-30T11:15:08Z"}, "message": "Set notrap flag on loads and stores", "tree": {"sha": "0da7f457f51e0a57f303265f2fc79c36ee863f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da7f457f51e0a57f303265f2fc79c36ee863f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee", "html_url": "https://github.com/rust-lang/rust/commit/a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452656b782dd66108c490beffe67902e3b4fdb74", "url": "https://api.github.com/repos/rust-lang/rust/commits/452656b782dd66108c490beffe67902e3b4fdb74", "html_url": "https://github.com/rust-lang/rust/commit/452656b782dd66108c490beffe67902e3b4fdb74"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "3e0d84387f3fd5424e1a8c7d343fb78f9c9e222d", "filename": "src/value_and_place.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=a8e3f592c9ccbc49bf95c33dec8c2d4852a3faee", "patch": "@@ -140,7 +140,9 @@ impl<'tcx> CValue<'tcx> {\n                     }\n                     _ => unreachable!(\"{:?}\", layout.ty),\n                 };\n-                ptr.load(fx, clif_ty, MemFlags::new())\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                ptr.load(fx, clif_ty, flags)\n             }\n             CValueInner::ByVal(value) => value,\n             CValueInner::ByRef(_, Some(_)) => bug!(\"load_scalar for unsized value not allowed\"),\n@@ -163,8 +165,10 @@ impl<'tcx> CValue<'tcx> {\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n                 let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar.clone());\n                 let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar.clone());\n-                let val1 = ptr.load(fx, clif_ty1, MemFlags::new());\n-                let val2 = ptr.offset(fx, b_offset).load(fx, clif_ty2, MemFlags::new());\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                let val1 = ptr.load(fx, clif_ty1, flags);\n+                let val2 = ptr.offset(fx, b_offset).load(fx, clif_ty2, flags);\n                 (val1, val2)\n             }\n             CValueInner::ByRef(_, Some(_)) => {\n@@ -609,28 +613,28 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n         };\n \n+        let mut flags = MemFlags::new();\n+        flags.set_notrap();\n         match from.layout().abi {\n             // FIXME make Abi::Vector work too\n             Abi::Scalar(_) => {\n                 let val = from.load_scalar(fx);\n-                to_ptr.store(fx, val, MemFlags::new());\n+                to_ptr.store(fx, val, flags);\n                 return;\n             }\n             Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n                 let (value, extra) = from.load_scalar_pair(fx);\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                to_ptr.store(fx, value, MemFlags::new());\n-                to_ptr\n-                    .offset(fx, b_offset)\n-                    .store(fx, extra, MemFlags::new());\n+                to_ptr.store(fx, value, flags);\n+                to_ptr.offset(fx, b_offset).store(fx, extra, flags);\n                 return;\n             }\n             _ => {}\n         }\n \n         match from.0 {\n             CValueInner::ByVal(val) => {\n-                to_ptr.store(fx, val, MemFlags::new());\n+                to_ptr.store(fx, val, flags);\n             }\n             CValueInner::ByValPair(_, _) => {\n                 bug!("}]}