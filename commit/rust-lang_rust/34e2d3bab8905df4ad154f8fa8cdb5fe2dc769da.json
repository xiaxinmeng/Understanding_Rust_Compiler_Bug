{"sha": "34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "node_id": "C_kwDOAAsO6NoAKDM0ZTJkM2JhYjg5MDVkZjRhZDE1NGY4ZmE4Y2RiNWZlMmRjNzY5ZGE", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-04-20T22:15:04Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-04-20T22:15:04Z"}, "message": "rustdoc: Optimize IdMap", "tree": {"sha": "89bd0f92b6e251572d7f0d9f21c1a6986ae6fdac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89bd0f92b6e251572d7f0d9f21c1a6986ae6fdac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmJghegACgkQkJzQ0mSD\nUWvm5AwAz8sRJGc+Uwt9/wD8TW7fWEbrgVvg0fYJHyhfLSTRkQbqc3pfFzf9LmEu\nix5p7Tuq8KOYSpIh7TFG14jksjeKFvBT+X1jd7xNdG0WNnhrOUnxO7rpDyxT9Mml\n7njhcKhic/OkXAiQctFzzajYE9jplmpG62P1oBou4SxwOBNShwP7ARPTucxifgKH\nGiiptO6ds+zz1NUEaZPBXv9umRHuEpJ/HHp8ZY4h47H6hWCX51BfDlO5pbu3grTI\n7W0iwEsHeFGqxwlSbUFqG8hq6OplLzimtLx1AE0OO6z7GjUMrw+MGugicOtnQEoG\n2pIi3GZHerIFNXbYt4RuFE+irnHPSfmpGrOaCR20d1qpXQ0Ty8nRl66aKSFZbaXC\nEoisFQLHd1/o7e8c2TBXdeRRRh5K71i3zf550S6fJSModudO//oj9Z03DXoUUbyo\nL0/VVuT2F2MhDxp7FwmyhyHczUrQh8ECuoeY+QwgM7ryQjH8Gsoy5xrWIZQbYzeE\nhbWCC37S\n=0oL0\n-----END PGP SIGNATURE-----", "payload": "tree 89bd0f92b6e251572d7f0d9f21c1a6986ae6fdac\nparent d39864d64e6e0762d418f6beeedb4510942fc828\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1650492904 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1650492904 +0200\n\nrustdoc: Optimize IdMap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "html_url": "https://github.com/rust-lang/rust/commit/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39864d64e6e0762d418f6beeedb4510942fc828", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39864d64e6e0762d418f6beeedb4510942fc828", "html_url": "https://github.com/rust-lang/rust/commit/d39864d64e6e0762d418f6beeedb4510942fc828"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "f4743d9179ec3584936d86657855af778a668cd7", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "patch": "@@ -2491,9 +2491,9 @@ dependencies = [\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.7.2\"\n+version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"af8b08b04175473088b46763e51ee54da5f9a164bc162f615b91bc179dbf15a3\"\n+checksum = \"87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9\"\n \n [[package]]\n name = \"opaque-debug\"\n@@ -4496,6 +4496,7 @@ dependencies = [\n  \"expect-test\",\n  \"itertools\",\n  \"minifier\",\n+ \"once_cell\",\n  \"pulldown-cmark\",\n  \"rayon\",\n  \"regex\","}, {"sha": "21efd040663b8aa9e848aa6ff3456f1fa864fa89", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "patch": "@@ -22,6 +22,7 @@ regex = \"1\"\n rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n tracing = \"0.1\"\n tracing-tree = \"0.2.0\"\n+once_cell = \"1.10.0\"\n \n [dependencies.tracing-subscriber]\n version = \"0.3.3\""}, {"sha": "bbc188ac8dbec01ff57572210cb6569f75cfcd8f", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=34e2d3bab8905df4ad154f8fa8cdb5fe2dc769da", "patch": "@@ -32,6 +32,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::edition::Edition;\n use rustc_span::Span;\n \n+use once_cell::sync::Lazy;\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::collections::VecDeque;\n@@ -1417,62 +1418,65 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n \n #[derive(Clone, Default, Debug)]\n pub struct IdMap {\n-    map: FxHashMap<String, usize>,\n+    map: FxHashMap<Cow<'static, str>, usize>,\n }\n \n-fn init_id_map() -> FxHashMap<String, usize> {\n+// The map is pre-initialized and cloned each time to avoid reinitializing it repeatedly.\n+static DEFAULT_ID_MAP: Lazy<FxHashMap<Cow<'static, str>, usize>> = Lazy::new(|| init_id_map());\n+\n+fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     let mut map = FxHashMap::default();\n     // This is the list of IDs used in Javascript.\n-    map.insert(\"help\".to_owned(), 1);\n+    map.insert(\"help\".into(), 1);\n     // This is the list of IDs used in HTML generated in Rust (including the ones\n     // used in tera template files).\n-    map.insert(\"mainThemeStyle\".to_owned(), 1);\n-    map.insert(\"themeStyle\".to_owned(), 1);\n-    map.insert(\"theme-picker\".to_owned(), 1);\n-    map.insert(\"theme-choices\".to_owned(), 1);\n-    map.insert(\"settings-menu\".to_owned(), 1);\n-    map.insert(\"help-button\".to_owned(), 1);\n-    map.insert(\"main-content\".to_owned(), 1);\n-    map.insert(\"search\".to_owned(), 1);\n-    map.insert(\"crate-search\".to_owned(), 1);\n-    map.insert(\"render-detail\".to_owned(), 1);\n-    map.insert(\"toggle-all-docs\".to_owned(), 1);\n-    map.insert(\"all-types\".to_owned(), 1);\n-    map.insert(\"default-settings\".to_owned(), 1);\n-    map.insert(\"rustdoc-vars\".to_owned(), 1);\n-    map.insert(\"sidebar-vars\".to_owned(), 1);\n-    map.insert(\"copy-path\".to_owned(), 1);\n-    map.insert(\"TOC\".to_owned(), 1);\n+    map.insert(\"mainThemeStyle\".into(), 1);\n+    map.insert(\"themeStyle\".into(), 1);\n+    map.insert(\"theme-picker\".into(), 1);\n+    map.insert(\"theme-choices\".into(), 1);\n+    map.insert(\"settings-menu\".into(), 1);\n+    map.insert(\"help-button\".into(), 1);\n+    map.insert(\"main-content\".into(), 1);\n+    map.insert(\"search\".into(), 1);\n+    map.insert(\"crate-search\".into(), 1);\n+    map.insert(\"render-detail\".into(), 1);\n+    map.insert(\"toggle-all-docs\".into(), 1);\n+    map.insert(\"all-types\".into(), 1);\n+    map.insert(\"default-settings\".into(), 1);\n+    map.insert(\"rustdoc-vars\".into(), 1);\n+    map.insert(\"sidebar-vars\".into(), 1);\n+    map.insert(\"copy-path\".into(), 1);\n+    map.insert(\"TOC\".into(), 1);\n     // This is the list of IDs used by rustdoc sections (but still generated by\n     // rustdoc).\n-    map.insert(\"fields\".to_owned(), 1);\n-    map.insert(\"variants\".to_owned(), 1);\n-    map.insert(\"implementors-list\".to_owned(), 1);\n-    map.insert(\"synthetic-implementors-list\".to_owned(), 1);\n-    map.insert(\"foreign-impls\".to_owned(), 1);\n-    map.insert(\"implementations\".to_owned(), 1);\n-    map.insert(\"trait-implementations\".to_owned(), 1);\n-    map.insert(\"synthetic-implementations\".to_owned(), 1);\n-    map.insert(\"blanket-implementations\".to_owned(), 1);\n-    map.insert(\"required-associated-types\".to_owned(), 1);\n-    map.insert(\"provided-associated-types\".to_owned(), 1);\n-    map.insert(\"provided-associated-consts\".to_owned(), 1);\n-    map.insert(\"required-associated-consts\".to_owned(), 1);\n-    map.insert(\"required-methods\".to_owned(), 1);\n-    map.insert(\"provided-methods\".to_owned(), 1);\n-    map.insert(\"implementors\".to_owned(), 1);\n-    map.insert(\"synthetic-implementors\".to_owned(), 1);\n-    map.insert(\"implementations-list\".to_owned(), 1);\n-    map.insert(\"trait-implementations-list\".to_owned(), 1);\n-    map.insert(\"synthetic-implementations-list\".to_owned(), 1);\n-    map.insert(\"blanket-implementations-list\".to_owned(), 1);\n-    map.insert(\"deref-methods\".to_owned(), 1);\n+    map.insert(\"fields\".into(), 1);\n+    map.insert(\"variants\".into(), 1);\n+    map.insert(\"implementors-list\".into(), 1);\n+    map.insert(\"synthetic-implementors-list\".into(), 1);\n+    map.insert(\"foreign-impls\".into(), 1);\n+    map.insert(\"implementations\".into(), 1);\n+    map.insert(\"trait-implementations\".into(), 1);\n+    map.insert(\"synthetic-implementations\".into(), 1);\n+    map.insert(\"blanket-implementations\".into(), 1);\n+    map.insert(\"required-associated-types\".into(), 1);\n+    map.insert(\"provided-associated-types\".into(), 1);\n+    map.insert(\"provided-associated-consts\".into(), 1);\n+    map.insert(\"required-associated-consts\".into(), 1);\n+    map.insert(\"required-methods\".into(), 1);\n+    map.insert(\"provided-methods\".into(), 1);\n+    map.insert(\"implementors\".into(), 1);\n+    map.insert(\"synthetic-implementors\".into(), 1);\n+    map.insert(\"implementations-list\".into(), 1);\n+    map.insert(\"trait-implementations-list\".into(), 1);\n+    map.insert(\"synthetic-implementations-list\".into(), 1);\n+    map.insert(\"blanket-implementations-list\".into(), 1);\n+    map.insert(\"deref-methods\".into(), 1);\n     map\n }\n \n impl IdMap {\n     pub fn new() -> Self {\n-        IdMap { map: init_id_map() }\n+        IdMap { map: DEFAULT_ID_MAP.clone() }\n     }\n \n     crate fn derive<S: AsRef<str> + ToString>(&mut self, candidate: S) -> String {\n@@ -1485,7 +1489,7 @@ impl IdMap {\n             }\n         };\n \n-        self.map.insert(id.clone(), 1);\n+        self.map.insert(id.clone().into(), 1);\n         id\n     }\n }"}]}