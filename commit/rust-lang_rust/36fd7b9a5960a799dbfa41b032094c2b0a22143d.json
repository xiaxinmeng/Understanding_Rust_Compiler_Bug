{"sha": "36fd7b9a5960a799dbfa41b032094c2b0a22143d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZmQ3YjlhNTk2MGE3OTlkYmZhNDFiMDMyMDk0YzJiMGEyMjE0M2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-29T09:56:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T09:56:22Z"}, "message": "Rollup merge of #67722 - petertodd:2019-improve-any-comment, r=Mark-Simulacrum\n\nMinor: note how Any is an unsafe trait in SAFETY comments\n\nMotivation: helpful to people like myself reading the standard library source to better understand how to use Any, especially if we do go ahead with https://github.com/rust-lang/rust/pull/67562 and make it an unsafe trait.", "tree": {"sha": "0f4de127f25ecbb8b162fa0a5b7cf0a06afded22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4de127f25ecbb8b162fa0a5b7cf0a06afded22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36fd7b9a5960a799dbfa41b032094c2b0a22143d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMVbHCRBK7hj4Ov3rIwAAdHIIAKuCAZ4erE1EvdLcPhU/mjD1\n4iGDm0sYotKjhxwlvHIpBeP2jUI6BnWxdTP77Q9PDum/lr5Mn0G08FZdW6JMo/Km\nENhFAkTeLk6TcTbZj0mDJaUejUDWw2ZNFTmAN2MQP16WpNzURbAfPL5+/nqc5av0\naeVtV6Gm7coX4mwH9HTgYbp2yz8mE806DbExu1trZV+XCdC4RNdQOSEKRWXJhiuc\natFRSP/SB1kZDMYO/Cq10IBm/CLLEupd9Vtnvbbom8sQZQeFgus6FcqRqkX5vj+r\neXeDCalIv/sJZsOLzrjUgEG8ZVb6mEbxehgVzmnoF43IYFI10JCqFRxyCNiH72U=\n=aQYh\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f4de127f25ecbb8b162fa0a5b7cf0a06afded22\nparent 343432a74d1b92e4d3e71de4271e68304e046da3\nparent f722964d00f9276b86777fab8db3fbfecd440ae7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1580291782 +0900\ncommitter GitHub <noreply@github.com> 1580291782 +0900\n\nRollup merge of #67722 - petertodd:2019-improve-any-comment, r=Mark-Simulacrum\n\nMinor: note how Any is an unsafe trait in SAFETY comments\n\nMotivation: helpful to people like myself reading the standard library source to better understand how to use Any, especially if we do go ahead with https://github.com/rust-lang/rust/pull/67562 and make it an unsafe trait.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36fd7b9a5960a799dbfa41b032094c2b0a22143d", "html_url": "https://github.com/rust-lang/rust/commit/36fd7b9a5960a799dbfa41b032094c2b0a22143d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36fd7b9a5960a799dbfa41b032094c2b0a22143d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "343432a74d1b92e4d3e71de4271e68304e046da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/343432a74d1b92e4d3e71de4271e68304e046da3", "html_url": "https://github.com/rust-lang/rust/commit/343432a74d1b92e4d3e71de4271e68304e046da3"}, {"sha": "f722964d00f9276b86777fab8db3fbfecd440ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f722964d00f9276b86777fab8db3fbfecd440ae7", "html_url": "https://github.com/rust-lang/rust/commit/f722964d00f9276b86777fab8db3fbfecd440ae7"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "97ef513cbcc63d14ad7bbca205f04f38f20a3213", "filename": "src/libcore/any.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36fd7b9a5960a799dbfa41b032094c2b0a22143d/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fd7b9a5960a799dbfa41b032094c2b0a22143d/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=36fd7b9a5960a799dbfa41b032094c2b0a22143d", "patch": "@@ -194,7 +194,9 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type\n+            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n+            // that check for memory safety because we have implemented Any for all types; no other\n+            // impls can exist as they would conflict with our impl.\n             unsafe { Some(&*(self as *const dyn Any as *const T)) }\n         } else {\n             None\n@@ -228,7 +230,9 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type\n+            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n+            // that check for memory safety because we have implemented Any for all types; no other\n+            // impls can exist as they would conflict with our impl.\n             unsafe { Some(&mut *(self as *mut dyn Any as *mut T)) }\n         } else {\n             None"}]}