{"sha": "62acf7f96def600de3239cb93b62d07e9b514276", "node_id": "C_kwDOAAsO6NoAKDYyYWNmN2Y5NmRlZjYwMGRlMzIzOWNiOTNiNjJkMDdlOWI1MTQyNzY", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-15T03:47:36Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-15T03:51:56Z"}, "message": "feedback", "tree": {"sha": "bdf103e7e71bd5a51cf3527f4acf6d5c5876c51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf103e7e71bd5a51cf3527f4acf6d5c5876c51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62acf7f96def600de3239cb93b62d07e9b514276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62acf7f96def600de3239cb93b62d07e9b514276", "html_url": "https://github.com/rust-lang/rust/commit/62acf7f96def600de3239cb93b62d07e9b514276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62acf7f96def600de3239cb93b62d07e9b514276/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f980f813e189b8568eab93311fcc4effa2cffec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f980f813e189b8568eab93311fcc4effa2cffec3", "html_url": "https://github.com/rust-lang/rust/commit/f980f813e189b8568eab93311fcc4effa2cffec3"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "bb1d9744e66fe068447885de77b80c62f789339a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62acf7f96def600de3239cb93b62d07e9b514276/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62acf7f96def600de3239cb93b62d07e9b514276/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=62acf7f96def600de3239cb93b62d07e9b514276", "patch": "@@ -371,14 +371,12 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n         let param_env = tcx.param_env(item_def_id);\n         for field in fields {\n             let field_ty = field.ty(tcx, substs);\n-            let (field_span, ty_span) =\n-                // We are currently checking the type this field came from, so it must be local.\n-                if let Node::Field(field) = tcx.hir().get_if_local(field.did).unwrap() {\n-                    (field.span, field.ty.span)\n-                } else {\n-                    unreachable!(\"mir field has to correspond to hir field\");\n-                };\n             if field_ty.needs_drop(tcx, param_env) {\n+                let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {\n+                    // We are currently checking the type this field came from, so it must be local.\n+                    Some(Node::Field(field)) => (field.span, field.ty.span),\n+                    _ => unreachable!(\"mir field has to correspond to hir field\"),\n+                };\n                 struct_span_err!(\n                     tcx.sess,\n                     field_span,\n@@ -387,7 +385,10 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                 )\n                 .multipart_suggestion_verbose(\n                     \"wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\",\n-                    vec![(ty_span, format!(\"std::mem::ManuallyDrop<{}>\", field_ty))],\n+                    vec![\n+                        (ty_span.shrink_to_lo(), format!(\"std::mem::ManuallyDrop<\")),\n+                        (ty_span.shrink_to_hi(), \">\".into()),\n+                    ],\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();"}, {"sha": "0967cb7ba8bd28496eb354928e22222250af39a2", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=62acf7f96def600de3239cb93b62d07e9b514276", "patch": "@@ -16,7 +16,7 @@ LL |     a: String,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++      +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/feature-gate-untagged_unions.rs:24:5\n@@ -27,7 +27,7 @@ LL |     a: T,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8edf4db441b9cf872a8b429367757277ed04ba4a", "filename": "src/test/ui/union/issue-41073.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr?ref=62acf7f96def600de3239cb93b62d07e9b514276", "patch": "@@ -7,7 +7,7 @@ LL |     a: A,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<A>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to previous error\n "}, {"sha": "65ca5fd931d670417865d75e1393d812be9081ec", "filename": "src/test/ui/union/union-custom-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr?ref=62acf7f96def600de3239cb93b62d07e9b514276", "patch": "@@ -7,7 +7,7 @@ LL |     bar: Bar,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     bar: std::mem::ManuallyDrop<Bar>,\n-   |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |          +++++++++++++++++++++++   +\n \n error: aborting due to previous error\n "}, {"sha": "f5e9681735c6f93272155b397e73b52b4a3ca570", "filename": "src/test/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=62acf7f96def600de3239cb93b62d07e9b514276", "patch": "@@ -7,7 +7,7 @@ LL |     a: String,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++      +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n@@ -18,7 +18,7 @@ LL |     a: S,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++ +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n@@ -29,7 +29,7 @@ LL |     a: T,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f5e9681735c6f93272155b397e73b52b4a3ca570", "filename": "src/test/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62acf7f96def600de3239cb93b62d07e9b514276/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=62acf7f96def600de3239cb93b62d07e9b514276", "patch": "@@ -7,7 +7,7 @@ LL |     a: String,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++      +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n@@ -18,7 +18,7 @@ LL |     a: S,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++ +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n@@ -29,7 +29,7 @@ LL |     a: T,\n help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n-   |        ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to 3 previous errors\n "}]}