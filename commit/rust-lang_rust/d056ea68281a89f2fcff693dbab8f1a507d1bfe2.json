{"sha": "d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNTZlYTY4MjgxYTg5ZjJmY2ZmNjkzZGJhYjhmMWE1MDdkMWJmZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-09T04:49:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-09T04:49:51Z"}, "message": "Auto merge of #4069 - mikerite:while_loop_test_split, r=phansch\n\nReorganize \"while loop\" tests\n\ncc #2038\n\nchangelog: none", "tree": {"sha": "3d1aa2c34c607b1a596c42b9e29cf5af50799398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1aa2c34c607b1a596c42b9e29cf5af50799398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "html_url": "https://github.com/rust-lang/rust/commit/d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341c96afd331195beeb001436535c1feb479ff9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/341c96afd331195beeb001436535c1feb479ff9d", "html_url": "https://github.com/rust-lang/rust/commit/341c96afd331195beeb001436535c1feb479ff9d"}, {"sha": "dcfe380de4821b2122c64a5d25553eb6ea714a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfe380de4821b2122c64a5d25553eb6ea714a20", "html_url": "https://github.com/rust-lang/rust/commit/dcfe380de4821b2122c64a5d25553eb6ea714a20"}], "stats": {"total": 494, "additions": 254, "deletions": 240}, "files": [{"sha": "6555c19ca6a26b5c79711eb925cd1d6b6a4cf9bb", "filename": "tests/ui/ice-360.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fice-360.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fice-360.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fice-360.rs?ref=d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "patch": "@@ -0,0 +1,12 @@\n+fn main() {}\n+\n+fn no_panic<T>(slice: &[T]) {\n+    let mut iter = slice.iter();\n+    loop {\n+        let _ = match iter.next() {\n+            Some(ele) => ele,\n+            None => break,\n+        };\n+        loop {}\n+    }\n+}"}, {"sha": "84e31eaf2e9f8d420fef2ea67486ce7dfc1ce32a", "filename": "tests/ui/ice-360.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fice-360.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fice-360.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fice-360.stderr?ref=d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "patch": "@@ -0,0 +1,24 @@\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/ice-360.rs:5:5\n+   |\n+LL | /     loop {\n+LL | |         let _ = match iter.next() {\n+LL | |             Some(ele) => ele,\n+LL | |             None => break,\n+LL | |         };\n+LL | |         loop {}\n+LL | |     }\n+   | |_____^ help: try: `while let Some(ele) = iter.next() { .. }`\n+   |\n+   = note: `-D clippy::while-let-loop` implied by `-D warnings`\n+\n+error: empty `loop {}` detected. You may want to either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n+  --> $DIR/ice-360.rs:10:9\n+   |\n+LL |         loop {}\n+   |         ^^^^^^^\n+   |\n+   = note: `-D clippy::empty-loop` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3ce699f551b209c122e9bc3eb3b59f3c9ce41698", "filename": "tests/ui/while_let_loop.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_loop.rs?ref=d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "patch": "@@ -0,0 +1,119 @@\n+#![warn(clippy::while_let_loop)]\n+\n+fn main() {\n+    let y = Some(true);\n+    loop {\n+        if let Some(_x) = y {\n+            let _v = 1;\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    #[allow(clippy::never_loop)]\n+    loop {\n+        // no error, break is not in else clause\n+        if let Some(_x) = y {\n+            let _v = 1;\n+        }\n+        break;\n+    }\n+\n+    loop {\n+        match y {\n+            Some(_x) => true,\n+            None => break,\n+        };\n+    }\n+\n+    loop {\n+        let x = match y {\n+            Some(x) => x,\n+            None => break,\n+        };\n+        let _x = x;\n+        let _str = \"foo\";\n+    }\n+\n+    loop {\n+        let x = match y {\n+            Some(x) => x,\n+            None => break,\n+        };\n+        {\n+            let _a = \"bar\";\n+        };\n+        {\n+            let _b = \"foobar\";\n+        }\n+    }\n+\n+    loop {\n+        // no error, else branch does something other than break\n+        match y {\n+            Some(_x) => true,\n+            _ => {\n+                let _z = 1;\n+                break;\n+            },\n+        };\n+    }\n+\n+    while let Some(x) = y {\n+        // no error, obviously\n+        println!(\"{}\", x);\n+    }\n+\n+    // #675, this used to have a wrong suggestion\n+    loop {\n+        let (e, l) = match \"\".split_whitespace().next() {\n+            Some(word) => (word.is_empty(), word.len()),\n+            None => break,\n+        };\n+\n+        let _ = (e, l);\n+    }\n+}\n+\n+fn issue771() {\n+    let mut a = 100;\n+    let b = Some(true);\n+    loop {\n+        if a > 10 {\n+            break;\n+        }\n+\n+        match b {\n+            Some(_) => a = 0,\n+            None => break,\n+        }\n+    }\n+}\n+\n+fn issue1017() {\n+    let r: Result<u32, u32> = Ok(42);\n+    let mut len = 1337;\n+\n+    loop {\n+        match r {\n+            Err(_) => len = 0,\n+            Ok(length) => {\n+                len = length;\n+                break;\n+            },\n+        }\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn issue1948() {\n+    // should not trigger clippy::while_let_loop lint because break passes an expression\n+    let a = Some(10);\n+    let b = loop {\n+        if let Some(c) = a {\n+            break Some(c);\n+        } else {\n+            break None;\n+        }\n+    };\n+}"}, {"sha": "13dd0ee224c10e74ca3f6a4254dcef94338c5c7e", "filename": "tests/ui/while_let_loop.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_loop.stderr?ref=d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "patch": "@@ -0,0 +1,63 @@\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_let_loop.rs:5:5\n+   |\n+LL | /     loop {\n+LL | |         if let Some(_x) = y {\n+LL | |             let _v = 1;\n+LL | |         } else {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^ help: try: `while let Some(_x) = y { .. }`\n+   |\n+   = note: `-D clippy::while-let-loop` implied by `-D warnings`\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_let_loop.rs:22:5\n+   |\n+LL | /     loop {\n+LL | |         match y {\n+LL | |             Some(_x) => true,\n+LL | |             None => break,\n+LL | |         };\n+LL | |     }\n+   | |_____^ help: try: `while let Some(_x) = y { .. }`\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_let_loop.rs:29:5\n+   |\n+LL | /     loop {\n+LL | |         let x = match y {\n+LL | |             Some(x) => x,\n+LL | |             None => break,\n+...  |\n+LL | |         let _str = \"foo\";\n+LL | |     }\n+   | |_____^ help: try: `while let Some(x) = y { .. }`\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_let_loop.rs:38:5\n+   |\n+LL | /     loop {\n+LL | |         let x = match y {\n+LL | |             Some(x) => x,\n+LL | |             None => break,\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^ help: try: `while let Some(x) = y { .. }`\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_let_loop.rs:68:5\n+   |\n+LL | /     loop {\n+LL | |         let (e, l) = match \"\".split_whitespace().next() {\n+LL | |             Some(word) => (word.is_empty(), word.len()),\n+LL | |             None => break,\n+...  |\n+LL | |         let _ = (e, l);\n+LL | |     }\n+   | |_____^ help: try: `while let Some(word) = \"\".split_whitespace().next() { .. }`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "01838ee202ece0476228a889d2616b1789f736d4", "filename": "tests/ui/while_let_on_iterator.rs", "status": "renamed", "additions": 2, "deletions": 125, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "patch": "@@ -1,73 +1,7 @@\n-#![warn(clippy::while_let_loop, clippy::empty_loop, clippy::while_let_on_iterator)]\n-#![allow(dead_code, clippy::never_loop, unused, clippy::cognitive_complexity)]\n+#![warn(clippy::while_let_on_iterator)]\n+#![allow(clippy::never_loop, clippy::cognitive_complexity)]\n \n fn main() {\n-    let y = Some(true);\n-    loop {\n-        if let Some(_x) = y {\n-            let _v = 1;\n-        } else {\n-            break;\n-        }\n-    }\n-    loop {\n-        // no error, break is not in else clause\n-        if let Some(_x) = y {\n-            let _v = 1;\n-        }\n-        break;\n-    }\n-    loop {\n-        match y {\n-            Some(_x) => true,\n-            None => break,\n-        };\n-    }\n-    loop {\n-        let x = match y {\n-            Some(x) => x,\n-            None => break,\n-        };\n-        let _x = x;\n-        let _str = \"foo\";\n-    }\n-    loop {\n-        let x = match y {\n-            Some(x) => x,\n-            None => break,\n-        };\n-        {\n-            let _a = \"bar\";\n-        };\n-        {\n-            let _b = \"foobar\";\n-        }\n-    }\n-    loop {\n-        // no error, else branch does something other than break\n-        match y {\n-            Some(_x) => true,\n-            _ => {\n-                let _z = 1;\n-                break;\n-            },\n-        };\n-    }\n-    while let Some(x) = y {\n-        // no error, obviously\n-        println!(\"{}\", x);\n-    }\n-\n-    // #675, this used to have a wrong suggestion\n-    loop {\n-        let (e, l) = match \"\".split_whitespace().next() {\n-            Some(word) => (word.is_empty(), word.len()),\n-            None => break,\n-        };\n-\n-        let _ = (e, l);\n-    }\n-\n     let mut iter = 1..20;\n     while let Option::Some(x) = iter.next() {\n         println!(\"{}\", x);\n@@ -116,36 +50,6 @@ fn main() {\n     }\n }\n \n-// regression test (#360)\n-// this should not panic\n-// it's ok if further iterations of the lint\n-// cause this function to trigger it\n-fn no_panic<T>(slice: &[T]) {\n-    let mut iter = slice.iter();\n-    loop {\n-        let _ = match iter.next() {\n-            Some(ele) => ele,\n-            None => break,\n-        };\n-        loop {}\n-    }\n-}\n-\n-fn issue1017() {\n-    let r: Result<u32, u32> = Ok(42);\n-    let mut len = 1337;\n-\n-    loop {\n-        match r {\n-            Err(_) => len = 0,\n-            Ok(length) => {\n-                len = length;\n-                break;\n-            },\n-        }\n-    }\n-}\n-\n // Issue #1188\n fn refutable() {\n     let a = [42, 1337];\n@@ -194,18 +98,6 @@ fn nested_loops() {\n     }\n }\n \n-fn issue1948() {\n-    // should not trigger clippy::while_let_loop lint because break passes an expression\n-    let a = Some(10);\n-    let b = loop {\n-        if let Some(c) = a {\n-            break Some(c);\n-        } else {\n-            break None;\n-        }\n-    };\n-}\n-\n fn issue1121() {\n     use std::collections::HashSet;\n     let mut values = HashSet::new();\n@@ -238,18 +130,3 @@ fn issue3670() {\n         let _ = elem.or_else(|| *iter.next()?);\n     }\n }\n-\n-fn issue771() {\n-    let mut a = 100;\n-    let b = Some(true);\n-    loop {\n-        if a > 10 {\n-            break;\n-        }\n-\n-        match b {\n-            Some(_) => a = 0,\n-            None => break,\n-        }\n-    }\n-}", "previous_filename": "tests/ui/while_loop.rs"}, {"sha": "03d2ef550668404e012118767d155707aeaffdc3", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d056ea68281a89f2fcff693dbab8f1a507d1bfe2/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=d056ea68281a89f2fcff693dbab8f1a507d1bfe2", "patch": "@@ -0,0 +1,34 @@\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:6:33\n+   |\n+LL |     while let Option::Some(x) = iter.next() {\n+   |                                 ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n+   |\n+   = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:11:25\n+   |\n+LL |     while let Some(x) = iter.next() {\n+   |                         ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:16:25\n+   |\n+LL |     while let Some(_) = iter.next() {}\n+   |                         ^^^^^^^^^^^ help: try: `for _ in iter { .. }`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:95:29\n+   |\n+LL |         while let Some(v) = y.next() {\n+   |                             ^^^^^^^^ help: try: `for v in y { .. }`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:120:26\n+   |\n+LL |     while let Some(..) = values.iter().next() {\n+   |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in values.iter() { .. }`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "4c27ea0b9ba32237532b9982578676c8589a1e59", "filename": "tests/ui/while_loop.stderr", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/341c96afd331195beeb001436535c1feb479ff9d/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/341c96afd331195beeb001436535c1feb479ff9d/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=341c96afd331195beeb001436535c1feb479ff9d", "patch": "@@ -1,115 +0,0 @@\n-error: this loop could be written as a `while let` loop\n-  --> $DIR/while_loop.rs:6:5\n-   |\n-LL | /     loop {\n-LL | |         if let Some(_x) = y {\n-LL | |             let _v = 1;\n-LL | |         } else {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^ help: try: `while let Some(_x) = y { .. }`\n-   |\n-   = note: `-D clippy::while-let-loop` implied by `-D warnings`\n-\n-error: this loop could be written as a `while let` loop\n-  --> $DIR/while_loop.rs:20:5\n-   |\n-LL | /     loop {\n-LL | |         match y {\n-LL | |             Some(_x) => true,\n-LL | |             None => break,\n-LL | |         };\n-LL | |     }\n-   | |_____^ help: try: `while let Some(_x) = y { .. }`\n-\n-error: this loop could be written as a `while let` loop\n-  --> $DIR/while_loop.rs:26:5\n-   |\n-LL | /     loop {\n-LL | |         let x = match y {\n-LL | |             Some(x) => x,\n-LL | |             None => break,\n-...  |\n-LL | |         let _str = \"foo\";\n-LL | |     }\n-   | |_____^ help: try: `while let Some(x) = y { .. }`\n-\n-error: this loop could be written as a `while let` loop\n-  --> $DIR/while_loop.rs:34:5\n-   |\n-LL | /     loop {\n-LL | |         let x = match y {\n-LL | |             Some(x) => x,\n-LL | |             None => break,\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____^ help: try: `while let Some(x) = y { .. }`\n-\n-error: this loop could be written as a `while let` loop\n-  --> $DIR/while_loop.rs:62:5\n-   |\n-LL | /     loop {\n-LL | |         let (e, l) = match \"\".split_whitespace().next() {\n-LL | |             Some(word) => (word.is_empty(), word.len()),\n-LL | |             None => break,\n-...  |\n-LL | |         let _ = (e, l);\n-LL | |     }\n-   | |_____^ help: try: `while let Some(word) = \"\".split_whitespace().next() { .. }`\n-\n-error: this loop could be written as a `for` loop\n-  --> $DIR/while_loop.rs:72:33\n-   |\n-LL |     while let Option::Some(x) = iter.next() {\n-   |                                 ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n-   |\n-   = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n-\n-error: this loop could be written as a `for` loop\n-  --> $DIR/while_loop.rs:77:25\n-   |\n-LL |     while let Some(x) = iter.next() {\n-   |                         ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n-\n-error: this loop could be written as a `for` loop\n-  --> $DIR/while_loop.rs:82:25\n-   |\n-LL |     while let Some(_) = iter.next() {}\n-   |                         ^^^^^^^^^^^ help: try: `for _ in iter { .. }`\n-\n-error: this loop could be written as a `while let` loop\n-  --> $DIR/while_loop.rs:125:5\n-   |\n-LL | /     loop {\n-LL | |         let _ = match iter.next() {\n-LL | |             Some(ele) => ele,\n-LL | |             None => break,\n-LL | |         };\n-LL | |         loop {}\n-LL | |     }\n-   | |_____^ help: try: `while let Some(ele) = iter.next() { .. }`\n-\n-error: empty `loop {}` detected. You may want to either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n-  --> $DIR/while_loop.rs:130:9\n-   |\n-LL |         loop {}\n-   |         ^^^^^^^\n-   |\n-   = note: `-D clippy::empty-loop` implied by `-D warnings`\n-\n-error: this loop could be written as a `for` loop\n-  --> $DIR/while_loop.rs:191:29\n-   |\n-LL |         while let Some(v) = y.next() {\n-   |                             ^^^^^^^^ help: try: `for v in y { .. }`\n-\n-error: this loop could be written as a `for` loop\n-  --> $DIR/while_loop.rs:228:26\n-   |\n-LL |     while let Some(..) = values.iter().next() {\n-   |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in values.iter() { .. }`\n-\n-error: aborting due to 12 previous errors\n-"}]}