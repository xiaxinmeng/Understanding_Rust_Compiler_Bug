{"sha": "77b70fcfd432a383243cd70e177b2bb30751da94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YjcwZmNmZDQzMmEzODMyNDNjZDcwZTE3N2IyYmIzMDc1MWRhOTQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-09T10:22:13Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-09T10:22:13Z"}, "message": "Merge #270\n\n270: Checks r=matklad a=matklad\n\nI see occasional panics when binding sources. Hopefully this assertions will make it clear where do the panics come from/\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cde35c9e5218afd721a159f46c768641b496dd63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cde35c9e5218afd721a159f46c768641b496dd63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b70fcfd432a383243cd70e177b2bb30751da94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b70fcfd432a383243cd70e177b2bb30751da94", "html_url": "https://github.com/rust-lang/rust/commit/77b70fcfd432a383243cd70e177b2bb30751da94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b70fcfd432a383243cd70e177b2bb30751da94/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "904438e993b4cc3c1d9269a44436c1b112de16c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/904438e993b4cc3c1d9269a44436c1b112de16c0", "html_url": "https://github.com/rust-lang/rust/commit/904438e993b4cc3c1d9269a44436c1b112de16c0"}, {"sha": "159525b120121b217f2831869b6ea9a3cf9fe554", "url": "https://api.github.com/repos/rust-lang/rust/commits/159525b120121b217f2831869b6ea9a3cf9fe554", "html_url": "https://github.com/rust-lang/rust/commit/159525b120121b217f2831869b6ea9a3cf9fe554"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "1f69a91b24c979b5523a9e270e072cc0a58e90ef", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -697,6 +697,7 @@ dependencies = [\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1103,6 +1104,14 @@ dependencies = [\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"threadpool\"\n+version = \"1.7.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"time\"\n version = \"0.1.40\"\n@@ -1414,6 +1423,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8009d7bdbd896a7e09b595f8f9325a19047fc708653e60d0895202b82135048f\"\n \"checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n+\"checksum threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2f0c90a5f3459330ac8bc0d2f879c693bb7a2f59689c1083fc4ef83834da865\"\n \"checksum time 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d825be0eb33fda1a7e68012d51e9c7f451dc1a69391e7fdc197060bb8c56667b\"\n \"checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169\"\n \"checksum ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71a9c5b1fe77426cf144cc30e49e955270f5086e31a6441dfa8b32efc09b9d77\""}, {"sha": "f50b922af219ffaad6f8465fd8e666efff30455d", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -110,16 +110,32 @@ pub struct SourceItemId {\n }\n \n /// Maps item's `SyntaxNode`s to `SourceFileItemId` and back.\n-#[derive(Debug, PartialEq, Eq, Default)]\n+#[derive(Debug, PartialEq, Eq)]\n pub struct SourceFileItems {\n+    file_id: FileId,\n     arena: Arena<SyntaxNode>,\n }\n \n impl SourceFileItems {\n+    fn new(file_id: FileId) -> SourceFileItems {\n+        SourceFileItems {\n+            file_id,\n+            arena: Arena::default(),\n+        }\n+    }\n+\n     fn alloc(&mut self, item: SyntaxNode) -> SourceFileItemId {\n         self.arena.alloc(item)\n     }\n-    pub fn id_of(&self, item: SyntaxNodeRef) -> SourceFileItemId {\n+    pub fn id_of(&self, file_id: FileId, item: SyntaxNodeRef) -> SourceFileItemId {\n+        assert_eq!(\n+            self.file_id, file_id,\n+            \"SourceFileItems: wrong file, expected {:?}, got {:?}\",\n+            self.file_id, file_id\n+        );\n+        self.id_of_unchecked(item)\n+    }\n+    fn id_of_unchecked(&self, item: SyntaxNodeRef) -> SourceFileItemId {\n         let (id, _item) = self\n             .arena\n             .iter()"}, {"sha": "e7a49f83abe781873b15a3533582bf83388f23af", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -280,7 +280,7 @@ impl ModuleSource {\n     ) -> ModuleSource {\n         assert!(!m.has_semi());\n         let file_items = db.file_items(file_id);\n-        let item_id = file_items.id_of(m.syntax());\n+        let item_id = file_items.id_of(file_id, m.syntax());\n         ModuleSource::new(file_id, item_id)\n     }\n "}, {"sha": "6511359d08b321a7021d52e0ff05677f0c7f2750", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -168,7 +168,7 @@ impl InputModuleItems {\n     }\n \n     fn add_use_item(&mut self, file_items: &SourceFileItems, item: ast::UseItem) {\n-        let file_item_id = file_items.id_of(item.syntax());\n+        let file_item_id = file_items.id_of_unchecked(item.syntax());\n         let start_offset = item.syntax().range().start();\n         Path::expand_use_item(item, |path, range| {\n             let kind = match range {\n@@ -188,7 +188,7 @@ impl ModuleItem {\n         let name = item.name()?.text();\n         let kind = item.syntax().kind();\n         let vis = Vis::Other;\n-        let id = file_items.id_of(item.syntax());\n+        let id = file_items.id_of_unchecked(item.syntax());\n         let res = ModuleItem {\n             id,\n             name,"}, {"sha": "bb4457d072e7c44221ad8da4df6f6afd599f5657", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -36,7 +36,7 @@ pub(super) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n }\n \n pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {\n-    let mut res = SourceFileItems::default();\n+    let mut res = SourceFileItems::new(file_id);\n     let source_file = db.source_file(file_id);\n     res.alloc(source_file.syntax().owned());\n     let source_file = source_file.borrowed();"}, {"sha": "0c16ccc243d6c033b76b73dafd0ec8ed6955b959", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -75,7 +75,7 @@ pub fn function_from_source(\n ) -> Cancelable<Option<Function>> {\n     let module = ctry!(module_from_child_node(db, file_id, fn_def.syntax())?);\n     let file_items = db.file_items(file_id);\n-    let item_id = file_items.id_of(fn_def.syntax());\n+    let item_id = file_items.id_of(file_id, fn_def.syntax());\n     let source_item_id = SourceItemId { file_id, item_id };\n     let def_loc = DefLoc {\n         kind: DefKind::Function,"}, {"sha": "5ee218b6b997622c2ca4a0636748c047dd334b7d", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -6,6 +6,7 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n rayon = \"1.0.2\"\n+threadpool = \"1.7.1\"\n relative-path = \"0.4.0\"\n failure = \"0.1.2\"\n failure_derive = \"0.1.2\""}, {"sha": "a01eeff881fb37f46bb9356776d850b2cc899030", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b70fcfd432a383243cd70e177b2bb30751da94/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=77b70fcfd432a383243cd70e177b2bb30751da94", "patch": "@@ -9,7 +9,8 @@ use gen_lsp_server::{\n };\n use languageserver_types::NumberOrString;\n use ra_analysis::{Canceled, FileId, LibraryData};\n-use rayon::{self, ThreadPool};\n+use rayon;\n+use threadpool::ThreadPool;\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n use failure::{format_err, bail};\n@@ -54,11 +55,7 @@ pub fn main_loop(\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n-    let pool = rayon::ThreadPoolBuilder::new()\n-        .num_threads(4)\n-        .panic_handler(|_| log::error!(\"thread panicked :(\"))\n-        .build()\n-        .unwrap();\n+    let pool = ThreadPool::new(8);\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (fs_worker, fs_watcher) = vfs::roots_loader();\n     let (ws_worker, ws_watcher) = workspace_loader();\n@@ -155,7 +152,7 @@ fn main_loop_inner(\n                 } else {\n                     let (files, resolver) = state.events_to_files(events);\n                     let sender = libdata_sender.clone();\n-                    pool.spawn(move || {\n+                    pool.execute(move || {\n                         let start = ::std::time::Instant::now();\n                         log::info!(\"indexing {} ... \", root.display());\n                         let data = LibraryData::prepare(files, resolver);\n@@ -402,7 +399,7 @@ impl<'a> PoolDispatcher<'a> {\n             Ok((id, params)) => {\n                 let world = self.world.snapshot();\n                 let sender = self.sender.clone();\n-                self.pool.spawn(move || {\n+                self.pool.execute(move || {\n                     let resp = match f(world, params) {\n                         Ok(resp) => RawResponse::ok::<R>(id, &resp),\n                         Err(e) => match e.downcast::<LspError>() {\n@@ -452,7 +449,7 @@ fn update_file_notifications_on_threadpool(\n     sender: Sender<Task>,\n     subscriptions: Vec<FileId>,\n ) {\n-    pool.spawn(move || {\n+    pool.execute(move || {\n         for file_id in subscriptions {\n             match handlers::publish_diagnostics(&world, file_id) {\n                 Err(e) => {"}]}