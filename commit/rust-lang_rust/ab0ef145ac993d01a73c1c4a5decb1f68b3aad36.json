{"sha": "ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMGVmMTQ1YWM5OTNkMDFhNzNjMWM0YTVkZWNiMWY2OGIzYWFkMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-24T02:08:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-24T02:08:22Z"}, "message": "Auto merge of #48482 - davidtwco:issue-47184, r=nikomatsakis\n\nNLL should identify and respect the lifetime annotations that the user wrote\n\nPart of #47184.\n\nr? @nikomatsakis", "tree": {"sha": "c8fd55cdca02993e94e4b255c2d0b8e2d1bffce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8fd55cdca02993e94e4b255c2d0b8e2d1bffce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "html_url": "https://github.com/rust-lang/rust/commit/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be5d360cd8a9338d1408b3998874313240db395", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be5d360cd8a9338d1408b3998874313240db395", "html_url": "https://github.com/rust-lang/rust/commit/4be5d360cd8a9338d1408b3998874313240db395"}, {"sha": "4161ae747740e9d61426d26da3e9f3f74fbabaca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4161ae747740e9d61426d26da3e9f3f74fbabaca", "html_url": "https://github.com/rust-lang/rust/commit/4161ae747740e9d61426d26da3e9f3f74fbabaca"}], "stats": {"total": 391, "additions": 358, "deletions": 33}, "files": [{"sha": "c73f171806e42510e766cc4f347143b4effe9f8a", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -277,6 +277,10 @@ for mir::StatementKind<'gcx> {\n                 op.hash_stable(hcx, hasher);\n                 places.hash_stable(hcx, hasher);\n             }\n+            mir::StatementKind::UserAssertTy(ref c_ty, ref local) => {\n+                c_ty.hash_stable(hcx, hasher);\n+                local.hash_stable(hcx, hasher);\n+            }\n             mir::StatementKind::Nop => {}\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 asm.hash_stable(hcx, hasher);"}, {"sha": "debddd708ea22bd3e0f69979739b0aaa5df3c608", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -33,6 +33,7 @@\n \n use infer::{InferCtxt, InferOk, InferResult, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::Idx;\n+use serialize::UseSpecializedDecodable;\n use std::fmt::Debug;\n use std::ops::Index;\n use syntax::codemap::Span;\n@@ -49,14 +50,16 @@ use rustc_data_structures::fx::FxHashMap;\n /// A \"canonicalized\" type `V` is one where all free inference\n /// variables have been rewriten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct Canonical<'gcx, V> {\n     pub variables: CanonicalVarInfos<'gcx>,\n     pub value: V,\n }\n \n pub type CanonicalVarInfos<'gcx> = &'gcx Slice<CanonicalVarInfo>;\n \n+impl<'gcx> UseSpecializedDecodable for CanonicalVarInfos<'gcx> { }\n+\n /// A set of values corresponding to the canonical variables from some\n /// `Canonical`. You can give these values to\n /// `canonical_value.substitute` to substitute them into the canonical\n@@ -69,7 +72,7 @@ pub type CanonicalVarInfos<'gcx> = &'gcx Slice<CanonicalVarInfo>;\n /// You can also use `infcx.fresh_inference_vars_for_canonical_vars`\n /// to get back a `CanonicalVarValues` containing fresh inference\n /// variables.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<CanonicalVar, Kind<'tcx>>,\n }\n@@ -78,15 +81,15 @@ pub struct CanonicalVarValues<'tcx> {\n /// canonical value. This is sufficient information for code to create\n /// a copy of the canonical value in some other inference context,\n /// with fresh inference variables replacing the canonical values.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct CanonicalVarInfo {\n     pub kind: CanonicalVarKind,\n }\n \n /// Describes the \"kind\" of the canonical variable. This is a \"kind\"\n /// in the type-theory sense of the term -- i.e., a \"meta\" type system\n /// that analyzes type-like values.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub enum CanonicalVarKind {\n     /// Some kind of type inference variable.\n     Ty(CanonicalTyVarKind),\n@@ -100,7 +103,7 @@ pub enum CanonicalVarKind {\n /// 22.) can only be instantiated with integral/float types (e.g.,\n /// usize or f32). In order to faithfully reproduce a type, we need to\n /// know what set of types a given type variable can be unified with.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub enum CanonicalTyVarKind {\n     /// General type variable `?T` that can be unified with arbitrary types.\n     General,\n@@ -855,11 +858,14 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n }\n \n CloneTypeFoldableAndLiftImpls! {\n+    ::infer::canonical::Certainty,\n+    ::infer::canonical::CanonicalVarInfo,\n+    ::infer::canonical::CanonicalVarKind,\n+}\n+\n+CloneTypeFoldableImpls! {\n     for <'tcx> {\n-        ::infer::canonical::Certainty,\n-        ::infer::canonical::CanonicalVarInfo,\n         ::infer::canonical::CanonicalVarInfos<'tcx>,\n-        ::infer::canonical::CanonicalVarKind,\n     }\n }\n \n@@ -870,6 +876,13 @@ BraceStructTypeFoldableImpl! {\n     } where C: TypeFoldable<'tcx>\n }\n \n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx, T> Lift<'tcx> for Canonical<'a, T> {\n+        type Lifted = Canonical<'tcx, T::Lifted>;\n+        variables, value\n+    } where T: Lift<'tcx>\n+}\n+\n impl<'tcx> CanonicalVarValues<'tcx> {\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Kind<'tcx>> + 'a {\n         self.var_values.iter().cloned()"}, {"sha": "9ed4e6a8e00ae5e3c7bc325362c6c9288fe1eedc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -27,7 +27,7 @@ use hir::def_id::DefId;\n use mir::visit::MirVisitable;\n use mir::interpret::{Value, PrimVal};\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n+use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::TypeAndMut;\n use util::ppaux;\n@@ -1253,6 +1253,23 @@ pub enum StatementKind<'tcx> {\n     /// (The starting point(s) arise implicitly from borrows.)\n     EndRegion(region::Scope),\n \n+    /// Encodes a user's type assertion. These need to be preserved intact so that NLL can respect\n+    /// them. For example:\n+    ///\n+    ///     let (a, b): (T, U) = y;\n+    ///\n+    /// Here we would insert a `UserAssertTy<(T, U)>(y)` instruction to check that the type of `y`\n+    /// is the right thing.\n+    ///\n+    /// `CanonicalTy` is used to capture \"inference variables\" from the user's types. For example:\n+    ///\n+    ///     let x: Vec<_> = ...;\n+    ///     let y: &u32 = ...;\n+    ///\n+    /// would result in `Vec<?0>` and `&'?0 u32` respectively (where `?0` is a canonicalized\n+    /// variable).\n+    UserAssertTy(CanonicalTy<'tcx>, Local),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -1324,6 +1341,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n             InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)\n             },\n+            UserAssertTy(ref c_ty, ref local) => write!(fmt, \"UserAssertTy({:?}, {:?})\",\n+                                                        c_ty, local),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }\n@@ -2184,6 +2203,7 @@ EnumTypeFoldableImpl! {\n         (StatementKind::InlineAsm) { asm, outputs, inputs },\n         (StatementKind::Validate)(a, b),\n         (StatementKind::EndRegion)(a),\n+        (StatementKind::UserAssertTy)(a, b),\n         (StatementKind::Nop),\n     }\n }"}, {"sha": "a3fdb6f73abb0e97f13c49244a33f39fa16ff7d3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::subst::Substs;\n-use ty::{ClosureSubsts, Region, Ty, GeneratorInterior};\n+use ty::{CanonicalTy, ClosureSubsts, Region, Ty, GeneratorInterior};\n use mir::*;\n use syntax_pos::Span;\n \n@@ -144,6 +144,13 @@ macro_rules! make_mir_visitor {\n                 self.super_operand(operand, location);\n             }\n \n+            fn visit_user_assert_ty(&mut self,\n+                                    c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                    local: & $($mutability)* Local,\n+                                    location: Location) {\n+                self.super_user_assert_ty(c_ty, local, location);\n+            }\n+\n             fn visit_place(&mut self,\n                             place: & $($mutability)* Place<'tcx>,\n                             context: PlaceContext<'tcx>,\n@@ -376,6 +383,10 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(input, location);\n                         }\n                     }\n+                    StatementKind::UserAssertTy(ref $($mutability)* c_ty,\n+                                                ref $($mutability)* local) => {\n+                        self.visit_user_assert_ty(c_ty, local, location);\n+                    }\n                     StatementKind::Nop => {}\n                 }\n             }\n@@ -619,6 +630,13 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n+            fn super_user_assert_ty(&mut self,\n+                                    _c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                    local: & $($mutability)* Local,\n+                                    location: Location) {\n+                self.visit_local(local, PlaceContext::Validate, location);\n+            }\n+\n             fn super_place(&mut self,\n                             place: & $($mutability)* Place<'tcx>,\n                             context: PlaceContext<'tcx>,"}, {"sha": "d24da1ff7c8e50f8a08e48a9636b50a45eff2fce", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -1251,6 +1251,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"choose which RELRO level to use\"),\n     nll: bool = (false, parse_bool, [UNTRACKED],\n                  \"run the non-lexical lifetimes MIR pass\"),\n+    disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n+        \"disable user provided type assertion in NLL\"),\n     trans_time_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"generate a graphical HTML report of time spent in trans and LLVM\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "4e15f0711a5aa2a6b88bc71cde1635b801215117", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -17,6 +17,7 @@\n // persisting to incr. comp. caches.\n \n use hir::def_id::{DefId, CrateNum};\n+use infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n@@ -239,6 +240,19 @@ pub fn decode_existential_predicate_slice<'a, 'tcx, D>(decoder: &mut D)\n               .mk_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n+#[inline]\n+pub fn decode_canonical_var_infos<'a, 'tcx, D>(decoder: &mut D)\n+    -> Result<CanonicalVarInfos<'tcx>, D::Error>\n+    where D: TyDecoder<'a, 'tcx>,\n+          'tcx: 'a,\n+{\n+    let len = decoder.read_usize()?;\n+    let interned: Result<Vec<CanonicalVarInfo>, _> = (0..len).map(|_| Decodable::decode(decoder))\n+                                                             .collect();\n+    Ok(decoder.tcx()\n+              .intern_canonical_var_infos(interned?.as_slice()))\n+}\n+\n #[inline]\n pub fn decode_const<'a, 'tcx, D>(decoder: &mut D)\n                                  -> Result<&'tcx ty::Const<'tcx>, D::Error>\n@@ -262,6 +276,7 @@ macro_rules! implement_ty_decoder {\n     ($DecoderName:ident <$($typaram:tt),*>) => {\n         mod __ty_decoder_impl {\n             use super::$DecoderName;\n+            use $crate::infer::canonical::CanonicalVarInfos;\n             use $crate::ty;\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::Substs;\n@@ -364,6 +379,14 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n+            impl<$($typaram),*> SpecializedDecoder<CanonicalVarInfos<'tcx>>\n+                for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self)\n+                    -> Result<CanonicalVarInfos<'tcx>, Self::Error> {\n+                    decode_canonical_var_infos(self)\n+                }\n+            }\n+\n             impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::Const<'tcx>>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {"}, {"sha": "460593d9cb4fa3e6845a961662508ae3e5c31459", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -48,6 +48,7 @@ use ty::layout::{LayoutDetails, TargetDataLayout};\n use ty::maps;\n use ty::steal::Steal;\n use ty::BindingMode;\n+use ty::CanonicalTy;\n use util::nodemap::{NodeMap, DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n@@ -344,6 +345,10 @@ pub struct TypeckTables<'tcx> {\n     /// method calls, including those of overloaded operators.\n     type_dependent_defs: ItemLocalMap<Def>,\n \n+    /// Stores the canonicalized types provided by the user. See also `UserAssertTy` statement in\n+    /// MIR.\n+    user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n+\n     /// Stores the types for various nodes in the AST.  Note that this table\n     /// is not guaranteed to be populated until after typeck.  See\n     /// typeck::check::fn_ctxt for details.\n@@ -420,6 +425,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         TypeckTables {\n             local_id_root,\n             type_dependent_defs: ItemLocalMap(),\n+            user_provided_tys: ItemLocalMap(),\n             node_types: ItemLocalMap(),\n             node_substs: ItemLocalMap(),\n             adjustments: ItemLocalMap(),\n@@ -461,6 +467,20 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n+    pub fn user_provided_tys(&self) -> LocalTableInContext<CanonicalTy<'tcx>> {\n+        LocalTableInContext {\n+            local_id_root: self.local_id_root,\n+            data: &self.user_provided_tys\n+        }\n+    }\n+\n+    pub fn user_provided_tys_mut(&mut self) -> LocalTableInContextMut<CanonicalTy<'tcx>> {\n+        LocalTableInContextMut {\n+            local_id_root: self.local_id_root,\n+            data: &mut self.user_provided_tys\n+        }\n+    }\n+\n     pub fn node_types(&self) -> LocalTableInContext<Ty<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n@@ -685,6 +705,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n         let ty::TypeckTables {\n             local_id_root,\n             ref type_dependent_defs,\n+            ref user_provided_tys,\n             ref node_types,\n             ref node_substs,\n             ref adjustments,\n@@ -704,6 +725,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n             type_dependent_defs.hash_stable(hcx, hasher);\n+            user_provided_tys.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n             adjustments.hash_stable(hcx, hasher);\n@@ -1637,6 +1659,24 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Slice<Predicate<'a>> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for &'a Slice<CanonicalVarInfo> {\n+    type Lifted = &'tcx Slice<CanonicalVarInfo>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        if self.len() == 0 {\n+            return Some(Slice::empty());\n+        }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n+        }\n+        // Also try in the global tcx if we're not that.\n+        if !tcx.is_global() {\n+            self.lift_to_tcx(tcx.global_tcx())\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n pub mod tls {\n     use super::{CtxtInterners, GlobalCtxt, TyCtxt};\n "}, {"sha": "e1925d964b31e5a6e9e8486d8df3eb629f872c20", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -21,6 +21,7 @@ use hir::map::DefPathData;\n use hir::svh::Svh;\n use ich::Fingerprint;\n use ich::StableHashingContext;\n+use infer::canonical::{Canonical, Canonicalize};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -554,6 +555,17 @@ pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}\n \n+pub type CanonicalTy<'gcx> = Canonical<'gcx, Ty<'gcx>>;\n+\n+impl <'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for Ty<'tcx> {\n+    type Canonicalized = CanonicalTy<'gcx>;\n+\n+    fn intern(_gcx: TyCtxt<'_, 'gcx, 'gcx>,\n+              value: Canonical<'gcx, Self::Lifted>) -> Self::Canonicalized {\n+        value\n+    }\n+}\n+\n /// A wrapper for slices with the additional invariant\n /// that the slice is interned and no other slice with\n /// the same contents can exist in the same context."}, {"sha": "305df37466d02a9aa724f8c722012e199dabb231", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -392,11 +392,13 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 // ignored when consuming results (update to\n                 // flow_state already handled).\n             }\n-            StatementKind::Nop | StatementKind::Validate(..) | StatementKind::StorageLive(..) => {\n-                // `Nop`, `Validate`, and `StorageLive` are irrelevant\n+            StatementKind::Nop |\n+            StatementKind::UserAssertTy(..) |\n+            StatementKind::Validate(..) |\n+            StatementKind::StorageLive(..) => {\n+                // `Nop`, `UserAssertTy`, `Validate`, and `StorageLive` are irrelevant\n                 // to borrow check.\n             }\n-\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     ContextKind::StorageDead.new(location),"}, {"sha": "afaedecdf0abe307400847586aebaf1c0a98a838", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -12,10 +12,10 @@ use rustc::hir;\n use rustc::mir::{BasicBlock, BasicBlockData, Location, Place, Mir, Rvalue};\n use rustc::mir::visit::Visitor;\n use rustc::mir::Place::Projection;\n-use rustc::mir::{PlaceProjection, ProjectionElem};\n+use rustc::mir::{Local, PlaceProjection, ProjectionElem};\n use rustc::mir::visit::TyContext;\n use rustc::infer::InferCtxt;\n-use rustc::ty::{self, ClosureSubsts};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts};\n use rustc::ty::subst::Substs;\n use rustc::ty::fold::TypeFoldable;\n \n@@ -106,6 +106,9 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n         self.super_rvalue(rvalue, location);\n     }\n+\n+    fn visit_user_assert_ty(&mut self, _c_ty: &CanonicalTy<'tcx>,\n+                            _local: &Local, _location: Location) { }\n }\n \n impl<'cx, 'cg, 'gcx, 'tcx> ConstraintGeneration<'cx, 'cg, 'gcx, 'tcx> {"}, {"sha": "04c206b5c0c40b4d0f82891e6b7ce11672d5c04b", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, ClosureSubsts, GeneratorInterior, Ty, TypeFoldable};\n-use rustc::mir::{BasicBlock, Location, Mir, Statement, StatementKind};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorInterior, Ty, TypeFoldable};\n+use rustc::mir::{BasicBlock, Local, Location, Mir, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n \n@@ -118,6 +118,14 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_closure_substs: substs={:?}\", substs);\n     }\n \n+    fn visit_user_assert_ty(&mut self, _c_ty: &mut CanonicalTy<'tcx>, _local: &mut Local,\n+                            _location: Location) {\n+        // User-assert-ty statements represent types that the user added explicitly.\n+        // We don't want to erase the regions from these types: rather, we want to\n+        // add them as constraints at type-check time.\n+        debug!(\"visit_user_assert_ty: skipping renumber\");\n+    }\n+\n     fn visit_statement(\n         &mut self,\n         block: BasicBlock,"}, {"sha": "80a439b183058d1c12b2cff3f2ba497be454558f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -761,6 +761,22 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n+            StatementKind::UserAssertTy(ref c_ty, ref local) => {\n+                let local_ty = mir.local_decls()[*local].ty;\n+                let (ty, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n+                    stmt.source_info.span, c_ty);\n+                debug!(\"check_stmt: user_assert_ty ty={:?} local_ty={:?}\", ty, local_ty);\n+                if let Err(terr) = self.eq_types(ty, local_ty, location.at_self()) {\n+                    span_mirbug!(\n+                        self,\n+                        stmt,\n+                        \"bad type assert ({:?} = {:?}): {:?}\",\n+                        ty,\n+                        local_ty,\n+                        terr\n+                    );\n+                }\n+            }\n             StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::InlineAsm { .. }"}, {"sha": "39dc29ba18b645ae00339258f987b8f16b06f329", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -777,13 +777,19 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n+        debug!(\n+            \"replace_bound_regions_with_nll_infer_vars(value={:?}, all_outlive_scope={:?})\",\n+            value,\n+            all_outlive_scope,\n+        );\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             let liberated_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: all_outlive_scope,\n                 bound_region: br,\n             }));\n             let region_vid = self.next_nll_region_var(origin);\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n+            debug!(\"liberated_region={:?} => {:?}\", liberated_region, region_vid);\n             region_vid\n         });\n         value"}, {"sha": "94702927d260067820931f1fc8d786c95b10f792", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -102,6 +102,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     remainder_scope,\n                     init_scope,\n                     pattern,\n+                    ty,\n                     initializer,\n                     lint_level\n                 } => {\n@@ -120,10 +121,19 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n                                 let scope = (init_scope, source_info);\n                                 this.in_scope(scope, lint_level, block, |this| {\n-                                    this.expr_into_pattern(block, pattern, init)\n+                                    this.expr_into_pattern(block, ty, pattern, init)\n                                 })\n                             }));\n                     } else {\n+                        // FIXME(#47184): We currently only insert `UserAssertTy` statements for\n+                        // patterns that are bindings, this is as we do not want to deconstruct\n+                        // the type being assertion to match the pattern.\n+                        if let PatternKind::Binding { var, .. } = *pattern.kind {\n+                            if let Some(ty) = ty {\n+                                this.user_assert_ty(block, ty, var, span);\n+                            }\n+                        }\n+\n                         this.visit_bindings(&pattern, &mut |this, _, _, node, span, _| {\n                             this.storage_live_binding(block, node, span);\n                             this.schedule_drop_for_binding(node, span);"}, {"sha": "7eb52a3cdee93c7aec2b9d414a9a748b93d5b303", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -145,8 +145,26 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         end_block.unit()\n     }\n \n+    pub fn user_assert_ty(&mut self, block: BasicBlock, hir_id: hir::HirId,\n+                          var: NodeId, span: Span) {\n+        if self.hir.tcx().sess.opts.debugging_opts.disable_nll_user_type_assert { return; }\n+\n+        let local_id = self.var_indices[&var];\n+        let source_info = self.source_info(span);\n+\n+        debug!(\"user_assert_ty: local_id={:?}\", hir_id.local_id);\n+        if let Some(c_ty) = self.hir.tables.user_provided_tys().get(hir_id) {\n+            debug!(\"user_assert_ty: c_ty={:?}\", c_ty);\n+            self.cfg.push(block, Statement {\n+                source_info,\n+                kind: StatementKind::UserAssertTy(*c_ty, local_id),\n+            });\n+        }\n+    }\n+\n     pub fn expr_into_pattern(&mut self,\n                              mut block: BasicBlock,\n+                             ty: Option<hir::HirId>,\n                              irrefutable_pat: Pattern<'tcx>,\n                              initializer: ExprRef<'tcx>)\n                              -> BlockAnd<()> {\n@@ -156,6 +174,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                    var,\n                                    subpattern: None, .. } => {\n                 let place = self.storage_live_binding(block, var, irrefutable_pat.span);\n+\n+                if let Some(ty) = ty {\n+                    self.user_assert_ty(block, ty, var, irrefutable_pat.span);\n+                }\n+\n                 unpack!(block = self.into(&place, block, initializer));\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span);\n                 block.unit()"}, {"sha": "fb3042014df6af8e6098a4683a31d14f4fb9dc0d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -678,6 +678,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |\n+            mir::StatementKind::UserAssertTy(..) |\n             mir::StatementKind::Nop => {}\n \n         }"}, {"sha": "cbf4c822769c616f38f87784ec7566fe3688299c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -298,6 +298,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             }\n             StatementKind::EndRegion(_) |\n             StatementKind::Validate(..) |\n+            StatementKind::UserAssertTy(..) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "14aa307f0ae1f1a24652a4b6a60cb3cf44da2edc", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -76,12 +76,14 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             first_statement_index: region::FirstStatementIndex::new(index),\n                         });\n \n+                        let ty = local.ty.clone().map(|ty| ty.hir_id);\n                         let pattern = cx.pattern_from_hir(&local.pat);\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             kind: StmtKind::Let {\n                                 remainder_scope: remainder_scope,\n                                 init_scope: region::Scope::Node(hir_id.local_id),\n                                 pattern,\n+                                ty,\n                                 initializer: local.init.to_ref(),\n                                 lint_level: cx.lint_level_of(local.id),\n                             },"}, {"sha": "fe82b8158f76dbed8188e15843443d9259b32bde", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -93,10 +93,13 @@ pub enum StmtKind<'tcx> {\n         /// lifetime of temporaries\n         init_scope: region::Scope,\n \n-        /// let <PAT> = ...\n+        /// let <PAT>: ty = ...\n         pattern: Pattern<'tcx>,\n \n-        /// let pat = <INIT> ...\n+        /// let pat: <TY> = init ...\n+        ty: Option<hir::HirId>,\n+\n+        /// let pat: ty = <INIT> ...\n         initializer: Option<ExprRef<'tcx>>,\n \n         /// the lint level for this let-statement"}, {"sha": "f1d58ff5e884e5b7d00e8141264764a86d54bacb", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -89,6 +89,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 M::end_region(self, Some(ce))?;\n             }\n \n+            UserAssertTy(..) => {}\n+\n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly.\n             Nop => {}"}, {"sha": "02c703996643ab4ff8dfff22ccc8b2455e2b16cc", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -105,6 +105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             StatementKind::StorageDead(..) |\n             StatementKind::EndRegion(..) |\n             StatementKind::Validate(..) |\n+            StatementKind::UserAssertTy(..) |\n             StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }"}, {"sha": "256b1fd66e9a749310c976e0ae3be482cf84220d", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "renamed", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -8,16 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This module provides one pass, `CleanEndRegions`, that reduces the\n-//! set of `EndRegion` statements in the MIR.\n+//! This module provides two passes:\n //!\n-//! The \"pass\" is actually implemented as two traversals (aka visits)\n-//! of the input MIR. The first traversal, `GatherBorrowedRegions`,\n-//! finds all of the regions in the MIR that are involved in a borrow.\n+//!   - `CleanEndRegions`, that reduces the set of `EndRegion` statements\n+//!     in the MIR.\n+//!   - `CleanUserAssertTy`, that replaces all `UserAssertTy` statements\n+//!     with `Nop`.\n+//!\n+//! The `CleanEndRegions` \"pass\" is actually implemented as two\n+//! traversals (aka visits) of the input MIR. The first traversal,\n+//! `GatherBorrowedRegions`, finds all of the regions in the MIR\n+//! that are involved in a borrow.\n //!\n //! The second traversal, `DeleteTrivialEndRegions`, walks over the\n //! MIR and removes any `EndRegion` that is applied to a region that\n //! was not seen in the previous pass.\n+//!\n+//! The `CleanUserAssertTy` pass runs at a distinct time from the\n+//! `CleanEndRegions` pass. It is important that the `CleanUserAssertTy`\n+//! pass runs after the MIR borrowck so that the NLL type checker can\n+//! perform the type assertion when it encounters the `UserAssertTy`\n+//! statements.\n \n use rustc_data_structures::fx::FxHashSet;\n \n@@ -93,7 +104,33 @@ impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> {\n         }\n \n         if delete_it {\n-            statement.kind = StatementKind::Nop;\n+            statement.make_nop();\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n+}\n+\n+pub struct CleanUserAssertTy;\n+\n+pub struct DeleteUserAssertTy;\n+\n+impl MirPass for CleanUserAssertTy {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        let mut delete = DeleteUserAssertTy;\n+        delete.visit_mir(mir);\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for DeleteUserAssertTy {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::UserAssertTy(..) = statement.kind {\n+            statement.make_nop();\n         }\n         self.super_statement(block, statement, location);\n     }", "previous_filename": "src/librustc_mir/transform/clean_end_regions.rs"}, {"sha": "63ca35aa0e7b2ab3bf9b971d0b248a4bd035cbd6", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::Span;\n \n pub mod add_validation;\n pub mod add_moves_for_packed_drops;\n-pub mod clean_end_regions;\n+pub mod cleanup_post_borrowck;\n pub mod check_unsafety;\n pub mod simplify_branches;\n pub mod simplify;\n@@ -193,7 +193,7 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     let mut mir = tcx.mir_built(def_id).steal();\n     run_passes![tcx, mir, def_id, 0;\n         // Remove all `EndRegion` statements that are not involved in borrows.\n-        clean_end_regions::CleanEndRegions,\n+        cleanup_post_borrowck::CleanEndRegions,\n \n         // What we need to do constant evaluation.\n         simplify::SimplifyCfg::new(\"initial\"),\n@@ -234,6 +234,8 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n         remove_noop_landing_pads::RemoveNoopLandingPads,\n         simplify::SimplifyCfg::new(\"early-opt\"),\n+        // Remove all `UserAssertTy` statements.\n+        cleanup_post_borrowck::CleanUserAssertTy,\n \n         // These next passes must be executed together\n         add_call_guards::CriticalCallEdges,"}, {"sha": "8e2f98d276966c0ec6b08f20ee0002acf5dee604", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -1099,6 +1099,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 StatementKind::InlineAsm {..} |\n                 StatementKind::EndRegion(_) |\n                 StatementKind::Validate(..) |\n+                StatementKind::UserAssertTy(..) |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "6d365012525f612833d4c47454071059d9fc1bfb", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -50,6 +50,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::EndRegion(_) |\n+                StatementKind::UserAssertTy(..) |\n                 StatementKind::Nop => {\n                     // These are all nops in a landing pad (there's some\n                     // borrowck interaction between EndRegion and storage"}, {"sha": "45e7a0d3f4c5ab9bd152d54498cda2075eaeebd2", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -163,6 +163,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n+            mir::StatementKind::UserAssertTy(..) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "a4e056c6b589ee3841d7779acb05186745337a44", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -90,6 +90,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\",\n             StatementKind::InlineAsm { .. } => \"StatementKind::InlineAsm\",\n+            StatementKind::UserAssertTy(..) => \"StatementKind::UserAssertTy\",\n             StatementKind::Nop => \"StatementKind::Nop\",\n         }, &statement.kind);\n         self.super_statement(block, statement, location);"}, {"sha": "579b07929a2f2343792d565117bf823609de178e", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -84,6 +84,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n             }\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n+            mir::StatementKind::UserAssertTy(..) |\n             mir::StatementKind::Nop => bx,\n         }\n     }"}, {"sha": "937dd876d6b94cb71335e50f0de0b33572827648", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -960,10 +960,19 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &'gcx hir::Local) {\n         let o_ty = match local.ty {\n-            Some(ref ty) => Some(self.fcx.to_ty(&ty)),\n-            None => None\n+            Some(ref ty) => {\n+                let o_ty = self.fcx.to_ty(&ty);\n+\n+                let (c_ty, _orig_values) = self.fcx.inh.infcx.canonicalize_response(&o_ty);\n+                debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} c_ty={:?}\", ty.hir_id, o_ty, c_ty);\n+                self.fcx.tables.borrow_mut().user_provided_tys_mut().insert(ty.hir_id, c_ty);\n+\n+                Some(o_ty)\n+            },\n+            None => None,\n         };\n         self.assign(local.span, local.id, o_ty);\n+\n         debug!(\"Local variable {:?} is assigned type {}\",\n                local.pat,\n                self.fcx.ty_to_string("}, {"sha": "bbd04e0b19ae194a3e9365bf2df24d1437aa88dd", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -46,6 +46,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_anon_types();\n         wbcx.visit_cast_types();\n         wbcx.visit_free_region_map();\n+        wbcx.visit_user_provided_tys();\n \n         let used_trait_imports = mem::replace(\n             &mut self.tables.borrow_mut().used_trait_imports,\n@@ -341,6 +342,33 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         self.tables.free_region_map = free_region_map;\n     }\n \n+    fn visit_user_provided_tys(&mut self) {\n+        let fcx_tables = self.fcx.tables.borrow();\n+        debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n+\n+        for (&local_id, c_ty) in fcx_tables.user_provided_tys().iter() {\n+            let hir_id = hir::HirId {\n+                owner: common_local_id_root.index,\n+                local_id,\n+            };\n+\n+            let c_ty = if let Some(c_ty) = self.tcx().lift_to_global(c_ty) {\n+                c_ty\n+            } else {\n+                span_bug!(\n+                    hir_id.to_span(&self.fcx.tcx),\n+                    \"writeback: `{:?}` missing from the global type context\",\n+                    c_ty\n+                );\n+            };\n+\n+            self.tables\n+                .user_provided_tys_mut()\n+                .insert(hir_id, c_ty.clone());\n+        }\n+    }\n+\n     fn visit_anon_types(&mut self) {\n         let gcx = self.tcx().global_tcx();\n         for (&def_id, anon_defn) in self.fcx.anon_types.borrow().iter() {"}, {"sha": "2f49500c3910b0c0d6c42f8614ae6d87b2fb1d0f", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -49,7 +49,7 @@ pub fn add_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables\")]\n+    except=\"HirBody,TypeckTables,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;"}, {"sha": "3c236ddcf0409ee7d9b7c09d5c38e44674a0a81f", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -23,6 +23,8 @@\n // tend to be absent in simple code, so subtle breakage in them can\n // leave a quite hard-to-find trail of destruction.\n \n+// ignore-tidy-linelength\n+\n fn main() {\n     let nodrop_x = false;\n     let nodrop_y;\n@@ -46,6 +48,7 @@ fn main() {\n //         _2 = move _3;\n //         StorageDead(_3);\n //         StorageLive(_4);\n+//         UserAssertTy(Canonical { variables: Slice([]), value: std::option::Option<std::boxed::Box<u32>> }, _4);\n //         _4 = std::option::Option<std::boxed::Box<u32>>::None;\n //         StorageLive(_5);\n //         StorageLive(_6);"}, {"sha": "92e42a73bbb6a9679fe764e804cf55d30acb6928", "filename": "src/test/mir-opt/nll/reborrow-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -28,9 +28,9 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#7r    | {bb0[6..=14]}\n+// | '_#7r    | {bb0[4], bb0[8..=17]}\n // ...\n-// | '_#9r    | {bb0[11..=14]}\n+// | '_#9r    | {bb0[10], bb0[14..=17]}\n // ...\n // let _2: &'_#7r mut i32;\n // ..."}, {"sha": "c41341690441fa15c4739d2b2c23d3d54a4c999b", "filename": "src/test/run-pass/generator/yield-subtype.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // revisions:lexical nll\n+//[nll]compile-flags: -Z disable-nll-user-type-assert\n #![cfg_attr(nll, feature(nll))]\n \n #![feature(generators)]"}, {"sha": "0831b7e0af8e2a5e8ceddbe4c0bb23b513168c8f", "filename": "src/test/ui/issue-47184.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fui%2Fissue-47184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fui%2Fissue-47184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47184.rs?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let _vec: Vec<&'static String> = vec![&String::new()];\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+}"}, {"sha": "a9eb33f01e3e014a90b7cc107defa3fe45006c51", "filename": "src/test/ui/issue-47184.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fui%2Fissue-47184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab0ef145ac993d01a73c1c4a5decb1f68b3aad36/src%2Ftest%2Fui%2Fissue-47184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47184.stderr?ref=ab0ef145ac993d01a73c1c4a5decb1f68b3aad36", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/issue-47184.rs:14:44\n+   |\n+LL |     let _vec: Vec<&'static String> = vec![&String::new()];\n+   |                                            ^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough [E0597]\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}