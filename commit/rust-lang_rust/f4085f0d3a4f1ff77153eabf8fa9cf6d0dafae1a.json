{"sha": "f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDg1ZjBkM2E0ZjFmZjc3MTUzZWFiZjhmYTljZjZkMGRhZmFlMWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-19T19:25:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-19T19:52:24Z"}, "message": "also const-check FakeRead", "tree": {"sha": "d0b21f6c352069cb0652c98ffe3f87ae6c28b498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b21f6c352069cb0652c98ffe3f87ae6c28b498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "html_url": "https://github.com/rust-lang/rust/commit/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2f1cb2785f87177249e2bdb628ed782fcd8def", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f1cb2785f87177249e2bdb628ed782fcd8def", "html_url": "https://github.com/rust-lang/rust/commit/bd2f1cb2785f87177249e2bdb628ed782fcd8def"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "90688ebbd0acbf0d8d097b52bfc6850713317034", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "patch": "@@ -722,17 +722,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         trace!(\"visit_statement: statement={:?} location={:?}\", statement, location);\n \n-        match statement.kind {\n-            StatementKind::Assign(..) | StatementKind::SetDiscriminant { .. } => {\n-                self.super_statement(statement, location);\n-            }\n+        self.super_statement(statement, location);\n \n+        match statement.kind {\n             StatementKind::LlvmInlineAsm { .. } => {\n-                self.super_statement(statement, location);\n                 self.check_op(ops::InlineAsm);\n             }\n \n-            StatementKind::FakeRead(..)\n+            StatementKind::Assign(..)\n+            | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag { .. }"}, {"sha": "b65e50eb9f4199465241d38648c7fbf34c95d0f0", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "patch": "@@ -146,6 +146,11 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n    |"}, {"sha": "58ed3c2c7227fd1f96647e2fd51cd7eb87a4d5bb", "filename": "src/test/ui/error-codes/E0396.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs?ref=f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "patch": "@@ -5,5 +5,16 @@ const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n const VALUE: u8 = unsafe { *REG_ADDR };\n //~^ ERROR dereferencing raw pointers in constants is unstable\n \n+const unsafe fn unreachable() -> ! {\n+    use std::convert::Infallible;\n+\n+    const INFALLIBLE: *const Infallible = [].as_ptr();\n+    match *INFALLIBLE {}\n+    //~^ ERROR dereferencing raw pointers in constant functions is unstable\n+\n+    const BAD: () = unsafe { match *INFALLIBLE {} };\n+    //~^ ERROR dereferencing raw pointers in constants is unstable\n+}\n+\n fn main() {\n }"}, {"sha": "20dad1b983c1c917d02193df92ac5e1b7905e877", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=f4085f0d3a4f1ff77153eabf8fa9cf6d0dafae1a", "patch": "@@ -7,6 +7,24 @@ LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: dereferencing raw pointers in constant functions is unstable\n+  --> $DIR/E0396.rs:12:11\n+   |\n+LL |     match *INFALLIBLE {}\n+   |           ^^^^^^^^^^^\n+   |\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n+   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+\n+error[E0658]: dereferencing raw pointers in constants is unstable\n+  --> $DIR/E0396.rs:15:36\n+   |\n+LL |     const BAD: () = unsafe { match *INFALLIBLE {} };\n+   |                                    ^^^^^^^^^^^\n+   |\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n+   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}