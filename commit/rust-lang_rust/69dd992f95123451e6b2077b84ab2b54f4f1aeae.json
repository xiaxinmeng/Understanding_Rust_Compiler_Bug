{"sha": "69dd992f95123451e6b2077b84ab2b54f4f1aeae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZGQ5OTJmOTUxMjM0NTFlNmIyMDc3Yjg0YWIyYjU0ZjRmMWFlYWU=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-01T15:49:47Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-28T12:33:35Z"}, "message": "Add TrustedRandomAccessNoCoerce supertrait without requirements or guarantees about subtype coercions\n\nUpdate all the TrustedRandomAccess impls to also implement the new supertrait", "tree": {"sha": "d8a36274238dd83ee9d90b7039c9c86507240819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a36274238dd83ee9d90b7039c9c86507240819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69dd992f95123451e6b2077b84ab2b54f4f1aeae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69dd992f95123451e6b2077b84ab2b54f4f1aeae", "html_url": "https://github.com/rust-lang/rust/commit/69dd992f95123451e6b2077b84ab2b54f4f1aeae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69dd992f95123451e6b2077b84ab2b54f4f1aeae/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7f27f79278baf41e985d77993f9d5a0f610025", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7f27f79278baf41e985d77993f9d5a0f610025", "html_url": "https://github.com/rust-lang/rust/commit/1c7f27f79278baf41e985d77993f9d5a0f610025"}], "stats": {"total": 199, "additions": 160, "deletions": 39}, "files": [{"sha": "3fa5bb6bff0aac94e7e29e30286846b502ee79ed", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use core::ops::Try;\n \n use super::{count, wrap_index, RingSlices};\n@@ -177,6 +177,10 @@ unsafe impl<T> TrustedLen for Iter<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<T> TrustedRandomAccess for Iter<'_, T> {\n+unsafe impl<T> TrustedRandomAccess for Iter<'_, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<T> TrustedRandomAccessNoCoerce for Iter<'_, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "5974d480cf02d7c7985a7ca5c58bc55315f50df3", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use core::marker::PhantomData;\n \n use super::{count, wrap_index, RingSlices};\n@@ -146,6 +146,10 @@ unsafe impl<T> TrustedLen for IterMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<T> TrustedRandomAccess for IterMut<'_, T> {\n+unsafe impl<T> TrustedRandomAccess for IterMut<'_, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<T> TrustedRandomAccessNoCoerce for IterMut<'_, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "857aec292e007c31099eb71030194c7158b26326", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -1,4 +1,6 @@\n-use crate::iter::adapters::{zip::try_get_unchecked, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::ops::Try;\n \n@@ -121,9 +123,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Cloned<I>\n+unsafe impl<I> TrustedRandomAccess for Cloned<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Cloned<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = true;\n }"}, {"sha": "8351f95592d0e18ddba550a364ead8097242cc98", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -1,4 +1,6 @@\n-use crate::iter::adapters::{zip::try_get_unchecked, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::ops::Try;\n \n@@ -137,9 +139,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Copied<I>\n+unsafe impl<I> TrustedRandomAccess for Copied<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Copied<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }"}, {"sha": "692a170f41bfe7116152a75cf05fcf89596608f3", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -1,4 +1,6 @@\n-use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, SourceIter, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n use crate::ops::Try;\n \n@@ -207,9 +209,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n+unsafe impl<I> TrustedRandomAccess for Enumerate<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Enumerate<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }"}, {"sha": "febb8418baf70b75ee9d8b01a112cda1dbd29b14", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -2,6 +2,7 @@ use crate::intrinsics;\n use crate::iter::adapters::zip::try_get_unchecked;\n use crate::iter::{\n     DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess,\n+    TrustedRandomAccessNoCoerce,\n };\n use crate::ops::Try;\n \n@@ -221,9 +222,13 @@ unsafe impl<I> TrustedLen for Fuse<I> where I: TrustedLen {}\n //\n // This is safe to implement as `Fuse` is just forwarding these to the wrapped iterator `I`, which\n // preserves these properties.\n-unsafe impl<I> TrustedRandomAccess for Fuse<I>\n+unsafe impl<I> TrustedRandomAccess for Fuse<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Fuse<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }"}, {"sha": "c6b26d830e7bd9d99bc543fcd671a1257ecebdf0", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -1,5 +1,7 @@\n use crate::fmt;\n-use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, SourceIter, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n use crate::ops::Try;\n \n@@ -187,9 +189,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I, F> TrustedRandomAccess for Map<I, F>\n+unsafe impl<I, F> TrustedRandomAccess for Map<I, F> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I, F> TrustedRandomAccessNoCoerce for Map<I, F>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = true;\n }"}, {"sha": "056ccca1d01c93fb34f97c1c68367ae1f54e7bff", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -51,6 +51,9 @@ pub use self::map_while::MapWhile;\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n pub use self::zip::TrustedRandomAccess;\n \n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+pub use self::zip::TrustedRandomAccessNoCoerce;\n+\n #[unstable(feature = \"iter_zip\", issue = \"83574\")]\n pub use self::zip::zip;\n "}, {"sha": "9333cd0f28336765c77e0719197298f1735fd104", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -354,6 +354,15 @@ unsafe impl<A, B> TrustedRandomAccess for Zip<A, B>\n where\n     A: TrustedRandomAccess,\n     B: TrustedRandomAccess,\n+{\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<A, B> TrustedRandomAccessNoCoerce for Zip<A, B>\n+where\n+    A: TrustedRandomAccessNoCoerce,\n+    B: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = A::MAY_HAVE_SIDE_EFFECT || B::MAY_HAVE_SIDE_EFFECT;\n }\n@@ -431,7 +440,7 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///\n /// The iterator's `size_hint` must be exact and cheap to call.\n ///\n-/// `size` may not be overridden.\n+/// `TrustedRandomAccessNoCoerce::size` may not be overridden.\n ///\n /// All subtypes and all supertypes of `Self` must also implement `TrustedRandomAccess`.\n /// In particular, this means that types with non-invariant parameters usually can not have\n@@ -455,7 +464,7 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///     * `std::iter::Iterator::size_hint`\n ///     * `std::iter::DoubleEndedIterator::next_back`\n ///     * `std::iter::Iterator::__iterator_get_unchecked`\n-///     * `std::iter::TrustedRandomAccess::size`\n+///     * `std::iter::TrustedRandomAccessNoCoerce::size`\n /// 5. If `T` is a subtype of `Self`, then `self` is allowed to be coerced\n ///    to `T`. If `self` is coerced to `T` after `self.__iterator_get_unchecked(idx)` has already\n ///    been called, then no methods except for the ones listed under 4. are allowed to be called\n@@ -474,7 +483,15 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n #[rustc_specialization_trait]\n-pub unsafe trait TrustedRandomAccess: Sized {\n+pub unsafe trait TrustedRandomAccess: TrustedRandomAccessNoCoerce {}\n+\n+/// Like [`TrustedRandomAccess`] but without any of the requirements / guarantees around\n+/// coercions to subtypes after `__iterator_get_unchecked` (they aren\u2019t allowed here!), and\n+/// without the requirement that subtypes / supertypes implement [`TrustedRandomAccessNoCoerce`].\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+#[rustc_specialization_trait]\n+pub unsafe trait TrustedRandomAccessNoCoerce: Sized {\n     // Convenience method.\n     fn size(&self) -> usize\n     where"}, {"sha": "5f664b5f4a8cda01c4a3b67669c83e0dfe775c04", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -407,6 +407,8 @@ pub use self::adapters::SourceIter;\n pub use self::adapters::StepBy;\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n pub use self::adapters::TrustedRandomAccess;\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+pub use self::adapters::TrustedRandomAccessNoCoerce;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::adapters::{\n     Chain, Cycle, Enumerate, Filter, FilterMap, FlatMap, Fuse, Inspect, Map, Peekable, Rev, Scan,"}, {"sha": "c3febd88ac9f173009989b0bc50e5a27d22384f9", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -3,7 +3,9 @@ use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Try};\n \n-use super::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedStep};\n+use super::{\n+    FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce, TrustedStep,\n+};\n \n // Safety: All invariants are upheld.\n macro_rules! unsafe_impl_trusted_step {\n@@ -495,7 +497,11 @@ macro_rules! unsafe_range_trusted_random_access_impl {\n     ($($t:ty)*) => ($(\n         #[doc(hidden)]\n         #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-        unsafe impl TrustedRandomAccess for ops::Range<$t> {\n+        unsafe impl TrustedRandomAccess for ops::Range<$t> {}\n+\n+        #[doc(hidden)]\n+        #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+        unsafe impl TrustedRandomAccessNoCoerce for ops::Range<$t> {\n             const MAY_HAVE_SIDE_EFFECT: bool = false;\n         }\n     )*)"}, {"sha": "419bf0e292ae1c429092989eed98f779acadc6ec", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -8,7 +8,7 @@ use crate::cmp;\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::intrinsics::{assume, exact_div, unchecked_sub};\n-use crate::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use crate::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use crate::marker::{PhantomData, Send, Sized, Sync};\n use crate::mem;\n use crate::num::NonZeroUsize;\n@@ -1312,7 +1312,11 @@ impl<T> FusedIterator for Windows<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Windows<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1477,7 +1481,11 @@ impl<T> FusedIterator for Chunks<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Chunks<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1639,7 +1647,11 @@ impl<T> FusedIterator for ChunksMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1793,7 +1805,11 @@ impl<T> FusedIterator for ChunksExact<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksExact<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1944,7 +1960,11 @@ impl<T> FusedIterator for ChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksExactMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2182,7 +2202,11 @@ impl<T, const N: usize> FusedIterator for ArrayChunks<'_, T, N> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n-unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccessNoCoerce for ArrayChunks<'a, T, N> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2295,7 +2319,11 @@ impl<T, const N: usize> FusedIterator for ArrayChunksMut<'_, T, N> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n-unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T, N> {\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T, N> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccessNoCoerce for ArrayChunksMut<'a, T, N> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2457,7 +2485,11 @@ impl<T> FusedIterator for RChunks<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunks<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2618,7 +2650,11 @@ impl<T> FusedIterator for RChunksMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2776,7 +2812,11 @@ impl<T> FusedIterator for RChunksExact<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksExact<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2931,19 +2971,31 @@ impl<T> FusedIterator for RChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksExactMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for Iter<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for Iter<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Iter<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for IterMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n "}, {"sha": "8db9edc61472f91d12ff2fb82a8d575937287470", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dd992f95123451e6b2077b84ab2b54f4f1aeae/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=69dd992f95123451e6b2077b84ab2b54f4f1aeae", "patch": "@@ -2,9 +2,9 @@\n \n use crate::char;\n use crate::fmt::{self, Write};\n-use crate::iter::TrustedRandomAccess;\n use crate::iter::{Chain, FlatMap, Flatten};\n use crate::iter::{Copied, Filter, FusedIterator, Map, TrustedLen};\n+use crate::iter::{TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use crate::ops::Try;\n use crate::option;\n use crate::slice::{self, Split as SliceSplit};\n@@ -345,7 +345,11 @@ unsafe impl TrustedLen for Bytes<'_> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl TrustedRandomAccess for Bytes<'_> {\n+unsafe impl TrustedRandomAccess for Bytes<'_> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl TrustedRandomAccessNoCoerce for Bytes<'_> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n "}]}