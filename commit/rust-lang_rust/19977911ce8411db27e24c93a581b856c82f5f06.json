{"sha": "19977911ce8411db27e24c93a581b856c82f5f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTc3OTExY2U4NDExZGIyN2UyNGM5M2E1ODFiODU2YzgyZjVmMDY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T03:54:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T03:54:20Z"}, "message": "Rollup merge of #39361 - cengizIO:master, r=arielb1\n\nImprove error message for uninferrable types #38812\n\nHello,\n\nI tried to improve the error message for uninferrable types. The error code is `E0282`.\n\n```rust\n\nerror[E0282]: type annotations needed\n --> /home/cengizIO/issue38812.rs:2:11\n  |\n2 |   let x = vec![];\n  |       -   ^^^^^^ cannot infer type for `T`\n  |       |\n  |       consider giving `x` a type\n  |\n  = note: this error originates in a macro outside of the current crate\n```\n\nand\n\n```rust\n\nerror[E0282]: type annotations needed\n --> /home/cengizIO/issue38812.rs:2:15\n  |\n2 |   let (x,) = (vec![],);\n  |       ----    ^^^^^^ cannot infer type for `T`\n  |       |\n  |       consider giving a type to pattern\n  |\n  = note: this error originates in a macro outside of the current crate\n```\n\nRust compiler now tries to find uninferred `local`s with type `_` and adds them into the error message.\n\nI'm probably wrong on wording that I used. Please feel free to suggest better alternatives.\n\nThanks @nikomatsakis for mentoring \ud83c\udf7a\n\nAny comments/feedback is more than welcome!\n\nThank you", "tree": {"sha": "c7220606b0297b506248fe3afa95da18fe96e306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7220606b0297b506248fe3afa95da18fe96e306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19977911ce8411db27e24c93a581b856c82f5f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19977911ce8411db27e24c93a581b856c82f5f06", "html_url": "https://github.com/rust-lang/rust/commit/19977911ce8411db27e24c93a581b856c82f5f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19977911ce8411db27e24c93a581b856c82f5f06/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cde461bb037d816a2a004c23e6365babb0889e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cde461bb037d816a2a004c23e6365babb0889e3", "html_url": "https://github.com/rust-lang/rust/commit/4cde461bb037d816a2a004c23e6365babb0889e3"}, {"sha": "3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "html_url": "https://github.com/rust-lang/rust/commit/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2"}], "stats": {"total": 180, "additions": 124, "deletions": 56}, "files": [{"sha": "024c14ce9d922b1e1cce6acf464b21078a0bbc15", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -39,6 +39,8 @@ use util::nodemap::{FxHashMap, FxHashSet};\n use std::cmp;\n use std::fmt;\n use syntax::ast;\n+use hir::{intravisit, Local, Pat};\n+use hir::intravisit::{Visitor, NestedVisitorMap};\n use syntax_pos::{DUMMY_SP, Span};\n use errors::DiagnosticBuilder;\n \n@@ -60,6 +62,30 @@ impl<'a, 'gcx, 'tcx> TraitErrorKey<'tcx> {\n     }\n }\n \n+struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    target_ty: &'a Ty<'tcx>,\n+    found_pattern: Option<&'a Pat>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> Visitor<'a> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_local(&mut self, local: &'a Local) {\n+        if let Some(&ty) = self.infcx.tables.borrow().node_types.get(&local.id) {\n+            let ty = self.infcx.resolve_type_vars_if_possible(&ty);\n+            let is_match = ty.walk().any(|t| t == *self.target_ty);\n+\n+            if is_match && self.found_pattern.is_none() {\n+                self.found_pattern = Some(&*local.pat);\n+            }\n+        }\n+        intravisit::walk_local(self, local);\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self, errors: &Vec<FulfillmentError<'tcx>>) {\n         for error in errors {\n@@ -775,7 +801,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             self.tcx.lang_items.sized_trait()\n                             .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                         {\n-                            self.need_type_info(obligation.cause.span, self_ty);\n+                            self.need_type_info(obligation, self_ty);\n                         } else {\n                             let mut err = struct_span_err!(self.tcx.sess,\n                                                            obligation.cause.span, E0283,\n@@ -793,7 +819,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if !ty.references_error() && !self.tcx.sess.has_errors() {\n-                    self.need_type_info(obligation.cause.span, ty);\n+                    self.need_type_info(obligation, ty);\n                 }\n             }\n \n@@ -857,27 +883,53 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-\n-    fn need_type_info(&self, span: Span, ty: Ty<'tcx>) {\n-        let ty = self.resolve_type_vars_if_possible(&ty);\n-        let name = if let ty::TyInfer(ty::TyVar(ty_vid)) = ty.sty {\n+    fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n+        if let ty::TyInfer(ty::TyVar(ty_vid)) = (*ty).sty {\n             let ty_vars = self.type_variables.borrow();\n             if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n-                    *ty_vars.var_origin(ty_vid)\n-            {\n+                *ty_vars.var_origin(ty_vid) {\n                 name.to_string()\n             } else {\n                 ty.to_string()\n             }\n         } else {\n             ty.to_string()\n+        }\n+    }\n+\n+    fn need_type_info(&self, obligation: &PredicateObligation<'tcx>, ty: Ty<'tcx>) {\n+        let ty = self.resolve_type_vars_if_possible(&ty);\n+        let name = self.extract_type_name(&ty);\n+        let ref cause = obligation.cause;\n+\n+        let mut err = struct_span_err!(self.tcx.sess,\n+                                       cause.span,\n+                                       E0282,\n+                                       \"type annotations needed\");\n+\n+        err.span_label(cause.span, &format!(\"cannot infer type for `{}`\", name));\n+\n+        let expr = self.tcx.hir.expect_expr(cause.body_id);\n+\n+        let mut local_visitor = FindLocalByTypeVisitor {\n+            infcx: &self,\n+            target_ty: &ty,\n+            found_pattern: None,\n         };\n \n-        let mut err = struct_span_err!(self.tcx.sess, span, E0282,\n-                                       \"unable to infer enough type information about `{}`\",\n-                                       name);\n-        err.note(\"type annotations or generic parameter binding required\");\n-        err.span_label(span, &format!(\"cannot infer type for `{}`\", name));\n+        local_visitor.visit_expr(expr);\n+\n+        if let Some(pattern) = local_visitor.found_pattern {\n+            let pattern_span = pattern.span;\n+            if let Some(simple_name) = pattern.simple_name() {\n+                err.span_label(pattern_span,\n+                               &format!(\"consider giving `{}` a type\",\n+                                        simple_name));\n+            } else {\n+                err.span_label(pattern_span, &format!(\"consider giving a type to pattern\"));\n+            }\n+        }\n+\n         err.emit();\n     }\n "}, {"sha": "346fae11070e15b91e8ef1c8317bda7cf3287292", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -14,7 +14,6 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `_`\n-    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "848174d6fe1e057e1670c5e4d6e4e3161416e038", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -14,7 +14,6 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `_`\n-    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "ecf81c8af17f61018f4028cf2c0306ffa1a56876", "filename": "src/test/compile-fail/issue-16966.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:type annotations or generic parameter binding required\n+// error-pattern:type annotations needed\n fn main() {\n     panic!(\n         std::default::Default::default()"}, {"sha": "b55863f0dda7af14a55354c721e5c97046a42531", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -13,6 +13,6 @@ use std::marker;\n struct B<T>(marker::PhantomData<T>);\n \n fn main() {\n-    let foo = B(marker::PhantomData); //~ ERROR unable to infer enough type information\n+    let foo = B(marker::PhantomData); //~ ERROR type annotations needed\n     let closure = || foo;\n }"}, {"sha": "8991eded3d6b87d9be86a1b3c4d6d1bacdc46329", "filename": "src/test/compile-fail/issue-18159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x; //~ ERROR unable to infer enough type information\n+    let x; //~ ERROR type annotations needed\n }"}, {"sha": "4dfad4ee3c385d25b164a94393d4100806a18122", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -15,5 +15,4 @@ fn main()\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n                                   //~| NOTE cannot infer type for `_`\n-                                  //~| NOTE type annotations or generic parameter binding required\n }"}, {"sha": "28109747b755747db465d323382a6aec6fda0822", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -25,6 +25,6 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n \n fn main() {\n     let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `VAR`\n+        let_(add(x,x), |y| { //~ ERROR type annotations needed\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "a7232781f6fbcfc710796b5b2de900f64157ccb4", "filename": "src/test/compile-fail/issue-24013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let a = 1;\n     let b = 2;\n     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-    //~^ ERROR unable to infer enough type information about `_`\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "ebfa4975d4d75c7ba77b1b444f20d243ac79e5f3", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]"}, {"sha": "87cf2b3f740c1c7528a5b47b6c0a3bc311b7d345", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n }"}, {"sha": "1503da2baa73d24af5146d0f41337c97c30eaef7", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -12,7 +12,6 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR unable to infer enough type information about `U` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `U`\n-    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "db4d4e76c11c9ae26a91b738678d6cb99786788d", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -17,9 +17,8 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR unable to infer enough type information about `State` [E0282]\n+   //~^ ERROR type annotations needed [E0282]\n    //~| NOTE cannot infer type for `State`\n-   //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {"}, {"sha": "fdd89058fd3973498140ded97fe2f7b3d1c2d43c", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR unable to infer enough type information about `T` [E0282]\n+    let it = v.iter(); //~ ERROR type annotations needed [E0282]\n                        //~| NOTE cannot infer type for `T`\n-                       //~| NOTE type annotations or generic parameter binding\n+                       //~| NOTE consider giving `it` a type\n }"}, {"sha": "9acf5a52166e07d5f5368516d6bc12eda7739a40", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     x.foo();\n }\n "}, {"sha": "2e115431c92c45698946c96b3ca2ec4610c3f897", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -34,9 +34,8 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR unable to infer enough type information about `U` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `U`\n-    //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {}"}, {"sha": "52ca91e62f8df56337f2c4f46c18af4fe60fc30d", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -11,7 +11,6 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR unable to infer enough type information about `T` [E0282]\n+    None; //~ ERROR type annotations needed [E0282]\n           //~| NOTE cannot infer type for `T`\n-          //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "6aaed789716a36d7847a4daf2a845c316b643625", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -13,7 +13,6 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR unable to infer enough type information about `T` [E0282]\n+    S { o: &None }; //~ ERROR type annotations needed [E0282]\n                     //~| NOTE cannot infer type for `T`\n-                    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "de229ded463f68570f5ed0a71866e9dbec44548a", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `T`\n-    //~| NOTE type annotations or generic parameter binding\n+    //~| NOTE consider giving `_foo` a type\n }"}, {"sha": "c476657d207966cdf2d9242e86bda46643a5fba2", "filename": "src/test/ui/codemap_tests/issue-38812-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let (x,) = (vec![],);\n+}"}, {"sha": "156a6bdee99799a4b4af722c6f3bc95e0a5e7360", "filename": "src/test/ui/codemap_tests/issue-38812-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -0,0 +1,12 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-38812-2.rs:12:17\n+   |\n+12 |     let (x,) = (vec![],);\n+   |         ----    ^^^^^^ cannot infer type for `T`\n+   |         |\n+   |         consider giving a type to pattern\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "a9943f753366da8d794a144eed344cb7b1597d06", "filename": "src/test/ui/codemap_tests/issue-38812.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //", "previous_filename": "src/test/ui/codemap_tests/repair_span_std_macros.rs"}, {"sha": "6365e761453f90167fb088a5f7cb52c233b3459b", "filename": "src/test/ui/codemap_tests/issue-38812.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -0,0 +1,12 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-38812.rs:12:13\n+   |\n+12 |     let x = vec![];\n+   |         -   ^^^^^^ cannot infer type for `T`\n+   |         |\n+   |         consider giving `x` a type\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e0d778a3b205e431bd5ee8b58d7f692292e4867", "filename": "src/test/ui/codemap_tests/repair_span_std_macros.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4cde461bb037d816a2a004c23e6365babb0889e3/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cde461bb037d816a2a004c23e6365babb0889e3/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr?ref=4cde461bb037d816a2a004c23e6365babb0889e3", "patch": "@@ -1,11 +0,0 @@\n-error[E0282]: unable to infer enough type information about `T`\n-  --> $DIR/repair_span_std_macros.rs:12:13\n-   |\n-12 |     let x = vec![];\n-   |             ^^^^^^ cannot infer type for `T`\n-   |\n-   = note: type annotations or generic parameter binding required\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: aborting due to previous error\n-"}, {"sha": "79368587062e8b6fcecac948877846d5cb90a541", "filename": "src/test/ui/missing-items/missing-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "a16ae5538bf92d2038afae65670a6d6d909c7b1a", "filename": "src/test/ui/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19977911ce8411db27e24c93a581b856c82f5f06/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=19977911ce8411db27e24c93a581b856c82f5f06", "patch": "@@ -1,10 +1,8 @@\n-error[E0282]: unable to infer enough type information about `X`\n+error[E0282]: type annotations needed\n   --> $DIR/missing-type-parameter.rs:14:5\n    |\n 14 |     foo();\n    |     ^^^ cannot infer type for `X`\n-   |\n-   = note: type annotations or generic parameter binding required\n \n error: aborting due to previous error\n "}]}