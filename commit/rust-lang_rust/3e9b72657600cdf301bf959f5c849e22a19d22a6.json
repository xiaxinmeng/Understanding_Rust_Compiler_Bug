{"sha": "3e9b72657600cdf301bf959f5c849e22a19d22a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWI3MjY1NzYwMGNkZjMwMWJmOTU5ZjVjODQ5ZTIyYTE5ZDIyYTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T19:27:59Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-30T02:26:48Z"}, "message": "Style the generator script more PEP8y.", "tree": {"sha": "c35cf0b0b097e3ac96b2e83060a62722e3d37ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35cf0b0b097e3ac96b2e83060a62722e3d37ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9b72657600cdf301bf959f5c849e22a19d22a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9b72657600cdf301bf959f5c849e22a19d22a6", "html_url": "https://github.com/rust-lang/rust/commit/3e9b72657600cdf301bf959f5c849e22a19d22a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9b72657600cdf301bf959f5c849e22a19d22a6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24416a21515c41d0e34a85535407663e635b76f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/24416a21515c41d0e34a85535407663e635b76f3", "html_url": "https://github.com/rust-lang/rust/commit/24416a21515c41d0e34a85535407663e635b76f3"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "7f5a737e33e39250e283d96faf8ee295d95cf229", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3e9b72657600cdf301bf959f5c849e22a19d22a6/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/3e9b72657600cdf301bf959f5c849e22a19d22a6/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=3e9b72657600cdf301bf959f5c849e22a19d22a6", "patch": "@@ -24,10 +24,10 @@ class PlatformInfo(object):\n     def __init__(self, json):\n         self._platform = json['platform']\n         self._intrinsic_prefix = json['intrinsic_prefix']\n+\n     def intrinsic_prefix(self):\n         return self._intrinsic_prefix\n \n-\n class IntrinsicSet(object):\n     def __init__(self, platform, json):\n         self._llvm_prefix = json['llvm_prefix']\n@@ -41,10 +41,13 @@ def intrinsics(self):\n             yield GenericIntrinsic(self,\n                                    raw['intrinsic'], raw['width'], raw['llvm'],\n                                    raw['ret'], raw['args'])\n+\n     def platform(self):\n         return self._platform\n+\n     def llvm_prefix(self):\n         return self._llvm_prefix\n+\n     def width_info(self, bitwidth):\n         return self._widths[str(bitwidth)]\n \n@@ -67,8 +70,10 @@ class PlatformTypeInfo(object):\n     def __init__(self, llvm_name, properties):\n         self.properties = properties\n         self.llvm_name = llvm_name\n+\n     def __getattr__(self, name):\n         return self.properties[name]\n+\n     def vectorize(self, length, width_info):\n         props = self.properties.copy()\n         props.update(width_info)\n@@ -80,12 +85,14 @@ def __init__(self, bitwidth):\n \n     def bitwidth(self):\n         return self._bitwidth\n+\n     def modify(self, spec, width):\n         raise NotImplementedError()\n \n class Number(Type):\n     def __init__(self, bitwidth):\n         Type.__init__(self, bitwidth)\n+\n     def modify(self, spec, width):\n         if spec == 'u':\n             return Unsigned(self.bitwidth())\n@@ -106,30 +113,40 @@ def type_info(self, platform_info):\n class Signed(Number):\n     def __init__(self, bitwidth):\n         Number.__init__(self, bitwidth)\n+\n     def compiler_ctor(self):\n         return 'i({})'.format(self.bitwidth())\n+\n     def llvm_name(self):\n         return 'i{}'.format(self.bitwidth())\n+\n     def rust_name(self):\n         return 'i{}'.format(self.bitwidth())\n \n class Unsigned(Number):\n     def __init__(self, bitwidth):\n         Number.__init__(self, bitwidth)\n+\n     def compiler_ctor(self):\n         return 'u({})'.format(self.bitwidth())\n+\n     def llvm_name(self):\n         return 'i{}'.format(self.bitwidth())\n+\n     def rust_name(self):\n         return 'u{}'.format(self.bitwidth())\n+\n class Float(Number):\n     def __init__(self, bitwidth):\n         assert bitwidth in (32, 64)\n         Number.__init__(self, bitwidth)\n+\n     def compiler_ctor(self):\n         return 'f({})'.format(self.bitwidth())\n+\n     def llvm_name(self):\n         return 'f{}'.format(self.bitwidth())\n+\n     def rust_name(self):\n         return 'f{}'.format(self.bitwidth())\n \n@@ -140,6 +157,7 @@ def __init__(self, elem, length):\n                       elem.bitwidth() * length)\n         self._length = length\n         self._elem = elem\n+\n     def modify(self, spec, width):\n         if spec == 'h':\n             return Vector(self._elem, self._length // 2)\n@@ -150,10 +168,13 @@ def modify(self, spec, width):\n             return Vector(self._elem, new_bitwidth // self._elem.bitwidth())\n         else:\n             return Vector(self._elem.modify(spec, width), self._length)\n+\n     def compiler_ctor(self):\n         return 'v({}, {})'.format(self._elem.compiler_ctor(), self._length)\n+\n     def rust_name(self):\n         return '{}x{}'.format(self._elem.rust_name(), self._length)\n+\n     def type_info(self, platform_info):\n         elem_info = self._elem.type_info(platform_info)\n         return elem_info.vectorize(self._length,\n@@ -163,15 +184,18 @@ class Aggregate(Type):\n     def __init__(self, flatten, elems):\n         self._flatten = flatten\n         self._elems = elems\n-        Type.__init__(self,\n-                      sum(elem.bitwidth() for elem in elems))\n+        Type.__init__(self, sum(elem.bitwidth() for elem in elems))\n+\n     def __repr__(self):\n         return '<Aggregate {}>'.format(self._elems)\n+\n     def compiler_ctor(self):\n         return 'agg({}, vec![{}])'.format('true' if self._flatten else 'false',\n                                           ', '.join(elem.compiler_ctor() for elem in self._elems))\n+\n     def rust_name(self):\n         return '({})'.format(', '.join(elem.rust_name() for elem in self._elems))\n+\n     def type_info(self, platform_info):\n         #return PlatformTypeInfo(None, None, self._llvm_name)\n         return None\n@@ -188,6 +212,7 @@ def __init__(self, spec):\n             spec = [spec]\n \n         self.spec = spec\n+\n     def enumerate(self, width):\n         for spec in self.spec:\n             match = SPEC.match(spec)\n@@ -208,13 +233,13 @@ def enumerate(self, width):\n                     for ctor in type_ctors:\n                         scalar = ctor(bitwidth)\n                         if is_vector:\n-\n                             yield Vector(scalar, width // bitwidth)\n                         else:\n                             yield scalar\n                     bitwidth *= 2\n             else:\n                 print('Failed to parse: `{}`'.format(spec), file=sys.stderr)\n+\n     def resolve(self, width, zero):\n         assert len(self.spec) == 1\n         spec = self.spec[0]\n@@ -272,23 +297,30 @@ def __init__(self, platform, intrinsic, width, llvm_name, ret, args):\n         self._ret = ret.type_info(platform)\n         self._args_raw = args\n         self._args = [arg.type_info(platform) for arg in args]\n+\n     def llvm_name(self):\n         if self._llvm_name.startswith('!'):\n             return self._llvm_name[1:].format(self._ret, *self._args)\n         else:\n             return self._platform.llvm_prefix() + self._llvm_name.format(self._ret, *self._args)\n+\n     def intrinsic_suffix(self):\n         return self._intrinsic.format(self._ret,\n                                       *self._args,\n                                       width = self._width)\n+\n     def intrinsic_name(self):\n         return self._platform.platform().intrinsic_prefix() + self.intrinsic_suffix()\n+\n     def compiler_args(self):\n         return ', '.join(arg.compiler_ctor() for arg in self._args_raw)\n+\n     def compiler_ret(self):\n         return self._ret_raw.compiler_ctor()\n+\n     def compiler_signature(self):\n         return '({}) -> {}'.format(self.compiler_args(), self.compiler_ret())\n+\n     def intrinsic_signature(self):\n         names = 'xyzwabcdef'\n         return '({}) -> {}'.format(', '.join('{}: {}'.format(name, arg.rust_name())\n@@ -410,17 +442,21 @@ def parse_args():\n class ExternBlock(object):\n     def __init__(self):\n         pass\n+\n     def open(self, platform):\n         return 'extern \"platform-intrinsic\" {'\n+\n     def render(self, mono):\n         return '    fn {}{};'.format(mono.intrinsic_name(),\n                                      mono.intrinsic_signature())\n+\n     def close(self):\n         return '}'\n \n class CompilerDefs(object):\n     def __init__(self):\n         pass\n+\n     def open(self, platform):\n         return '''\\\n // Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n@@ -456,6 +492,7 @@ def render(self, mono):\n                       mono.compiler_args(),\n                       mono.compiler_ret(),\n                       mono.llvm_name())\n+\n     def close(self):\n         return '''\\\n         _ => return None,\n@@ -499,6 +536,7 @@ def main():\n         for intr in intrinsics.intrinsics():\n             for mono in intr.monomorphise():\n                 print(out_format.render(mono), file=out)\n+\n     print(out_format.close(), file=out)\n \n if __name__ == '__main__':"}]}