{"sha": "38c82a2180eee975e88017d26fa86726b3594d7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YzgyYTIxODBlZWU5NzVlODgwMTdkMjZmYTg2NzI2YjM1OTRkN2E=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-10T16:41:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-15T19:48:10Z"}, "message": "rustc_resolve: always include core, std and meta in the extern prelude.", "tree": {"sha": "cd3833bbdac1b17d0848930a33342c1e6f58a4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd3833bbdac1b17d0848930a33342c1e6f58a4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c82a2180eee975e88017d26fa86726b3594d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c82a2180eee975e88017d26fa86726b3594d7a", "html_url": "https://github.com/rust-lang/rust/commit/38c82a2180eee975e88017d26fa86726b3594d7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c82a2180eee975e88017d26fa86726b3594d7a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb7a3c76fe826b646a0a5a747292a5643f9e197", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb7a3c76fe826b646a0a5a747292a5643f9e197", "html_url": "https://github.com/rust-lang/rust/commit/9eb7a3c76fe826b646a0a5a747292a5643f9e197"}], "stats": {"total": 226, "additions": 181, "deletions": 45}, "files": [{"sha": "6eef2397f9c6ed9b0cb28e0bd0ca9048aed2c27d", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -100,6 +100,18 @@ enum LoadResult {\n     Loaded(Library),\n }\n \n+enum LoadError<'a> {\n+    LocatorError(locator::Context<'a>),\n+}\n+\n+impl<'a> LoadError<'a> {\n+    fn report(self) -> ! {\n+        match self {\n+            LoadError::LocatorError(mut locate_ctxt) => locate_ctxt.report_errs(),\n+        }\n+    }\n+}\n+\n impl<'a> CrateLoader<'a> {\n     pub fn new(sess: &'a Session, cstore: &'a CStore, local_crate_name: &str) -> Self {\n         CrateLoader {\n@@ -268,16 +280,17 @@ impl<'a> CrateLoader<'a> {\n         (cnum, cmeta)\n     }\n \n-    fn resolve_crate(&mut self,\n-                     root: &Option<CratePaths>,\n-                     ident: Symbol,\n-                     name: Symbol,\n-                     hash: Option<&Svh>,\n-                     extra_filename: Option<&str>,\n-                     span: Span,\n-                     path_kind: PathKind,\n-                     mut dep_kind: DepKind)\n-                     -> (CrateNum, Lrc<cstore::CrateMetadata>) {\n+    fn resolve_crate<'b>(\n+        &'b mut self,\n+        root: &'b Option<CratePaths>,\n+        ident: Symbol,\n+        name: Symbol,\n+        hash: Option<&'b Svh>,\n+        extra_filename: Option<&'b str>,\n+        span: Span,\n+        path_kind: PathKind,\n+        mut dep_kind: DepKind,\n+    ) -> Result<(CrateNum, Lrc<cstore::CrateMetadata>), LoadError<'b>> {\n         info!(\"resolving crate `extern crate {} as {}`\", name, ident);\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             LoadResult::Previous(cnum)\n@@ -321,7 +334,7 @@ impl<'a> CrateLoader<'a> {\n                 };\n \n                 self.load(&mut proc_macro_locator)\n-            }).unwrap_or_else(|| locate_ctxt.report_errs())\n+            }).ok_or_else(move || LoadError::LocatorError(locate_ctxt))?\n         };\n \n         match result {\n@@ -333,10 +346,10 @@ impl<'a> CrateLoader<'a> {\n                 data.dep_kind.with_lock(|data_dep_kind| {\n                     *data_dep_kind = cmp::max(*data_dep_kind, dep_kind);\n                 });\n-                (cnum, data)\n+                Ok((cnum, data))\n             }\n             LoadResult::Loaded(library) => {\n-                self.register_crate(root, ident, span, library, dep_kind)\n+                Ok(self.register_crate(root, ident, span, library, dep_kind))\n             }\n         }\n     }\n@@ -441,7 +454,7 @@ impl<'a> CrateLoader<'a> {\n             let (local_cnum, ..) = self.resolve_crate(\n                 root, dep.name, dep.name, Some(&dep.hash), Some(&dep.extra_filename), span,\n                 PathKind::Dependency, dep_kind,\n-            );\n+            ).unwrap_or_else(|err| err.report());\n             local_cnum\n         })).collect()\n     }\n@@ -695,7 +708,8 @@ impl<'a> CrateLoader<'a> {\n \n         let dep_kind = DepKind::Implicit;\n         let (cnum, data) =\n-            self.resolve_crate(&None, name, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind);\n+            self.resolve_crate(&None, name, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind)\n+                .unwrap_or_else(|err| err.report());\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n@@ -803,7 +817,8 @@ impl<'a> CrateLoader<'a> {\n                 let dep_kind = DepKind::Explicit;\n                 let (_, data) =\n                     self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n-                                       PathKind::Crate, dep_kind);\n+                                       PathKind::Crate, dep_kind)\n+                        .unwrap_or_else(|err| err.report());\n \n                 // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n                 if !data.root.sanitizer_runtime {\n@@ -826,7 +841,8 @@ impl<'a> CrateLoader<'a> {\n             let dep_kind = DepKind::Implicit;\n             let (_, data) =\n                 self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n-                                   PathKind::Crate, dep_kind);\n+                                   PathKind::Crate, dep_kind)\n+                    .unwrap_or_else(|err| err.report());\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n             if !data.root.profiler_runtime {\n@@ -946,7 +962,8 @@ impl<'a> CrateLoader<'a> {\n                                                               None,\n                                                               DUMMY_SP,\n                                                               PathKind::Crate,\n-                                                              DepKind::Implicit);\n+                                                              DepKind::Implicit)\n+                            .unwrap_or_else(|err| err.report());\n                         self.sess.injected_allocator.set(Some(cnum));\n                         data\n                     })\n@@ -1103,7 +1120,7 @@ impl<'a> CrateLoader<'a> {\n                 let (cnum, ..) = self.resolve_crate(\n                     &None, item.ident.name, orig_name, None, None,\n                     item.span, PathKind::Crate, dep_kind,\n-                );\n+                ).unwrap_or_else(|err| err.report());\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();\n                 let path_len = definitions.def_path(def_id.index).data.len();\n@@ -1131,7 +1148,7 @@ impl<'a> CrateLoader<'a> {\n     ) -> CrateNum {\n         let cnum = self.resolve_crate(\n             &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n-        ).0;\n+        ).unwrap_or_else(|err| err.report()).0;\n \n         self.update_extern_crate(\n             cnum,\n@@ -1147,4 +1164,28 @@ impl<'a> CrateLoader<'a> {\n \n         cnum\n     }\n+\n+    pub fn maybe_process_path_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+    ) -> Option<CrateNum> {\n+        let cnum = self.resolve_crate(\n+            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+        ).ok()?.0;\n+\n+        self.update_extern_crate(\n+            cnum,\n+            ExternCrate {\n+                src: ExternCrateSource::Path,\n+                span,\n+                // to have the least priority in `update_extern_crate`\n+                path_len: usize::max_value(),\n+                direct: true,\n+            },\n+            &mut FxHashSet(),\n+        );\n+\n+        Some(cnum)\n+    }\n }"}, {"sha": "10dddfed6a577da4273dc4dada5b69b3cf070985", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -1674,13 +1674,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         let mut extern_prelude: FxHashSet<Name> =\n             session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n-        if !attr::contains_name(&krate.attrs, \"no_core\") {\n-            if !attr::contains_name(&krate.attrs, \"no_std\") {\n-                extern_prelude.insert(Symbol::intern(\"std\"));\n-            } else {\n-                extern_prelude.insert(Symbol::intern(\"core\"));\n-            }\n-        }\n+\n+        // HACK(eddyb) this ignore the `no_{core,std}` attributes.\n+        // FIXME(eddyb) warn (elsewhere) if core/std is used with `no_{core,std}`.\n+        // if !attr::contains_name(&krate.attrs, \"no_core\") {\n+        // if !attr::contains_name(&krate.attrs, \"no_std\") {\n+        extern_prelude.insert(Symbol::intern(\"core\"));\n+        extern_prelude.insert(Symbol::intern(\"std\"));\n+        extern_prelude.insert(Symbol::intern(\"meta\"));\n \n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),\n@@ -1982,7 +1983,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                 \"access to extern crates through prelude is experimental\").emit();\n                 }\n \n-                let crate_root = self.load_extern_prelude_crate_if_needed(ident);\n+                let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n+                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                self.populate_module_if_necessary(&crate_root);\n \n                 let binding = (crate_root, ty::Visibility::Public,\n                                ident.span, Mark::root()).to_name_binding(self.arenas);\n@@ -2010,13 +2013,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         None\n     }\n \n-    fn load_extern_prelude_crate_if_needed(&mut self, ident: Ident) -> Module<'a> {\n-        let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n-        let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-        self.populate_module_if_necessary(&crate_root);\n-        crate_root\n-    }\n-\n     fn hygienic_lexical_parent(&mut self, module: Module<'a>, span: &mut Span)\n                                -> Option<Module<'a>> {\n         if !module.expansion.is_descendant_of(span.ctxt().outer()) {\n@@ -4427,15 +4423,24 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if self.session.features_untracked().extern_prelude {\n             let extern_prelude_names = self.extern_prelude.clone();\n-            for &krate_name in extern_prelude_names.iter() {\n-                let krate_ident = Ident::with_empty_ctxt(krate_name);\n-                let external_prelude_module = self.load_extern_prelude_crate_if_needed(krate_ident);\n+            for &name in extern_prelude_names.iter() {\n+                let ident = Ident::with_empty_ctxt(name);\n+                match self.crate_loader.maybe_process_path_extern(name, ident.span) {\n+                    Some(crate_id) => {\n+                        let crate_root = self.get_module(DefId {\n+                            krate: crate_id,\n+                            index: CRATE_DEF_INDEX,\n+                        });\n+                        self.populate_module_if_necessary(&crate_root);\n \n-                suggestions.extend(\n-                    self.lookup_import_candidates_from_module(\n-                        lookup_name, namespace, external_prelude_module, krate_ident, &filter_fn\n-                    )\n-                );\n+                        suggestions.extend(\n+                            self.lookup_import_candidates_from_module(\n+                                lookup_name, namespace, crate_root, ident, &filter_fn\n+                            )\n+                        );\n+                    }\n+                    None => {}\n+                }\n             }\n         }\n "}, {"sha": "499a322593c60353a1a10f4f0d30560dbfca3470", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/meta.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.rs?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// Tests that `meta` is whitelisted, even if the crate doesn't exist\n+// yet (i.e. it causes a different error than `not-whitelisted.rs`).\n+use meta; //~ ERROR can't find crate for `meta`\n+\n+fn main() {}"}, {"sha": "b8a9b54d26bca58883067ed51cd9ef7dffd18c53", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/meta.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.stderr?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -0,0 +1,9 @@\n+error[E0463]: can't find crate for `meta`\n+  --> $DIR/meta.rs:15:5\n+   |\n+LL | use meta; //~ ERROR can't find crate for `meta`\n+   |     ^^^^ can't find crate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "f95961d2a9b56970c5204ddc6deaab9bce2ce750", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// Tests that arbitrary crates (other than `core`, `std` and `meta`)\n+// aren't allowed without `--extern`, even if they're in the sysroot.\n+use alloc; //~ ERROR unresolved import `alloc`\n+use test; //~ ERROR unresolved import `test`\n+use proc_macro; //~ ERROR unresolved import `proc_macro`\n+\n+fn main() {}"}, {"sha": "0865bd6bea52a584d7388fdd70e65383f7a076e2", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -0,0 +1,21 @@\n+error[E0432]: unresolved import `alloc`\n+  --> $DIR/not-whitelisted.rs:15:5\n+   |\n+LL | use alloc; //~ ERROR unresolved import `alloc`\n+   |     ^^^^^ no `alloc` external crate\n+\n+error[E0432]: unresolved import `test`\n+  --> $DIR/not-whitelisted.rs:16:5\n+   |\n+LL | use test; //~ ERROR unresolved import `test`\n+   |     ^^^^ no `test` external crate\n+\n+error[E0432]: unresolved import `proc_macro`\n+  --> $DIR/not-whitelisted.rs:17:5\n+   |\n+LL | use proc_macro; //~ ERROR unresolved import `proc_macro`\n+   |     ^^^^^^^^^^ no `proc_macro` external crate\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "dfd9fbd27746b0137a16aeabbff617bed84409a2", "filename": "src/test/ui/run-pass/rfcs/rfc-2126-extern-absolute-paths/whitelisted.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fwhitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fwhitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fwhitelisted.rs?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// edition:2018\n+\n+// Tests that `core` and `std` are always available.\n+use core::iter;\n+use std::io;\n+// FIXME(eddyb) Add a `meta` crate to the distribution.\n+// use meta;\n+\n+fn main() {\n+    for _ in iter::once(()) {\n+        io::stdout();\n+    }\n+}"}, {"sha": "cdae815b200d5d19ea266391697aa446f0a2a7c5", "filename": "src/test/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -12,7 +12,7 @@\n // edition:2018\n // compile-pass\n // aux-build:remove-extern-crate.rs\n-// compile-flags:--extern remove_extern_crate --extern core\n+// compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n "}, {"sha": "4984da802c05bc98dd047a7e5b5a4aa5ae89b573", "filename": "src/test/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c82a2180eee975e88017d26fa86726b3594d7a/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=38c82a2180eee975e88017d26fa86726b3594d7a", "patch": "@@ -12,7 +12,7 @@\n // edition:2018\n // compile-pass\n // aux-build:remove-extern-crate.rs\n-// compile-flags:--extern remove_extern_crate --extern core\n+// compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n "}]}