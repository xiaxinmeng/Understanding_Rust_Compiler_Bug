{"sha": "489bff55430c1049c5f80ff7c69e7fd801a4eafd", "node_id": "C_kwDOAAsO6NoAKDQ4OWJmZjU1NDMwYzEwNDljNWY4MGZmN2M2OWU3ZmQ4MDFhNGVhZmQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-18T11:49:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-18T11:49:50Z"}, "message": "Sync from rust 7531d2fdd49966d83830a7b4596c95587b1e9573", "tree": {"sha": "04a0d6a23647fbc01efc912a6df11fc3f3ecf6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a0d6a23647fbc01efc912a6df11fc3f3ecf6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/489bff55430c1049c5f80ff7c69e7fd801a4eafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/489bff55430c1049c5f80ff7c69e7fd801a4eafd", "html_url": "https://github.com/rust-lang/rust/commit/489bff55430c1049c5f80ff7c69e7fd801a4eafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/489bff55430c1049c5f80ff7c69e7fd801a4eafd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f02c4e2ee4a5e86bc14a3fe4d1bee9c3f2fc253", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f02c4e2ee4a5e86bc14a3fe4d1bee9c3f2fc253", "html_url": "https://github.com/rust-lang/rust/commit/8f02c4e2ee4a5e86bc14a3fe4d1bee9c3f2fc253"}, {"sha": "0b58e5278641836ae3bbc93992b4155275241a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b58e5278641836ae3bbc93992b4155275241a9b", "html_url": "https://github.com/rust-lang/rust/commit/0b58e5278641836ae3bbc93992b4155275241a9b"}], "stats": {"total": 51, "additions": 8, "deletions": 43}, "files": [{"sha": "5a889734f215b4007efc699b49e876c289ab0647", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/489bff55430c1049c5f80ff7c69e7fd801a4eafd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489bff55430c1049c5f80ff7c69e7fd801a4eafd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=489bff55430c1049c5f80ff7c69e7fd801a4eafd", "patch": "@@ -715,30 +715,6 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n-                    let content_ty = fx.monomorphize(content_ty);\n-                    let layout = fx.layout_of(content_ty);\n-                    let llsize = fx.bcx.ins().iconst(usize_type, layout.size.bytes() as i64);\n-                    let llalign = fx.bcx.ins().iconst(usize_type, layout.align.abi.bytes() as i64);\n-                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n-\n-                    // Allocate space:\n-                    let def_id =\n-                        match fx.tcx.lang_items().require(rustc_hir::LangItem::ExchangeMalloc) {\n-                            Ok(id) => id,\n-                            Err(s) => {\n-                                fx.tcx\n-                                    .sess\n-                                    .fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n-                            }\n-                        };\n-                    let instance = ty::Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n-                    let func_ref = fx.get_function_ref(instance);\n-                    let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n-                    let ptr = fx.bcx.inst_results(call)[0];\n-                    lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n-                }\n                 Rvalue::NullaryOp(null_op, ty) => {\n                     assert!(\n                         lval.layout()\n@@ -749,7 +725,6 @@ fn codegen_stmt<'tcx>(\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n-                        NullOp::Box => unreachable!(),\n                     };\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);\n@@ -774,18 +749,6 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..) => {}\n \n-        StatementKind::LlvmInlineAsm(asm) => {\n-            match asm.asm.asm.as_str().trim() {\n-                \"\" => {\n-                    // Black box\n-                }\n-                _ => fx.tcx.sess.span_fatal(\n-                    stmt.source_info.span,\n-                    \"Legacy `llvm_asm!` inline assembly is not supported. \\\n-                    Try using the new `asm!` instead.\",\n-                ),\n-            }\n-        }\n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n         StatementKind::CopyNonOverlapping(inner) => {\n             let dst = codegen_operand(fx, &inner.dst);"}, {"sha": "d553fef8c32018153c92be3bf155715c1bea2ee0", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/489bff55430c1049c5f80ff7c69e7fd801a4eafd/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489bff55430c1049c5f80ff7c69e7fd801a4eafd/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=489bff55430c1049c5f80ff7c69e7fd801a4eafd", "patch": "@@ -129,11 +129,13 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(uv) if fx.tcx.is_static(uv.def.did) => {\n-            assert!(uv.substs(fx.tcx).is_empty());\n-            assert!(uv.promoted.is_none());\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+            if fx.tcx.is_static(def.did) =>\n+        {\n+            assert!(substs.is_empty());\n+            assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, uv.def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n@@ -506,7 +508,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         {\n                             return None;\n                         }\n-                        StatementKind::LlvmInlineAsm(_) | StatementKind::CopyNonOverlapping(_) => {\n+                        StatementKind::CopyNonOverlapping(_) => {\n                             return None;\n                         } // conservative handling\n                         StatementKind::Assign(_)"}, {"sha": "8e203b8cfa0637eb761c1af0b8cc1915caf79529", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/489bff55430c1049c5f80ff7c69e7fd801a4eafd/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489bff55430c1049c5f80ff7c69e7fd801a4eafd/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=489bff55430c1049c5f80ff7c69e7fd801a4eafd", "patch": "@@ -174,7 +174,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n                     field_entry.set(\n                         gimli::DW_AT_name,\n-                        AttributeValue::String(field_def.ident.as_str().to_string().into_bytes()),\n+                        AttributeValue::String(field_def.name.as_str().to_string().into_bytes()),\n                     );\n                     field_entry.set(\n                         gimli::DW_AT_data_member_location,"}]}