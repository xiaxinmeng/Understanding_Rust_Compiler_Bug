{"sha": "000e94e67d2b439c9dc3644c124ae4c405624a14", "node_id": "C_kwDOAAsO6NoAKDAwMGU5NGU2N2QyYjQzOWM5ZGMzNjQ0YzEyNGFlNGM0MDU2MjRhMTQ", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-25T16:28:28Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-01T18:11:21Z"}, "message": "diagnostics: account for glob shadowing when linting redundant imports\n\nCo-Authored-By: Vadim Petrochenkov <vadim.petrochenkov@gmail.com>", "tree": {"sha": "41793c548b7b0d526240b3636dc2abb724b7c511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41793c548b7b0d526240b3636dc2abb724b7c511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000e94e67d2b439c9dc3644c124ae4c405624a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000e94e67d2b439c9dc3644c124ae4c405624a14", "html_url": "https://github.com/rust-lang/rust/commit/000e94e67d2b439c9dc3644c124ae4c405624a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000e94e67d2b439c9dc3644c124ae4c405624a14/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2005e300c0266a6527dbfcb573a86c65d043f72f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2005e300c0266a6527dbfcb573a86c65d043f72f", "html_url": "https://github.com/rust-lang/rust/commit/2005e300c0266a6527dbfcb573a86c65d043f72f"}], "stats": {"total": 156, "additions": 142, "deletions": 14}, "files": [{"sha": "5e1d5d8a8fb0f863483d2b4dff2c367a59f9fc3d", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -869,17 +869,19 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let resolution =\n             self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n \n-        if let Some(Finalize { path_span, report_private, .. }) = finalize {\n-            // If the primary binding is unusable, search further and return the shadowed glob\n-            // binding if it exists. What we really want here is having two separate scopes in\n-            // a module - one for non-globs and one for globs, but until that's done use this\n-            // hack to avoid inconsistent resolution ICEs during import validation.\n-            let binding = [resolution.binding, resolution.shadowed_glob].into_iter().find_map(\n-                |binding| match (binding, ignore_binding) {\n+        // If the primary binding is unusable, search further and return the shadowed glob\n+        // binding if it exists. What we really want here is having two separate scopes in\n+        // a module - one for non-globs and one for globs, but until that's done use this\n+        // hack to avoid inconsistent resolution ICEs during import validation.\n+        let binding =\n+            [resolution.binding, resolution.shadowed_glob].into_iter().find_map(|binding| {\n+                match (binding, ignore_binding) {\n                     (Some(binding), Some(ignored)) if ptr::eq(binding, ignored) => None,\n                     _ => binding,\n-                },\n-            );\n+                }\n+            });\n+\n+        if let Some(Finalize { path_span, report_private, .. }) = finalize {\n             let Some(binding) = binding else {\n                 return Err((Determined, Weak::No));\n             };\n@@ -927,15 +929,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            if let Some(ignored) = ignore_binding && ptr::eq(binding, ignored) {\n-                return Err((Determined, Weak::No));\n-            }\n             let usable = this.is_accessible_from(binding.vis, parent_scope.module);\n             if usable { Ok(binding) } else { Err((Determined, Weak::No)) }\n         };\n \n         // Items and single imports are not shadowable, if we have one, then it's determined.\n-        if let Some(binding) = resolution.binding {\n+        if let Some(binding) = binding {\n             if !binding.is_glob_import() {\n                 return check_usable(self, binding);\n             }\n@@ -952,6 +951,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if !self.is_accessible_from(import_vis, parent_scope.module) {\n                 continue;\n             }\n+            if let Some(ignored) = ignore_binding &&\n+                let NameBindingKind::Import { import, .. } = ignored.kind &&\n+                ptr::eq(import, &**single_import) {\n+                // Ignore not just the binding itself, but if it has a shadowed_glob,\n+                // ignore that, too, because this loop is supposed to only process\n+                // named imports.\n+                continue;\n+            }\n             let Some(module) = single_import.imported_module.get() else {\n                 return Err((Undetermined, Weak::No));\n             };\n@@ -989,7 +996,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted\n         // shadowing is enabled, see `macro_expanded_macro_export_errors`).\n         let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();\n-        if let Some(binding) = resolution.binding {\n+        if let Some(binding) = binding {\n             if !unexpanded_macros || ns == MacroNS || restricted_shadowing {\n                 return check_usable(self, binding);\n             } else {"}, {"sha": "511d9d263cf857b51e5547841fe2b6c5c7d4e03a", "filename": "tests/ui/lint/use-redundant/issue-92904.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fissue-92904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fissue-92904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fissue-92904.rs?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+pub struct Foo(bar::Bar);\n+\n+pub mod bar {\n+    pub struct Foo(pub Bar);\n+    pub struct Bar(pub char);\n+}\n+\n+pub fn warning() -> Foo {\n+    use bar::*;\n+    #[deny(unused_imports)]\n+    use self::Foo; // no error\n+    Foo(Bar('a'))\n+}\n+\n+fn main() {}"}, {"sha": "6b1e018d2dc30aece3879b143c8cd8874c84075e", "filename": "tests/ui/lint/use-redundant/use-redundant-glob-parent.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob-parent.rs?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+#![warn(unused_imports)]\n+\n+pub mod bar {\n+    pub struct Foo(pub Bar);\n+    pub struct Bar(pub char);\n+}\n+\n+use bar::*;\n+\n+pub fn warning() -> Foo {\n+    use bar::Foo; //~ WARNING imported redundantly\n+    Foo(Bar('a'))\n+}\n+\n+fn main() {}"}, {"sha": "2c3b33452702b4ab587db082358eabe46bbf136b", "filename": "tests/ui/lint/use-redundant/use-redundant-glob-parent.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob-parent.stderr?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,17 @@\n+warning: the item `Foo` is imported redundantly\n+  --> $DIR/use-redundant-glob-parent.rs:12:9\n+   |\n+LL | use bar::*;\n+   |     ------ the item `Foo` is already imported here\n+...\n+LL |     use bar::Foo;\n+   |         ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/use-redundant-glob-parent.rs:2:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "bd9e51b6f59426949d4b12d7c0d779697f7b3174", "filename": "tests/ui/lint/use-redundant/use-redundant-glob.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob.rs?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![warn(unused_imports)]\n+\n+pub mod bar {\n+    pub struct Foo(pub Bar);\n+    pub struct Bar(pub char);\n+}\n+\n+pub fn warning() -> bar::Foo {\n+    use bar::*;\n+    use bar::Foo; //~ WARNING imported redundantly\n+    Foo(Bar('a'))\n+}\n+\n+fn main() {}"}, {"sha": "d3b406d82b6db7cc6e6a867941d281c188eabb77", "filename": "tests/ui/lint/use-redundant/use-redundant-glob.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-glob.stderr?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,16 @@\n+warning: the item `Foo` is imported redundantly\n+  --> $DIR/use-redundant-glob.rs:11:9\n+   |\n+LL |     use bar::*;\n+   |         ------ the item `Foo` is already imported here\n+LL |     use bar::Foo;\n+   |         ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/use-redundant-glob.rs:2:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "0fb60840f8ad05f562a2fa8a864df2fe2c789a2e", "filename": "tests/ui/lint/use-redundant/use-redundant-multiple-namespaces.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-multiple-namespaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-multiple-namespaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-multiple-namespaces.rs?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+#![allow(nonstandard_style)]\n+\n+pub mod bar {\n+    pub struct Foo { pub bar: Bar }\n+    pub struct Bar(pub char);\n+}\n+\n+pub mod x {\n+    use crate::bar;\n+    pub const Foo: bar::Bar = bar::Bar('a');\n+}\n+\n+pub fn warning() -> bar::Foo {\n+    #![deny(unused_imports)] // no error\n+    use bar::*;\n+    use x::Foo;\n+    Foo { bar: Foo }\n+}\n+\n+fn main() {}"}, {"sha": "c97a3d34163c1e3a517b693504cb176ccf5402da", "filename": "tests/ui/lint/use-redundant/use-redundant-not-parent.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-not-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e94e67d2b439c9dc3644c124ae4c405624a14/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-not-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fuse-redundant%2Fuse-redundant-not-parent.rs?ref=000e94e67d2b439c9dc3644c124ae4c405624a14", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+pub mod bar {\n+    pub struct Foo(pub Bar);\n+    pub struct Bar(pub char);\n+}\n+\n+pub mod x {\n+    pub struct Foo(pub crate::bar::Bar);\n+}\n+\n+pub fn warning() -> x::Foo {\n+    use bar::*;\n+    #[deny(unused_imports)]\n+    use x::Foo; // no error\n+    Foo(Bar('a'))\n+}\n+\n+fn main() {}"}]}