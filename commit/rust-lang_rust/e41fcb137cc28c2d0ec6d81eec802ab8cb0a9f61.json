{"sha": "e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MWZjYjEzN2NjMjhjMmQwZWM2ZDgxZWVjODAyYWI4Y2IwYTlmNjE=", "commit": {"author": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-23T05:33:38Z"}, "committer": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-23T05:33:38Z"}, "message": "rustfmt: add support to specify the Rust edition as argument\n\nThe new `--edition` command line argument allow the setting of the\ndesired Rust edition to be used.\n\nRefs: #3104.\n\nSigned-off-by: Otavio Salvador <otavio@ossystems.com.br>", "tree": {"sha": "9599f4ca184770ac36f53cc64b1aa6dfeb68d779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9599f4ca184770ac36f53cc64b1aa6dfeb68d779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "html_url": "https://github.com/rust-lang/rust/commit/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61/comments", "author": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eab9714e457cd5d7715a880cb4535e453e861e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eab9714e457cd5d7715a880cb4535e453e861e7", "html_url": "https://github.com/rust-lang/rust/commit/2eab9714e457cd5d7715a880cb4535e453e861e7"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "204efa19541c5e5ec3cf6fb344791addc7075458", "filename": "src/bin/main.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "patch": "@@ -25,8 +25,8 @@ use failure::err_msg;\n use getopts::{Matches, Options};\n \n use rustfmt::{\n-    load_config, CliOptions, Color, Config, EmitMode, ErrorKind, FileLines, FileName, Input,\n-    Session, Verbosity,\n+    load_config, CliOptions, Color, Config, Edition, EmitMode, ErrorKind, FileLines, FileName,\n+    Input, Session, Verbosity,\n };\n \n fn main() {\n@@ -102,6 +102,7 @@ fn make_opts() -> Options {\n          found reverts to the input file path\",\n         \"[Path for the configuration file]\",\n     );\n+    opts.optopt(\"\", \"edition\", \"Rust edition to use\", \"[2015|2018]\");\n     opts.optopt(\n         \"\",\n         \"color\",\n@@ -437,6 +438,7 @@ struct GetOptsOptions {\n     emit_mode: EmitMode,\n     backup: bool,\n     check: bool,\n+    edition: Edition,\n     color: Option<Color>,\n     file_lines: FileLines, // Default is all lines in all files.\n     unstable_features: bool,\n@@ -500,6 +502,10 @@ impl GetOptsOptions {\n             options.emit_mode = emit_mode_from_emit_str(emit_str)?;\n         }\n \n+        if let Some(ref edition_str) = matches.opt_str(\"edition\") {\n+            options.edition = edition_from_edition_str(edition_str)?;\n+        }\n+\n         if matches.opt_present(\"backup\") {\n             options.backup = true;\n         }\n@@ -553,6 +559,7 @@ impl CliOptions for GetOptsOptions {\n         if let Some(error_on_unformatted) = self.error_on_unformatted {\n             config.set().error_on_unformatted(error_on_unformatted);\n         }\n+        config.set().edition(self.edition);\n         if self.check {\n             config.set().emit_mode(EmitMode::Diff);\n         } else {\n@@ -571,6 +578,14 @@ impl CliOptions for GetOptsOptions {\n     }\n }\n \n+fn edition_from_edition_str(edition_str: &str) -> Result<Edition, failure::Error> {\n+    match edition_str {\n+        \"2015\" => Ok(Edition::Edition2015),\n+        \"2018\" => Ok(Edition::Edition2018),\n+        _ => Err(format_err!(\"Invalid value for `--edition`\")),\n+    }\n+}\n+\n fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode, failure::Error> {\n     match emit_str {\n         \"files\" => Ok(EmitMode::Files),"}]}