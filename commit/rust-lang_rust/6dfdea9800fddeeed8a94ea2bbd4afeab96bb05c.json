{"sha": "6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZmRlYTk4MDBmZGRlZWVkOGE5NGVhMmJiZDRhZmVhYjk2YmIwNWM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-13T21:36:19Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-22T14:21:33Z"}, "message": "Make the THIR unsafeck use the `thir_body` query", "tree": {"sha": "a354df7f3551d24d75ec997a385cf43067002fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a354df7f3551d24d75ec997a385cf43067002fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "html_url": "https://github.com/rust-lang/rust/commit/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f64eb1fe65f37c3895375c03374cb8680bcd09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f64eb1fe65f37c3895375c03374cb8680bcd09e", "html_url": "https://github.com/rust-lang/rust/commit/6f64eb1fe65f37c3895375c03374cb8680bcd09e"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "b5d26e81a5175b936fdf3dd457a0aa248aefffcc", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "patch": "@@ -46,6 +46,18 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     let body_owner_kind = tcx.hir().body_owner_kind(id);\n     let typeck_results = tcx.typeck_opt_const_arg(def);\n \n+    if tcx.sess.opts.debugging_opts.thir_unsafeck {\n+        // Ensure unsafeck is ran before we steal the THIR.\n+        match def {\n+            ty::WithOptConstParam { did, const_param_did: Some(const_param_did) } => {\n+                tcx.ensure().thir_check_unsafety_for_const_arg((did, const_param_did))\n+            }\n+            ty::WithOptConstParam { did, const_param_did: None } => {\n+                tcx.ensure().thir_check_unsafety(did)\n+            }\n+        }\n+    }\n+\n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n         Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. }) => {"}, {"sha": "d0d376bd3e3d197225f5b2ef08c019850362a452", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "patch": "@@ -1,8 +1,8 @@\n use crate::thir::visit::{self, Visitor};\n-use crate::thir::*;\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_middle::thir::*;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n@@ -328,26 +328,23 @@ impl UnsafeOpKind {\n \n // FIXME: checking unsafety for closures should be handled by their parent body,\n // as they inherit their \"safety context\" from their declaration site.\n-pub fn check_unsafety<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    thir: &Thir<'tcx>,\n-    expr: ExprId,\n-    def_id: LocalDefId,\n-    hir_id: hir::HirId,\n-) {\n+pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) {\n+    let (thir, expr) = tcx.thir_body(def);\n+    let thir = &thir.borrow();\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n     let body_unsafety = tcx.hir().fn_sig_by_hir_id(hir_id).map_or(BodyUnsafety::Safe, |fn_sig| {\n         if fn_sig.header.unsafety == hir::Unsafety::Unsafe {\n             BodyUnsafety::Unsafe(fn_sig.span)\n         } else {\n             BodyUnsafety::Safe\n         }\n     });\n-    let body_target_features = &tcx.codegen_fn_attrs(def_id).target_features;\n+    let body_target_features = &tcx.codegen_fn_attrs(def.did).target_features;\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n     let is_const = match tcx.hir().body_owner_kind(hir_id) {\n         hir::BodyOwnerKind::Closure => false,\n-        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def_id.to_def_id()),\n+        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def.did.to_def_id()),\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n     };\n     let mut visitor = UnsafetyVisitor {\n@@ -362,28 +359,17 @@ pub fn check_unsafety<'tcx>(\n     visitor.visit_expr(&thir[expr]);\n }\n \n-crate fn thir_check_unsafety_inner<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let body_id = tcx.hir().body_owned_by(hir_id);\n-    let body = tcx.hir().body(body_id);\n-    let (thir, expr) = cx::build_thir(tcx, def, &body.value);\n-    check_unsafety(tcx, &thir, expr, def.did, hir_id);\n-}\n-\n crate fn thir_check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n     if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n         tcx.thir_check_unsafety_for_const_arg(def)\n     } else {\n-        thir_check_unsafety_inner(tcx, ty::WithOptConstParam::unknown(def_id))\n+        check_unsafety(tcx, ty::WithOptConstParam::unknown(def_id))\n     }\n }\n \n crate fn thir_check_unsafety_for_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (did, param_did): (LocalDefId, DefId),\n ) {\n-    thir_check_unsafety_inner(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+    check_unsafety(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n }"}, {"sha": "1a60b1de7fd984e44237ccc53cffdbf1f1230cf6", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "patch": "@@ -1,4 +1,5 @@\n-use crate::thir::*;\n+use rustc_middle::thir::*;\n+use rustc_middle::ty::Const;\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n     fn thir(&self) -> &'a Thir<'tcx>;"}, {"sha": "df0de7a959030649f4536062140bb05726c6c7ec", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.thir.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr?ref=6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "patch": "@@ -58,6 +58,14 @@ LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrins\n    = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n    = note: `transmute` is only allowed in constants and statics for now\n \n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n    |\n@@ -68,49 +76,41 @@ LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n    = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0658]: `transmute` is not allowed in constant functions\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n    |\n LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n    |\n-LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n    = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n-   |\n-LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n    |\n-LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n    |\n LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n error: aborting due to 12 previous errors\n "}, {"sha": "435334c322808bbf92107c9a36a0cc378cf2a5c8", "filename": "src/test/ui/issues/issue-16538.thir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr?ref=6dfdea9800fddeeed8a94ea2bbd4afeab96bb05c", "patch": "@@ -1,3 +1,11 @@\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:14:34\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   |                                  ^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-16538.rs:14:27\n    |\n@@ -13,14 +21,6 @@ LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    = help: the trait `Sync` is not implemented for `*const usize`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:14:34\n-   |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   |                                  ^^^^ use of extern static\n-   |\n-   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0133, E0277."}]}