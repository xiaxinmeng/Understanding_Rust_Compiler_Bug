{"sha": "c312e04d45fc6254cc25f7277b2d84ff3128c036", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMTJlMDRkNDVmYzYyNTRjYzI1ZjcyNzdiMmQ4NGZmMzEyOGMwMzY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-10T07:38:17Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-10T15:23:59Z"}, "message": "Check user types are well-formed in MIR borrow check\n\nAlso update some tests so that they don't have user types on `_` in\nunreachable code.", "tree": {"sha": "0671c5a494c5cb62f3ad464b6ecc909da0d44a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0671c5a494c5cb62f3ad464b6ecc909da0d44a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c312e04d45fc6254cc25f7277b2d84ff3128c036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c312e04d45fc6254cc25f7277b2d84ff3128c036", "html_url": "https://github.com/rust-lang/rust/commit/c312e04d45fc6254cc25f7277b2d84ff3128c036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c312e04d45fc6254cc25f7277b2d84ff3128c036/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ec10431318bb6b4ed0a01744c93a683918d592", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ec10431318bb6b4ed0a01744c93a683918d592", "html_url": "https://github.com/rust-lang/rust/commit/55ec10431318bb6b4ed0a01744c93a683918d592"}], "stats": {"total": 326, "additions": 249, "deletions": 77}, "files": [{"sha": "e11f452e16be1e349010fe360cdc1126a5fabafe", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -970,15 +970,21 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n-        relate_tys::relate_type_and_user_type(\n+        let ty = relate_tys::relate_type_and_user_type(\n             self.infcx,\n             a,\n             v,\n             b,\n             locations,\n             category,\n             self.borrowck_context.as_mut().map(|x| &mut **x),\n-        )\n+        )?;\n+        self.prove_predicate(\n+            ty::Predicate::WellFormed(ty),\n+            locations,\n+            category,\n+        );\n+        Ok(())\n     }\n \n     fn eq_opaque_type_and_type("}, {"sha": "1e279aef07981001ec7713df81c7338ba9249d32", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -10,7 +10,7 @@\n \n use borrow_check::nll::constraints::OutlivesConstraint;\n use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n-use rustc::infer::canonical::{Canonical, CanonicalVarInfos};\n+use rustc::infer::canonical::{Canonical, CanonicalVarInfos, CanonicalVarValues};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::mir::ConstraintCategory;\n use rustc::traits::query::Fallible;\n@@ -70,7 +70,7 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n     locations: Locations,\n     category: ConstraintCategory,\n     borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n-) -> Fallible<()> {\n+) -> Fallible<Ty<'tcx>> {\n     debug!(\n         \"sub_type_and_user_type(a={:?}, b={:?}, locations={:?})\",\n         a, b, locations\n@@ -85,13 +85,24 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n     // variance to get the right relationship.\n     let v1 = ty::Contravariant.xform(v);\n \n-    TypeRelating::new(\n+    let mut type_relating = TypeRelating::new(\n         infcx.tcx,\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n         v1,\n         b_variables,\n-    ).relate(&b_value, &a)?;\n-    Ok(())\n+    );\n+    type_relating.relate(&b_value, &a)?;\n+\n+    Ok(b.substitute(\n+        infcx.tcx,\n+        &CanonicalVarValues {\n+            var_values: type_relating\n+                .canonical_var_values\n+                .into_iter()\n+                .map(|x| x.expect(\"unsubstituted canonical variable\"))\n+                .collect(),\n+        },\n+    ))\n }\n \n struct TypeRelating<'me, 'gcx: 'tcx, 'tcx: 'me, D>"}, {"sha": "1156c773b8c5a35412ba2a8f1cedab74cf55cf5d", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/associated-types-subtyping-1.rs:36:13\n+   |\n+LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/associated-types-subtyping-1.rs:44:12\n+   |\n+LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let b: <T as Trait<'b>>::Type = make_any();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "479cb359a781f2d3437f12031c2093cd2a99afc3", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(unused_variables)]\n \n+fn make_any<T>() -> T {  loop {} }\n+\n trait Trait<'a> {\n     type Type;\n \n@@ -22,35 +22,35 @@ fn method1<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'a>>::Type = a;\n }\n \n fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n }\n \n fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n }\n \n fn method4<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'b>>::Type = b;\n }\n "}, {"sha": "f711541fbd5c2f6a466c229b3b5802229d0c010c", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "741feb1f9eaf4184b1aa46989016011c86cf6e3d", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears, even when the\n@@ -49,7 +47,10 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n+    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n+    // `_x` is changed to `_`\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn main() {"}, {"sha": "7959d1b6c2300091f254bd20b722d982f6c51dbe", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:13\n    |\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 46:15\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:46:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:18\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:46:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "8d4f3d1e87fba8dd7a3a186363707c8346d03409", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -0,0 +1,33 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-free-region-ordering-caller.rs:18:12\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-free-region-ordering-caller.rs:23:12\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let y: Paramd<'a> = Paramd { x: a };\n+LL |     let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'a &'b usize> = None;//~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "66b16744cc7df38586facf55c2c8f1c3250422ea", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test various ways to construct a pointer with a longer lifetime\n // than the thing it points at and ensure that they result in\n // errors. See also regions-free-region-ordering-callee.rs"}, {"sha": "a3645995b5ea2284ab6c4d3aee1e179bd2fd919a", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:20:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:18:12\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n@@ -9,7 +9,7 @@ LL |     let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n    |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:25:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:23:12\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n@@ -20,7 +20,7 @@ LL |     let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n    |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:29:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     --------- these two types are declared with different lifetimes..."}, {"sha": "9747602f1ba481343e3468f14faeac69cad1dc14", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -13,6 +13,22 @@ note: borrowed value must be valid for the lifetime 'a as defined on the functio\n LL | fn call1<'a>(x: &'a usize) {\n    |          ^^\n \n-error: aborting due to previous error\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-free-region-ordering-caller1.rs:19:27\n+   |\n+LL |     let z: &'a & usize = &(&y);\n+   |                           ^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:10...\n+  --> $DIR/regions-free-region-ordering-caller1.rs:15:10\n+   |\n+LL | fn call1<'a>(x: &'a usize) {\n+   |          ^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "2eb4ccf1c35f356e5b33c2674831956052ddae8d", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:5\n+   |\n+LL |     wf::<&'x T>();\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'x`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "65594ab8f2e29220ee603252622bf2e83b52fbe0", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Illustrates the \"projection gap\": in this test, even though we know\n // that `T::Foo: 'x`, that does not tell us that `T: 'x`, because\n // there might be other ways for the caller of `func` to show that"}, {"sha": "41ae515bb9a1615a67801d74b84565c917e7e6f5", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:28:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:10\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n    |             -- help: consider adding an explicit lifetime bound `T: 'x`...\n@@ -8,7 +8,7 @@ LL |     wf::<&'x T>();\n    |          ^^^^^\n    |\n note: ...so that the reference type `&'x T` does not outlive the data it points at\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:28:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:10\n    |\n LL |     wf::<&'x T>();\n    |          ^^^^^"}, {"sha": "836f8c28a737a81d54d10c84bf56624dcde6363e", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container-wc.rs:46:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "22ec58d1367bcef60137a534f60a88a950bd4831", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears, even when the\n@@ -43,7 +41,9 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { };\n+    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n+    // `_x` is changed to `_`\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n     //~^ ERROR reference has a longer lifetime\n }\n "}, {"sha": "e5bc52d7b663f7e8c0110f9b4ce99e05d23484f3", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:46:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:46:13\n    |\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 40:15\n-  --> $DIR/regions-outlives-projection-container-wc.rs:40:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 38:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:38:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 40:18\n-  --> $DIR/regions-outlives-projection-container-wc.rs:40:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 38:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:38:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "126f50577c84f9fe955f0b45e9c6401b86daa6e2", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -0,0 +1,46 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:50:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:68:13\n+   |\n+LL | fn without_assoc<'a,'b>() {\n+   |                  -- -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:77:5\n+   |\n+LL | fn call_with_assoc<'a,'b>() {\n+   |                    -- -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+...\n+LL |     call::<&'a WithAssoc<TheType<'b>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:84:5\n+   |\n+LL | fn call_without_assoc<'a,'b>() {\n+   |                       -- -- lifetime `'b` defined here\n+   |                       |\n+   |                       lifetime `'a` defined here\n+...\n+LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "08fd7080e52c6153fa583138935d9635db68ea77", "filename": "src/test/ui/regions/regions-outlives-projection-container.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears. Issue #22246.\n@@ -47,7 +45,10 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n+    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n+    // `_x` is changed to `_`\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn with_assoc1<'a,'b>() where 'b : 'a {\n@@ -57,14 +58,15 @@ fn with_assoc1<'a,'b>() where 'b : 'a {\n     // which is &'b (), must outlive 'a, so 'b : 'a must hold, and\n     // that is in the where clauses, so we're fine.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { };\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n }\n \n fn without_assoc<'a,'b>() {\n     // Here there are no associated types but there is a requirement\n     // that `'b:'a` holds because the `'b` appears in `TheType<'b>`.\n \n-    let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n+    let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn call_with_assoc<'a,'b>() {"}, {"sha": "2c37d94361603843d2eab9ac9f09db0e0edc870c", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c312e04d45fc6254cc25f7277b2d84ff3128c036/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=c312e04d45fc6254cc25f7277b2d84ff3128c036", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:50:12\n+  --> $DIR/regions-outlives-projection-container.rs:50:13\n    |\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n-  --> $DIR/regions-outlives-projection-container.rs:44:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 42:15\n+  --> $DIR/regions-outlives-projection-container.rs:42:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n-  --> $DIR/regions-outlives-projection-container.rs:44:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 42:18\n+  --> $DIR/regions-outlives-projection-container.rs:42:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:67:12\n+  --> $DIR/regions-outlives-projection-container.rs:68:13\n    |\n-LL |     let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 63:18\n-  --> $DIR/regions-outlives-projection-container.rs:63:18\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 64:18\n+  --> $DIR/regions-outlives-projection-container.rs:64:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 63:21\n-  --> $DIR/regions-outlives-projection-container.rs:63:21\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 64:21\n+  --> $DIR/regions-outlives-projection-container.rs:64:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:75:12\n+  --> $DIR/regions-outlives-projection-container.rs:77:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 70:20\n-  --> $DIR/regions-outlives-projection-container.rs:70:20\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 72:20\n+  --> $DIR/regions-outlives-projection-container.rs:72:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 70:23\n-  --> $DIR/regions-outlives-projection-container.rs:70:23\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 72:23\n+  --> $DIR/regions-outlives-projection-container.rs:72:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:82:12\n+  --> $DIR/regions-outlives-projection-container.rs:84:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 79:23\n-  --> $DIR/regions-outlives-projection-container.rs:79:23\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 81:23\n+  --> $DIR/regions-outlives-projection-container.rs:81:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 79:26\n-  --> $DIR/regions-outlives-projection-container.rs:79:26\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 81:26\n+  --> $DIR/regions-outlives-projection-container.rs:81:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^"}]}