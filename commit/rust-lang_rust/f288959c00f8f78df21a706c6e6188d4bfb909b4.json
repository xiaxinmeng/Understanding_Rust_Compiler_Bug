{"sha": "f288959c00f8f78df21a706c6e6188d4bfb909b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODg5NTljMDBmOGY3OGRmMjFhNzA2YzZlNjE4OGQ0YmZiOTA5YjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T11:14:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T11:14:45Z"}, "message": "Limit publicness to crate where possible and remove unused imports", "tree": {"sha": "f41ae1ef270f18ec30959326333f6d4cb7421ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41ae1ef270f18ec30959326333f6d4cb7421ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f288959c00f8f78df21a706c6e6188d4bfb909b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f288959c00f8f78df21a706c6e6188d4bfb909b4", "html_url": "https://github.com/rust-lang/rust/commit/f288959c00f8f78df21a706c6e6188d4bfb909b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f288959c00f8f78df21a706c6e6188d4bfb909b4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b113e88ddb399f92f0d044caa35e668d2499bdd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b113e88ddb399f92f0d044caa35e668d2499bdd9", "html_url": "https://github.com/rust-lang/rust/commit/b113e88ddb399f92f0d044caa35e668d2499bdd9"}], "stats": {"total": 456, "additions": 225, "deletions": 231}, "files": [{"sha": "0ac3bec74c7b79fa31ef053667c3662ba6f0b446", "filename": "src/abi/comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -5,7 +5,7 @@ use rustc::mir;\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n-pub fn add_args_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+pub(super) fn add_args_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     fx.add_global_comment(format!(\n         \"kind  loc.idx   param    pass mode                            ty\"\n     ));\n@@ -49,14 +49,14 @@ pub(super) fn add_arg_comment<'tcx>(\n     ));\n }\n \n-pub fn add_locals_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     fx.add_global_comment(String::new());\n     fx.add_global_comment(format!(\n         \"kind  local ty                              size align (abi,pref)\"\n     ));\n }\n \n-pub fn add_local_place_comments<'tcx>(\n+pub(super) fn add_local_place_comments<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: CPlace<'tcx>,\n     local: Local,"}, {"sha": "2e7a73a484d3429e982a9006621843d9b268f370", "filename": "src/abi/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -10,10 +10,10 @@ use cranelift_codegen::ir::AbiParam;\n use self::pass_mode::*;\n use crate::prelude::*;\n \n-pub use self::returning::{can_return_to_ssa_var, codegen_return};\n+pub(crate) use self::returning::{can_return_to_ssa_var, codegen_return};\n \n // Copied from https://github.com/rust-lang/rust/blob/c2f4c57296f0d929618baed0b0d6eb594abf01eb/src/librustc/ty/layout.rs#L2349\n-pub fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {\n+pub(crate) fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {\n     let ty = instance.monomorphic_ty(tcx);\n     match ty.kind {\n         ty::FnDef(..) |\n@@ -163,7 +163,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n     }\n }\n \n-pub fn get_function_name_and_sig<'tcx>(\n+pub(crate) fn get_function_name_and_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     triple: &target_lexicon::Triple,\n     inst: Instance<'tcx>,\n@@ -180,7 +180,7 @@ pub fn get_function_name_and_sig<'tcx>(\n }\n \n /// Instance must be monomorphized\n-pub fn import_function<'tcx>(\n+pub(crate) fn import_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend>,\n     inst: Instance<'tcx>,\n@@ -193,7 +193,7 @@ pub fn import_function<'tcx>(\n \n impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     /// Instance must be monomorphized\n-    pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n+    pub(crate) fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n         let func_id = import_function(self.tcx, self.module, inst);\n         let func_ref = self\n             .module\n@@ -234,7 +234,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         results\n     }\n \n-    pub fn easy_call(\n+    pub(crate) fn easy_call(\n         &mut self,\n         name: &str,\n         args: &[CValue<'tcx>],\n@@ -288,7 +288,7 @@ fn local_place<'tcx>(\n     fx.local_map[&local]\n }\n \n-pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block: Block, should_codegen_locals: bool) {\n+pub(crate) fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block: Block, should_codegen_locals: bool) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n \n     #[cfg(debug_assertions)]\n@@ -423,7 +423,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block\n         .jump(*fx.block_map.get(START_BLOCK).unwrap(), &[]);\n }\n \n-pub fn codegen_terminator_call<'tcx>(\n+pub(crate) fn codegen_terminator_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     span: Span,\n     func: &Operand<'tcx>,\n@@ -444,7 +444,7 @@ pub fn codegen_terminator_call<'tcx>(\n             ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n \n         if fx.tcx.symbol_name(instance).name.as_str().starts_with(\"llvm.\") {\n-            crate::intrinsics::llvm::codegen_llvm_intrinsic_call(\n+            crate::intrinsics::codegen_llvm_intrinsic_call(\n                 fx,\n                 &fx.tcx.symbol_name(instance).name.as_str(),\n                 substs,\n@@ -640,7 +640,7 @@ fn codegen_call_inner<'tcx>(\n     }\n }\n \n-pub fn codegen_drop<'tcx>(\n+pub(crate) fn codegen_drop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     span: Span,\n     drop_place: CPlace<'tcx>,"}, {"sha": "bed4574717e6df7b0b64f450e457b6123bcc00aa", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n pub(super) use EmptySinglePair::*;\n \n #[derive(Copy, Clone, Debug)]\n-pub enum PassMode {\n+pub(super) enum PassMode {\n     NoPass,\n     ByVal(Type),\n     ByValPair(Type, Type),\n@@ -76,7 +76,7 @@ impl PassMode {\n     }\n }\n \n-pub fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyLayout<'tcx>) -> PassMode {\n+pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyLayout<'tcx>) -> PassMode {\n     if layout.is_zst() {\n         // WARNING zst arguments must never be passed, as that will break CastKind::ClosureFnPointer\n         PassMode::NoPass"}, {"sha": "59836f881b649893a1edbe3d57a4340138bb7f46", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -5,7 +5,7 @@ fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> TyLay\n     fx.layout_of(fx.monomorphize(&fx.mir.local_decls[RETURN_PLACE].ty))\n }\n \n-pub fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyLayout<'tcx>) -> bool {\n+pub(crate) fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyLayout<'tcx>) -> bool {\n     match get_pass_mode(tcx, dest_layout) {\n         PassMode::NoPass | PassMode::ByVal(_) => true,\n         // FIXME Make it possible to return ByValPair and ByRef to an ssa var.\n@@ -101,7 +101,7 @@ pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     (call_inst, meta)\n }\n \n-pub fn codegen_return(fx: &mut FunctionCx<impl Backend>) {\n+pub(crate) fn codegen_return(fx: &mut FunctionCx<impl Backend>) {\n     match get_pass_mode(fx.tcx, return_layout(fx)) {\n         PassMode::NoPass | PassMode::ByRef { sized: true } => {\n             fx.bcx.ins().return_(&[]);"}, {"sha": "b8240f4a822bc0fdedeaddfc8c1db6f8b79c3b04", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -13,7 +13,7 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n /// Returns whether an allocator shim was created\n-pub fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) -> bool {\n+pub(crate) fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) -> bool {\n     let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n         use rustc::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)"}, {"sha": "b82e16217ef6112542b27ae9dcd359a4d13d7dbb", "filename": "src/analyze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -4,12 +4,12 @@ use rustc::mir::StatementKind::*;\n use rustc_index::vec::IndexVec;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum SsaKind {\n+pub(crate) enum SsaKind {\n     NotSsa,\n     Ssa,\n }\n \n-pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> IndexVec<Local, SsaKind> {\n+pub(crate) fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> IndexVec<Local, SsaKind> {\n     let mut flag_map = fx.mir.local_decls.iter().map(|local_decl| {\n         if fx.clif_type(fx.monomorphize(&local_decl.ty)).is_some() {\n             SsaKind::Ssa"}, {"sha": "6ebb713b26761e4077e801c446f06371e3533804", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -23,7 +23,7 @@ enum ArchiveEntry {\n     File(PathBuf),\n }\n \n-pub struct ArArchiveBuilder<'a> {\n+pub(crate) struct ArArchiveBuilder<'a> {\n     config: ArchiveConfig<'a>,\n     src_archives: Vec<(PathBuf, ar::Archive<File>)>,\n     // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at"}, {"sha": "d277b33e1b624d0db70d6664c2b675b046ab01f8", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -8,7 +8,7 @@ use crate::prelude::*;\n #[no_mangle]\n pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t = libc::PTHREAD_MUTEX_INITIALIZER;\n \n-pub fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBuilder<'_>) {\n+pub(crate) fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBuilder<'_>) {\n     if std::env::var(\"CG_CLIF_JIT\").is_ok () {\n         // When using JIT, dylibs won't find the __cg_clif_global_atomic_mutex data object defined here,\n         // so instead define it in the cg_clif dylib.\n@@ -46,7 +46,7 @@ pub fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBui\n     bcx.ins().call(pthread_mutex_init, &[atomic_mutex, nullptr]);\n }\n \n-pub fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     let atomic_mutex = fx.module.declare_data(\n         \"__cg_clif_global_atomic_mutex\",\n         Linkage::Import,\n@@ -71,7 +71,7 @@ pub fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     fx.bcx.ins().call(pthread_mutex_lock, &[atomic_mutex]);\n }\n \n-pub fn unlock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(crate) fn unlock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     let atomic_mutex = fx.module.declare_data(\n         \"__cg_clif_global_atomic_mutex\",\n         Linkage::Import,"}, {"sha": "723f1bca55a18ec3d19f57ee74b841cbcf7ddc56", "filename": "src/backend.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -14,7 +14,7 @@ use gimli::SectionId;\n \n use crate::debuginfo::{DebugReloc, DebugRelocName};\n \n-pub trait WriteMetadata {\n+pub(crate) trait WriteMetadata {\n     fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool);\n }\n \n@@ -38,7 +38,7 @@ impl WriteMetadata for object::write::Object {\n     }\n }\n \n-pub trait WriteDebugInfo {\n+pub(crate) trait WriteDebugInfo {\n     type SectionId;\n \n     fn add_debug_section(&mut self, name: SectionId, data: Vec<u8>) -> Self::SectionId;\n@@ -99,7 +99,7 @@ impl WriteDebugInfo for ObjectProduct {\n     }\n }\n \n-pub trait Emit {\n+pub(crate) trait Emit {\n     fn emit(self) -> Vec<u8>;\n }\n \n@@ -109,7 +109,7 @@ impl Emit for ObjectProduct {\n     }\n }\n \n-pub fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n+pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n     let triple = crate::build_isa(sess, true).triple().clone();\n     let mut metadata_object =\n         object::write::Object::new(triple.binary_format, triple.architecture);\n@@ -118,9 +118,9 @@ pub fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> V\n     metadata_object.write().unwrap()\n }\n \n-pub type Backend = impl cranelift_module::Backend<Product: Emit + WriteDebugInfo>;\n+pub(crate) type Backend = impl cranelift_module::Backend<Product: Emit + WriteDebugInfo>;\n \n-pub fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+pub(crate) fn make_module(sess: &Session, name: String) -> Module<Backend> {\n     let module: Module<ObjectBackend> = Module::new(\n         ObjectBuilder::new(\n             crate::build_isa(sess, true),"}, {"sha": "a901258163847e2b85de9fd9e11dce371b506b72", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -3,7 +3,7 @@ use rustc_index::vec::IndexVec;\n \n use crate::prelude::*;\n \n-pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n+pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n@@ -202,7 +202,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     context.clear();\n }\n \n-pub fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n+pub(crate) fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n     tcx.sess.time(\"verify clif ir\", || {\n         let flags = settings::Flags::new(settings::builder());\n         match ::cranelift_codegen::verify_function(&func, &flags) {\n@@ -724,7 +724,7 @@ fn codegen_array_len<'tcx>(\n     }\n }\n \n-pub fn trans_place<'tcx>(\n+pub(crate) fn trans_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: &Place<'tcx>,\n ) -> CPlace<'tcx> {\n@@ -792,7 +792,7 @@ pub fn trans_place<'tcx>(\n     cplace\n }\n \n-pub fn trans_operand<'tcx>(\n+pub(crate) fn trans_operand<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     operand: &Operand<'tcx>,\n ) -> CValue<'tcx> {"}, {"sha": "08dc68b08d7ef796a4f561a73c66a2f809e72cae", "filename": "src/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-pub fn clif_intcast(\n+pub(crate) fn clif_intcast(\n     fx: &mut FunctionCx<'_, '_, impl Backend>,\n     val: Value,\n     to: Type,\n@@ -48,7 +48,7 @@ pub fn clif_intcast(\n     }\n }\n \n-pub fn clif_int_or_float_cast(\n+pub(crate) fn clif_int_or_float_cast(\n     fx: &mut FunctionCx<'_, '_, impl Backend>,\n     from: Value,\n     from_signed: bool,"}, {"sha": "e2bb5b17ba2d3926d774e2bbf9ab104a4f457d9c", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -2,7 +2,7 @@\n \n use crate::prelude::*;\n \n-pub fn maybe_codegen<'tcx>(\n+pub(crate) fn maybe_codegen<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     checked: bool,"}, {"sha": "09133d94db237f6f10661231b5ea3d05fb62c730", "filename": "src/common.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -6,11 +6,11 @@ use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n \n use crate::prelude::*;\n \n-pub fn mir_var(loc: Local) -> Variable {\n+pub(crate) fn mir_var(loc: Local) -> Variable {\n     Variable::with_u32(loc.index() as u32)\n }\n \n-pub fn pointer_ty(tcx: TyCtxt) -> types::Type {\n+pub(crate) fn pointer_ty(tcx: TyCtxt) -> types::Type {\n     match tcx.data_layout.pointer_size.bits() {\n         16 => types::I16,\n         32 => types::I32,\n@@ -19,7 +19,7 @@ pub fn pointer_ty(tcx: TyCtxt) -> types::Type {\n     }\n }\n \n-pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n+pub(crate) fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n     match scalar.value {\n         Primitive::Int(int, _sign) => match int {\n             Integer::I8 => types::I8,\n@@ -72,7 +72,7 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n }\n \n /// Is a pointer to this type a fat ptr?\n-pub fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+pub(crate) fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc_hir::Mutability::Not });\n     match &tcx.layout_of(ParamEnv::reveal_all().and(ptr_ty)).unwrap().abi {\n         Abi::Scalar(_) => false,\n@@ -81,7 +81,7 @@ pub fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-pub fn codegen_icmp(\n+pub(crate) fn codegen_icmp(\n     fx: &mut FunctionCx<'_, '_, impl Backend>,\n     intcc: IntCC,\n     lhs: Value,\n@@ -126,7 +126,7 @@ pub fn codegen_icmp(\n     }\n }\n \n-pub fn codegen_icmp_imm(\n+pub(crate) fn codegen_icmp_imm(\n     fx: &mut FunctionCx<'_, '_, impl Backend>,\n     intcc: IntCC,\n     lhs: Value,\n@@ -207,15 +207,15 @@ fn resolve_128bit_value_imm(func: &Function, val: Value) -> Option<u128> {\n     Some(msb << 64 | lsb)\n }\n \n-pub fn resolve_value_imm(func: &Function, val: Value) -> Option<u128> {\n+pub(crate) fn resolve_value_imm(func: &Function, val: Value) -> Option<u128> {\n     if func.dfg.value_type(val) == types::I128 {\n         resolve_128bit_value_imm(func, val)\n     } else {\n         resolve_normal_value_imm(func, val).map(|imm| imm as u64 as u128)\n     }\n }\n \n-pub fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n+pub(crate) fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n     assert!(ty.is_int());\n     let min = match (ty, signed) {\n         (types::I8, false) | (types::I16, false) | (types::I32, false) | (types::I64, false) => {\n@@ -245,7 +245,7 @@ pub fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n     (min, max)\n }\n \n-pub fn type_sign(ty: Ty<'_>) -> bool {\n+pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n     match ty.kind {\n         ty::Ref(..) | ty::RawPtr(..) | ty::FnPtr(..) | ty::Char | ty::Uint(..) | ty::Bool => false,\n         ty::Int(..) => true,\n@@ -254,30 +254,30 @@ pub fn type_sign(ty: Ty<'_>) -> bool {\n     }\n }\n \n-pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n+pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n-    pub tcx: TyCtxt<'tcx>,\n-    pub module: &'clif mut Module<B>,\n-    pub pointer_type: Type, // Cached from module\n+    pub(crate) tcx: TyCtxt<'tcx>,\n+    pub(crate) module: &'clif mut Module<B>,\n+    pub(crate) pointer_type: Type, // Cached from module\n \n-    pub instance: Instance<'tcx>,\n-    pub mir: &'tcx Body<'tcx>,\n+    pub(crate) instance: Instance<'tcx>,\n+    pub(crate) mir: &'tcx Body<'tcx>,\n \n-    pub bcx: FunctionBuilder<'clif>,\n-    pub block_map: IndexVec<BasicBlock, Block>,\n-    pub local_map: HashMap<Local, CPlace<'tcx>>,\n+    pub(crate) bcx: FunctionBuilder<'clif>,\n+    pub(crate) block_map: IndexVec<BasicBlock, Block>,\n+    pub(crate) local_map: HashMap<Local, CPlace<'tcx>>,\n \n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n-    pub caller_location: Option<CValue<'tcx>>,\n+    pub(crate) caller_location: Option<CValue<'tcx>>,\n \n     /// See [crate::optimize::code_layout] for more information.\n-    pub cold_blocks: EntitySet<Block>,\n+    pub(crate) cold_blocks: EntitySet<Block>,\n \n-    pub clif_comments: crate::pretty_clif::CommentWriter,\n-    pub constants_cx: &'clif mut crate::constant::ConstantCx,\n-    pub vtables: &'clif mut HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n+    pub(crate) clif_comments: crate::pretty_clif::CommentWriter,\n+    pub(crate) constants_cx: &'clif mut crate::constant::ConstantCx,\n+    pub(crate) vtables: &'clif mut HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n \n-    pub source_info_set: indexmap::IndexSet<SourceInfo>,\n+    pub(crate) source_info_set: indexmap::IndexSet<SourceInfo>,\n }\n \n impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n@@ -333,7 +333,7 @@ impl<'tcx, B: Backend> BackendTypes for FunctionCx<'_, 'tcx, B> {\n }\n \n impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n-    pub fn monomorphize<T>(&self, value: &T) -> T\n+    pub(crate) fn monomorphize<T>(&self, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -344,26 +344,26 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         )\n     }\n \n-    pub fn clif_type(&self, ty: Ty<'tcx>) -> Option<Type> {\n+    pub(crate) fn clif_type(&self, ty: Ty<'tcx>) -> Option<Type> {\n         clif_type_from_ty(self.tcx, ty)\n     }\n \n-    pub fn get_block(&self, bb: BasicBlock) -> Block {\n+    pub(crate) fn get_block(&self, bb: BasicBlock) -> Block {\n         *self.block_map.get(bb).unwrap()\n     }\n \n-    pub fn get_local_place(&mut self, local: Local) -> CPlace<'tcx> {\n+    pub(crate) fn get_local_place(&mut self, local: Local) -> CPlace<'tcx> {\n         *self.local_map.get(&local).unwrap_or_else(|| {\n             panic!(\"Local {:?} doesn't exist\", local);\n         })\n     }\n \n-    pub fn set_debug_loc(&mut self, source_info: mir::SourceInfo) {\n+    pub(crate) fn set_debug_loc(&mut self, source_info: mir::SourceInfo) {\n         let (index, _) = self.source_info_set.insert_full(source_info);\n         self.bcx.set_srcloc(SourceLoc::new(index as u32));\n     }\n \n-    pub fn get_caller_location(&mut self, span: Span) -> CValue<'tcx> {\n+    pub(crate) fn get_caller_location(&mut self, span: Span) -> CValue<'tcx> {\n         if let Some(loc) = self.caller_location {\n             // `#[track_caller]` is used; return caller location instead of current location.\n             return loc;\n@@ -382,7 +382,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         )\n     }\n \n-    pub fn triple(&self) -> &target_lexicon::Triple {\n+    pub(crate) fn triple(&self) -> &target_lexicon::Triple {\n         self.module.isa().triple()\n     }\n }"}, {"sha": "98a69c11cdd29f308c9b504c4b0f724f76b03191", "filename": "src/constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -19,7 +19,7 @@ use cranelift_module::*;\n use crate::prelude::*;\n \n #[derive(Default)]\n-pub struct ConstantCx {\n+pub(crate) struct ConstantCx {\n     todo: Vec<TodoItem>,\n     done: FxHashSet<DataId>,\n }\n@@ -31,15 +31,15 @@ enum TodoItem {\n }\n \n impl ConstantCx {\n-    pub fn finalize(mut self, tcx: TyCtxt<'_>, module: &mut Module<impl Backend>) {\n+    pub(crate) fn finalize(mut self, tcx: TyCtxt<'_>, module: &mut Module<impl Backend>) {\n         //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n         //println!(\"done {:?}\", self.done);\n         self.done.clear();\n     }\n }\n \n-pub fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n+pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n     constants_cx.todo.push(TodoItem::Static(def_id));\n }\n \n@@ -56,7 +56,7 @@ fn codegen_static_ref<'tcx>(\n     cplace_for_dataid(fx, layout, local_data_id)\n }\n \n-pub fn trans_constant<'tcx>(\n+pub(crate) fn trans_constant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n@@ -77,7 +77,7 @@ pub fn trans_constant<'tcx>(\n     trans_const_value(fx, const_)\n }\n \n-pub fn trans_const_value<'tcx>(\n+pub(crate) fn trans_const_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> CValue<'tcx> {\n@@ -489,7 +489,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     }\n }\n \n-pub fn mir_operand_get_const_val<'tcx>(\n+pub(crate) fn mir_operand_get_const_val<'tcx>(\n     fx: &FunctionCx<'_, 'tcx, impl Backend>,\n     operand: &Operand<'tcx>,\n ) -> Option<&'tcx Const<'tcx>> {"}, {"sha": "16527353fbc4c2030d5524fc64ba448ed1ebb437", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -8,7 +8,7 @@ use crate::backend::WriteDebugInfo;\n use super::DebugContext;\n \n impl DebugContext<'_> {\n-    pub fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n+    pub(crate) fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n         let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n         let root = self.dwarf.unit.root();\n         let root = self.dwarf.unit.get_mut(root);\n@@ -41,15 +41,15 @@ impl DebugContext<'_> {\n }\n \n #[derive(Clone)]\n-pub struct DebugReloc {\n-    pub offset: u32,\n-    pub size: u8,\n-    pub name: DebugRelocName,\n-    pub addend: i64,\n+pub(crate) struct DebugReloc {\n+    pub(crate) offset: u32,\n+    pub(crate) size: u8,\n+    pub(crate) name: DebugRelocName,\n+    pub(crate) addend: i64,\n }\n \n #[derive(Clone)]\n-pub enum DebugRelocName {\n+pub(crate) enum DebugRelocName {\n     Section(SectionId),\n     Symbol(usize),\n }"}, {"sha": "0870f89e3d83d9bdc7c39850411cdce6d600f0ea", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -3,7 +3,7 @@ use std::path::{Component, Path};\n \n use crate::prelude::*;\n \n-use rustc_span::{FileName, SourceFileAndLine};\n+use rustc_span::{FileName, SourceFileAndLine, Pos};\n \n use cranelift_codegen::binemit::CodeOffset;\n \n@@ -162,7 +162,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             let current_file_changed = if let Some(last_file) = &last_file {\n                 // If the allocations are not equal, then the files may still be equal, but that\n                 // is not a problem, as this is just an optimization.\n-                !Lrc::ptr_eq(last_file, &file)\n+                !rustc_data_structures::sync::Lrc::ptr_eq(last_file, &file)\n             } else {\n                 true\n             };"}, {"sha": "95fde120a9c139850901412040f94dcacf6912d7", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -13,7 +13,7 @@ use gimli::write::{\n };\n use gimli::{Encoding, Format, LineEncoding, Register, RunTimeEndian, X86_64};\n \n-pub use emit::{DebugReloc, DebugRelocName};\n+pub(crate) use emit::{DebugReloc, DebugRelocName};\n \n fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     use rustc::ty::layout::Endian;\n@@ -24,7 +24,7 @@ fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     }\n }\n \n-pub struct DebugContext<'tcx> {\n+pub(crate) struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n     endian: RunTimeEndian,\n@@ -37,7 +37,7 @@ pub struct DebugContext<'tcx> {\n }\n \n impl<'tcx> DebugContext<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>, address_size: u8) -> Self {\n+    pub(crate) fn new(tcx: TyCtxt<'tcx>, address_size: u8) -> Self {\n         let encoding = Encoding {\n             format: Format::Dwarf32,\n             // TODO: this should be configurable\n@@ -187,7 +187,7 @@ impl<'tcx> DebugContext<'tcx> {\n     }\n }\n \n-pub struct FunctionDebugContext<'a, 'tcx> {\n+pub(crate) struct FunctionDebugContext<'a, 'tcx> {\n     debug_context: &'a mut DebugContext<'tcx>,\n     entry_id: UnitEntryId,\n     symbol: usize,\n@@ -196,7 +196,7 @@ pub struct FunctionDebugContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n-    pub fn new(\n+    pub(crate) fn new(\n         debug_context: &'a mut DebugContext<'tcx>,\n         instance: Instance<'tcx>,\n         func_id: FuncId,\n@@ -250,7 +250,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         var_id\n     }\n \n-    pub fn define(\n+    pub(crate) fn define(\n         &mut self,\n         context: &Context,\n         isa: &dyn TargetIsa,"}, {"sha": "a6d6d814fc96fa467039a4e6fb1d1fe2cd19e5e1", "filename": "src/discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -2,7 +2,7 @@\n \n use crate::prelude::*;\n \n-pub fn codegen_set_discriminant<'tcx>(\n+pub(crate) fn codegen_set_discriminant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: CPlace<'tcx>,\n     variant_index: VariantIdx,\n@@ -52,7 +52,7 @@ pub fn codegen_set_discriminant<'tcx>(\n     }\n }\n \n-pub fn codegen_get_discriminant<'tcx>(\n+pub(crate) fn codegen_get_discriminant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     value: CValue<'tcx>,\n     dest_layout: TyLayout<'tcx>,"}, {"sha": "d4582e6f1ff95813bcfa2c5870290e33f4b22069", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -89,7 +89,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     let formats = tcx.dependency_formats(LOCAL_CRATE);\n     let data = &formats\n         .iter()\n-        .find(|(crate_type, _data)| *crate_type == CrateType::Executable)\n+        .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)\n         .unwrap()\n         .1;\n     for &(cnum, _) in &crate_info.used_crates_dynamic {"}, {"sha": "7f46150252e240aa023421fbef7a94c9e27d0a30", "filename": "src/driver/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -1,23 +1,23 @@\n use std::any::Any;\n \n use rustc::middle::cstore::EncodedMetadata;\n-use rustc::mir::mono::{Linkage as RLinkage, Visibility};\n+use rustc::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n \n mod aot;\n #[cfg(not(target_arch = \"wasm32\"))]\n mod jit;\n \n-pub fn codegen_crate(\n+pub(crate) fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n     if std::env::var(\"CG_CLIF_JIT\").is_ok()\n-        && tcx.sess.crate_types.get().contains(&CrateType::Executable)\n+        && tcx.sess.crate_types.get().contains(&rustc_session::config::CrateType::Executable)\n     {\n         #[cfg(not(target_arch = \"wasm32\"))]\n         let _: ! = jit::run_jit(tcx);"}, {"sha": "e1a0066fc48e346a65eba232c695c2c40eaaef23", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n \n use rustc::ty::subst::SubstsRef;\n \n-pub fn codegen_llvm_intrinsic_call<'tcx>(\n+pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     intrinsic: &str,\n     substs: SubstsRef<'tcx>,"}, {"sha": "c6db8504a80eed0a481091df6a8eba58856616ff", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -1,6 +1,8 @@\n-pub mod llvm;\n+mod llvm;\n mod simd;\n \n+pub(crate) use llvm::codegen_llvm_intrinsic_call;\n+\n use crate::prelude::*;\n \n macro intrinsic_pat {\n@@ -332,7 +334,7 @@ macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n     );\n }\n \n-pub fn codegen_intrinsic_call<'tcx>(\n+pub(crate) fn codegen_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],"}, {"sha": "303ef3f7f9489cd5d299bf775d1b9f2c2e196f54", "filename": "src/lib.rs", "status": "modified", "additions": 43, "deletions": 53, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -62,62 +62,52 @@ mod value_and_place;\n mod vtable;\n \n mod prelude {\n-    pub use std::any::Any;\n-    pub use std::collections::{HashMap, HashSet};\n-    pub use std::convert::{TryFrom, TryInto};\n-\n-    pub use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n-    pub use rustc_span::{Pos, Span};\n-\n-    pub use rustc::bug;\n-    pub use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-    pub use rustc::mir::{self, interpret::AllocId, mono::MonoItem, *};\n-    pub use rustc_session::{\n-        config::{CrateType, Lto},\n-        Session,\n-    };\n-    pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout, VariantIdx};\n-    pub use rustc::ty::{\n-        self, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable,\n+    pub(crate) use std::collections::HashMap;\n+    pub(crate) use std::convert::{TryFrom, TryInto};\n+\n+    pub(crate) use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n+    pub(crate) use rustc_span::Span;\n+\n+    pub(crate) use rustc::bug;\n+    pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+    pub(crate) use rustc::mir::{self, *};\n+    pub(crate) use rustc_session::Session;\n+    pub(crate) use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout, VariantIdx};\n+    pub(crate) use rustc::ty::{\n+        self, FnSig, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeAndMut, TypeFoldable,\n     };\n \n-    pub use rustc_data_structures::{\n-        fx::{FxHashMap, FxHashSet},\n-        sync::Lrc,\n-    };\n+    pub(crate) use rustc_data_structures::fx::FxHashMap;\n+\n+    pub(crate) use rustc_index::vec::Idx;\n+\n+    pub(crate) use rustc_codegen_ssa::traits::*;\n+    pub(crate) use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n \n-    pub use rustc_index::vec::Idx;\n-\n-    pub use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n-    pub use rustc_codegen_ssa::traits::*;\n-    pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n-\n-    pub use cranelift_codegen::Context;\n-    pub use cranelift_codegen::entity::EntitySet;\n-    pub use cranelift_codegen::ir::{AbiParam, Block, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n-    pub use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n-    pub use cranelift_codegen::ir::function::Function;\n-    pub use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n-    pub use cranelift_codegen::ir::types;\n-    pub use cranelift_codegen::isa::{self, CallConv};\n-    pub use cranelift_codegen::settings::{self, Configurable};\n-    pub use cranelift_frontend::{FunctionBuilder, FunctionBuilderContext, Variable};\n-    pub use cranelift_module::{\n-        self, Backend, DataContext, DataId, FuncId, FuncOrDataId, Linkage, Module,\n+    pub(crate) use cranelift_codegen::Context;\n+    pub(crate) use cranelift_codegen::entity::EntitySet;\n+    pub(crate) use cranelift_codegen::ir::{AbiParam, Block, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n+    pub(crate) use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n+    pub(crate) use cranelift_codegen::ir::function::Function;\n+    pub(crate) use cranelift_codegen::ir::types;\n+    pub(crate) use cranelift_codegen::isa::{self, CallConv};\n+    pub(crate) use cranelift_codegen::settings::{self, Configurable};\n+    pub(crate) use cranelift_frontend::{FunctionBuilder, FunctionBuilderContext, Variable};\n+    pub(crate) use cranelift_module::{\n+        self, Backend, DataContext, DataId, FuncId, Linkage, Module,\n     };\n \n-    pub use crate::abi::*;\n-    pub use crate::base::{trans_operand, trans_place};\n-    pub use crate::cast::*;\n-    pub use crate::common::*;\n-    pub use crate::debuginfo::{DebugContext, FunctionDebugContext};\n-    pub use crate::pointer::Pointer;\n-    pub use crate::trap::*;\n-    pub use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n-    pub use crate::CodegenCx;\n-\n-    pub struct PrintOnPanic<F: Fn() -> String>(pub F);\n+    pub(crate) use crate::abi::*;\n+    pub(crate) use crate::base::{trans_operand, trans_place};\n+    pub(crate) use crate::cast::*;\n+    pub(crate) use crate::common::*;\n+    pub(crate) use crate::debuginfo::{DebugContext, FunctionDebugContext};\n+    pub(crate) use crate::pointer::Pointer;\n+    pub(crate) use crate::trap::*;\n+    pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n+    pub(crate) use crate::CodegenCx;\n+\n+    pub(crate) struct PrintOnPanic<F: Fn() -> String>(pub F);\n     impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n         fn drop(&mut self) {\n             if ::std::thread::panicking() {\n@@ -126,12 +116,12 @@ mod prelude {\n         }\n     }\n \n-    pub macro unimpl_fatal($tcx:expr, $span:expr, $($tt:tt)*) {\n+    pub(crate) macro unimpl_fatal($tcx:expr, $span:expr, $($tt:tt)*) {\n         $tcx.sess.span_fatal($span, &format!($($tt)*));\n     }\n }\n \n-pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n+pub(crate) struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n     tcx: TyCtxt<'tcx>,\n     module: &'clif mut Module<B>,\n     constants_cx: ConstantCx,"}, {"sha": "6b4c4353964baf829469978e08d42b459ff6cb97", "filename": "src/linkage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n \n-pub fn get_clif_linkage(mono_item: MonoItem, linkage: RLinkage, visibility: Visibility) -> Linkage {\n+pub(crate) fn get_clif_linkage(mono_item: MonoItem, linkage: RLinkage, visibility: Visibility) -> Linkage {\n     match (linkage, visibility) {\n         (RLinkage::External, Visibility::Default) => Linkage::Export,\n         (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n@@ -11,7 +11,7 @@ pub fn get_clif_linkage(mono_item: MonoItem, linkage: RLinkage, visibility: Visi\n     }\n }\n \n-pub fn get_static_ref_linkage(tcx: TyCtxt, def_id: DefId) -> Linkage {\n+pub(crate) fn get_static_ref_linkage(tcx: TyCtxt, def_id: DefId) -> Linkage {\n     let fn_attrs = tcx.codegen_fn_attrs(def_id);\n \n     if let Some(linkage) = fn_attrs.linkage {"}, {"sha": "81f9e0ebad98701fc4792d175760a3f5682777f7", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -2,7 +2,7 @@ use crate::prelude::*;\n \n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n-pub fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) {\n+pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) {\n     use rustc::middle::lang_items::StartFnLangItem;\n     use rustc_session::config::EntryFnType;\n "}, {"sha": "748d4075a702e87156f38bdb71a8c194cca328a9", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::Target;\n \n use crate::backend::WriteMetadata;\n \n-pub struct CraneliftMetadataLoader;\n+pub(crate) struct CraneliftMetadataLoader;\n \n impl MetadataLoader for CraneliftMetadataLoader {\n     fn get_rlib_metadata(\n@@ -59,7 +59,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n }\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub fn write_metadata<P: WriteMetadata>(tcx: TyCtxt<'_>, product: &mut P) -> EncodedMetadata {\n+pub(crate) fn write_metadata<P: WriteMetadata>(tcx: TyCtxt<'_>, product: &mut P) -> EncodedMetadata {\n     use flate2::write::DeflateEncoder;\n     use flate2::Compression;\n     use std::io::Write;"}, {"sha": "b0d04f12279895b133d5fc1d7996e597dfb11d77", "filename": "src/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-pub fn bin_op_to_intcc(bin_op: BinOp, signed: bool) -> Option<IntCC> {\n+pub(crate) fn bin_op_to_intcc(bin_op: BinOp, signed: bool) -> Option<IntCC> {\n     use BinOp::*;\n     use IntCC::*;\n     Some(match bin_op {\n@@ -51,7 +51,7 @@ fn codegen_compare_bin_op<'tcx>(\n     CValue::by_val(val, fx.layout_of(fx.tcx.types.bool))\n }\n \n-pub fn codegen_binop<'tcx>(\n+pub(crate) fn codegen_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -100,7 +100,7 @@ pub fn codegen_binop<'tcx>(\n     }\n }\n \n-pub fn trans_bool_binop<'tcx>(\n+pub(crate) fn trans_bool_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -121,7 +121,7 @@ pub fn trans_bool_binop<'tcx>(\n     CValue::by_val(res, fx.layout_of(fx.tcx.types.bool))\n }\n \n-pub fn trans_int_binop<'tcx>(\n+pub(crate) fn trans_int_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -192,7 +192,7 @@ pub fn trans_int_binop<'tcx>(\n     CValue::by_val(val, in_lhs.layout())\n }\n \n-pub fn trans_checked_int_binop<'tcx>(\n+pub(crate) fn trans_checked_int_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -297,7 +297,7 @@ pub fn trans_checked_int_binop<'tcx>(\n     out_place.to_cvalue(fx)\n }\n \n-pub fn trans_float_binop<'tcx>(\n+pub(crate) fn trans_float_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -342,7 +342,7 @@ pub fn trans_float_binop<'tcx>(\n     CValue::by_val(res, in_lhs.layout())\n }\n \n-pub fn trans_ptr_binop<'tcx>(\n+pub(crate) fn trans_ptr_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,"}, {"sha": "d59df98e7500ccc410c09268fb4d1b90b4e2c48a", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n mod code_layout;\n mod stack2reg;\n \n-pub fn optimize_function<'tcx>(\n+pub(crate) fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n     instance: Instance<'tcx>,"}, {"sha": "854a7cd44018faef0128dc81ca21cec3480c7251", "filename": "src/pointer.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -3,33 +3,33 @@ use crate::prelude::*;\n use cranelift_codegen::ir::immediates::Offset32;\n \n #[derive(Copy, Clone, Debug)]\n-pub struct Pointer {\n+pub(crate) struct Pointer {\n     base: PointerBase,\n     offset: Offset32,\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub enum PointerBase {\n+pub(crate) enum PointerBase {\n     Addr(Value),\n     Stack(StackSlot),\n }\n \n impl Pointer {\n-    pub fn new(addr: Value) -> Self {\n+    pub(crate) fn new(addr: Value) -> Self {\n         Pointer {\n             base: PointerBase::Addr(addr),\n             offset: Offset32::new(0),\n         }\n     }\n \n-    pub fn stack_slot(stack_slot: StackSlot) -> Self {\n+    pub(crate) fn stack_slot(stack_slot: StackSlot) -> Self {\n         Pointer {\n             base: PointerBase::Stack(stack_slot),\n             offset: Offset32::new(0),\n         }\n     }\n \n-    pub fn const_addr<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, addr: i64) -> Self {\n+    pub(crate) fn const_addr<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, addr: i64) -> Self {\n         let addr = fx.bcx.ins().iconst(fx.pointer_type, addr);\n         Pointer {\n             base: PointerBase::Addr(addr),\n@@ -38,11 +38,11 @@ impl Pointer {\n     }\n \n     #[cfg(debug_assertions)]\n-    pub fn base_and_offset(self) -> (PointerBase, Offset32) {\n+    pub(crate) fn base_and_offset(self) -> (PointerBase, Offset32) {\n         (self.base, self.offset)\n     }\n \n-    pub fn get_addr<'a, 'tcx>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n+    pub(crate) fn get_addr<'a, 'tcx>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n         match self.base {\n             PointerBase::Addr(base_addr) => {\n                 let offset: i64 = self.offset.into();\n@@ -56,15 +56,15 @@ impl Pointer {\n         }\n     }\n \n-    pub fn offset<'a, 'tcx>(\n+    pub(crate) fn offset<'a, 'tcx>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         extra_offset: Offset32,\n     ) -> Self {\n         self.offset_i64(fx, extra_offset.into())\n     }\n \n-    pub fn offset_i64<'a, 'tcx>(\n+    pub(crate) fn offset_i64<'a, 'tcx>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         extra_offset: i64,\n@@ -92,7 +92,7 @@ impl Pointer {\n         }\n     }\n \n-    pub fn offset_value<'a, 'tcx>(\n+    pub(crate) fn offset_value<'a, 'tcx>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         extra_offset: Value,\n@@ -112,7 +112,7 @@ impl Pointer {\n         }\n     }\n \n-    pub fn load<'a, 'tcx>(\n+    pub(crate) fn load<'a, 'tcx>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         ty: Type,\n@@ -130,7 +130,7 @@ impl Pointer {\n         }\n     }\n \n-    pub fn store<'a, 'tcx>(\n+    pub(crate) fn store<'a, 'tcx>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         value: Value,"}, {"sha": "911b215bf13781d0830d0e7654bb8c13cd2d4e1b", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -64,13 +64,13 @@ use crate::prelude::*;\n /// ```\n \n #[derive(Debug)]\n-pub struct CommentWriter {\n+pub(crate) struct CommentWriter {\n     global_comments: Vec<String>,\n     entity_comments: HashMap<AnyEntity, String>,\n }\n \n impl CommentWriter {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n+    pub(crate) fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n         let global_comments = if cfg!(debug_assertions) {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name.as_str()),\n@@ -97,11 +97,11 @@ impl CommentWriter {\n \n #[cfg(debug_assertions)]\n impl CommentWriter {\n-    pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n+    pub(crate) fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.global_comments.push(comment.into());\n     }\n \n-    pub fn add_comment<S: Into<String> + AsRef<str>, E: Into<AnyEntity>>(\n+    pub(crate) fn add_comment<S: Into<String> + AsRef<str>, E: Into<AnyEntity>>(\n         &mut self,\n         entity: E,\n         comment: S,\n@@ -186,11 +186,11 @@ impl FuncWriter for &'_ CommentWriter {\n \n #[cfg(debug_assertions)]\n impl<'a, 'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n-    pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n+    pub(crate) fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.clif_comments.add_global_comment(comment);\n     }\n \n-    pub fn add_comment<S: Into<String> + AsRef<str>, E: Into<AnyEntity>>(\n+    pub(crate) fn add_comment<S: Into<String> + AsRef<str>, E: Into<AnyEntity>>(\n         &mut self,\n         entity: E,\n         comment: S,\n@@ -200,7 +200,7 @@ impl<'a, 'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n }\n \n #[cfg(debug_assertions)]\n-pub fn write_clif_file<'tcx>(\n+pub(crate) fn write_clif_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     postfix: &str,\n     instance: Instance<'tcx>,"}, {"sha": "de433cca514a6f8fe60d928bcaf970da8763ec2f", "filename": "src/target_features_whitelist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Ftarget_features_whitelist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Ftarget_features_whitelist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftarget_features_whitelist.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -115,7 +115,7 @@ const WASM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n ///\n /// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n /// iterator!\n-pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n+pub(crate) fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n     ARM_WHITELIST\n         .iter()\n         .cloned()\n@@ -127,7 +127,7 @@ pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol\n         .chain(WASM_WHITELIST.iter().cloned())\n }\n \n-pub fn target_feature_whitelist(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n+pub(crate) fn target_feature_whitelist(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n     match &*sess.target.target.arch {\n         \"arm\" => ARM_WHITELIST,\n         \"aarch64\" => AARCH64_WHITELIST,"}, {"sha": "d63e86db29d9873c8db3ab2aac75c39be2b6d6d8", "filename": "src/trap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -55,7 +55,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n /// Use this when `rustc_codegen_llvm` would insert a call to the panic handler.\n ///\n /// Trap code: user0\n-pub fn trap_panic(\n+pub(crate) fn trap_panic(\n     fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>,\n     msg: impl AsRef<str>,\n ) {\n@@ -67,7 +67,7 @@ pub fn trap_panic(\n /// so you can **not** add instructions to it afterwards.\n ///\n /// Trap code: user65535\n-pub fn trap_unreachable(\n+pub(crate) fn trap_unreachable(\n     fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>,\n     msg: impl AsRef<str>,\n ) {\n@@ -78,7 +78,7 @@ pub fn trap_unreachable(\n /// Like `trap_unreachable` but returns a fake value of the specified type.\n ///\n /// Trap code: user65535\n-pub fn trap_unreachable_ret_value<'tcx>(\n+pub(crate) fn trap_unreachable_ret_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n     dest_layout: TyLayout<'tcx>,\n     msg: impl AsRef<str>,\n@@ -92,7 +92,7 @@ pub fn trap_unreachable_ret_value<'tcx>(\n /// to it afterwards.\n ///\n /// Trap code: user65535\n-pub fn trap_unimplemented(\n+pub(crate) fn trap_unimplemented(\n     fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>,\n     msg: impl AsRef<str>,\n ) {\n@@ -104,7 +104,7 @@ pub fn trap_unimplemented(\n /// Like `trap_unimplemented` but returns a fake value of the specified type.\n ///\n /// Trap code: user65535\n-pub fn trap_unimplemented_ret_value<'tcx>(\n+pub(crate) fn trap_unimplemented_ret_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n     dest_layout: TyLayout<'tcx>,\n     msg: impl AsRef<str>,"}, {"sha": "d6a85deda7807881fe43942a3c2e477776b9c6ee", "filename": "src/unsize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -8,7 +8,7 @@ use crate::prelude::*;\n /// The `old_info` argument is a bit funny. It is intended for use\n /// in an upcast, where the new vtable for an object will be derived\n /// from the old one.\n-pub fn unsized_info<'tcx>(\n+pub(crate) fn unsized_info<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     source: Ty<'tcx>,\n     target: Ty<'tcx>,\n@@ -84,7 +84,7 @@ fn unsize_thin_ptr<'tcx>(\n \n /// Coerce `src`, which is a reference to a value of type `src_ty`,\n /// to a value of type `dst_ty` and store the result in `dst`\n-pub fn coerce_unsized_into<'tcx>(\n+pub(crate) fn coerce_unsized_into<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     src: CValue<'tcx>,\n     dst: CPlace<'tcx>,\n@@ -137,7 +137,7 @@ pub fn coerce_unsized_into<'tcx>(\n \n // Adapted from https://github.com/rust-lang/rust/blob/2a663555ddf36f6b041445894a8c175cd1bc718c/src/librustc_codegen_ssa/glue.rs\n \n-pub fn size_and_align_of_dst<'tcx>(\n+pub(crate) fn size_and_align_of_dst<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     layout: TyLayout<'tcx>,\n     info: Value,"}, {"sha": "41fe85795c2992d8e3724da13af08fe7c8d68eb1", "filename": "src/value_and_place.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -62,7 +62,7 @@ fn scalar_pair_calculate_b_offset(tcx: TyCtxt<'_>, a_scalar: &Scalar, b_scalar:\n \n /// A read-only value\n #[derive(Debug, Copy, Clone)]\n-pub struct CValue<'tcx>(CValueInner, TyLayout<'tcx>);\n+pub(crate) struct CValue<'tcx>(CValueInner, TyLayout<'tcx>);\n \n #[derive(Debug, Copy, Clone)]\n enum CValueInner {\n@@ -72,28 +72,28 @@ enum CValueInner {\n }\n \n impl<'tcx> CValue<'tcx> {\n-    pub fn by_ref(ptr: Pointer, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_ref(ptr: Pointer, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(ptr, None), layout)\n     }\n \n-    pub fn by_ref_unsized(ptr: Pointer, meta: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_ref_unsized(ptr: Pointer, meta: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(ptr, Some(meta)), layout)\n     }\n \n-    pub fn by_val(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_val(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByVal(value), layout)\n     }\n \n-    pub fn by_val_pair(value: Value, extra: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_val_pair(value: Value, extra: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByValPair(value, extra), layout)\n     }\n \n-    pub fn layout(&self) -> TyLayout<'tcx> {\n+    pub(crate) fn layout(&self) -> TyLayout<'tcx> {\n         self.1\n     }\n \n     // FIXME remove\n-    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> (Pointer, Option<Value>) {\n+    pub(crate) fn force_stack<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> (Pointer, Option<Value>) {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr, meta) => (ptr, meta),\n@@ -105,15 +105,15 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn try_to_ptr(self) -> Option<(Pointer, Option<Value>)> {\n+    pub(crate) fn try_to_ptr(self) -> Option<(Pointer, Option<Value>)> {\n         match self.0 {\n             CValueInner::ByRef(ptr, meta) => Some((ptr, meta)),\n             CValueInner::ByVal(_) | CValueInner::ByValPair(_, _) => None,\n         }\n     }\n \n     /// Load a value with layout.abi of scalar\n-    pub fn load_scalar<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n+    pub(crate) fn load_scalar<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n@@ -134,7 +134,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// Load a value pair with layout.abi of scalar pair\n-    pub fn load_scalar_pair<'a>(\n+    pub(crate) fn load_scalar_pair<'a>(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ) -> (Value, Value) {\n@@ -158,7 +158,7 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn value_field<'a>(\n+    pub(crate) fn value_field<'a>(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n@@ -187,16 +187,18 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn unsize_value<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+    pub(crate) fn unsize_value<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         crate::unsize::coerce_unsized_into(fx, self, dest);\n     }\n \n     /// If `ty` is signed, `const_val` must already be sign extended.\n-    pub fn const_val(\n+    pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         layout: TyLayout<'tcx>,\n         const_val: u128,\n     ) -> CValue<'tcx> {\n+        use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n+\n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n         match layout.ty.kind {\n@@ -241,42 +243,42 @@ impl<'tcx> CValue<'tcx> {\n         CValue::by_val(val, layout)\n     }\n \n-    pub fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n+    pub(crate) fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n         CValue(self.0, layout)\n     }\n }\n \n /// A place where you can write a value to or read a value from\n #[derive(Debug, Copy, Clone)]\n-pub struct CPlace<'tcx> {\n+pub(crate) struct CPlace<'tcx> {\n     inner: CPlaceInner,\n     layout: TyLayout<'tcx>,\n }\n \n #[derive(Debug, Copy, Clone)]\n-pub enum CPlaceInner {\n+pub(crate) enum CPlaceInner {\n     Var(Local),\n     Addr(Pointer, Option<Value>),\n     NoPlace,\n }\n \n impl<'tcx> CPlace<'tcx> {\n-    pub fn layout(&self) -> TyLayout<'tcx> {\n+    pub(crate) fn layout(&self) -> TyLayout<'tcx> {\n         self.layout\n     }\n \n-    pub fn inner(&self) -> &CPlaceInner {\n+    pub(crate) fn inner(&self) -> &CPlaceInner {\n         &self.inner\n     }\n \n-    pub fn no_place(layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+    pub(crate) fn no_place(layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n         CPlace {\n             inner: CPlaceInner::NoPlace,\n             layout,\n         }\n     }\n \n-    pub fn new_stack_slot(\n+    pub(crate) fn new_stack_slot(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         layout: TyLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n@@ -299,7 +301,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn new_var(\n+    pub(crate) fn new_var(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         local: Local,\n         layout: TyLayout<'tcx>,\n@@ -312,21 +314,21 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn for_ptr(ptr: Pointer, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+    pub(crate) fn for_ptr(ptr: Pointer, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n         CPlace {\n             inner: CPlaceInner::Addr(ptr, None),\n             layout,\n         }\n     }\n \n-    pub fn for_ptr_with_extra(ptr: Pointer, extra: Value, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+    pub(crate) fn for_ptr_with_extra(ptr: Pointer, extra: Value, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n         CPlace {\n             inner: CPlaceInner::Addr(ptr, Some(extra)),\n             layout,\n         }\n     }\n \n-    pub fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CValue<'tcx> {\n+    pub(crate) fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CValue<'tcx> {\n         let layout = self.layout();\n         match self.inner {\n             CPlaceInner::Var(var) => {\n@@ -348,14 +350,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn to_ptr(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Pointer {\n+    pub(crate) fn to_ptr(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Pointer {\n         match self.to_ptr_maybe_unsized(fx) {\n             (ptr, None) => ptr,\n             (_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n         }\n     }\n \n-    pub fn to_ptr_maybe_unsized(\n+    pub(crate) fn to_ptr_maybe_unsized(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ) -> (Pointer, Option<Value>) {\n@@ -371,7 +373,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn write_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, from: CValue<'tcx>) {\n+    pub(crate) fn write_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, from: CValue<'tcx>) {\n         #[cfg(debug_assertions)]\n         {\n             use cranelift_codegen::cursor::{Cursor, CursorPosition};\n@@ -516,7 +518,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn place_field(\n+    pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n@@ -532,7 +534,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn place_index(\n+    pub(crate) fn place_index(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         index: Value,\n@@ -551,7 +553,7 @@ impl<'tcx> CPlace<'tcx> {\n         CPlace::for_ptr(ptr.offset_value(fx, offset), elem_layout)\n     }\n \n-    pub fn place_deref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CPlace<'tcx> {\n+    pub(crate) fn place_deref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CPlace<'tcx> {\n         let inner_layout = fx.layout_of(self.layout().ty.builtin_deref(true).unwrap().ty);\n         if has_ptr_meta(fx.tcx, inner_layout.ty) {\n             let (addr, extra) = self.to_cvalue(fx).load_scalar_pair(fx);\n@@ -561,7 +563,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn write_place_ref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+    pub(crate) fn write_place_ref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         if has_ptr_meta(fx.tcx, self.layout().ty) {\n             let (ptr, extra) = self.to_ptr_maybe_unsized(fx);\n             let ptr = CValue::by_val_pair(\n@@ -576,7 +578,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n+    pub(crate) fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n         assert!(!self.layout().is_unsized());\n         match self.inner {\n             CPlaceInner::NoPlace => {\n@@ -590,7 +592,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn downcast_variant(\n+    pub(crate) fn downcast_variant(\n         self,\n         fx: &FunctionCx<'_, 'tcx, impl Backend>,\n         variant: VariantIdx,"}, {"sha": "127e4ce79a63eb1824edf46d6f4de21318a306b3", "filename": "src/vtable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f288959c00f8f78df21a706c6e6188d4bfb909b4/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=f288959c00f8f78df21a706c6e6188d4bfb909b4", "patch": "@@ -12,7 +12,7 @@ fn vtable_memflags() -> MemFlags {\n     flags\n }\n \n-pub fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n+pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n@@ -22,7 +22,7 @@ pub fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value)\n     )\n }\n \n-pub fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n+pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n@@ -32,7 +32,7 @@ pub fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) ->\n     )\n }\n \n-pub fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n+pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n@@ -42,7 +42,7 @@ pub fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value\n     )\n }\n \n-pub fn get_ptr_and_method_ref<'tcx>(\n+pub(crate) fn get_ptr_and_method_ref<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     arg: CValue<'tcx>,\n     idx: usize,\n@@ -67,7 +67,7 @@ pub fn get_ptr_and_method_ref<'tcx>(\n     (ptr, func_ref)\n }\n \n-pub fn get_vtable<'tcx>(\n+pub(crate) fn get_vtable<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     layout: TyLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,"}]}