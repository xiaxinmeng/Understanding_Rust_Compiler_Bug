{"sha": "4c949a455df81924b37dc41f2edf1071ea329fb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTQ5YTQ1NWRmODE5MjRiMzdkYzQxZjJlZGYxMDcxZWEzMjlmYjU=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-22T10:33:33Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-22T10:33:33Z"}, "message": "Simplify Error Handling.", "tree": {"sha": "e05ed110b95f601f12129d3162d65bf5ac1feaeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05ed110b95f601f12129d3162d65bf5ac1feaeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c949a455df81924b37dc41f2edf1071ea329fb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c949a455df81924b37dc41f2edf1071ea329fb5", "html_url": "https://github.com/rust-lang/rust/commit/4c949a455df81924b37dc41f2edf1071ea329fb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c949a455df81924b37dc41f2edf1071ea329fb5/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba22a69d964283d388a362830e73a992f024a6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba22a69d964283d388a362830e73a992f024a6bf", "html_url": "https://github.com/rust-lang/rust/commit/ba22a69d964283d388a362830e73a992f024a6bf"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "5020a4917a00a12514aa077d3e11d189443d3c18", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4c949a455df81924b37dc41f2edf1071ea329fb5/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c949a455df81924b37dc41f2edf1071ea329fb5/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=4c949a455df81924b37dc41f2edf1071ea329fb5", "patch": "@@ -197,22 +197,15 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 // @has <path> <jsonpath> = check path exists\n                 2 => {\n                     let val = cache.get_value(&command.args[0])?;\n-\n-                    match select(&val, &command.args[1]) {\n-                        Ok(results) => !results.is_empty(),\n-                        Err(_) => false,\n-                    }\n+                    let results = select(&val, &command.args[1]).unwrap();\n+                    !results.is_empty()\n                 }\n                 // @has <path> <jsonpath> <value> = check *any* item matched by path equals value\n                 3 => {\n                     let val = cache.get_value(&command.args[0])?;\n-                    match select(&val, &command.args[1]) {\n-                        Ok(results) => {\n-                            let pat = string_to_value(&command.args[2], cache);\n-                            results.contains(&pat.as_ref())\n-                        }\n-                        Err(_) => false,\n-                    }\n+                    let results = select(&val, &command.args[1]).unwrap();\n+                    let pat = string_to_value(&command.args[2], cache);\n+                    results.contains(&pat.as_ref())\n                 }\n                 _ => unreachable!(),\n             }\n@@ -223,38 +216,37 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             let expected: usize = command.args[2].parse().unwrap();\n \n             let val = cache.get_value(&command.args[0])?;\n-            match select(&val, &command.args[1]) {\n-                Ok(results) => results.len() == expected,\n-                Err(_) => false,\n-            }\n+            let results = select(&val, &command.args[1]).unwrap();\n+            results.len() == expected\n         }\n         CommandKind::Is => {\n             // @has <path> <jsonpath> <value> = check *exactly one* item matched by path, and it equals value\n             assert_eq!(command.args.len(), 3);\n             let val = cache.get_value(&command.args[0])?;\n-            match select(&val, &command.args[1]) {\n-                Ok(results) => {\n-                    let pat = string_to_value(&command.args[2], cache);\n-                    results.len() == 1 && results[0] == pat.as_ref()\n-                }\n-                Err(_) => false,\n-            }\n+            let results = select(&val, &command.args[1]).unwrap();\n+            let pat = string_to_value(&command.args[2], cache);\n+            results.len() == 1 && results[0] == pat.as_ref()\n         }\n-        // FIXME, Figure out semantics for @!set\n         CommandKind::Set => {\n             // @set <name> = <path> <jsonpath>\n             assert_eq!(command.args.len(), 4);\n             assert_eq!(command.args[1], \"=\", \"Expected an `=`\");\n             let val = cache.get_value(&command.args[2])?;\n-\n-            match select(&val, &command.args[3]) {\n-                Ok(results) => {\n-                    assert_eq!(results.len(), 1);\n+            let results = select(&val, &command.args[3]).unwrap();\n+            assert_eq!(results.len(), 1);\n+            match results.len() {\n+                0 => false,\n+                1 => {\n                     let r = cache.variables.insert(command.args[0].clone(), results[0].clone());\n                     assert!(r.is_none(), \"Name collision: {} is duplicated\", command.args[0]);\n                     true\n                 }\n-                Err(_) => false,\n+                _ => {\n+                    panic!(\n+                        \"Got multiple results in `@set` for `{}`: {:?}\",\n+                        &command.args[3], results\n+                    );\n+                }\n             }\n         }\n     };"}]}