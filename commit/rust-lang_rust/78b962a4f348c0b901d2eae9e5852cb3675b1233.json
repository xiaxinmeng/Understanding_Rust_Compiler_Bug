{"sha": "78b962a4f348c0b901d2eae9e5852cb3675b1233", "node_id": "C_kwDOAAsO6NoAKDc4Yjk2MmE0ZjM0OGMwYjkwMWQyZWFlOWU1ODUyY2IzNjc1YjEyMzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-31T03:04:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:44Z"}, "message": "RPITIT placeholder items", "tree": {"sha": "9a784e27f5f2ce042271085a12cf33e9324c8aeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a784e27f5f2ce042271085a12cf33e9324c8aeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b962a4f348c0b901d2eae9e5852cb3675b1233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b962a4f348c0b901d2eae9e5852cb3675b1233", "html_url": "https://github.com/rust-lang/rust/commit/78b962a4f348c0b901d2eae9e5852cb3675b1233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b962a4f348c0b901d2eae9e5852cb3675b1233/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6861df8368a35ef3814e0c379754bb4c7013401", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6861df8368a35ef3814e0c379754bb4c7013401", "html_url": "https://github.com/rust-lang/rust/commit/c6861df8368a35ef3814e0c379754bb4c7013401"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "8563b588585bd74f7b247a062e1c653b4c3119b6", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -109,6 +109,8 @@ pub enum DefKind {\n     InlineConst,\n     /// Opaque type, aka `impl Trait`.\n     OpaqueTy,\n+    /// A return-position `impl Trait` in a trait definition\n+    ImplTraitPlaceholder,\n     Field,\n     /// Lifetime parameter: the `'a` in `struct Foo<'a> { ... }`\n     LifetimeParam,\n@@ -138,6 +140,7 @@ impl DefKind {\n                 panic!(\"impossible struct constructor\")\n             }\n             DefKind::OpaqueTy => \"opaque type\",\n+            DefKind::ImplTraitPlaceholder => \"opaque type in trait\",\n             DefKind::TyAlias => \"type alias\",\n             DefKind::TraitAlias => \"trait alias\",\n             DefKind::AssocTy => \"associated type\",\n@@ -190,6 +193,7 @@ impl DefKind {\n             | DefKind::Variant\n             | DefKind::Trait\n             | DefKind::OpaqueTy\n+            | DefKind::ImplTraitPlaceholder\n             | DefKind::TyAlias\n             | DefKind::ForeignTy\n             | DefKind::TraitAlias\n@@ -254,6 +258,7 @@ impl DefKind {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::OpaqueTy\n+            | DefKind::ImplTraitPlaceholder\n             | DefKind::Impl\n             | DefKind::Field\n             | DefKind::TyParam"}, {"sha": "334d4fd0b042b9725f8ef7c39a193528f0a8b1c0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -2518,6 +2518,12 @@ pub enum OpaqueTyOrigin {\n     TyAlias,\n }\n \n+/// Placeholder representation of an `impl Trait` in a trait. Since this never gets lowered into a `ty::Opaque` of its own, we just keep this as\n+#[derive(Debug, HashStable_Generic)]\n+pub struct ImplTraitPlaceholder<'hir> {\n+    pub bounds: GenericBounds<'hir>,\n+}\n+\n /// The various kinds of types recognized by the compiler.\n #[derive(Debug, HashStable_Generic)]\n pub enum TyKind<'hir> {\n@@ -2545,6 +2551,8 @@ pub enum TyKind<'hir> {\n     /// The generic argument list contains the lifetimes (and in the future\n     /// possibly parameters) that are actually bound on the `impl Trait`.\n     OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n+    /// The placeholder\n+    ImplTraitInTrait(ItemId),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(&'hir [PolyTraitRef<'hir>], &'hir Lifetime, TraitObjectSyntax),\n@@ -3000,6 +3008,8 @@ pub enum ItemKind<'hir> {\n     TyAlias(&'hir Ty<'hir>, &'hir Generics<'hir>),\n     /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     OpaqueTy(OpaqueTy<'hir>),\n+    /// An `impl Trait` in a trait\n+    ImplTraitPlaceholder(ImplTraitPlaceholder<'hir>),\n     /// An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`.\n     Enum(EnumDef<'hir>, &'hir Generics<'hir>),\n     /// A struct definition, e.g., `struct Foo<A> {x: A}`.\n@@ -3068,6 +3078,7 @@ impl ItemKind<'_> {\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n             ItemKind::Impl(..) => \"implementation\",\n+            ItemKind::ImplTraitPlaceholder(..) => \"opaque type in trait\",\n         }\n     }\n }"}, {"sha": "3e9ab10b1f7e3101103a63a94e0e60b60bee8091", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -562,6 +562,10 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             walk_generics(visitor, generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n+        ItemKind::ImplTraitPlaceholder(ImplTraitPlaceholder { bounds }) => {\n+            visitor.visit_id(item.hir_id());\n+            walk_list!(visitor, visit_param_bound, bounds);\n+        }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n@@ -674,6 +678,9 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n             visitor.visit_nested_item(item_id);\n             walk_list!(visitor, visit_generic_arg, lifetimes);\n         }\n+        TyKind::ImplTraitInTrait(item_id) => {\n+            visitor.visit_nested_item(item_id);\n+        }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n             visitor.visit_array_length(length)"}, {"sha": "ea23c48cc53596ac12fbeaf3e2c1488d6253bd85", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -36,6 +36,7 @@ pub enum Target {\n     GlobalAsm,\n     TyAlias,\n     OpaqueTy,\n+    ImplTraitPlaceholder,\n     Enum,\n     Variant,\n     Struct,\n@@ -80,6 +81,7 @@ impl Target {\n             ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n             ItemKind::TyAlias(..) => Target::TyAlias,\n             ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n+            ItemKind::ImplTraitPlaceholder(..) => Target::ImplTraitPlaceholder,\n             ItemKind::Enum(..) => Target::Enum,\n             ItemKind::Struct(..) => Target::Struct,\n             ItemKind::Union(..) => Target::Union,\n@@ -157,6 +159,7 @@ impl Target {\n             Target::GlobalAsm => \"global asm\",\n             Target::TyAlias => \"type alias\",\n             Target::OpaqueTy => \"opaque type\",\n+            Target::ImplTraitPlaceholder => \"opaque type in trait\",\n             Target::Enum => \"enum\",\n             Target::Variant => \"enum variant\",\n             Target::Struct => \"struct\","}, {"sha": "01f445c8a52d509a90d2a00d502dcdd302f34878", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -327,6 +327,7 @@ impl<'a> State<'a> {\n                 self.print_ty_fn(f.abi, f.unsafety, f.decl, None, f.generic_params, f.param_names);\n             }\n             hir::TyKind::OpaqueDef(..) => self.word(\"/*impl Trait*/\"),\n+            hir::TyKind::ImplTraitInTrait(..) => self.word(\"/*impl Trait*/\"),\n             hir::TyKind::Path(ref qpath) => self.print_qpath(qpath, false),\n             hir::TyKind::TraitObject(bounds, ref lifetime, syntax) => {\n                 if syntax == ast::TraitObjectSyntax::Dyn {\n@@ -608,6 +609,9 @@ impl<'a> State<'a> {\n                     state.print_bounds(\"= impl\", real_bounds);\n                 });\n             }\n+            hir::ItemKind::ImplTraitPlaceholder(..) => {\n+                unreachable!(\"FIXME(RPITIT): I don't think this ever gets called here...\");\n+            }\n             hir::ItemKind::Enum(ref enum_definition, params) => {\n                 self.print_enum_def(enum_definition, params, item.ident.name, item.span);\n             }"}, {"sha": "02ca34181cd0be4497d698dea83331d76a62624f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -847,6 +847,7 @@ fn should_encode_visibility(def_kind: DefKind) -> bool {\n         | DefKind::Use\n         | DefKind::ForeignMod\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Field => true,\n         DefKind::TyParam\n@@ -879,6 +880,7 @@ fn should_encode_stability(def_kind: DefKind) -> bool {\n         | DefKind::ForeignMod\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Enum\n         | DefKind::Union\n         | DefKind::Impl\n@@ -967,6 +969,7 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::ForeignMod\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Trait\n         | DefKind::TraitAlias\n@@ -1003,6 +1006,7 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Field\n         | DefKind::TyParam\n@@ -1493,6 +1497,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::OpaqueTy(..) => {\n                 self.encode_explicit_item_bounds(def_id);\n+                EntryKind::OpaqueTy\n             }\n             hir::ItemKind::Enum(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);"}, {"sha": "e7c1abd126e044893aa805a08888281e8a0a2ff4", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -90,6 +90,7 @@ fixed_size_enum! {\n         ( AnonConst                                )\n         ( InlineConst                              )\n         ( OpaqueTy                                 )\n+        ( ImplTraitPlaceholder                     )\n         ( Field                                    )\n         ( LifetimeParam                            )\n         ( GlobalAsm                                )"}, {"sha": "1a0bea68293e78e6f7e662d525ba06590e298bf6", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -213,6 +213,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n                 ItemKind::Mod(..) => DefKind::Mod,\n                 ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n+                ItemKind::ImplTraitPlaceholder(..) => DefKind::ImplTraitPlaceholder,\n                 ItemKind::TyAlias(..) => DefKind::TyAlias,\n                 ItemKind::Enum(..) => DefKind::Enum,\n                 ItemKind::Struct(..) => DefKind::Struct,\n@@ -1188,6 +1189,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n                 ItemKind::TyAlias(..) => \"ty\",\n                 ItemKind::OpaqueTy(..) => \"opaque type\",\n+                ItemKind::ImplTraitPlaceholder(..) => \"opaque type in trait\",\n                 ItemKind::Enum(..) => \"enum\",\n                 ItemKind::Struct(..) => \"struct\",\n                 ItemKind::Union(..) => \"union\","}, {"sha": "98156a94ec4b4c1f11dc6c146a8d439f4dbb55a2", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -170,6 +170,7 @@ fn mark_used_by_default_parameters<'tcx>(\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::LifetimeParam\n         | DefKind::GlobalAsm"}, {"sha": "bb684e784c58a65d854c37fea989baa6b55799c6", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -661,6 +661,7 @@ impl CheckAttrVisitor<'_> {\n             | Target::GlobalAsm\n             | Target::TyAlias\n             | Target::OpaqueTy\n+            | Target::ImplTraitPlaceholder\n             | Target::Enum\n             | Target::Variant\n             | Target::Struct"}, {"sha": "74c5ccf9cd2052ba7f50b0cbd8664b91e2d071fb", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -235,6 +235,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     hir::ItemKind::ExternCrate(_)\n                     | hir::ItemKind::Use(..)\n                     | hir::ItemKind::OpaqueTy(..)\n+                    | hir::ItemKind::ImplTraitPlaceholder(..)\n                     | hir::ItemKind::TyAlias(..)\n                     | hir::ItemKind::Macro(..)\n                     | hir::ItemKind::Mod(..)"}, {"sha": "309eb753553b0d7d80a2bfa79f981b5986bdc3cf", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -596,6 +596,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             | DefKind::ForeignTy\n             | DefKind::Fn\n             | DefKind::OpaqueTy\n+            | DefKind::ImplTraitPlaceholder\n             | DefKind::AssocFn\n             | DefKind::Trait\n             | DefKind::TyParam\n@@ -685,6 +686,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n \n             hir::ItemKind::OpaqueTy(..)\n+            | hir::ItemKind::ImplTraitPlaceholder(..)\n             | hir::ItemKind::Use(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n@@ -720,6 +722,9 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.def_id, exist_level).generics().predicates().ty();\n                 }\n             }\n+            hir::ItemKind::ImplTraitPlaceholder(..) => {\n+                // FIXME(RPITIT): Do we need to do anything here?\n+            }\n             // Visit everything.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Static(..)"}, {"sha": "81b67b758f7e12393262b31a362252a180032a29", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -972,6 +972,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 | DefKind::TyAlias\n                 | DefKind::ForeignTy\n                 | DefKind::OpaqueTy\n+                | DefKind::ImplTraitPlaceholder\n                 | DefKind::TraitAlias\n                 | DefKind::AssocTy,\n                 _,"}, {"sha": "b72b033534b9829515c22dcd4b4a0a909d57b706", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -596,6 +596,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 }\n             }\n+            hir::ItemKind::ImplTraitPlaceholder(..) => {\n+                // FIXME(RPITIT): We don't need to do anything here, right?\n+            }\n             hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::Enum(_, ref generics)\n             | hir::ItemKind::Struct(_, ref generics)"}, {"sha": "ebe44a56449d32ec5b75ac6578f921316250759e", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -685,6 +685,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 | HirDefKind::AssocTy\n                 | HirDefKind::Trait\n                 | HirDefKind::OpaqueTy\n+                | HirDefKind::ImplTraitPlaceholder\n                 | HirDefKind::TyParam,\n                 def_id,\n             ) => Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(def_id) }),"}, {"sha": "ea9c82b3597d05f3499f6f6e0666e601550063e2", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -320,6 +320,10 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let item = scx.tcx.hir().item(item_id);\n                 item.make(offset, Some(item_id.hir_id()), scx)\n             }\n+            hir::TyKind::ImplTraitInTrait(item_id) => {\n+                let item = scx.tcx.hir().item(item_id);\n+                item.make(offset, Some(item_id.hir_id()), scx)\n+            }\n             hir::TyKind::Typeof(_) | hir::TyKind::Infer | hir::TyKind::Err => Err(\"Ty\"),\n         }\n     }\n@@ -562,6 +566,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n             hir::ItemKind::GlobalAsm(_) => Err(\"global asm\"),\n             hir::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n             hir::ItemKind::OpaqueTy(..) => Err(\"opaque type\"),\n+            hir::ItemKind::ImplTraitPlaceholder(..) => Err(\"opaque type in trait\"),\n             // FIXME should implement this (e.g., pub use).\n             hir::ItemKind::Use(..) => Err(\"import\"),\n         }"}, {"sha": "f0d8c240ea588bbcdde326ef58e5c240de00e5bc", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -51,6 +51,7 @@ fn assumed_wf_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::List<Ty\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::LifetimeParam\n         | DefKind::GlobalAsm"}, {"sha": "1f43221a420a62b37bd51485d078089860b67c0f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -2638,6 +2638,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }\n+            hir::TyKind::ImplTraitInTrait(..) => {\n+                span_bug!(ast_ty.span, \"not yet implemented\")\n+            }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(?qself, ?segment);\n                 let ty = self.ast_ty_to_ty_inner(qself, false, true);"}, {"sha": "293a32051b9f9e83cc7c1cbbab473609f264d632", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -815,6 +815,11 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             tcx.ensure().predicates_of(def_id);\n             tcx.ensure().explicit_item_bounds(def_id);\n         }\n+        hir::ItemKind::ImplTraitPlaceholder(..) => {\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n+            tcx.ensure().explicit_item_bounds(def_id);\n+        }\n         hir::ItemKind::TyAlias(..)\n         | hir::ItemKind::Static(..)\n         | hir::ItemKind::Const(..)"}, {"sha": "ded2ac1308e5482d48b4048e752d38fad003248c", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -336,6 +336,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), .. }) => {\n                     find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n+                ItemKind::ImplTraitPlaceholder(..) => {\n+                    span_bug!(item.span, \"not yet implemented\")\n+                }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n                 | ItemKind::Macro(..)"}, {"sha": "395f213ca87c353836a89a36537f84b36dcd99ca", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78b962a4f348c0b901d2eae9e5852cb3675b1233/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b962a4f348c0b901d2eae9e5852cb3675b1233/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=78b962a4f348c0b901d2eae9e5852cb3675b1233", "patch": "@@ -511,8 +511,8 @@ pub(crate) fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n         | Res::Err => return res.def_id(),\n         Res::Def(\n             TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst\n-            | InlineConst | OpaqueTy | Field | LifetimeParam | GlobalAsm | Impl | Closure\n-            | Generator,\n+            | InlineConst | OpaqueTy | ImplTraitPlaceholder | Field | LifetimeParam | GlobalAsm\n+            | Impl | Closure | Generator,\n             id,\n         ) => return id,\n     };"}]}