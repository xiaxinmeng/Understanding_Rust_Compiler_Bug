{"sha": "71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2JkZGRmMWM2YjZjMzRjMDVhZWEwMWI5MmJiOGExMDViMzJjNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:29:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:29:26Z"}, "message": "make file-symbols query cancelable", "tree": {"sha": "1b7a83d15a344afa81e3b1169ffcd10fe2defc92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b7a83d15a344afa81e3b1169ffcd10fe2defc92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "html_url": "https://github.com/rust-lang/rust/commit/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "html_url": "https://github.com/rust-lang/rust/commit/e74bf6e56e45a26002ef2a77fb3ac27f523277fb"}], "stats": {"total": 88, "additions": 48, "deletions": 40}, "files": [{"sha": "d621b3b22a4fef77760b9112b53ceecf2f021728", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "patch": "@@ -1,17 +1,19 @@\n-use crate::{\n-    module_map::{ModuleDescriptorQuery, ModuleTreeQuery, ModulesDatabase},\n-    symbol_index::SymbolIndex,\n-    FileId, FileResolverImp,\n+use std::{\n+    fmt,\n+    hash::{Hash, Hasher},\n+    sync::Arc,\n };\n+\n use ra_editor::LineIndex;\n use ra_syntax::File;\n use rustc_hash::FxHashSet;\n use salsa;\n \n-use std::{\n-    fmt,\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n+use crate::{\n+    Cancelable,\n+    module_map::{ModuleDescriptorQuery, ModuleTreeQuery, ModulesDatabase},\n+    symbol_index::SymbolIndex,\n+    FileId, FileResolverImp,\n };\n \n #[derive(Default)]\n@@ -98,7 +100,7 @@ salsa::query_group! {\n         fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n             type FileLinesQuery;\n         }\n-        fn file_symbols(file_id: FileId) -> Arc<SymbolIndex> {\n+        fn file_symbols(file_id: FileId) -> Cancelable<Arc<SymbolIndex>> {\n             type FileSymbolsQuery;\n         }\n     }\n@@ -112,7 +114,7 @@ fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n     let text = db.file_text(file_id);\n     Arc::new(LineIndex::new(&*text))\n }\n-fn file_symbols(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n+fn file_symbols(db: &impl SyntaxDatabase, file_id: FileId) -> Cancelable<Arc<SymbolIndex>> {\n     let syntax = db.file_syntax(file_id);\n-    Arc::new(SymbolIndex::for_file(file_id, syntax))\n+    Ok(Arc::new(SymbolIndex::for_file(file_id, syntax)))\n }"}, {"sha": "32e9bb6d7f238b1e5cc1178d3440b5ada20f6a3f", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "patch": "@@ -148,14 +148,16 @@ impl AnalysisImpl {\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n         self.root(file_id).lines(file_id)\n     }\n-    pub fn world_symbols(&self, query: Query) -> Vec<(FileId, FileSymbol)> {\n+    pub fn world_symbols(&self, query: Query) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let mut buf = Vec::new();\n         if query.libs {\n-            self.data.libs.iter().for_each(|it| it.symbols(&mut buf));\n+            for lib in self.data.libs.iter() {\n+                lib.symbols(&mut buf)?;\n+            }\n         } else {\n-            self.data.root.symbols(&mut buf);\n+            self.data.root.symbols(&mut buf)?;\n         }\n-        query.search(&buf)\n+        Ok(query.search(&buf))\n     }\n     pub fn parent_module(&self, file_id: FileId) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let root = self.root(file_id);\n@@ -212,7 +214,7 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n             // First try to resolve the symbol locally\n-            if let Some((name, range)) = resolve_local_name(&file, offset, name_ref) {\n+            return if let Some((name, range)) = resolve_local_name(&file, offset, name_ref) {\n                 let mut vec = vec![];\n                 vec.push((\n                     file_id,\n@@ -222,12 +224,11 @@ impl AnalysisImpl {\n                         kind: NAME,\n                     },\n                 ));\n-\n-                return Ok(vec);\n+                Ok(vec)\n             } else {\n                 // If that fails try the index based approach.\n-                return Ok(self.index_resolve(name_ref));\n-            }\n+                self.index_resolve(name_ref)\n+            };\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n@@ -379,17 +380,23 @@ impl AnalysisImpl {\n         &self,\n         file_id: FileId,\n         offset: TextUnit,\n-    ) -> Option<(FnDescriptor, Option<usize>)> {\n+    ) -> Cancelable<Option<(FnDescriptor, Option<usize>)>> {\n         let root = self.root(file_id);\n         let file = root.syntax(file_id);\n         let syntax = file.syntax();\n \n         // Find the calling expression and it's NameRef\n-        let calling_node = FnCallNode::with_node(syntax, offset)?;\n-        let name_ref = calling_node.name_ref()?;\n+        let calling_node = match FnCallNode::with_node(syntax, offset) {\n+            Some(node) => node,\n+            None => return Ok(None),\n+        };\n+        let name_ref = match calling_node.name_ref() {\n+            Some(name) => name,\n+            None => return Ok(None),\n+        };\n \n         // Resolve the function's NameRef (NOTE: this isn't entirely accurate).\n-        let file_symbols = self.index_resolve(name_ref);\n+        let file_symbols = self.index_resolve(name_ref)?;\n         for (_, fs) in file_symbols {\n             if fs.kind == FN_DEF {\n                 if let Some(fn_def) = find_node_at_offset(syntax, fs.node_range.start()) {\n@@ -431,16 +438,16 @@ impl AnalysisImpl {\n                             }\n                         }\n \n-                        return Some((descriptor, current_parameter));\n+                        return Ok(Some((descriptor, current_parameter)));\n                     }\n                 }\n             }\n         }\n \n-        None\n+        Ok(None)\n     }\n \n-    fn index_resolve(&self, name_ref: ast::NameRef) -> Vec<(FileId, FileSymbol)> {\n+    fn index_resolve(&self, name_ref: ast::NameRef) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();"}, {"sha": "189dbd9c27ff4089083b4ab6dec7aa7b88cae712", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "patch": "@@ -224,7 +224,7 @@ impl Analysis {\n         ra_editor::folding_ranges(&file)\n     }\n     pub fn symbol_search(&self, query: Query) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n-        Ok(self.imp.world_symbols(query))\n+        self.imp.world_symbols(query)\n     }\n     pub fn approximately_resolve_symbol(\n         &self,\n@@ -269,7 +269,7 @@ impl Analysis {\n         file_id: FileId,\n         offset: TextUnit,\n     ) -> Cancelable<Option<(FnDescriptor, Option<usize>)>> {\n-        Ok(self.imp.resolve_callable(file_id, offset))\n+        self.imp.resolve_callable(file_id, offset)\n     }\n }\n "}, {"sha": "123c4acfa153d556859dbd23e20ac6d719c8e49a", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cbdddf1c6b6c34c05aea01b92bb8a105b32c71/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=71cbdddf1c6b6c34c05aea01b92bb8a105b32c71", "patch": "@@ -22,7 +22,7 @@ pub(crate) trait SourceRoot {\n     fn module_tree(&self) -> Cancelable<Arc<ModuleTreeDescriptor>>;\n     fn lines(&self, file_id: FileId) -> Arc<LineIndex>;\n     fn syntax(&self, file_id: FileId) -> File;\n-    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>);\n+    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()>;\n }\n \n #[derive(Default, Debug, Clone)]\n@@ -77,14 +77,12 @@ impl SourceRoot for WritableSourceRoot {\n     fn syntax(&self, file_id: FileId) -> File {\n         self.db.file_syntax(file_id)\n     }\n-    fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) {\n-        let db = &self.db;\n-        let symbols = db.file_set();\n-        let symbols = symbols\n-            .files\n-            .iter()\n-            .map(|&file_id| db.file_symbols(file_id));\n-        acc.extend(symbols);\n+    fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()> {\n+        for &file_id in self.db.file_set().files.iter() {\n+            let symbols = self.db.file_symbols(file_id)?;\n+            acc.push(symbols)\n+        }\n+        Ok(())\n     }\n }\n \n@@ -180,7 +178,8 @@ impl SourceRoot for ReadonlySourceRoot {\n     fn syntax(&self, file_id: FileId) -> File {\n         self.data(file_id).syntax().clone()\n     }\n-    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) {\n-        acc.push(Arc::clone(&self.symbol_index))\n+    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()> {\n+        acc.push(Arc::clone(&self.symbol_index));\n+        Ok(())\n     }\n }"}]}