{"sha": "7da64ae461bdf5c159d1566d66b9561c29f4224e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYTY0YWU0NjFiZGY1YzE1OWQxNTY2ZDY2Yjk1NjFjMjlmNDIyNGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-05T01:26:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-05T18:57:07Z"}, "message": "Munge libuv makefiles sufficiently to build out of tree.", "tree": {"sha": "f38191b53f667ca0454b7841a8d1faaecd8720e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f38191b53f667ca0454b7841a8d1faaecd8720e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7da64ae461bdf5c159d1566d66b9561c29f4224e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7da64ae461bdf5c159d1566d66b9561c29f4224e", "html_url": "https://github.com/rust-lang/rust/commit/7da64ae461bdf5c159d1566d66b9561c29f4224e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7da64ae461bdf5c159d1566d66b9561c29f4224e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c3fc739c82968dcd629a7e3f3a468e366be976", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c3fc739c82968dcd629a7e3f3a468e366be976", "html_url": "https://github.com/rust-lang/rust/commit/b2c3fc739c82968dcd629a7e3f3a468e366be976"}], "stats": {"total": 149, "additions": 66, "deletions": 83}, "files": [{"sha": "d1137b6fe5a5bb6975fd4e1110db036899d61a20", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7da64ae461bdf5c159d1566d66b9561c29f4224e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/7da64ae461bdf5c159d1566d66b9561c29f4224e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=7da64ae461bdf5c159d1566d66b9561c29f4224e", "patch": "@@ -4,6 +4,8 @@\n \n include config.mk\n MKFILES := Makefile config.mk $(wildcard $(CFG_SRC_DIR)/mk/*.mk)\n+MKFILES += $(CFG_SRC_DIR)/src/rt/libuv/Makefile\n+MKFILES += $(wildcard $(CFG_SRC_DIR)/src/rt/libuv/*.mk)\n \n ifneq ($(MAKE_RESTARTS),)\n CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))"}, {"sha": "c1474edb0d7c79de0780d810eda5aa3703642ad9", "filename": "configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7da64ae461bdf5c159d1566d66b9561c29f4224e/configure", "raw_url": "https://github.com/rust-lang/rust/raw/7da64ae461bdf5c159d1566d66b9561c29f4224e/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=7da64ae461bdf5c159d1566d66b9561c29f4224e", "patch": "@@ -179,6 +179,7 @@ step_msg \"making directories\"\n for i in \\\n     doc \\\n     rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 \\\n+    rt/libuv rt/libuv/src/ares rt/libuv/src/eio rt/libuv/src/ev \\\n     rustllvm \\\n     dl stage0 stage1 stage2 stage3 \\\n     stage0/lib stage1/lib stage2/lib stage3/lib \\\n@@ -315,4 +316,8 @@ rm -f config.mk.bak\n \n copy ${CFG_SRC_DIR}Makefile.in ./Makefile\n \n+copy ${CFG_SRC_DIR}src/rt/libuv/Makefile rt/libuv/Makefile\n+copy ${CFG_SRC_DIR}src/rt/libuv/config-unix.mk rt/libuv/config-unix.mk\n+copy ${CFG_SRC_DIR}src/rt/libuv/config-mingw.mk rt/libuv/config-mingw.mk\n+\n step_msg \"complete\""}, {"sha": "76c876c3d89e553be7c1d138004228fce7781dcc", "filename": "mk/rt.mk", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7da64ae461bdf5c159d1566d66b9561c29f4224e/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7da64ae461bdf5c159d1566d66b9561c29f4224e/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=7da64ae461bdf5c159d1566d66b9561c29f4224e", "patch": "@@ -68,7 +68,7 @@ RUNTIME_DEF := rt/rustrt$(CFG_DEF_SUFFIX)\n RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash \\\n                 -I $(S)src/rt/arch/i386 -I $(S)src/rt/libuv/include\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o) $(RUNTIME_LL:.ll=.o) $(RUNTIME_S:.s=.o)\n-RUNTIME_LIBS := $(S)src/rt/libuv/uv.a\n+RUNTIME_LIBS := rt/libuv/uv.a\n \n rt/%.o: rt/%.cpp $(MKFILES)\n \t@$(call E, compile: $@)\n@@ -101,10 +101,12 @@ rt/$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR) $(RUNTIME_DEF) $(RU\n # FIXME: For some reason libuv's makefiles can't figure out the correct definition\n # of CC on the mingw I'm using, so we are explicitly using gcc. Also, we\n # have to list environment variables first on windows... mysterious\n-$(S)src/rt/libuv/uv.a: $(S)src/rt/libuv/LIBUV_REVISION\n-\t$(Q)CFLAGS=\\\"-m32\\\" LDFLAGS=\\\"-m32\\\" CC=gcc $(MAKE) -C $(S)src/rt/libuv\n-\t$(Q)mkdir -p rt/libuv\n-\t$(Q)cp $(S)src/rt/libuv/uv.a rt/libuv/uv.a\n+rt/libuv/uv.a: $(wildcard \\\n+                     $(S)src/rt/libuv/* \\\n+                     $(S)src/rt/libuv/*/* \\\n+                     $(S)src/rt/libuv/*/*/* \\\n+                     $(S)src/rt/libuv/*/*/*/*)\n+\t$(Q)CFLAGS=\\\"-m32\\\" LDFLAGS=\\\"-m32\\\" CC=gcc $(MAKE) -C rt/libuv\n \n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n "}, {"sha": "b8d3c68595230e5d250ae58a4b7183c446548851", "filename": "src/rt/libuv/Makefile", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7da64ae461bdf5c159d1566d66b9561c29f4224e/src%2Frt%2Flibuv%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7da64ae461bdf5c159d1566d66b9561c29f4224e/src%2Frt%2Flibuv%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Flibuv%2FMakefile?ref=7da64ae461bdf5c159d1566d66b9561c29f4224e", "patch": "@@ -18,13 +18,30 @@\n # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n # IN THE SOFTWARE.\n \n+include ../../config.mk\n+CFLAGS=-m32\n+LDFLAGS=-m32\n+CC=gcc \n+\n+S:=$(shell cd ../../; cd $(CFG_SRC_DIR)src/rt/libuv; pwd)\n+\n+ifdef VERBOSE\n+  Q :=\n+  EE =\n+else\n+  Q := @\n+  EE = echo $(1)\n+endif\n+\n+VPATH:=$(S)\n+\n uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')\n \n ifdef MSVC\n uname_S := MINGW\n endif\n \n-CPPFLAGS += -Iinclude\n+CPPFLAGS += -I$(S)/include\n \n CARES_OBJS =\n CARES_OBJS += src/ares/ares__close_sockets.o\n@@ -77,37 +94,8 @@ else\n include config-unix.mk\n endif\n \n-TESTS=test/echo-server.c test/test-*.c\n-BENCHMARKS=test/echo-server.c test/dns-server.c test/benchmark-*.c\n-\n-all: uv.a test/run-tests test/run-benchmarks\n+all: uv.a\n \n $(CARES_OBJS): %.o: %.c\n-\t$(CC) -o $*.o -c $(CFLAGS) $(CPPFLAGS) $< -DHAVE_CONFIG_H\n-\n-test/run-tests$(E): test/*.h test/run-tests.c $(RUNNER_SRC) test/runner-unix.c $(TESTS) uv.a\n-\t$(CC) $(CPPFLAGS) $(RUNNER_CFLAGS) $(RUNNER_LINKFLAGS) -o test/run-tests test/run-tests.c \\\n-\t\ttest/runner.c $(RUNNER_SRC) $(TESTS) uv.a $(RUNNER_LIBS)\n-\n-test/run-benchmarks$(E): test/*.h test/run-benchmarks.c test/runner.c $(RUNNER_SRC) $(BENCHMARKS) uv.a\n-\t$(CC) $(CPPFLAGS) $(RUNNER_CFLAGS) $(RUNNER_LINKFLAGS) -o test/run-benchmarks test/run-benchmarks.c \\\n-\t\t test/runner.c $(RUNNER_SRC) $(BENCHMARKS) uv.a $(RUNNER_LIBS)\n-\n-test/echo.o: test/echo.c test/echo.h\n-\t$(CC) $(CPPFLAGS) $(CFLAGS) -c test/echo.c -o test/echo.o\n-\n-\n-.PHONY: clean clean-platform distclean distclean-platform test benchmark\n-\n-\n-test: test/run-tests$(E)\n-\ttest/run-tests\n-\n-bench: test/run-benchmarks$(E)\n-\ttest/run-benchmarks\n-\n-clean: clean-platform\n-\t$(RM) -f src/*.o *.a test/run-tests$(E) test/run-benchmarks$(E)\n-\n-distclean: distclean-platform\n-\t$(RM) -f src/*.o *.a test/run-tests$(E) test/run-benchmarks$(E)\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) -o $*.o -c $(CFLAGS) $(CPPFLAGS) $< -DHAVE_CONFIG_H"}, {"sha": "2c29b6ebd8da87cad53d1abe511175a28cf494f4", "filename": "src/rt/libuv/config-mingw.mk", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7da64ae461bdf5c159d1566d66b9561c29f4224e/src%2Frt%2Flibuv%2Fconfig-mingw.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7da64ae461bdf5c159d1566d66b9561c29f4224e/src%2Frt%2Flibuv%2Fconfig-mingw.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Flibuv%2Fconfig-mingw.mk?ref=7da64ae461bdf5c159d1566d66b9561c29f4224e", "patch": "@@ -24,40 +24,33 @@ CC ?= $(PREFIX)gcc\n AR ?= $(PREFIX)ar\n E=.exe\n \n-CFLAGS+=$(CPPFLAGS) -g --std=gnu89 -D_WIN32_WINNT=0x0501 -Isrc/ares/config_win32\n+CFLAGS+=$(CPPFLAGS) -g --std=gnu89 -D_WIN32_WINNT=0x0501 -I$(S)src/ares/config_win32\n LINKFLAGS=-lm\n \n CARES_OBJS += src/ares/windows_port.o\n \n-RUNNER_CFLAGS=$(CFLAGS) -D_GNU_SOURCE # Need _GNU_SOURCE for strdup?\n-RUNNER_LINKFLAGS=$(LINKFLAGS)\n-RUNNER_LIBS=-lws2_32\n-RUNNER_SRC=test/runner-win.c\n-\n uv.a: src/uv-win.o src/uv-common.o src/uv-eio.o src/eio/eio.o $(CARES_OBJS)\n-\t$(AR) rcs uv.a src/uv-win.o src/uv-common.o src/uv-eio.o src/eio/eio.o $(CARES_OBJS)\n+\t@$(call EE, ar: $@)\n+\t$(Q)$(AR) rcs uv.a $^\n \n src/uv-win.o: src/uv-win.c include/uv.h include/uv-win.h\n-\t$(CC) $(CFLAGS) -c src/uv-win.c -o src/uv-win.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CFLAGS) -c $< -o $@\n \n src/uv-common.o: src/uv-common.c include/uv.h include/uv-win.h\n-\t$(CC) $(CFLAGS) -c src/uv-common.c -o src/uv-common.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CFLAGS) -c $< -o $@\n \n EIO_CPPFLAGS += $(CPPFLAGS)\n EIO_CPPFLAGS += -DEIO_CONFIG_H=\\\"$(EIO_CONFIG)\\\"\n EIO_CPPFLAGS += -DEIO_STACKSIZE=65536\n EIO_CPPFLAGS += -D_GNU_SOURCE\n \n src/eio/eio.o: src/eio/eio.c\n-\t$(CC) $(EIO_CPPFLAGS) $(CFLAGS) -c src/eio/eio.c -o src/eio/eio.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(EIO_CPPFLAGS) $(CFLAGS) -c $< -o $@\n \n src/uv-eio.o: src/uv-eio.c\n-\t$(CC) $(CPPFLAGS) -Isrc/eio/ $(CFLAGS) -c src/uv-eio.c -o src/uv-eio.o\n-\n-clean-platform:\n-\t-rm -f src/ares/*.o\n-\t-rm -f src/eio/*.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CPPFLAGS) -I$(S)src/eio/ $(CFLAGS) -c $< -o $@\n \n-distclean-platform:\n-\t-rm -f src/ares/*.o\n-\t-rm -f src/eio/*.o"}, {"sha": "afdb92431c864073f441169daa90fe655624b211", "filename": "src/rt/libuv/config-unix.mk", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7da64ae461bdf5c159d1566d66b9561c29f4224e/src%2Frt%2Flibuv%2Fconfig-unix.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7da64ae461bdf5c159d1566d66b9561c29f4224e/src%2Frt%2Flibuv%2Fconfig-unix.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Flibuv%2Fconfig-unix.mk?ref=7da64ae461bdf5c159d1566d66b9561c29f4224e", "patch": "@@ -23,7 +23,7 @@ AR ?= $(PREFIX)ar\n E=\n CSTDFLAG=--std=c89 -pedantic\n CFLAGS+=-g\n-CPPFLAGS += -Isrc/ev\n+CPPFLAGS += -I$(S)/src/ev\n LINKFLAGS=-lm\n \n CPPFLAGS += -D_LARGEFILE_SOURCE\n@@ -32,15 +32,15 @@ CPPFLAGS += -D_FILE_OFFSET_BITS=64\n ifeq (SunOS,$(uname_S))\n EV_CONFIG=config_sunos.h\n EIO_CONFIG=config_sunos.h\n-CPPFLAGS += -Isrc/ares/config_sunos\n+CPPFLAGS += -I$(S)/src/ares/config_sunos\n LINKFLAGS+=-lsocket -lnsl\n UV_OS_FILE=uv-sunos.c\n endif\n \n ifeq (Darwin,$(uname_S))\n EV_CONFIG=config_darwin.h\n EIO_CONFIG=config_darwin.h\n-CPPFLAGS += -Isrc/ares/config_darwin\n+CPPFLAGS += -I$(S)/src/ares/config_darwin\n LINKFLAGS+=-framework CoreServices\n UV_OS_FILE=uv-darwin.c\n endif\n@@ -49,23 +49,23 @@ ifeq (Linux,$(uname_S))\n EV_CONFIG=config_linux.h\n EIO_CONFIG=config_linux.h\n CSTDFLAG += -D_XOPEN_SOURCE=600\n-CPPFLAGS += -Isrc/ares/config_linux\n+CPPFLAGS += -I$(S)/src/ares/config_linux\n LINKFLAGS+=-lrt\n UV_OS_FILE=uv-linux.c\n endif\n \n ifeq (FreeBSD,$(uname_S))\n EV_CONFIG=config_freebsd.h\n EIO_CONFIG=config_freebsd.h\n-CPPFLAGS += -Isrc/ares/config_freebsd\n+CPPFLAGS += -I$(S)/src/ares/config_freebsd\n LINKFLAGS+=\n UV_OS_FILE=uv-freebsd.c\n endif\n \n ifneq (,$(findstring CYGWIN,$(uname_S)))\n EV_CONFIG=config_cygwin.h\n EIO_CONFIG=config_cygwin.h\n-CPPFLAGS += -Isrc/ares/config_cygwin\n+CPPFLAGS += -I$(S)/src/ares/config_cygwin\n LINKFLAGS+=\n UV_OS_FILE=uv-cygwin.c\n endif\n@@ -78,20 +78,24 @@ RUNNER_LIBS=\n RUNNER_SRC=test/runner-unix.c\n \n uv.a: src/uv-unix.o src/uv-common.o src/uv-platform.o src/ev/ev.o src/uv-eio.o src/eio/eio.o $(CARES_OBJS)\n-\t$(AR) rcs uv.a src/uv-unix.o src/uv-platform.o src/uv-common.o src/uv-eio.o src/ev/ev.o \\\n-\t\tsrc/eio/eio.o $(CARES_OBJS)\n+\t@$(call EE, ar: $@)\n+\t$(Q)$(AR) rcs uv.a $^\n \n src/uv-platform.o: src/$(UV_OS_FILE) include/uv.h include/uv-unix.h\n-\t$(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c src/$(UV_OS_FILE) -o src/uv-platform.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c $< -o $@\n \n src/uv-unix.o: src/uv-unix.c include/uv.h include/uv-unix.h\n-\t$(CC) $(CSTDFLAG) $(CPPFLAGS) -Ieio $(CFLAGS) -c src/uv-unix.c -o src/uv-unix.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CSTDFLAG) $(CPPFLAGS) -I$(S)/eio $(CFLAGS) -c $< -o $@\n \n src/uv-common.o: src/uv-common.c include/uv.h include/uv-unix.h\n-\t$(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c src/uv-common.c -o src/uv-common.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c $< -o $@\n \n src/ev/ev.o: src/ev/ev.c\n-\t$(CC) $(CPPFLAGS) $(CFLAGS) -c src/ev/ev.c -o src/ev/ev.o -DEV_CONFIG_H=\\\"$(EV_CONFIG)\\\"\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@ -DEV_CONFIG_H=\\\"$(EV_CONFIG)\\\"\n \n \n EIO_CPPFLAGS += $(CPPFLAGS)\n@@ -100,20 +104,9 @@ EIO_CPPFLAGS += -DEIO_STACKSIZE=65536\n EIO_CPPFLAGS += -D_GNU_SOURCE\n \n src/eio/eio.o: src/eio/eio.c\n-\t$(CC) $(EIO_CPPFLAGS) $(CFLAGS) -c src/eio/eio.c -o src/eio/eio.o\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(EIO_CPPFLAGS) $(CFLAGS) -c $< -o $@\n \n src/uv-eio.o: src/uv-eio.c\n-\t$(CC) $(CPPFLAGS) -Isrc/eio/ $(CSTDFLAG) $(CFLAGS) -c src/uv-eio.c -o src/uv-eio.o\n-\n-\n-clean-platform:\n-\t-rm -f src/ares/*.o\n-\t-rm -f src/ev/*.o\n-\t-rm -f src/eio/*.o\n-\t-rm -rf test/run-tests.dSYM run-benchmarks.dSYM\n-\n-distclean-platform:\n-\t-rm -f src/ares/*.o\n-\t-rm -f src/ev/*.o\n-\t-rm -f src/eio/*.o\n-\t-rm -rf test/run-tests.dSYM run-benchmarks.dSYM\n+\t@$(call EE, compile: $@)\n+\t$(Q)$(CC) $(CPPFLAGS) -I$(S)/src/eio/ $(CSTDFLAG) $(CFLAGS) -c $< -o $@"}]}