{"sha": "5f1182d04a161915df7b1d001ac7cc77fc7a2047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTE4MmQwNGExNjE5MTVkZjdiMWQwMDFhYzdjYzc3ZmM3YTIwNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-04T22:58:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-04T22:58:34Z"}, "message": "Auto merge of #1534 - LeSeulArtichaut:tys-kind, r=RalfJung\n\nChange `ty.kind` -> `ty.kind()`\n\nThis fixes build failure due to rust-lang/rust#75077, cc rust-lang/rust#76337.\n(This is my first PR here, please tell me if anything's wrong)", "tree": {"sha": "e91e591006e28f5ca37814ad595223176ad2227e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91e591006e28f5ca37814ad595223176ad2227e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1182d04a161915df7b1d001ac7cc77fc7a2047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1182d04a161915df7b1d001ac7cc77fc7a2047", "html_url": "https://github.com/rust-lang/rust/commit/5f1182d04a161915df7b1d001ac7cc77fc7a2047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1182d04a161915df7b1d001ac7cc77fc7a2047/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28a8eeb742d7104bc407e12212c5143439963fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28a8eeb742d7104bc407e12212c5143439963fc", "html_url": "https://github.com/rust-lang/rust/commit/c28a8eeb742d7104bc407e12212c5143439963fc"}, {"sha": "4f2f87b2dff5b586d3130737716fcbb3d3086d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2f87b2dff5b586d3130737716fcbb3d3086d57", "html_url": "https://github.com/rust-lang/rust/commit/4f2f87b2dff5b586d3130737716fcbb3d3086d57"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "797f6e825a742d821f7201aee38bd0783dbcc382", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1182d04a161915df7b1d001ac7cc77fc7a2047/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5f1182d04a161915df7b1d001ac7cc77fc7a2047/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=5f1182d04a161915df7b1d001ac7cc77fc7a2047", "patch": "@@ -1 +1 @@\n-d9cd4a33f53689bc0847775669a14f666a138fd7\n+d2454643e137bde519786ee9e650c455d7ad6f34"}, {"sha": "d3fcb1c53dba1d6c4a33eabe749280f621f63e63", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1182d04a161915df7b1d001ac7cc77fc7a2047/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1182d04a161915df7b1d001ac7cc77fc7a2047/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5f1182d04a161915df7b1d001ac7cc77fc7a2047", "patch": "@@ -280,7 +280,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Hook to detect `UnsafeCell`.\n             fn visit_value(&mut self, v: MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n                 trace!(\"UnsafeCellVisitor: {:?} {:?}\", *v, v.layout.ty);\n-                let is_unsafe_cell = match v.layout.ty.kind {\n+                let is_unsafe_cell = match v.layout.ty.kind() {\n                     ty::Adt(adt, _) =>\n                         Some(adt.did) == self.ecx.tcx.lang_items().unsafe_cell_type(),\n                     _ => false,"}, {"sha": "4d8801f178874bd4bb24bbec718c6d69c8f88a72", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f1182d04a161915df7b1d001ac7cc77fc7a2047/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1182d04a161915df7b1d001ac7cc77fc7a2047/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=5f1182d04a161915df7b1d001ac7cc77fc7a2047", "patch": "@@ -299,7 +299,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[val] = check_arg_count(args)?;\n                 let val = this.read_immediate(val)?;\n \n-                let res = match val.layout.ty.kind {\n+                let res = match val.layout.ty.kind() {\n                     ty::Float(FloatTy::F32) => {\n                         this.float_to_int_unchecked(val.to_scalar()?.to_f32()?, dest.layout.ty)?\n                     }\n@@ -528,10 +528,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let f = f.round_to_integral(Round::TowardZero).value;\n \n         // Step 2: Cast the truncated float to the target integer type and see if we lose any information in this step.\n-        Ok(match dest_ty.kind {\n+        Ok(match dest_ty.kind() {\n             // Unsigned\n             ty::Uint(t) => {\n-                let size = Integer::from_attr(this, attr::IntType::UnsignedInt(t)).size();\n+                let size = Integer::from_attr(this, attr::IntType::UnsignedInt(*t)).size();\n                 let res = f.to_u128(size.bits_usize());\n                 if res.status.is_empty() {\n                     // No status flags means there was no further rounding or other loss of precision.\n@@ -546,7 +546,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             // Signed\n             ty::Int(t) => {\n-                let size = Integer::from_attr(this, attr::IntType::SignedInt(t)).size();\n+                let size = Integer::from_attr(this, attr::IntType::SignedInt(*t)).size();\n                 let res = f.to_i128(size.bits_usize());\n                 if res.status.is_empty() {\n                     // No status flags means there was no further rounding or other loss of precision."}, {"sha": "817ed99d2bb274ff640283b44cc3014a2421fe61", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1182d04a161915df7b1d001ac7cc77fc7a2047/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1182d04a161915df7b1d001ac7cc77fc7a2047/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=5f1182d04a161915df7b1d001ac7cc77fc7a2047", "patch": "@@ -623,7 +623,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n         // making it useless.\n         fn qualify(ty: ty::Ty<'_>, kind: RetagKind) -> Option<(RefKind, bool)> {\n-            match ty.kind {\n+            match ty.kind() {\n                 // References are simple.\n                 ty::Ref(_, _, Mutability::Mut) => Some((\n                     RefKind::Unique { two_phase: kind == RetagKind::TwoPhase },"}]}