{"sha": "ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzJhZmFhZDM1MTEwMWQ0NWMxYjViOGJiMmZiNTFiZTY2YjI4ZDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-20T21:00:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-20T21:00:12Z"}, "message": "Remove CPlaceInner::Stack", "tree": {"sha": "874b8a9cfe235d4f7474aa29376bb2c1a6306b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/874b8a9cfe235d4f7474aa29376bb2c1a6306b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "html_url": "https://github.com/rust-lang/rust/commit/ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d363d54fd2ec4a5cfc8f4859a968ccf3dcdab69", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d363d54fd2ec4a5cfc8f4859a968ccf3dcdab69", "html_url": "https://github.com/rust-lang/rust/commit/3d363d54fd2ec4a5cfc8f4859a968ccf3dcdab69"}], "stats": {"total": 31, "additions": 5, "deletions": 26}, "files": [{"sha": "a1634bdacfe7d4aa0b99b8a61d57fa51f8c5eae5", "filename": "src/abi/comments.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "patch": "@@ -75,17 +75,6 @@ pub fn add_local_place_comments<'tcx>(\n                 align.pref.bytes(),\n             ));\n         }\n-        CPlaceInner::Stack(stack_slot) => fx.add_entity_comment(\n-            stack_slot,\n-            format!(\n-                \"{:?}: {:?} size={} align={},{}\",\n-                local,\n-                ty,\n-                size.bytes(),\n-                align.abi.bytes(),\n-                align.pref.bytes(),\n-            ),\n-        ),\n         CPlaceInner::NoPlace => fx.add_global_comment(format!(\n             \"zst   {:5} {:20} {:4}b {}, {}\",\n             format!(\"{:?}\", local),"}, {"sha": "3e69ba1a6cca1bbb15e17886cf30cd6da5c3c114", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "patch": "@@ -345,9 +345,9 @@ fn place_location<'a, 'tcx>(\n             // FIXME implement this (used by arguments and returns)\n \n             AttributeValue::Exprloc(Expression(vec![]))\n-        }\n-        CPlaceInner::Stack(stack_slot) => {\n-            AttributeValue::Exprloc(Expression(translate_loc(ValueLoc::Stack(*stack_slot), &context.func.stack_slots).unwrap()))\n+\n+            // For PointerBase::Stack:\n+            //AttributeValue::Exprloc(Expression(translate_loc(ValueLoc::Stack(*stack_slot), &context.func.stack_slots).unwrap()))\n         }\n         CPlaceInner::NoPlace => AttributeValue::Exprloc(Expression(vec![])),\n     }"}, {"sha": "7cabb7caa07263112275753267bf5ae493f93956", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "patch": "@@ -669,7 +669,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                     fx.bcx.set_val_label(val, cranelift::codegen::ir::ValueLabel::from_u32(var.as_u32()));\n                     fx.bcx.def_var(mir_var(var), val);\n                 }\n-                CPlaceInner::Addr(_, _) | CPlaceInner::Stack(_) => {\n+                CPlaceInner::Addr(_, _) => {\n                     // Don't write to `ret`, as the destination memory is already uninitialized.\n                 }\n             }"}, {"sha": "4ac81648700f0d3aad063e5baccb277b014d4982", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72afaad351101d45c1b5b8bb2fb51be66b28d7/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=ad72afaad351101d45c1b5b8bb2fb51be66b28d7", "patch": "@@ -233,7 +233,6 @@ pub struct CPlace<'tcx> {\n pub enum CPlaceInner {\n     Var(Local),\n     Addr(Pointer, Option<Value>),\n-    Stack(StackSlot),\n     NoPlace,\n }\n \n@@ -272,7 +271,7 @@ impl<'tcx> CPlace<'tcx> {\n             offset: None,\n         });\n         CPlace {\n-            inner: CPlaceInner::Stack(stack_slot),\n+            inner: CPlaceInner::Addr(Pointer::stack_slot(stack_slot), None),\n             layout,\n         }\n     }\n@@ -316,10 +315,6 @@ impl<'tcx> CPlace<'tcx> {\n                 assert!(extra.is_none(), \"unsized values are not yet supported\");\n                 CValue::by_ref(ptr, layout)\n             }\n-            CPlaceInner::Stack(stack_slot) => CValue::by_ref(\n-                Pointer::stack_slot(stack_slot),\n-                layout,\n-            ),\n             CPlaceInner::NoPlace => CValue::by_ref(\n                 Pointer::const_addr(fx, i64::try_from(self.layout.align.pref.bytes()).unwrap()),\n                 layout,\n@@ -340,10 +335,6 @@ impl<'tcx> CPlace<'tcx> {\n     ) -> (Pointer, Option<Value>) {\n         match self.inner {\n             CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n-            CPlaceInner::Stack(stack_slot) => (\n-                Pointer::stack_slot(stack_slot),\n-                None,\n-            ),\n             CPlaceInner::NoPlace => {\n                 (\n                     Pointer::const_addr(fx, i64::try_from(self.layout.align.pref.bytes()).unwrap()),\n@@ -431,7 +422,6 @@ impl<'tcx> CPlace<'tcx> {\n                 return;\n             }\n             CPlaceInner::Addr(ptr, None) => ptr,\n-            CPlaceInner::Stack(stack_slot) => Pointer::stack_slot(stack_slot),\n             CPlaceInner::NoPlace => {\n                 if dst_layout.abi != Abi::Uninhabited {\n                     assert_eq!(dst_layout.size.bytes(), 0, \"{:?}\", dst_layout);"}]}