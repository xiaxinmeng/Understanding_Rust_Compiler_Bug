{"sha": "10db5a6064efa345e7334cbb1671ee99e33361d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZGI1YTYwNjRlZmEzNDVlNzMzNGNiYjE2NzFlZTk5ZTMzMzYxZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T16:35:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T16:35:42Z"}, "message": "Auto merge of #7188 - mgacek8:issue7164_needless_collect_FP, r=xFrednet,flip1995\n\n`needless_collect` enhancements\n\nfixes #7164\nchangelog: `needless_collect`: For `BTreeMap` and `HashMap` lint only `is_empty`, as `len` might produce different results than iter's `count`\nchangelog: `needless_collect`: Lint `LinkedList` and `BinaryHeap` in direct usage case as well", "tree": {"sha": "79b6ff22ea78f4cfea9bc7b44f1bfe72c9c97174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b6ff22ea78f4cfea9bc7b44f1bfe72c9c97174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10db5a6064efa345e7334cbb1671ee99e33361d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10db5a6064efa345e7334cbb1671ee99e33361d5", "html_url": "https://github.com/rust-lang/rust/commit/10db5a6064efa345e7334cbb1671ee99e33361d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10db5a6064efa345e7334cbb1671ee99e33361d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08ce8bb70320f23d16a89797fc906529118213da", "url": "https://api.github.com/repos/rust-lang/rust/commits/08ce8bb70320f23d16a89797fc906529118213da", "html_url": "https://github.com/rust-lang/rust/commit/08ce8bb70320f23d16a89797fc906529118213da"}, {"sha": "b24929044877b0a3710f40b3cf27b61d79b5d5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24929044877b0a3710f40b3cf27b61d79b5d5df", "html_url": "https://github.com/rust-lang/rust/commit/b24929044877b0a3710f40b3cf27b61d79b5d5df"}], "stats": {"total": 143, "additions": 114, "deletions": 29}, "files": [{"sha": "d34067808889c567805bd9174d4aa4934f41773b", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/10db5a6064efa345e7334cbb1671ee99e33361d5/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10db5a6064efa345e7334cbb1671ee99e33361d5/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=10db5a6064efa345e7334cbb1671ee99e33361d5", "patch": "@@ -1,16 +1,15 @@\n use super::NEEDLESS_COLLECT;\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::snippet;\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n-use clippy_utils::{is_trait_method, path_to_local_id, paths};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_trait_method, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, GenericArg, GenericArgs, HirId, Local, Pat, PatKind, QPath, StmtKind, Ty};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{MultiSpan, Span};\n \n@@ -28,31 +27,45 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         if let Some(generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n         if let Some(ty) = cx.typeck_results().node_type_opt(ty.hir_id);\n-        if is_type_diagnostic_item(cx, ty, sym::vec_type)\n-            || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n-            || match_type(cx, ty, &paths::BTREEMAP)\n-            || is_type_diagnostic_item(cx, ty, sym::hashmap_type);\n-        if let Some(sugg) = match &*method.ident.name.as_str() {\n-            \"len\" => Some(\"count()\".to_string()),\n-            \"is_empty\" => Some(\"next().is_none()\".to_string()),\n-            \"contains\" => {\n-                let contains_arg = snippet(cx, args[1].span, \"??\");\n-                let (arg, pred) = contains_arg\n-                    .strip_prefix('&')\n-                    .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n-                Some(format!(\"any(|{}| x == {})\", arg, pred))\n-            }\n-            _ => None,\n-        };\n         then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let is_empty_sugg = \"next().is_none()\".to_string();\n+            let method_name = &*method.ident.name.as_str();\n+            let sugg = if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n+                        is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n+                        is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n+                        is_type_diagnostic_item(cx, ty, sym::BinaryHeap) {\n+                match method_name {\n+                    \"len\" => \"count()\".to_string(),\n+                    \"is_empty\" => is_empty_sugg,\n+                    \"contains\" => {\n+                        let contains_arg = snippet_with_applicability(cx, args[1].span, \"??\", &mut applicability);\n+                        let (arg, pred) = contains_arg\n+                            .strip_prefix('&')\n+                            .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n+                        format!(\"any(|{}| x == {})\", arg, pred)\n+                    }\n+                    _ => return,\n+                }\n+            }\n+            else if is_type_diagnostic_item(cx, ty, sym::BTreeMap) ||\n+                is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n+                match method_name {\n+                    \"is_empty\" => is_empty_sugg,\n+                    _ => return,\n+                }\n+            }\n+            else {\n+                return;\n+            };\n             span_lint_and_sugg(\n                 cx,\n                 NEEDLESS_COLLECT,\n                 method0_span.with_hi(expr.span.hi()),\n                 NEEDLESS_COLLECT_MSG,\n                 \"replace with\",\n                 sugg,\n-                Applicability::MachineApplicable,\n+                applicability,\n             );\n         }\n     }\n@@ -86,7 +99,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n-                    match_type(cx, ty, &paths::LINKED_LIST);\n+                    is_type_diagnostic_item(cx, ty, sym::LinkedList);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if let [iter_call] = &*iter_calls;\n                 then {"}, {"sha": "6ecbbcb62495553c3630cff05f0dc4dc871b6639", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10db5a6064efa345e7334cbb1671ee99e33361d5/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/10db5a6064efa345e7334cbb1671ee99e33361d5/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=10db5a6064efa345e7334cbb1671ee99e33361d5", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n-use std::collections::{BTreeSet, HashMap, HashSet};\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n@@ -13,9 +13,24 @@ fn main() {\n         // Empty\n     }\n     sample.iter().cloned().any(|x| x == 1);\n-    sample.iter().map(|x| (x, x)).count();\n+    // #7164 HashMap's and BTreeMap's `len` usage should not be linted\n+    sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+    sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().len();\n+\n+    sample.iter().map(|x| (x, x)).next().is_none();\n+    sample.iter().map(|x| (x, x)).next().is_none();\n+\n     // Notice the `HashSet`--this should not be linted\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this\n     sample.iter().collect::<BTreeSet<_>>().len();\n+\n+    sample.iter().count();\n+    sample.iter().next().is_none();\n+    sample.iter().cloned().any(|x| x == 1);\n+    sample.iter().any(|x| x == &1);\n+\n+    // `BinaryHeap` doesn't have `contains` method\n+    sample.iter().count();\n+    sample.iter().next().is_none();\n }"}, {"sha": "8dc69bcf5b38df30295e0539b1a038916613861e", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/10db5a6064efa345e7334cbb1671ee99e33361d5/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10db5a6064efa345e7334cbb1671ee99e33361d5/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=10db5a6064efa345e7334cbb1671ee99e33361d5", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n-use std::collections::{BTreeSet, HashMap, HashSet};\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n@@ -13,9 +13,24 @@ fn main() {\n         // Empty\n     }\n     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n+    // #7164 HashMap's and BTreeMap's `len` usage should not be linted\n     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+    sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().len();\n+\n+    sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().is_empty();\n+    sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().is_empty();\n+\n     // Notice the `HashSet`--this should not be linted\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this\n     sample.iter().collect::<BTreeSet<_>>().len();\n+\n+    sample.iter().collect::<LinkedList<_>>().len();\n+    sample.iter().collect::<LinkedList<_>>().is_empty();\n+    sample.iter().cloned().collect::<LinkedList<_>>().contains(&1);\n+    sample.iter().collect::<LinkedList<_>>().contains(&&1);\n+\n+    // `BinaryHeap` doesn't have `contains` method\n+    sample.iter().collect::<BinaryHeap<_>>().len();\n+    sample.iter().collect::<BinaryHeap<_>>().is_empty();\n }"}, {"sha": "039091627a8d632c3fed7cabff373e95e4315bfc", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/10db5a6064efa345e7334cbb1671ee99e33361d5/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10db5a6064efa345e7334cbb1671ee99e33361d5/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=10db5a6064efa345e7334cbb1671ee99e33361d5", "patch": "@@ -19,10 +19,52 @@ LL |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == 1)`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:16:35\n+  --> $DIR/needless_collect.rs:20:35\n    |\n-LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().is_empty();\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n \n-error: aborting due to 4 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:21:35\n+   |\n+LL |     sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().is_empty();\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:28:19\n+   |\n+LL |     sample.iter().collect::<LinkedList<_>>().len();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:29:19\n+   |\n+LL |     sample.iter().collect::<LinkedList<_>>().is_empty();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:30:28\n+   |\n+LL |     sample.iter().cloned().collect::<LinkedList<_>>().contains(&1);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == 1)`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:31:19\n+   |\n+LL |     sample.iter().collect::<LinkedList<_>>().contains(&&1);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == &1)`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:34:19\n+   |\n+LL |     sample.iter().collect::<BinaryHeap<_>>().len();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:35:19\n+   |\n+LL |     sample.iter().collect::<BinaryHeap<_>>().is_empty();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+\n+error: aborting due to 11 previous errors\n "}]}