{"sha": "a424a2c1676a29c147252873037e8943d54941d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MjRhMmMxNjc2YTI5YzE0NzI1Mjg3MzAzN2U4OTQzZDU0OTQxZDM=", "commit": {"author": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-08-29T23:17:53Z"}, "committer": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-08-29T23:17:53Z"}, "message": "changed check_impl_item to check_fn and added a few more test cases", "tree": {"sha": "fd9aeb66f384a7c5c6cdee0fcddb505aa875e0fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9aeb66f384a7c5c6cdee0fcddb505aa875e0fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a424a2c1676a29c147252873037e8943d54941d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a424a2c1676a29c147252873037e8943d54941d3", "html_url": "https://github.com/rust-lang/rust/commit/a424a2c1676a29c147252873037e8943d54941d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a424a2c1676a29c147252873037e8943d54941d3/comments", "author": null, "committer": null, "parents": [{"sha": "b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "html_url": "https://github.com/rust-lang/rust/commit/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99"}], "stats": {"total": 149, "additions": 99, "deletions": 50}, "files": [{"sha": "11fefc12316b75cd91939483015d08c2ed7c1b45", "filename": "clippy_lints/src/panic_in_result.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a424a2c1676a29c147252873037e8943d54941d3/clippy_lints%2Fsrc%2Fpanic_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a424a2c1676a29c147252873037e8943d54941d3/clippy_lints%2Fsrc%2Fpanic_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result.rs?ref=a424a2c1676a29c147252873037e8943d54941d3", "patch": "@@ -1,6 +1,8 @@\n use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -21,7 +23,6 @@ declare_clippy_lint! {\n     ///     panic!(\"error\");\n     /// }\n     /// ```\n-\n     pub PANIC_IN_RESULT,\n     restriction,\n     \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n@@ -30,22 +31,26 @@ declare_clippy_lint! {\n declare_lint_pass!(PanicInResult => [PANIC_IN_RESULT]);\n \n impl<'tcx> LateLintPass<'tcx> for PanicInResult {\n-    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n+    /*\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        _: FnKind<'tcx>,\n+        _: &'tcx hir::FnDecl<'tcx>,\n+        body: &'tcx hir::Body<'tcx>,\n+        span: Span,\n+        hir_id: hir::HirId,\n+    ) {\n         if_chain! {\n-            // first check if it's a method or function\n-            if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n-            // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(result_type));\n-            then {\n-                lint_impl_body(cx, impl_item.span, impl_item);\n+            if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type));\n+            then\n+            {\n+                lint_impl_body(cx, span, body);\n             }\n         }\n-    }\n+    }*/\n }\n \n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Expr, ImplItemKind};\n-\n struct FindPanicUnimplementedUnreachable {\n     result: Vec<Span>,\n }\n@@ -70,29 +75,21 @@ impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n     }\n }\n \n-fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tcx hir::ImplItem<'_>) {\n-    if_chain! {\n-        if let ImplItemKind::Fn(_, body_id) = impl_item.kind;\n-        then {\n-            let body = cx.tcx.hir().body(body_id);\n-            let mut fpu = FindPanicUnimplementedUnreachable {\n-                result: Vec::new(),\n-            };\n-            fpu.visit_expr(&body.value);\n-\n-            // if we've found one, lint\n-            if  !fpu.result.is_empty()  {\n-                span_lint_and_then(\n-                    cx,\n-                    PANIC_IN_RESULT,\n-                    impl_span,\n-                    \"used unimplemented, unreachable, todo or panic in a function that returns result\",\n-                    move |diag| {\n-                        diag.help(\n-                            \"unimplemented, unreachable, todo or panic should not be used in a function that returns result\" );\n-                        diag.span_note(fpu.result, \"will cause the application to crash.\");\n-                    });\n-            }\n-        }\n+fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir::Body<'tcx>) {\n+    let mut panics = FindPanicUnimplementedUnreachable { result: Vec::new() };\n+    panics.visit_expr(&body.value);\n+    if !panics.result.is_empty() {\n+        span_lint_and_then(\n+            cx,\n+            PANIC_IN_RESULT,\n+            impl_span,\n+            \"used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\",\n+            move |diag| {\n+                diag.help(\n+                    \"`unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n+                );\n+                diag.span_note(panics.result, \"return Err() instead of panicking\");\n+            },\n+        );\n     }\n }"}, {"sha": "f6fb2f1ab612096b2e53fce8cdf8580820aef9a4", "filename": "tests/ui/panic_in_result.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a424a2c1676a29c147252873037e8943d54941d3/tests%2Fui%2Fpanic_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a424a2c1676a29c147252873037e8943d54941d3/tests%2Fui%2Fpanic_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result.rs?ref=a424a2c1676a29c147252873037e8943d54941d3", "patch": "@@ -49,4 +49,22 @@ impl A {\n     }\n }\n \n-fn main() {}\n+fn function_result_with_panic() -> Result<bool, String> // should emit lint\n+{\n+    panic!(\"error\");\n+}\n+\n+fn todo() {\n+    println!(\"something\");\n+}\n+\n+fn function_result_with_custom_todo() -> Result<bool, String> // should not emit lint\n+{\n+    todo();\n+    Ok(true)\n+}\n+\n+fn main() -> Result<(), String> {\n+    todo!(\"finish main method\");\n+    Ok(())\n+}"}, {"sha": "9faedf82986033ef55435de84ad34e59a735db4a", "filename": "tests/ui/panic_in_result.stderr", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a424a2c1676a29c147252873037e8943d54941d3/tests%2Fui%2Fpanic_in_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a424a2c1676a29c147252873037e8943d54941d3/tests%2Fui%2Fpanic_in_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result.stderr?ref=a424a2c1676a29c147252873037e8943d54941d3", "patch": "@@ -1,4 +1,4 @@\n-error: used unimplemented, unreachable, todo or panic in a function that returns result\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n   --> $DIR/panic_in_result.rs:6:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n@@ -8,15 +8,15 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::panic-in-result` implied by `-D warnings`\n-   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n-note: will cause the application to crash.\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n   --> $DIR/panic_in_result.rs:8:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used unimplemented, unreachable, todo or panic in a function that returns result\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n   --> $DIR/panic_in_result.rs:11:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n@@ -25,15 +25,15 @@ LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n    |\n-   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n-note: will cause the application to crash.\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n   --> $DIR/panic_in_result.rs:13:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used unimplemented, unreachable, todo or panic in a function that returns result\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n   --> $DIR/panic_in_result.rs:16:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n@@ -42,15 +42,15 @@ LL | |         unreachable!();\n LL | |     }\n    | |_____^\n    |\n-   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n-note: will cause the application to crash.\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n   --> $DIR/panic_in_result.rs:18:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used unimplemented, unreachable, todo or panic in a function that returns result\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n   --> $DIR/panic_in_result.rs:21:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n@@ -59,13 +59,47 @@ LL | |         todo!(\"Finish this\");\n LL | |     }\n    | |_____^\n    |\n-   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n-note: will cause the application to crash.\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n   --> $DIR/panic_in_result.rs:23:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result.rs:52:1\n+   |\n+LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n+LL | | {\n+LL | |     panic!(\"error\");\n+LL | | }\n+   | |_^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result.rs:54:5\n+   |\n+LL |     panic!(\"error\");\n+   |     ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result.rs:67:1\n+   |\n+LL | / fn main() -> Result<(), String> {\n+LL | |     todo!(\"finish main method\");\n+LL | |     Ok(())\n+LL | | }\n+   | |_^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result.rs:68:5\n+   |\n+LL |     todo!(\"finish main method\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n "}]}