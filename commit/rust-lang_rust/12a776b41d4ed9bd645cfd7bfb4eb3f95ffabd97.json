{"sha": "12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYTc3NmI0MWQ0ZWQ5YmQ2NDVjZmQ3YmZiNGViM2Y5NWZmYWJkOTc=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-18T11:14:33Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-18T11:29:29Z"}, "message": "review comment: reduce duplication", "tree": {"sha": "9b619f2d8df214aa88100d18ffdf9051778ff317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b619f2d8df214aa88100d18ffdf9051778ff317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "html_url": "https://github.com/rust-lang/rust/commit/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14add46e94aa57d6f659ccfb5401e00ffacddc0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/14add46e94aa57d6f659ccfb5401e00ffacddc0b", "html_url": "https://github.com/rust-lang/rust/commit/14add46e94aa57d6f659ccfb5401e00ffacddc0b"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "10f74dc1a043c1fc41b5f7cb96408c9f1a9bd6bf", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "patch": "@@ -2073,43 +2073,46 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         continue;\n                     }\n                 });\n+                let span_unnamed_borrow = |span: Span| {\n+                    let lo = span.lo() + BytePos(1);\n+                    span.with_lo(lo).with_hi(lo)\n+                };\n+                let span_underscore_borrow = |span: Span| {\n+                    let lo = span.lo() + BytePos(1);\n+                    let hi = lo + BytePos(2);\n+                    span.with_lo(lo).with_hi(hi)\n+                };\n+                let unnamed_borrow =\n+                    |snippet: &str| snippet.starts_with('&') && !snippet.starts_with(\"&'\");\n                 for param in params {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n-                        if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n-                            let lo = param.span.lo() + BytePos(1);\n-                            let span = param.span.with_lo(lo).with_hi(lo);\n+                        if unnamed_borrow(&snippet) {\n+                            let span = span_unnamed_borrow(param.span);\n                             introduce_suggestion.push((span, \"'a \".to_string()));\n-                        } else if let Some(_) = snippet.strip_prefix(\"&'_ \") {\n-                            let lo = param.span.lo() + BytePos(1);\n-                            let hi = lo + BytePos(2);\n-                            let span = param.span.with_lo(lo).with_hi(hi);\n+                        } else if snippet.starts_with(\"&'_ \") {\n+                            let span = span_underscore_borrow(param.span);\n                             introduce_suggestion.push((span, \"'a\".to_string()));\n                         }\n                     }\n                 }\n-                for ((span, _), sugg) in spans_with_counts.iter().copied().zip(suggs.iter()) {\n-                    match (sugg, self.tcx.sess.source_map().span_to_snippet(span)) {\n-                        (Some(sugg), Ok(snippet))\n-                            if snippet.starts_with('&')\n-                                && !snippet.starts_with(\"&'\")\n-                                && sugg.starts_with(\"&\") =>\n-                        {\n-                            let lo = span.lo() + BytePos(1);\n-                            let span = span.with_lo(lo).with_hi(lo);\n+                for (span, sugg) in spans_with_counts.iter().copied().zip(suggs.iter()).filter_map(\n+                    |((span, _), sugg)| match sugg {\n+                        Some(sugg) => Some((span, sugg)),\n+                        _ => None,\n+                    },\n+                ) {\n+                    match self.tcx.sess.source_map().span_to_snippet(span) {\n+                        Ok(snippet) if unnamed_borrow(&snippet) && sugg.starts_with(\"&\") => {\n+                            let span = span_unnamed_borrow(span);\n                             introduce_suggestion.push((span, sugg[1..].to_string()));\n                         }\n-                        (Some(sugg), Ok(snippet))\n-                            if snippet.starts_with(\"&'_ \") && sugg.starts_with(\"&\") =>\n-                        {\n-                            let lo = span.lo() + BytePos(1);\n-                            let hi = lo + BytePos(2);\n-                            let span = span.with_lo(lo).with_hi(hi);\n+                        Ok(snippet) if snippet.starts_with(\"&'_ \") && sugg.starts_with(\"&\") => {\n+                            let span = span_underscore_borrow(span);\n                             introduce_suggestion.push((span, sugg[1..].to_string()));\n                         }\n-                        (Some(sugg), _) => {\n+                        _ => {\n                             introduce_suggestion.push((span, sugg.to_string()));\n                         }\n-                        _ => {}\n                     }\n                 }\n                 err.multipart_suggestion_with_style("}]}