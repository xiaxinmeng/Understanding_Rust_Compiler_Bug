{"sha": "b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGFkN2RjYjIyZWQ2YmY4ZWJhYWU1NmI0MzM5YmQ2NGY2OTgzZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T10:26:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T10:26:31Z"}, "message": "Auto merge of #27082 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25993, #27038, #27069, #27070, #27080\n- Failed merges: #27034, #27064", "tree": {"sha": "c6264e5f99eea0c99ac7d99c32446e7347160bfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6264e5f99eea0c99ac7d99c32446e7347160bfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "html_url": "https://github.com/rust-lang/rust/commit/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9bd6cd26a8f9d11188e39c52aafb4436b09990", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9bd6cd26a8f9d11188e39c52aafb4436b09990", "html_url": "https://github.com/rust-lang/rust/commit/8e9bd6cd26a8f9d11188e39c52aafb4436b09990"}, {"sha": "ed8b7ea83e4c10c9a4bd3390b5f24af23a9146dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8b7ea83e4c10c9a4bd3390b5f24af23a9146dd", "html_url": "https://github.com/rust-lang/rust/commit/ed8b7ea83e4c10c9a4bd3390b5f24af23a9146dd"}], "stats": {"total": 130, "additions": 113, "deletions": 17}, "files": [{"sha": "5a6519cb4b7a2e5e0b91fe626f93b5cef89a528a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -747,17 +747,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n            rcvr_ty_generics,\n            rcvr_ty_predicates);\n \n-    let tcx = ccx.tcx;\n-    let mut seen_methods = FnvHashSet();\n-    for (sig, id, ident, vis, span) in methods {\n-        if !seen_methods.insert(ident.name) {\n-            let fn_desc = match sig.explicit_self.node {\n-                ast::SelfStatic => \"associated function\",\n-                _               => \"method\",\n-            };\n-            span_err!(tcx.sess, span, E0201, \"duplicate {}\", fn_desc);\n-        }\n-\n+    for (sig, id, ident, vis, _span) in methods {\n         convert_method(ccx,\n                        container,\n                        sig,\n@@ -859,7 +849,30 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n             };\n \n             // Convert all the associated consts.\n+            // Also, check if there are any duplicate associated items\n+            let mut seen_type_items = FnvHashSet();\n+            let mut seen_value_items = FnvHashSet();\n+\n             for impl_item in impl_items {\n+                let seen_items = match impl_item.node {\n+                    ast::TypeImplItem(_) => &mut seen_type_items,\n+                    _                    => &mut seen_value_items,\n+                };\n+                if !seen_items.insert(impl_item.ident.name) {\n+                    let desc = match impl_item.node {\n+                        ast::ConstImplItem(_, _) => \"associated constant\",\n+                        ast::TypeImplItem(_) => \"associated type\",\n+                        ast::MethodImplItem(ref sig, _) =>\n+                            match sig.explicit_self.node {\n+                                ast::SelfStatic => \"associated function\",\n+                                _ => \"method\",\n+                            },\n+                        _ => \"associated item\",\n+                    };\n+\n+                    span_err!(tcx.sess, impl_item.span, E0201, \"duplicate {}\", desc);\n+                }\n+\n                 if let ast::ConstImplItem(ref ty, ref expr) = impl_item.node {\n                     let ty = ccx.icx(&ty_predicates)\n                                 .to_ty(&ExplicitRscope, &*ty);"}, {"sha": "ed04fde463c92b31d98ac414838f9eeb1bf50780", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1689,7 +1689,8 @@ unsafe impl Bar for Foo { }\n \"##,\n \n E0201: r##\"\n-It is an error to define an associated function more than once.\n+It is an error to define two associated items (like methods, associated types,\n+associated functions, etc.) with the same identifier.\n \n For example:\n \n@@ -1698,20 +1699,24 @@ struct Foo(u8);\n \n impl Foo {\n     fn bar(&self) -> bool { self.0 > 5 }\n-\n-    // error: duplicate associated function\n-    fn bar() {}\n+    fn bar() {} // error: duplicate associated function\n }\n \n trait Baz {\n+    type Quux;\n     fn baz(&self) -> bool;\n }\n \n impl Baz for Foo {\n+    type Quux = u32;\n+\n     fn baz(&self) -> bool { true }\n \n     // error: duplicate method\n     fn baz(&self) -> bool { self.0 > 5 }\n+\n+    // error: duplicate associated type\n+    type Quux = u32;\n }\n ```\n \"##,"}, {"sha": "6842de56d215de10d09680e327840a98405cf318", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -11,7 +11,7 @@\n //! Inspection and manipulation of the process's environment.\n //!\n //! This module contains methods to inspect various aspects such as\n-//! environment varibles, process arguments, the current directory, and various\n+//! environment variables, process arguments, the current directory, and various\n //! other important directories.\n \n #![stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "92d53e2e4288499efb18ef0794f531f85c21813a", "filename": "src/libstd/sys/windows/ext/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fraw.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -10,7 +10,7 @@\n \n //! Windows-specific primitives\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n use os::raw::c_void;\n "}, {"sha": "6a7eaecae7f42ae6de68acd8dbd73ef1417ff0ca", "filename": "src/test/compile-fail/associated-item-duplicate-names-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-2.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    const bar: bool = true;\n+    fn bar() {} //~ ERROR duplicate associated function\n+}\n+\n+fn main() {}"}, {"sha": "7c4c5ca6b4eab9448ee66b5497f6c6fcd7d5d31f", "filename": "src/test/compile-fail/associated-item-duplicate-names-3.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-3.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Before the introduction of the \"duplicate associated type\" error, the\n+// program below used to result in the \"ambiguous associated type\" error E0223,\n+// which is unexpected.\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+struct Baz;\n+\n+impl Foo for Baz {\n+    type Bar = i16;\n+    type Bar = u16; //~ ERROR duplicate associated type\n+}\n+\n+fn main() {\n+    let x: Baz::Bar = 5;\n+}"}, {"sha": "4c484b49024efc44a2b9445962a6a620ab70adf2", "filename": "src/test/compile-fail/associated-item-duplicate-names.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for issue #23969\n+\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    type Ty;\n+    const BAR: u32;\n+}\n+\n+impl Foo for () {\n+    type Ty = ();\n+    type Ty = usize; //~ ERROR duplicate associated type\n+    const BAR: u32 = 7;\n+    const BAR: u32 = 8; //~ ERROR duplicate associated constant\n+}\n+\n+fn main() {\n+    let _: <() as Foo>::Ty = ();\n+    let _: u32 = <() as Foo>::BAR;\n+}"}]}