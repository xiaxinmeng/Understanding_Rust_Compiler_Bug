{"sha": "3607c7a982c55a165adda8056cc228acf918bc37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDdjN2E5ODJjNTVhMTY1YWRkYTgwNTZjYzIyOGFjZjkxOGJjMzc=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "message": "Implement RFC #43\n\nRemove the ability of the borrow checker to determine that repeated\ndereferences of a Box<T> refer to the same memory object. This will\nusually require one of two workarounds:\n\n1) The interior of a Box<T> will sometimes need to be moved / borrowed\ninto a temporary before moving / borrowing individual derived paths.\n\n2) A `ref x` pattern will have to be replaced with a `box ref x`\npattern.\n\nFixes #16094.\n\n[breaking-change]", "tree": {"sha": "ffd33ab87af7d82ebe61085cd43db134fc72016f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd33ab87af7d82ebe61085cd43db134fc72016f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3607c7a982c55a165adda8056cc228acf918bc37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3607c7a982c55a165adda8056cc228acf918bc37", "html_url": "https://github.com/rust-lang/rust/commit/3607c7a982c55a165adda8056cc228acf918bc37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3607c7a982c55a165adda8056cc228acf918bc37/comments", "author": null, "committer": null, "parents": [{"sha": "8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "html_url": "https://github.com/rust-lang/rust/commit/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "7dec42538cffb625a7a331e3c9a1d71fe21a43f8", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3607c7a982c55a165adda8056cc228acf918bc37/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3607c7a982c55a165adda8056cc228acf918bc37/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=3607c7a982c55a165adda8056cc228acf918bc37", "patch": "@@ -261,6 +261,7 @@ impl<'a> CheckLoanCtxt<'a> {\n         //     let x = &mut a.b.c; // Restricts a, a.b, and a.b.c\n         //     let y = a;          // Conflicts with restriction\n \n+        let loan_path = owned_ptr_base_path(loan_path);\n         let cont = self.each_in_scope_loan(scope_id, |loan| {\n             let mut ret = true;\n             for restr_path in loan.restricted_paths.iter() {\n@@ -395,8 +396,9 @@ impl<'a> CheckLoanCtxt<'a> {\n             return true;\n         }\n \n+        let loan2_base_path = owned_ptr_base_path_rc(&loan2.loan_path);\n         for restr_path in loan1.restricted_paths.iter() {\n-            if *restr_path != loan2.loan_path { continue; }\n+            if *restr_path != loan2_base_path { continue; }\n \n             let old_pronoun = if new_loan.loan_path == old_loan.loan_path {\n                 \"it\".to_string()\n@@ -648,7 +650,8 @@ impl<'a> CheckLoanCtxt<'a> {\n \n         debug!(\"check_if_path_is_moved(id={:?}, use_kind={:?}, lp={})\",\n                id, use_kind, lp.repr(self.bccx.tcx));\n-        self.move_data.each_move_of(id, lp, |move, moved_lp| {\n+        let base_lp = owned_ptr_base_path_rc(lp);\n+        self.move_data.each_move_of(id, &base_lp, |move, moved_lp| {\n             self.bccx.report_use_of_moved_value(\n                 span,\n                 use_kind,"}, {"sha": "208f58f6b54c1956b35d071ddfa2932bdd32a1c4", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3607c7a982c55a165adda8056cc228acf918bc37/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3607c7a982c55a165adda8056cc228acf918bc37/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=3607c7a982c55a165adda8056cc228acf918bc37", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -52,14 +52,15 @@ fn borrow_same_field_twice_imm_imm() {\n fn borrow_both_fields_mut() {\n     let mut foo = make_foo();\n     let bar1 = &mut foo.bar1;\n-    let _bar2 = &mut foo.bar2;\n+    let _bar2 = &mut foo.bar2; //~ ERROR cannot borrow\n     *bar1;\n }\n \n fn borrow_both_mut_pattern() {\n     let mut foo = make_foo();\n     match *foo {\n         Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n+        //~^ ERROR cannot borrow\n     }\n }\n \n@@ -120,7 +121,7 @@ fn borrow_imm_and_base_imm() {\n fn borrow_mut_and_imm() {\n     let mut foo = make_foo();\n     let bar1 = &mut foo.bar1;\n-    let _foo1 = &foo.bar2;\n+    let _foo1 = &foo.bar2; //~ ERROR cannot borrow\n     *bar1;\n }\n \n@@ -133,7 +134,7 @@ fn borrow_mut_from_imm() {\n fn borrow_long_path_both_mut() {\n     let mut foo = make_foo();\n     let bar1 = &mut foo.bar1.int1;\n-    let foo1 = &mut foo.bar2.int2;\n+    let foo1 = &mut foo.bar2.int2; //~ ERROR cannot borrow\n     *bar1;\n     *foo1;\n }"}, {"sha": "0e7c959d58c333a969ef72a3ff1e44e5e0988844", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3607c7a982c55a165adda8056cc228acf918bc37/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3607c7a982c55a165adda8056cc228acf918bc37/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=3607c7a982c55a165adda8056cc228acf918bc37", "patch": "@@ -13,8 +13,9 @@ struct Pair { a: Box<int>, b: Box<int> }\n \n pub fn main() {\n     let mut x = box Pair {a: box 10, b: box 20};\n-    match x {\n-      box Pair {a: ref mut a, b: ref mut _b} => {\n+    let x_internal = &mut *x;\n+    match *x_internal {\n+      Pair {a: ref mut a, b: ref mut _b} => {\n         assert!(**a == 10); *a = box 30; assert!(**a == 30);\n       }\n     }"}]}