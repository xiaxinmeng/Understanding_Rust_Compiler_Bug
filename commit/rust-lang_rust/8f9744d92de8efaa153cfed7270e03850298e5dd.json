{"sha": "8f9744d92de8efaa153cfed7270e03850298e5dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOTc0NGQ5MmRlOGVmYWExNTNjZmVkNzI3MGUwMzg1MDI5OGU1ZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T01:15:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T01:39:58Z"}, "message": "tutorial: Cleanup", "tree": {"sha": "6128dcd694b8629427b343e5d0e31f135aae1a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6128dcd694b8629427b343e5d0e31f135aae1a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9744d92de8efaa153cfed7270e03850298e5dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9744d92de8efaa153cfed7270e03850298e5dd", "html_url": "https://github.com/rust-lang/rust/commit/8f9744d92de8efaa153cfed7270e03850298e5dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9744d92de8efaa153cfed7270e03850298e5dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c243c11058d80a707f79df08cbf32a5d407c1639", "url": "https://api.github.com/repos/rust-lang/rust/commits/c243c11058d80a707f79df08cbf32a5d407c1639", "html_url": "https://github.com/rust-lang/rust/commit/c243c11058d80a707f79df08cbf32a5d407c1639"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "c15135b998f73f558401da30e58ef479ceec7071", "filename": "doc/tutorial.md", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8f9744d92de8efaa153cfed7270e03850298e5dd/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f9744d92de8efaa153cfed7270e03850298e5dd/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8f9744d92de8efaa153cfed7270e03850298e5dd", "patch": "@@ -478,9 +478,7 @@ a type error. Read about [single-variant enums](#single_variant_enum)\n further on if you need to create a type name that's not just a\n synonym.\n \n-## Literals\n-\n-### Numeric literals\n+## Numeric literals\n \n Integers can be written in decimal (`144`), hexadecimal (`0x90`), and\n binary (`0b10010000`) base.\n@@ -539,7 +537,7 @@ and `f64` can be used to create literals of a specific type. The\n suffix `f` can be used to write `float` literals without a dot or\n exponent: `3f`.\n \n-### Other literals\n+## Other literals\n \n The nil literal is written just like the type: `()`. The keywords\n `true` and `false` produce the boolean literals.\n@@ -1224,8 +1222,8 @@ Because of this Rust also introduces a global \"exchange heap\". Objects\n allocated here have _ownership semantics_, meaning that there is only\n a single variable that refers to them. For this reason they are\n refered to as _unique boxes_. All tasks may allocate objects on this\n-heap, then _move_ those allocations to other tasks, avoiding expensive\n-copies.\n+heap, then transfer ownership of those allocations to other tasks,\n+avoiding expensive copies.\n \n ## What to be aware of\n \n@@ -1531,10 +1529,9 @@ if favorite_crayon_name.len() > 5 {\n \n # Closures\n \n-Named functions, like those in the previous section, may not refer\n-to local variables decalared outside the function - they do not\n-close over their environment. For example you couldn't write the\n-following:\n+Named functions, like those we've seen so far, may not refer to local\n+variables decalared outside the function - they do not \"close over\n+their environment\". For example you couldn't write the following:\n \n ~~~~ {.ignore}\n let foo = 10;\n@@ -1557,10 +1554,11 @@ let closure = |arg| println(#fmt(\"captured_var=%d, arg=%d\", captured_var, arg));\n call_closure_with_ten(closure);\n ~~~~\n \n-The types of the arguments are generally omitted, as is the return\n-type, because the compiler can almost always infer them. In the rare\n-case where the compiler needs assistance though, the arguments and\n-return types may be annotated.\n+Closures begin with the argument list between bars and are followed by\n+a single expression. The types of the arguments are generally omitted,\n+as is the return type, because the compiler can almost always infer\n+them. In the rare case where the compiler needs assistance though, the\n+arguments and return types may be annotated.\n \n ~~~~\n # type mygoodness = fn(str) -> str; type what_the = int;\n@@ -1584,7 +1582,7 @@ position and cannot be stored in structures nor returned from\n functions. Despite the limitations stack closures are used\n pervasively in Rust code.\n \n-## Boxed closures\n+## Shared closures\n \n When you need to store a closure in a data structure, a stack closure\n will not do, since the compiler will refuse to let you store it. For"}]}