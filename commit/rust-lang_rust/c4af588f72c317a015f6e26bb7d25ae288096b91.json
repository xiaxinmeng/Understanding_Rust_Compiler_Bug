{"sha": "c4af588f72c317a015f6e26bb7d25ae288096b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWY1ODhmNzJjMzE3YTAxNWY2ZTI2YmI3ZDI1YWUyODgwOTZiOTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-30T17:22:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-01T09:49:03Z"}, "message": "Correctly align all allocs\n\nFixes #348", "tree": {"sha": "0b9ac69541826462afacc3f2719017e11d66cfe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9ac69541826462afacc3f2719017e11d66cfe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4af588f72c317a015f6e26bb7d25ae288096b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4af588f72c317a015f6e26bb7d25ae288096b91", "html_url": "https://github.com/rust-lang/rust/commit/c4af588f72c317a015f6e26bb7d25ae288096b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4af588f72c317a015f6e26bb7d25ae288096b91/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0093b8c2f44f560dd51b26ac1c6bb902513ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0093b8c2f44f560dd51b26ac1c6bb902513ec7", "html_url": "https://github.com/rust-lang/rust/commit/2f0093b8c2f44f560dd51b26ac1c6bb902513ec7"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "e7d90b730ebf32de9b78d0b35224fea826f50163", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4af588f72c317a015f6e26bb7d25ae288096b91/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4af588f72c317a015f6e26bb7d25ae288096b91/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=c4af588f72c317a015f6e26bb7d25ae288096b91", "patch": "@@ -17,7 +17,3 @@ rustc-std-workspace-alloc = { path = \"./rustc-std-workspace-alloc\" }\n \n [profile.release]\n debug = true\n-\n-[profile.dev]\n-# FIXME correctly align constants, so that copy_nonoverlapping doesn't complain about alignment\n-debug-assertions = false"}, {"sha": "f57f1ff635d701baa69937947d5d163975fdfe3f", "filename": "example/mini_core.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4af588f72c317a015f6e26bb7d25ae288096b91/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4af588f72c317a015f6e26bb7d25ae288096b91/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=c4af588f72c317a015f6e26bb7d25ae288096b91", "patch": "@@ -186,6 +186,21 @@ impl Sub for i16 {\n     }\n }\n \n+#[lang = \"rem\"]\n+pub trait Rem<RHS = Self> {\n+    type Output;\n+\n+    fn rem(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl Rem for usize {\n+    type Output = Self;\n+\n+    fn rem(self, rhs: Self) -> Self {\n+        self % rhs\n+    }\n+}\n+\n #[lang = \"bitor\"]\n pub trait BitOr<RHS = Self> {\n     type Output;"}, {"sha": "48ae80baaad49fa3937b9cdfe07ea4a611d2fbdc", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4af588f72c317a015f6e26bb7d25ae288096b91/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4af588f72c317a015f6e26bb7d25ae288096b91/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=c4af588f72c317a015f6e26bb7d25ae288096b91", "patch": "@@ -134,6 +134,10 @@ fn main() {\n \n     call_return_u128_pair();\n \n+    let slice = &[0, 1] as &[i32];\n+    let slice_ptr = slice as *const [i32] as *const i32;\n+    assert_eq!(slice_ptr as usize % 4, 0);\n+\n     //return;\n \n     unsafe {"}, {"sha": "b8f7d039855df11587917fac47cd1999e61824de", "filename": "src/constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4af588f72c317a015f6e26bb7d25ae288096b91/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4af588f72c317a015f6e26bb7d25ae288096b91/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c4af588f72c317a015f6e26bb7d25ae288096b91", "patch": "@@ -3,7 +3,7 @@ use std::borrow::Cow;\n use rustc::mir::interpret::{\n     read_target_uint, AllocId, GlobalAlloc, Allocation, ConstValue, InterpResult, GlobalId, Scalar,\n };\n-use rustc::ty::Const;\n+use rustc::ty::{Const, layout::Align};\n use rustc_mir::interpret::{\n     InterpCx, ImmTy, Machine, Memory, MemoryKind, OpTy, PlaceTy,\n     StackPopCleanup,\n@@ -170,13 +170,13 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n     fx.constants.todo.insert(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.module, alloc_id);\n+    let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n     cplace_for_dataid(fx, const_.ty, data_id)\n }\n \n-fn data_id_for_alloc_id(module: &mut Module<impl Backend>, alloc_id: AllocId) -> DataId {\n+fn data_id_for_alloc_id<B: Backend>(module: &mut Module<B>, alloc_id: AllocId, align: Align) -> DataId {\n     module\n-        .declare_data(&format!(\"__alloc_{}\", alloc_id.0), Linkage::Local, false, None)\n+        .declare_data(&format!(\"__alloc_{}\", alloc_id.0), Linkage::Local, false, Some(align.bytes() as u8))\n         .unwrap()\n }\n \n@@ -245,8 +245,8 @@ fn define_all_allocs(\n         let (data_id, alloc) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n                 //println!(\"alloc_id {}\", alloc_id);\n-                let data_id = data_id_for_alloc_id(module, alloc_id);\n                 let alloc = memory.get(alloc_id).unwrap();\n+                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align);\n                 (data_id, alloc)\n             }\n             TodoItem::Static(def_id) => {\n@@ -302,7 +302,7 @@ fn define_all_allocs(\n                 }\n                 GlobalAlloc::Memory(_) => {\n                     cx.todo.insert(TodoItem::Alloc(reloc));\n-                    data_id_for_alloc_id(module, reloc)\n+                    data_id_for_alloc_id(module, reloc, alloc.align)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     cx.todo.insert(TodoItem::Static(def_id));"}]}