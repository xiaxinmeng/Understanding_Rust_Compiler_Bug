{"sha": "f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDEwZDdlNjE4YjM4YWVhN2FkMDczZmZhZjliYjkwYjEyYzZjYTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-27T21:16:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-27T21:16:43Z"}, "message": "move `cast_kinds` into `TypeckTables` where it belongs", "tree": {"sha": "ab66defc1a88a4170d2255b46b189bd95684b645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab66defc1a88a4170d2255b46b189bd95684b645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "html_url": "https://github.com/rust-lang/rust/commit/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463affee6b74aabf19b27b6040a20a3c95709cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/463affee6b74aabf19b27b6040a20a3c95709cc5", "html_url": "https://github.com/rust-lang/rust/commit/463affee6b74aabf19b27b6040a20a3c95709cc5"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "931d83f5e188a3f0a022ea600cb0d8211afcc29f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "patch": "@@ -231,7 +231,11 @@ pub struct TypeckTables<'tcx> {\n     /// of the struct - this is needed because it is non-trivial to\n     /// normalize while preserving regions. This table is used only in\n     /// MIR construction and hence is not serialized to metadata.\n-    pub fru_field_types: NodeMap<Vec<Ty<'tcx>>>\n+    pub fru_field_types: NodeMap<Vec<Ty<'tcx>>>,\n+\n+    /// Maps a cast expression to its kind. This is keyed on the\n+    /// *from* expression of the cast, not the cast itself.\n+    pub cast_kinds: NodeMap<ty::cast::CastKind>,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -246,7 +250,8 @@ impl<'tcx> TypeckTables<'tcx> {\n             closure_tys: NodeMap(),\n             closure_kinds: NodeMap(),\n             liberated_fn_sigs: NodeMap(),\n-            fru_field_types: NodeMap()\n+            fru_field_types: NodeMap(),\n+            cast_kinds: NodeMap(),\n         }\n     }\n \n@@ -533,10 +538,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// expression defining the closure.\n     pub closure_kinds: RefCell<DepTrackingMap<maps::ClosureKinds<'tcx>>>,\n \n-    /// Maps a cast expression to its kind. This is keyed on the\n-    /// *from* expression of the cast, not the cast itself.\n-    pub cast_kinds: RefCell<NodeMap<ty::cast::CastKind>>,\n-\n     /// Maps Fn items to a collection of fragment infos.\n     ///\n     /// The main goal is to identify data (each of which may be moved\n@@ -792,7 +793,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             custom_coerce_unsized_kinds: RefCell::new(DefIdMap()),\n             closure_tys: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             closure_kinds: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n-            cast_kinds: RefCell::new(NodeMap()),\n             fragment_infos: RefCell::new(DefIdMap()),\n             crate_name: Symbol::intern(crate_name),\n             data_layout: data_layout,"}, {"sha": "7eaf1fe13986518e85fd8ccd4c44759cb6b6bd7a", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "patch": "@@ -663,7 +663,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprCast(ref source, _) => {\n             // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n             // using a coercion (or is a no-op).\n-            if let Some(&TyCastKind::CoercionCast) = cx.tcx.cast_kinds.borrow().get(&source.id) {\n+            if let Some(&TyCastKind::CoercionCast) = cx.tables().cast_kinds.get(&source.id) {\n                 // Convert the lexpr to a vexpr.\n                 ExprKind::Use { source: source.to_ref() }\n             } else {"}, {"sha": "0b55513f8318c3c45cd8228fb8f3823a0f15db35", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "patch": "@@ -314,7 +314,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         }\n         hir::ExprCast(ref from, _) => {\n             debug!(\"Checking const cast(id={})\", from.id);\n-            match v.tcx.cast_kinds.borrow().get(&from.id) {\n+            match v.tables.cast_kinds.get(&from.id) {\n                 None => span_bug!(e.span, \"no kind for cast\"),\n                 Some(&CastKind::PtrAddrCast) | Some(&CastKind::FnPtrAddrCast) => {\n                     v.promotable = false;"}, {"sha": "0218f1c70ba8e151666f3fad6066306492f62ecf", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "patch": "@@ -348,12 +348,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         } else if self.try_coercion_cast(fcx) {\n             self.trivial_cast_lint(fcx);\n             debug!(\" -> CoercionCast\");\n-            fcx.tcx.cast_kinds.borrow_mut().insert(self.expr.id, CastKind::CoercionCast);\n+            fcx.tables.borrow_mut().cast_kinds.insert(self.expr.id, CastKind::CoercionCast);\n         } else {\n             match self.do_check(fcx) {\n                 Ok(k) => {\n                     debug!(\" -> {:?}\", k);\n-                    fcx.tcx.cast_kinds.borrow_mut().insert(self.expr.id, k);\n+                    fcx.tables.borrow_mut().cast_kinds.insert(self.expr.id, k);\n                 }\n                 Err(e) => self.report_cast_error(fcx, e),\n             };"}, {"sha": "7f82d7829ce52d7e700ff06bce99f8552f6bb2c2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f4010d7e618b38aea7ad073ffaf9bb90b12c6ca5", "patch": "@@ -51,6 +51,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_anon_types();\n         wbcx.visit_deferred_obligations(item_id);\n         wbcx.visit_type_nodes();\n+        wbcx.visit_cast_types();\n \n         let tables = self.tcx.alloc_tables(wbcx.tables);\n         self.tcx.tables.borrow_mut().insert(item_def_id, tables);\n@@ -291,6 +292,15 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn visit_cast_types(&mut self) {\n+        if self.fcx.writeback_errors.get() {\n+            return\n+        }\n+\n+        self.tables.cast_kinds.extend(\n+            self.fcx.tables.borrow().cast_kinds.iter().map(|(&key, &value)| (key, value)));\n+    }\n+\n     fn visit_anon_types(&self) {\n         if self.fcx.writeback_errors.get() {\n             return"}]}