{"sha": "1b150c4043654f93fcf7250b560581d44fc2b43d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTUwYzQwNDM2NTRmOTNmY2Y3MjUwYjU2MDU4MWQ0NGZjMmI0M2Q=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-01T02:47:08Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:26:37Z"}, "message": "Store `Ident` rather than just `Name` in HIR types `Item` and `ForeignItem`.", "tree": {"sha": "fe12751444dbd07e6f6dac525d1374024e0e4cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe12751444dbd07e6f6dac525d1374024e0e4cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b150c4043654f93fcf7250b560581d44fc2b43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b150c4043654f93fcf7250b560581d44fc2b43d", "html_url": "https://github.com/rust-lang/rust/commit/1b150c4043654f93fcf7250b560581d44fc2b43d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b150c4043654f93fcf7250b560581d44fc2b43d/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "html_url": "https://github.com/rust-lang/rust/commit/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f"}], "stats": {"total": 378, "additions": 221, "deletions": 157}, "files": [{"sha": "6685aa1acac39d6bbedfad66b51c058bd17729e7", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1,4 +1,4 @@\n-//! Serialization for client<->server communication.\n+//! Serialization for client-server communication.\n \n use std::any::Any;\n use std::char;"}, {"sha": "d6b94052d1d5eda31a80810d2330b62357d5cb48", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -454,7 +454,7 @@ pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     visitor.visit_vis(&item.vis);\n-    visitor.visit_name(item.span, item.name);\n+    visitor.visit_ident(item.ident);\n     match item.node {\n         ItemKind::ExternCrate(orig_name) => {\n             visitor.visit_id(item.id);\n@@ -472,7 +472,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_nested_body(body);\n         }\n         ItemKind::Fn(ref declaration, header, ref generics, body_id) => {\n-            visitor.visit_fn(FnKind::ItemFn(item.name,\n+            visitor.visit_fn(FnKind::ItemFn(item.ident.name,\n                                             generics,\n                                             header,\n                                             &item.vis,\n@@ -528,7 +528,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemKind::Union(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_id(item.id);\n-            visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);\n+            visitor.visit_variant_data(struct_definition, item.ident.name, generics, item.id,\n+                                       item.span);\n         }\n         ItemKind::Trait(.., ref generics, ref bounds, ref trait_item_refs) => {\n             visitor.visit_id(item.id);\n@@ -569,9 +570,9 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics,\n                                         parent_item_id: NodeId) {\n-    visitor.visit_name(variant.span, variant.node.name);\n+    visitor.visit_ident(variant.node.ident);\n     visitor.visit_variant_data(&variant.node.data,\n-                               variant.node.name,\n+                               variant.node.ident.name,\n                                generics,\n                                parent_item_id,\n                                variant.span);\n@@ -720,7 +721,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) {\n     visitor.visit_id(foreign_item.id);\n     visitor.visit_vis(&foreign_item.vis);\n-    visitor.visit_name(foreign_item.span, foreign_item.name);\n+    visitor.visit_ident(foreign_item.ident);\n \n     match foreign_item.node {\n         ForeignItemKind::Fn(ref function_declaration, ref param_names, ref generics) => {"}, {"sha": "545a5024c5288061bb6d3831d78b4a762b9f9e34", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1360,7 +1360,7 @@ impl<'a> LoweringContext<'a> {\n             let exist_ty_item = hir::Item {\n                 id: exist_ty_id.node_id,\n                 hir_id: exist_ty_id.hir_id,\n-                name: keywords::Invalid.name(),\n+                ident: keywords::Invalid.ident(),\n                 attrs: Default::default(),\n                 node: exist_ty_item_kind,\n                 vis: respan(span.shrink_to_lo(), hir::VisibilityKind::Inherited),\n@@ -1563,7 +1563,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n         Spanned {\n             node: hir::VariantKind {\n-                name: v.node.ident.name,\n+                ident: v.node.ident,\n                 attrs: self.lower_attrs(&v.node.attrs),\n                 data: self.lower_variant_data(&v.node.data),\n                 disr_expr: v.node.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n@@ -2738,7 +2738,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_item_kind(\n         &mut self,\n         id: NodeId,\n-        name: &mut Name,\n+        ident: &mut Ident,\n         attrs: &hir::HirVec<Attribute>,\n         vis: &mut hir::Visibility,\n         i: &ItemKind,\n@@ -2752,7 +2752,7 @@ impl<'a> LoweringContext<'a> {\n                     span: use_tree.span,\n                 };\n \n-                self.lower_use_tree(use_tree, &prefix, id, vis, name, attrs)\n+                self.lower_use_tree(use_tree, &prefix, id, vis, ident, attrs)\n             }\n             ItemKind::Static(ref t, m, ref e) => {\n                 let value = self.lower_body(None, |this| this.lower_expr(e));\n@@ -2944,7 +2944,7 @@ impl<'a> LoweringContext<'a> {\n         prefix: &Path,\n         id: NodeId,\n         vis: &mut hir::Visibility,\n-        name: &mut Name,\n+        ident: &mut Ident,\n         attrs: &hir::HirVec<Attribute>,\n     ) -> hir::ItemKind {\n         debug!(\"lower_use_tree(tree={:?})\", tree);\n@@ -2960,28 +2960,28 @@ impl<'a> LoweringContext<'a> {\n \n         match tree.kind {\n             UseTreeKind::Simple(rename, id1, id2) => {\n-                *name = tree.ident().name;\n+                *ident = tree.ident();\n \n-                // First apply the prefix to the path\n+                // First, apply the prefix to the path.\n                 let mut path = Path {\n                     segments,\n                     span: path.span,\n                 };\n \n-                // Correctly resolve `self` imports\n+                // Correctly resolve `self` imports.\n                 if path.segments.len() > 1\n                     && path.segments.last().unwrap().ident.name == keywords::SelfLower.name()\n                 {\n                     let _ = path.segments.pop();\n                     if rename.is_none() {\n-                        *name = path.segments.last().unwrap().ident.name;\n+                        *ident = path.segments.last().unwrap().ident;\n                     }\n                 }\n \n                 let parent_def_index = self.current_hir_id_owner.last().unwrap().0;\n                 let mut defs = self.expect_full_def_from_use(id);\n-                // we want to return *something* from this function, so hang onto the first item\n-                // for later\n+                // We want to return *something* from this function, so hold onto the first item\n+                // for later.\n                 let ret_def = defs.next().unwrap_or(Def::Err);\n \n                 // Here, we are looping over namespaces, if they exist for the definition\n@@ -2991,7 +2991,7 @@ impl<'a> LoweringContext<'a> {\n                 // two imports.\n                 for (def, &new_node_id) in defs.zip([id1, id2].iter()) {\n                     let vis = vis.clone();\n-                    let name = name.clone();\n+                    let ident = ident.clone();\n                     let mut path = path.clone();\n                     for seg in &mut path.segments {\n                         seg.id = self.sess.next_node_id();\n@@ -3032,7 +3032,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::Item {\n                                 id: new_id.node_id,\n                                 hir_id: new_id.hir_id,\n-                                name: name,\n+                                ident,\n                                 attrs: attrs.clone(),\n                                 node: item,\n                                 vis,\n@@ -3058,8 +3058,8 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemKind::Use(path, hir::UseKind::Glob)\n             }\n             UseTreeKind::Nested(ref trees) => {\n-                // Nested imports are desugared into simple\n-                // imports. So if we start with\n+                // Nested imports are desugared into simple imports.\n+                // So, if we start with\n                 //\n                 // ```\n                 // pub(x) use foo::{a, b};\n@@ -3080,14 +3080,14 @@ impl<'a> LoweringContext<'a> {\n                 // `self.items`. However, the structure of this\n                 // function also requires us to return one item, and\n                 // for that we return the `{}` import (called the\n-                // \"`ListStem`\").\n+                // `ListStem`).\n \n                 let prefix = Path {\n                     segments,\n                     span: prefix.span.to(path.span),\n                 };\n \n-                // Add all the nested PathListItems to the HIR.\n+                // Add all the nested `PathListItem`s to the HIR.\n                 for &(ref use_tree, id) in trees {\n                     self.allocate_hir_id_counter(id, &use_tree);\n \n@@ -3097,10 +3097,10 @@ impl<'a> LoweringContext<'a> {\n                     } = self.lower_node_id(id);\n \n                     let mut vis = vis.clone();\n-                    let mut name = name.clone();\n+                    let mut ident = ident.clone();\n                     let mut prefix = prefix.clone();\n \n-                    // Give the segments new ids since they are being cloned.\n+                    // Give the segments new node-ids since they are being cloned.\n                     for seg in &mut prefix.segments {\n                         seg.id = self.sess.next_node_id();\n                     }\n@@ -3115,7 +3115,7 @@ impl<'a> LoweringContext<'a> {\n                                                        &prefix,\n                                                        new_id,\n                                                        &mut vis,\n-                                                       &mut name,\n+                                                       &mut ident,\n                                                        attrs);\n \n                         let vis_kind = match vis.node {\n@@ -3139,7 +3139,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::Item {\n                                 id: new_id,\n                                 hir_id: new_hir_id,\n-                                name,\n+                                ident,\n                                 attrs: attrs.clone(),\n                                 node: item,\n                                 vis,\n@@ -3166,7 +3166,7 @@ impl<'a> LoweringContext<'a> {\n                         *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n                     }\n                     hir::VisibilityKind::Restricted { .. } => {\n-                        // do nothing here, as described in the comment on the match\n+                        // Do nothing here, as described in the comment on the match.\n                     }\n                 }\n \n@@ -3414,15 +3414,15 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n-        let mut name = i.ident.name;\n+        let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n             if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n                               attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n                 self.exported_macros.push(hir::MacroDef {\n-                    name,\n+                    name: ident.name,\n                     vis,\n                     attrs,\n                     id: i.id,\n@@ -3434,14 +3434,14 @@ impl<'a> LoweringContext<'a> {\n             return None;\n         }\n \n-        let node = self.lower_item_kind(i.id, &mut name, &attrs, &mut vis, &i.node);\n+        let node = self.lower_item_kind(i.id, &mut ident, &attrs, &mut vis, &i.node);\n \n         let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n \n         Some(hir::Item {\n             id: node_id,\n             hir_id,\n-            name,\n+            ident,\n             attrs,\n             node,\n             vis,\n@@ -3454,7 +3454,7 @@ impl<'a> LoweringContext<'a> {\n         let def_id = self.resolver.definitions().local_def_id(node_id);\n         hir::ForeignItem {\n             id: node_id,\n-            name: i.ident.name,\n+            ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             node: match i.node {\n                 ForeignItemKind::Fn(ref fdec, ref generics) => {"}, {"sha": "837a20ac0f2f02590b8cab93b62580817d7206d7", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -228,7 +228,7 @@ impl<'a> FnLikeNode<'a> {\n                 ast::ItemKind::Fn(ref decl, header, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.id,\n-                        name: i.name,\n+                        name: i.ident.name,\n                         decl: &decl,\n                         body: block,\n                         vis: &i.vis,"}, {"sha": "188d487d6448545769960dd1f7af71e1f8aaaf14", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -813,11 +813,11 @@ impl<'hir> Map<'hir> {\n     /// Returns the name associated with the given NodeId's AST.\n     pub fn name(&self, id: NodeId) -> Name {\n         match self.get(id) {\n-            Node::Item(i) => i.name,\n-            Node::ForeignItem(i) => i.name,\n+            Node::Item(i) => i.ident.name,\n+            Node::ForeignItem(fi) => fi.ident.name,\n             Node::ImplItem(ii) => ii.ident.name,\n             Node::TraitItem(ti) => ti.ident.name,\n-            Node::Variant(v) => v.node.name,\n+            Node::Variant(v) => v.node.ident.name,\n             Node::Field(f) => f.ident.name,\n             Node::Lifetime(lt) => lt.name.ident().name,\n             Node::GenericParam(param) => param.name.ident().name,\n@@ -953,7 +953,7 @@ impl<'a, 'hir> NodesMatchingSuffix<'a, 'hir> {\n             loop {\n                 if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {\n-                        return Some((id, item.name))\n+                        return Some((id, item.ident.name))\n                     }\n                 }\n                 let parent = map.get_parent(id);\n@@ -1009,9 +1009,9 @@ trait Named {\n \n impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() } }\n \n-impl Named for Item { fn name(&self) -> Name { self.name } }\n-impl Named for ForeignItem { fn name(&self) -> Name { self.name } }\n-impl Named for VariantKind { fn name(&self) -> Name { self.name } }\n+impl Named for Item { fn name(&self) -> Name { self.ident.name } }\n+impl Named for ForeignItem { fn name(&self) -> Name { self.ident.name } }\n+impl Named for VariantKind { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n@@ -1194,7 +1194,7 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n         }\n         Some(Node::Variant(ref variant)) => {\n             format!(\"variant {} in {}{}\",\n-                    variant.node.name,\n+                    variant.node.ident,\n                     path_str(), id_str)\n         }\n         Some(Node::Field(ref field)) => {"}, {"sha": "f92ac4f74c3d7faabb76ef7ba5e13c7ceaf915c9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -2015,7 +2015,7 @@ pub struct EnumDef {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct VariantKind {\n-    pub name: Name,\n+    pub ident: Ident,\n     pub attrs: HirVec<Attribute>,\n     pub data: VariantData,\n     /// Explicit discriminant, e.g., `Foo = 1`\n@@ -2176,7 +2176,7 @@ pub struct ItemId {\n /// The name might be a dummy name in case of anonymous items\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item {\n-    pub name: Name,\n+    pub ident: Ident,\n     pub id: NodeId,\n     pub hir_id: HirId,\n     pub attrs: HirVec<Attribute>,\n@@ -2331,7 +2331,7 @@ pub enum AssociatedItemKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignItem {\n-    pub name: Name,\n+    pub ident: Ident,\n     pub attrs: HirVec<Attribute>,\n     pub node: ForeignItemKind,\n     pub id: NodeId,"}, {"sha": "423dbab879d2d164045bf31d83176b82b1b10e97", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -450,7 +450,7 @@ impl<'a> State<'a> {\n                                   abi: Abi::Rust,\n                                   asyncness: hir::IsAsync::NotAsync,\n                               },\n-                              Some(item.name),\n+                              Some(item.ident.name),\n                               generics,\n                               &item.vis,\n                               arg_names,\n@@ -464,7 +464,7 @@ impl<'a> State<'a> {\n                 if m {\n                     self.word_space(\"mut\")?;\n                 }\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.word_space(\":\")?;\n                 self.print_type(&t)?;\n                 self.s.word(\";\")?;\n@@ -473,7 +473,7 @@ impl<'a> State<'a> {\n             }\n             hir::ForeignItemKind::Type => {\n                 self.head(visibility_qualified(&item.vis, \"type\"))?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.s.word(\";\")?;\n                 self.end()?; // end the head-ibox\n                 self.end() // end the outer cbox\n@@ -533,7 +533,7 @@ impl<'a> State<'a> {\n                     self.s.word(\"as\")?;\n                     self.s.space()?;\n                 }\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.s.word(\";\")?;\n                 self.end()?; // end inner head-block\n                 self.end()?; // end outer head-block\n@@ -544,10 +544,10 @@ impl<'a> State<'a> {\n \n                 match kind {\n                     hir::UseKind::Single => {\n-                        if path.segments.last().unwrap().ident.name != item.name {\n+                        if path.segments.last().unwrap().ident != item.ident {\n                             self.s.space()?;\n                             self.word_space(\"as\")?;\n-                            self.print_name(item.name)?;\n+                            self.print_ident(item.ident)?;\n                         }\n                         self.s.word(\";\")?;\n                     }\n@@ -562,7 +562,7 @@ impl<'a> State<'a> {\n                 if m == hir::MutMutable {\n                     self.word_space(\"mut\")?;\n                 }\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.word_space(\":\")?;\n                 self.print_type(&ty)?;\n                 self.s.space()?;\n@@ -575,7 +575,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::Const(ref ty, expr) => {\n                 self.head(visibility_qualified(&item.vis, \"const\"))?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.word_space(\":\")?;\n                 self.print_type(&ty)?;\n                 self.s.space()?;\n@@ -590,7 +590,7 @@ impl<'a> State<'a> {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n                               header,\n-                              Some(item.name),\n+                              Some(item.ident.name),\n                               typarams,\n                               &item.vis,\n                               &[],\n@@ -602,7 +602,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::Mod(ref _mod) => {\n                 self.head(visibility_qualified(&item.vis, \"mod\"))?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.nbsp()?;\n                 self.bopen()?;\n                 self.print_mod(_mod, &item.attrs)?;\n@@ -622,7 +622,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::Ty(ref ty, ref generics) => {\n                 self.head(visibility_qualified(&item.vis, \"type\"))?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.print_generic_params(&generics.params)?;\n                 self.end()?; // end the inner ibox\n \n@@ -635,7 +635,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::Existential(ref exist) => {\n                 self.head(visibility_qualified(&item.vis, \"existential type\"))?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.print_generic_params(&exist.generics.params)?;\n                 self.end()?; // end the inner ibox\n \n@@ -657,15 +657,16 @@ impl<'a> State<'a> {\n                 self.end()?; // end the outer ibox\n             }\n             hir::ItemKind::Enum(ref enum_definition, ref params) => {\n-                self.print_enum_def(enum_definition, params, item.name, item.span, &item.vis)?;\n+                self.print_enum_def(enum_definition, params, item.ident.name, item.span,\n+                                    &item.vis)?;\n             }\n             hir::ItemKind::Struct(ref struct_def, ref generics) => {\n                 self.head(visibility_qualified(&item.vis, \"struct\"))?;\n-                self.print_struct(struct_def, generics, item.name, item.span, true)?;\n+                self.print_struct(struct_def, generics, item.ident.name, item.span, true)?;\n             }\n             hir::ItemKind::Union(ref struct_def, ref generics) => {\n                 self.head(visibility_qualified(&item.vis, \"union\"))?;\n-                self.print_struct(struct_def, generics, item.name, item.span, true)?;\n+                self.print_struct(struct_def, generics, item.ident.name, item.span, true)?;\n             }\n             hir::ItemKind::Impl(unsafety,\n                           polarity,\n@@ -712,7 +713,7 @@ impl<'a> State<'a> {\n                 self.print_is_auto(is_auto)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"trait\")?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.print_generic_params(&generics.params)?;\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 for b in bounds.iter() {\n@@ -737,7 +738,7 @@ impl<'a> State<'a> {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n                 self.word_nbsp(\"trait\")?;\n-                self.print_name(item.name)?;\n+                self.print_ident(item.ident)?;\n                 self.print_generic_params(&generics.params)?;\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 // FIXME(durka) this seems to be some quite outdated syntax\n@@ -895,7 +896,7 @@ impl<'a> State<'a> {\n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n         self.head(\"\")?;\n         let generics = hir::Generics::empty();\n-        self.print_struct(&v.node.data, &generics, v.node.name, v.span, false)?;\n+        self.print_struct(&v.node.data, &generics, v.node.ident.name, v.span, false)?;\n         if let Some(ref d) = v.node.disr_expr {\n             self.s.space()?;\n             self.word_space(\"=\")?;"}, {"sha": "9bf82baa68758d307d3263b451397e9c3584acab", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -818,7 +818,7 @@ impl_stable_hash_for!(struct hir::EnumDef {\n });\n \n impl_stable_hash_for!(struct hir::VariantKind {\n-    name,\n+    ident -> (ident.name),\n     attrs,\n     data,\n     disr_expr\n@@ -852,7 +852,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         let hir::Item {\n-            name,\n+            ident,\n             ref attrs,\n             id: _,\n             hir_id: _,\n@@ -862,7 +862,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {\n         } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n-            name.hash_stable(hcx, hasher);\n+            ident.name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);\n@@ -926,7 +926,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::AssociatedItemKind {\n }\n \n impl_stable_hash_for!(struct hir::ForeignItem {\n-    name,\n+    ident -> (ident.name),\n     attrs,\n     node,\n     id,"}, {"sha": "0c769c91801b8a9ff3cb2ccf96dbbeb22695cb08", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -557,7 +557,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n             self.warn_dead_code(\n                 item.id,\n                 span,\n-                item.name,\n+                item.ident.name,\n                 item.node.descriptive_variant(),\n                 participle,\n             );\n@@ -572,7 +572,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                      g: &'tcx hir::Generics,\n                      id: ast::NodeId) {\n         if self.should_warn_about_variant(&variant.node) {\n-            self.warn_dead_code(variant.node.data.id(), variant.span, variant.node.name,\n+            self.warn_dead_code(variant.node.data.id(), variant.span, variant.node.ident.name,\n                                 \"variant\", \"constructed\");\n         } else {\n             intravisit::walk_variant(self, variant, g, id);\n@@ -581,7 +581,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem) {\n         if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.id, fi.span, fi.name,\n+            self.warn_dead_code(fi.id, fi.span, fi.ident.name,\n                                 fi.node.descriptive_variant(), \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);"}, {"sha": "6b593a1a9f9b248a56abbafc8c027f15cec4d522", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -86,7 +86,7 @@ fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n                 EntryPointType::Start\n             } else if attr::contains_name(&item.attrs, \"main\") {\n                 EntryPointType::MainAttr\n-            } else if item.name == \"main\" {\n+            } else if item.ident.name == \"main\" {\n                 if at_root {\n                     // This is a top-level function so can be 'main'.\n                     EntryPointType::MainNamed"}, {"sha": "36d51c5971278cd41c3dd80407bd85739513eac8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -2040,7 +2040,7 @@ impl<'tcx> Debug for Place<'tcx> {\n             Promoted(ref promoted) => write!(fmt, \"({:?}: {:?})\", promoted.0, promoted.1),\n             Projection(ref data) => match data.elem {\n                 ProjectionElem::Downcast(ref adt_def, index) => {\n-                    write!(fmt, \"({:?} as {})\", data.base, adt_def.variants[index].name)\n+                    write!(fmt, \"({:?} as {})\", data.base, adt_def.variants[index].ident)\n                 }\n                 ProjectionElem::Deref => write!(fmt, \"(*{:?})\", data.base),\n                 ProjectionElem::Field(field, ty) => {"}, {"sha": "171c53b7b20ba7e56082b85c2257a200327e325b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1,7 +1,7 @@\n use session::{self, DataTypeKind};\n use ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n-use syntax::ast::{self, IntTy, UintTy};\n+use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n use syntax_pos::DUMMY_SP;\n \n@@ -1228,7 +1228,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n         let adt_kind = adt_def.adt_kind();\n         let adt_packed = adt_def.repr.packed();\n \n-        let build_variant_info = |n: Option<ast::Name>,\n+        let build_variant_info = |n: Option<Ident>,\n                                   flds: &[ast::Name],\n                                   layout: TyLayout<'tcx>| {\n             let mut min_size = Size::ZERO;\n@@ -1273,15 +1273,15 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n         match layout.variants {\n             Variants::Single { index } => {\n                 debug!(\"print-type-size `{:#?}` variant {}\",\n-                       layout, adt_def.variants[index].name);\n+                       layout, adt_def.variants[index].ident);\n                 if !adt_def.variants.is_empty() {\n                     let variant_def = &adt_def.variants[index];\n                     let fields: Vec<_> =\n                         variant_def.fields.iter().map(|f| f.ident.name).collect();\n                     record(adt_kind.into(),\n                            adt_packed,\n                            None,\n-                           vec![build_variant_info(Some(variant_def.name),\n+                           vec![build_variant_info(Some(variant_def.ident),\n                                                    &fields,\n                                                    layout)]);\n                 } else {\n@@ -1299,7 +1299,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     adt_def.variants.iter_enumerated().map(|(i, variant_def)| {\n                         let fields: Vec<_> =\n                             variant_def.fields.iter().map(|f| f.ident.name).collect();\n-                        build_variant_info(Some(variant_def.name),\n+                        build_variant_info(Some(variant_def.ident),\n                                            &fields,\n                                            layout.for_variant(self, i))\n                     })"}, {"sha": "b484e015672125bf27ff38449290faab65f9c498", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1773,7 +1773,7 @@ pub struct VariantDef {\n     /// The variant's `DefId`. If this is a tuple-like struct,\n     /// this is the `DefId` of the struct's ctor.\n     pub did: DefId,\n-    pub name: Name, // struct's name if this is a struct\n+    pub ident: Ident, // struct's name if this is a struct\n     pub discr: VariantDiscr,\n     pub fields: Vec<FieldDef>,\n     pub ctor_kind: CtorKind,\n@@ -1797,15 +1797,15 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n     /// remove this hack and use the constructor DefId everywhere.\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                did: DefId,\n-               name: Name,\n+               ident: Ident,\n                discr: VariantDiscr,\n                fields: Vec<FieldDef>,\n                adt_kind: AdtKind,\n                ctor_kind: CtorKind,\n                attribute_def_id: DefId)\n                -> Self\n     {\n-        debug!(\"VariantDef::new({:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?})\", did, name, discr,\n+        debug!(\"VariantDef::new({:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?})\", did, ident, discr,\n                fields, adt_kind, ctor_kind, attribute_def_id);\n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n         if adt_kind == AdtKind::Struct && tcx.has_attr(attribute_def_id, \"non_exhaustive\") {\n@@ -1814,7 +1814,7 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n         }\n         VariantDef {\n             did,\n-            name,\n+            ident,\n             discr,\n             fields,\n             ctor_kind,\n@@ -1830,7 +1830,7 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n \n impl_stable_hash_for!(struct VariantDef {\n     did,\n-    name,\n+    ident -> (ident.name),\n     discr,\n     fields,\n     ctor_kind,\n@@ -1971,8 +1971,6 @@ impl_stable_hash_for!(struct ReprFlags {\n     bits\n });\n \n-\n-\n /// Represents the repr options provided by the user,\n #[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Default)]\n pub struct ReprOptions {"}, {"sha": "0fd04e9d20393ccebf7fd688de88220ac00f3357", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1215,7 +1215,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         name: if fallback {\n                             String::new()\n                         } else {\n-                            adt.variants[index].name.as_str().to_string()\n+                            adt.variants[index].ident.as_str().to_string()\n                         },\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n@@ -1255,7 +1255,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         name: if fallback {\n                             String::new()\n                         } else {\n-                            adt.variants[i].name.as_str().to_string()\n+                            adt.variants[i].ident.as_str().to_string()\n                         },\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n@@ -1321,7 +1321,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                        self.layout,\n                                        self.layout.fields.offset(0),\n                                        self.layout.field(cx, 0).size);\n-                    name.push_str(&adt.variants[*niche_variants.start()].name.as_str());\n+                    name.push_str(&adt.variants[*niche_variants.start()].ident.as_str());\n \n                     // Create the (singleton) list of descriptions of union members.\n                     vec![\n@@ -1365,7 +1365,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         };\n \n                         MemberDescription {\n-                            name: adt.variants[i].name.as_str().to_string(),\n+                            name: adt.variants[i].ident.as_str().to_string(),\n                             type_metadata: variant_type_metadata,\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n@@ -1433,7 +1433,7 @@ fn describe_enum_variant(\n     containing_scope: &'ll DIScope,\n     span: Span,\n ) -> (&'ll DICompositeType, MemberDescriptionFactory<'ll, 'tcx>) {\n-    let variant_name = variant.name.as_str();\n+    let variant_name = variant.ident.as_str();\n     let unique_type_id = debug_context(cx).type_map\n                                           .borrow_mut()\n                                           .get_unique_type_id_of_enum_variant(\n@@ -1527,7 +1527,7 @@ fn prepare_enum_metadata(\n         let enumerators_metadata: Vec<_> = def.discriminants(cx.tcx)\n             .zip(&def.variants)\n             .map(|((_, discr), v)| {\n-                let name = SmallCStr::new(&v.name.as_str());\n+                let name = SmallCStr::new(&v.ident.as_str());\n                 unsafe {\n                     Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                         DIB(cx),"}, {"sha": "97128c2d2a2ce519ab709d49a7a87ce4b2f38bd7", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -60,7 +60,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                  = (&layout.ty.sty, &layout.variants)\n             {\n                 if def.is_enum() && !def.variants.is_empty() {\n-                    write!(&mut name, \"::{}\", def.variants[index].name).unwrap();\n+                    write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n                 }\n             }\n             Some(name)"}, {"sha": "a5f7d676862e08b1ca0b41a2966a4fa0ddac5941", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -261,7 +261,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n             assert!(idx < names.len());\n             for item in &m.item_ids {\n                 let item = this.infcx.tcx.hir().expect_item(item.id);\n-                if item.name.to_string() == names[idx] {\n+                if item.ident.to_string() == names[idx] {\n                     return search(this, item, idx + 1, names);\n                 }\n             }"}, {"sha": "2694a04b94ce4c3106bdd2f81486325e6b0026da", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         if let hir::ItemKind::Mod(_) = it.node {\n-            self.check_snake_case(cx, \"module\", &it.name.as_str(), Some(it.span));\n+            self.check_snake_case(cx, \"module\", &it.ident.as_str(), Some(it.span));\n         }\n     }\n \n@@ -354,10 +354,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n                 if attr::find_by_name(&it.attrs, \"no_mangle\").is_some() {\n                     return;\n                 }\n-                NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", it.name, it.span);\n+                NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", it.ident.name,\n+                                                      it.span);\n             }\n             hir::ItemKind::Const(..) => {\n-                NonUpperCaseGlobals::check_upper_case(cx, \"constant\", it.name, it.span);\n+                NonUpperCaseGlobals::check_upper_case(cx, \"constant\", it.ident.name,\n+                                                      it.span);\n             }\n             _ => {}\n         }"}, {"sha": "642681a73a8a0a57c2f878efdffe9ce7b4bf78f7", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -837,7 +837,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                                 let bytes = variant_layout.size.bytes().saturating_sub(discr_size);\n \n                                 debug!(\"- variant `{}` is {} bytes large\",\n-                                       variant.node.name,\n+                                       variant.node.ident,\n                                        bytes);\n                                 bytes\n                             })"}, {"sha": "dc8db5be5820ab4024778b5c224cc07ad3f49bfc", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -553,7 +553,7 @@ impl<'a, 'tcx> CrateMetadata {\n         ty::VariantDef::new(\n             tcx,\n             def_id,\n-            self.item_name(index).as_symbol(),\n+            Ident::from_interned_str(self.item_name(index)),\n             data.discr,\n             item.children.decode(self).map(|index| {\n                 let f = self.entry(index);"}, {"sha": "f758e488877158ace2e54508113ca17dd908cac1", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -306,7 +306,7 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n                 let pat_ty = cx.tables.pat_ty(p);\n                 if let ty::Adt(edef, _) = pat_ty.sty {\n                     if edef.is_enum() && edef.variants.iter().any(|variant| {\n-                        variant.name == ident.name && variant.ctor_kind == CtorKind::Const\n+                        variant.ident == ident && variant.ctor_kind == CtorKind::Const\n                     }) {\n                         let ty_path = cx.tcx.item_path_str(edef.did);\n                         let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,"}, {"sha": "62ec52aac134605238e442c4661383277d8d261e", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 let mut start_or_continue = || if first { first = false; \"\" } else { \", \" };\n \n                 if let Some(variant) = variant {\n-                    write!(f, \"{}\", variant.name)?;\n+                    write!(f, \"{}\", variant.ident)?;\n \n                     // Only for Adt we can have `S {...}`,\n                     // which we handle separately here."}, {"sha": "a5fb44587400a1323e412e3a061967f19189fcdb", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -246,7 +246,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         variant_id: VariantIdx,\n         new_op: OpTy<'tcx, M::PointerTag>\n     ) -> EvalResult<'tcx> {\n-        let name = old_op.layout.ty.ty_adt_def().unwrap().variants[variant_id].name;\n+        let name = old_op.layout.ty.ty_adt_def().unwrap().variants[variant_id].ident.name;\n         self.visit_elem(new_op, PathElem::Variant(name))\n     }\n "}, {"sha": "a851d384d78f3ca64868e4c88e35b6a4eb9e61f1", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -276,7 +276,7 @@ impl<'a> Resolver<'a> {\n                     let features = self.session.features_untracked();\n                     if attr_kind == NonMacroAttrKind::Custom {\n                         assert!(path.segments.len() == 1);\n-                        let name = path.segments[0].ident.name.as_str();\n+                        let name = path.segments[0].ident.as_str();\n                         if name.starts_with(\"rustc_\") {\n                             if !features.rustc_attrs {\n                                 let msg = \"unless otherwise specified, attributes with the prefix \\"}, {"sha": "f33060dde4f15cb818616a583da8ac4c21292b1e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1322,8 +1322,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     span,\n                     &format!(\"no variant `{}` on enum `{}`\", &assoc_name.as_str(), ty_str),\n                 );\n-                // Check if it was a typo\n-                let input = adt_def.variants.iter().map(|variant| &variant.name);\n+                // Check if it was a typo.\n+                let input = adt_def.variants.iter().map(|variant| &variant.ident.name);\n                 if let Some(suggested_name) = find_best_match_for_name(\n                     input,\n                     &assoc_name.as_str(),"}, {"sha": "4e3cb5c7f1c0d6d4665156a99dfcc35b1cede231", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -952,7 +952,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 if plural == \"\" {\n                     let input = unmentioned_fields.iter().map(|field| &field.name);\n                     let suggested_name =\n-                        find_best_match_for_name(input, &ident.name.as_str(), None);\n+                        find_best_match_for_name(input, &ident.as_str(), None);\n                     if let Some(suggested_name) = suggested_name {\n                         err.span_suggestion(*span, \"did you mean\", suggested_name.to_string());\n                         // we don't want to throw `E0027` in case we have thrown `E0026` for them"}, {"sha": "a36b21921436ecaf9cba86641274bdfbd891e4ed", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -71,7 +71,7 @@ fn equate_intrinsic_type<'a, 'tcx>(\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n-    let name = it.name.as_str();\n+    let name = it.ident.as_str();\n \n     let mk_va_list_ty = || {\n         tcx.lang_items().va_list().map(|did| {\n@@ -393,7 +393,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let def_id = tcx.hir().local_def_id(it.id);\n     let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n-    let name = it.name.as_str();\n+    let name = it.ident.as_str();\n \n     let (n_tps, inputs, output) = match &*name {\n         \"simd_eq\" | \"simd_ne\" | \"simd_lt\" | \"simd_le\" | \"simd_gt\" | \"simd_ge\" => {"}, {"sha": "65a58d345ccfa076b1c1e020ba1f229f54ccf1b8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     \"method\"\n                 } else if actual.is_enum() {\n                     if let Adt(ref adt_def, _) = actual.sty {\n-                        let names = adt_def.variants.iter().map(|s| &s.name);\n+                        let names = adt_def.variants.iter().map(|s| &s.ident.name);\n                         suggestion = find_best_match_for_name(names,\n                                                               &item_name.as_str(),\n                                                               None);"}, {"sha": "414cc363f97a1cf4ac1554296ef25a900d82eea3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1327,7 +1327,7 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n         }\n         hir::ItemKind::Fn(..) => {} // entirely within check_item_body\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n-            debug!(\"ItemKind::Impl {} with id {}\", it.name, it.id);\n+            debug!(\"ItemKind::Impl {} with id {}\", it.ident, it.id);\n             let impl_def_id = tcx.hir().local_def_id(it.id);\n             if let Some(impl_trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n                 check_impl_items_against_trait(\n@@ -3529,7 +3529,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 ty::Adt(adt, ..) if adt.is_enum() => {\n                     struct_span_err!(self.tcx.sess, field.ident.span, E0559,\n                                      \"{} `{}::{}` has no field named `{}`\",\n-                                     kind_name, actual, variant.name, field.ident)\n+                                     kind_name, actual, variant.ident, field.ident)\n                 }\n                 _ => {\n                     struct_span_err!(self.tcx.sess, field.ident.span, E0560,\n@@ -3551,7 +3551,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if adt.is_enum() {\n                         err.span_label(field.ident.span,\n                                        format!(\"`{}::{}` does not have this field\",\n-                                               ty, variant.name));\n+                                               ty, variant.ident));\n                     } else {\n                         err.span_label(field.ident.span,\n                                        format!(\"`{}` does not have this field\", ty));\n@@ -4813,13 +4813,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let parent = self.tcx.hir().get(fn_id);\n \n             if let Node::Item(&hir::Item {\n-                name, node: hir::ItemKind::Fn(ref decl, ..), ..\n+                ident, node: hir::ItemKind::Fn(ref decl, ..), ..\n             }) = parent {\n                 decl.clone().and_then(|decl| {\n                     // This is less than ideal, it will not suggest a return type span on any\n                     // method called `main`, regardless of whether it is actually the entry point,\n                     // but it will still present it as the reason for the expected type.\n-                    Some((decl, name != Symbol::intern(\"main\")))\n+                    Some((decl, ident.name != Symbol::intern(\"main\")))\n                 })\n             } else if let Node::TraitItem(&hir::TraitItem {\n                 node: hir::TraitItemKind::Method(hir::MethodSig {"}, {"sha": "bf767726ef715d9f2321aecf4c6fd1c4c7ae9999", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -154,7 +154,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n \n         // If the extern crate isn't in the extern prelude,\n         // there is no way it can be written as an `use`.\n-        let orig_name = extern_crate.orig_name.unwrap_or(item.name);\n+        let orig_name = extern_crate.orig_name.unwrap_or(item.ident.name);\n         if !tcx.extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n             continue;\n         }\n@@ -173,8 +173,8 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n             visibility_qualified(&item.vis, \"use\")\n         );\n         let base_replacement = match extern_crate.orig_name {\n-            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.name),\n-            None => format!(\"use {};\", item.name),\n+            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n+            None => format!(\"use {};\", item.ident.name),\n         };\n         let replacement = visibility_qualified(&item.vis, base_replacement);\n         tcx.struct_span_lint_node(lint, id, extern_crate.span, msg)\n@@ -219,7 +219,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n                     def_id: extern_crate_def_id,\n                     span: item.span,\n                     orig_name,\n-                    warn_if_unused: !item.name.as_str().starts_with('_'),\n+                    warn_if_unused: !item.ident.as_str().starts_with('_'),\n                 }\n             );\n         }"}, {"sha": "1aede7cf14c3cf8858df3f7012182b4098978fde", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n \n use syntax::ast;\n-use syntax::ast::MetaItemKind;\n+use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{InlineAttr, list_contains_name, mark_used};\n use syntax::source_map::Spanned;\n use syntax::feature_gate;\n@@ -385,7 +385,7 @@ fn is_param<'a, 'tcx>(\n \n fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n     let it = tcx.hir().expect_item(item_id);\n-    debug!(\"convert: item {} with id {}\", it.name, it.id);\n+    debug!(\"convert: item {} with id {}\", it.ident, it.id);\n     let def_id = tcx.hir().local_def_id(item_id);\n     match it.node {\n         // These don't define types.\n@@ -533,7 +533,7 @@ fn convert_enum_variant_types<'a, 'tcx>(\n                     format!(\"overflowed on value after {}\", prev_discr.unwrap()),\n                 ).note(&format!(\n                     \"explicitly set `{} = {}` if that is desired outcome\",\n-                    variant.node.name, wrapped_discr\n+                    variant.node.ident, wrapped_discr\n                 ))\n                 .emit();\n                 None\n@@ -556,7 +556,7 @@ fn convert_enum_variant_types<'a, 'tcx>(\n fn convert_variant<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     did: DefId,\n-    name: ast::Name,\n+    ident: Ident,\n     discr: ty::VariantDiscr,\n     def: &hir::VariantData,\n     adt_kind: ty::AdtKind,\n@@ -593,12 +593,13 @@ fn convert_variant<'a, 'tcx>(\n         .collect();\n     ty::VariantDef::new(tcx,\n         did,\n-        name,\n+        ident,\n         discr,\n         fields,\n         adt_kind,\n         CtorKind::from_hir(def),\n-        attribute_def_id)\n+        attribute_def_id\n+    )\n }\n \n fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n@@ -628,7 +629,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                         };\n                         distance_from_explicit += 1;\n \n-                        convert_variant(tcx, did, v.node.name, discr, &v.node.data, AdtKind::Enum,\n+                        convert_variant(tcx, did, v.node.ident, discr, &v.node.data, AdtKind::Enum,\n                                         did)\n                     })\n                     .collect(),\n@@ -646,7 +647,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                 std::iter::once(convert_variant(\n                     tcx,\n                     ctor_id.unwrap_or(def_id),\n-                    item.name,\n+                    item.ident,\n                     ty::VariantDiscr::Relative(0),\n                     def,\n                     AdtKind::Struct,\n@@ -659,7 +660,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n             std::iter::once(convert_variant(\n                 tcx,\n                 def_id,\n-                item.name,\n+                item.ident,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n                 AdtKind::Union,"}, {"sha": "38b2452b420e943eb387832cb3faf0c19bcfcbbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -2967,7 +2967,7 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n             }\n         };\n         Item {\n-            name: Some(self.name.clean(cx)),\n+            name: Some(self.ident.clean(cx)),\n             attrs: inline::load_attrs(cx, self.did),\n             source: cx.tcx.def_span(self.did).clean(cx),\n             visibility: Some(Inherited),\n@@ -3183,13 +3183,22 @@ fn qpath_to_string(p: &hir::QPath) -> String {\n     s\n }\n \n+impl Clean<String> for Ident {\n+    #[inline]\n+    fn clean(&self, cx: &DocContext) -> String {\n+        self.name.clean(cx)\n+    }\n+}\n+\n impl Clean<String> for ast::Name {\n+    #[inline]\n     fn clean(&self, _: &DocContext) -> String {\n         self.to_string()\n     }\n }\n \n impl Clean<String> for InternedString {\n+    #[inline]\n     fn clean(&self, _: &DocContext) -> String {\n         self.to_string()\n     }\n@@ -3616,7 +3625,7 @@ impl Clean<Item> for hir::ForeignItem {\n         };\n \n         Item {\n-            name: Some(self.name.clean(cx)),\n+            name: Some(self.ident.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n@@ -3951,7 +3960,7 @@ pub fn path_to_def_local(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n \n         for item_id in mem::replace(&mut items, HirVec::new()).iter() {\n             let item = tcx.hir().expect_item(item_id.id);\n-            if item.name == *segment {\n+            if item.ident.name == *segment {\n                 if path_it.peek().is_none() {\n                     return Some(tcx.hir().local_def_id(item_id.id))\n                 }"}, {"sha": "fdc1c0616187a8ed61acb26ad09afd2241d67a42", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -632,7 +632,7 @@ fn handle_variant(cx: &DocContext, def: Def) -> Result<(Def, Option<String>), ()\n     };\n     let parent_def = Def::Enum(parent);\n     let variant = cx.tcx.expect_variant_def(def);\n-    Ok((parent_def, Some(format!(\"{}.v\", variant.name))))\n+    Ok((parent_def, Some(format!(\"{}.v\", variant.ident.name))))\n }\n \n const PRIMITIVES: &[(&str, Def)] = &["}, {"sha": "24bb00f4112421a116862882156a1c111792e22b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n         let name = if let hir::ItemKind::Impl(.., ref ty, _) = item.node {\n             self.map.node_to_pretty_string(ty.id)\n         } else {\n-            item.name.to_string()\n+            item.ident.to_string()\n         };\n \n         self.visit_testable(name, &item.attrs, |this| {\n@@ -832,7 +832,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n     }\n \n     fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem) {\n-        self.visit_testable(item.name.to_string(), &item.attrs, |this| {\n+        self.visit_testable(item.ident.to_string(), &item.attrs, |this| {\n             intravisit::walk_foreign_item(this, item);\n         });\n     }\n@@ -841,7 +841,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n                      v: &'hir hir::Variant,\n                      g: &'hir hir::Generics,\n                      item_id: ast::NodeId) {\n-        self.visit_testable(v.node.name.to_string(), &v.node.attrs, |this| {\n+        self.visit_testable(v.node.ident.to_string(), &v.node.attrs, |this| {\n             intravisit::walk_variant(this, v, g, item_id);\n         });\n     }"}, {"sha": "953ab7c2565bfab9a1eafce0c6668d5156b38d33", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         Enum {\n             name,\n             variants: def.variants.iter().map(|v| Variant {\n-                name: v.node.name,\n+                name: v.node.ident.name,\n                 attrs: v.node.attrs.clone(),\n                 stab: self.stability(v.node.data.id()),\n                 depr: self.deprecation(v.node.data.id()),\n@@ -263,7 +263,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     fn maybe_inline_local(&mut self,\n                           id: ast::NodeId,\n                           def: Def,\n-                          renamed: Option<ast::Name>,\n+                          renamed: Option<ast::Ident>,\n                           glob: bool,\n                           om: &mut Module,\n                           please_inline: bool) -> bool {\n@@ -357,14 +357,14 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 om.foreigns.push(hir::ForeignMod {\n                     abi: tcx.hir().get_foreign_abi(it.id),\n                     items: vec![hir::ForeignItem {\n-                        name: renamed.unwrap_or(it.name),\n+                        ident: renamed.unwrap_or(it.ident),\n                         .. it.clone()\n                     }].into(),\n                 });\n                 true\n             }\n             Node::MacroDef(def) if !glob => {\n-                om.macros.push(self.visit_local_macro(def, renamed));\n+                om.macros.push(self.visit_local_macro(def, renamed.map(|i| i.name)));\n                 true\n             }\n             _ => false,\n@@ -374,9 +374,9 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     }\n \n     pub fn visit_item(&mut self, item: &hir::Item,\n-                      renamed: Option<ast::Name>, om: &mut Module) {\n+                      renamed: Option<ast::Ident>, om: &mut Module) {\n         debug!(\"Visiting item {:?}\", item);\n-        let name = renamed.unwrap_or(item.name);\n+        let ident = renamed.unwrap_or(item.ident);\n \n         if item.vis.node.is_pub() {\n             let def_id = self.cx.tcx.hir().local_def_id(item.id);\n@@ -403,7 +403,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 om.extern_crates.push(ExternCrate {\n                     cnum: self.cx.tcx.extern_mod_stmt_cnum(def_id)\n                                 .unwrap_or(LOCAL_CRATE),\n-                    name,\n+                    name: ident.name,\n                     path: orig_name.map(|x|x.to_string()),\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n@@ -433,10 +433,10 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                             _ => false,\n                         }\n                     });\n-                    let name = if is_glob { None } else { Some(name) };\n+                    let ident = if is_glob { None } else { Some(ident) };\n                     if self.maybe_inline_local(item.id,\n                                                path.def,\n-                                               name,\n+                                               ident,\n                                                is_glob,\n                                                om,\n                                                please_inline) {\n@@ -445,7 +445,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 }\n \n                 om.imports.push(Import {\n-                    name,\n+                    name: ident.name,\n                     id: item.id,\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n@@ -460,21 +460,21 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                                                      item.vis.clone(),\n                                                      item.id,\n                                                      m,\n-                                                     Some(name)));\n+                                                     Some(ident.name)));\n             },\n             hir::ItemKind::Enum(ref ed, ref gen) =>\n-                om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n+                om.enums.push(self.visit_enum_def(item, ident.name, ed, gen)),\n             hir::ItemKind::Struct(ref sd, ref gen) =>\n-                om.structs.push(self.visit_variant_data(item, name, sd, gen)),\n+                om.structs.push(self.visit_variant_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Union(ref sd, ref gen) =>\n-                om.unions.push(self.visit_union_data(item, name, sd, gen)),\n+                om.unions.push(self.visit_union_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Fn(ref fd, header, ref gen, body) =>\n-                self.visit_fn(om, item, name, &**fd, header, gen, body),\n+                self.visit_fn(om, item, ident.name, &**fd, header, gen, body),\n             hir::ItemKind::Ty(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty: ty.clone(),\n                     gen: gen.clone(),\n-                    name,\n+                    name: ident.name,\n                     id: item.id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n@@ -487,7 +487,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             hir::ItemKind::Existential(ref exist_ty) => {\n                 let t = Existential {\n                     exist_ty: exist_ty.clone(),\n-                    name,\n+                    name: ident.name,\n                     id: item.id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n@@ -503,7 +503,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     mutability: mut_.clone(),\n                     expr: exp.clone(),\n                     id: item.id,\n-                    name,\n+                    name: ident.name,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -517,7 +517,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     type_: ty.clone(),\n                     expr: exp.clone(),\n                     id: item.id,\n-                    name,\n+                    name: ident.name,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -533,7 +533,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 let t = Trait {\n                     is_auto,\n                     unsafety,\n-                    name,\n+                    name: ident.name,\n                     items,\n                     generics: gen.clone(),\n                     bounds: b.iter().cloned().collect(),"}, {"sha": "efef4ab00aed2411a1748490021b80c9c4b46fd1", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax, rustc_private)]\n+\n+// Load rustc as a plugin to get macros.\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use rustc::hir;\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n+use rustc_plugin::Registry;\n+\n+declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n+\n+declare_lint!(PLEASE_LINT, Warn, \"Warn about items named 'pleaselintme'\");\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT, PLEASE_LINT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+        match &*it.ident.as_str() {\n+            \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n+            \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n+            _ => {}\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_late_lint_pass(box Pass);\n+    reg.register_lint_group(\"lint_me\", None, vec![TEST_LINT, PLEASE_LINT]);\n+}"}, {"sha": "bca1d7a72b4abc77cb687271b5e9732976662f7e", "filename": "src/test/ui-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -3,7 +3,7 @@\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n-// Load rustc as a plugin to get macros\n+// Load rustc as a plugin to get macros.\n #[macro_use]\n extern crate rustc;\n extern crate rustc_plugin;\n@@ -26,7 +26,7 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        match &*it.name.as_str() {\n+        match &*it.ident.as_str() {\n             \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n             \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n             _ => {}"}, {"sha": "7a650afe5f8fa89123ca2f48e33b4d2b7a622590", "filename": "src/test/ui-fulldeps/lint-group-plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.rs?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:lint_group_plugin_test.rs\n // ignore-stage1\n+\n #![feature(plugin)]\n #![plugin(lint_group_plugin_test)]\n #![allow(dead_code)]"}, {"sha": "b566048c75ee658a84651a90b16461680afff402", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b150c4043654f93fcf7250b560581d44fc2b43d/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=1b150c4043654f93fcf7250b560581d44fc2b43d", "patch": "@@ -1,13 +1,13 @@\n warning: item is named 'lintme'\n-  --> $DIR/lint-group-plugin.rs:8:1\n+  --> $DIR/lint-group-plugin.rs:9:1\n    |\n LL | fn lintme() { } //~ WARNING item is named 'lintme'\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default\n \n warning: item is named 'pleaselintme'\n-  --> $DIR/lint-group-plugin.rs:9:1\n+  --> $DIR/lint-group-plugin.rs:10:1\n    |\n LL | fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}