{"sha": "f81cb97cb20b7a3f625f8a73b343c27d938bb9b9", "node_id": "C_kwDOAAsO6NoAKGY4MWNiOTdjYjIwYjdhM2Y2MjVmOGE3M2IzNDNjMjdkOTM4YmI5Yjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-12T21:29:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-12T21:29:49Z"}, "message": "Rollup merge of #107955 - RalfJung:ancient-ub, r=jyn514\n\nfix UB in ancient test\n\nThis seems to go back all the way to the [original version of this test](https://github.com/rust-lang/rust/blob/b9aa9def858cfc66d411972b10ce3d98479acd78/src/test/run-pass/regions-mock-trans.rs) from ten years ago... ``@nikomatsakis`` trip down memory lane? ;)\n\nClearly deallocation is a form of mutation so doing it to a (pointer derived from a) shared reference cannot be legal. Let's use mutable references instead.", "tree": {"sha": "f63dcc684c5c0f7ca8002dea6f4bafa3c1790ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f63dcc684c5c0f7ca8002dea6f4bafa3c1790ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81cb97cb20b7a3f625f8a73b343c27d938bb9b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6VpNCRBK7hj4Ov3rIwAAIygIAHg4j26aZ/GCR+UMXnZGV6/S\nLCx56RUCUsNSsNk+kk8jZAa/3Hjgnx1KN0ejyHZb9wqKkyaBiggmTAuiphNUln8l\nIx7DssqiGm4/4WRQe92WvN0mtTSsoAP5pJfyuCPPdBmGDWIjAI8q+Y/TXRC1187r\nCT7e5AlRP6IdoF7ccXhn6AZ9yBXYyRJFAGbXOvnOjbMUPAoUASLRr5sNUT+VFEo7\nivQslIeMIHEFNTrNYF5uc9US9mNCs7H6VQ8W6QJXLQuRF6zwuzgdY6VWPFg8qyl7\n3SWh07kga40ZJMyisfp9nsI+f77DeYEiAYfO7+WGQoQFh6rKlct9pXZZe58rvww=\n=C10P\n-----END PGP SIGNATURE-----\n", "payload": "tree f63dcc684c5c0f7ca8002dea6f4bafa3c1790ad8\nparent 454ae9fb8b34917eedf1bfbc482aecd4c10e56bc\nparent 0ea0c90d58cccccd7039334092f8ee85bc4db394\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676237389 +0100\ncommitter GitHub <noreply@github.com> 1676237389 +0100\n\nRollup merge of #107955 - RalfJung:ancient-ub, r=jyn514\n\nfix UB in ancient test\n\nThis seems to go back all the way to the [original version of this test](https://github.com/rust-lang/rust/blob/b9aa9def858cfc66d411972b10ce3d98479acd78/src/test/run-pass/regions-mock-trans.rs) from ten years ago... ``@nikomatsakis`` trip down memory lane? ;)\n\nClearly deallocation is a form of mutation so doing it to a (pointer derived from a) shared reference cannot be legal. Let's use mutable references instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81cb97cb20b7a3f625f8a73b343c27d938bb9b9", "html_url": "https://github.com/rust-lang/rust/commit/f81cb97cb20b7a3f625f8a73b343c27d938bb9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81cb97cb20b7a3f625f8a73b343c27d938bb9b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "html_url": "https://github.com/rust-lang/rust/commit/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc"}, {"sha": "0ea0c90d58cccccd7039334092f8ee85bc4db394", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea0c90d58cccccd7039334092f8ee85bc4db394", "html_url": "https://github.com/rust-lang/rust/commit/0ea0c90d58cccccd7039334092f8ee85bc4db394"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d5c93f81fd84d9446d3704b204f59446a7a1193c", "filename": "tests/ui/regions/regions-mock-codegen.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f81cb97cb20b7a3f625f8a73b343c27d938bb9b9/tests%2Fui%2Fregions%2Fregions-mock-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81cb97cb20b7a3f625f8a73b343c27d938bb9b9/tests%2Fui%2Fregions%2Fregions-mock-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-mock-codegen.rs?ref=f81cb97cb20b7a3f625f8a73b343c27d938bb9b9", "patch": "@@ -22,23 +22,23 @@ struct Ccx {\n     x: isize,\n }\n \n-fn allocate(_bcx: &arena) -> &Bcx<'_> {\n+fn allocate(_bcx: &arena) -> &mut Bcx<'_> {\n     unsafe {\n         let layout = Layout::new::<Bcx>();\n         let ptr = Global.allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));\n-        &*(ptr.as_ptr() as *const _)\n+        &mut *ptr.as_ptr().cast()\n     }\n }\n \n-fn h<'a>(bcx: &'a Bcx<'a>) -> &'a Bcx<'a> {\n+fn h<'a>(bcx: &'a Bcx<'a>) -> &'a mut Bcx<'a> {\n     return allocate(bcx.fcx.arena);\n }\n \n fn g(fcx: &Fcx) {\n     let bcx = Bcx { fcx };\n     let bcx2 = h(&bcx);\n     unsafe {\n-        Global.deallocate(NonNull::new_unchecked(bcx2 as *const _ as *mut _), Layout::new::<Bcx>());\n+        Global.deallocate(NonNull::new_unchecked(bcx2 as *mut _ as *mut _), Layout::new::<Bcx>());\n     }\n }\n "}]}