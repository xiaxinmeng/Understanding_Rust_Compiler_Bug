{"sha": "ff75395ca833a3ea4276d09f5cbe63be63a8c554", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNzUzOTVjYTgzM2EzZWE0Mjc2ZDA5ZjVjYmU2M2JlNjNhOGM1NTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T19:18:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T19:19:50Z"}, "message": "Reword message", "tree": {"sha": "b7c8824f3dc8b3a8fd5e17e07d368c0217159fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c8824f3dc8b3a8fd5e17e07d368c0217159fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff75395ca833a3ea4276d09f5cbe63be63a8c554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff75395ca833a3ea4276d09f5cbe63be63a8c554", "html_url": "https://github.com/rust-lang/rust/commit/ff75395ca833a3ea4276d09f5cbe63be63a8c554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff75395ca833a3ea4276d09f5cbe63be63a8c554/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "html_url": "https://github.com/rust-lang/rust/commit/c38b127d8463b595b5df93f3b8c4462d39d7cd0b"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "2c6589eb2bdf9b34e04d7743a9afcb9be34227b4", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -1882,7 +1882,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     Applicability::MachineApplicable,\n                 );\n                 err.multipart_suggestion(\n-                    \"heap allocated types always have a statically known size\",\n+                    \"the `Box` type always has a statically known size and allocates its contents \\\n+                     in the heap\",\n                     vec![\n                         (span.shrink_to_lo(), \"Box<\".to_string()),\n                         (span.shrink_to_hi(), \">\".to_string()),"}, {"sha": "5dbcc96e87488440f6c70dec125ae5e6b7740289", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -12,7 +12,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     data: &T,\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     data: Box<T>,\n    |           ^^^^ ^"}, {"sha": "0f0b80a9ff8d3f00153e31a3cef2828341c624ae", "filename": "src/test/ui/issues/issue-35988.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -11,7 +11,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     V(&[Box<E>]),\n    |       ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     V(Box<[Box<E>]>),\n    |       ^^^^        ^"}, {"sha": "b916bbe8ad10a3deedaf7a5e30f613d613d856e3", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -12,7 +12,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n    |            ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     value: Box<T>,\n    |            ^^^^ ^\n@@ -31,7 +31,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n    |            ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     value: Box<T>,\n    |            ^^^^ ^\n@@ -50,7 +50,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     Value(&T),\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     Value(Box<T>),\n    |           ^^^^ ^"}, {"sha": "f62a3b4d14b974c3c417fe22a54122c5f9ca4b75", "filename": "src/test/ui/union/union-unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -11,7 +11,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     a: &str,\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     a: Box<str>,\n    |        ^^^^   ^\n@@ -29,7 +29,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     b: &str,\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     b: Box<str>,\n    |        ^^^^   ^"}, {"sha": "988c310167682affcebaabbc6c10927aaabdcda3", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -13,7 +13,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VA(&W),\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VA(Box<W>),\n    |        ^^^^ ^\n@@ -33,7 +33,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VB{x: &X},\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VB{x: Box<X>},\n    |           ^^^^ ^\n@@ -53,7 +53,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VC(isize, &Y),\n    |               ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VC(isize, Box<Y>),\n    |               ^^^^ ^\n@@ -73,7 +73,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VD{u: isize, x: &Z},\n    |                     ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VD{u: isize, x: Box<Z>},\n    |                     ^^^^ ^\n@@ -91,7 +91,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VE(&[u8]),\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VE(Box<[u8]>),\n    |        ^^^^    ^\n@@ -109,7 +109,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VF{x: &str},\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VF{x: Box<str>},\n    |           ^^^^   ^\n@@ -127,7 +127,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VG(isize, &[f32]),\n    |               ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VG(isize, Box<[f32]>),\n    |               ^^^^     ^\n@@ -145,7 +145,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VH{u: isize, x: &[u32]},\n    |                     ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VH{u: isize, x: Box<[u32]>},\n    |                     ^^^^     ^\n@@ -163,7 +163,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VM(&dyn Foo),\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VM(Box<dyn Foo>),\n    |        ^^^^       ^\n@@ -181,7 +181,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VN{x: &dyn Bar},\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VN{x: Box<dyn Bar>},\n    |           ^^^^       ^\n@@ -199,7 +199,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VO(isize, &dyn FooBar),\n    |               ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VO(isize, Box<dyn FooBar>),\n    |               ^^^^          ^\n@@ -217,7 +217,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VP{u: isize, x: &dyn BarFoo},\n    |                     ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VP{u: isize, x: Box<dyn BarFoo>},\n    |                     ^^^^          ^\n@@ -235,7 +235,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VQ(&<&'static [i8] as Deref>::Target),\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VQ(Box<<&'static [i8] as Deref>::Target>),\n    |        ^^^^                                ^\n@@ -253,7 +253,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VR{x: &<&'static [char] as Deref>::Target},\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VR{x: Box<<&'static [char] as Deref>::Target>},\n    |           ^^^^                                  ^\n@@ -271,7 +271,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VS(isize, &<&'static [f64] as Deref>::Target),\n    |               ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VS(isize, Box<<&'static [f64] as Deref>::Target>),\n    |               ^^^^                                 ^\n@@ -289,7 +289,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VT{u: isize, x: &<&'static [i32] as Deref>::Target},\n    |                     ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VT{u: isize, x: Box<<&'static [i32] as Deref>::Target>},\n    |                     ^^^^                                 ^\n@@ -308,7 +308,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VI(&Path1),\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VI(Box<Path1>),\n    |        ^^^^     ^\n@@ -327,7 +327,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VJ{x: &Path2},\n    |           ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VJ{x: Box<Path2>},\n    |           ^^^^     ^\n@@ -346,7 +346,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VK(isize, &Path3),\n    |               ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VK(isize, Box<Path3>),\n    |               ^^^^     ^\n@@ -365,7 +365,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     VL{u: isize, x: &Path4},\n    |                     ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     VL{u: isize, x: Box<Path4>},\n    |                     ^^^^     ^"}, {"sha": "3fd0b429becc186fd39609cdd341a58f7fa7ffbe", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff75395ca833a3ea4276d09f5cbe63be63a8c554/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=ff75395ca833a3ea4276d09f5cbe63be63a8c554", "patch": "@@ -12,7 +12,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     f1: &X,\n    |         ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     f1: Box<X>,\n    |         ^^^^ ^\n@@ -32,7 +32,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     g: &X,\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     g: Box<X>,\n    |        ^^^^ ^\n@@ -50,7 +50,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     f: &str,\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     f: Box<str>,\n    |        ^^^^   ^\n@@ -68,7 +68,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     f: &[u8],\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     f: Box<[u8]>,\n    |        ^^^^    ^\n@@ -87,7 +87,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     V1(&X, isize),\n    |        ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     V1(Box<X>, isize),\n    |        ^^^^ ^\n@@ -106,7 +106,7 @@ help: borrowed types always have a statically known size\n    |\n LL |     V2{f1: &X, f: isize},\n    |            ^\n-help: heap allocated types always have a statically known size\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     V2{f1: Box<X>, f: isize},\n    |            ^^^^ ^"}]}