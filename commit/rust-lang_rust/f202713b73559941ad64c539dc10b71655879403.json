{"sha": "f202713b73559941ad64c539dc10b71655879403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMDI3MTNiNzM1NTk5NDFhZDY0YzUzOWRjMTBiNzE2NTU4Nzk0MDM=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-25T21:40:36Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-25T21:40:36Z"}, "message": "satisfy the formatting check", "tree": {"sha": "ea2c499c2c929378b21b58abc5ea61a6412e6222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea2c499c2c929378b21b58abc5ea61a6412e6222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f202713b73559941ad64c539dc10b71655879403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f202713b73559941ad64c539dc10b71655879403", "html_url": "https://github.com/rust-lang/rust/commit/f202713b73559941ad64c539dc10b71655879403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f202713b73559941ad64c539dc10b71655879403/comments", "author": null, "committer": null, "parents": [{"sha": "1af20163586d13f505492865f70fe9767f35a306", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af20163586d13f505492865f70fe9767f35a306", "html_url": "https://github.com/rust-lang/rust/commit/1af20163586d13f505492865f70fe9767f35a306"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "d85fb062430665ca825a55a634f07d016c22e676", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=f202713b73559941ad64c539dc10b71655879403", "patch": "@@ -84,7 +84,7 @@ impl UdpStream {\n }\n \n impl Reader for UdpStream {\n-    fn read(&mut self, buf: &mut [u8]) -> Option<uint> { \n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n         do self.as_socket |sock| {\n             match sock.recvfrom(buf) {\n                 Some((_nread, src)) if src != self.connectedTo => Some(0),\n@@ -131,7 +131,7 @@ mod test {\n         }\n     }\n \n-    #[test] \n+    #[test]\n     fn socket_smoke_test() {\n         do run_in_newsched_task {\n             let server_ip = next_test_ip4();"}, {"sha": "eac70d5219a3a5f17dccf95f88a029a7428d433a", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=f202713b73559941ad64c539dc10b71655879403", "patch": "@@ -50,12 +50,12 @@ pub fn uv_ip4_to_ip4(addr: *sockaddr_in) -> IpAddr {\n     let port = unsafe { ip4_port(addr) };\n     let ip_str = str::from_bytes_slice(buf).trim_right_chars(&'\\x00');\n     let ip: ~[u8] = ip_str.split_iter('.')\n-                          .transform(|s: &str| -> u8 { \n-                                        let x = FromStr::from_str(s); \n+                          .transform(|s: &str| -> u8 {\n+                                        let x = FromStr::from_str(s);\n                                         assert!(x.is_some());\n                                         x.unwrap() })\n                           .collect();\n-    assert!(ip.len() >= 4); \n+    assert!(ip.len() >= 4);\n     Ipv4(ip[0], ip[1], ip[2], ip[3], port as u16)\n }\n \n@@ -304,7 +304,7 @@ impl UdpWatcher {\n                     }\n                 }\n             }\n-            _ => fail!() // TODO ipv6\n+            _ => fail!() // NOTE ipv6\n         }\n     }\n \n@@ -325,9 +325,10 @@ impl UdpWatcher {\n             return (*alloc_cb)(suggested_size as uint);\n         }\n \n-        /* TODO the socket address should actually be a pointer to either a sockaddr_in or sockaddr_in6.\n+        /* NOTE the socket address should actually be a pointer to\n+           either a sockaddr_in or sockaddr_in6.\n            In libuv, the udp_recv callback takes a struct *sockaddr */\n-        extern fn recv_cb(handle: *uvll::uv_udp_t, nread: ssize_t, buf: Buf, \n+        extern fn recv_cb(handle: *uvll::uv_udp_t, nread: ssize_t, buf: Buf,\n                           addr: *uvll::sockaddr_in, flags: c_uint) {\n             rtdebug!(\"buf addr: %x\", buf.base as uint);\n             rtdebug!(\"buf len: %d\", buf.len as int);\n@@ -364,7 +365,7 @@ impl UdpWatcher {\n                     }\n                 }\n             }\n-            _ => fail!() // TODO ipv6\n+            _ => fail!() // NOTE ipv6\n         }\n \n         extern fn send_cb(req: *uvll::uv_udp_send_t, status: c_int) {\n@@ -490,7 +491,9 @@ impl UdpSendRequest {\n \n     pub fn handle(&self) -> UdpWatcher {\n         unsafe {\n-            NativeHandle::from_native_handle(uvll::get_udp_handle_from_send_req(self.native_handle()))\n+            NativeHandle::from_native_handle(\n+                uvll::get_udp_handle_from_send_req(\n+                    self.native_handle()))\n         }\n     }\n \n@@ -544,7 +547,7 @@ mod test {\n         }\n     }\n \n-    #[test] \n+    #[test]\n     fn udp_bind_close() {\n         do run_in_bare_thread() {\n             let mut loop_ = Loop::new();\n@@ -633,7 +636,7 @@ mod test {\n         }\n     }\n \n-    #[test] \n+    #[test]\n     fn udp_recv() {\n         do run_in_bare_thread() {\n             static MAX: int = 10;"}, {"sha": "6b4cb66ed999845b68d0ceac704171967398b35a", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=f202713b73559941ad64c539dc10b71655879403", "patch": "@@ -489,7 +489,7 @@ impl RtioUdpSocket for UvUdpSocket {\n             let task_cell = Cell::new(task);\n             let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n             do watcher.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n-                let _ = flags; // TODO add handling for partials?\n+                let _ = flags; // NOTE add handling for partials?\n \n                 watcher.recv_stop();\n \n@@ -596,7 +596,7 @@ fn test_simple_tcp_server_and_client() {\n     }\n }\n \n-#[test] \n+#[test]\n fn test_simple_udp_server_and_client() {\n     do run_in_newsched_task {\n         let server_addr = next_test_ip4();"}, {"sha": "841a9bf8ef7c37d98a7d5ba06aa56de655febe3f", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f202713b73559941ad64c539dc10b71655879403/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=f202713b73559941ad64c539dc10b71655879403", "patch": "@@ -218,7 +218,8 @@ pub unsafe fn udp_send6<T>(req: *uv_udp_send_t, handle: *T, buf_in: &[uv_buf_t],\n     return rust_uv_udp_send6(req, handle as *c_void, buf_ptr, buf_cnt, addr, cb);\n }\n \n-pub unsafe fn udp_recv_start(server: *uv_udp_t, on_alloc: uv_alloc_cb, on_recv: uv_udp_recv_cb) -> c_int {\n+pub unsafe fn udp_recv_start(server: *uv_udp_t, on_alloc: uv_alloc_cb,\n+                             on_recv: uv_udp_recv_cb) -> c_int {\n     return rust_uv_udp_recv_start(server, on_alloc, on_recv);\n }\n "}, {"sha": "6032ed1a6bdba72d3181b42d55c817de984b7061", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f202713b73559941ad64c539dc10b71655879403/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f202713b73559941ad64c539dc10b71655879403/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=f202713b73559941ad64c539dc10b71655879403", "patch": "@@ -309,13 +309,13 @@ rust_uv_udp_bind6(uv_udp_t* server, sockaddr_in6* addr_ptr, unsigned flags) {\n }\n \n extern \"C\" int\n-rust_uv_udp_send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t* buf_in, \n+rust_uv_udp_send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t* buf_in,\n                  int buf_cnt, sockaddr_in* addr_ptr, uv_udp_send_cb cb) {\n     return uv_udp_send(req, handle, buf_in, buf_cnt, *addr_ptr, cb);\n }\n \n extern \"C\" int\n-rust_uv_udp_send6(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t* buf_in, \n+rust_uv_udp_send6(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t* buf_in,\n                   int buf_cnt, sockaddr_in6* addr_ptr, uv_udp_send_cb cb) {\n     return uv_udp_send6(req, handle, buf_in, buf_cnt, *addr_ptr, cb);\n }"}]}