{"sha": "81c11892a9228db4ff78773a5a45e0effa2a51e2", "node_id": "C_kwDOAAsO6NoAKDgxYzExODkyYTkyMjhkYjRmZjc4NzczYTVhNDVlMGVmZmEyYTUxZTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-16T23:45:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-16T23:45:52Z"}, "message": "Rollup merge of #105768 - fee1-dead-contrib:iat-style, r=eholk\n\nDetect inherent associated types not having CamelCase\n\nFixes #105341.", "tree": {"sha": "a0644a77813990ee45b2326c11dedc5e9d217f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0644a77813990ee45b2326c11dedc5e9d217f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c11892a9228db4ff78773a5a45e0effa2a51e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnQMwCRBK7hj4Ov3rIwAApHgIAAy40lR9raGKszXLvMu/47HL\niYciumIvRTHHbMHJOl/qHl6mPzw4LZY/0Q7drR8MXIgy7A+i0Xe5BMAWvhsI16Mq\neAQfmct1gzjZKhIMn1SxwA5I9V1OKbGChRvJBRI3C14FBzGUWWmWysRdFhXd5jdO\ncnGqsBLdztFRcrP27nWnikiWpW7qMhgvLxCjRyTWAfsS3hH/s7gB2QNqEhxDdZuH\n2tj7ogzK39f6ST797ebQ/XFov7+PWppwdquiMoLTZXfNJEwwVCaC0VA39DiSfv3k\nVZPAOdTQUsEnL6qXght8zpaXD/sG31v+MZzpBGhJD2mGGVlItF8qax2ZoVm0UDE=\n=dsjV\n-----END PGP SIGNATURE-----\n", "payload": "tree a0644a77813990ee45b2326c11dedc5e9d217f11\nparent a6c6a8d216b28b713a90a177a1c9bfe357f7ef77\nparent 08a0e71ec9de799f9d867348c24e1193b570d159\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671234352 +0100\ncommitter GitHub <noreply@github.com> 1671234352 +0100\n\nRollup merge of #105768 - fee1-dead-contrib:iat-style, r=eholk\n\nDetect inherent associated types not having CamelCase\n\nFixes #105341.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c11892a9228db4ff78773a5a45e0effa2a51e2", "html_url": "https://github.com/rust-lang/rust/commit/81c11892a9228db4ff78773a5a45e0effa2a51e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c11892a9228db4ff78773a5a45e0effa2a51e2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6c6a8d216b28b713a90a177a1c9bfe357f7ef77", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c6a8d216b28b713a90a177a1c9bfe357f7ef77", "html_url": "https://github.com/rust-lang/rust/commit/a6c6a8d216b28b713a90a177a1c9bfe357f7ef77"}, {"sha": "08a0e71ec9de799f9d867348c24e1193b570d159", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a0e71ec9de799f9d867348c24e1193b570d159", "html_url": "https://github.com/rust-lang/rust/commit/08a0e71ec9de799f9d867348c24e1193b570d159"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "91fcd6d690ee7a52c819546eccc065dca1baf64c", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81c11892a9228db4ff78773a5a45e0effa2a51e2/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c11892a9228db4ff78773a5a45e0effa2a51e2/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=81c11892a9228db4ff78773a5a45e0effa2a51e2", "patch": "@@ -175,13 +175,23 @@ impl EarlyLintPass for NonCamelCaseTypes {\n             return;\n         }\n \n-        match it.kind {\n+        match &it.kind {\n             ast::ItemKind::TyAlias(..)\n             | ast::ItemKind::Enum(..)\n             | ast::ItemKind::Struct(..)\n             | ast::ItemKind::Union(..) => self.check_case(cx, \"type\", &it.ident),\n             ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", &it.ident),\n             ast::ItemKind::TraitAlias(..) => self.check_case(cx, \"trait alias\", &it.ident),\n+\n+            // N.B. This check is only for inherent associated types, so that we don't lint against\n+            // trait impls where we should have warned for the trait definition already.\n+            ast::ItemKind::Impl(box ast::Impl { of_trait: None, items, .. }) => {\n+                for it in items {\n+                    if let ast::AssocItemKind::Type(..) = it.kind {\n+                        self.check_case(cx, \"associated type\", &it.ident);\n+                    }\n+                }\n+            }\n             _ => (),\n         }\n     }"}, {"sha": "8775bd19e1f98c3dbefdd338c05ab69570c2d6ac", "filename": "src/test/ui/associated-inherent-types/style.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81c11892a9228db4ff78773a5a45e0effa2a51e2/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c11892a9228db4ff78773a5a45e0effa2a51e2/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.rs?ref=81c11892a9228db4ff78773a5a45e0effa2a51e2", "patch": "@@ -0,0 +1,12 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features, dead_code)]\n+#![deny(non_camel_case_types)]\n+\n+struct S;\n+\n+impl S {\n+    type typ = ();\n+    //~^ ERROR associated type `typ` should have an upper camel case name\n+}\n+\n+fn main() {}"}, {"sha": "f83061f8c42163ec23d8bfc4e11fed3a1ba47fc4", "filename": "src/test/ui/associated-inherent-types/style.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81c11892a9228db4ff78773a5a45e0effa2a51e2/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c11892a9228db4ff78773a5a45e0effa2a51e2/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.stderr?ref=81c11892a9228db4ff78773a5a45e0effa2a51e2", "patch": "@@ -0,0 +1,14 @@\n+error: associated type `typ` should have an upper camel case name\n+  --> $DIR/style.rs:8:10\n+   |\n+LL |     type typ = ();\n+   |          ^^^ help: convert the identifier to upper camel case: `Typ`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/style.rs:3:9\n+   |\n+LL | #![deny(non_camel_case_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}