{"sha": "17692b5849fbf5595f2b84a08681f550d587f99d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjkyYjU4NDlmYmY1NTk1ZjJiODRhMDg2ODFmNTUwZDU4N2Y5OWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-13T20:36:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-13T20:36:57Z"}, "message": "Use TypeFoldable derive macro.", "tree": {"sha": "e7f7eb62dd98c9a88d0729f50da21918bde71fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7f7eb62dd98c9a88d0729f50da21918bde71fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17692b5849fbf5595f2b84a08681f550d587f99d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17692b5849fbf5595f2b84a08681f550d587f99d", "html_url": "https://github.com/rust-lang/rust/commit/17692b5849fbf5595f2b84a08681f550d587f99d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17692b5849fbf5595f2b84a08681f550d587f99d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e28e9c545ab86f314ed242922f3d83e69319e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e28e9c545ab86f314ed242922f3d83e69319e45", "html_url": "https://github.com/rust-lang/rust/commit/9e28e9c545ab86f314ed242922f3d83e69319e45"}], "stats": {"total": 778, "additions": 90, "deletions": 688}, "files": [{"sha": "dfd0ab1a69de35d2224de2ce115d1ad974838e51", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -44,7 +44,8 @@ mod substitute;\n /// A \"canonicalized\" type `V` is one where all free inference\n /// variables have been rewritten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable,\n+    HashStable, TypeFoldable)]\n pub struct Canonical<'tcx, V> {\n     pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'tcx>,\n@@ -64,7 +65,8 @@ impl<'tcx> UseSpecializedDecodable for CanonicalVarInfos<'tcx> {}\n /// vectors with the original values that were replaced by canonical\n /// variables. You will need to supply it later to instantiate the\n /// canonicalized query response.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable,\n+    HashStable, TypeFoldable)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<BoundVar, GenericArg<'tcx>>,\n }\n@@ -187,15 +189,15 @@ pub enum CanonicalTyVarKind {\n /// After we execute a query with a canonicalized key, we get back a\n /// `Canonical<QueryResponse<..>>`. You can use\n /// `instantiate_query_result` to access the data in this result.\n-#[derive(Clone, Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable)]\n pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n     pub certainty: Certainty,\n     pub value: R,\n }\n \n-#[derive(Clone, Debug, Default, HashStable)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable)]\n pub struct QueryRegionConstraints<'tcx> {\n     pub outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n     pub member_constraints: Vec<MemberConstraint<'tcx>>,\n@@ -468,14 +470,6 @@ CloneTypeFoldableImpls! {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, C> TypeFoldable<'tcx> for Canonical<'tcx, C> {\n-        max_universe,\n-        variables,\n-        value,\n-    } where C: TypeFoldable<'tcx>\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx, T> Lift<'tcx> for Canonical<'a, T> {\n         type Lifted = Canonical<'tcx, T::Lifted>;\n@@ -535,31 +529,13 @@ BraceStructLiftImpl! {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for CanonicalVarValues<'tcx> {\n-        var_values,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, R> TypeFoldable<'tcx> for QueryResponse<'tcx, R> {\n-        var_values, region_constraints, certainty, value\n-    } where R: TypeFoldable<'tcx>,\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx, R> Lift<'tcx> for QueryResponse<'a, R> {\n         type Lifted = QueryResponse<'tcx, R::Lifted>;\n         var_values, region_constraints, certainty, value\n     } where R: Lift<'tcx>\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for QueryRegionConstraints<'tcx> {\n-        outlives, member_constraints\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for QueryRegionConstraints<'a> {\n         type Lifted = QueryRegionConstraints<'tcx>;"}, {"sha": "cd02e2b0e7c5cf763e2265bed8ee292f4fab2703", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -233,7 +233,7 @@ pub struct InferCtxt<'a, 'tcx> {\n pub type PlaceholderMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n \n /// See the `error_reporting` module for more details.\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, TypeFoldable)]\n pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n@@ -1782,16 +1782,6 @@ impl RegionVariableOrigin {\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ValuePairs<'tcx> {\n-        (ValuePairs::Types)(a),\n-        (ValuePairs::Regions)(a),\n-        (ValuePairs::Consts)(a),\n-        (ValuePairs::TraitRefs)(a),\n-        (ValuePairs::PolyTraitRefs)(a),\n-    }\n-}\n-\n impl<'tcx> fmt::Debug for RegionObligation<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!("}, {"sha": "01182a73789cff0dc8b73b13f680c68fd6fc3db9", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -151,7 +151,7 @@ impl Constraint<'_> {\n /// ```\n /// R0 member of [O1..On]\n /// ```\n-#[derive(Debug, Clone, HashStable)]\n+#[derive(Debug, Clone, HashStable, TypeFoldable)]\n pub struct MemberConstraint<'tcx> {\n     /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n     pub opaque_type_def_id: DefId,\n@@ -169,12 +169,6 @@ pub struct MemberConstraint<'tcx> {\n     pub choice_regions: Lrc<Vec<Region<'tcx>>>,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for MemberConstraint<'tcx> {\n-        opaque_type_def_id, definition_span, hidden_ty, member_region, choice_regions\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for MemberConstraint<'a> {\n         type Lifted = MemberConstraint<'tcx>;\n@@ -195,19 +189,12 @@ pub struct Verify<'tcx> {\n     pub bound: VerifyBound<'tcx>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for GenericKind<'tcx> {\n-        (GenericKind::Param)(a),\n-        (GenericKind::Projection)(a),\n-    }\n-}\n-\n /// Describes the things that some `GenericKind` value `G` is known to\n /// outlive. Each variant of `VerifyBound` can be thought of as a\n /// function:"}, {"sha": "84ddaee17fedc68710aa8427a0fda93b0b48fa45", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 101, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -86,7 +86,7 @@ impl MirPhase {\n }\n \n /// The lowered representation of a single function.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, TypeFoldable)]\n pub struct Body<'tcx> {\n     /// A list of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n@@ -446,7 +446,7 @@ impl<'tcx> IndexMut<BasicBlock> for Body<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, HashStable)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable)]\n pub enum ClearCrossCrate<T> {\n     Clear,\n     Set(T),\n@@ -723,7 +723,7 @@ impl_stable_hash_for!(struct BlockTailInfo { tail_result_is_ignored });\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n /// argument, or the return place.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct LocalDecl<'tcx> {\n     /// Whether this is a mutable minding (i.e., `let x` or `let mut x`).\n     ///\n@@ -1012,7 +1012,7 @@ impl BasicBlock {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct BasicBlockData<'tcx> {\n     /// List of statements in this block.\n     pub statements: Vec<Statement<'tcx>>,\n@@ -1542,7 +1542,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Statements\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct Statement<'tcx> {\n     pub source_info: SourceInfo,\n     pub kind: StatementKind<'tcx>,\n@@ -1568,7 +1568,7 @@ impl Statement<'_> {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum StatementKind<'tcx> {\n     /// Write the RHS Rvalue to the LHS Place.\n     Assign(Box<(Place<'tcx>, Rvalue<'tcx>)>),\n@@ -1676,7 +1676,7 @@ pub enum FakeReadCause {\n     ForIndex,\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct InlineAsm<'tcx> {\n     pub asm: HirInlineAsm,\n     pub outputs: Box<[Place<'tcx>]>,\n@@ -2418,17 +2418,11 @@ pub struct Constant<'tcx> {\n /// The first will lead to the constraint `w: &'1 str` (for some\n /// inferred region `'1`). The second will lead to the constraint `w:\n /// &'static str`.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct UserTypeProjections {\n     pub(crate) contents: Vec<(UserTypeProjection, Span)>,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for UserTypeProjections {\n-        contents\n-    }\n-}\n-\n impl<'tcx> UserTypeProjections {\n     pub fn none() -> Self {\n         UserTypeProjections { contents: vec![] }\n@@ -2737,7 +2731,7 @@ rustc_index::newtype_index! {\n }\n \n /// The layout of generator state.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n     pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,\n@@ -2936,92 +2930,6 @@ CloneTypeFoldableAndLiftImpls! {\n     UserTypeAnnotationIndex,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for Body<'tcx> {\n-        phase,\n-        basic_blocks,\n-        source_scopes,\n-        source_scope_local_data,\n-        yield_ty,\n-        generator_drop,\n-        generator_layout,\n-        local_decls,\n-        user_type_annotations,\n-        arg_count,\n-        __upvar_debuginfo_codegen_only_do_not_use,\n-        spread_arg,\n-        control_flow_destroyed,\n-        span,\n-        cache,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for GeneratorLayout<'tcx> {\n-        field_tys,\n-        variant_fields,\n-        storage_conflicts,\n-        __local_debuginfo_codegen_only_do_not_use,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for LocalDecl<'tcx> {\n-        mutability,\n-        is_user_variable,\n-        internal,\n-        ty,\n-        user_ty,\n-        name,\n-        source_info,\n-        is_block_tail,\n-        visibility_scope,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for BasicBlockData<'tcx> {\n-        statements,\n-        terminator,\n-        is_cleanup,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n-        source_info, kind\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for StatementKind<'tcx> {\n-        (StatementKind::Assign)(a),\n-        (StatementKind::FakeRead)(cause, place),\n-        (StatementKind::SetDiscriminant) { place, variant_index },\n-        (StatementKind::StorageLive)(a),\n-        (StatementKind::StorageDead)(a),\n-        (StatementKind::InlineAsm)(a),\n-        (StatementKind::Retag)(kind, place),\n-        (StatementKind::AscribeUserType)(a, v),\n-        (StatementKind::Nop),\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for InlineAsm<'tcx> {\n-        asm,\n-        outputs,\n-        inputs,\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for ClearCrossCrate<T> {\n-        (ClearCrossCrate::Clear),\n-        (ClearCrossCrate::Set)(a),\n-    } where T: TypeFoldable<'tcx>\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         use crate::mir::TerminatorKind::*;"}, {"sha": "ccf7d8fbf8668ed83603befccb698538c4f37630", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -10,7 +10,7 @@ use crate::ty::layout::VariantIdx;\n use crate::hir;\n use crate::ty::util::IntTypeExt;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct PlaceTy<'tcx> {\n     pub ty: Ty<'tcx>,\n     /// Downcast to a particular variant of an enum, if included.\n@@ -111,13 +111,6 @@ impl<'tcx> PlaceTy<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for PlaceTy<'tcx> {\n-        ty,\n-        variant_index,\n-    }\n-}\n-\n impl<'tcx> Place<'tcx> {\n     pub fn ty_from<D>(\n         base: &PlaceBase<'tcx>,"}, {"sha": "48ec7d32d33c26c690b53b79cd5c420ede6c0635", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -334,27 +334,27 @@ pub type TraitObligations<'tcx> = Vec<TraitObligation<'tcx>>;\n /// are used for representing the trait system in the form of\n /// logic programming clauses. They are part of the interface\n /// for the chalk SLG solver.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub enum WhereClause<'tcx> {\n     Implemented(ty::TraitPredicate<'tcx>),\n     ProjectionEq(ty::ProjectionPredicate<'tcx>),\n     RegionOutlives(ty::RegionOutlivesPredicate<'tcx>),\n     TypeOutlives(ty::TypeOutlivesPredicate<'tcx>),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub enum WellFormed<'tcx> {\n     Trait(ty::TraitPredicate<'tcx>),\n     Ty(Ty<'tcx>),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub enum FromEnv<'tcx> {\n     Trait(ty::TraitPredicate<'tcx>),\n     Ty(Ty<'tcx>),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub enum DomainGoal<'tcx> {\n     Holds(WhereClause<'tcx>),\n     WellFormed(WellFormed<'tcx>),\n@@ -370,7 +370,7 @@ pub enum QuantifierKind {\n     Existential,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub enum GoalKind<'tcx> {\n     Implies(Clauses<'tcx>, Goal<'tcx>),\n     And(Goal<'tcx>, Goal<'tcx>),\n@@ -416,7 +416,7 @@ impl<'tcx> GoalKind<'tcx> {\n \n /// This matches the definition from Page 7 of \"A Proof Procedure for the Logic of Hereditary\n /// Harrop Formulas\".\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub enum Clause<'tcx> {\n     Implies(ProgramClause<'tcx>),\n     ForAll(ty::Binder<ProgramClause<'tcx>>),\n@@ -440,7 +440,7 @@ pub type Clauses<'tcx> = &'tcx List<Clause<'tcx>>;\n /// it with the reverse implication operator `:-` to emphasize the way\n /// that programs are actually solved (via backchaining, which starts\n /// with the goal to solve and proceeds from there).\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub struct ProgramClause<'tcx> {\n     /// This goal will be considered true ...\n     pub goal: DomainGoal<'tcx>,\n@@ -460,7 +460,7 @@ pub enum ProgramClauseCategory {\n }\n \n /// A set of clauses that we assume to be true.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub struct Environment<'tcx> {\n     pub clauses: Clauses<'tcx>,\n }\n@@ -475,15 +475,15 @@ impl Environment<'tcx> {\n }\n \n /// Something (usually a goal), along with an environment.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub struct InEnvironment<'tcx, G> {\n     pub environment: Environment<'tcx>,\n     pub goal: G,\n }\n \n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;\n \n-#[derive(Clone,Debug)]\n+#[derive(Clone,Debug,TypeFoldable)]\n pub enum SelectionError<'tcx> {\n     Unimplemented,\n     OutputTypeParameterMismatch(ty::PolyTraitRef<'tcx>,\n@@ -494,16 +494,6 @@ pub enum SelectionError<'tcx> {\n     Overflow,\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for SelectionError<'tcx> {\n-        (SelectionError::Unimplemented),\n-        (SelectionError::OutputTypeParameterMismatch)(a, b, c),\n-        (SelectionError::TraitNotObjectSafe)(a),\n-        (SelectionError::ConstEvalFailure)(a),\n-        (SelectionError::Overflow),\n-    }\n-}\n-\n pub struct FulfillmentError<'tcx> {\n     pub obligation: PredicateObligation<'tcx>,\n     pub code: FulfillmentErrorCode<'tcx>,\n@@ -568,7 +558,7 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ### The type parameter `N`\n ///\n /// See explanation on `VtableImplData`.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum Vtable<'tcx, N> {\n     /// Vtable identifying a particular impl.\n     VtableImpl(VtableImplData<'tcx, N>),\n@@ -616,14 +606,14 @@ pub enum Vtable<'tcx, N> {\n /// is `Obligation`, as one might expect. During codegen, however, this\n /// is `()`, because codegen only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableImplData<'tcx, N> {\n     pub impl_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableGeneratorData<'tcx, N> {\n     pub generator_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -632,7 +622,7 @@ pub struct VtableGeneratorData<'tcx, N> {\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableClosureData<'tcx, N> {\n     pub closure_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -641,20 +631,20 @@ pub struct VtableClosureData<'tcx, N> {\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableAutoImplData<N> {\n     pub trait_def_id: DefId,\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableBuiltinData<N> {\n     pub nested: Vec<N>\n }\n \n /// A vtable for some object-safe trait `Foo` automatically derived\n /// for the object type `Foo`.\n-#[derive(PartialEq, Eq, Clone, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(PartialEq, Eq, Clone, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableObjectData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -667,13 +657,13 @@ pub struct VtableObjectData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableFnPointerData<'tcx, N> {\n     pub fn_ty: Ty<'tcx>,\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "c345b9a969c908fcdacdeb86e7025d2d9bc9a89d", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -400,7 +400,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, TypeFoldable)]\n pub struct Normalized<'tcx,T> {\n     pub value: T,\n     pub obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "d8e413446fcbbb807d7f016e090582d1d3f84132", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -77,7 +77,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, Default)]\n+#[derive(Clone, Debug, Default, TypeFoldable)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<GenericArg<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n@@ -150,12 +150,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n         result\n     }\n }\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for DropckOutlivesResult<'tcx> {\n-        kinds, overflows\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for DropckOutlivesResult<'a> {\n         type Lifted = DropckOutlivesResult<'tcx>;"}, {"sha": "5115119fa74fef587826c7dfe8d42ad054e14e9c", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n }\n \n /// Result from the `normalize_projection_ty` query.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub struct NormalizationResult<'tcx> {\n     /// Result of normalization.\n     pub normalized_ty: Ty<'tcx>,\n@@ -194,12 +194,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for NormalizationResult<'tcx> {\n-        normalized_ty\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for NormalizationResult<'a> {\n         type Lifted = NormalizationResult<'tcx>;"}, {"sha": "93414b6898249d77383d642a257fbbc48e57d84d", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -17,7 +17,7 @@ use std::mem;\n /// case they are called implied bounds). They are fed to the\n /// `OutlivesEnv` which in turn is supplied to the region checker and\n /// other parts of the inference system.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n@@ -33,14 +33,6 @@ EnumLiftImpl! {\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for self::OutlivesBound<'tcx> {\n-        (self::OutlivesBound::RegionSubRegion)(a, b),\n-        (self::OutlivesBound::RegionSubParam)(a, b),\n-        (self::OutlivesBound::RegionSubProjection)(a, b),\n-    }\n-}\n-\n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OutlivesBound<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "259efb43de710d5a4c9a2faac7b922feb954cbd6", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n use crate::ty::subst::UserSubsts;\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n pub struct AscribeUserType<'tcx> {\n     pub mir_ty: Ty<'tcx>,\n     pub def_id: DefId,\n@@ -39,12 +39,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for AscribeUserType<'tcx> {\n-        mir_ty, def_id, user_substs\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for AscribeUserType<'a> {\n         type Lifted = AscribeUserType<'tcx>;"}, {"sha": "b51e8f89a31e8b4e345f7656848fd94d44803d3e", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n pub struct Eq<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n@@ -36,13 +36,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for Eq<'tcx> {\n-        a,\n-        b,\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for Eq<'a> {\n         type Lifted = Eq<'tcx>;"}, {"sha": "59d1920f68afadf43eab7f98ff589d3e5f3db221", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -40,12 +40,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ImpliedOutlivesBounds<'tcx> {\n-        ty,\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for ImpliedOutlivesBounds<'a> {\n         type Lifted = ImpliedOutlivesBounds<'tcx>;"}, {"sha": "5b8164c3a24dafe70a3290a7e79dff50e28024f9", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -4,7 +4,7 @@ use crate::traits::query::Fallible;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n pub struct Normalize<T> {\n     pub value: T,\n }\n@@ -83,12 +83,6 @@ impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for Normalize<T> {\n-        value,\n-    } where T: TypeFoldable<'tcx>,\n-}\n-\n BraceStructLiftImpl! {\n     impl<'tcx, T> Lift<'tcx> for Normalize<T> {\n         type Lifted = Normalize<T::Lifted>;"}, {"sha": "3d52452cf3492bd1a9f47929553a933b6a01ccf3", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::dropck_outlives::{DropckOutlivesResult, trivial_dropck\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct DropckOutlives<'tcx> {\n     dropped_ty: Ty<'tcx>,\n }\n@@ -54,12 +54,6 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for DropckOutlives<'tcx> {\n-        dropped_ty\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for DropckOutlives<'a> {\n         type Lifted = DropckOutlives<'tcx>;"}, {"sha": "d0dd50326ddb7758e537dfddc1f324fe1e95edc8", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n pub struct ProvePredicate<'tcx> {\n     pub predicate: Predicate<'tcx>,\n }\n@@ -45,12 +45,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ProvePredicate<'tcx> {\n-        predicate,\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for ProvePredicate<'a> {\n         type Lifted = ProvePredicate<'tcx>;"}, {"sha": "72ce91845c12fbe5bb25bcad715ea05b4c6c7863", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n pub struct Subtype<'tcx> {\n     pub sub: Ty<'tcx>,\n     pub sup: Ty<'tcx>,\n@@ -36,13 +36,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for Subtype<'tcx> {\n-        sub,\n-        sup,\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for Subtype<'a> {\n         type Lifted = Subtype<'tcx>;"}, {"sha": "608883d609f47d81ce3ed543654f1b92a21d92a6", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -280,7 +280,7 @@ pub struct SelectionCache<'tcx> {\n /// required for associated types to work in default impls, as the bounds\n /// are visible both as projection bounds and as where-clauses from the\n /// parameter environment.\n-#[derive(PartialEq, Eq, Debug, Clone)]\n+#[derive(PartialEq, Eq, Debug, Clone, TypeFoldable)]\n enum SelectionCandidate<'tcx> {\n     /// If has_nested is false, there are no *further* obligations\n     BuiltinCandidate {\n@@ -338,23 +338,6 @@ impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for SelectionCandidate<'tcx> {\n-        (SelectionCandidate::BuiltinCandidate) { has_nested },\n-        (SelectionCandidate::ParamCandidate)(poly_trait_ref),\n-        (SelectionCandidate::ImplCandidate)(def_id),\n-        (SelectionCandidate::AutoImplCandidate)(def_id),\n-        (SelectionCandidate::ProjectionCandidate),\n-        (SelectionCandidate::ClosureCandidate),\n-        (SelectionCandidate::GeneratorCandidate),\n-        (SelectionCandidate::FnPointerCandidate),\n-        (SelectionCandidate::TraitAliasCandidate)(def_id),\n-        (SelectionCandidate::ObjectCandidate),\n-        (SelectionCandidate::BuiltinObjectCandidate),\n-        (SelectionCandidate::BuiltinUnsizeCandidate),\n-    }\n-}\n-\n struct SelectionCandidateSet<'tcx> {\n     // a list of candidates that definitely apply to the current\n     // obligation (meaning: types unify)."}, {"sha": "56f1ad6031e435eaf3363f99f080b5759f28937b", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 140, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -778,124 +778,10 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableImplData<'tcx, N> {\n-        impl_def_id, substs, nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableGeneratorData<'tcx, N> {\n-        generator_def_id, substs, nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableClosureData<'tcx, N> {\n-        closure_def_id, substs, nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableAutoImplData<N> {\n-        trait_def_id, nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableBuiltinData<N> {\n-        nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx, N> {\n-        upcast_trait_ref, vtable_base, nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableFnPointerData<'tcx, N> {\n-        fn_ty,\n-        nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableTraitAliasData<'tcx, N> {\n-        alias_def_id, substs, nested\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx, N> TypeFoldable<'tcx> for traits::Vtable<'tcx, N> {\n-        (traits::VtableImpl)(a),\n-        (traits::VtableAutoImpl)(a),\n-        (traits::VtableGenerator)(a),\n-        (traits::VtableClosure)(a),\n-        (traits::VtableFnPointer)(a),\n-        (traits::VtableParam)(a),\n-        (traits::VtableBuiltin)(a),\n-        (traits::VtableObject)(a),\n-        (traits::VtableTraitAlias)(a),\n-    } where N: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for Normalized<'tcx, T> {\n-        value,\n-        obligations\n-    } where T: TypeFoldable<'tcx>\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::WhereClause<'tcx> {\n-        (traits::WhereClause::Implemented)(trait_ref),\n-        (traits::WhereClause::ProjectionEq)(projection),\n-        (traits::WhereClause::TypeOutlives)(ty_outlives),\n-        (traits::WhereClause::RegionOutlives)(region_outlives),\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::WellFormed<'tcx> {\n-        (traits::WellFormed::Trait)(trait_ref),\n-        (traits::WellFormed::Ty)(ty),\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::FromEnv<'tcx> {\n-        (traits::FromEnv::Trait)(trait_ref),\n-        (traits::FromEnv::Ty)(ty),\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::DomainGoal<'tcx> {\n-        (traits::DomainGoal::Holds)(wc),\n-        (traits::DomainGoal::WellFormed)(wf),\n-        (traits::DomainGoal::FromEnv)(from_env),\n-        (traits::DomainGoal::Normalize)(projection),\n-    }\n-}\n-\n CloneTypeFoldableAndLiftImpls! {\n     traits::QuantifierKind,\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::GoalKind<'tcx> {\n-        (traits::GoalKind::Implies)(hypotheses, goal),\n-        (traits::GoalKind::And)(goal1, goal2),\n-        (traits::GoalKind::Not)(goal),\n-        (traits::GoalKind::DomainGoal)(domain_goal),\n-        (traits::GoalKind::Quantified)(qkind, goal),\n-        (traits::GoalKind::Subtype)(a, b),\n-        (traits::GoalKind::CannotProve),\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<traits::Goal<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let v = self.iter()\n@@ -920,36 +806,10 @@ impl<'tcx> TypeFoldable<'tcx> for traits::Goal<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::ProgramClause<'tcx> {\n-        goal,\n-        hypotheses,\n-        category,\n-    }\n-}\n-\n CloneTypeFoldableAndLiftImpls! {\n     traits::ProgramClauseCategory,\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::Clause<'tcx> {\n-        (traits::Clause::Implies)(clause),\n-        (traits::Clause::ForAll)(clause),\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::Environment<'tcx> { clauses }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, G> TypeFoldable<'tcx> for traits::InEnvironment<'tcx, G> {\n-        environment,\n-        goal\n-    } where G: TypeFoldable<'tcx>\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for traits::Clauses<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let v = self.iter()"}, {"sha": "342644752b6c2474d44943af31dd27e55a643320", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -76,13 +76,13 @@ pub enum PointerCast {\n ///    At some point, of course, `Box` should move out of the compiler, in which\n ///    case this is analogous to transforming a struct. E.g., Box<[i32; 4]> ->\n ///    Box<[i32]> is an `Adjust::Unsize` with the target `Box<[i32]>`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct Adjustment<'tcx> {\n     pub kind: Adjust<'tcx>,\n     pub target: Ty<'tcx>,\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum Adjust<'tcx> {\n     /// Go from ! to any type.\n     NeverToAny,\n@@ -100,7 +100,7 @@ pub enum Adjust<'tcx> {\n /// call, with the signature `&'a T -> &'a U` or `&'a mut T -> &'a mut U`.\n /// The target type is `U` in both cases, with the region and mutability\n /// being those shared by both the receiver and the returned reference.\n-#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct OverloadedDeref<'tcx> {\n     pub region: ty::Region<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -151,7 +151,7 @@ impl From<AutoBorrowMutability> for hir::Mutability {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum AutoBorrow<'tcx> {\n     /// Converts from T to &T.\n     Ref(ty::Region<'tcx>, AutoBorrowMutability),"}, {"sha": "d80f3e5c6b6c0091230f68935186e74894321d15", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -307,7 +307,8 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n /// the scope that contains `x`.\n-#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, HashStable, PartialEq)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, HashStable, PartialEq,\n+    TypeFoldable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n     pub ty: Ty<'tcx>,\n@@ -317,12 +318,6 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub scope_span: Option<Span>,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for GeneratorInteriorTypeCause<'tcx> {\n-        ty, span, scope_span\n-    }\n-}\n-\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to.\n@@ -831,19 +826,13 @@ rustc_index::newtype_index! {\n pub type CanonicalUserTypeAnnotations<'tcx> =\n     IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n     pub span: Span,\n     pub inferred_ty: Ty<'tcx>,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for CanonicalUserTypeAnnotation<'tcx> {\n-        user_ty, span, inferred_ty\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for CanonicalUserTypeAnnotation<'a> {\n         type Lifted = CanonicalUserTypeAnnotation<'tcx>;\n@@ -903,7 +892,7 @@ impl CanonicalUserType<'tcx> {\n /// A user-given type annotation attached to a constant. These arise\n /// from constants that are named via paths, like `Foo::<A>::new` and\n /// so forth.\n-#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum UserType<'tcx> {\n     Ty(Ty<'tcx>),\n \n@@ -912,13 +901,6 @@ pub enum UserType<'tcx> {\n     TypeOf(DefId, UserSubsts<'tcx>),\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for UserType<'tcx> {\n-        (UserType::Ty)(ty),\n-        (UserType::TypeOf)(def, substs),\n-    }\n-}\n-\n EnumLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for UserType<'a> {\n         type Lifted = UserType<'tcx>;"}, {"sha": "febea68ddbb51e8cbf9151b4d786f1f91cd24b05", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -10,14 +10,14 @@ use syntax_pos::Span;\n \n use crate::hir;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n pub struct ExpectedFound<T> {\n     pub expected: T,\n     pub found: T,\n }\n \n // Data structures used in type unification\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),"}, {"sha": "5c6f963371f16f35bcc1887c8519136d93d9aa4e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -166,7 +166,7 @@ impl AssocItemContainer {\n /// The \"header\" of an impl is everything outside the body: a Self type, a trait\n /// ref (in the case of a trait impl), and a set of predicates (from the\n /// bounds / where-clauses).\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub struct ImplHeader<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,\n@@ -832,7 +832,7 @@ pub struct UpvarBorrow<'tcx> {\n pub type UpvarListMap = FxHashMap<DefId, FxIndexMap<hir::HirId, UpvarId>>;\n pub type UpvarCaptureMap<'tcx> = FxHashMap<UpvarId, UpvarCapture<'tcx>>;\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, TypeFoldable)]\n pub struct ClosureUpvar<'tcx> {\n     pub res: Res,\n     pub span: Span,\n@@ -1097,7 +1097,8 @@ impl<'tcx> GenericPredicates<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n+         HashStable, TypeFoldable)]\n pub enum Predicate<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n@@ -1247,7 +1248,8 @@ impl<'tcx> Predicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n+         HashStable, TypeFoldable)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>\n }\n@@ -1276,15 +1278,16 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+         Hash, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`\n pub type PolyOutlivesPredicate<A, B> = ty::Binder<OutlivesPredicate<A, B>>;\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;\n pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;\n pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<RegionOutlivesPredicate<'tcx>>;\n pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<TypeOutlivesPredicate<'tcx>>;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable,\n+         HashStable, TypeFoldable)]\n pub struct SubtypePredicate<'tcx> {\n     pub a_is_expected: bool,\n     pub a: Ty<'tcx>,\n@@ -1304,7 +1307,8 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n /// equality between arbitrary types. Processing an instance of\n /// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n+         HashStable, TypeFoldable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub ty: Ty<'tcx>,\n@@ -1534,7 +1538,7 @@ impl<'tcx> Predicate<'tcx> {\n /// `[[], [U:Bar<T>]]`. Now if there were some particular reference\n /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],\n /// [usize:Bar<isize>]]`.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub struct InstantiatedPredicates<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n@@ -1658,7 +1662,7 @@ pub type PlaceholderConst = Placeholder<BoundVar>;\n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n /// particular point.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TypeFoldable)]\n pub struct ParamEnv<'tcx> {\n     /// `Obligation`s that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n@@ -1764,7 +1768,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,\n     pub value: T,"}, {"sha": "57415e3756036b761be4b681c9f58448669071c5", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -307,15 +307,9 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, TypeFoldable)]\n struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);\n \n-TupleStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for GeneratorWitness<'tcx> {\n-        a\n-    }\n-}\n-\n impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,"}, {"sha": "266549e5f63a1a465b11b90ddc6723d272a5b1f1", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -916,10 +916,6 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> { reveal, caller_bounds, def_id }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n@@ -931,14 +927,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialPredicate<'tcx> {\n-        (ty::ExistentialPredicate::Trait)(a),\n-        (ty::ExistentialPredicate::Projection)(a),\n-        (ty::ExistentialPredicate::AutoTrait)(a),\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let v = self.iter().map(|t| t.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n@@ -1125,41 +1113,6 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n-        ty, mutbl\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::GenSig<'tcx> {\n-        yield_ty, return_ty\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n-        inputs_and_output, c_variadic, unsafety, abi\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> { def_id, substs }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialTraitRef<'tcx> { def_id, substs }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ImplHeader<'tcx> {\n-        impl_def_id,\n-        self_ty,\n-        trait_ref,\n-        predicates,\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n         *self\n@@ -1178,47 +1131,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ClosureSubsts<'tcx> {\n-        substs,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::GeneratorSubsts<'tcx> {\n-        substs,\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::Adjustment<'tcx> {\n-        kind,\n-        target,\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::Adjust<'tcx> {\n-        (ty::adjustment::Adjust::NeverToAny),\n-        (ty::adjustment::Adjust::Pointer)(a),\n-        (ty::adjustment::Adjust::Deref)(a),\n-        (ty::adjustment::Adjust::Borrow)(a),\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::OverloadedDeref<'tcx> {\n-        region, mutbl,\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoBorrow<'tcx> {\n-        (ty::adjustment::AutoBorrow::Ref)(a, b),\n-        (ty::adjustment::AutoBorrow::RawPtr)(m),\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         // This code is hot enough that it's worth specializing for a list of\n@@ -1243,80 +1155,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n-        (ty::Predicate::Trait)(a),\n-        (ty::Predicate::Subtype)(a),\n-        (ty::Predicate::RegionOutlives)(a),\n-        (ty::Predicate::TypeOutlives)(a),\n-        (ty::Predicate::Projection)(a),\n-        (ty::Predicate::WellFormed)(a),\n-        (ty::Predicate::ClosureKind)(a, b, c),\n-        (ty::Predicate::ObjectSafe)(a),\n-        (ty::Predicate::ConstEvaluatable)(a, b),\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionPredicate<'tcx> {\n-        projection_ty, ty\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialProjection<'tcx> {\n-        ty, substs, item_def_id\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> {\n-        substs, item_def_id\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> {\n-        predicates\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for ty::ParamEnvAnd<'tcx, T> {\n-        param_env, value\n-    } where T: TypeFoldable<'tcx>\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::SubtypePredicate<'tcx> {\n-        a_is_expected, a, b\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> {\n-        trait_ref\n-    }\n-}\n-\n-TupleStructTypeFoldableImpl! {\n-    impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U> {\n-        a, b\n-    } where T : TypeFoldable<'tcx>, U : TypeFoldable<'tcx>,\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> {\n-        res, span, ty\n-    }\n-}\n-\n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for ty::error::ExpectedFound<T> {\n-        expected, found\n-    } where T: TypeFoldable<'tcx>\n-}\n-\n impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|x| x.fold_with(folder)).collect()\n@@ -1327,34 +1165,6 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n-        (ty::error::TypeError::Mismatch),\n-        (ty::error::TypeError::UnsafetyMismatch)(x),\n-        (ty::error::TypeError::AbiMismatch)(x),\n-        (ty::error::TypeError::Mutability),\n-        (ty::error::TypeError::TupleSize)(x),\n-        (ty::error::TypeError::FixedArraySize)(x),\n-        (ty::error::TypeError::ArgCount),\n-        (ty::error::TypeError::RegionsDoesNotOutlive)(a, b),\n-        (ty::error::TypeError::RegionsInsufficientlyPolymorphic)(a, b),\n-        (ty::error::TypeError::RegionsOverlyPolymorphic)(a, b),\n-        (ty::error::TypeError::RegionsPlaceholderMismatch),\n-        (ty::error::TypeError::IntMismatch)(x),\n-        (ty::error::TypeError::FloatMismatch)(x),\n-        (ty::error::TypeError::Traits)(x),\n-        (ty::error::TypeError::VariadicMismatch)(x),\n-        (ty::error::TypeError::CyclicTy)(t),\n-        (ty::error::TypeError::ProjectionMismatched)(x),\n-        (ty::error::TypeError::ProjectionBoundsLength)(x),\n-        (ty::error::TypeError::Sorts)(x),\n-        (ty::error::TypeError::ExistentialMismatch)(x),\n-        (ty::error::TypeError::ConstMismatch)(x),\n-        (ty::error::TypeError::IntrinsicCast),\n-        (ty::error::TypeError::ObjectUnsafeCoercion)(x),\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let ty = self.ty.fold_with(folder);"}, {"sha": "0f8f4152e7d3c94b1ca3895d23d67d0636651391", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -30,7 +30,7 @@ use self::InferTy::*;\n use self::TyKind::*;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+         Hash, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -304,7 +304,7 @@ static_assert_size!(TyKind<'_>, 24);\n /// type parameters is similar, but the role of CK and CS are\n /// different. CK represents the \"yield type\" and CS represents the\n /// \"return type\" of the generator.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with the types of the upvars.\n@@ -391,7 +391,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n }\n \n /// Similar to `ClosureSubsts`; see the above documentation for more.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct GeneratorSubsts<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n@@ -592,7 +592,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n+         RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum ExistentialPredicate<'tcx> {\n     /// E.g., `Iterator`.\n     Trait(ExistentialTraitRef<'tcx>),\n@@ -742,7 +742,8 @@ impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n /// Note that a `TraitRef` introduces a level of region binding, to\n /// account for higher-ranked trait bounds like `T: for<'a> Foo<&'a U>`\n /// or higher-ranked object types.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n+         HashStable, TypeFoldable)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -814,7 +815,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n /// The substitutions don't include the erased `Self`, only trait\n /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n+         RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct ExistentialTraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -986,7 +987,7 @@ impl<T> Binder<T> {\n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+         Hash, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: SubstsRef<'tcx>,\n@@ -1033,7 +1034,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, TypeFoldable)]\n pub struct GenSig<'tcx> {\n     pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,\n@@ -1057,7 +1058,7 @@ impl<'tcx> PolyGenSig<'tcx> {\n /// - `output`: is the return type.\n /// - `c_variadic`: indicates whether this is a C-variadic function.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, RustcEncodable, RustcDecodable, HashStable)]\n+         Hash, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx List<Ty<'tcx>>,\n     pub c_variadic: bool,\n@@ -1404,7 +1405,7 @@ impl From<BoundVar> for BoundTy {\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Debug, RustcEncodable, RustcDecodable, HashStable)]\n+         Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "3c8da15cc2275f691b7d777977a5ce4d4710a2ab", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17692b5849fbf5595f2b84a08681f550d587f99d/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=17692b5849fbf5595f2b84a08681f550d587f99d", "patch": "@@ -731,7 +731,8 @@ pub type CanonicalUserSubsts<'tcx> = Canonical<'tcx, UserSubsts<'tcx>>;\n \n /// Stores the user-given substs to reach some fully qualified path\n /// (e.g., `<T>::Item` or `<T as Trait>::Item`).\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n+    HashStable, TypeFoldable)]\n pub struct UserSubsts<'tcx> {\n     /// The substitutions for the item as given by the user.\n     pub substs: SubstsRef<'tcx>,\n@@ -741,13 +742,6 @@ pub struct UserSubsts<'tcx> {\n     pub user_self_ty: Option<UserSelfTy<'tcx>>,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for UserSubsts<'tcx> {\n-        substs,\n-        user_self_ty,\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for UserSubsts<'a> {\n         type Lifted = UserSubsts<'tcx>;\n@@ -772,19 +766,13 @@ BraceStructLiftImpl! {\n /// the impl (with the substs from `UserSubsts`) and apply those to\n /// the self type, giving `Foo<?A>`. Finally, we unify that with\n /// the self type here, which contains `?A` to be `&'static u32`\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n+    HashStable, TypeFoldable)]\n pub struct UserSelfTy<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for UserSelfTy<'tcx> {\n-        impl_def_id,\n-        self_ty,\n-    }\n-}\n-\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for UserSelfTy<'a> {\n         type Lifted = UserSelfTy<'tcx>;"}]}