{"sha": "9ee7b31414fce48403daa19904a7097b9a77baea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTdiMzE0MTRmY2U0ODQwM2RhYTE5OTA0YTcwOTdiOWE3N2JhZWE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-08-28T06:03:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-08T21:22:15Z"}, "message": "std: cleanup in sync.rs for things missed in last rebase", "tree": {"sha": "b5ccfb6a5b706b2212aa3b056dc23b30d8d2f3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ccfb6a5b706b2212aa3b056dc23b30d8d2f3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee7b31414fce48403daa19904a7097b9a77baea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee7b31414fce48403daa19904a7097b9a77baea", "html_url": "https://github.com/rust-lang/rust/commit/9ee7b31414fce48403daa19904a7097b9a77baea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee7b31414fce48403daa19904a7097b9a77baea/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f32c0d5c34d0bd5c94b7905ebb2916ec94761e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f32c0d5c34d0bd5c94b7905ebb2916ec94761e4", "html_url": "https://github.com/rust-lang/rust/commit/2f32c0d5c34d0bd5c94b7905ebb2916ec94761e4"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "92e64ccc5a55a3245c25164e91ddb277f38eef71", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ee7b31414fce48403daa19904a7097b9a77baea/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee7b31414fce48403daa19904a7097b9a77baea/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=9ee7b31414fce48403daa19904a7097b9a77baea", "patch": "@@ -96,11 +96,11 @@ impl<Q: Send> &Sem<Q> {\n                 state.count -= 1;\n                 if state.count < 0 {\n                     // Create waiter nobe.\n-                    let (signal_end, wait_end) = pipes::oneshot();\n+                    let (SignalEnd, WaitEnd) = pipes::oneshot();\n                     // Tell outer scope we need to block.\n-                    waiter_nobe = Some(wait_end);\n+                    waiter_nobe = Some(WaitEnd);\n                     // Enqueue ourself.\n-                    state.waiters.tail.send(signal_end);\n+                    state.waiters.tail.send(SignalEnd);\n                 }\n             }\n         }\n@@ -202,9 +202,9 @@ impl &Condvar {\n      */\n     fn wait_on(condvar_id: uint) {\n         // Create waiter nobe.\n-        let (signal_end, wait_end) = pipes::oneshot();\n-        let mut wait_end   = Some(wait_end);\n-        let mut signal_end = Some(signal_end);\n+        let (SignalEnd, WaitEnd) = pipes::oneshot();\n+        let mut WaitEnd   = Some(WaitEnd);\n+        let mut SignalEnd = Some(SignalEnd);\n         let mut reacquire = None;\n         let mut out_of_bounds = None;\n         unsafe {\n@@ -218,8 +218,8 @@ impl &Condvar {\n                             signal_waitqueue(&state.waiters);\n                         }\n                         // Enqueue ourself to be woken up by a signaller.\n-                        let signal_end = option::swap_unwrap(&mut signal_end);\n-                        state.blocked[condvar_id].tail.send(signal_end);\n+                        let SignalEnd = option::swap_unwrap(&mut SignalEnd);\n+                        state.blocked[condvar_id].tail.send(SignalEnd);\n                     } else {\n                         out_of_bounds = Some(vec::len(state.blocked));\n                     }\n@@ -238,7 +238,7 @@ impl &Condvar {\n             // Unconditionally \"block\". (Might not actually block if a\n             // signaller already sent -- I mean 'unconditionally' in contrast\n             // with acquire().)\n-            let _ = pipes::recv_one(option::swap_unwrap(&mut wait_end));\n+            let _ = pipes::recv_one(option::swap_unwrap(&mut WaitEnd));\n         }\n \n         // This is needed for a failing condition variable to reacquire the"}]}