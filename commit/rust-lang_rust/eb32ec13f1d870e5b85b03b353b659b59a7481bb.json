{"sha": "eb32ec13f1d870e5b85b03b353b659b59a7481bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMzJlYzEzZjFkODcwZTViODViMDNiMzUzYjY1OWI1OWE3NDgxYmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-11T12:19:56Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-11T12:19:56Z"}, "message": "debuginfo: Renamed NamespaceTree to NamespaceTreeNode.", "tree": {"sha": "9f088f7857bdf83959a1775d08cbe99ad421e3d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f088f7857bdf83959a1775d08cbe99ad421e3d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb32ec13f1d870e5b85b03b353b659b59a7481bb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb32ec13f1d870e5b85b03b353b659b59a7481bb", "html_url": "https://github.com/rust-lang/rust/commit/eb32ec13f1d870e5b85b03b353b659b59a7481bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb32ec13f1d870e5b85b03b353b659b59a7481bb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab14a949d64ed220d974773a184e9fecb815cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab14a949d64ed220d974773a184e9fecb815cbf", "html_url": "https://github.com/rust-lang/rust/commit/9ab14a949d64ed220d974773a184e9fecb815cbf"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9164ee4943b33251943e35dbd72b6d53d8dc8219", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb32ec13f1d870e5b85b03b353b659b59a7481bb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32ec13f1d870e5b85b03b353b659b59a7481bb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=eb32ec13f1d870e5b85b03b353b659b59a7481bb", "patch": "@@ -99,8 +99,8 @@ pub struct CrateDebugContext {\n     priv current_debug_location: DebugLocation,\n     priv created_files: HashMap<~str, DIFile>,\n     priv created_types: HashMap<uint, DIType>,\n-    priv local_namespace_map: HashMap<ast::NodeId, @NamespaceTree>,\n-    priv extern_namespaces: HashMap<~[ast::Ident], @NamespaceTree>,\n+    priv local_namespace_map: HashMap<ast::NodeId, @NamespaceTreeNode>,\n+    priv extern_namespaces: HashMap<~[ast::Ident], @NamespaceTreeNode>,\n }\n \n impl CrateDebugContext {\n@@ -2369,13 +2369,13 @@ fn populate_scope_map(cx: &mut CrateContext,\n // Namespace Handling\n //=-------------------------------------------------------------------------------------------------\n \n-struct NamespaceTree {\n+struct NamespaceTreeNode {\n     ident: ast::Ident,\n     scope: DIScope,\n-    parent: Option<@NamespaceTree>,\n+    parent: Option<@NamespaceTreeNode>,\n }\n \n-impl NamespaceTree {\n+impl NamespaceTreeNode {\n     fn mangled_name_of_contained_item(&self, item_name: &str) -> ~str {\n         let mut name = ~\"_ZN\";\n         fill_nested(self, &mut name);\n@@ -2385,7 +2385,7 @@ impl NamespaceTree {\n \n         return name;\n \n-        fn fill_nested(node: &NamespaceTree, output: &mut ~str) {\n+        fn fill_nested(node: &NamespaceTreeNode, output: &mut ~str) {\n             match node.parent {\n                 Some(parent) => {\n                     fill_nested(parent, output);\n@@ -2400,15 +2400,15 @@ impl NamespaceTree {\n \n fn namespace_for_external_item(cx: &mut CrateContext,\n                                item_path: &ast_map::path)\n-                            -> @NamespaceTree {\n+                            -> @NamespaceTreeNode {\n     if item_path.len() < 2 {\n         cx.sess.bug(fmt!(\"debuginfo::namespace_for_external_item() - Invalid item_path: %s\",\n             ast_map::path_to_str(*item_path, token::get_ident_interner())));\n     }\n \n     let path_excluding_item = item_path.slice_to(item_path.len() - 1);\n     let mut current_key = vec::with_capacity(path_excluding_item.len());\n-    let mut parent_node: Option<@NamespaceTree> = None;\n+    let mut parent_node: Option<@NamespaceTreeNode> = None;\n     let last_index = path_excluding_item.len() - 1;\n \n     for (i, &path_element) in path_excluding_item.iter().enumerate() {\n@@ -2442,7 +2442,7 @@ fn namespace_for_external_item(cx: &mut CrateContext,\n                     }\n                 };\n \n-                let node = @NamespaceTree {\n+                let node = @NamespaceTreeNode {\n                     ident: ident,\n                     scope: namespace_metadata,\n                     parent: parent_node,\n@@ -2466,7 +2466,7 @@ fn namespace_for_external_item(cx: &mut CrateContext,\n \n struct NamespaceVisitor<'self> {\n     module_ident: ast::Ident,\n-    scope_stack: ~[@NamespaceTree],\n+    scope_stack: ~[@NamespaceTreeNode],\n     crate_context: &'self mut CrateContext,\n }\n \n@@ -2484,7 +2484,7 @@ impl<'self> NamespaceVisitor<'self> {\n \n     fn new_function_visitor<'a>(cx: &'a mut CrateContext,\n                                 function_name: &str,\n-                                parent_node: Option<@NamespaceTree>,\n+                                parent_node: Option<@NamespaceTreeNode>,\n                                 file_metadata: DIFile,\n                                 span: Span)\n                              -> NamespaceVisitor<'a> {\n@@ -2507,7 +2507,7 @@ impl<'self> NamespaceVisitor<'self> {\n             }\n         };\n \n-        let function_node = @NamespaceTree {\n+        let function_node = @NamespaceTreeNode {\n             scope: namespace_metadata,\n             ident: companion_ident,\n             parent: parent_node,\n@@ -2552,7 +2552,7 @@ impl<'self> visit::Visitor<()> for NamespaceVisitor<'self> {\n             }\n         };\n \n-        let this_node = @NamespaceTree {\n+        let this_node = @NamespaceTreeNode {\n             scope: namespace_metadata,\n             ident: self.module_ident,\n             parent: parent_node,"}]}