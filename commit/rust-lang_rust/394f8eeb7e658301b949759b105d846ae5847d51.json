{"sha": "394f8eeb7e658301b949759b105d846ae5847d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NGY4ZWViN2U2NTgzMDFiOTQ5NzU5YjEwNWQ4NDZhZTU4NDdkNTE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-07T01:23:41Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-09T21:37:04Z"}, "message": "tidy", "tree": {"sha": "03f33702ca5588570c4dcb13bd9c280496c0660a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f33702ca5588570c4dcb13bd9c280496c0660a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/394f8eeb7e658301b949759b105d846ae5847d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/394f8eeb7e658301b949759b105d846ae5847d51", "html_url": "https://github.com/rust-lang/rust/commit/394f8eeb7e658301b949759b105d846ae5847d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/394f8eeb7e658301b949759b105d846ae5847d51/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe823743287fedd520e6c95b2380b7702c3fd966", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe823743287fedd520e6c95b2380b7702c3fd966", "html_url": "https://github.com/rust-lang/rust/commit/fe823743287fedd520e6c95b2380b7702c3fd966"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "0d69730f1daa8792d893da2119c6cf7b934c33ef", "filename": "src/libstd/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/394f8eeb7e658301b949759b105d846ae5847d51/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394f8eeb7e658301b949759b105d846ae5847d51/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=394f8eeb7e658301b949759b105d846ae5847d51", "patch": "@@ -121,21 +121,21 @@ pub impl Encoder: serialize::Encoder {\n     fn emit_owned(&self, f: fn()) { f() }\n     fn emit_managed(&self, f: fn()) { f() }\n \n-    fn emit_enum(&self, name: &str, f: fn()) {\n+    fn emit_enum(&self, _name: &str, f: fn()) {\n         f()\n     }\n-    \n-    fn emit_enum_variant(&self, _name: &str, id: uint, _cnt: uint, f: fn()) {\n+\n+    fn emit_enum_variant(&self, name: &str, _id: uint, _cnt: uint, f: fn()) {\n         // emitting enums as arrays where the first\n         // element provides the enum variant name\n         self.wr.write_char('[');\n-        self.wr.write_str(escape_str(_name));\n+        self.wr.write_str(escape_str(name));\n         self.wr.write_char(',');\n         f();\n         self.wr.write_char(']');\n     }\n-    fn emit_enum_variant_arg(&self, _idx: uint, f: fn()) {\n-        if _idx != 0 {self.wr.write_char(',');}\n+    fn emit_enum_variant_arg(&self, idx: uint, f: fn()) {\n+        if idx != 0 {self.wr.write_char(',');}\n         f();\n     }\n "}, {"sha": "ae3b3ae0430ef4ee1554de761223d1bf3a9f0d71", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/394f8eeb7e658301b949759b105d846ae5847d51/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394f8eeb7e658301b949759b105d846ae5847d51/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=394f8eeb7e658301b949759b105d846ae5847d51", "patch": "@@ -1160,8 +1160,7 @@ mod test {\n     use core::io;\n     use core::str;\n     use std;\n-    \n-    \n+\n     #[auto_decode]\n     #[auto_encode]\n     struct Node {id: uint}\n@@ -1171,9 +1170,11 @@ mod test {\n         val.encode(~std::json::Encoder(bw as io::Writer));\n         str::from_bytes(bw.bytes.data)\n     }\n-    \n+\n     #[test] fn encode_test () {\n-        check_equal (to_json_str(Node{id:34} as Encodable::<std::json::Encoder>),~\"{\\\"id\\\":34}\");\n+        check_equal (to_json_str(Node{id:34}\n+                                 as Encodable::<std::json::Encoder>),\n+                     ~\"{\\\"id\\\":34}\");\n     }\n \n     #[auto_encode]\n@@ -1185,7 +1186,8 @@ mod test {\n     #[test] fn json_enum_encode_test () {\n         check_equal (to_json_str(Book(9) as Encodable::<std::json::Encoder>),\n                      ~\"[\\\"Book\\\",9]\");\n-        check_equal (to_json_str(Magazine(~\"Paris Match\") as Encodable::<std::json::Encoder>),\n+        check_equal (to_json_str(Magazine(~\"Paris Match\")\n+                                 as Encodable::<std::json::Encoder>),\n                      ~\"[\\\"Magazine\\\",\\\"Paris Match\\\"]\");\n     }\n }"}]}