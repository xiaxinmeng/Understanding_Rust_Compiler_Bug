{"sha": "2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTgzYzA1MDM1ODU1ZjRiOGY5YThiNjcxZDhkN2NkNjliNjBmOGI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T15:07:52Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T15:07:52Z"}, "message": "std: replace str::is_{alphanumeric,whitespace} with the methods.", "tree": {"sha": "d06e4c0a27a4581d8e020d7549c21fa8a86b9a9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d06e4c0a27a4581d8e020d7549c21fa8a86b9a9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "html_url": "https://github.com/rust-lang/rust/commit/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838191c40bc0411853d2b0d7e98326d08a5060e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/838191c40bc0411853d2b0d7e98326d08a5060e0", "html_url": "https://github.com/rust-lang/rust/commit/838191c40bc0411853d2b0d7e98326d08a5060e0"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "f018a237b7e298bc0a625e40bc6d4ba53db9ec7f", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "patch": "@@ -151,7 +151,7 @@ pub fn paragraphs(s: &str) -> ~[~str] {\n     let paras = do lines.iter().fold(~[]) |paras, line| {\n         let mut res = paras;\n \n-        if str::is_whitespace(*line) {\n+        if line.is_whitespace() {\n             whitespace_lines += 1;\n         } else {\n             if whitespace_lines > 0 {"}, {"sha": "beb246857be725db87d586e334e129e3bd1d5d88", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "patch": "@@ -46,7 +46,7 @@ fn unindent(s: &str) -> ~str {\n         let ignore_previous_indents =\n             saw_first_line &&\n             !saw_second_line &&\n-            !str::is_whitespace(*line);\n+            !line.is_whitespace();\n \n         let min_indent = if ignore_previous_indents {\n             uint::max_value\n@@ -58,7 +58,7 @@ fn unindent(s: &str) -> ~str {\n             saw_second_line = true;\n         }\n \n-        if str::is_whitespace(*line) {\n+        if line.is_whitespace() {\n             min_indent\n         } else {\n             saw_first_line = true;\n@@ -80,7 +80,7 @@ fn unindent(s: &str) -> ~str {\n     if !lines.is_empty() {\n         let unindented = ~[lines.head().trim().to_owned()]\n             + do lines.tail().map |line| {\n-            if str::is_whitespace(*line) {\n+            if line.is_whitespace() {\n                 copy *line\n             } else {\n                 assert!(line.len() >= min_indent);"}, {"sha": "e581eff83ad83b7933b71ef9f5f94b801a62d6a1", "filename": "src/libstd/str.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "patch": "@@ -981,24 +981,6 @@ fn match_at<'a,'b>(haystack: &'a str, needle: &'b str, at: uint) -> bool {\n Section: String properties\n */\n \n-/**\n- * Returns true if the string contains only whitespace\n- *\n- * Whitespace characters are determined by `char::is_whitespace`\n- */\n-pub fn is_whitespace(s: &str) -> bool {\n-    s.iter().all(char::is_whitespace)\n-}\n-\n-/**\n- * Returns true if the string contains only alphanumerics\n- *\n- * Alphanumeric characters are determined by `char::is_alphanumeric`\n- */\n-fn is_alphanumeric(s: &str) -> bool {\n-    s.iter().all(char::is_alphanumeric)\n-}\n-\n /// Returns the number of characters that a string holds\n #[inline(always)]\n pub fn char_len(s: &str) -> uint { count_chars(s, 0u, s.len()) }\n@@ -1749,14 +1731,14 @@ impl<'self> StrSlice<'self> for &'self str {\n      * Whitespace characters are determined by `char::is_whitespace`\n      */\n     #[inline]\n-    fn is_whitespace(&self) -> bool { is_whitespace(*self) }\n+    fn is_whitespace(&self) -> bool { self.iter().all(char::is_whitespace) }\n     /**\n      * Returns true if the string contains only alphanumerics\n      *\n      * Alphanumeric characters are determined by `char::is_alphanumeric`\n      */\n     #[inline]\n-    fn is_alphanumeric(&self) -> bool { is_alphanumeric(*self) }\n+    fn is_alphanumeric(&self) -> bool { self.iter().all(char::is_alphanumeric) }\n     /// Returns the size in bytes not counting the null terminator\n     #[inline(always)]\n     fn len(&self) -> uint {\n@@ -2773,11 +2755,11 @@ mod tests {\n \n     #[test]\n     fn test_is_whitespace() {\n-        assert!(is_whitespace(\"\"));\n-        assert!(is_whitespace(\" \"));\n-        assert!(is_whitespace(\"\\u2009\")); // Thin space\n-        assert!(is_whitespace(\"  \\n\\t   \"));\n-        assert!(!is_whitespace(\"   _   \"));\n+        assert!(\"\".is_whitespace());\n+        assert!(\" \".is_whitespace());\n+        assert!(\"\\u2009\".is_whitespace()); // Thin space\n+        assert!(\"  \\n\\t   \".is_whitespace());\n+        assert!(!\"   _   \".is_whitespace());\n     }\n \n     #[test]"}]}