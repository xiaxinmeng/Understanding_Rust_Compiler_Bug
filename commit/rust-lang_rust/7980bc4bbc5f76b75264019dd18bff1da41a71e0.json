{"sha": "7980bc4bbc5f76b75264019dd18bff1da41a71e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODBiYzRiYmM1Zjc2Yjc1MjY0MDE5ZGQxOGJmZjFkYTQxYTcxZTA=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-06-04T17:22:30Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-06-04T17:22:30Z"}, "message": "Hide gen_future API from documentation", "tree": {"sha": "42118e355074bd767ee152a1b3b25f5b91dc643a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42118e355074bd767ee152a1b3b25f5b91dc643a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7980bc4bbc5f76b75264019dd18bff1da41a71e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7980bc4bbc5f76b75264019dd18bff1da41a71e0", "html_url": "https://github.com/rust-lang/rust/commit/7980bc4bbc5f76b75264019dd18bff1da41a71e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7980bc4bbc5f76b75264019dd18bff1da41a71e0/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acda261de83475cf6cbc607d570153bb864ee7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/acda261de83475cf6cbc607d570153bb864ee7be", "html_url": "https://github.com/rust-lang/rust/commit/acda261de83475cf6cbc607d570153bb864ee7be"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "0406549ff07910d079c8dd9d49cd77c772d30a1c", "filename": "src/libstd/future.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7980bc4bbc5f76b75264019dd18bff1da41a71e0/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7980bc4bbc5f76b75264019dd18bff1da41a71e0/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=7980bc4bbc5f76b75264019dd18bff1da41a71e0", "patch": "@@ -16,12 +16,14 @@ pub use core::future::*;\n ///\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n pub fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n     GenFuture(x)\n }\n \n /// A wrapper around generators used to implement `Future` for `async`/`await` code.\n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n struct GenFuture<T: Generator<Yield = ()>>(T);\n@@ -30,6 +32,7 @@ struct GenFuture<T: Generator<Yield = ()>>(T);\n // self-referential borrows in the underlying generator.\n impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n@@ -57,6 +60,7 @@ impl Drop for SetOnDrop {\n     }\n }\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Sets the thread-local task context used by async/await futures.\n pub fn set_task_context<F, R>(cx: &mut Context<'_>, f: F) -> R\n@@ -74,6 +78,7 @@ where\n     f()\n }\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Retrieves the thread-local task context used by async/await futures.\n ///\n@@ -105,6 +110,7 @@ where\n     unsafe { f(cx_ptr.as_mut()) }\n }\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Polls a future in the current thread-local task waker.\n pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>"}]}