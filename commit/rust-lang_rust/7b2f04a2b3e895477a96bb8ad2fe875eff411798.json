{"sha": "7b2f04a2b3e895477a96bb8ad2fe875eff411798", "node_id": "C_kwDOAAsO6NoAKDdiMmYwNGEyYjNlODk1NDc3YTk2YmI4YWQyZmU4NzVlZmY0MTE3OTg", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-27T06:25:29Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-07T22:47:26Z"}, "message": "fix #102182, recover from impl Trait in type param bound", "tree": {"sha": "6e72d216a62d91a51d5e93bdd0d540ab60357152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e72d216a62d91a51d5e93bdd0d540ab60357152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b2f04a2b3e895477a96bb8ad2fe875eff411798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f04a2b3e895477a96bb8ad2fe875eff411798", "html_url": "https://github.com/rust-lang/rust/commit/7b2f04a2b3e895477a96bb8ad2fe875eff411798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f04a2b3e895477a96bb8ad2fe875eff411798/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672e3f4d77f8b9f86a999992b459a95909aa74c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/672e3f4d77f8b9f86a999992b459a95909aa74c2", "html_url": "https://github.com/rust-lang/rust/commit/672e3f4d77f8b9f86a999992b459a95909aa74c2"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "fa75670b2ed8221008da4f9493f71b2597203767", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f04a2b3e895477a96bb8ad2fe875eff411798/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f04a2b3e895477a96bb8ad2fe875eff411798/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=7b2f04a2b3e895477a96bb8ad2fe875eff411798", "patch": "@@ -1,7 +1,9 @@\n use super::{ForceCollect, Parser, TrailingToken};\n \n use rustc_ast::token;\n-use rustc_ast::{self as ast, AttrVec, GenericBounds, GenericParam, GenericParamKind, WhereClause};\n+use rustc_ast::{\n+    self as ast, AttrVec, GenericBounds, GenericParam, GenericParamKind, TyKind, WhereClause,\n+};\n use rustc_errors::{Applicability, PResult};\n use rustc_span::symbol::kw;\n \n@@ -31,13 +33,43 @@ impl<'a> Parser<'a> {\n         let mut colon_span = None;\n         let bounds = if self.eat(&token::Colon) {\n             colon_span = Some(self.prev_token.span);\n+            // recover from `impl Trait` in type param bound\n+            if self.token.is_keyword(kw::Impl) {\n+                let impl_span = self.token.span;\n+                let snapshot = self.create_snapshot_for_diagnostic();\n+                match self.parse_ty() {\n+                    Ok(p) => {\n+                        if let TyKind::ImplTrait(_, bounds) = &(*p).kind {\n+                            let span = impl_span.to(self.token.span.shrink_to_lo());\n+                            let mut err = self.struct_span_err(\n+                                span,\n+                                \"expected trait bound, found `impl Trait` type\",\n+                            );\n+                            err.span_label(span, \"not a trait\");\n+                            if let [bound, ..] = &bounds[..] {\n+                                err.span_suggestion_verbose(\n+                                    impl_span.until(bound.span()),\n+                                    \"use the trait bounds directly\",\n+                                    String::new(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            err.emit();\n+                            return Err(err);\n+                        }\n+                    }\n+                    Err(err) => {\n+                        err.cancel();\n+                    }\n+                }\n+                self.restore_snapshot(snapshot);\n+            }\n             self.parse_generic_bounds(colon_span)?\n         } else {\n             Vec::new()\n         };\n \n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n-\n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "4bfc676d6f620c3878eb347134779841e8511116", "filename": "src/test/ui/parser/issues/issue-102182-impl-trait-recover.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f04a2b3e895477a96bb8ad2fe875eff411798/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-102182-impl-trait-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f04a2b3e895477a96bb8ad2fe875eff411798/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-102182-impl-trait-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-102182-impl-trait-recover.rs?ref=7b2f04a2b3e895477a96bb8ad2fe875eff411798", "patch": "@@ -0,0 +1,3 @@\n+fn foo<T: impl Trait>() {}\n+//~^ ERROR expected trait bound, found `impl Trait` type\n+fn main() {}"}, {"sha": "52b6ae5df359a96a312ad1c9fad8e223097c193d", "filename": "src/test/ui/parser/issues/issue-102182-impl-trait-recover.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f04a2b3e895477a96bb8ad2fe875eff411798/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-102182-impl-trait-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f04a2b3e895477a96bb8ad2fe875eff411798/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-102182-impl-trait-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-102182-impl-trait-recover.stderr?ref=7b2f04a2b3e895477a96bb8ad2fe875eff411798", "patch": "@@ -0,0 +1,14 @@\n+error: expected trait bound, found `impl Trait` type\n+  --> $DIR/issue-102182-impl-trait-recover.rs:1:11\n+   |\n+LL | fn foo<T: impl Trait>() {}\n+   |           ^^^^^^^^^^ not a trait\n+   |\n+help: use the trait bounds directly\n+   |\n+LL - fn foo<T: impl Trait>() {}\n+LL + fn foo<T: Trait>() {}\n+   |\n+\n+error: aborting due to previous error\n+"}]}