{"sha": "302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMmJmOTdiYmYxODU1ZTNjN2RlZjlhYjRmOWYzZDMzOGJlNWUzYjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-17T09:38:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-17T10:25:41Z"}, "message": "Don't expose impl details of SyntaxPtr", "tree": {"sha": "f26fcf569dea4fa40ca3814d30e340572a66374b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26fcf569dea4fa40ca3814d30e340572a66374b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "html_url": "https://github.com/rust-lang/rust/commit/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f0cb6cd77c2dc93f2eed180a6c16fd8c3fca5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f0cb6cd77c2dc93f2eed180a6c16fd8c3fca5a", "html_url": "https://github.com/rust-lang/rust/commit/69f0cb6cd77c2dc93f2eed180a6c16fd8c3fca5a"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "3b169440ad85ecdb21cb3b91a0bf67c28062aad9", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -210,7 +210,7 @@ pub struct BodySourceMap {\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n-    field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n+    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordField>>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n@@ -303,7 +303,7 @@ impl BodySourceMap {\n         self.pat_map.get(&src).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n+    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordField>> {\n         self.field_map[&(expr, field)].clone()\n     }\n }"}, {"sha": "10a1ba714b916751d497b4d9ea54ce667c0a4d74", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -320,7 +320,8 @@ impl ExprCollector<'_> {\n \n                 let res = self.alloc_expr(record_lit, syntax_ptr);\n                 for (i, ptr) in field_ptrs.into_iter().enumerate() {\n-                    self.source_map.field_map.insert((res, i), ptr);\n+                    let src = self.expander.to_source(ptr);\n+                    self.source_map.field_map.insert((res, i), src);\n                 }\n                 res\n             }"}, {"sha": "dbaf4deef14b0f87378ff75e280234cf7cff1efa", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -4,21 +4,25 @@ use std::any::Any;\n \n use hir_expand::diagnostics::Diagnostic;\n use ra_db::RelativePathBuf;\n-use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n+use ra_syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n \n use hir_expand::{HirFileId, InFile};\n \n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub file: HirFileId,\n     pub decl: AstPtr<ast::Module>,\n+    pub highlight_range: TextRange,\n     pub candidate: RelativePathBuf,\n }\n \n impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n+    fn highlight_range(&self) -> TextRange {\n+        self.highlight_range\n+    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.decl.clone().into() }\n     }"}, {"sha": "4a5a93dadeeac952d4ed42723ee15a8e4feccc84", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -297,7 +297,7 @@ pub enum ModuleSource {\n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use ra_db::RelativePathBuf;\n-    use ra_syntax::{ast, AstPtr};\n+    use ra_syntax::{ast, AstNode, AstPtr};\n \n     use crate::{db::DefDatabase, diagnostics::UnresolvedModule, nameres::LocalModuleId, AstId};\n \n@@ -326,6 +326,7 @@ mod diagnostics {\n                     sink.push(UnresolvedModule {\n                         file: declaration.file_id,\n                         decl: AstPtr::new(&decl),\n+                        highlight_range: decl.syntax().text_range(),\n                         candidate: candidate.clone(),\n                     })\n                 }"}, {"sha": "714e700f719dd73ca99639281b504ea337797f69", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -22,10 +22,8 @@ use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n+    fn highlight_range(&self) -> TextRange;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n-    fn highlight_range(&self) -> TextRange {\n-        self.source().value.range()\n-    }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n "}, {"sha": "da85bd082305f98e9b291ee8859d706ace21776c", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -3,7 +3,7 @@\n use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n-use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr, TextRange};\n use stdx::format_to;\n \n pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm};\n@@ -13,13 +13,18 @@ pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n pub struct NoSuchField {\n     pub file: HirFileId,\n     pub field: AstPtr<ast::RecordField>,\n+    pub highlight_range: TextRange,\n }\n \n impl Diagnostic for NoSuchField {\n     fn message(&self) -> String {\n         \"no such field\".to_string()\n     }\n \n+    fn highlight_range(&self) -> TextRange {\n+        self.highlight_range\n+    }\n+\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field.clone().into() }\n     }\n@@ -33,6 +38,7 @@ impl Diagnostic for NoSuchField {\n pub struct MissingFields {\n     pub file: HirFileId,\n     pub field_list: AstPtr<ast::RecordFieldList>,\n+    pub highlight_range: TextRange,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -44,6 +50,10 @@ impl Diagnostic for MissingFields {\n         }\n         buf\n     }\n+    fn highlight_range(&self) -> TextRange {\n+        self.highlight_range\n+    }\n+\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n@@ -66,6 +76,7 @@ impl AstDiagnostic for MissingFields {\n pub struct MissingPatFields {\n     pub file: HirFileId,\n     pub field_list: AstPtr<ast::RecordFieldPatList>,\n+    pub highlight_range: TextRange,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -77,6 +88,9 @@ impl Diagnostic for MissingPatFields {\n         }\n         buf\n     }\n+    fn highlight_range(&self) -> TextRange {\n+        self.highlight_range\n+    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n@@ -90,12 +104,16 @@ pub struct MissingMatchArms {\n     pub file: HirFileId,\n     pub match_expr: AstPtr<ast::Expr>,\n     pub arms: AstPtr<ast::MatchArmList>,\n+    pub highlight_range: TextRange,\n }\n \n impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n+    fn highlight_range(&self) -> TextRange {\n+        self.highlight_range\n+    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n@@ -108,12 +126,16 @@ impl Diagnostic for MissingMatchArms {\n pub struct MissingOkInTailExpr {\n     pub file: HirFileId,\n     pub expr: AstPtr<ast::Expr>,\n+    pub highlight_range: TextRange,\n }\n \n impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n+    fn highlight_range(&self) -> TextRange {\n+        self.highlight_range\n+    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }"}, {"sha": "1d3950b709763727468700da8faeca67713e427b", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -4,7 +4,7 @@ use std::sync::Arc;\n \n use hir_def::{path::path, resolver::HasResolver, AdtId, FunctionId};\n use hir_expand::diagnostics::DiagnosticSink;\n-use ra_syntax::{ast, AstPtr};\n+use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashSet;\n \n use crate::{\n@@ -100,6 +100,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                     self.sink.push(MissingFields {\n                         file: source_ptr.file_id,\n                         field_list: AstPtr::new(&field_list),\n+                        highlight_range: field_list.syntax().text_range(),\n                         missed_fields,\n                     })\n                 }\n@@ -130,6 +131,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                         self.sink.push(MissingPatFields {\n                             file: source_ptr.file_id,\n                             field_list: AstPtr::new(&field_list),\n+                            highlight_range: field_list.syntax().text_range(),\n                             missed_fields,\n                         })\n                     }\n@@ -213,6 +215,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                         file: source_ptr.file_id,\n                         match_expr: AstPtr::new(&match_expr),\n                         arms: AstPtr::new(&arms),\n+                        highlight_range: match_expr.syntax().text_range(),\n                     })\n                 }\n             }\n@@ -244,8 +247,13 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-                self.sink\n-                    .push(MissingOkInTailExpr { file: source_ptr.file_id, expr: source_ptr.value });\n+                let root = source_ptr.file_syntax(db.upcast());\n+                let highlight_range = source_ptr.value.to_node(&root).syntax().text_range();\n+                self.sink.push(MissingOkInTailExpr {\n+                    file: source_ptr.file_id,\n+                    expr: source_ptr.value,\n+                    highlight_range,\n+                });\n             }\n         }\n     }"}, {"sha": "7e6cdefe423ff302537ef7e85154e3a77a4215d0", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "patch": "@@ -665,6 +665,7 @@ impl Expectation {\n mod diagnostics {\n     use hir_def::{expr::ExprId, src::HasSource, FunctionId, Lookup};\n     use hir_expand::diagnostics::DiagnosticSink;\n+    use ra_syntax::AstNode;\n \n     use crate::{db::HirDatabase, diagnostics::NoSuchField};\n \n@@ -682,10 +683,16 @@ mod diagnostics {\n         ) {\n             match self {\n                 InferenceDiagnostic::NoSuchField { expr, field } => {\n-                    let file = owner.lookup(db.upcast()).source(db.upcast()).file_id;\n+                    let source = owner.lookup(db.upcast()).source(db.upcast());\n                     let (_, source_map) = db.body_with_source_map(owner.into());\n                     let field = source_map.field_syntax(*expr, *field);\n-                    sink.push(NoSuchField { file, field })\n+                    let root = field.file_syntax(db.upcast());\n+                    let highlight_range = field.value.to_node(&root).syntax().text_range();\n+                    sink.push(NoSuchField {\n+                        file: source.file_id,\n+                        field: field.value,\n+                        highlight_range,\n+                    })\n                 }\n             }\n         }"}]}