{"sha": "efb576a60dbd12cdd9c732cb5d8b202283b9864a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYjU3NmE2MGRiZDEyY2RkOWM3MzJjYjVkOGIyMDIyODNiOTg2NGE=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-08-29T05:49:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-31T23:20:36Z"}, "message": "jit: Clean rustllvm code, let rustc expose __morestack instead of linking in libmorestack and return _rust_main and call it from rustc", "tree": {"sha": "0edac79bfc3b3c8931c5d2d14a71174590513aed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0edac79bfc3b3c8931c5d2d14a71174590513aed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb576a60dbd12cdd9c732cb5d8b202283b9864a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb576a60dbd12cdd9c732cb5d8b202283b9864a", "html_url": "https://github.com/rust-lang/rust/commit/efb576a60dbd12cdd9c732cb5d8b202283b9864a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb576a60dbd12cdd9c732cb5d8b202283b9864a/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "html_url": "https://github.com/rust-lang/rust/commit/e27b8f7f02a6d9f963aae5823bbe07a962c04e33"}], "stats": {"total": 118, "additions": 80, "deletions": 38}, "files": [{"sha": "622f7d4fa090a757820ba1ebb12a9f02334f9afb", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efb576a60dbd12cdd9c732cb5d8b202283b9864a/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/efb576a60dbd12cdd9c732cb5d8b202283b9864a/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=efb576a60dbd12cdd9c732cb5d8b202283b9864a", "patch": "@@ -23,11 +23,10 @@ RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=rustllvm/$(1)\n ALL_OBJ_FILES += $$(RUSTLLVM_OBJS_OBJS_$(1))\n \n rustllvm/$(1)/$(CFG_RUSTLLVM): $$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n-                               rt/$(1)/arch/$$(HOST_$(1))/libmorestack.a \\\n                           $$(MKFILE_DEPS) $$(RUSTLLVM_DEF_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_C_$(1),$$@,$$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n-\t  $$(CFG_GCCISH_PRE_LIB_FLAGS) $$(LLVM_LIBS_$(1)) rt/$(1)/arch/$$(HOST_$(1))/libmorestack.a \\\n+\t  $$(CFG_GCCISH_PRE_LIB_FLAGS) $$(LLVM_LIBS_$(1)) \\\n           $$(CFG_GCCISH_POST_LIB_FLAGS) \\\n           $$(LLVM_LDFLAGS_$(1)),$$(RUSTLLVM_DEF_$(1)),$$(CFG_RUSTLLVM))\n "}, {"sha": "9632da761cbef595764ebe53a36c35e7bed9f792", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/efb576a60dbd12cdd9c732cb5d8b202283b9864a/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb576a60dbd12cdd9c732cb5d8b202283b9864a/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=efb576a60dbd12cdd9c732cb5d8b202283b9864a", "patch": "@@ -12,7 +12,7 @@ import std::sha1::sha1;\n import syntax::ast;\n import syntax::print::pprust;\n import lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False,\n-        FileType};\n+        PassManagerRef, FileType};\n import metadata::filesearch;\n import syntax::ast_map::{path, path_mod, path_name};\n import io::{Writer, WriterUtil};\n@@ -54,6 +54,57 @@ fn WriteOutputFile(sess:session,\n     }\n }\n \n+#[cfg(stage0)]\n+mod jit {\n+    fn exec(_sess: session,\n+            _pm: PassManagerRef,\n+            _m: ModuleRef,\n+            _opt: c_int,\n+            _stacks: bool) {\n+        fail\n+    }\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+mod jit {\n+    #[nolink]\n+    #[abi = \"rust-intrinsic\"]\n+    extern mod rusti {\n+        fn morestack_addr() -> *();\n+    }\n+\n+    struct Closure {\n+        code: *();\n+        env: *();\n+    }\n+\n+    fn exec(sess: session,\n+            pm: PassManagerRef,\n+            m: ModuleRef,\n+            opt: c_int,\n+            stacks: bool) unsafe {\n+        let ptr = llvm::LLVMRustJIT(rusti::morestack_addr(), pm, m, opt, stacks);\n+\n+        if ptr::is_null(ptr) {\n+            llvm_err(sess, ~\"Could not JIT\");\n+        } else {\n+            let bin = match os::self_exe_path() {\n+                Some(path) => path.to_str(),\n+                _ => ~\"rustc\"\n+            };\n+            let closure = Closure {\n+                code: ptr,\n+                env: ptr::null()\n+            };\n+            let func: fn(~[~str]) = unsafe::transmute(closure);\n+\n+            func(~[bin]);\n+        }\n+    }\n+}\n+\n mod write {\n     fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n@@ -174,12 +225,7 @@ mod write {\n                         });\n                 }*/\n \n-                if !llvm::LLVMRustJIT(pm.llpm,\n-                                      llmod,\n-                                      CodeGenOptLevel,\n-                                      true) {\n-                    llvm_err(sess, ~\"Could not JIT\");\n-                }\n+                jit::exec(sess, pm.llpm, llmod, CodeGenOptLevel, true);\n \n                 if sess.time_llvm_passes() {\n                     llvm::LLVMRustPrintPassTimings();"}, {"sha": "ddce3c9640ef3cb177340c88c87aa50538bd4803", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efb576a60dbd12cdd9c732cb5d8b202283b9864a/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb576a60dbd12cdd9c732cb5d8b202283b9864a/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=efb576a60dbd12cdd9c732cb5d8b202283b9864a", "patch": "@@ -990,10 +990,11 @@ extern mod llvm {\n     fn LLVMRustLoadLibrary(Filename: *c_char) -> bool;\n \n     /** Create and execute the JIT engine. */\n-    fn LLVMRustJIT(PM: PassManagerRef,\n+    fn LLVMRustJIT(__morestack: *(),\n+                   PM: PassManagerRef,\n                    M: ModuleRef,\n                    OptLevel: c_int,\n-                   EnableSegmentedStacks: bool) -> bool;\n+                   EnableSegmentedStacks: bool) -> *();\n \n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemBuf: MemoryBufferRef) -> ModuleRef;"}, {"sha": "6ea433e6f1f053da5f16b43df92cc5fccceea027", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/efb576a60dbd12cdd9c732cb5d8b202283b9864a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/efb576a60dbd12cdd9c732cb5d8b202283b9864a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=efb576a60dbd12cdd9c732cb5d8b202283b9864a", "patch": "@@ -52,9 +52,6 @@\n #include <unistd.h>\n #endif\n \n-// Does this need to be done, or can it be made to resolve from the main program?\n-extern \"C\" void __morestack(void *args, void *fn_ptr, uintptr_t stack_ptr);\n-\n using namespace llvm;\n \n static const char *LLVMRustError;\n@@ -95,11 +92,13 @@ void LLVMInitializeX86AsmParser();\n // that rustllvm doesn't actually link to and it's pointless to put target info\n // into the registry that Rust can not generate machine code for.\n \n-#define INITIALIZE_TARGETS() LLVMInitializeX86TargetInfo(); \\\n-                             LLVMInitializeX86Target(); \\\n-                             LLVMInitializeX86TargetMC(); \\\n-                             LLVMInitializeX86AsmPrinter(); \\\n-                             LLVMInitializeX86AsmParser();\n+void LLVMRustInitializeTargets() {\n+  LLVMInitializeX86TargetInfo();\n+  LLVMInitializeX86Target();\n+  LLVMInitializeX86TargetMC();\n+  LLVMInitializeX86AsmPrinter();\n+  LLVMInitializeX86AsmParser();\n+}\n \n extern \"C\" bool\n LLVMRustLoadLibrary(const char* file) {\n@@ -113,8 +112,6 @@ LLVMRustLoadLibrary(const char* file) {\n   return true;\n }\n \n-ExecutionEngine* EE;\n-\n // Custom memory manager for MCJITting. It needs special features\n // that the generic JIT memory manager doesn't entail. Based on\n // code from LLI, change where needed for Rust.\n@@ -123,8 +120,9 @@ class RustMCJITMemoryManager : public JITMemoryManager {\n   SmallVector<sys::MemoryBlock, 16> AllocatedDataMem;\n   SmallVector<sys::MemoryBlock, 16> AllocatedCodeMem;\n   SmallVector<sys::MemoryBlock, 16> FreeCodeMem;\n+  void* __morestack;\n \n-  RustMCJITMemoryManager() { }\n+  RustMCJITMemoryManager(void* sym) : __morestack(sym) { }\n   ~RustMCJITMemoryManager();\n \n   virtual uint8_t *allocateCodeSection(uintptr_t Size, unsigned Alignment,\n@@ -275,7 +273,7 @@ void *RustMCJITMemoryManager::getPointerToNamedFunction(const std::string &Name,\n   if (Name == \"mknod\") return (void*)(intptr_t)&mknod;\n #endif\n \n-  if (Name == \"__morestack\") return (void*)(intptr_t)&__morestack;\n+  if (Name == \"__morestack\") return &__morestack;\n \n   const char *NameStr = Name.c_str();\n   void *Ptr = sys::DynamicLibrary::SearchForAddressOfSymbol(NameStr);\n@@ -294,13 +292,13 @@ RustMCJITMemoryManager::~RustMCJITMemoryManager() {\n     free(AllocatedDataMem[i].base());\n }\n \n-extern \"C\" bool\n-LLVMRustJIT(LLVMPassManagerRef PMR,\n+extern \"C\" void*\n+LLVMRustJIT(void* __morestack,\n+            LLVMPassManagerRef PMR,\n             LLVMModuleRef M,\n             CodeGenOpt::Level OptLevel,\n             bool EnableSegmentedStacks) {\n \n-  INITIALIZE_TARGETS();\n   InitializeNativeTarget();\n   InitializeNativeTargetAsmPrinter();\n \n@@ -315,39 +313,37 @@ LLVMRustJIT(LLVMPassManagerRef PMR,\n   PM->add(createInstructionCombiningPass());\n   PM->add(createReassociatePass());\n   PM->add(createGVNPass());\n-  PM->add(createPromoteMemoryToRegisterPass());\n   PM->add(createCFGSimplificationPass());\n   PM->add(createFunctionInliningPass());\n+  PM->add(createPromoteMemoryToRegisterPass());\n   PM->run(*unwrap(M));\n \n-  RustMCJITMemoryManager* MM = new RustMCJITMemoryManager();\n-  EE = EngineBuilder(unwrap(M))\n+  RustMCJITMemoryManager* MM = new RustMCJITMemoryManager(__morestack);\n+  ExecutionEngine* EE = EngineBuilder(unwrap(M))\n     .setTargetOptions(Options)\n     .setJITMemoryManager(MM)\n     .setOptLevel(OptLevel)\n     .setUseMCJIT(true)\n+    .setAllocateGVsWithCode(false)\n     .create();\n \n   if(!EE || Err != \"\") {\n     LLVMRustError = Err.c_str();\n-    return false;\n+    return 0;\n   }\n \n   MM->invalidateInstructionCache();\n-  Function* func = EE->FindFunctionNamed(\"main\");\n+  Function* func = EE->FindFunctionNamed(\"_rust_main\");\n \n   if(!func || Err != \"\") {\n     LLVMRustError = Err.c_str();\n-    return false;\n+    return 0;\n   }\n \n-  typedef int (*Entry)(int, int);\n-  Entry entry = (Entry) EE->getPointerToFunction(func);\n-\n+  void* entry = EE->getPointerToFunction(func);\n   assert(entry);\n-  entry(0, 0);\n \n-  return true;\n+  return entry;\n }\n \n extern \"C\" bool\n@@ -359,7 +355,7 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         CodeGenOpt::Level OptLevel,\n \t\t\tbool EnableSegmentedStacks) {\n \n-  INITIALIZE_TARGETS();\n+  LLVMRustInitializeTargets();\n \n   TargetOptions Options;\n   Options.NoFramePointerElim = true;"}]}