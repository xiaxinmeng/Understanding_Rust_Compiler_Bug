{"sha": "1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "node_id": "C_kwDOAAsO6NoAKDFmMTFiNzBjM2JjYmRkMTQ4MWQwMDM0NGNjZjRkYTljZGNhMmE1NzI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-29T08:56:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-01T17:57:09Z"}, "message": "Final fixups", "tree": {"sha": "4578e40052356b05d0cdf18c367a5f229220c4ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4578e40052356b05d0cdf18c367a5f229220c4ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "html_url": "https://github.com/rust-lang/rust/commit/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe1b24736c8390364d8fdfdb35c6611e29eaf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe1b24736c8390364d8fdfdb35c6611e29eaf13", "html_url": "https://github.com/rust-lang/rust/commit/9fe1b24736c8390364d8fdfdb35c6611e29eaf13"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "64eb16fbcaac06c25111c5e21356fd67b58fc484", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "patch": "@@ -37,6 +37,7 @@ use crate::{\n \n // Conventions for configuration keys to preserve maximal extendability without breakage:\n //  - Toggles (be it binary true/false or with more options in-between) should almost always suffix as `_enable`\n+//    This has the benefit of namespaces being extensible, and if the suffix doesn't fit later it can be changed without breakage.\n //  - In general be wary of using the namespace of something verbatim, it prevents us from adding subkeys in the future\n //  - Don't use abbreviations unless really necessary\n //  - foo_command = overrides the subcommand, foo_overrideCommand allows full overwriting, extra args only applies for foo_command\n@@ -58,7 +59,7 @@ config_data! {\n         /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n-        cargo_buildScripts_enable: bool = \"true\",\n+        cargo_buildScripts_enable: bool  = \"true\",\n         /// Advanced option, fully override the command rust-analyzer uses to\n         /// run build scripts and build procedural macros. The command should\n         /// include `--message-format=json` or a similar option.\n@@ -87,7 +88,7 @@ config_data! {\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// List of features to activate. Defaults to\n         /// `#rust-analyzer.cargo.features#`. Set to `\"all\"` to pass `--all-features` to cargo.\n-        checkOnSave_features: Option<CargoFeatures>        = \"null\",\n+        checkOnSave_features: Option<CargoFeatures>      = \"null\",\n         /// Do not activate the `default` feature.\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n         /// Advanced option, fully override the command rust-analyzer uses for\n@@ -215,13 +216,13 @@ config_data! {\n         hover_links_enable: bool = \"true\",\n \n         /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n-        imports_enforceGranularity: bool              = \"false\",\n+        imports_granularity_enforce: bool              = \"false\",\n         /// How imports should be grouped into use statements.\n-        imports_granularity: ImportGranularityDef  = \"\\\"crate\\\"\",\n+        imports_granularity_group: ImportGranularityDef  = \"\\\"crate\\\"\",\n         /// Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n-        imports_group: bool                           = \"true\",\n+        imports_group_enable: bool                           = \"true\",\n         /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n-        imports_mergeIntoGlob: bool           = \"true\",\n+        imports_merge_glob: bool           = \"true\",\n         /// The path structure for newly inserted paths to use.\n         imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n \n@@ -976,20 +977,20 @@ impl Config {\n \n     fn insert_use_config(&self) -> InsertUseConfig {\n         InsertUseConfig {\n-            granularity: match self.data.imports_granularity {\n+            granularity: match self.data.imports_granularity_group {\n                 ImportGranularityDef::Preserve => ImportGranularity::Preserve,\n                 ImportGranularityDef::Item => ImportGranularity::Item,\n                 ImportGranularityDef::Crate => ImportGranularity::Crate,\n                 ImportGranularityDef::Module => ImportGranularity::Module,\n             },\n-            enforce_granularity: self.data.imports_enforceGranularity,\n+            enforce_granularity: self.data.imports_granularity_enforce,\n             prefix_kind: match self.data.imports_prefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n                 ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n                 ImportPrefixDef::BySelf => PrefixKind::BySelf,\n             },\n-            group: self.data.imports_group,\n-            skip_glob_imports: !self.data.imports_mergeIntoGlob,\n+            group: self.data.imports_group_enable,\n+            skip_glob_imports: !self.data.imports_merge_glob,\n         }\n     }\n "}, {"sha": "81bab6fd2d370b4c07bb59bd6ab9e346efd04edf", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "patch": "@@ -288,22 +288,22 @@ Whether to show documentation on hover.\n --\n Use markdown syntax for links in hover.\n --\n-[[rust-analyzer.imports.enforceGranularity]]rust-analyzer.imports.enforceGranularity (default: `false`)::\n+[[rust-analyzer.imports.granularity.enforce]]rust-analyzer.imports.granularity.enforce (default: `false`)::\n +\n --\n Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n --\n-[[rust-analyzer.imports.granularity]]rust-analyzer.imports.granularity (default: `\"crate\"`)::\n+[[rust-analyzer.imports.granularity.group]]rust-analyzer.imports.granularity.group (default: `\"crate\"`)::\n +\n --\n How imports should be grouped into use statements.\n --\n-[[rust-analyzer.imports.group]]rust-analyzer.imports.group (default: `true`)::\n+[[rust-analyzer.imports.group.enable]]rust-analyzer.imports.group.enable (default: `true`)::\n +\n --\n Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n --\n-[[rust-analyzer.imports.mergeIntoGlob]]rust-analyzer.imports.mergeIntoGlob (default: `true`)::\n+[[rust-analyzer.imports.merge.glob]]rust-analyzer.imports.merge.glob (default: `true`)::\n +\n --\n Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`."}, {"sha": "79df7bdf3e4315f9f187ab056346e11c8ce04340", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "patch": "@@ -714,12 +714,12 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.imports.enforceGranularity\": {\n+                \"rust-analyzer.imports.granularity.enforce\": {\n                     \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.imports.granularity\": {\n+                \"rust-analyzer.imports.granularity.group\": {\n                     \"markdownDescription\": \"How imports should be grouped into use statements.\",\n                     \"default\": \"crate\",\n                     \"type\": \"string\",\n@@ -736,12 +736,12 @@\n                         \"Flatten imports so that each has its own use statement.\"\n                     ]\n                 },\n-                \"rust-analyzer.imports.group\": {\n+                \"rust-analyzer.imports.group.enable\": {\n                     \"markdownDescription\": \"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.imports.mergeIntoGlob\": {\n+                \"rust-analyzer.imports.merge.glob\": {\n                     \"markdownDescription\": \"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\",\n                     \"default\": true,\n                     \"type\": \"boolean\""}]}