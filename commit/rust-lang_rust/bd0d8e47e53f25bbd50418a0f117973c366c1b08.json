{"sha": "bd0d8e47e53f25bbd50418a0f117973c366c1b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMGQ4ZTQ3ZTUzZjI1YmJkNTA0MThhMGYxMTc5NzNjMzY2YzFiMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-27T10:35:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-27T10:35:51Z"}, "message": "Auto merge of #22573 - nwin:impl-debug-rwlock-weak, r=Manishearth\n\nImplements `Debug`  for `RwLock` and `arc::Weak` in the same way it is implemented for `rc::Weak` (basically copy & paste).\r\n\r\nThe lack of this implementation prevents the automatic implementation of `Debug` for structs containing members of these types.", "tree": {"sha": "e7d24e6d09c3d9c6c52500cd91290e0674f6714e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d24e6d09c3d9c6c52500cd91290e0674f6714e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd0d8e47e53f25bbd50418a0f117973c366c1b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0d8e47e53f25bbd50418a0f117973c366c1b08", "html_url": "https://github.com/rust-lang/rust/commit/bd0d8e47e53f25bbd50418a0f117973c366c1b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd0d8e47e53f25bbd50418a0f117973c366c1b08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd27985457d4afc7c0a6218e8e1c30fdf359e48c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd27985457d4afc7c0a6218e8e1c30fdf359e48c", "html_url": "https://github.com/rust-lang/rust/commit/bd27985457d4afc7c0a6218e8e1c30fdf359e48c"}, {"sha": "36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "html_url": "https://github.com/rust-lang/rust/commit/36ba96ea3cfef575ddc5eea7754a1b70b50e2080"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "88a3752c88a1d6774b8b288a2a12f2af0e566e61", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd0d8e47e53f25bbd50418a0f117973c366c1b08/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0d8e47e53f25bbd50418a0f117973c366c1b08/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=bd0d8e47e53f25bbd50418a0f117973c366c1b08", "patch": "@@ -139,6 +139,13 @@ pub struct Weak<T> {\n unsafe impl<T: Sync + Send> Send for Weak<T> { }\n unsafe impl<T: Sync + Send> Sync for Weak<T> { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug> fmt::Debug for Weak<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"(Weak)\")\n+    }\n+}\n+\n struct ArcInner<T> {\n     strong: atomic::AtomicUsize,\n     weak: atomic::AtomicUsize,"}, {"sha": "4c3b5d98a3cb172e13673201c2296d49b27f1c54", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd0d8e47e53f25bbd50418a0f117973c366c1b08/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0d8e47e53f25bbd50418a0f117973c366c1b08/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=bd0d8e47e53f25bbd50418a0f117973c366c1b08", "patch": "@@ -15,6 +15,7 @@ use marker;\n use ops::{Deref, DerefMut};\n use sync::poison::{self, TryLockError, TryLockResult, LockResult};\n use sys_common::mutex as sys;\n+use fmt;\n \n /// A mutual exclusion primitive useful for protecting shared data\n ///\n@@ -250,6 +251,19 @@ impl<T: Send> Drop for Mutex<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug + Send + 'static> fmt::Debug for Mutex<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.try_lock() {\n+            Ok(guard) => write!(f, \"Mutex {{ data: {:?} }}\", *guard),\n+            Err(TryLockError::Poisoned(err)) => {\n+                write!(f, \"Mutex {{ data: Poisoned({:?}) }}\", **err.get_ref())\n+            },\n+            Err(TryLockError::WouldBlock) => write!(f, \"Mutex {{ <locked> }}\")\n+        }\n+    }\n+}\n+\n struct Dummy(UnsafeCell<()>);\n unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell { value: () });"}, {"sha": "454c5b4f0cf7b20eb6bca82ca9cc7d9d3a73a89f", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd0d8e47e53f25bbd50418a0f117973c366c1b08/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0d8e47e53f25bbd50418a0f117973c366c1b08/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=bd0d8e47e53f25bbd50418a0f117973c366c1b08", "patch": "@@ -15,6 +15,7 @@ use marker;\n use ops::{Deref, DerefMut};\n use sync::poison::{self, LockResult, TryLockError, TryLockResult};\n use sys_common::rwlock as sys;\n+use fmt;\n \n /// A reader-writer lock\n ///\n@@ -255,6 +256,19 @@ impl<T> Drop for RwLock<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug + Send + Sync> fmt::Debug for RwLock<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.try_read() {\n+            Ok(guard) => write!(f, \"RwLock {{ data: {:?} }}\", *guard),\n+            Err(TryLockError::Poisoned(err)) => {\n+                write!(f, \"RwLock {{ data: Poisoned({:?}) }}\", **err.get_ref())\n+            },\n+            Err(TryLockError::WouldBlock) => write!(f, \"RwLock {{ <locked> }}\")\n+        }\n+    }\n+}\n+\n struct Dummy(UnsafeCell<()>);\n unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell { value: () });"}]}