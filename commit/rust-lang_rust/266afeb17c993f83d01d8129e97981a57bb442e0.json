{"sha": "266afeb17c993f83d01d8129e97981a57bb442e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NmFmZWIxN2M5OTNmODNkMDFkODEyOWU5Nzk4MWE1N2JiNDQyZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-27T23:41:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-27T23:41:23Z"}, "message": "Auto merge of #51859 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #49987 (Add str::split_ascii_whitespace.)\n - #50342 (Document round-off error in `.mod_euc()`-method, see issue #50179)\n - #51658 (Only do sanity check with debug assertions on)\n - #51799 (Lower case some feature gate error messages)\n - #51800 (Add a compiletest header for edition)\n - #51824 (Fix the error reference for LocalKey::try_with)\n - #51842 (Document that Layout::from_size_align does not allow align=0)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9674856da47b18f31a9b7918ce89a6e6163f43c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9674856da47b18f31a9b7918ce89a6e6163f43c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266afeb17c993f83d01d8129e97981a57bb442e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266afeb17c993f83d01d8129e97981a57bb442e0", "html_url": "https://github.com/rust-lang/rust/commit/266afeb17c993f83d01d8129e97981a57bb442e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266afeb17c993f83d01d8129e97981a57bb442e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd494c1f0915da00a63c03454a96d504afe764ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd494c1f0915da00a63c03454a96d504afe764ff", "html_url": "https://github.com/rust-lang/rust/commit/cd494c1f0915da00a63c03454a96d504afe764ff"}, {"sha": "99a0d6bf0e478f7ad0dd06ccf2c4d83da69d3167", "url": "https://api.github.com/repos/rust-lang/rust/commits/99a0d6bf0e478f7ad0dd06ccf2c4d83da69d3167", "html_url": "https://github.com/rust-lang/rust/commit/99a0d6bf0e478f7ad0dd06ccf2c4d83da69d3167"}], "stats": {"total": 338, "additions": 271, "deletions": 67}, "files": [{"sha": "ec9b5eba561060a21efc741df7d0d9867d40796a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -108,6 +108,7 @@\n #![cfg_attr(stage0, feature(repr_transparent))]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n+#![feature(split_ascii_whitespace)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n #![feature(trusted_len)]"}, {"sha": "ec9c39c916c4720badead169b96ad7a321588696", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -78,6 +78,8 @@ pub use core::str::SplitWhitespace;\n pub use core::str::pattern;\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n pub use core::str::EncodeUtf16;\n+#[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n+pub use core::str::SplitAsciiWhitespace;\n \n #[unstable(feature = \"slice_concat_ext\",\n            reason = \"trait should not have to exist\","}, {"sha": "91447e01ad4fabb6932022f22a8bd7f01f83c46f", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -67,6 +67,8 @@ impl Layout {\n     /// or returns `LayoutErr` if either of the following conditions\n     /// are not met:\n     ///\n+    /// * `align` must not be zero,\n+    ///\n     /// * `align` must be a power of two,\n     ///\n     /// * `size`, when rounded up to the nearest multiple of `align`,"}, {"sha": "5ae2f6349e5b7e335846eeafb779c40e7ca106eb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 155, "deletions": 4, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -21,7 +21,7 @@ use char;\n use fmt;\n use iter::{Map, Cloned, FusedIterator, TrustedLen, Filter};\n use iter_private::TrustedRandomAccess;\n-use slice::{self, SliceIndex};\n+use slice::{self, SliceIndex, Split as SliceSplit};\n use mem;\n \n pub mod pattern;\n@@ -2722,7 +2722,10 @@ impl str {\n     /// the original string slice, separated by any amount of whitespace.\n     ///\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n-    /// Core Property `White_Space`.\n+    /// Core Property `White_Space`. If you only want to split on ASCII whitespace\n+    /// instead, use [`split_ascii_whitespace`].\n+    ///\n+    /// [`split_ascii_whitespace`]: #method.split_ascii_whitespace\n     ///\n     /// # Examples\n     ///\n@@ -2756,6 +2759,53 @@ impl str {\n         SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }\n     }\n \n+    /// Split a string slice by ASCII whitespace.\n+    ///\n+    /// The iterator returned will return string slices that are sub-slices of\n+    /// the original string slice, separated by any amount of ASCII whitespace.\n+    ///\n+    /// To split by Unicode `Whitespace` instead, use [`split_whitespace`].\n+    ///\n+    /// [`split_whitespace`]: #method.split_whitespace\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(split_ascii_whitespace)]\n+    /// let mut iter = \"A few words\".split_ascii_whitespace();\n+    ///\n+    /// assert_eq!(Some(\"A\"), iter.next());\n+    /// assert_eq!(Some(\"few\"), iter.next());\n+    /// assert_eq!(Some(\"words\"), iter.next());\n+    ///\n+    /// assert_eq!(None, iter.next());\n+    /// ```\n+    ///\n+    /// All kinds of ASCII whitespace are considered:\n+    ///\n+    /// ```\n+    /// let mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_whitespace();\n+    /// assert_eq!(Some(\"Mary\"), iter.next());\n+    /// assert_eq!(Some(\"had\"), iter.next());\n+    /// assert_eq!(Some(\"a\"), iter.next());\n+    /// assert_eq!(Some(\"little\"), iter.next());\n+    /// assert_eq!(Some(\"lamb\"), iter.next());\n+    ///\n+    /// assert_eq!(None, iter.next());\n+    /// ```\n+    #[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n+    #[inline]\n+    pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace {\n+        let inner = self\n+            .as_bytes()\n+            .split(IsAsciiWhitespace)\n+            .filter(IsNotEmpty)\n+            .map(UnsafeBytesToStr);\n+        SplitAsciiWhitespace { inner }\n+    }\n+\n     /// An iterator over the lines of a string, as string slices.\n     ///\n     /// Lines are ended with either a newline (`\\n`) or a carriage return with\n@@ -3895,6 +3945,20 @@ pub struct SplitWhitespace<'a> {\n     inner: Filter<Split<'a, IsWhitespace>, IsNotEmpty>,\n }\n \n+/// An iterator over the non-ASCII-whitespace substrings of a string,\n+/// separated by any amount of ASCII whitespace.\n+///\n+/// This struct is created by the [`split_ascii_whitespace`] method on [`str`].\n+/// See its documentation for more.\n+///\n+/// [`split_ascii_whitespace`]: ../../std/primitive.str.html#method.split_ascii_whitespace\n+/// [`str`]: ../../std/primitive.str.html\n+#[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n+#[derive(Clone, Debug)]\n+pub struct SplitAsciiWhitespace<'a> {\n+    inner: Map<Filter<SliceSplit<'a, u8, IsAsciiWhitespace>, IsNotEmpty>, UnsafeBytesToStr>,\n+}\n+\n #[derive(Clone)]\n struct IsWhitespace;\n \n@@ -3914,37 +3978,98 @@ impl FnMut<(char, )> for IsWhitespace {\n     }\n }\n \n+#[derive(Clone)]\n+struct IsAsciiWhitespace;\n+\n+impl<'a> FnOnce<(&'a u8, )> for IsAsciiWhitespace {\n+    type Output = bool;\n+\n+    #[inline]\n+    extern \"rust-call\" fn call_once(mut self, arg: (&u8, )) -> bool {\n+        self.call_mut(arg)\n+    }\n+}\n+\n+impl<'a> FnMut<(&'a u8, )> for IsAsciiWhitespace {\n+    #[inline]\n+    extern \"rust-call\" fn call_mut(&mut self, arg: (&u8, )) -> bool {\n+        arg.0.is_ascii_whitespace()\n+    }\n+}\n+\n #[derive(Clone)]\n struct IsNotEmpty;\n \n impl<'a, 'b> FnOnce<(&'a &'b str, )> for IsNotEmpty {\n     type Output = bool;\n \n     #[inline]\n-    extern \"rust-call\" fn call_once(mut self, arg: (&&str, )) -> bool {\n+    extern \"rust-call\" fn call_once(mut self, arg: (&'a &'b str, )) -> bool {\n         self.call_mut(arg)\n     }\n }\n \n impl<'a, 'b> FnMut<(&'a &'b str, )> for IsNotEmpty {\n     #[inline]\n-    extern \"rust-call\" fn call_mut(&mut self, arg: (&&str, )) -> bool {\n+    extern \"rust-call\" fn call_mut(&mut self, arg: (&'a &'b str, )) -> bool {\n+        !arg.0.is_empty()\n+    }\n+}\n+\n+impl<'a, 'b> FnOnce<(&'a &'b [u8], )> for IsNotEmpty {\n+    type Output = bool;\n+\n+    #[inline]\n+    extern \"rust-call\" fn call_once(mut self, arg: (&'a &'b [u8], )) -> bool {\n+        self.call_mut(arg)\n+    }\n+}\n+\n+impl<'a, 'b> FnMut<(&'a &'b [u8], )> for IsNotEmpty {\n+    #[inline]\n+    extern \"rust-call\" fn call_mut(&mut self, arg: (&'a &'b [u8], )) -> bool {\n         !arg.0.is_empty()\n     }\n }\n \n+#[derive(Clone)]\n+struct UnsafeBytesToStr;\n+\n+impl<'a> FnOnce<(&'a [u8], )> for UnsafeBytesToStr {\n+    type Output = &'a str;\n+\n+    #[inline]\n+    extern \"rust-call\" fn call_once(mut self, arg: (&'a [u8], )) -> &'a str {\n+        self.call_mut(arg)\n+    }\n+}\n+\n+impl<'a> FnMut<(&'a [u8], )> for UnsafeBytesToStr {\n+    #[inline]\n+    extern \"rust-call\" fn call_mut(&mut self, arg: (&'a [u8], )) -> &'a str {\n+        unsafe { from_utf8_unchecked(arg.0) }\n+    }\n+}\n+\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> Iterator for SplitWhitespace<'a> {\n     type Item = &'a str;\n \n+    #[inline]\n     fn next(&mut self) -> Option<&'a str> {\n         self.inner.next()\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n }\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n+    #[inline]\n     fn next_back(&mut self) -> Option<&'a str> {\n         self.inner.next_back()\n     }\n@@ -3953,6 +4078,32 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for SplitWhitespace<'a> {}\n \n+#[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n+impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n+    type Item = &'a str;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<&'a str> {\n+        self.inner.next()\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n+impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'a str> {\n+        self.inner.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n+impl<'a> FusedIterator for SplitAsciiWhitespace<'a> {}\n+\n /// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n /// [`u16`]: ../../std/primitive.u16.html"}, {"sha": "24fe96a2b82559313605802cdcba06bd6ea01b34", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -574,6 +574,25 @@ macro_rules! test_float {\n             assert_eq!((-9.0 as $fty).max($nan), -9.0);\n             assert!(($nan as $fty).max($nan).is_nan());\n         }\n+        #[test]\n+        fn mod_euc() {\n+            let a: $fty = 42.0;\n+            assert!($inf.mod_euc(a).is_nan());\n+            assert_eq!(a.mod_euc($inf), a);\n+            assert!(a.mod_euc($nan).is_nan());\n+            assert!($inf.mod_euc($inf).is_nan());\n+            assert!($inf.mod_euc($nan).is_nan());\n+            assert!($nan.mod_euc($inf).is_nan());\n+        }\n+        #[test]\n+        fn div_euc() {\n+            let a: $fty = 42.0;\n+            assert_eq!(a.div_euc($inf), 0.0);\n+            assert!(a.div_euc($nan).is_nan());\n+            assert!($inf.div_euc($inf).is_nan());\n+            assert!($inf.div_euc($nan).is_nan());\n+            assert!($nan.div_euc($inf).is_nan());\n+        }\n     } }\n }\n "}, {"sha": "6d2df4c201813b5dafe62a7f115891af497c8dca", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -124,10 +124,10 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n-                            println!(\"generic_ty: {:#?}\", generic_ty);\n-                            println!(\"substs {:#?}\", substs);\n+                            bug!(\"infinite recursion generic_ty: {:#?}, substs: {:#?}, \\\n+                                  concrete_ty: {:#?}, ty: {:#?}\", generic_ty, substs, concrete_ty,\n+                                  ty);\n                         }\n-                        assert_ne!(concrete_ty, ty, \"infinite recursion\");\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.anon_depth -= 1;\n                         folded_ty"}, {"sha": "8e8340b3ed901b557e23e7111bb54e236060cbc7", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -254,7 +254,14 @@ impl f32 {\n \n     /// Calculates the Euclidean modulo (self mod rhs), which is never negative.\n     ///\n-    /// In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n+    /// In particular, the return value `r` satisfies `0.0 <= r < rhs.abs()` in\n+    /// most cases. However, due to a floating point round-off error it can\n+    /// result in `r == rhs.abs()`, violating the mathematical definition, if\n+    /// `self` is much smaller than `rhs.abs()` in magnitude and `self < 0.0`.\n+    /// This result is not an element of the function's codomain, but it is the\n+    /// closest floating point number in the real numbers and thus fulfills the\n+    /// property `self == self.div_euc(rhs) * rhs + self.mod_euc(rhs)`\n+    /// approximatively.\n     ///\n     /// # Examples\n     ///\n@@ -266,6 +273,8 @@ impl f32 {\n     /// assert_eq!((-a).mod_euc(b), 1.0);\n     /// assert_eq!(a.mod_euc(-b), 3.0);\n     /// assert_eq!((-a).mod_euc(-b), 1.0);\n+    /// // limitation due to round-off error\n+    /// assert!((-std::f32::EPSILON).mod_euc(3.0) != 0.0);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"euclidean_division\", issue = \"49048\")]"}, {"sha": "6880294afcaafd4f41c40f6d0ef448f3b5bd14fd", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -230,7 +230,14 @@ impl f64 {\n \n     /// Calculates the Euclidean modulo (self mod rhs), which is never negative.\n     ///\n-    /// In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n+    /// In particular, the return value `r` satisfies `0.0 <= r < rhs.abs()` in\n+    /// most cases.  However, due to a floating point round-off error it can\n+    /// result in `r == rhs.abs()`, violating the mathematical definition, if\n+    /// `self` is much smaller than `rhs.abs()` in magnitude and `self < 0.0`.\n+    /// This result is not an element of the function's codomain, but it is the\n+    /// closest floating point number in the real numbers and thus fulfills the\n+    /// property `self == self.div_euc(rhs) * rhs + self.mod_euc(rhs)`\n+    /// approximatively.\n     ///\n     /// # Examples\n     ///\n@@ -242,6 +249,8 @@ impl f64 {\n     /// assert_eq!((-a).mod_euc(b), 1.0);\n     /// assert_eq!(a.mod_euc(-b), 3.0);\n     /// assert_eq!((-a).mod_euc(-b), 1.0);\n+    /// // limitation due to round-off error\n+    /// assert!((-std::f64::EPSILON).mod_euc(3.0) != 0.0);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"euclidean_division\", issue = \"49048\")]"}, {"sha": "a170abb2628e521eafaf0f4f4050c813d82bd039", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -276,7 +276,7 @@ impl<T: 'static> LocalKey<T> {\n     ///\n     /// This will lazily initialize the value if this thread has not referenced\n     /// this key yet. If the key has been destroyed (which may happen if this is called\n-    /// in a destructor), this function will return a `ThreadLocalError`.\n+    /// in a destructor), this function will return an [`AccessError`](struct.AccessError.html).\n     ///\n     /// # Panics\n     ///"}, {"sha": "6d55b3de75d2e69090247064b5bf505a4082539b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -1359,17 +1359,17 @@ pub const EXPLAIN_LITERAL_MATCHER: &'static str =\n     \":literal fragment specifier is experimental and subject to change\";\n \n pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n-    \"Unsized tuple coercion is not stable enough for use and is subject to change\";\n+    \"unsized tuple coercion is not stable enough for use and is subject to change\";\n \n pub const EXPLAIN_MACRO_AT_MOST_ONCE_REP: &'static str =\n-    \"Using the `?` macro Kleene operator for \\\"at most one\\\" repetition is unstable\";\n+    \"using the `?` macro Kleene operator for \\\"at most one\\\" repetition is unstable\";\n \n pub const EXPLAIN_MACROS_IN_EXTERN: &'static str =\n-    \"Macro invocations in `extern {}` blocks are experimental.\";\n+    \"macro invocations in `extern {}` blocks are experimental.\";\n \n // mention proc-macros when enabled\n pub const EXPLAIN_PROC_MACROS_IN_EXTERN: &'static str =\n-    \"Macro and proc-macro invocations in `extern {}` blocks are experimental.\";\n+    \"macro and proc-macro invocations in `extern {}` blocks are experimental.\";\n \n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,"}, {"sha": "75d5ac6495ae8dbd24e56cfd21e6c0bf23117110", "filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -26,13 +26,13 @@ fn main() {\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     #[no_output]\n-    //~^ ERROR Macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n     fn some_definitely_unknown_symbol_which_should_be_removed();\n \n     #[nop_attr]\n-    //~^ ERROR Macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n     fn rust_get_test_int() -> isize;\n \n     emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-    //~^ ERROR Macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n }"}, {"sha": "4ba44fa54d8cd79678864fc0a8d4cee4d8169d0f", "filename": "src/test/compile-fail/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: --edition=2015 -Zunstable-options\n+// edition:2015\n \n // tests that editions work with the tyvar warning-turned-error\n "}, {"sha": "c8548ed35b972765fe9b8988213ec1a87915c26b", "filename": "src/test/compile-fail/edition-raw-pointer-method-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: --edition=2018 -Zunstable-options\n+// edition:2018\n \n // tests that editions work with the tyvar warning-turned-error\n "}, {"sha": "b6e273881ccd62636a50a64d95e1314ca4b5d0ed", "filename": "src/test/compile-fail/macros-in-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -34,9 +34,9 @@ fn main() {\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n     emits_nothing!();\n-    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n }"}, {"sha": "e04bb27f43500723d39886c97e8a74507a1df05b", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018 -Zunstable-options\n+// edition:2018\n \n #![feature(extern_absolute_paths)]\n "}, {"sha": "bebf0236bb4d03e7b1f377a0719e8ec94a027927", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018 -Zunstable-options\n+// edition:2018\n \n #![feature(extern_absolute_paths)]\n "}, {"sha": "5906a0719c842cfd1305b49a122db46c627579d1", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018 -Zunstable-options\n+// edition:2018\n \n #![feature(extern_absolute_paths)]\n "}, {"sha": "7111176dbd9af8e68ae6369315487515899d72b8", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/single-segment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:xcrate.rs\n-// compile-flags: --edition=2018 -Zunstable-options\n+// edition:2018\n \n #![feature(crate_in_paths)]\n #![feature(extern_absolute_paths)]"}, {"sha": "8b649f6ef7bbdc548924c8dfcfc840831c6fdfeb", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n "}, {"sha": "69952e9f90af6a4949bd9f8f9da2528356c35a02", "filename": "src/test/run-pass/auxiliary/edition-kw-macro-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n \n #![feature(raw_identifiers)]\n "}, {"sha": "415988586a066f18f379df16afda7dbf54b363a5", "filename": "src/test/run-pass/auxiliary/edition-kw-macro-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(raw_identifiers)]\n "}, {"sha": "73869e63de7c4bfc879ff160230bade1da85bbe3", "filename": "src/test/run-pass/edition-keywords-2015-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2015.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // aux-build:edition-kw-macro-2015.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "0a1c6505854c99cacdf044efed2eed888f0316c3", "filename": "src/test/run-pass/edition-keywords-2015-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // aux-build:edition-kw-macro-2018.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "4c22667d0bf4302e9cf3de452cf3f592c404ea0f", "filename": "src/test/run-pass/edition-keywords-2018-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n // aux-build:edition-kw-macro-2015.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "2a98b904da5dbedb716e7c4e2208bf5eb0343166", "filename": "src/test/run-pass/edition-keywords-2018-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n // aux-build:edition-kw-macro-2018.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "dfa583415f7b64cab475b27d851fbc3b142bc72e", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:xcrate.rs\n-// compile-flags: --edition=2018 -Zunstable-options\n+// edition:2018\n \n #![feature(extern_absolute_paths)]\n "}, {"sha": "6317dc17652cd0b58ababe49baa858ae8190e3c9", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -12,7 +12,8 @@\n //\n // Regression test for #47075.\n \n-// compile-flags: --test --edition=2018 -Zunstable-options\n+// edition:2018\n+// compile-flags: --test\n \n #![feature(extern_absolute_paths)]\n "}, {"sha": "aab4974e2e7a1c9ff6376c19f96ed33f754a4e76", "filename": "src/test/ui/async-fn-multiple-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n "}, {"sha": "69952e9f90af6a4949bd9f8f9da2528356c35a02", "filename": "src/test/ui/auxiliary/edition-kw-macro-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n \n #![feature(raw_identifiers)]\n "}, {"sha": "415988586a066f18f379df16afda7dbf54b363a5", "filename": "src/test/ui/auxiliary/edition-kw-macro-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(raw_identifiers)]\n "}, {"sha": "349ab3e27ad32bf8a149d08371d1d0ecf0939c34", "filename": "src/test/ui/edition-keywords-2015-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // aux-build:edition-kw-macro-2015.rs\n // compile-pass\n "}, {"sha": "08cba2d2908a65c36cd3ce8f2d44a7baf03a464b", "filename": "src/test/ui/edition-keywords-2015-2015-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // aux-build:edition-kw-macro-2015.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "082eb8d89f9f1bb028e1344963218649c4cda01e", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // aux-build:edition-kw-macro-2018.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "337d6be6bbcd88d0ba3101b85a7865a6b650501b", "filename": "src/test/ui/edition-keywords-2015-2018-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // aux-build:edition-kw-macro-2018.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "6e2073e0e494ae1b858459140d373922394e2c2a", "filename": "src/test/ui/edition-keywords-2018-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n // aux-build:edition-kw-macro-2015.rs\n // compile-pass\n "}, {"sha": "713da57f7e2c7f58f50832862ab67a9b37a16eba", "filename": "src/test/ui/edition-keywords-2018-2015-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n // aux-build:edition-kw-macro-2015.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "50db4202e98d3eb477b2f418e359221f56d6c8c5", "filename": "src/test/ui/edition-keywords-2018-2018-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n // aux-build:edition-kw-macro-2018.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "263ec95caa7d6a3d31b5d4ddcd201e644ea644ab", "filename": "src/test/ui/edition-keywords-2018-2018-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n // aux-build:edition-kw-macro-2018.rs\n \n #![feature(raw_identifiers)]"}, {"sha": "5b865e9c1c7cbe21b7c94661012e2f3946b08098", "filename": "src/test/ui/feature-gate-async-await-2015-edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-async-await-2015-edition.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n \n #![feature(futures_api)]\n "}, {"sha": "be34842dea3a68898f1b0705c33c4fc5e70aec22", "filename": "src/test/ui/feature-gate-async-await.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-async-await.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n+\n #![feature(futures_api)]\n \n async fn foo() {} //~ ERROR async fn is unstable"}, {"sha": "79ed5c4d008b13ef1f6c473fa01bed9289b47841", "filename": "src/test/ui/feature-gate-async-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-async-await.stderr?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -1,21 +1,21 @@\n error[E0658]: async fn is unstable (see issue #50547)\n-  --> $DIR/feature-gate-async-await.rs:14:1\n+  --> $DIR/feature-gate-async-await.rs:15:1\n    |\n LL | async fn foo() {} //~ ERROR async fn is unstable\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async blocks are unstable (see issue #50547)\n-  --> $DIR/feature-gate-async-await.rs:17:13\n+  --> $DIR/feature-gate-async-await.rs:18:13\n    |\n LL |     let _ = async {}; //~ ERROR async blocks are unstable\n    |             ^^^^^^^^\n    |\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async closures are unstable (see issue #50547)\n-  --> $DIR/feature-gate-async-await.rs:18:13\n+  --> $DIR/feature-gate-async-await.rs:19:13\n    |\n LL |     let _ = async || {}; //~ ERROR async closures are unstable\n    |             ^^^^^^^^^^^"}, {"sha": "bdce1952a9a2148f2cd0d128aa3658abadd889d1", "filename": "src/test/ui/feature-gate-macro_at_most_once_rep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macro_at_most_once_rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macro_at_most_once_rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro_at_most_once_rep.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -12,7 +12,7 @@\n // gate is not used.\n \n macro_rules! m { ($(a)?) => {} }\n-//~^ ERROR Using the `?` macro Kleene operator for \"at most one\" repetition is unstable\n+//~^ ERROR using the `?` macro Kleene operator for \"at most one\" repetition is unstable\n \n fn main() {\n     m!();"}, {"sha": "9ca71d937f8598dadfd363d0af6e11731b42df55", "filename": "src/test/ui/feature-gate-macro_at_most_once_rep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macro_at_most_once_rep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macro_at_most_once_rep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro_at_most_once_rep.stderr?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: Using the `?` macro Kleene operator for \"at most one\" repetition is unstable (see issue #48075)\n+error[E0658]: using the `?` macro Kleene operator for \"at most one\" repetition is unstable (see issue #48075)\n   --> $DIR/feature-gate-macro_at_most_once_rep.rs:14:20\n    |\n LL | macro_rules! m { ($(a)?) => {} }"}, {"sha": "5271f75b6328cd895de19e060f2abaaff2815838", "filename": "src/test/ui/feature-gate-macros_in_extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -27,9 +27,9 @@ macro_rules! emits_nothing(\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n     emits_nothing!();\n-    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n }"}, {"sha": "748adc390d8bbf3025e911461c388a5ffe7db99c", "filename": "src/test/ui/feature-gate-macros_in_extern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -1,20 +1,20 @@\n-error[E0658]: Macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:29:5\n    |\n LL |     returns_isize!(rust_get_test_int);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: Macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:31:5\n    |\n LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: Macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:33:5\n    |\n LL |     emits_nothing!();"}, {"sha": "8a43e75494d8175c729c448c07c85079a691a353", "filename": "src/test/ui/feature-gate-unsized_tuple_coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _ : &(Send,) = &((),);\n-    //~^ ERROR Unsized tuple coercion is not stable enough\n+    //~^ ERROR unsized tuple coercion is not stable enough\n }"}, {"sha": "08c15855a6a42393cf88b039ea27c072fe310b22", "filename": "src/test/ui/feature-gate-unsized_tuple_coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: Unsized tuple coercion is not stable enough for use and is subject to change (see issue #42877)\n+error[E0658]: unsized tuple coercion is not stable enough for use and is subject to change (see issue #42877)\n   --> $DIR/feature-gate-unsized_tuple_coercion.rs:12:24\n    |\n LL |     let _ : &(Send,) = &((),);"}, {"sha": "c4379b496f8d4fd1a112fa70243099799fab93c6", "filename": "src/test/ui/lint-anon-param-edition.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Flint-anon-param-edition.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Flint-anon-param-edition.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-anon-param-edition.fixed?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -11,7 +11,7 @@\n // tests that the anonymous_parameters lint is warn-by-default on the 2018 edition\n \n // compile-pass\n-// compile-flags: --edition=2018\n+// edition:2018\n // run-rustfix\n \n trait Foo {"}, {"sha": "13eb5dfd816ab0e18860b4ccb9871e9712c99d6e", "filename": "src/test/ui/lint-anon-param-edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Flint-anon-param-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Flint-anon-param-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-anon-param-edition.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -11,7 +11,7 @@\n // tests that the anonymous_parameters lint is warn-by-default on the 2018 edition\n \n // compile-pass\n-// compile-flags: --edition=2018\n+// edition:2018\n // run-rustfix\n \n trait Foo {"}, {"sha": "9cb754167cfe5f1e2a0b213725dc3a548696c3df", "filename": "src/test/ui/no-args-non-move-async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n "}, {"sha": "1dd7fe7f0cb39d5fbdd2414677aef566eb81c3de", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -298,6 +298,10 @@ impl TestProps {\n                     .extend(flags.split_whitespace().map(|s| s.to_owned()));\n             }\n \n+            if let Some(edition) = config.parse_edition(ln) {\n+                self.compile_flags.push(format!(\"--edition={}\", edition));\n+            }\n+\n             if let Some(r) = config.parse_revisions(ln) {\n                 self.revisions.extend(r);\n             }\n@@ -371,9 +375,9 @@ impl TestProps {\n                 self.compile_pass = config.parse_compile_pass(ln) || self.run_pass;\n             }\n \n-                        if !self.skip_codegen {\n-                            self.skip_codegen = config.parse_skip_codegen(ln);\n-                        }\n+            if !self.skip_codegen {\n+                self.skip_codegen = config.parse_skip_codegen(ln);\n+            }\n \n             if !self.disable_ui_testing_normalization {\n                 self.disable_ui_testing_normalization =\n@@ -647,6 +651,10 @@ impl Config {\n     fn parse_run_rustfix(&self, line: &str) -> bool {\n         self.parse_name_directive(line, \"run-rustfix\")\n     }\n+\n+    fn parse_edition(&self, line: &str) -> Option<String> {\n+        self.parse_name_value_directive(line, \"edition\")\n+    }\n }\n \n pub fn lldb_version_to_int(version_string: &str) -> isize {"}, {"sha": "408eda5ba5bb58aa6d19848ac6be270c2a15ee4d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266afeb17c993f83d01d8129e97981a57bb442e0/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=266afeb17c993f83d01d8129e97981a57bb442e0", "patch": "@@ -1368,6 +1368,7 @@ impl<'test> TestCx<'test> {\n             .arg(out_dir)\n             .arg(&self.testpaths.file)\n             .args(&self.props.compile_flags);\n+\n         if let Some(ref linker) = self.config.linker {\n             rustdoc\n                 .arg(\"--linker\")"}]}