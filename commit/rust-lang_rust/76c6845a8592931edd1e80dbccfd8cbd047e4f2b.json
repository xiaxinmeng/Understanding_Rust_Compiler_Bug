{"sha": "76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "node_id": "C_kwDOAAsO6NoAKDc2YzY4NDVhODU5MjkzMWVkZDFlODBkYmNjZmQ4Y2JkMDQ3ZTRmMmI", "commit": {"author": {"name": "Elliot Roberts", "email": "Elliot0000101@gmail.com", "date": "2022-05-31T23:59:28Z"}, "committer": {"name": "Elliot Roberts", "email": "Elliot0000101@gmail.com", "date": "2022-06-04T19:38:55Z"}, "message": "Iterate over `maybe_unused_trait_imports` when checking dead trait imports", "tree": {"sha": "ec5fbf154bd8c65fa19ec853688af85abbf5542f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec5fbf154bd8c65fa19ec853688af85abbf5542f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "html_url": "https://github.com/rust-lang/rust/commit/76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/comments", "author": null, "committer": null, "parents": [{"sha": "6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "html_url": "https://github.com/rust-lang/rust/commit/6f481f8b715c6a26e43a86407e8839d7bf9a62f8"}], "stats": {"total": 74, "additions": 29, "deletions": 45}, "files": [{"sha": "31b27abd0c8a2b5d07748d0cf104f9100e96a2b7", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "patch": "@@ -1728,8 +1728,8 @@ rustc_queries! {\n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }\n     }\n-    query maybe_unused_trait_import(def_id: LocalDefId) -> bool {\n-        desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+    query maybe_unused_trait_imports(_: ()) -> &'tcx FxIndexSet<LocalDefId> {\n+        desc { \"fetching potentially unused trait imports\" }\n     }\n     query maybe_unused_extern_crates(_: ()) -> &'tcx [(LocalDefId, Span)] {\n         desc { \"looking up all possibly unused extern crates\" }"}, {"sha": "4cdeae2f4492c2ed6d058b7f4e3d4ae256be6319", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "patch": "@@ -2886,8 +2886,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n-    providers.maybe_unused_trait_import =\n-        |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);\n+    providers.maybe_unused_trait_imports =\n+        |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.maybe_unused_extern_crates =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];\n     providers.names_imported_by_glob_use = |tcx, id| {"}, {"sha": "3a2d3408b9d9365325e793afd223604ccc90ee2c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "patch": "@@ -28,7 +28,7 @@ pub use generics::*;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n@@ -138,7 +138,7 @@ pub struct ResolverOutputs {\n     pub has_pub_restricted: bool,\n     pub access_levels: AccessLevels,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,"}, {"sha": "59794c4d3f0d83adc9814608ef1017efa5bdd185", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "patch": "@@ -37,7 +37,7 @@ use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, T\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "49c15d2c9ef1f7be31c42a28a41d95c70b921db1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "patch": "@@ -28,7 +28,7 @@ use rustc_ast::node_id::NodeMap;\n use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_ast_lowering::{LifetimeRes, ResolverAstLowering};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -941,7 +941,7 @@ pub struct Resolver<'a> {\n     visibilities: FxHashMap<LocalDefId, ty::Visibility>,\n     has_pub_restricted: bool,\n     used_imports: FxHashSet<NodeId>,\n-    maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n     maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n \n     /// Privacy errors are delayed until the end in order to deduplicate them."}, {"sha": "f28184c74d35548518765421a2f957972b580137", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c6845a8592931edd1e80dbccfd8cbd047e4f2b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=76c6845a8592931edd1e80dbccfd8cbd047e4f2b", "patch": "@@ -16,48 +16,32 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n         used_trait_imports.extend(imports.iter());\n     }\n \n-    for id in tcx.hir().items() {\n-        if matches!(tcx.def_kind(id.def_id), DefKind::Use) {\n-            if tcx.visibility(id.def_id).is_public() {\n-                continue;\n-            }\n-            let item = tcx.hir().item(id);\n-            if item.span.is_dummy() {\n-                continue;\n-            }\n-            if let hir::ItemKind::Use(path, _) = item.kind {\n-                check_import(tcx, &mut used_trait_imports, item.item_id(), path.span);\n-            }\n+    for &id in tcx.maybe_unused_trait_imports(()) {\n+        debug_assert_eq!(tcx.def_kind(id), DefKind::Use);\n+        if tcx.visibility(id).is_public() {\n+            continue;\n+        }\n+        if used_trait_imports.contains(&id) {\n+            continue;\n         }\n+        let item = tcx.hir().expect_item(id);\n+        if item.span.is_dummy() {\n+            continue;\n+        }\n+        let hir::ItemKind::Use(path, _) = item.kind else { unreachable!() };\n+        tcx.struct_span_lint_hir(lint::builtin::UNUSED_IMPORTS, item.hir_id(), path.span, |lint| {\n+            let msg = if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(path.span) {\n+                format!(\"unused import: `{}`\", snippet)\n+            } else {\n+                \"unused import\".to_owned()\n+            };\n+            lint.build(&msg).emit();\n+        });\n     }\n \n     unused_crates_lint(tcx);\n }\n \n-fn check_import<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    used_trait_imports: &mut FxHashSet<LocalDefId>,\n-    item_id: hir::ItemId,\n-    span: Span,\n-) {\n-    if !tcx.maybe_unused_trait_import(item_id.def_id) {\n-        return;\n-    }\n-\n-    if used_trait_imports.contains(&item_id.def_id) {\n-        return;\n-    }\n-\n-    tcx.struct_span_lint_hir(lint::builtin::UNUSED_IMPORTS, item_id.hir_id(), span, |lint| {\n-        let msg = if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n-            format!(\"unused import: `{}`\", snippet)\n-        } else {\n-            \"unused import\".to_owned()\n-        };\n-        lint.build(&msg).emit();\n-    });\n-}\n-\n fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n "}]}