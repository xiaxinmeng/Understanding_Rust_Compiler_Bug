{"sha": "38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "node_id": "C_kwDOAAsO6NoAKDM4ZDgxNjdkMmU5ODJiZjBhZDhkMjRhYTk5NGFkNGFkY2EwZjYwMjA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-31T05:57:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-31T05:57:34Z"}, "message": "Rollup merge of #97371 - ChayimFriedman2:closure-non-block-add-semicolon, r=oli-obk\n\nSuggest adding a semicolon to a closure without block\n\nThis transforms `|| expr` into `|| { expr; }`.\n\nCloses #97359.", "tree": {"sha": "d8bbf342c075265f0184def79dcdc005c6bddea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8bbf342c075265f0184def79dcdc005c6bddea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJila5OCRBK7hj4Ov3rIwAA7RAIAEFSZ37Mkerj/SxMJnuRZyI0\ntzSt4Hd4OC4ZkD8bXdIKcgFn3ZsiLiSVouIeam+kSQykJwx0wISzYqKIWTuvdGWb\nO8f3nwEhc99T4whKeOqeQ/di7Sc+VXIn5RrD+zgEN6abHSu5/JMGweaVXGKO44ZR\nneROSoHF2Y6nmRIaF7NNBpouX3dKjceda8ISBbues59evBguaYZJyNd+9l5Ca/42\nWH2oVT+v6+fHEtp9nFab3L8vFC1x3H15A8nofysAaWW5LRQP2clfftXcZ+72b/a5\njzBi4YqzyrRbm+SXQj+QtzNDyRhoXYV8qBja3BrWeOYpovnTVMTrVIXTsCTHo+M=\n=lX/n\n-----END PGP SIGNATURE-----\n", "payload": "tree d8bbf342c075265f0184def79dcdc005c6bddea8\nparent 9c72f16b9f4c9bdc1825be53c93e1425e9ca9763\nparent 6afaffb9c2a9e84858e552286858584bd328413e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653976654 +0200\ncommitter GitHub <noreply@github.com> 1653976654 +0200\n\nRollup merge of #97371 - ChayimFriedman2:closure-non-block-add-semicolon, r=oli-obk\n\nSuggest adding a semicolon to a closure without block\n\nThis transforms `|| expr` into `|| { expr; }`.\n\nCloses #97359.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "html_url": "https://github.com/rust-lang/rust/commit/38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c72f16b9f4c9bdc1825be53c93e1425e9ca9763", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c72f16b9f4c9bdc1825be53c93e1425e9ca9763", "html_url": "https://github.com/rust-lang/rust/commit/9c72f16b9f4c9bdc1825be53c93e1425e9ca9763"}, {"sha": "6afaffb9c2a9e84858e552286858584bd328413e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afaffb9c2a9e84858e552286858584bd328413e", "html_url": "https://github.com/rust-lang/rust/commit/6afaffb9c2a9e84858e552286858584bd328413e"}], "stats": {"total": 94, "additions": 72, "deletions": 22}, "files": [{"sha": "d6a8659d54b58dd0a52f2531a5853682c84f6eb2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "patch": "@@ -1500,7 +1500,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             coercion_error.clone(),\n                             fcx,\n                             parent_id,\n-                            expression.map(|expr| (expr, blk_id)),\n+                            expression,\n+                            Some(blk_id),\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n                             unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n@@ -1514,6 +1515,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             coercion_error.clone(),\n                             fcx,\n                             id,\n+                            expression,\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n@@ -1564,21 +1566,28 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         ty_err: TypeError<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n-        expression: Option<(&'tcx hir::Expr<'tcx>, hir::HirId)>,\n+        expression: Option<&'tcx hir::Expr<'tcx>>,\n+        blk_id: Option<hir::HirId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;\n         let mut fn_output = None;\n \n+        let parent_id = fcx.tcx.hir().get_parent_node(id);\n+        let parent = fcx.tcx.hir().get(parent_id);\n+        if let Some(expr) = expression\n+            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, _, body_id, ..), .. }) = parent\n+            && !matches!(fcx.tcx.hir().get(body_id.hir_id), hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Block(..), .. }))\n+        {\n+            fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n+        }\n         // Verify that this is a tail expression of a function, otherwise the\n         // label pointing out the cause for the type coercion will be wrong\n         // as prior return coercions would not be relevant (#57664).\n-        let parent_id = fcx.tcx.hir().get_parent_node(id);\n-        let fn_decl = if let Some((expr, blk_id)) = expression {\n+        let fn_decl = if let (Some(expr), Some(blk_id)) = (expression, blk_id) {\n             pointing_at_return_type =\n                 fcx.suggest_mismatched_types_on_tail(&mut err, expr, expected, found, blk_id);\n-            let parent = fcx.tcx.hir().get(parent_id);\n             if let (Some(cond_expr), true, false) = (\n                 fcx.tcx.hir().get_if_cause(expr.hir_id),\n                 expected.is_unit(),\n@@ -1607,7 +1616,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         };\n \n         if let Some((fn_decl, can_suggest)) = fn_decl {\n-            if expression.is_none() {\n+            if blk_id.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n                     &fn_decl,\n@@ -1625,8 +1634,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n         let parent_item = fcx.tcx.hir().get_by_def_id(parent_id);\n \n-        if let (Some((expr, _)), Some((fn_decl, _, _))) =\n-            (expression, fcx.get_node_fn_decl(parent_item))\n+        if let (Some(expr), Some(_), Some((fn_decl, _, _))) =\n+            (expression, blk_id, fcx.get_node_fn_decl(parent_item))\n         {\n             fcx.suggest_missing_break_or_return_expr(\n                 &mut err,"}, {"sha": "76add2fb9c2859588531f53b16ef61706007fa43", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "patch": "@@ -46,12 +46,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        // If the expression is from an external macro, then do not suggest\n-        // adding a semicolon, because there's nowhere to put it.\n-        // See issue #81943.\n-        if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, expr.span) {\n-            self.suggest_missing_semicolon(err, expr, expected);\n-        }\n+        self.suggest_missing_semicolon(err, expr, expected, false);\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n@@ -473,11 +468,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// This routine checks if the return expression in a block would make sense on its own as a\n     /// statement and the return type has been left as default or has been specified as `()`. If so,\n     /// it suggests adding a semicolon.\n-    fn suggest_missing_semicolon(\n+    ///\n+    /// If the expression is the expression of a closure without block (`|| expr`), a\n+    /// block is needed to be added too (`|| { expr; }`). This is denoted by `needs_block`.\n+    pub fn suggest_missing_semicolon(\n         &self,\n         err: &mut Diagnostic,\n         expression: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n+        needs_block: bool,\n     ) {\n         if expected.is_unit() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n@@ -489,14 +488,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..)\n-                    if expression.can_have_side_effects() =>\n+                    if expression.can_have_side_effects()\n+                        // If the expression is from an external macro, then do not suggest\n+                        // adding a semicolon, because there's nowhere to put it.\n+                        // See issue #81943.\n+                        && !in_external_macro(self.tcx.sess, expression.span) =>\n                 {\n-                    err.span_suggestion(\n-                        expression.span.shrink_to_hi(),\n-                        \"consider using a semicolon here\",\n-                        \";\".to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if needs_block {\n+                        err.multipart_suggestion(\n+                            \"consider using a semicolon here\",\n+                            vec![\n+                                (expression.span.shrink_to_lo(), \"{ \".to_owned()),\n+                                (expression.span.shrink_to_hi(), \"; }\".to_owned()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_suggestion(\n+                            expression.span.shrink_to_hi(),\n+                            \"consider using a semicolon here\",\n+                            \";\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n                 _ => (),\n             }"}, {"sha": "3ae91be60c5a062eebf426cb7c526d44db5edd93", "filename": "src/test/ui/closures/add_semicolon_non_block_closure.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs?ref=38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "patch": "@@ -0,0 +1,11 @@\n+fn foo(_f: impl Fn()) {}\n+\n+fn bar() -> i32 {\n+    1\n+}\n+\n+fn main() {\n+    foo(|| bar())\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider using a semicolon here\n+}"}, {"sha": "ed829fc98f86fc60c503be9696d45e605d8e6e98", "filename": "src/test/ui/closures/add_semicolon_non_block_closure.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d8167d2e982bf0ad8d24aa994ad4adca0f6020/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr?ref=38d8167d2e982bf0ad8d24aa994ad4adca0f6020", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/add_semicolon_non_block_closure.rs:8:12\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+LL |     foo(|| bar())\n+   |            ^^^^^ expected `()`, found `i32`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |     foo(|| { bar(); })\n+   |            +      +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}