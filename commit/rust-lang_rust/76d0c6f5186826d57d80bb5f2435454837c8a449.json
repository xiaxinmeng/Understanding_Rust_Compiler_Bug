{"sha": "76d0c6f5186826d57d80bb5f2435454837c8a449", "node_id": "C_kwDOAAsO6NoAKDc2ZDBjNmY1MTg2ODI2ZDU3ZDgwYmI1ZjI0MzU0NTQ4MzdjOGE0NDk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-11T08:50:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-11T22:02:38Z"}, "message": "Inline and remove `msg_span_from_early_bound_and_free_regions`.\n\nFor similar reasons to the previous commit.", "tree": {"sha": "8d204200eb3830a54f7e46d4aa08b87c12318ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d204200eb3830a54f7e46d4aa08b87c12318ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d0c6f5186826d57d80bb5f2435454837c8a449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d0c6f5186826d57d80bb5f2435454837c8a449", "html_url": "https://github.com/rust-lang/rust/commit/76d0c6f5186826d57d80bb5f2435454837c8a449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d0c6f5186826d57d80bb5f2435454837c8a449/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877777f5bc0d02d409bbc6d68d8a7de8529254be", "url": "https://api.github.com/repos/rust-lang/rust/commits/877777f5bc0d02d409bbc6d68d8a7de8529254be", "html_url": "https://github.com/rust-lang/rust/commit/877777f5bc0d02d409bbc6d68d8a7de8529254be"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "b68ffaed69dab8f7325a85ae2e725bd372773f1f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 32, "deletions": 42, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/76d0c6f5186826d57d80bb5f2435454837c8a449/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d0c6f5186826d57d80bb5f2435454837c8a449/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=76d0c6f5186826d57d80bb5f2435454837c8a449", "patch": "@@ -184,84 +184,74 @@ fn msg_span_from_named_region<'tcx>(\n     region: ty::Region<'tcx>,\n     alt_span: Option<Span>,\n ) -> (String, Option<Span>) {\n-    match *region {\n-        ty::ReEarlyBound(_) | ty::ReFree(_) => {\n-            let (msg, span) = msg_span_from_early_bound_and_free_regions(tcx, region);\n-            (msg, Some(span))\n-        }\n-        ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n-        ty::RePlaceholder(ty::PlaceholderRegion {\n-            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrNamed(def_id, name), .. },\n-            ..\n-        }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n-        ty::RePlaceholder(ty::PlaceholderRegion {\n-            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(Some(span)), .. },\n-            ..\n-        }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n-        ty::RePlaceholder(ty::PlaceholderRegion {\n-            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(None), .. },\n-            ..\n-        }) => (format!(\"an anonymous lifetime\"), None),\n-        _ => bug!(\"{:?}\", region),\n-    }\n-}\n-\n-fn msg_span_from_early_bound_and_free_regions<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    region: ty::Region<'tcx>,\n-) -> (String, Span) {\n-    let scope = region.free_region_binding_scope(tcx).expect_local();\n     match *region {\n         ty::ReEarlyBound(ref br) => {\n-            let mut sp = tcx.def_span(scope);\n-            if let Some(param) =\n+            let scope = region.free_region_binding_scope(tcx).expect_local();\n+            let span = if let Some(param) =\n                 tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(br.name))\n             {\n-                sp = param.span;\n-            }\n+                param.span\n+            } else {\n+                tcx.def_span(scope)\n+            };\n             let text = if br.has_name() {\n                 format!(\"the lifetime `{}` as defined here\", br.name)\n             } else {\n                 \"the anonymous lifetime as defined here\".to_string()\n             };\n-            (text, sp)\n+            (text, Some(span))\n         }\n         ty::ReFree(ref fr) => {\n             if !fr.bound_region.is_named()\n                 && let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region)\n             {\n-                (\"the anonymous lifetime defined here\".to_string(), ty.span)\n+                (\"the anonymous lifetime defined here\".to_string(), Some(ty.span))\n             } else {\n+                let scope = region.free_region_binding_scope(tcx).expect_local();\n                 match fr.bound_region {\n                     ty::BoundRegionKind::BrNamed(_, name) => {\n-                        let mut sp = tcx.def_span(scope);\n-                        if let Some(param) =\n+                        let span = if let Some(param) =\n                             tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(name))\n                         {\n-                            sp = param.span;\n-                        }\n+                            param.span\n+                        } else {\n+                            tcx.def_span(scope)\n+                        };\n                         let text = if name == kw::UnderscoreLifetime {\n                             \"the anonymous lifetime as defined here\".to_string()\n                         } else {\n                             format!(\"the lifetime `{}` as defined here\", name)\n                         };\n-                        (text, sp)\n+                        (text, Some(span))\n                     }\n                     ty::BrAnon(span) => (\n                         \"the anonymous lifetime as defined here\".to_string(),\n-                        match span {\n+                        Some(match span {\n                             Some(span) => span,\n                             None => tcx.def_span(scope)\n-                        }\n+                        })\n                     ),\n                     _ => (\n                         format!(\"the lifetime `{}` as defined here\", region),\n-                        tcx.def_span(scope),\n+                        Some(tcx.def_span(scope)),\n                     ),\n                 }\n             }\n         }\n-        _ => bug!(),\n+        ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrNamed(def_id, name), .. },\n+            ..\n+        }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(Some(span)), .. },\n+            ..\n+        }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(None), .. },\n+            ..\n+        }) => (format!(\"an anonymous lifetime\"), None),\n+        _ => bug!(\"{:?}\", region),\n     }\n }\n "}]}