{"sha": "59707c57488eac0766a2e28525a70d6801edf1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzA3YzU3NDg4ZWFjMDc2NmEyZTI4NTI1YTcwZDY4MDFlZGYxYTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-06T22:16:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T22:16:01Z"}, "message": "Rollup merge of #77400 - alarsyo:xpy-setup-suggestions, r=jyn514\n\nFix suggestions for x.py setup\n\n#76631 introduced a new `setup` command to x.py\n\nBy default the command prompts for a profile to use:\n\n```\nWelcome to the Rust project! What do you want to do with x.py?\na) Contribute to the standard library\nb) Contribute to the compiler\nc) Contribute to the compiler, and also modify LLVM or codegen\nd) Install Rust from source\n```\n\nand then displays command suggestions, depending on which profile was chosen. However [the mapping between chosen profile](https://github.com/rust-lang/rust/blob/9cba260df0f1c67ea3690035cd5611a7465a1560/src/bootstrap/setup.rs#L75-L85) and [suggestion](https://github.com/rust-lang/rust/blob/9cba260df0f1c67ea3690035cd5611a7465a1560/src/bootstrap/setup.rs#L42-L47) isn't exact, leading to suggestions not being shown if the user presses `c` or `d`. (because \"c\" is translated to \"llvm\" and \"d\" to \"maintainer\", but suggestions trigger for \"codegen\" and \"user\" respectively)\n\nA more thorough refactor would stop using \"strings-as-type\" to make sure this kind of error doesn't happen, but it may be overkill for that kind of \"script\" program?\n\nTagging the setup command author: @jyn514", "tree": {"sha": "b576842f75f5e2c75d04d6cff85aa58dfd5881ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b576842f75f5e2c75d04d6cff85aa58dfd5881ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59707c57488eac0766a2e28525a70d6801edf1a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffOyiCRBK7hj4Ov3rIwAAdHIIABVQBkaNPe9WdkfgPEj79aNb\n1Mu0VNAvByguGmrIiX13dkHKwLJgy7Wv7Y0BXYcHCvImkD8K3lrRk9RRYBLPeI24\nNKisYickzfwAocgb8vw2PsM0D1QIwRzIegmpeEeYlYqkv0xVKjOfm0Lhq9Hg8RFW\nVJr+kSk2GJx/bpGbWwShWDKZDvXtuVKD5o4j5C76N8xZdrMVNhouWkJeXHwH92nA\nar+wFMP92h6oNjMmE8yT1OIIWRVZ8YmY+/u1FqqHdc8Z7BcTLR7QFChjiepjHx4D\n5HzBG1TMY2TIxp/o4T23jNlo+v3vfWFupp0P2lMJAMa4wXkHJp1SJPtXjrv6HBU=\n=I7fN\n-----END PGP SIGNATURE-----\n", "payload": "tree b576842f75f5e2c75d04d6cff85aa58dfd5881ff\nparent 5ae45ea4e29e2e381ca2ced503a7aac3262f24d7\nparent d67a7e6cfc86352ffdd1098d66831675736677dc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602022561 +0200\ncommitter GitHub <noreply@github.com> 1602022561 +0200\n\nRollup merge of #77400 - alarsyo:xpy-setup-suggestions, r=jyn514\n\nFix suggestions for x.py setup\n\n#76631 introduced a new `setup` command to x.py\n\nBy default the command prompts for a profile to use:\n\n```\nWelcome to the Rust project! What do you want to do with x.py?\na) Contribute to the standard library\nb) Contribute to the compiler\nc) Contribute to the compiler, and also modify LLVM or codegen\nd) Install Rust from source\n```\n\nand then displays command suggestions, depending on which profile was chosen. However [the mapping between chosen profile](https://github.com/rust-lang/rust/blob/9cba260df0f1c67ea3690035cd5611a7465a1560/src/bootstrap/setup.rs#L75-L85) and [suggestion](https://github.com/rust-lang/rust/blob/9cba260df0f1c67ea3690035cd5611a7465a1560/src/bootstrap/setup.rs#L42-L47) isn't exact, leading to suggestions not being shown if the user presses `c` or `d`. (because \"c\" is translated to \"llvm\" and \"d\" to \"maintainer\", but suggestions trigger for \"codegen\" and \"user\" respectively)\n\nA more thorough refactor would stop using \"strings-as-type\" to make sure this kind of error doesn't happen, but it may be overkill for that kind of \"script\" program?\n\nTagging the setup command author: @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59707c57488eac0766a2e28525a70d6801edf1a7", "html_url": "https://github.com/rust-lang/rust/commit/59707c57488eac0766a2e28525a70d6801edf1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59707c57488eac0766a2e28525a70d6801edf1a7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae45ea4e29e2e381ca2ced503a7aac3262f24d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae45ea4e29e2e381ca2ced503a7aac3262f24d7", "html_url": "https://github.com/rust-lang/rust/commit/5ae45ea4e29e2e381ca2ced503a7aac3262f24d7"}, {"sha": "d67a7e6cfc86352ffdd1098d66831675736677dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67a7e6cfc86352ffdd1098d66831675736677dc", "html_url": "https://github.com/rust-lang/rust/commit/d67a7e6cfc86352ffdd1098d66831675736677dc"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "f806e40aa8bd2373ecc05c92888809ff9678b9c9", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/59707c57488eac0766a2e28525a70d6801edf1a7/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59707c57488eac0766a2e28525a70d6801edf1a7/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=59707c57488eac0766a2e28525a70d6801edf1a7", "patch": "@@ -12,6 +12,7 @@ use getopts::Options;\n \n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n+use crate::setup::Profile;\n use crate::{Build, DocTests};\n \n /// Deserialized version of all flags for this compile.\n@@ -94,7 +95,7 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Setup {\n-        path: String,\n+        profile: Profile,\n     },\n }\n \n@@ -533,18 +534,26 @@ Arguments:\n                 Subcommand::Run { paths }\n             }\n             \"setup\" => {\n-                let path = if paths.len() > 1 {\n+                let profile = if paths.len() > 1 {\n                     println!(\"\\nat most one profile can be passed to setup\\n\");\n                     usage(1, &opts, verbose, &subcommand_help)\n                 } else if let Some(path) = paths.pop() {\n-                    t!(path.into_os_string().into_string().map_err(|path| format!(\n-                        \"{} is not a valid UTF8 string\",\n-                        path.to_string_lossy()\n-                    )))\n+                    let profile_string = t!(path.into_os_string().into_string().map_err(\n+                        |path| format!(\"{} is not a valid UTF8 string\", path.to_string_lossy())\n+                    ));\n+\n+                    profile_string.parse().unwrap_or_else(|err| {\n+                        eprintln!(\"error: {}\", err);\n+                        eprintln!(\"help: the available profiles are:\");\n+                        for choice in Profile::all() {\n+                            eprintln!(\"- {}\", choice);\n+                        }\n+                        std::process::exit(1);\n+                    })\n                 } else {\n                     t!(crate::setup::interactive_path())\n                 };\n-                Subcommand::Setup { path }\n+                Subcommand::Setup { profile }\n             }\n             _ => {\n                 usage(1, &opts, verbose, &subcommand_help);"}, {"sha": "147bcf30709f9ce8989f0fe71837ab60ac53ebd3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59707c57488eac0766a2e28525a70d6801edf1a7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59707c57488eac0766a2e28525a70d6801edf1a7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=59707c57488eac0766a2e28525a70d6801edf1a7", "patch": "@@ -471,8 +471,8 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n-        if let Subcommand::Setup { path: include_name } = &self.config.cmd {\n-            return setup::setup(&self.config.src, include_name);\n+        if let Subcommand::Setup { profile } = &self.config.cmd {\n+            return setup::setup(&self.config.src, *profile);\n         }\n \n         {"}, {"sha": "dcfb9fd673421f6b6ebe21fe4d1242e70f470095", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 63, "deletions": 29, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/59707c57488eac0766a2e28525a70d6801edf1a7/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59707c57488eac0766a2e28525a70d6801edf1a7/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=59707c57488eac0766a2e28525a70d6801edf1a7", "patch": "@@ -1,11 +1,55 @@\n use crate::t;\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n use std::{\n-    env, fs,\n+    env, fmt, fs,\n     io::{self, Write},\n };\n \n-pub fn setup(src_path: &Path, include_name: &str) {\n+#[derive(Clone, Copy, Eq, PartialEq)]\n+pub enum Profile {\n+    Compiler,\n+    Codegen,\n+    Library,\n+    User,\n+}\n+\n+impl Profile {\n+    fn include_path(&self, src_path: &Path) -> PathBuf {\n+        PathBuf::from(format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), self))\n+    }\n+\n+    pub fn all() -> impl Iterator<Item = Self> {\n+        [Profile::Compiler, Profile::Codegen, Profile::Library, Profile::User].iter().copied()\n+    }\n+}\n+\n+impl FromStr for Profile {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"a\" | \"lib\" | \"library\" => Ok(Profile::Library),\n+            \"b\" | \"compiler\" => Ok(Profile::Compiler),\n+            \"c\" | \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n+            \"d\" | \"maintainer\" | \"user\" => Ok(Profile::User),\n+            _ => Err(format!(\"unknown profile: '{}'\", s)),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Profile {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Profile::Compiler => write!(f, \"compiler\"),\n+            Profile::Codegen => write!(f, \"codegen\"),\n+            Profile::Library => write!(f, \"library\"),\n+            Profile::User => write!(f, \"user\"),\n+        }\n+    }\n+}\n+\n+pub fn setup(src_path: &Path, profile: Profile) {\n     let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n \n     if cfg_file.as_ref().map_or(false, |f| f.exists()) {\n@@ -14,15 +58,10 @@ pub fn setup(src_path: &Path, include_name: &str) {\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n             file.display()\n         );\n+        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, file.display());\n         println!(\n-            \"help: try adding `profile = \\\"{}\\\"` at the top of {}\",\n-            include_name,\n-            file.display()\n-        );\n-        println!(\n-            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.{}.toml\",\n-            src_path.display(),\n-            include_name\n+            \"note: this will use the configuration in {}\",\n+            profile.include_path(src_path).display()\n         );\n         std::process::exit(1);\n     }\n@@ -31,19 +70,17 @@ pub fn setup(src_path: &Path, include_name: &str) {\n     let settings = format!(\n         \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n     profile = \\\"{}\\\"\\n\",\n-        include_name\n+        profile\n     );\n     t!(fs::write(path, settings));\n \n-    let include_path =\n-        format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), include_name);\n-    println!(\"`x.py` will now use the configuration at {}\", include_path);\n+    let include_path = profile.include_path(src_path);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n-    let suggestions = match include_name {\n-        \"codegen\" | \"compiler\" => &[\"check\", \"build\", \"test\"][..],\n-        \"library\" => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n-        \"user\" => &[\"dist\", \"build\"],\n-        _ => return,\n+    let suggestions = match profile {\n+        Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n+        Profile::Library => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n+        Profile::User => &[\"dist\", \"build\"],\n     };\n \n     println!();\n@@ -57,15 +94,15 @@ pub fn setup(src_path: &Path, include_name: &str) {\n         println!(\"- `x.py {}`\", cmd);\n     }\n \n-    if include_name != \"user\" {\n+    if profile != Profile::User {\n         println!(\n             \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n         );\n     }\n }\n \n // Used to get the path for `Subcommand::Setup`\n-pub fn interactive_path() -> io::Result<String> {\n+pub fn interactive_path() -> io::Result<Profile> {\n     let mut input = String::new();\n     println!(\n         \"Welcome to the Rust project! What do you want to do with x.py?\n@@ -78,19 +115,16 @@ d) Install Rust from source\"\n         print!(\"Please choose one (a/b/c/d): \");\n         io::stdout().flush()?;\n         io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().as_str() {\n-            \"a\" | \"lib\" | \"library\" => \"library\",\n-            \"b\" | \"compiler\" => \"compiler\",\n-            \"c\" | \"llvm\" => \"llvm\",\n-            \"d\" | \"user\" | \"maintainer\" => \"maintainer\",\n-            _ => {\n-                println!(\"error: unrecognized option '{}'\", input.trim());\n+        break match input.trim().to_lowercase().parse() {\n+            Ok(profile) => profile,\n+            Err(err) => {\n+                println!(\"error: {}\", err);\n                 println!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n     };\n-    Ok(template.to_owned())\n+    Ok(template)\n }\n \n // install a git hook to automatically run tidy --bless, if they want"}]}