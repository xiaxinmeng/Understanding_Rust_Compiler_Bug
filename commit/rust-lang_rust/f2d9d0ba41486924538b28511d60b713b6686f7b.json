{"sha": "f2d9d0ba41486924538b28511d60b713b6686f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZDlkMGJhNDE0ODY5MjQ1MzhiMjg1MTFkNjBiNzEzYjY2ODZmN2I=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-10T23:31:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-10T23:31:39Z"}, "message": "Make all remaining moves explicit in libcore", "tree": {"sha": "0ca0be4c1e6ce759aec31d2a5b2628f8b185cd35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ca0be4c1e6ce759aec31d2a5b2628f8b185cd35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d9d0ba41486924538b28511d60b713b6686f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9d0ba41486924538b28511d60b713b6686f7b", "html_url": "https://github.com/rust-lang/rust/commit/f2d9d0ba41486924538b28511d60b713b6686f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9d0ba41486924538b28511d60b713b6686f7b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "url": "https://api.github.com/repos/rust-lang/rust/commits/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "html_url": "https://github.com/rust-lang/rust/commit/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "dd332fd863360f3c902a09ef236414684e464c71", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -88,35 +88,35 @@ mod ct {\n         let lim = str::len(s);\n         let mut buf = ~\"\";\n         fn flush_buf(+buf: ~str, &pieces: ~[piece]) -> ~str {\n-            if str::len(buf) > 0u {\n-                let piece = piece_string(buf);\n-                vec::push(pieces, piece);\n+            if str::len(buf) > 0 {\n+                let piece = piece_string(move buf);\n+                vec::push(pieces, move piece);\n             }\n             return ~\"\";\n         }\n-        let mut i = 0u;\n+        let mut i = 0;\n         while i < lim {\n             let size = str::utf8_char_width(s[i]);\n             let curr = str::slice(s, i, i+size);\n             if curr == ~\"%\" {\n-                i += 1u;\n+                i += 1;\n                 if i >= lim {\n                     error(~\"unterminated conversion at end of string\");\n                 }\n-                let curr2 = str::slice(s, i, i+1u);\n+                let curr2 = str::slice(s, i, i+1);\n                 if curr2 == ~\"%\" {\n                     buf += curr2;\n-                    i += 1u;\n+                    i += 1;\n                 } else {\n-                    buf = flush_buf(buf, pieces);\n+                    buf = flush_buf(move buf, pieces);\n                     let rs = parse_conversion(s, i, lim, error);\n                     vec::push(pieces, copy rs.piece);\n                     i = rs.next;\n                 }\n             } else { buf += curr; i += size; }\n         }\n-        flush_buf(buf, pieces);\n-        return pieces;\n+        flush_buf(move buf, pieces);\n+        move pieces\n     }\n     fn peek_num(s: ~str, i: uint, lim: uint) ->\n        Option<{num: uint, next: uint}> {\n@@ -173,7 +173,7 @@ mod ct {\n     fn parse_flags(s: ~str, i: uint, lim: uint) ->\n        {flags: ~[flag], next: uint} {\n         let noflags: ~[flag] = ~[];\n-        if i >= lim { return {flags: noflags, next: i}; }\n+        if i >= lim { return {flags: move noflags, next: i}; }\n \n         fn more_(f: flag, s: ~str, i: uint, lim: uint) ->\n            {flags: ~[flag], next: uint} {\n@@ -376,7 +376,7 @@ mod rt {\n                     let diff = prec - len;\n                     let pad = str::from_chars(vec::from_elem(diff, '0'));\n                     pad + s\n-                } else { s }\n+                } else { move s }\n             };\n     }\n     pure fn get_int_precision(cv: conv) -> uint {"}, {"sha": "fbd6e731e3bbbe8d3714244ad71604757e1ffd4f", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -31,7 +31,7 @@ fn deflate_buf(buf: &[const u8]) -> ~[u8] {\n             let out = vec::unsafe::from_buf(res as *u8,\n                                             outsz as uint);\n             libc::free(res);\n-            out\n+            move out\n         }\n     }\n }\n@@ -49,7 +49,7 @@ fn inflate_buf(buf: &[const u8]) -> ~[u8] {\n             let out = vec::unsafe::from_buf(res as *u8,\n                                             outsz as uint);\n             libc::free(res);\n-            out\n+            move out\n         }\n     }\n }"}, {"sha": "200d448e6b102b8e2e7a19c33ab60b70dd2cabe4", "filename": "src/libcore/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -58,7 +58,7 @@ impl<T: Reader> T : ReaderUtil {\n         let count = self.read(buf, len);\n \n         unsafe { vec::unsafe::set_len(buf, count); }\n-        vec::from_mut(buf)\n+        vec::from_mut(move buf)\n     }\n     fn read_line() -> ~str {\n         let mut buf = ~[];\n@@ -128,7 +128,7 @@ impl Reader {\n                 buf = vec::slice(buf, offset, vec::len(buf));\n             }\n         }\n-        chars\n+        move chars\n     }\n \n     fn read_char() -> char {\n@@ -180,7 +180,7 @@ impl Reader {\n     fn read_whole_stream() -> ~[u8] {\n         let mut buf: ~[u8] = ~[];\n         while !self.eof() { vec::push_all(buf, self.read_bytes(2048u)); }\n-        buf\n+        move buf\n     }\n \n     fn each_byte(it: fn(int) -> bool) {\n@@ -688,7 +688,7 @@ impl MemBuffer: Writer {\n \n             self.pos += v_len;\n \n-            buf\n+            move buf\n         }\n     }\n     fn seek(offset: int, whence: SeekStyle) {"}, {"sha": "4e42b69db6b21320d37b0f8d312b786dc76e8e11", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -215,7 +215,7 @@ mod global_env {\n                 assert vec::len(vs) == 2u;\n                 vec::push(pairs, (copy vs[0], copy vs[1]));\n             }\n-            return pairs;\n+            move pairs\n         }\n \n         #[cfg(unix)]"}, {"sha": "2ae72d1187eef0518b54e8140485331a21236887", "filename": "src/libcore/path.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -99,7 +99,7 @@ impl PosixPath : GenericPath {\n             if s.len() == 0 {\n                 ~\".\"\n             } else {\n-                s\n+                move s\n             }\n         }\n     }\n@@ -139,7 +139,7 @@ impl PosixPath : GenericPath {\n         let dpath = from_str::<PosixPath>(d);\n         match self.filename() {\n           Some(ref f) => dpath.push(*f),\n-          None => dpath\n+          None => move dpath\n         }\n     }\n \n@@ -197,8 +197,7 @@ impl PosixPath : GenericPath {\n     }\n \n     pure fn push_many(cs: &[~str]) -> PosixPath {\n-        return PosixPath { components: self.components + cs,\n-                           ..self }\n+       PosixPath { components: (copy self.components) + copy cs, ..self }\n     }\n \n     pure fn push(s: &str) -> PosixPath {\n@@ -288,7 +287,7 @@ impl WindowsPath : GenericPath {\n             if s.len() == 0 {\n                 ~\".\"\n             } else {\n-                s\n+                move s\n             }\n         }\n     }\n@@ -328,7 +327,7 @@ impl WindowsPath : GenericPath {\n         let dpath = from_str::<WindowsPath>(d);\n         match self.filename() {\n           Some(ref f) => dpath.push(*f),\n-          None => dpath\n+          None => move dpath\n         }\n     }\n \n@@ -386,7 +385,7 @@ impl WindowsPath : GenericPath {\n     }\n \n     pure fn push_many(cs: &[~str]) -> WindowsPath {\n-        return WindowsPath { components: self.components + cs,\n+        return WindowsPath { components: (copy self.components) + (copy cs),\n                             ..self }\n     }\n \n@@ -428,7 +427,7 @@ pure fn normalize(components: &[~str]) -> ~[~str] {\n             }\n         }\n     }\n-    cs\n+    move cs\n }\n \n mod posix {\n@@ -525,7 +524,7 @@ mod windows {\n                 if s[i] == '\\\\' as u8 {\n                     let pre = s.slice(2, i);\n                     let rest = s.slice(i, s.len());\n-                    return Some((pre, rest));\n+                    return Some((move pre, move rest));\n                 }\n                 i += 1;\n             }\n@@ -543,7 +542,7 @@ mod windows {\n                 } else {\n                     s.slice(2, s.len())\n                 };\n-                return Some((s.slice(0,1), rest));\n+                return Some((s.slice(0,1), move rest));\n             }\n             None\n         }"}, {"sha": "207bc4a91b600a2d803ca37d4ee8709996bbbca9", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -46,15 +46,15 @@ unsafe fn chan_from_global_ptr<T: Send>(\n         // There's no global channel. We must make it\n \n         let (setup_po, setup_ch) = do task_fn().spawn_conversation\n-            |setup_po, setup_ch| {\n+            |move f, setup_po, setup_ch| {\n             let po = comm::Port::<T>();\n             let ch = comm::Chan(po);\n             comm::send(setup_ch, ch);\n \n             // Wait to hear if we are the official instance of\n             // this global task\n             match comm::recv::<Msg>(setup_po) {\n-              Proceed => f(po),\n+              Proceed => f(move po),\n               Abort => ()\n             }\n         };"}, {"sha": "5aaf70d84c6cc390702d165ffc2227fae2776933", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -154,7 +154,7 @@ impl Rng {\n             s = s + str::from_char(self.gen_char_from(charset));\n             i += 1u;\n         }\n-        s\n+        move s\n     }\n \n     /// Return a random byte string of the specified length\n@@ -220,14 +220,14 @@ impl Rng {\n                 vec::push(r, item.item);\n             }\n         }\n-        r\n+        move r\n     }\n \n     /// Shuffle a vec\n     fn shuffle<T:Copy>(values: &[T]) -> ~[T] {\n         let mut m = vec::from_slice(values);\n         self.shuffle_mut(m);\n-        return m;\n+        move m\n     }\n \n     /// Shuffle a mutable vec in place"}, {"sha": "22e01acef2a1660d1c2e34031274c22dcc318878", "filename": "src/libcore/run.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -260,7 +260,7 @@ fn read_all(rd: io::Reader) -> ~str {\n         let bytes = rd.read_bytes(4096u);\n         buf += str::from_bytes(bytes);\n     }\n-    return buf;\n+    move buf\n }\n \n /**\n@@ -306,11 +306,11 @@ fn program_output(prog: &str, args: &[~str]) ->\n     let ch = comm::Chan(p);\n     do task::spawn_sched(task::SingleThreaded) {\n         let errput = readclose(pipe_err.in);\n-        comm::send(ch, (2, errput));\n+        comm::send(ch, (2, move errput));\n     };\n     do task::spawn_sched(task::SingleThreaded) {\n         let output = readclose(pipe_out.in);\n-        comm::send(ch, (1, output));\n+        comm::send(ch, (1, move output));\n     };\n     let status = run::waitpid(pid);\n     let mut errs = ~\"\";\n@@ -332,7 +332,7 @@ fn program_output(prog: &str, args: &[~str]) ->\n         };\n         count -= 1;\n     };\n-    return {status: status, out: outs, err: errs};\n+    return {status: status, out: move outs, err: move errs};\n }\n \n fn writeclose(fd: c_int, s: &str) {\n@@ -354,7 +354,7 @@ fn readclose(fd: c_int) -> ~str {\n         buf += str::from_bytes(bytes);\n     }\n     os::fclose(file);\n-    return buf;\n+    move buf\n }\n \n /// Waits for a process to exit and returns the exit code"}, {"sha": "0bb08c82011e59fa1c398f2faef2ab29caff844d", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9d0ba41486924538b28511d60b713b6686f7b/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=f2d9d0ba41486924538b28511d60b713b6686f7b", "patch": "@@ -53,7 +53,7 @@ unsafe fn bump_box_refcount<T>(+t: @T) { forget(t); }\n unsafe fn transmute<L, G>(-thing: L) -> G {\n     let newthing = reinterpret_cast(&thing);\n     forget(thing);\n-    return newthing;\n+    move newthing\n }\n \n /// Coerce an immutable reference to be mutable.\n@@ -113,9 +113,9 @@ struct ArcDestruct<T> {\n                         unsafe::reinterpret_cast(&data.unwrapper);\n                     let (message, response) = option::swap_unwrap(p);\n                     // Send 'ready' and wait for a response.\n-                    pipes::send_one(message, ());\n+                    pipes::send_one(move message, ());\n                     // Unkillable wait. Message guaranteed to come.\n-                    if pipes::recv_one(response) {\n+                    if pipes::recv_one(move response) {\n                         // Other task got the data.\n                         unsafe::forget(data);\n                     } else {\n@@ -147,13 +147,13 @@ unsafe fn unwrap_shared_mutable_state<T: Send>(+rc: SharedMutableState<T>)\n             // In case we get killed early, we need to tell the person who\n             // tried to wake us whether they should hand-off the data to us.\n             if task::failing() {\n-                pipes::send_one(response, false);\n+                pipes::send_one(move response, false);\n                 // Either this swap_unwrap or the one below (at \"Got here\")\n                 // ought to run.\n                 unsafe::forget(option::swap_unwrap(&mut self.ptr));\n             } else {\n                 assert self.ptr.is_none();\n-                pipes::send_one(response, true);\n+                pipes::send_one(move response, true);\n             }\n         }\n     }\n@@ -162,7 +162,7 @@ unsafe fn unwrap_shared_mutable_state<T: Send>(+rc: SharedMutableState<T>)\n         let ptr: ~ArcData<T> = unsafe::reinterpret_cast(&rc.data);\n         let (c1,p1) = pipes::oneshot(); // ()\n         let (c2,p2) = pipes::oneshot(); // bool\n-        let server: UnwrapProto = ~mut Some((c1,p2));\n+        let server: UnwrapProto = ~mut Some((move c1,move p2));\n         let serverp: libc::uintptr_t = unsafe::transmute(server);\n         // Try to put our server end in the unwrapper slot.\n         if rustrt::rust_compare_and_swap_ptr(&mut ptr.unwrapper, 0, serverp) {\n@@ -180,8 +180,9 @@ unsafe fn unwrap_shared_mutable_state<T: Send>(+rc: SharedMutableState<T>)\n             } else {\n                 // The *next* person who sees the refcount hit 0 will wake us.\n                 let end_result =\n-                    DeathThroes { ptr: Some(ptr), response: Some(c2) };\n-                let mut p1 = Some(p1); // argh\n+                    DeathThroes { ptr: Some(move ptr),\n+                                  response: Some(move c2) };\n+                let mut p1 = Some(move p1); // argh\n                 do task::rekillable {\n                     pipes::recv_one(option::swap_unwrap(&mut p1));\n                 }\n@@ -210,7 +211,7 @@ unsafe fn unwrap_shared_mutable_state<T: Send>(+rc: SharedMutableState<T>)\n type SharedMutableState<T: Send> = ArcDestruct<T>;\n \n unsafe fn shared_mutable_state<T: Send>(+data: T) -> SharedMutableState<T> {\n-    let data = ~ArcData { count: 1, unwrapper: 0, data: Some(data) };\n+    let data = ~ArcData { count: 1, unwrapper: 0, data: Some(move data) };\n     unsafe {\n         let ptr = unsafe::transmute(data);\n         ArcDestruct(ptr)\n@@ -322,7 +323,7 @@ fn exclusive<T:Send >(+user_data: T) -> Exclusive<T> {\n     let data = ExData {\n         lock: LittleLock(), mut failed: false, mut data: user_data\n     };\n-    Exclusive { x: unsafe { shared_mutable_state(data) } }\n+    Exclusive { x: unsafe { shared_mutable_state(move data) } }\n }\n \n impl<T: Send> Exclusive<T> {\n@@ -347,17 +348,17 @@ impl<T: Send> Exclusive<T> {\n             rec.failed = true;\n             let result = f(&mut rec.data);\n             rec.failed = false;\n-            result\n+            move result\n         }\n     }\n }\n \n // FIXME(#2585) make this a by-move method on the exclusive\n fn unwrap_exclusive<T: Send>(+arc: Exclusive<T>) -> T {\n-    let Exclusive { x: x } = arc;\n-    let inner = unsafe { unwrap_shared_mutable_state(x) };\n-    let ExData { data: data, _ } = inner;\n-    data\n+    let Exclusive { x: x } <- arc;\n+    let inner = unsafe { unwrap_shared_mutable_state(move x) };\n+    let ExData { data: data, _ } <- inner;\n+    move data\n }\n \n /****************************************************************************"}]}