{"sha": "a3e8f41212a04b702596f4261b89f2c3254338d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZThmNDEyMTJhMDRiNzAyNTk2ZjQyNjFiODlmMmMzMjU0MzM4ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-07T15:33:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:52Z"}, "message": "doc: Document constants in the reference", "tree": {"sha": "e685d84e7ffea5af5a6adb01db8ce073254628c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e685d84e7ffea5af5a6adb01db8ce073254628c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3e8f41212a04b702596f4261b89f2c3254338d7", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e8f41212a04b702596f4261b89f2c3254338d7", "html_url": "https://github.com/rust-lang/rust/commit/a3e8f41212a04b702596f4261b89f2c3254338d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3e8f41212a04b702596f4261b89f2c3254338d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03a4b0046a27968fc4eeaf1847776b90a48264b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03a4b0046a27968fc4eeaf1847776b90a48264b", "html_url": "https://github.com/rust-lang/rust/commit/d03a4b0046a27968fc4eeaf1847776b90a48264b"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "c34a136a68e888e501d4f843743851c51ecb9d43", "filename": "src/doc/reference.md", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a3e8f41212a04b702596f4261b89f2c3254338d7/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3e8f41212a04b702596f4261b89f2c3254338d7/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=a3e8f41212a04b702596f4261b89f2c3254338d7", "patch": "@@ -1383,44 +1383,87 @@ a = Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n In this example, `Cat` is a _struct-like enum variant_,\n whereas `Dog` is simply called an enum variant.\n \n-### Static items\n+### Constant items\n \n ```{.ebnf .gram}\n-static_item : \"static\" ident ':' type '=' expr ';' ;\n+const_item : \"const\" ident ':' type '=' expr ';' ;\n ```\n \n-A *static item* is a named _constant value_ stored in the global data section\n-of a crate. Immutable static items are stored in the read-only data section.\n-The constant value bound to a static item is, like all constant values,\n-evaluated at compile time. Static items have the `static` lifetime, which\n-outlives all other lifetimes in a Rust program. Only values stored in the\n-global data section (such as string constants and static items) can have the\n-`static` lifetime; dynamically constructed values cannot safely be assigned the\n-`static` lifetime. Static items are declared with the `static` keyword. A\n-static item must have a _constant expression_ giving its definition.\n+A *constant item* is a named _constant value_ which is not associated with a\n+specific memory location in the program. Constants are essentially inlined\n+wherever they are used, meaning that they are copied directly into the relevant\n+context when used. References to the same constant are not necessarily\n+guaranteed to refer to the same memory address.\n+\n+Constant values must not have destructors, and otherwise permit most forms of\n+data. Constants may refer to the address of other constants, in which case the\n+address will have the `static` lifetime. The compiler is, however, still at\n+liberty to translate the constant many times, so the address referred to may not\n+be stable.\n \n-Static items must be explicitly typed. The type may be `bool`, `char`,\n-a number, or a type derived from those primitive types. The derived types are\n-references with the `static` lifetime, fixed-size arrays, tuples, and structs.\n+Constants must be explicitly typed. The type may be `bool`, `char`, a number, or\n+a type derived from those primitive types. The derived types are references with\n+the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n \n ```\n-static BIT1: uint = 1 << 0;\n-static BIT2: uint = 1 << 1;\n+const BIT1: uint = 1 << 0;\n+const BIT2: uint = 1 << 1;\n \n-static BITS: [uint, ..2] = [BIT1, BIT2];\n-static STRING: &'static str = \"bitstring\";\n+const BITS: [uint, ..2] = [BIT1, BIT2];\n+const STRING: &'static str = \"bitstring\";\n \n struct BitsNStrings<'a> {\n     mybits: [uint, ..2],\n     mystring: &'a str\n }\n \n-static BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n+const BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n     mybits: BITS,\n     mystring: STRING\n };\n ```\n \n+### Static items\n+\n+```{.ebnf .gram}\n+static_item : \"static\" ident ':' type '=' expr ';' ;\n+```\n+\n+A *static item* is similar to a *constant*, except that it represents a precise\n+memory location in the program. A static is never \"inlined\" at the usage site,\n+and all references to it refer to the same memory location. Static items have\n+the `static` lifetime, which outlives all other lifetimes in a Rust program.\n+Static items may be placed in read-only memory if they do not contain any\n+interior mutability.\n+\n+Statics may contain interior mutability through the `UnsafeCell` language item.\n+All access to a static is safe, but there are a number of restrictions on\n+statics:\n+\n+* Statics may not contain any destructors.\n+* The types of static values must ascribe to `Sync` to allow threadsafe access.\n+* Statics may not refer to other statics by value, only by reference.\n+* Constants cannot refer to statics.\n+\n+Constants should in general be preferred over statics, unless large amounts of\n+data are being stored, or single-address and mutability properties are required.\n+\n+```\n+use std::sync::atomic;\n+\n+// Note that INIT_ATOMIC_UINT is a *const*, but it may be used to initialize a\n+// static. This static can be modified, so it is not placed in read-only memory.\n+static COUNTER: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n+\n+// This table is a candidate to be placed in read-only memory.\n+static TABLE: &'static [uint] = &[1, 2, 3, /* ... */];\n+\n+for slot in TABLE.iter() {\n+    println!(\"{}\", slot);\n+}\n+COUNTER.fetch_add(1, atomic::SeqCst);\n+```\n+\n #### Mutable statics\n \n If a static item is declared with the `mut` keyword, then it is allowed to\n@@ -1455,6 +1498,9 @@ unsafe fn bump_levels_unsafe2() -> uint {\n }\n ```\n \n+Mutable statics have the same restrictions as normal statics, except that the\n+type of the value is not required to ascribe to `Sync`.\n+\n ### Traits\n \n A _trait_ describes a set of method types."}]}