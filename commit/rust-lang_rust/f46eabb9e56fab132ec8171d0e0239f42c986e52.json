{"sha": "f46eabb9e56fab132ec8171d0e0239f42c986e52", "node_id": "C_kwDOAAsO6NoAKGY0NmVhYmI5ZTU2ZmFiMTMyZWM4MTcxZDBlMDIzOWY0MmM5ODZlNTI", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-05T14:52:53Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-05T21:19:56Z"}, "message": "Report nicer lifetime errors for specialization\n\nAdd an obligation cause for these error so that the error points to the\nimplementations that caused the error.", "tree": {"sha": "4650dd85c8015bef2e3dd4db160fdb1de24cfb6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4650dd85c8015bef2e3dd4db160fdb1de24cfb6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f46eabb9e56fab132ec8171d0e0239f42c986e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f46eabb9e56fab132ec8171d0e0239f42c986e52", "html_url": "https://github.com/rust-lang/rust/commit/f46eabb9e56fab132ec8171d0e0239f42c986e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f46eabb9e56fab132ec8171d0e0239f42c986e52/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "url": "https://api.github.com/repos/rust-lang/rust/commits/fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "html_url": "https://github.com/rust-lang/rust/commit/fafe9e71d5c949c41a5a562e44cc40d72c5f7244"}], "stats": {"total": 142, "additions": 132, "deletions": 10}, "files": [{"sha": "e84da2519ae812bce3b4a48c17dcb65948517ef5", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -80,7 +80,7 @@ use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, translate_substs, wf, ObligationCtxt};\n+use rustc_trait_selection::traits::{self, translate_substs_with_cause, wf, ObligationCtxt};\n \n pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     if let Some(node) = parent_specialization_node(tcx, impl_def_id) {\n@@ -180,8 +180,21 @@ fn get_impl_substs(\n         ocx.assumed_wf_types(param_env, tcx.def_span(impl1_def_id), impl1_def_id);\n \n     let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id);\n-    let impl2_substs =\n-        translate_substs(infcx, param_env, impl1_def_id.to_def_id(), impl1_substs, impl2_node);\n+    let impl1_span = tcx.def_span(impl1_def_id);\n+    let impl2_substs = translate_substs_with_cause(\n+        infcx,\n+        param_env,\n+        impl1_def_id.to_def_id(),\n+        impl1_substs,\n+        impl2_node,\n+        |_, span| {\n+            traits::ObligationCause::new(\n+                impl1_span,\n+                impl1_def_id,\n+                traits::ObligationCauseCode::BindingObligation(impl2_node.def_id(), span),\n+            )\n+        },\n+    );\n \n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {"}, {"sha": "9f405aaf1a821b07894c22cf3ec1d28cfcf61c43", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -322,7 +322,9 @@ fn negative_impl(tcx: TyCtxt<'_>, impl1_def_id: DefId, impl2_def_id: DefId) -> b\n     let selcx = &mut SelectionContext::new(&infcx);\n     let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n     let (subject2, obligations) =\n-        impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n+        impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs, |_, _| {\n+            ObligationCause::dummy()\n+        });\n \n     !equate(&infcx, impl_env, subject1, subject2, obligations, impl1_def_id)\n }"}, {"sha": "138b0fb74322864577324e276227c04e77663efb", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -54,7 +54,9 @@ pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n-pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n+pub use self::specialize::{\n+    specialization_graph, translate_substs, translate_substs_with_cause, OverlapError,\n+};\n pub use self::structural_match::{\n     search_for_adt_const_param_violation, search_for_structural_match_violation,\n };"}, {"sha": "9a4b72013b88db225fefd83ef8097b7e3b28965f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -82,6 +82,30 @@ pub fn translate_substs<'tcx>(\n     source_impl: DefId,\n     source_substs: SubstsRef<'tcx>,\n     target_node: specialization_graph::Node,\n+) -> SubstsRef<'tcx> {\n+    translate_substs_with_cause(\n+        infcx,\n+        param_env,\n+        source_impl,\n+        source_substs,\n+        target_node,\n+        |_, _| ObligationCause::dummy(),\n+    )\n+}\n+\n+/// Like [translate_substs], but obligations from the parent implementation\n+/// are registered with the provided `ObligationCause`.\n+///\n+/// This is for reporting *region* errors from those bounds. Type errors should\n+/// not happen because the specialization graph already checks for those, and\n+/// will result in an ICE.\n+pub fn translate_substs_with_cause<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    source_impl: DefId,\n+    source_substs: SubstsRef<'tcx>,\n+    target_node: specialization_graph::Node,\n+    cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n ) -> SubstsRef<'tcx> {\n     debug!(\n         \"translate_substs({:?}, {:?}, {:?}, {:?})\",\n@@ -99,7 +123,7 @@ pub fn translate_substs<'tcx>(\n                 return source_substs;\n             }\n \n-            fulfill_implication(infcx, param_env, source_trait_ref, source_impl, target_impl)\n+            fulfill_implication(infcx, param_env, source_trait_ref, source_impl, target_impl, cause)\n                 .unwrap_or_else(|()| {\n                     bug!(\n                         \"When translating substitutions from {source_impl:?} to {target_impl:?}, \\\n@@ -154,7 +178,10 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n     let infcx = tcx.infer_ctxt().build();\n \n     // Attempt to prove that impl2 applies, given all of the above.\n-    fulfill_implication(&infcx, penv, impl1_trait_ref, impl1_def_id, impl2_def_id).is_ok()\n+    fulfill_implication(&infcx, penv, impl1_trait_ref, impl1_def_id, impl2_def_id, |_, _| {\n+        ObligationCause::dummy()\n+    })\n+    .is_ok()\n }\n \n /// Attempt to fulfill all obligations of `target_impl` after unification with\n@@ -168,6 +195,7 @@ fn fulfill_implication<'tcx>(\n     source_trait_ref: ty::TraitRef<'tcx>,\n     source_impl: DefId,\n     target_impl: DefId,\n+    error_cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n ) -> Result<SubstsRef<'tcx>, ()> {\n     debug!(\n         \"fulfill_implication({:?}, trait_ref={:?} |- {:?} applies)\",\n@@ -195,7 +223,7 @@ fn fulfill_implication<'tcx>(\n     let selcx = &mut SelectionContext::new(&infcx);\n     let target_substs = infcx.fresh_substs_for_item(DUMMY_SP, target_impl);\n     let (target_trait, obligations) =\n-        util::impl_subject_and_oblig(selcx, param_env, target_impl, target_substs);\n+        util::impl_subject_and_oblig(selcx, param_env, target_impl, target_substs, error_cause);\n \n     // do the impls unify? If not, no specialization.\n     let Ok(InferOk { obligations: more_obligations, .. }) ="}, {"sha": "82f3df401988dc94a4f43f766e8aa5d63d9d7c88", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -197,6 +197,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n+    cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n     let subject = selcx.tcx().impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n@@ -208,8 +209,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n     let InferOk { value: predicates, obligations: normalization_obligations2 } =\n         selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(predicates);\n-    let impl_obligations =\n-        super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n+    let impl_obligations = super::predicates_for_generics(cause, param_env, predicates);\n \n     let impl_obligations = impl_obligations\n         .chain(normalization_obligations1.into_iter())"}, {"sha": "d90b81f717a6c38454cf2900f2aecda88e833c25", "filename": "tests/ui/specialization/min_specialization/specialize_with_generalize_lifetimes.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.rs?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -0,0 +1,50 @@\n+// Regression test for #79457.\n+\n+#![feature(min_specialization)]\n+\n+use std::any::Any;\n+\n+pub trait Tr {\n+    fn method(self) -> Box<dyn Any + 'static>;\n+    fn other(self);\n+}\n+\n+impl<T: Any + 'static> Tr for T {\n+    default fn method(self) -> Box<dyn Any + 'static> {\n+        Box::new(self)\n+    }\n+\n+    default fn other(self) {}\n+}\n+\n+impl<'a> Tr for &'a i32 {\n+    //~^ ERROR does not fulfill the required lifetime\n+    fn other(self) {}\n+}\n+\n+fn promote_to_static<'a>(i: &'a i32) -> &'static i32 {\n+    *i.method().downcast().unwrap()\n+}\n+\n+struct Wrapper<'a>(&'a i32);\n+\n+impl<'a> Tr for Wrapper<'a> {\n+    //~^ ERROR does not fulfill the required lifetime\n+    fn other(self) {}\n+}\n+\n+fn promote_to_static_2<'a>(w: Wrapper<'a>) -> Wrapper<'static> {\n+    *w.method().downcast().unwrap()\n+}\n+\n+fn main() {\n+    let i = Box::new(100_i32);\n+    let static_i: &'static i32 = promote_to_static(&*i);\n+    drop(i);\n+    println!(\"{}\", *static_i);\n+\n+    let j = Box::new(200_i32);\n+    let static_w: Wrapper<'static> = promote_to_static_2(Wrapper(&*j));\n+    drop(j);\n+    println!(\"{}\", *static_w.0);\n+}"}, {"sha": "2af75876d5b0a6bb9388b979f48583305a943e7e", "filename": "tests/ui/specialization/min_specialization/specialize_with_generalize_lifetimes.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f46eabb9e56fab132ec8171d0e0239f42c986e52/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f46eabb9e56fab132ec8171d0e0239f42c986e52/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.stderr?ref=f46eabb9e56fab132ec8171d0e0239f42c986e52", "patch": "@@ -0,0 +1,27 @@\n+error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:20:1\n+   |\n+LL | impl<'a> Tr for &'a i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:12:15\n+   |\n+LL | impl<T: Any + 'static> Tr for T {\n+   |               ^^^^^^^\n+\n+error[E0477]: the type `Wrapper<'a>` does not fulfill the required lifetime\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:31:1\n+   |\n+LL | impl<'a> Tr for Wrapper<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:12:15\n+   |\n+LL | impl<T: Any + 'static> Tr for T {\n+   |               ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0477`."}]}