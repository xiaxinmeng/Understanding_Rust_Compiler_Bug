{"sha": "089a38880b6e3b05a2c59644469233dbda411158", "node_id": "C_kwDOAAsO6NoAKDA4OWEzODg4MGI2ZTNiMDVhMmM1OTY0NDQ2OTIzM2RiZGE0MTExNTg", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-04-07T13:20:26Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-05-06T01:34:53Z"}, "message": "correct literals for dyn thread safe", "tree": {"sha": "ce808ed4441bc33c67949acb6132c05c9fddbbf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce808ed4441bc33c67949acb6132c05c9fddbbf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089a38880b6e3b05a2c59644469233dbda411158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089a38880b6e3b05a2c59644469233dbda411158", "html_url": "https://github.com/rust-lang/rust/commit/089a38880b6e3b05a2c59644469233dbda411158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089a38880b6e3b05a2c59644469233dbda411158/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "html_url": "https://github.com/rust-lang/rust/commit/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3"}], "stats": {"total": 89, "additions": 48, "deletions": 41}, "files": [{"sha": "3f0b1627afa56a1614a6862b475ad01b83dc117d", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -48,7 +48,7 @@ pub enum TokenTree {\n     Delimited(DelimSpan, Delimiter, TokenStream),\n }\n \n-// Ensure all fields of `TokenTree` is `DynSend` and `DynSync`.\n+// Ensure all fields of `TokenTree` are `DynSend` and `DynSync`.\n #[cfg(parallel_compiler)]\n fn _dummy()\n where"}, {"sha": "6dad2bac58aecd21f375762412ff2c16ccfc1b00", "filename": "compiler/rustc_data_structures/src/marker.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -8,20 +8,20 @@ cfg_if!(\n     } else {\n         #[rustc_on_unimplemented(\n             message = \"`{Self}` doesn't implement `DynSend`. \\\n-            Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Send`\"\n+            Add it to `rustc_data_structures::marker` or use `IntoDynSyncSend` if it's already `Send`\"\n         )]\n         // This is an auto trait for types which can be sent across threads if `sync::is_dyn_thread_safe()`\n         // is true. These types can be wrapped in a `FromDyn` to get a `Send` type. Wrapping a\n-        // `Send` type in `IntoDyn` will create a `DynSend` type.\n+        // `Send` type in `IntoDynSyncSend` will create a `DynSend` type.\n         pub unsafe auto trait DynSend {}\n \n         #[rustc_on_unimplemented(\n             message = \"`{Self}` doesn't implement `DynSync`. \\\n-            Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Sync`\"\n+            Add it to `rustc_data_structures::marker` or use `IntoDynSyncSend` if it's already `Sync`\"\n         )]\n         // This is an auto trait for types which can be shared across threads if `sync::is_dyn_thread_safe()`\n         // is true. These types can be wrapped in a `FromDyn` to get a `Sync` type. Wrapping a\n-        // `Sync` type in `IntoDyn` will create a `DynSync` type.\n+        // `Sync` type in `IntoDynSyncSend` will create a `DynSync` type.\n         pub unsafe auto trait DynSync {}\n \n         // Same with `Sync` and `Send`.\n@@ -234,23 +234,26 @@ impl<T> const std::ops::Deref for FromDyn<T> {\n     }\n }\n \n+// A wrapper to convert a struct that is already a `Send` or `Sync` into\n+// an instance of `DynSend` and `DynSync`, since the compiler cannot infer\n+// it automatically in some cases. (e.g. Box<dyn Send / Sync>)\n #[derive(Copy, Clone)]\n-pub struct IntoDyn<T: ?Sized>(pub T);\n+pub struct IntoDynSyncSend<T: ?Sized>(pub T);\n \n #[cfg(parallel_compiler)]\n-unsafe impl<T: ?Sized + Send> DynSend for IntoDyn<T> {}\n+unsafe impl<T: ?Sized + Send> DynSend for IntoDynSyncSend<T> {}\n #[cfg(parallel_compiler)]\n-unsafe impl<T: ?Sized + Sync> DynSync for IntoDyn<T> {}\n+unsafe impl<T: ?Sized + Sync> DynSync for IntoDynSyncSend<T> {}\n \n-impl<T> const std::ops::Deref for IntoDyn<T> {\n+impl<T> const std::ops::Deref for IntoDynSyncSend<T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n         &self.0\n     }\n }\n \n-impl<T> const std::ops::DerefMut for IntoDyn<T> {\n+impl<T> const std::ops::DerefMut for IntoDynSyncSend<T> {\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.0\n     }"}, {"sha": "8a778866a77e242b5689a3934185de396b6957ee", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -61,25 +61,25 @@ mod mode {\n     use std::sync::atomic::AtomicU8;\n \n     const UNINITIALIZED: u8 = 0;\n-    const DYN_NOT_SYNC: u8 = 1;\n-    const DYN_SYNC: u8 = 2;\n+    const DYN_NOT_THREAD_SAFE: u8 = 1;\n+    const DYN_THREAD_SAFE: u8 = 2;\n \n-    static DYN_SYNC_MODE: AtomicU8 = AtomicU8::new(UNINITIALIZED);\n+    static DYN_THREAD_SAFE_MODE: AtomicU8 = AtomicU8::new(UNINITIALIZED);\n \n-    // Weather control thread safety dynamically\n+    // Whether thread safety is enabled (due to running under multiple threads).\n     #[inline]\n     pub fn is_dyn_thread_safe() -> bool {\n-        match DYN_SYNC_MODE.load(Ordering::Relaxed) {\n-            DYN_NOT_SYNC => false,\n-            DYN_SYNC => true,\n-            _ => panic!(\"uninitialized parallel mode!\"),\n+        match DYN_THREAD_SAFE_MODE.load(Ordering::Relaxed) {\n+            DYN_NOT_THREAD_SAFE => false,\n+            DYN_THREAD_SAFE => true,\n+            _ => panic!(\"uninitialized dyn_thread_safe mode!\"),\n         }\n     }\n \n     // Only set by the `-Z threads` compile option\n-    pub fn set_dyn_thread_safe_mode(parallel: bool) {\n-        let set: u8 = if parallel { DYN_SYNC } else { DYN_NOT_SYNC };\n-        let previous = DYN_SYNC_MODE.compare_exchange(\n+    pub fn set_dyn_thread_safe_mode(mode: bool) {\n+        let set: u8 = if mode { DYN_THREAD_SAFE } else { DYN_NOT_THREAD_SAFE };\n+        let previous = DYN_THREAD_SAFE_MODE.compare_exchange(\n             UNINITIALIZED,\n             set,\n             Ordering::Relaxed,\n@@ -401,7 +401,7 @@ cfg_if! {\n                 if rustc_data_structures::sync::is_dyn_thread_safe() {\n                     // Reverse the order of the later blocks since Rayon executes them in reverse order\n                     // when using a single thread. This ensures the execution order matches that\n-                    // of a single threaded rustc\n+                    // of a single threaded rustc.\n                     parallel!(impl $fblock [] [$($blocks),*]);\n                 } else {\n                     // We catch panics here ensuring that all the blocks execute."}, {"sha": "b94fb335a4ef0ee7a9735cf6eaaa14ac13d13b25", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -255,8 +255,8 @@ fn run_compiler(\n \n     let sopts = config::build_session_options(&matches);\n \n-    // Set parallel mode before thread pool creation as the session will already create locks.\n-    interface::set_parallel_mode(&sopts.unstable_opts);\n+    // Set parallel mode before thread pool creation, which will create `Lock`s.\n+    interface::set_thread_safe_mode(&sopts.unstable_opts);\n \n     if let Some(ref code) = matches.opt_str(\"explain\") {\n         handle_explain(diagnostics_registry(), code, sopts.error_format);"}, {"sha": "0accb4ab96f59a5e4440736693949202a53313dc", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -11,7 +11,7 @@ extern crate tracing;\n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n use icu_provider_adapters::fallback::{LocaleFallbackProvider, LocaleFallbacker};\n-use rustc_data_structures::sync::{IntoDyn, Lrc};\n+use rustc_data_structures::sync::{IntoDynSyncSend, Lrc};\n use rustc_fluent_macro::fluent_messages;\n use rustc_macros::{Decodable, Encodable};\n use rustc_span::Span;\n@@ -38,16 +38,16 @@ pub use unic_langid::{langid, LanguageIdentifier};\n fluent_messages! { \"../messages.ftl\" }\n \n pub type FluentBundle =\n-    IntoDyn<fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>>;\n+    IntoDynSyncSend<fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>>;\n \n #[cfg(not(parallel_compiler))]\n fn new_bundle(locales: Vec<LanguageIdentifier>) -> FluentBundle {\n-    IntoDyn(fluent_bundle::bundle::FluentBundle::new(locales))\n+    IntoDynSyncSend(fluent_bundle::bundle::FluentBundle::new(locales))\n }\n \n #[cfg(parallel_compiler)]\n fn new_bundle(locales: Vec<LanguageIdentifier>) -> FluentBundle {\n-    IntoDyn(fluent_bundle::bundle::FluentBundle::new_concurrent(locales))\n+    IntoDynSyncSend(fluent_bundle::bundle::FluentBundle::new_concurrent(locales))\n }\n \n #[derive(Debug)]"}, {"sha": "64fbf22c26241127c89237350ffedf4255157af0", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -32,7 +32,7 @@ use emitter::{is_case_difference, Emitter, EmitterWriter};\n use registry::Registry;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::{Hash128, StableHasher};\n-use rustc_data_structures::sync::{self, IntoDyn, Lock, Lrc};\n+use rustc_data_structures::sync::{self, IntoDynSyncSend, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n     fallback_fluent_bundle, fluent_bundle, DelayDm, DiagnosticMessage, FluentBundle,\n@@ -409,7 +409,7 @@ struct HandlerInner {\n     err_count: usize,\n     warn_count: usize,\n     deduplicated_err_count: usize,\n-    emitter: IntoDyn<Box<dyn Emitter + sync::Send>>,\n+    emitter: IntoDynSyncSend<Box<dyn Emitter + sync::Send>>,\n     delayed_span_bugs: Vec<DelayedDiagnostic>,\n     delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n     /// This flag indicates that an expected diagnostic was emitted and suppressed.\n@@ -605,7 +605,7 @@ impl Handler {\n                 warn_count: 0,\n                 deduplicated_err_count: 0,\n                 deduplicated_warn_count: 0,\n-                emitter: IntoDyn(emitter),\n+                emitter: IntoDynSyncSend(emitter),\n                 delayed_span_bugs: Vec::new(),\n                 delayed_good_path_bugs: Vec::new(),\n                 suppressed_expected_diag: false,"}, {"sha": "0e729b716803f033b92594f920e241c26b6a6b3d", "filename": "compiler/rustc_errors/src/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftests.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -2,7 +2,7 @@ use crate::error::{TranslateError, TranslateErrorKind};\n use crate::fluent_bundle::*;\n use crate::translation::Translate;\n use crate::FluentBundle;\n-use rustc_data_structures::sync::{IntoDyn, Lrc};\n+use rustc_data_structures::sync::{IntoDynSyncSend, Lrc};\n use rustc_error_messages::fluent_bundle::resolver::errors::{ReferenceKind, ResolverError};\n use rustc_error_messages::langid;\n use rustc_error_messages::DiagnosticMessage;\n@@ -28,11 +28,13 @@ fn make_dummy(ftl: &'static str) -> Dummy {\n \n     #[cfg(parallel_compiler)]\n     let mut bundle: FluentBundle =\n-        IntoDyn(crate::fluent_bundle::bundle::FluentBundle::new_concurrent(vec![langid_en]));\n+        IntoDynSyncSend(crate::fluent_bundle::bundle::FluentBundle::new_concurrent(vec![\n+            langid_en,\n+        ]));\n \n     #[cfg(not(parallel_compiler))]\n     let mut bundle: FluentBundle =\n-        IntoDyn(crate::fluent_bundle::bundle::FluentBundle::new(vec![langid_en]));\n+        IntoDynSyncSend(crate::fluent_bundle::bundle::FluentBundle::new(vec![langid_en]));\n \n     bundle.add_resource(resource).expect(\"Failed to add FTL resources to the bundle.\");\n "}, {"sha": "ee373f72ee9ce47928a76b4ed5e6bcc97d84752a", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -61,7 +61,7 @@ impl Compiler {\n }\n \n #[allow(rustc::bad_opt_access)]\n-pub fn set_parallel_mode(sopts: &config::UnstableOptions) {\n+pub fn set_thread_safe_mode(sopts: &config::UnstableOptions) {\n     rustc_data_structures::sync::set_dyn_thread_safe_mode(sopts.threads > 1);\n }\n "}, {"sha": "71911a5a61877845bf793e522e39f18193dccec7", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -199,7 +199,7 @@ impl<'a, T: Copy> IntoIterator for &'a List<T> {\n \n unsafe impl<T: Sync> Sync for List<T> {}\n \n-// We need this since `List` uses extern type `OpaqueListContents`\n+// We need this since `List` uses extern type `OpaqueListContents`.\n #[cfg(parallel_compiler)]\n use rustc_data_structures::sync::DynSync;\n #[cfg(parallel_compiler)]"}, {"sha": "8238a16969d9baa90b3f5ea54fef4efb47abd2f8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -14,7 +14,9 @@ pub use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{Hash128, Hash64, StableHasher};\n-use rustc_data_structures::sync::{AtomicU32, IntoDyn, Lrc, MappedReadGuard, ReadGuard, RwLock};\n+use rustc_data_structures::sync::{\n+    AtomicU32, IntoDynSyncSend, Lrc, MappedReadGuard, ReadGuard, RwLock,\n+};\n use std::cmp;\n use std::hash::Hash;\n use std::path::{self, Path, PathBuf};\n@@ -176,7 +178,7 @@ pub struct SourceMap {\n     used_address_space: AtomicU32,\n \n     files: RwLock<SourceMapFiles>,\n-    file_loader: IntoDyn<Box<dyn FileLoader + Sync + Send>>,\n+    file_loader: IntoDynSyncSend<Box<dyn FileLoader + Sync + Send>>,\n     // This is used to apply the file path remapping as specified via\n     // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.\n     path_mapping: FilePathMapping,\n@@ -202,7 +204,7 @@ impl SourceMap {\n         SourceMap {\n             used_address_space: AtomicU32::new(0),\n             files: Default::default(),\n-            file_loader: IntoDyn(file_loader),\n+            file_loader: IntoDynSyncSend(file_loader),\n             path_mapping,\n             hash_kind,\n         }"}, {"sha": "70b6ba1aced139e78421f518577a21095c1685b7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089a38880b6e3b05a2c59644469233dbda411158/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a38880b6e3b05a2c59644469233dbda411158/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=089a38880b6e3b05a2c59644469233dbda411158", "patch": "@@ -730,8 +730,8 @@ fn main_args(at_args: &[String]) -> MainResult {\n         }\n     };\n \n-    // Set parallel mode early as the error handler will already create locks.\n-    interface::set_parallel_mode(&options.unstable_opts);\n+    // Set parallel mode before error handler creation, which will create `Lock`s.\n+    interface::set_thread_safe_mode(&options.unstable_opts);\n \n     let diag = core::new_handler(\n         options.error_format,"}]}