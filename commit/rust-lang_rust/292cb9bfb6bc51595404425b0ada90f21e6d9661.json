{"sha": "292cb9bfb6bc51595404425b0ada90f21e6d9661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MmNiOWJmYjZiYzUxNTk1NDA0NDI1YjBhZGE5MGYyMWU2ZDk2NjE=", "commit": {"author": {"name": "Francis Murillo", "email": "francis.murillo@protonmail.com", "date": "2020-10-10T10:07:47Z"}, "committer": {"name": "Francis Murillo", "email": "francis.murillo@protonmail.com", "date": "2020-10-25T09:41:30Z"}, "message": "Use `sugg_lint_and_help`", "tree": {"sha": "5c046222fd3d6dc5863f7b9284bb10aff3e22256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c046222fd3d6dc5863f7b9284bb10aff3e22256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292cb9bfb6bc51595404425b0ada90f21e6d9661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292cb9bfb6bc51595404425b0ada90f21e6d9661", "html_url": "https://github.com/rust-lang/rust/commit/292cb9bfb6bc51595404425b0ada90f21e6d9661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292cb9bfb6bc51595404425b0ada90f21e6d9661/comments", "author": {"login": "FrancisMurillo", "id": 7600642, "node_id": "MDQ6VXNlcjc2MDA2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7600642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrancisMurillo", "html_url": "https://github.com/FrancisMurillo", "followers_url": "https://api.github.com/users/FrancisMurillo/followers", "following_url": "https://api.github.com/users/FrancisMurillo/following{/other_user}", "gists_url": "https://api.github.com/users/FrancisMurillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrancisMurillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrancisMurillo/subscriptions", "organizations_url": "https://api.github.com/users/FrancisMurillo/orgs", "repos_url": "https://api.github.com/users/FrancisMurillo/repos", "events_url": "https://api.github.com/users/FrancisMurillo/events{/privacy}", "received_events_url": "https://api.github.com/users/FrancisMurillo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FrancisMurillo", "id": 7600642, "node_id": "MDQ6VXNlcjc2MDA2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7600642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrancisMurillo", "html_url": "https://github.com/FrancisMurillo", "followers_url": "https://api.github.com/users/FrancisMurillo/followers", "following_url": "https://api.github.com/users/FrancisMurillo/following{/other_user}", "gists_url": "https://api.github.com/users/FrancisMurillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrancisMurillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrancisMurillo/subscriptions", "organizations_url": "https://api.github.com/users/FrancisMurillo/orgs", "repos_url": "https://api.github.com/users/FrancisMurillo/repos", "events_url": "https://api.github.com/users/FrancisMurillo/events{/privacy}", "received_events_url": "https://api.github.com/users/FrancisMurillo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77e34a69bbbec0ef05dee9750ff3e7db4eb35d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e34a69bbbec0ef05dee9750ff3e7db4eb35d59", "html_url": "https://github.com/rust-lang/rust/commit/77e34a69bbbec0ef05dee9750ff3e7db4eb35d59"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "82ed2d6d69c35bc85f64848806416dfd8d88675a", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/292cb9bfb6bc51595404425b0ada90f21e6d9661/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292cb9bfb6bc51595404425b0ada90f21e6d9661/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=292cb9bfb6bc51595404425b0ada90f21e6d9661", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -9,7 +10,9 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `&mut Mutex::lock` calls\n     ///\n     /// **Why is this bad?** `Mutex::lock` is less efficient than\n-    /// calling `Mutex::get_mut`\n+    /// calling `Mutex::get_mut`. In addition you also have a statically\n+    /// guarantee that the mutex isn't locked, instead of just a runtime\n+    /// guarantee.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -44,19 +47,20 @@ declare_lint_pass!(MutMutexLock => [MUT_MUTEX_LOCK]);\n impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _span, args, _) = &ex.kind;\n+            if let ExprKind::MethodCall(path, method_span, args, _) = &ex.kind;\n             if path.ident.name == sym!(lock);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if let ty::Ref(_, inner_ty, Mutability::Mut) = ty.kind();\n             if is_type_diagnostic_item(cx, inner_ty, sym!(mutex_type));\n             then {\n-                span_lint_and_help(\n+                span_lint_and_sugg(\n                     cx,\n                     MUT_MUTEX_LOCK,\n-                    ex.span,\n+                    *method_span,\n                     \"calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\",\n-                    None,\n-                    \"use `&mut Mutex::get_mut` instead\",\n+                    \"change this to\",\n+                    \"get_mut\".to_owned(),\n+                    Applicability::MachineApplicable,\n                 );\n             }\n         }"}, {"sha": "36bc52e3374e1a9747ddfdcad7da7306963bb092", "filename": "tests/ui/mut_mutex_lock.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/292cb9bfb6bc51595404425b0ada90f21e6d9661/tests%2Fui%2Fmut_mutex_lock.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/292cb9bfb6bc51595404425b0ada90f21e6d9661/tests%2Fui%2Fmut_mutex_lock.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.fixed?ref=292cb9bfb6bc51595404425b0ada90f21e6d9661", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![allow(dead_code, unused_mut)]\n+#![warn(clippy::mut_mutex_lock)]\n+\n+use std::sync::{Arc, Mutex};\n+\n+fn mut_mutex_lock() {\n+    let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n+\n+    let mut value = value_mutex.get_mut().unwrap();\n+    *value += 1;\n+}\n+\n+fn no_owned_mutex_lock() {\n+    let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    let mut value = value_rc.lock().unwrap();\n+    *value += 1;\n+}\n+\n+fn main() {}"}, {"sha": "ea60df5ae1bbc92cda19453e4756aefea50833b3", "filename": "tests/ui/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292cb9bfb6bc51595404425b0ada90f21e6d9661/tests%2Fui%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292cb9bfb6bc51595404425b0ada90f21e6d9661/tests%2Fui%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.rs?ref=292cb9bfb6bc51595404425b0ada90f21e6d9661", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(dead_code, unused_mut)]\n #![warn(clippy::mut_mutex_lock)]\n \n use std::sync::{Arc, Mutex};"}, {"sha": "21c1b3486cacf5f2a23a90c16e02e268b8ff0f6b", "filename": "tests/ui/mut_mutex_lock.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292cb9bfb6bc51595404425b0ada90f21e6d9661/tests%2Fui%2Fmut_mutex_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/292cb9bfb6bc51595404425b0ada90f21e6d9661/tests%2Fui%2Fmut_mutex_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.stderr?ref=292cb9bfb6bc51595404425b0ada90f21e6d9661", "patch": "@@ -1,11 +1,10 @@\n error: calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\n-  --> $DIR/mut_mutex_lock.rs:9:21\n+  --> $DIR/mut_mutex_lock.rs:11:33\n    |\n LL |     let mut value = value_mutex.lock().unwrap();\n-   |                     ^^^^^^^^^^^^^^^^^^\n+   |                                 ^^^^ help: change this to: `get_mut`\n    |\n    = note: `-D clippy::mut-mutex-lock` implied by `-D warnings`\n-   = help: use `&mut Mutex::get_mut` instead\n \n error: aborting due to previous error\n "}]}