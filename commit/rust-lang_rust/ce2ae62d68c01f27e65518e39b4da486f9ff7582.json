{"sha": "ce2ae62d68c01f27e65518e39b4da486f9ff7582", "node_id": "C_kwDOAAsO6NoAKGNlMmFlNjJkNjhjMDFmMjdlNjU1MThlMzliNGRhNDg2ZjlmZjc1ODI", "commit": {"author": {"name": "Zhi Qi", "email": "qizhi@pingcap.com", "date": "2023-02-22T01:41:48Z"}, "committer": {"name": "Zhi Qi", "email": "qizhi@pingcap.com", "date": "2023-02-22T01:44:26Z"}, "message": "Convert a hard-warning about named static lifetimes into lint \"unused_lifetimes\"\n\nDefine the `named_static_lifetimes` lint\n\nThis lint will replace the existing hard-warning.\n\nReplace the named static lifetime hard-warning with the new lint\n\nUpdate the UI tests for the `named_static_lifetimes` lint\n\nRemove the direct dependency on `rustc_lint_defs`\n\nfix build\n\nSigned-off-by: Zhi Qi <qizhi@pingcap.com>\n\nuse \"UNUSED_LIFETIMES\" instead\n\nSigned-off-by: Zhi Qi <qizhi@pingcap.com>\n\nupdate 1 test and fix typo\n\nSigned-off-by: Zhi Qi <qizhi@pingcap.com>\n\nupdate tests\n\nSigned-off-by: Zhi Qi <qizhi@pingcap.com>\n\nfix tests: add extra blank line\n\nSigned-off-by: Zhi Qi <qizhi@pingcap.com>", "tree": {"sha": "e3d3d43f59bd0c6d187fc964b81a7097982cbb0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d3d43f59bd0c6d187fc964b81a7097982cbb0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce2ae62d68c01f27e65518e39b4da486f9ff7582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2ae62d68c01f27e65518e39b4da486f9ff7582", "html_url": "https://github.com/rust-lang/rust/commit/ce2ae62d68c01f27e65518e39b4da486f9ff7582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce2ae62d68c01f27e65518e39b4da486f9ff7582/comments", "author": {"login": "LittleFall", "id": 30543181, "node_id": "MDQ6VXNlcjMwNTQzMTgx", "avatar_url": "https://avatars.githubusercontent.com/u/30543181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LittleFall", "html_url": "https://github.com/LittleFall", "followers_url": "https://api.github.com/users/LittleFall/followers", "following_url": "https://api.github.com/users/LittleFall/following{/other_user}", "gists_url": "https://api.github.com/users/LittleFall/gists{/gist_id}", "starred_url": "https://api.github.com/users/LittleFall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LittleFall/subscriptions", "organizations_url": "https://api.github.com/users/LittleFall/orgs", "repos_url": "https://api.github.com/users/LittleFall/repos", "events_url": "https://api.github.com/users/LittleFall/events{/privacy}", "received_events_url": "https://api.github.com/users/LittleFall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LittleFall", "id": 30543181, "node_id": "MDQ6VXNlcjMwNTQzMTgx", "avatar_url": "https://avatars.githubusercontent.com/u/30543181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LittleFall", "html_url": "https://github.com/LittleFall", "followers_url": "https://api.github.com/users/LittleFall/followers", "following_url": "https://api.github.com/users/LittleFall/following{/other_user}", "gists_url": "https://api.github.com/users/LittleFall/gists{/gist_id}", "starred_url": "https://api.github.com/users/LittleFall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LittleFall/subscriptions", "organizations_url": "https://api.github.com/users/LittleFall/orgs", "repos_url": "https://api.github.com/users/LittleFall/repos", "events_url": "https://api.github.com/users/LittleFall/events{/privacy}", "received_events_url": "https://api.github.com/users/LittleFall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246eae2fab54a5139365c4e1a08c5724fb385fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/246eae2fab54a5139365c4e1a08c5724fb385fbf", "html_url": "https://github.com/rust-lang/rust/commit/246eae2fab54a5139365c4e1a08c5724fb385fbf"}], "stats": {"total": 217, "additions": 96, "deletions": 121}, "files": [{"sha": "e977767e0240972bb7c43ff5430ca53b9339f281", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -18,6 +18,7 @@ use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::*;\n use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, TyCtxt, TypeSuperVisitable};\n+use rustc_session::lint;\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -923,17 +924,16 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                         origin,\n                         ..\n                     }) => {\n-\n                         let (bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) =\n                             bound_generic_params\n-                            .iter()\n-                            .enumerate()\n-                            .map(|(late_bound_idx, param)| {\n-                                let pair = ResolvedArg::late(late_bound_idx as u32, param);\n-                                let r = late_arg_as_bound_arg(this.tcx, &pair.1, param);\n-                                (pair, r)\n-                            })\n-                            .unzip();\n+                                .iter()\n+                                .enumerate()\n+                                .map(|(late_bound_idx, param)| {\n+                                    let pair = ResolvedArg::late(late_bound_idx as u32, param);\n+                                    let r = late_arg_as_bound_arg(this.tcx, &pair.1, param);\n+                                    (pair, r)\n+                                })\n+                                .unzip();\n                         this.record_late_bound_vars(hir_id, binders.clone());\n                         // Even if there are no lifetimes defined here, we still wrap it in a binder\n                         // scope. If there happens to be a nested poly trait ref (an error), that\n@@ -968,20 +968,22 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                                     continue;\n                                 }\n                                 this.insert_lifetime(lt, ResolvedArg::StaticLifetime);\n-                                this.tcx\n-                                    .sess\n-                                    .struct_span_warn(\n-                                        lifetime.ident.span,\n-                                        &format!(\n-                                            \"unnecessary lifetime parameter `{}`\",\n+                                this.tcx.struct_span_lint_hir(\n+                                    lint::builtin::UNUSED_LIFETIMES,\n+                                    lifetime.hir_id,\n+                                    lifetime.ident.span,\n+                                    format!(\n+                                        \"unnecessary lifetime parameter `{}`\",\n+                                        lifetime.ident\n+                                    ),\n+                                    |lint| {\n+                                        let help = &format!(\n+                                            \"you can use the `'static` lifetime directly, in place of `{}`\",\n                                             lifetime.ident,\n-                                        ),\n-                                    )\n-                                    .help(&format!(\n-                                        \"you can use the `'static` lifetime directly, in place of `{}`\",\n-                                        lifetime.ident,\n-                                    ))\n-                                    .emit();\n+                                        );\n+                                        lint.help(help)\n+                                    },\n+                                );\n                             }\n                         }\n                     }"}, {"sha": "83655341d6a243756412fcf1a2369eaf324f5e94", "filename": "tests/ui/generic-associated-types/method-unsatisfied-assoc-type-predicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatisfied-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatisfied-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatisfied-assoc-type-predicate.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "previous_filename": "tests/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs"}, {"sha": "4246f8c069d4b6dee432a94d5bfab3bf67bb5657", "filename": "tests/ui/generic-associated-types/method-unsatisfied-assoc-type-predicate.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatisfied-assoc-type-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatisfied-assoc-type-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatisfied-assoc-type-predicate.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: the method `f` exists for struct `S`, but its trait bounds were not satisfied\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:28:7\n+  --> $DIR/method-unsatisfied-assoc-type-predicate.rs:28:7\n    |\n LL | struct S;\n    | --------\n@@ -12,7 +12,7 @@ LL |     a.f();\n    |       ^ method cannot be called on `S` due to unsatisfied trait bounds\n    |\n note: trait bound `<S as X>::Y<i32> = i32` was not satisfied\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:12:11\n+  --> $DIR/method-unsatisfied-assoc-type-predicate.rs:12:11\n    |\n LL | impl<T: X<Y<i32> = i32>> M for T {}\n    |           ^^^^^^^^^^^^   -     -", "previous_filename": "tests/ui/generic-associated-types/method-unsatified-assoc-type-predicate.stderr"}, {"sha": "060ee8821d8da946560087a760625e1d98484f5d", "filename": "tests/ui/generic-associated-types/unsatisfied-item-lifetime-bound.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Funsatisfied-item-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Funsatisfied-item-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Funsatisfied-item-lifetime-bound.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,3 +1,5 @@\n+#![warn(unused_lifetimes)]\n+\n pub trait X {\n     type Y<'a: 'static>;\n     //~^ WARNING unnecessary lifetime parameter", "previous_filename": "tests/ui/generic-associated-types/unsatified-item-lifetime-bound.rs"}, {"sha": "a69cd0028c1f1cf0721160079d53909c8514d7c9", "filename": "tests/ui/generic-associated-types/unsatisfied-item-lifetime-bound.stderr", "status": "renamed", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Funsatisfied-item-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fgeneric-associated-types%2Funsatisfied-item-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Funsatisfied-item-lifetime-bound.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,45 +1,50 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/unsatified-item-lifetime-bound.rs:2:12\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:4:12\n    |\n LL |     type Y<'a: 'static>;\n    |            ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n+note: the lint level is defined here\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:1:9\n+   |\n+LL | #![warn(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:11:8\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:13:8\n    |\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/unsatified-item-lifetime-bound.rs:10:10\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:12:10\n    |\n LL | struct B<'a, T: for<'r> X<Y<'r> = &'r ()>> {\n    |          ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:16:8\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:18:8\n    |\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/unsatified-item-lifetime-bound.rs:15:10\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:17:10\n    |\n LL | struct C<'a, T: X> {\n    |          ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:21:8\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:23:8\n    |\n LL |     f: <() as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/unsatified-item-lifetime-bound.rs:20:10\n+  --> $DIR/unsatisfied-item-lifetime-bound.rs:22:10\n    |\n LL | struct D<'a> {\n    |          ^^", "previous_filename": "tests/ui/generic-associated-types/unsatified-item-lifetime-bound.stderr"}, {"sha": "a6dbf3f08f2a88b80ef743712b91572d23699841", "filename": "tests/ui/impl-trait/equal-hidden-lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -5,7 +5,6 @@\n \n // `'a == 'static` so `&'a i32` is fine as the return type\n fn equal_regions_static<'a: 'static>(x: &'a i32) -> impl Sized {\n-    //~^ WARNING unnecessary lifetime parameter `'a`\n     x\n }\n "}, {"sha": "3e48aef553b16c8f9b987ebcd00fd23f95a56611", "filename": "tests/ui/impl-trait/equal-hidden-lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/246eae2fab54a5139365c4e1a08c5724fb385fbf/tests%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246eae2fab54a5139365c4e1a08c5724fb385fbf/tests%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.stderr?ref=246eae2fab54a5139365c4e1a08c5724fb385fbf", "patch": "@@ -1,10 +0,0 @@\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/equal-hidden-lifetimes.rs:7:25\n-   |\n-LL | fn equal_regions_static<'a: 'static>(x: &'a i32) -> impl Sized {\n-   |                         ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n-warning: 1 warning emitted\n-"}, {"sha": "813c1d3e2cccd9410c86a683bb6ec0b53533adbc", "filename": "tests/ui/issues/issue-30438-c.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fissues%2Fissue-30438-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fissues%2Fissue-30438-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-30438-c.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -5,7 +5,6 @@ trait Trait { type Out; }\n struct Test<'a> { s: &'a str }\n \n fn silly<'y, 'z>(_s: &'y Test<'z>) -> &'y <Test<'z> as Trait>::Out where 'z: 'static {\n-    //~^ WARN unnecessary lifetime parameter `'z`\n     let x = Test { s: \"this cannot last\" };\n     &x\n     //~^ ERROR: cannot return reference to local variable `x`"}, {"sha": "7c001088097ab54618608442b4772da575b36b7e", "filename": "tests/ui/issues/issue-30438-c.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fissues%2Fissue-30438-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fissues%2Fissue-30438-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-30438-c.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,17 +1,9 @@\n-warning: unnecessary lifetime parameter `'z`\n-  --> $DIR/issue-30438-c.rs:7:74\n-   |\n-LL | fn silly<'y, 'z>(_s: &'y Test<'z>) -> &'y <Test<'z> as Trait>::Out where 'z: 'static {\n-   |                                                                          ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'z`\n-\n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-30438-c.rs:10:5\n+  --> $DIR/issue-30438-c.rs:9:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0515`."}, {"sha": "46462c432a8c76f437e68c49e5a4fa311d090f5b", "filename": "tests/ui/regions/regions-free-region-outlives-static-outlives-free-region.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -8,6 +8,8 @@\n //\n //     'a : 'b\n \n+#![warn(unused_lifetimes)]\n+\n fn test<'a,'b>(x: &'a i32) -> &'b i32\n     where 'a: 'static //~ WARN unnecessary lifetime parameter `'a`\n {"}, {"sha": "9f03a6553ba83e05c7ca67630bfb61b8d7f0fa52", "filename": "tests/ui/regions/regions-free-region-outlives-static-outlives-free-region.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,10 +1,15 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-free-region-outlives-static-outlives-free-region.rs:12:11\n+  --> $DIR/regions-free-region-outlives-static-outlives-free-region.rs:14:11\n    |\n LL |     where 'a: 'static\n    |           ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n+note: the lint level is defined here\n+  --> $DIR/regions-free-region-outlives-static-outlives-free-region.rs:11:9\n+   |\n+LL | #![warn(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "e2ebb394d0ad2098ee72e70f31805b17436250d6", "filename": "tests/ui/regions/regions-static-bound-rpass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-static-bound-rpass.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![warn(unused_lifetimes)]\n+\n fn invariant_id<'a,'b>(t: &'b mut &'static ()) -> &'b mut &'a ()\n     where 'a: 'static { t }\n //~^ WARN unnecessary lifetime parameter `'a`"}, {"sha": "f0f3a4c5261aac2b8e0817029ff9bbfc2177d151", "filename": "tests/ui/regions/regions-static-bound-rpass.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-static-bound-rpass.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,21 +1,26 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-static-bound-rpass.rs:4:11\n+  --> $DIR/regions-static-bound-rpass.rs:6:11\n    |\n LL |     where 'a: 'static { t }\n    |           ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n+note: the lint level is defined here\n+  --> $DIR/regions-static-bound-rpass.rs:3:9\n+   |\n+LL | #![warn(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n \n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-static-bound-rpass.rs:8:11\n+  --> $DIR/regions-static-bound-rpass.rs:10:11\n    |\n LL |     where 'a: 'static { t }\n    |           ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n warning: unnecessary lifetime parameter `'b`\n-  --> $DIR/regions-static-bound-rpass.rs:12:19\n+  --> $DIR/regions-static-bound-rpass.rs:14:19\n    |\n LL |     where 'a: 'b, 'b: 'static { t }\n    |                   ^^"}, {"sha": "e7aa8795f01a6aeed8894c91771c630dbc642f70", "filename": "tests/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-static-bound.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,6 +1,8 @@\n-fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n-    where 'a: 'static { t }\n-//~^ WARN unnecessary lifetime parameter `'a`\n+#![warn(unused_lifetimes)]\n+\n+fn static_id<'a,'b>(t: &'a ()) -> &'static () where 'a: 'static { t }\n+//~^ WARN lifetime parameter `'b` never used\n+//~| WARN unnecessary lifetime parameter `'a`\n \n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }"}, {"sha": "b314e9fe85d4e547c55923a1385a56020bbe8f91", "filename": "tests/ui/regions/regions-static-bound.stderr", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fregions%2Fregions-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-static-bound.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,29 +1,43 @@\n+warning: lifetime parameter `'b` never used\n+  --> $DIR/regions-static-bound.rs:3:17\n+   |\n+LL | fn static_id<'a,'b>(t: &'a ()) -> &'static () where 'a: 'static { t }\n+   |                -^^\n+   |                |\n+   |                help: elide the unused lifetime\n+   |\n+note: the lint level is defined here\n+  --> $DIR/regions-static-bound.rs:1:9\n+   |\n+LL | #![warn(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-static-bound.rs:2:11\n+  --> $DIR/regions-static-bound.rs:3:53\n    |\n-LL |     where 'a: 'static { t }\n-   |           ^^\n+LL | fn static_id<'a,'b>(t: &'a ()) -> &'static () where 'a: 'static { t }\n+   |                                                     ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n warning: unnecessary lifetime parameter `'b`\n-  --> $DIR/regions-static-bound.rs:6:19\n+  --> $DIR/regions-static-bound.rs:8:19\n    |\n LL |     where 'a: 'b, 'b: 'static { t }\n    |                   ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:10:5\n+  --> $DIR/regions-static-bound.rs:12:5\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/regions-static-bound.rs:15:5\n+  --> $DIR/regions-static-bound.rs:17:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |          -  - let's call the lifetime of this reference `'1`\n@@ -36,7 +50,7 @@ LL |     static_id(&u);\n    |     argument requires that `'1` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/regions-static-bound.rs:17:5\n+  --> $DIR/regions-static-bound.rs:19:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                  -  - let's call the lifetime of this reference `'2`\n@@ -49,6 +63,6 @@ LL |     static_id_indirect(&v);\n    |     `v` escapes the function body here\n    |     argument requires that `'2` must outlive `'static`\n \n-error: aborting due to 3 previous errors; 2 warnings emitted\n+error: aborting due to 3 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0521`."}, {"sha": "847fe87b2ea378af454453f9bc421e04afc215dd", "filename": "tests/ui/static/static-lifetime-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,4 +1,4 @@\n-fn f<'a: 'static>(_: &'a i32) {} //~WARN unnecessary lifetime parameter `'a`\n+fn f<'a: 'static>(_: &'a i32) {}\n \n fn main() {\n     let x = 0;"}, {"sha": "19e55a6582e86f10ea78af1149d31ba7cd5fdb3e", "filename": "tests/ui/static/static-lifetime-bound.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,11 +1,3 @@\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/static-lifetime-bound.rs:1:6\n-   |\n-LL | fn f<'a: 'static>(_: &'a i32) {}\n-   |      ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n error[E0597]: `x` does not live long enough\n   --> $DIR/static-lifetime-bound.rs:5:7\n    |\n@@ -19,6 +11,6 @@ LL |     f(&x);\n LL | }\n    | - `x` dropped here while still borrowed\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "7c3a3a844060634ab4391168bb5e1d5b632cb331", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -6,7 +6,6 @@\n type X<'a> = impl Into<&'static str> + From<&'a str>;\n \n fn f<'a: 'static>(t: &'a str) -> X<'a> {\n-    //~^ WARNING unnecessary lifetime parameter\n     t\n     //~^ ERROR expected generic lifetime parameter, found `'static`\n }"}, {"sha": "962dedde09a52d033409bc22875d0c8d017c4c00", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,20 +1,12 @@\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:8:6\n-   |\n-LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n-   |      ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n error[E0792]: expected generic lifetime parameter, found `'static`\n-  --> $DIR/bounds-are-checked.rs:10:5\n+  --> $DIR/bounds-are-checked.rs:9:5\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |        -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n ...\n LL |     t\n    |     ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0792`."}, {"sha": "6f9434255a802fa576c5ad806d8ce34399ebcba1", "filename": "tests/ui/type-alias-impl-trait/implied_lifetime_wf_check3.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -4,7 +4,6 @@ mod test_lifetime_param {\n     type Ty<'a> = impl Sized + 'a;\n     fn defining(a: &str) -> Ty<'_> { a }\n     fn assert_static<'a: 'static>() {}\n-    //~^ WARN: unnecessary lifetime parameter `'a`\n     fn test<'a>() where Ty<'a>: 'static { assert_static::<'a>() }\n     //~^ ERROR: lifetime may not live long enough\n }\n@@ -13,14 +12,12 @@ mod test_higher_kinded_lifetime_param {\n     type Ty<'a> = impl Sized + 'a;\n     fn defining(a: &str) -> Ty<'_> { a }\n     fn assert_static<'a: 'static>() {}\n-    //~^ WARN: unnecessary lifetime parameter `'a`\n     fn test<'a>() where for<'b> Ty<'b>: 'a { assert_static::<'a>() }\n     //~^ ERROR: lifetime may not live long enough\n }\n \n mod test_higher_kinded_lifetime_param2 {\n     fn assert_static<'a: 'static>() {}\n-    //~^ WARN: unnecessary lifetime parameter `'a`\n     fn test<'a>() { assert_static::<'a>() }\n     //~^ ERROR: lifetime may not live long enough\n }"}, {"sha": "399775641f8a3a73c0efec54ca1679c3f65eee5d", "filename": "tests/ui/type-alias-impl-trait/implied_lifetime_wf_check3.stderr", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce2ae62d68c01f27e65518e39b4da486f9ff7582/tests%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.stderr?ref=ce2ae62d68c01f27e65518e39b4da486f9ff7582", "patch": "@@ -1,49 +1,25 @@\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/implied_lifetime_wf_check3.rs:6:22\n-   |\n-LL |     fn assert_static<'a: 'static>() {}\n-   |                      ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/implied_lifetime_wf_check3.rs:15:22\n-   |\n-LL |     fn assert_static<'a: 'static>() {}\n-   |                      ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/implied_lifetime_wf_check3.rs:22:22\n-   |\n-LL |     fn assert_static<'a: 'static>() {}\n-   |                      ^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n error: lifetime may not live long enough\n-  --> $DIR/implied_lifetime_wf_check3.rs:8:43\n+  --> $DIR/implied_lifetime_wf_check3.rs:7:43\n    |\n LL |     fn test<'a>() where Ty<'a>: 'static { assert_static::<'a>() }\n    |             -- lifetime `'a` defined here ^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied_lifetime_wf_check3.rs:17:46\n+  --> $DIR/implied_lifetime_wf_check3.rs:15:46\n    |\n LL |     fn test<'a>() where for<'b> Ty<'b>: 'a { assert_static::<'a>() }\n    |             -- lifetime `'a` defined here    ^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied_lifetime_wf_check3.rs:24:21\n+  --> $DIR/implied_lifetime_wf_check3.rs:21:21\n    |\n LL |     fn test<'a>() { assert_static::<'a>() }\n    |             --      ^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n    |             |\n    |             lifetime `'a` defined here\n \n error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/implied_lifetime_wf_check3.rs:32:41\n+  --> $DIR/implied_lifetime_wf_check3.rs:29:41\n    |\n LL |     fn test<A>() where Ty<A>: 'static { assert_static::<A>() }\n    |                                         ^^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n@@ -53,6 +29,6 @@ help: consider adding an explicit lifetime bound...\n LL |     fn test<A: 'static>() where Ty<A>: 'static { assert_static::<A>() }\n    |              +++++++++\n \n-error: aborting due to 4 previous errors; 3 warnings emitted\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}]}