{"sha": "eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTExYzM1YzlmNWI3YWY0OGZkNWQ0NWUyMjFmNWY0MGZjNGZkNjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-19T05:00:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-19T05:00:02Z"}, "message": "Rollup merge of #37218 - srinivasreddy:sync, r=nrc\n\nRun rustfmt on libcore/sync folder", "tree": {"sha": "5803a896403fef1d96ac1e1ad4414d79958619ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5803a896403fef1d96ac1e1ad4414d79958619ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60", "html_url": "https://github.com/rust-lang/rust/commit/eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094eaf025089218733305858fa262f826b6f11b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/094eaf025089218733305858fa262f826b6f11b8", "html_url": "https://github.com/rust-lang/rust/commit/094eaf025089218733305858fa262f826b6f11b8"}, {"sha": "5afd6d8206df0d9bfca5dafbf6b2800fda4a165a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5afd6d8206df0d9bfca5dafbf6b2800fda4a165a", "html_url": "https://github.com/rust-lang/rust/commit/5afd6d8206df0d9bfca5dafbf6b2800fda4a165a"}], "stats": {"total": 114, "additions": 58, "deletions": 56}, "files": [{"sha": "657f7e7992fee06ba53947f87802138df76500a7", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 58, "deletions": 56, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=eae11c35c9f5b7af48fd5d45e221f5f40fc4fd60", "patch": "@@ -277,7 +277,9 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, val: bool, order: Ordering) {\n-        unsafe { atomic_store(self.v.get(), val as u8, order); }\n+        unsafe {\n+            atomic_store(self.v.get(), val as u8, order);\n+        }\n     }\n \n     /// Stores a value into the bool, returning the old value.\n@@ -366,9 +368,11 @@ impl AtomicBool {\n                             current: bool,\n                             new: bool,\n                             success: Ordering,\n-                            failure: Ordering) -> Result<bool, bool> {\n-        match unsafe { atomic_compare_exchange(self.v.get(), current as u8, new as u8,\n-                                               success, failure) } {\n+                            failure: Ordering)\n+                            -> Result<bool, bool> {\n+        match unsafe {\n+            atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)\n+        } {\n             Ok(x) => Ok(x != 0),\n             Err(x) => Err(x != 0),\n         }\n@@ -409,9 +413,11 @@ impl AtomicBool {\n                                  current: bool,\n                                  new: bool,\n                                  success: Ordering,\n-                                 failure: Ordering) -> Result<bool, bool> {\n-        match unsafe { atomic_compare_exchange_weak(self.v.get(), current as u8, new as u8,\n-                                                    success, failure) } {\n+                                 failure: Ordering)\n+                                 -> Result<bool, bool> {\n+        match unsafe {\n+            atomic_compare_exchange_weak(self.v.get(), current as u8, new as u8, success, failure)\n+        } {\n             Ok(x) => Ok(x != 0),\n             Err(x) => Err(x != 0),\n         }\n@@ -632,9 +638,7 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn load(&self, order: Ordering) -> *mut T {\n-        unsafe {\n-            atomic_load(self.p.get() as *mut usize, order) as *mut T\n-        }\n+        unsafe { atomic_load(self.p.get() as *mut usize, order) as *mut T }\n     }\n \n     /// Stores a value into the pointer.\n@@ -660,7 +664,9 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, ptr: *mut T, order: Ordering) {\n-        unsafe { atomic_store(self.p.get() as *mut usize, ptr as usize, order); }\n+        unsafe {\n+            atomic_store(self.p.get() as *mut usize, ptr as usize, order);\n+        }\n     }\n \n     /// Stores a value into the pointer, returning the old value.\n@@ -745,7 +751,8 @@ impl<T> AtomicPtr<T> {\n                             current: *mut T,\n                             new: *mut T,\n                             success: Ordering,\n-                            failure: Ordering) -> Result<*mut T, *mut T> {\n+                            failure: Ordering)\n+                            -> Result<*mut T, *mut T> {\n         unsafe {\n             let res = atomic_compare_exchange(self.p.get() as *mut usize,\n                                               current as usize,\n@@ -794,7 +801,8 @@ impl<T> AtomicPtr<T> {\n                                  current: *mut T,\n                                  new: *mut T,\n                                  success: Ordering,\n-                                 failure: Ordering) -> Result<*mut T, *mut T> {\n+                                 failure: Ordering)\n+                                 -> Result<*mut T, *mut T> {\n         unsafe {\n             let res = atomic_compare_exchange_weak(self.p.get() as *mut usize,\n                                                    current as usize,\n@@ -1266,9 +1274,9 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n     match order {\n         Release => Relaxed,\n         Relaxed => Relaxed,\n-        SeqCst  => SeqCst,\n+        SeqCst => SeqCst,\n         Acquire => Acquire,\n-        AcqRel  => Acquire,\n+        AcqRel => Acquire,\n     }\n }\n \n@@ -1277,9 +1285,9 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n     match order {\n         Release => intrinsics::atomic_store_rel(dst, val),\n         Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_store(dst, val),\n+        SeqCst => intrinsics::atomic_store(dst, val),\n         Acquire => panic!(\"there is no such thing as an acquire store\"),\n-        AcqRel  => panic!(\"there is no such thing as an acquire/release store\"),\n+        AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n     }\n }\n \n@@ -1288,9 +1296,9 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_load_acq(dst),\n         Relaxed => intrinsics::atomic_load_relaxed(dst),\n-        SeqCst  => intrinsics::atomic_load(dst),\n+        SeqCst => intrinsics::atomic_load(dst),\n         Release => panic!(\"there is no such thing as a release load\"),\n-        AcqRel  => panic!(\"there is no such thing as an acquire/release load\"),\n+        AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n     }\n }\n \n@@ -1299,9 +1307,9 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n         Release => intrinsics::atomic_xchg_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xchg_acqrel(dst, val),\n+        AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_xchg(dst, val)\n+        SeqCst => intrinsics::atomic_xchg(dst, val),\n     }\n }\n \n@@ -1311,9 +1319,9 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xadd_acq(dst, val),\n         Release => intrinsics::atomic_xadd_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xadd_acqrel(dst, val),\n+        AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_xadd(dst, val)\n+        SeqCst => intrinsics::atomic_xadd(dst, val),\n     }\n }\n \n@@ -1323,9 +1331,9 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xsub_acq(dst, val),\n         Release => intrinsics::atomic_xsub_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xsub_acqrel(dst, val),\n+        AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_xsub(dst, val)\n+        SeqCst => intrinsics::atomic_xsub(dst, val),\n     }\n }\n \n@@ -1334,63 +1342,57 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n                                      old: T,\n                                      new: T,\n                                      success: Ordering,\n-                                     failure: Ordering) -> Result<T, T> {\n+                                     failure: Ordering)\n+                                     -> Result<T, T> {\n     let (val, ok) = match (success, failure) {\n         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),\n         (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),\n-        (AcqRel, Acquire)  => intrinsics::atomic_cxchg_acqrel(dst, old, new),\n+        (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),\n         (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),\n-        (SeqCst, SeqCst)   => intrinsics::atomic_cxchg(dst, old, new),\n+        (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),\n         (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),\n-        (AcqRel, Relaxed)  => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n-        (SeqCst, Relaxed)  => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n-        (SeqCst, Acquire)  => intrinsics::atomic_cxchg_failacq(dst, old, new),\n+        (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n+        (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n+        (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n     };\n-    if ok {\n-        Ok(val)\n-    } else {\n-        Err(val)\n-    }\n+    if ok { Ok(val) } else { Err(val) }\n }\n \n #[inline]\n unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n                                           old: T,\n                                           new: T,\n                                           success: Ordering,\n-                                          failure: Ordering) -> Result<T, T> {\n+                                          failure: Ordering)\n+                                          -> Result<T, T> {\n     let (val, ok) = match (success, failure) {\n         (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acq(dst, old, new),\n         (Release, Relaxed) => intrinsics::atomic_cxchgweak_rel(dst, old, new),\n-        (AcqRel, Acquire)  => intrinsics::atomic_cxchgweak_acqrel(dst, old, new),\n+        (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel(dst, old, new),\n         (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),\n-        (SeqCst, SeqCst)   => intrinsics::atomic_cxchgweak(dst, old, new),\n+        (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak(dst, old, new),\n         (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),\n-        (AcqRel, Relaxed)  => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n-        (SeqCst, Relaxed)  => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n-        (SeqCst, Acquire)  => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n+        (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n+        (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n+        (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n     };\n-    if ok {\n-        Ok(val)\n-    } else {\n-        Err(val)\n-    }\n+    if ok { Ok(val) } else { Err(val) }\n }\n \n #[inline]\n unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_and_acq(dst, val),\n         Release => intrinsics::atomic_and_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_and_acqrel(dst, val),\n+        AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_and(dst, val)\n+        SeqCst => intrinsics::atomic_and(dst, val),\n     }\n }\n \n@@ -1399,9 +1401,9 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_or_acq(dst, val),\n         Release => intrinsics::atomic_or_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_or_acqrel(dst, val),\n+        AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_or(dst, val)\n+        SeqCst => intrinsics::atomic_or(dst, val),\n     }\n }\n \n@@ -1410,9 +1412,9 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xor_acq(dst, val),\n         Release => intrinsics::atomic_xor_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xor_acqrel(dst, val),\n+        AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_xor(dst, val)\n+        SeqCst => intrinsics::atomic_xor(dst, val),\n     }\n }\n \n@@ -1443,9 +1445,9 @@ pub fn fence(order: Ordering) {\n         match order {\n             Acquire => intrinsics::atomic_fence_acq(),\n             Release => intrinsics::atomic_fence_rel(),\n-            AcqRel  => intrinsics::atomic_fence_acqrel(),\n-            SeqCst  => intrinsics::atomic_fence(),\n-            Relaxed => panic!(\"there is no such thing as a relaxed fence\")\n+            AcqRel => intrinsics::atomic_fence_acqrel(),\n+            SeqCst => intrinsics::atomic_fence(),\n+            Relaxed => panic!(\"there is no such thing as a relaxed fence\"),\n         }\n     }\n }"}]}