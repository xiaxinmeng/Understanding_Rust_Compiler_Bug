{"sha": "c6e515044108498f3e06c81d0e24d430bae2ab40", "node_id": "C_kwDOAAsO6NoAKGM2ZTUxNTA0NDEwODQ5OGYzZTA2YzgxZDBlMjRkNDMwYmFlMmFiNDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T11:18:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T11:18:02Z"}, "message": "Rollup merge of #103935 - GuillaumeGomez:remove-rustdoc-visibility-ty, r=notriddle\n\nRemove rustdoc clean::Visibility type\n\nFixes #90852.\n\nFollow-up of https://github.com/rust-lang/rust/pull/103690.\n\nThis PR completely removes the rustdoc `clean::Visibility` type to use the `rustc_middle` one instead. I don't think there will be any impact on perf.\n\nr? `@notriddle`", "tree": {"sha": "f314ed31ea784a5d3a4a059f7417c79f7953c89a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f314ed31ea784a5d3a4a059f7417c79f7953c89a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e515044108498f3e06c81d0e24d430bae2ab40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZPTqCRBK7hj4Ov3rIwAA/cMIACEfS4gG0Kja2vsBv/Q7t2Ry\nuY2Cg+HMfJldV8NKXXTito+CtC6WKTHI58VA+6aPZgb8bzpDs9yyI1IWnolgKHIZ\nM7M/mP7a30odr6hp90qtBOGxNFWvogPRqHSwTlJmz+K9EiXpRbbHvfOkpUK9dzDn\nVplmmUiKxU3kCKFkrkac03XPH0pGBqd3uPuALwPsHZpu/TNreABULp6taI5rxA1q\nbUEbTV/14r2YCgBMv/jizcITKKyHue7xvDRe1KdqS18mvF63DeLs389vhjavr3wF\n+Y5p7QLuMiwVBeaiK76mE9d7nIxqDIp8gG9Joonk53VaaLQ0lCKtCqupmlTOh14=\n=MHCe\n-----END PGP SIGNATURE-----\n", "payload": "tree f314ed31ea784a5d3a4a059f7417c79f7953c89a\nparent d976a29c300293ecf7a08ee996a7d295a7cf0b0b\nparent df326946ed5668bf05c37ece50e271b1c9fbdf1e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667560682 +0100\ncommitter GitHub <noreply@github.com> 1667560682 +0100\n\nRollup merge of #103935 - GuillaumeGomez:remove-rustdoc-visibility-ty, r=notriddle\n\nRemove rustdoc clean::Visibility type\n\nFixes #90852.\n\nFollow-up of https://github.com/rust-lang/rust/pull/103690.\n\nThis PR completely removes the rustdoc `clean::Visibility` type to use the `rustc_middle` one instead. I don't think there will be any impact on perf.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e515044108498f3e06c81d0e24d430bae2ab40", "html_url": "https://github.com/rust-lang/rust/commit/c6e515044108498f3e06c81d0e24d430bae2ab40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e515044108498f3e06c81d0e24d430bae2ab40/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d976a29c300293ecf7a08ee996a7d295a7cf0b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d976a29c300293ecf7a08ee996a7d295a7cf0b0b", "html_url": "https://github.com/rust-lang/rust/commit/d976a29c300293ecf7a08ee996a7d295a7cf0b0b"}, {"sha": "df326946ed5668bf05c37ece50e271b1c9fbdf1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df326946ed5668bf05c37ece50e271b1c9fbdf1e", "html_url": "https://github.com/rust-lang/rust/commit/df326946ed5668bf05c37ece50e271b1c9fbdf1e"}], "stats": {"total": 282, "additions": 129, "deletions": 153}, "files": [{"sha": "841c4f9d530051526ab9a2a885f08b27cf19d38e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -19,8 +19,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use crate::clean::{\n     self, clean_fn_decl_from_did_and_sig, clean_generics, clean_impl_item, clean_middle_assoc_item,\n     clean_middle_field, clean_middle_ty, clean_trait_ref_with_bindings, clean_ty,\n-    clean_ty_generics, clean_variant_def, clean_visibility, utils, Attributes, AttributesExt,\n-    ImplKind, ItemId, Type,\n+    clean_ty_generics, clean_variant_def, utils, Attributes, AttributesExt, ImplKind, ItemId, Type,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -654,7 +653,7 @@ fn build_macro(\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n-                let vis = clean_visibility(cx.tcx.visibility(import_def_id.unwrap_or(def_id)));\n+                let vis = cx.tcx.visibility(import_def_id.unwrap_or(def_id));\n                 clean::MacroItem(clean::Macro {\n                     source: utils::display_macro_source(cx, name, def, def_id, vis),\n                 })"}, {"sha": "8d38f2df0d85c7f8f06c0ccc2acba3d1dc4d3121", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -1799,13 +1799,6 @@ pub(crate) fn clean_field_with_def_id(\n     Item::from_def_id_and_parts(def_id, Some(name), StructFieldItem(ty), cx)\n }\n \n-pub(crate) fn clean_visibility(vis: ty::Visibility<DefId>) -> Visibility {\n-    match vis {\n-        ty::Visibility::Public => Visibility::Public,\n-        ty::Visibility::Restricted(module) => Visibility::Restricted(module),\n-    }\n-}\n-\n pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n     let kind = match variant.ctor_kind {\n         CtorKind::Const => Variant::CLike(match variant.discr {\n@@ -1962,7 +1955,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n             }\n             ItemKind::Macro(ref macro_def, _) => {\n-                let ty_vis = clean_visibility(cx.tcx.visibility(def_id));\n+                let ty_vis = cx.tcx.visibility(def_id);\n                 MacroItem(Macro {\n                     source: display_macro_source(cx, name, macro_def, def_id, ty_vis),\n                 })"}, {"sha": "fea3690e50a2149b79f49186b174b02bbc027455", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -24,7 +24,7 @@ use rustc_hir::{BodyId, Mutability};\n use rustc_hir_analysis::check::intrinsic::intrinsic_operation_unsafety;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt, Visibility};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n@@ -34,7 +34,6 @@ use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::cfg::Cfg;\n-use crate::clean::clean_visibility;\n use crate::clean::external_path;\n use crate::clean::inline::{self, print_inlined_const};\n use crate::clean::utils::{is_literal_expr, print_const_expr, print_evaluated_const};\n@@ -51,7 +50,6 @@ pub(crate) use self::Type::{\n     Array, BareFunction, BorrowedRef, DynTrait, Generic, ImplTrait, Infer, Primitive, QPath,\n     RawPointer, Slice, Tuple,\n };\n-pub(crate) use self::Visibility::{Inherited, Public};\n \n #[cfg(test)]\n mod tests;\n@@ -703,26 +701,28 @@ impl Item {\n         Some(header)\n     }\n \n-    pub(crate) fn visibility(&self, tcx: TyCtxt<'_>) -> Visibility {\n+    /// Returns the visibility of the current item. If the visibility is \"inherited\", then `None`\n+    /// is returned.\n+    pub(crate) fn visibility(&self, tcx: TyCtxt<'_>) -> Option<Visibility<DefId>> {\n         let def_id = match self.item_id {\n             // Anything but DefId *shouldn't* matter, but return a reasonable value anyway.\n-            ItemId::Auto { .. } | ItemId::Blanket { .. } => return Visibility::Inherited,\n+            ItemId::Auto { .. } | ItemId::Blanket { .. } => return None,\n             // Primitives and Keywords are written in the source code as private modules.\n             // The modules need to be private so that nobody actually uses them, but the\n             // keywords and primitives that they are documenting are public.\n-            ItemId::Primitive(..) => return Visibility::Public,\n+            ItemId::Primitive(..) => return Some(Visibility::Public),\n             ItemId::DefId(def_id) => def_id,\n         };\n \n         match *self.kind {\n             // Explication on `ItemId::Primitive` just above.\n-            ItemKind::KeywordItem | ItemKind::PrimitiveItem(_) => return Visibility::Public,\n+            ItemKind::KeywordItem | ItemKind::PrimitiveItem(_) => return Some(Visibility::Public),\n             // Variant fields inherit their enum's visibility.\n             StructFieldItem(..) if is_field_vis_inherited(tcx, def_id) => {\n-                return Visibility::Inherited;\n+                return None;\n             }\n             // Variants always inherit visibility\n-            VariantItem(..) => return Visibility::Inherited,\n+            VariantItem(..) => return None,\n             // Trait items inherit the trait's visibility\n             AssocConstItem(..) | TyAssocConstItem(..) | AssocTypeItem(..) | TyAssocTypeItem(..)\n             | TyMethodItem(..) | MethodItem(..) => {\n@@ -736,7 +736,7 @@ impl Item {\n                     }\n                 };\n                 if is_trait_item {\n-                    return Visibility::Inherited;\n+                    return None;\n                 }\n             }\n             _ => {}\n@@ -745,7 +745,7 @@ impl Item {\n             Some(inlined) => inlined,\n             None => def_id,\n         };\n-        clean_visibility(tcx.visibility(def_id))\n+        Some(tcx.visibility(def_id))\n     }\n }\n \n@@ -2075,24 +2075,6 @@ impl From<hir::PrimTy> for PrimitiveType {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub(crate) enum Visibility {\n-    /// `pub`\n-    Public,\n-    /// Visibility inherited from parent.\n-    ///\n-    /// For example, this is the visibility of private items and of enum variants.\n-    Inherited,\n-    /// `pub(crate)`, `pub(super)`, or `pub(in path::to::somewhere)`\n-    Restricted(DefId),\n-}\n-\n-impl Visibility {\n-    pub(crate) fn is_public(&self) -> bool {\n-        matches!(self, Visibility::Public)\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n pub(crate) struct Struct {\n     pub(crate) struct_type: CtorKind,"}, {"sha": "df20dc3fc3f7e995e2e42fbce662da3830859da5", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -4,9 +4,10 @@ use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n     clean_doc_module, clean_middle_const, clean_middle_region, clean_middle_ty, inline, Crate,\n     ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path,\n-    PathSegment, Primitive, PrimitiveType, Type, TypeBinding, Visibility,\n+    PathSegment, Primitive, PrimitiveType, Type, TypeBinding,\n };\n use crate::core::DocContext;\n+use crate::html::format::visibility_to_src_with_space;\n \n use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n@@ -583,7 +584,7 @@ pub(super) fn display_macro_source(\n     name: Symbol,\n     def: &ast::MacroDef,\n     def_id: DefId,\n-    vis: Visibility,\n+    vis: ty::Visibility<DefId>,\n ) -> String {\n     let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n     // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n@@ -595,14 +596,14 @@ pub(super) fn display_macro_source(\n         if matchers.len() <= 1 {\n             format!(\n                 \"{}macro {}{} {{\\n    ...\\n}}\",\n-                vis.to_src_with_space(cx.tcx, def_id),\n+                visibility_to_src_with_space(Some(vis), cx.tcx, def_id),\n                 name,\n                 matchers.map(|matcher| render_macro_matcher(cx.tcx, matcher)).collect::<String>(),\n             )\n         } else {\n             format!(\n                 \"{}macro {} {{\\n{}}}\",\n-                vis.to_src_with_space(cx.tcx, def_id),\n+                visibility_to_src_with_space(Some(vis), cx.tcx, def_id),\n                 name,\n                 render_macro_arms(cx.tcx, matchers, \",\"),\n             )"}, {"sha": "06db3fb0ec4000794de001220a0feceffb0b390b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 74, "deletions": 77, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -1420,87 +1420,84 @@ impl clean::FnDecl {\n     }\n }\n \n-impl clean::Visibility {\n-    pub(crate) fn print_with_space<'a, 'tcx: 'a>(\n-        self,\n-        item_did: ItemId,\n-        cx: &'a Context<'tcx>,\n-    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        use std::fmt::Write as _;\n-\n-        let to_print: Cow<'static, str> = match self {\n-            clean::Public => \"pub \".into(),\n-            clean::Inherited => \"\".into(),\n-            clean::Visibility::Restricted(vis_did) => {\n-                // FIXME(camelid): This may not work correctly if `item_did` is a module.\n-                //                 However, rustdoc currently never displays a module's\n-                //                 visibility, so it shouldn't matter.\n-                let parent_module = find_nearest_parent_module(cx.tcx(), item_did.expect_def_id());\n-\n-                if vis_did.is_crate_root() {\n-                    \"pub(crate) \".into()\n-                } else if parent_module == Some(vis_did) {\n-                    // `pub(in foo)` where `foo` is the parent module\n-                    // is the same as no visibility modifier\n-                    \"\".into()\n-                } else if parent_module\n-                    .and_then(|parent| find_nearest_parent_module(cx.tcx(), parent))\n-                    == Some(vis_did)\n-                {\n-                    \"pub(super) \".into()\n-                } else {\n-                    let path = cx.tcx().def_path(vis_did);\n-                    debug!(\"path={:?}\", path);\n-                    // modified from `resolved_path()` to work with `DefPathData`\n-                    let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n-                    let anchor = anchor(vis_did, last_name, cx).to_string();\n-\n-                    let mut s = \"pub(in \".to_owned();\n-                    for seg in &path.data[..path.data.len() - 1] {\n-                        let _ = write!(s, \"{}::\", seg.data.get_opt_name().unwrap());\n-                    }\n-                    let _ = write!(s, \"{}) \", anchor);\n-                    s.into()\n+pub(crate) fn visibility_print_with_space<'a, 'tcx: 'a>(\n+    visibility: Option<ty::Visibility<DefId>>,\n+    item_did: ItemId,\n+    cx: &'a Context<'tcx>,\n+) -> impl fmt::Display + 'a + Captures<'tcx> {\n+    use std::fmt::Write as _;\n+\n+    let to_print: Cow<'static, str> = match visibility {\n+        None => \"\".into(),\n+        Some(ty::Visibility::Public) => \"pub \".into(),\n+        Some(ty::Visibility::Restricted(vis_did)) => {\n+            // FIXME(camelid): This may not work correctly if `item_did` is a module.\n+            //                 However, rustdoc currently never displays a module's\n+            //                 visibility, so it shouldn't matter.\n+            let parent_module = find_nearest_parent_module(cx.tcx(), item_did.expect_def_id());\n+\n+            if vis_did.is_crate_root() {\n+                \"pub(crate) \".into()\n+            } else if parent_module == Some(vis_did) {\n+                // `pub(in foo)` where `foo` is the parent module\n+                // is the same as no visibility modifier\n+                \"\".into()\n+            } else if parent_module.and_then(|parent| find_nearest_parent_module(cx.tcx(), parent))\n+                == Some(vis_did)\n+            {\n+                \"pub(super) \".into()\n+            } else {\n+                let path = cx.tcx().def_path(vis_did);\n+                debug!(\"path={:?}\", path);\n+                // modified from `resolved_path()` to work with `DefPathData`\n+                let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n+                let anchor = anchor(vis_did, last_name, cx).to_string();\n+\n+                let mut s = \"pub(in \".to_owned();\n+                for seg in &path.data[..path.data.len() - 1] {\n+                    let _ = write!(s, \"{}::\", seg.data.get_opt_name().unwrap());\n                 }\n+                let _ = write!(s, \"{}) \", anchor);\n+                s.into()\n             }\n-        };\n-        display_fn(move |f| write!(f, \"{}\", to_print))\n-    }\n+        }\n+    };\n+    display_fn(move |f| write!(f, \"{}\", to_print))\n+}\n \n-    /// This function is the same as print_with_space, except that it renders no links.\n-    /// It's used for macros' rendered source view, which is syntax highlighted and cannot have\n-    /// any HTML in it.\n-    pub(crate) fn to_src_with_space<'a, 'tcx: 'a>(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        item_did: DefId,\n-    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        let to_print = match self {\n-            clean::Public => \"pub \".to_owned(),\n-            clean::Inherited => String::new(),\n-            clean::Visibility::Restricted(vis_did) => {\n-                // FIXME(camelid): This may not work correctly if `item_did` is a module.\n-                //                 However, rustdoc currently never displays a module's\n-                //                 visibility, so it shouldn't matter.\n-                let parent_module = find_nearest_parent_module(tcx, item_did);\n-\n-                if vis_did.is_crate_root() {\n-                    \"pub(crate) \".to_owned()\n-                } else if parent_module == Some(vis_did) {\n-                    // `pub(in foo)` where `foo` is the parent module\n-                    // is the same as no visibility modifier\n-                    String::new()\n-                } else if parent_module.and_then(|parent| find_nearest_parent_module(tcx, parent))\n-                    == Some(vis_did)\n-                {\n-                    \"pub(super) \".to_owned()\n-                } else {\n-                    format!(\"pub(in {}) \", tcx.def_path_str(vis_did))\n-                }\n+/// This function is the same as print_with_space, except that it renders no links.\n+/// It's used for macros' rendered source view, which is syntax highlighted and cannot have\n+/// any HTML in it.\n+pub(crate) fn visibility_to_src_with_space<'a, 'tcx: 'a>(\n+    visibility: Option<ty::Visibility<DefId>>,\n+    tcx: TyCtxt<'tcx>,\n+    item_did: DefId,\n+) -> impl fmt::Display + 'a + Captures<'tcx> {\n+    let to_print = match visibility {\n+        None => String::new(),\n+        Some(ty::Visibility::Public) => \"pub \".to_owned(),\n+        Some(ty::Visibility::Restricted(vis_did)) => {\n+            // FIXME(camelid): This may not work correctly if `item_did` is a module.\n+            //                 However, rustdoc currently never displays a module's\n+            //                 visibility, so it shouldn't matter.\n+            let parent_module = find_nearest_parent_module(tcx, item_did);\n+\n+            if vis_did.is_crate_root() {\n+                \"pub(crate) \".to_owned()\n+            } else if parent_module == Some(vis_did) {\n+                // `pub(in foo)` where `foo` is the parent module\n+                // is the same as no visibility modifier\n+                String::new()\n+            } else if parent_module.and_then(|parent| find_nearest_parent_module(tcx, parent))\n+                == Some(vis_did)\n+            {\n+                \"pub(super) \".to_owned()\n+            } else {\n+                format!(\"pub(in {}) \", tcx.def_path_str(vis_did))\n             }\n-        };\n-        display_fn(move |f| f.write_str(&to_print))\n-    }\n+        }\n+    };\n+    display_fn(move |f| f.write_str(&to_print))\n }\n \n pub(crate) trait PrintWithSpace {"}, {"sha": "3a041ae15d6185904cb8de0d4d9c2b7ed4ca26af", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -70,8 +70,8 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     href, join_with_double_colon, print_abi_with_space, print_constness_with_space,\n-    print_default_space, print_generic_bounds, print_where_clause, Buffer, Ending, HrefError,\n-    PrintWithSpace,\n+    print_default_space, print_generic_bounds, print_where_clause, visibility_print_with_space,\n+    Buffer, Ending, HrefError, PrintWithSpace,\n };\n use crate::html::highlight;\n use crate::html::markdown::{\n@@ -752,7 +752,7 @@ fn assoc_const(\n         w,\n         \"{extra}{vis}const <a{href} class=\\\"constant\\\">{name}</a>: {ty}\",\n         extra = extra,\n-        vis = it.visibility(tcx).print_with_space(it.item_id, cx),\n+        vis = visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n         href = assoc_href_attr(it, link, cx),\n         name = it.name.as_ref().unwrap(),\n         ty = ty.print(cx),\n@@ -809,7 +809,7 @@ fn assoc_method(\n     let tcx = cx.tcx();\n     let header = meth.fn_header(tcx).expect(\"Trying to get header from a non-function item\");\n     let name = meth.name.as_ref().unwrap();\n-    let vis = meth.visibility(tcx).print_with_space(meth.item_id, cx).to_string();\n+    let vis = visibility_print_with_space(meth.visibility(tcx), meth.item_id, cx).to_string();\n     // FIXME: Once https://github.com/rust-lang/rust/issues/67792 is implemented, we can remove\n     // this condition.\n     let constness = match render_mode {"}, {"sha": "3225ddabe2e75e429afca4a151df27411e46547d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n use rustc_middle::span_bug;\n use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::{Adt, TyCtxt};\n+use rustc_middle::ty::{self, Adt, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n@@ -28,7 +28,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n-    Buffer, Ending, PrintWithSpace,\n+    visibility_print_with_space, Buffer, Ending, PrintWithSpace,\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n@@ -328,14 +328,14 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     Some(src) => write!(\n                         w,\n                         \"<div class=\\\"item-left\\\"><code>{}extern crate {} as {};\",\n-                        myitem.visibility(tcx).print_with_space(myitem.item_id, cx),\n+                        visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                         anchor(myitem.item_id.expect_def_id(), src, cx),\n                         myitem.name.unwrap(),\n                     ),\n                     None => write!(\n                         w,\n                         \"<div class=\\\"item-left\\\"><code>{}extern crate {};\",\n-                        myitem.visibility(tcx).print_with_space(myitem.item_id, cx),\n+                        visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                         anchor(myitem.item_id.expect_def_id(), myitem.name.unwrap(), cx),\n                     ),\n                 }\n@@ -385,7 +385,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                      </div>\\\n                      {stab_tags_before}{stab_tags}{stab_tags_after}\",\n                     stab = stab.unwrap_or_default(),\n-                    vis = myitem.visibility(tcx).print_with_space(myitem.item_id, cx),\n+                    vis = visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                     imp = import.print(cx),\n                 );\n                 w.write_str(ITEM_TABLE_ROW_CLOSE);\n@@ -410,7 +410,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 let add = if stab.is_some() { \" \" } else { \"\" };\n \n                 let visibility_emoji = match myitem.visibility(tcx) {\n-                    clean::Visibility::Restricted(_) => {\n+                    Some(ty::Visibility::Restricted(_)) => {\n                         \"<span title=\\\"Restricted Visibility\\\">&nbsp;\ud83d\udd12</span> \"\n                     }\n                     _ => \"\",\n@@ -503,7 +503,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n     let unsafety = header.unsafety.print_with_space();\n     let abi = print_abi_with_space(header.abi).to_string();\n     let asyncness = header.asyncness.print_with_space();\n-    let visibility = it.visibility(tcx).print_with_space(it.item_id, cx).to_string();\n+    let visibility = visibility_print_with_space(it.visibility(tcx), it.item_id, cx).to_string();\n     let name = it.name.unwrap();\n \n     let generics_len = format!(\"{:#}\", f.generics.print(cx)).len();\n@@ -561,7 +561,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             write!(\n                 w,\n                 \"{}{}{}trait {}{}{}\",\n-                it.visibility(tcx).print_with_space(it.item_id, cx),\n+                visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n                 t.unsafety(tcx).print_with_space(),\n                 if t.is_auto(tcx) { \"auto \" } else { \"\" },\n                 it.name.unwrap(),\n@@ -1086,7 +1086,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n     fn write_content(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n         wrap_item(w, \"typedef\", |w| {\n             render_attributes_in_pre(w, it, \"\");\n-            write!(w, \"{}\", it.visibility(cx.tcx()).print_with_space(it.item_id, cx));\n+            write!(w, \"{}\", visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx));\n             write!(\n                 w,\n                 \"type {}{}{where_clause} = {type_};\",\n@@ -1183,7 +1183,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             write!(\n                 w,\n                 \"{}enum {}{}\",\n-                it.visibility(tcx).print_with_space(it.item_id, cx),\n+                visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n                 it.name.unwrap(),\n                 e.generics.print(cx),\n             );\n@@ -1398,7 +1398,7 @@ fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &cle\n             write!(\n                 w,\n                 \"{vis}const {name}: {typ}\",\n-                vis = it.visibility(tcx).print_with_space(it.item_id, cx),\n+                vis = visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n                 name = it.name.unwrap(),\n                 typ = c.type_.print(cx),\n             );\n@@ -1499,7 +1499,7 @@ fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n             write!(\n                 w,\n                 \"{vis}static {mutability}{name}: {typ}\",\n-                vis = it.visibility(cx.tcx()).print_with_space(it.item_id, cx),\n+                vis = visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n                 mutability = s.mutability.print_with_space(),\n                 name = it.name.unwrap(),\n                 typ = s.type_.print(cx)\n@@ -1517,7 +1517,7 @@ fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n             write!(\n                 w,\n                 \"    {}type {};\\n}}\",\n-                it.visibility(cx.tcx()).print_with_space(it.item_id, cx),\n+                visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n                 it.name.unwrap(),\n             );\n         });\n@@ -1671,7 +1671,12 @@ fn render_union(\n     cx: &Context<'_>,\n ) {\n     let tcx = cx.tcx();\n-    write!(w, \"{}union {}\", it.visibility(tcx).print_with_space(it.item_id, cx), it.name.unwrap(),);\n+    write!(\n+        w,\n+        \"{}union {}\",\n+        visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+        it.name.unwrap(),\n+    );\n \n     let where_displayed = g\n         .map(|g| {\n@@ -1698,7 +1703,7 @@ fn render_union(\n             write!(\n                 w,\n                 \"    {}{}: {},\\n{}\",\n-                field.visibility(tcx).print_with_space(field.item_id, cx),\n+                visibility_print_with_space(field.visibility(tcx), field.item_id, cx),\n                 field.name.unwrap(),\n                 ty.print(cx),\n                 tab\n@@ -1729,7 +1734,7 @@ fn render_struct(\n     write!(\n         w,\n         \"{}{}{}\",\n-        it.visibility(tcx).print_with_space(it.item_id, cx),\n+        visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n         if structhead { \"struct \" } else { \"\" },\n         it.name.unwrap()\n     );\n@@ -1759,7 +1764,7 @@ fn render_struct(\n                         w,\n                         \"\\n{}    {}{}: {},\",\n                         tab,\n-                        field.visibility(tcx).print_with_space(field.item_id, cx),\n+                        visibility_print_with_space(field.visibility(tcx), field.item_id, cx),\n                         field.name.unwrap(),\n                         ty.print(cx),\n                     );\n@@ -1791,7 +1796,7 @@ fn render_struct(\n                         write!(\n                             w,\n                             \"{}{}\",\n-                            field.visibility(tcx).print_with_space(field.item_id, cx),\n+                            visibility_print_with_space(field.visibility(tcx), field.item_id, cx),\n                             ty.print(cx),\n                         )\n                     }"}, {"sha": "cb8b7c18029f02e7812873f1fde215885d211428", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -100,13 +100,12 @@ impl JsonRenderer<'_> {\n         }\n     }\n \n-    fn convert_visibility(&self, v: clean::Visibility) -> Visibility {\n-        use clean::Visibility::*;\n+    fn convert_visibility(&self, v: Option<ty::Visibility<DefId>>) -> Visibility {\n         match v {\n-            Public => Visibility::Public,\n-            Inherited => Visibility::Default,\n-            Restricted(did) if did.is_crate_root() => Visibility::Crate,\n-            Restricted(did) => Visibility::Restricted {\n+            None => Visibility::Default,\n+            Some(ty::Visibility::Public) => Visibility::Public,\n+            Some(ty::Visibility::Restricted(did)) if did.is_crate_root() => Visibility::Crate,\n+            Some(ty::Visibility::Restricted(did)) => Visibility::Restricted {\n                 parent: from_item_id(did.into(), self.tcx),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },"}, {"sha": "995fb5dcc1c86de89b780320701190eb25c3790d", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e515044108498f3e06c81d0e24d430bae2ab40/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=c6e515044108498f3e06c81d0e24d430bae2ab40", "patch": "@@ -1,6 +1,6 @@\n //! A collection of utility functions for the `strip_*` passes.\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{TyCtxt, Visibility};\n use rustc_span::symbol::sym;\n use std::mem;\n \n@@ -81,13 +81,13 @@ impl<'a, 'tcx> DocFolder for Stripper<'a, 'tcx> {\n             }\n \n             clean::StructFieldItem(..) => {\n-                if !i.visibility(self.tcx).is_public() {\n+                if i.visibility(self.tcx) != Some(Visibility::Public) {\n                     return Some(strip_item(i));\n                 }\n             }\n \n             clean::ModuleItem(..) => {\n-                if i.item_id.is_local() && !i.visibility(self.tcx).is_public() {\n+                if i.item_id.is_local() && i.visibility(self.tcx) != Some(Visibility::Public) {\n                     debug!(\"Stripper: stripping module {:?}\", i.name);\n                     let old = mem::replace(&mut self.update_retained, false);\n                     let ret = strip_item(self.fold_item_recur(i));\n@@ -246,7 +246,7 @@ impl<'tcx> DocFolder for ImportStripper<'tcx> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match *i.kind {\n             clean::ExternCrateItem { .. } | clean::ImportItem(..)\n-                if !i.visibility(self.tcx).is_public() =>\n+                if i.visibility(self.tcx) != Some(Visibility::Public) =>\n             {\n                 None\n             }"}]}