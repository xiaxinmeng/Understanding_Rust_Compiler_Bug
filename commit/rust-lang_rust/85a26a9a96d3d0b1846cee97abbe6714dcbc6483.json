{"sha": "85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "node_id": "C_kwDOAAsO6NoAKDg1YTI2YTlhOTZkM2QwYjE4NDZjZWU5N2FiYmU2NzE0ZGNiYzY0ODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T15:08:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T15:08:41Z"}, "message": "Auto merge of #97989 - Dylan-DPC:rollup-wol1a1y, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97761 (validating the vtable can lead to Stacked Borrows errors)\n - #97789 (Fix #71363's test by adding `-Z translate-remapped-path-to-local-path=no`)\n - #97913 (Wrap `HirId`s of locals into `LocalVarId`s for THIR nodes)\n - #97979 (Fix typos in Provider API docs)\n - #97987 (remove an unnecessary `String`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "aeaae2a25c2e278eaa5177e0486ac4d37aa86891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeaae2a25c2e278eaa5177e0486ac4d37aa86891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "html_url": "https://github.com/rust-lang/rust/commit/85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa68e73e9947be8ffc5b3b46d899e4953a44e7e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa68e73e9947be8ffc5b3b46d899e4953a44e7e9", "html_url": "https://github.com/rust-lang/rust/commit/fa68e73e9947be8ffc5b3b46d899e4953a44e7e9"}, {"sha": "b3c9a2fde4a28bfdced15a1cc8583b155d1d281a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c9a2fde4a28bfdced15a1cc8583b155d1d281a", "html_url": "https://github.com/rust-lang/rust/commit/b3c9a2fde4a28bfdced15a1cc8583b155d1d281a"}], "stats": {"total": 140, "additions": 87, "deletions": 53}, "files": [{"sha": "630281bb09254ec90b401737ed88c94970e72898", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -338,6 +338,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                         { \"invalid drop function pointer in vtable (not pointing to a function)\" },\n                     err_ub!(InvalidVtableDropFn(..)) =>\n                         { \"invalid drop function pointer in vtable (function has incompatible signature)\" },\n+                    // Stacked Borrows errors can happen here, see https://github.com/rust-lang/miri/issues/2123.\n+                    // (We assume there are no other MachineStop errors possible here.)\n+                    InterpError::MachineStop(_) =>\n+                        { \"vtable pointer does not have permission to read drop function pointer\" },\n                 );\n                 try_validation!(\n                     self.ecx.read_size_and_align_from_vtable(vtable),\n@@ -347,6 +351,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     err_ub!(InvalidVtableAlignment(msg)) =>\n                         { \"invalid vtable: alignment {}\", msg },\n                     err_unsup!(ReadPointerAsBytes) => { \"invalid size or align in vtable\" },\n+                    // Stacked Borrows errors can happen here, see https://github.com/rust-lang/miri/issues/2123.\n+                    // (We assume there are no other MachineStop errors possible here.)\n+                    InterpError::MachineStop(_) =>\n+                        { \"vtable pointer does not have permission to read size and alignment\" },\n                 );\n                 // FIXME: More checks for the vtable.\n             }"}, {"sha": "4c734b1589b85286dbdcf21450269a4aaa5dae19", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -304,11 +304,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let error_code = error_code.into();\n-        let mut err = self.tcx.sess.struct_span_err_with_code(\n-            span,\n-            &format!(\"type annotations needed\"),\n-            error_code,\n-        );\n+        let mut err =\n+            self.tcx.sess.struct_span_err_with_code(span, \"type annotations needed\", error_code);\n         err.span_label(span, arg_data.cannot_infer_msg());\n         err\n     }"}, {"sha": "3747fb5eca0ccf5121a4d07bd59d4a7bfa4ba074", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -789,6 +789,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(translate_remapped_path_to_local_path, false);\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));"}, {"sha": "07d7a75522e0de316f2830feb0e418ddeb0f8a80", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -1486,6 +1486,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .filter(|_| {\n                 // Only spend time on further checks if we have what to translate *to*.\n                 sess.opts.real_rust_source_base_dir.is_some()\n+                    // Some tests need the translation to be always skipped.\n+                    && sess.opts.debugging_opts.translate_remapped_path_to_local_path\n             })\n             .filter(|virtual_dir| {\n                 // Don't translate away `/rustc/$hash` if we're still remapping to it,"}, {"sha": "120d09ee353824f0b764e4e2993ebc4bebf8b33c", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -191,6 +191,20 @@ pub enum StmtKind<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n+#[derive(\n+    Clone,\n+    Debug,\n+    Copy,\n+    PartialEq,\n+    Eq,\n+    Hash,\n+    HashStable,\n+    TyEncodable,\n+    TyDecodable,\n+    TypeFoldable\n+)]\n+pub struct LocalVarId(pub hir::HirId);\n+\n /// A THIR expression.\n #[derive(Clone, Debug, HashStable)]\n pub struct Expr<'tcx> {\n@@ -332,15 +346,15 @@ pub enum ExprKind<'tcx> {\n     },\n     /// A local variable.\n     VarRef {\n-        id: hir::HirId,\n+        id: LocalVarId,\n     },\n     /// Used to represent upvars mentioned in a closure/generator\n     UpvarRef {\n         /// DefId of the closure/generator\n         closure_def_id: DefId,\n \n         /// HirId of the root variable\n-        var_hir_id: hir::HirId,\n+        var_hir_id: LocalVarId,\n     },\n     /// A borrow, e.g. `&arg`.\n     Borrow {\n@@ -596,7 +610,7 @@ pub enum PatKind<'tcx> {\n         mutability: Mutability,\n         name: Symbol,\n         mode: BindingMode,\n-        var: hir::HirId,\n+        var: LocalVarId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pat<'tcx>>,\n         /// Is this the leftmost occurrence of the binding, i.e., is `var` the"}, {"sha": "e77f5931dd65dafb022bdafa3ff254d3be46ff22", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -3,8 +3,7 @@\n use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::HirId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::place::Projection as HirProjection;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n@@ -57,7 +56,7 @@ pub(crate) enum PlaceBase {\n     /// figure out that it is captured until all the `Field` projections are applied.\n     Upvar {\n         /// HirId of the upvar\n-        var_hir_id: HirId,\n+        var_hir_id: LocalVarId,\n         /// DefId of the closure\n         closure_def_id: DefId,\n         /// The trait closure implements, `Fn`, `FnMut`, `FnOnce`\n@@ -151,12 +150,12 @@ fn is_ancestor_or_same_capture(\n /// `ty::MinCaptureList` of the root variable `var_hir_id`.\n fn compute_capture_idx<'tcx>(\n     closure_min_captures: &ty::RootVariableMinCaptureList<'tcx>,\n-    var_hir_id: HirId,\n+    var_hir_id: LocalVarId,\n     root_var_idx: usize,\n ) -> usize {\n     let mut res = 0;\n     for (var_id, capture_list) in closure_min_captures {\n-        if *var_id == var_hir_id {\n+        if *var_id == var_hir_id.0 {\n             res += root_var_idx;\n             break;\n         } else {\n@@ -176,12 +175,12 @@ fn compute_capture_idx<'tcx>(\n /// Returns None, when the ancestor is not found.\n fn find_capture_matching_projections<'a, 'tcx>(\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n-    var_hir_id: HirId,\n+    var_hir_id: LocalVarId,\n     closure_def_id: DefId,\n     projections: &[PlaceElem<'tcx>],\n ) -> Option<(usize, &'a ty::CapturedPlace<'tcx>)> {\n     let closure_min_captures = typeck_results.closure_min_captures.get(&closure_def_id)?;\n-    let root_variable_min_captures = closure_min_captures.get(&var_hir_id)?;\n+    let root_variable_min_captures = closure_min_captures.get(&var_hir_id.0)?;\n \n     let hir_projections = convert_to_hir_projections_and_truncate_for_capture(projections);\n \n@@ -500,8 +499,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n             ),\n             ExprKind::UpvarRef { closure_def_id, var_hir_id } => {\n-                let upvar_id = ty::UpvarId::new(var_hir_id, closure_def_id.expect_local());\n-                this.lower_captured_upvar(block, upvar_id)\n+                this.lower_captured_upvar(block, closure_def_id.expect_local(), var_hir_id)\n             }\n \n             ExprKind::VarRef { id } => {\n@@ -627,11 +625,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn lower_captured_upvar(\n         &mut self,\n         block: BasicBlock,\n-        upvar_id: ty::UpvarId,\n+        closure_expr_id: LocalDefId,\n+        var_hir_id: LocalVarId,\n     ) -> BlockAnd<PlaceBuilder<'tcx>> {\n-        let closure_ty = self\n-            .typeck_results\n-            .node_type(self.tcx.hir().local_def_id_to_hir_id(upvar_id.closure_expr_id));\n+        let closure_ty =\n+            self.typeck_results.node_type(self.tcx.hir().local_def_id_to_hir_id(closure_expr_id));\n \n         let closure_kind = if let ty::Closure(_, closure_substs) = closure_ty.kind() {\n             self.infcx.closure_kind(closure_substs).unwrap()\n@@ -641,8 +639,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n \n         block.and(PlaceBuilder::from(PlaceBase::Upvar {\n-            var_hir_id: upvar_id.var_path.hir_id,\n-            closure_def_id: upvar_id.closure_expr_id.to_def_id(),\n+            var_hir_id,\n+            closure_def_id: closure_expr_id.to_def_id(),\n             closure_kind,\n         }))\n     }"}, {"sha": "dc1860cb11297fdf94d56b3e7d4a65f6e46c467d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -14,7 +14,6 @@ use rustc_data_structures::{\n     fx::{FxHashSet, FxIndexMap, FxIndexSet},\n     stack::ensure_sufficient_stack,\n };\n-use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n@@ -690,7 +689,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn storage_live_binding(\n         &mut self,\n         block: BasicBlock,\n-        var: HirId,\n+        var: LocalVarId,\n         span: Span,\n         for_guard: ForGuard,\n         schedule_drop: bool,\n@@ -700,20 +699,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(local_id) });\n         // Altough there is almost always scope for given variable in corner cases\n         // like #92893 we might get variable with no scope.\n-        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) && schedule_drop{\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.0.local_id) && schedule_drop{\n             self.schedule_drop(span, region_scope, local_id, DropKind::Storage);\n         }\n         Place::from(local_id)\n     }\n \n     pub(crate) fn schedule_drop_for_binding(\n         &mut self,\n-        var: HirId,\n+        var: LocalVarId,\n         span: Span,\n         for_guard: ForGuard,\n     ) {\n         let local_id = self.var_local_id(var, for_guard);\n-        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) {\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.0.local_id) {\n             self.schedule_drop(span, region_scope, local_id, DropKind::Value);\n         }\n     }\n@@ -730,7 +729,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Mutability,\n             Symbol,\n             BindingMode,\n-            HirId,\n+            LocalVarId,\n             Span,\n             Ty<'tcx>,\n             UserTypeProjections,\n@@ -917,7 +916,7 @@ fn traverse_candidate<'pat, 'tcx: 'pat, C, T, I>(\n struct Binding<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    var_id: HirId,\n+    var_id: LocalVarId,\n     binding_mode: BindingMode,\n }\n \n@@ -2184,7 +2183,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mutability: Mutability,\n         name: Symbol,\n         mode: BindingMode,\n-        var_id: HirId,\n+        var_id: LocalVarId,\n         var_ty: Ty<'tcx>,\n         user_ty: UserTypeProjections,\n         has_guard: ArmHasGuard,"}, {"sha": "793066e43c3c79f4804a2426c67c2b87f1761be9", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -4,19 +4,20 @@ use crate::build::scope::DropKind;\n use crate::thir::constant::parse_float;\n use crate::thir::pattern::pat_from_hir;\n use rustc_ast as ast;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{GeneratorKind, HirIdMap, Node};\n+use rustc_hir::{GeneratorKind, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::Allocation;\n use rustc_middle::mir::interpret::{ConstValue, LitToConstError, LitToConstInput, Scalar};\n use rustc_middle::mir::*;\n-use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, PatKind, Thir};\n+use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n use rustc_span::symbol::sym;\n@@ -445,7 +446,7 @@ struct Builder<'a, 'tcx> {\n \n     /// Maps `HirId`s of variable bindings to the `Local`s created for them.\n     /// (A match binding can have two locals; the 2nd is for the arm's guard.)\n-    var_indices: HirIdMap<LocalsForNode>,\n+    var_indices: FxHashMap<LocalVarId, LocalsForNode>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     canonical_user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n     upvar_mutbls: Vec<Mutability>,\n@@ -455,11 +456,11 @@ struct Builder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n-    fn is_bound_var_in_guard(&self, id: hir::HirId) -> bool {\n+    fn is_bound_var_in_guard(&self, id: LocalVarId) -> bool {\n         self.guard_context.iter().any(|frame| frame.locals.iter().any(|local| local.id == id))\n     }\n \n-    fn var_local_id(&self, id: hir::HirId, for_guard: ForGuard) -> Local {\n+    fn var_local_id(&self, id: LocalVarId, for_guard: ForGuard) -> Local {\n         self.var_indices[&id].local_id(for_guard)\n     }\n }\n@@ -543,11 +544,11 @@ enum LocalsForNode {\n \n #[derive(Debug)]\n struct GuardFrameLocal {\n-    id: hir::HirId,\n+    id: LocalVarId,\n }\n \n impl GuardFrameLocal {\n-    fn new(id: hir::HirId, _binding_mode: BindingMode) -> Self {\n+    fn new(id: LocalVarId, _binding_mode: BindingMode) -> Self {\n         GuardFrameLocal { id }\n     }\n }"}, {"sha": "fb2f5861c6f03a67903601505d531d3d395b7e01", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -903,9 +903,12 @@ impl<'tcx> Cx<'tcx> {\n         );\n \n         if is_upvar {\n-            ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }\n+            ExprKind::UpvarRef {\n+                closure_def_id: self.body_owner,\n+                var_hir_id: LocalVarId(var_hir_id),\n+            }\n         } else {\n-            ExprKind::VarRef { id: var_hir_id }\n+            ExprKind::VarRef { id: LocalVarId(var_hir_id) }\n         }\n     }\n "}, {"sha": "417cf0f89c4128f79eefb837ffca046e9a2a0226", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::mir::interpret::{get_slice_bytes, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInput};\n use rustc_middle::mir::{self, UserTypeProjection};\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n-use rustc_middle::thir::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange};\n+use rustc_middle::thir::{Ascription, BindingMode, FieldPat, LocalVarId, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, ConstKind, DefIdTree, Region, Ty, TyCtxt, UserType};\n@@ -288,7 +288,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     mutability,\n                     mode,\n                     name: ident.name,\n-                    var: id,\n+                    var: LocalVarId(id),\n                     ty: var_ty,\n                     subpattern: self.lower_opt_pattern(sub),\n                     is_primary: id == pat.hir_id,\n@@ -664,7 +664,7 @@ macro_rules! ClonePatternFoldableImpls {\n }\n \n ClonePatternFoldableImpls! { <'tcx>\n-    Span, Field, Mutability, Symbol, hir::HirId, usize, ty::Const<'tcx>,\n+    Span, Field, Mutability, Symbol, LocalVarId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>"}, {"sha": "007fa87189fb0c684ba1efab32680385194cc925", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -1541,6 +1541,8 @@ options! {\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    translate_remapped_path_to_local_path: bool = (true, parse_bool, [TRACKED],\n+        \"translate remapped paths into local paths when possible (default: yes)\"),\n     trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\"),\n     treat_err_as_bug: Option<NonZeroUsize> = (None, parse_treat_err_as_bug, [TRACKED],"}, {"sha": "866419ac34b11843f111ffa503a813e81de315b0", "filename": "library/core/src/any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -94,7 +94,7 @@\n //! functions for requesting data from an object which implements `Provider`. Generally, end users\n //! should not call `request_*` directly, they are helper functions for intermediate implementers\n //! to use to implement a user-facing interface. This is purely for the sake of ergonomics, there is\n-//! safety concern here; intermediate implementers can typically support methods rather than\n+//! no safety concern here; intermediate implementers can typically support methods rather than\n //! free functions and use more specific names.\n //!\n //! Typically, a data provider is a trait object of a trait which extends `Provider`. A user will\n@@ -1007,7 +1007,7 @@ mod tags {\n         type Reified = T;\n     }\n \n-    /// Type-based tag similar to [`Value`] but which may be unsized (i.e., has a `'Sized` bound).\n+    /// Type-based tag similar to [`Value`] but which may be unsized (i.e., has a `?Sized` bound).\n     #[derive(Debug)]\n     pub struct MaybeSizedValue<T: ?Sized + 'static>(PhantomData<T>);\n "}, {"sha": "bbb4a93623b144b8d182c675c292b2f3a4e25511", "filename": "src/test/ui/span/issue-71363.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -1,10 +1,19 @@\n-// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z ui-testing=no\n-// only-x86_64-unknown-linux-gnu\n-//---^ Limiting target as the above unstable flags don't play well on some environment.\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n \n struct MyError;\n impl std::error::Error for MyError {}\n //~^ ERROR: `MyError` doesn't implement `std::fmt::Display`\n //~| ERROR: `MyError` doesn't implement `Debug`\n \n fn main() {}\n+\n+// This test relies on library/std/src/error.rs *not* being included in the error message, so that\n+// we can test whether a file not included in the error message affects it (more specifically\n+// whether the line number of the excluded file affects the indentation of the other line numbers).\n+//\n+// To test this we're simulating a remap of the rust src base (so that library/std/src/error.rs\n+// does not point to a local file) *and* we're disabling the code to try mapping a remapped path to\n+// a local file (which would defeat the purpose of the former flag).\n+//\n+// Note that this comment is at the bottom of the file intentionally, as we need the line number of\n+// the impl to be lower than 10."}, {"sha": "04e2b46c31738f60a3719ca04722b6205bb89d48", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a26a9a96d3d0b1846cee97abbe6714dcbc6483/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "patch": "@@ -1,25 +1,25 @@\n error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n- --> $DIR/issue-71363.rs:6:6\n+ --> $DIR/issue-71363.rs:4:6\n   |\n-6 | impl std::error::Error for MyError {}\n+4 | impl std::error::Error for MyError {}\n   |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n- --> $DIR/issue-71363.rs:6:6\n+ --> $DIR/issue-71363.rs:4:6\n   |\n-6 | impl std::error::Error for MyError {}\n+4 | impl std::error::Error for MyError {}\n   |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n-5 | #[derive(Debug)]\n+3 | #[derive(Debug)]\n   |\n \n error: aborting due to 2 previous errors"}]}