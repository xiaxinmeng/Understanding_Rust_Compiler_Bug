{"sha": "5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "node_id": "C_kwDOAAsO6NoAKDVhMDgzZGJiZTZjYmI1ZTdiY2FiM2IyMTk0MmQxNjJiNDYyOGU3NmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-19T05:45:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-19T05:45:33Z"}, "message": "Rollup merge of #94086 - tmiasko:char-try-from-scalar-int, r=davidtwco\n\nFix ScalarInt to char conversion\n\nto avoid panic for invalid Unicode scalar values", "tree": {"sha": "590c5ad9b11b38712fa88492d17fb1659ef2cdf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590c5ad9b11b38712fa88492d17fb1659ef2cdf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEIP+CRBK7hj4Ov3rIwAAiMsIALEem/0JYrIxqDlv5Fh64JBY\nRQ7keV291I4WQK/1kdFk54O5n0UWWODpO6HzppYnlWQL3stDs5MsLJwwceC9C51k\nTBCuE3EQbZo+r8x5++LxTnCOUi+ZcuzLTFSo23UDa6yE+1esY1pVBrRab25CyNdw\nlPgSpXG3jwZ3zxOxlz9ggLf1ZNkkXg96AZVSFy+BY8pwaD5djaMA2CXPW/F55vow\nWe8R2QqCNg81qdHaRjxFopZ/DKkhiCUGS2z1yBOWzeVgWFM5POwlnjvvb7rRmyMj\nxAT31vOhY7bCjx5Lj+6/FGe79vS+GD86lS8Xao8PcpC3UssoB6L+7NmHCjqJOFQ=\n=5YiE\n-----END PGP SIGNATURE-----\n", "payload": "tree 590c5ad9b11b38712fa88492d17fb1659ef2cdf4\nparent c28940e49d31c0abaaec91ff3071932335b5b3b6\nparent 8cd9dfad1e2f24e52e022bdad52f23286af8c571\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645249533 +0100\ncommitter GitHub <noreply@github.com> 1645249533 +0100\n\nRollup merge of #94086 - tmiasko:char-try-from-scalar-int, r=davidtwco\n\nFix ScalarInt to char conversion\n\nto avoid panic for invalid Unicode scalar values\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "html_url": "https://github.com/rust-lang/rust/commit/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28940e49d31c0abaaec91ff3071932335b5b3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28940e49d31c0abaaec91ff3071932335b5b3b6", "html_url": "https://github.com/rust-lang/rust/commit/c28940e49d31c0abaaec91ff3071932335b5b3b6"}, {"sha": "8cd9dfad1e2f24e52e022bdad52f23286af8c571", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd9dfad1e2f24e52e022bdad52f23286af8c571", "html_url": "https://github.com/rust-lang/rust/commit/8cd9dfad1e2f24e52e022bdad52f23286af8c571"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "ca1db2fd55141515bf483ba712392d67f3d45297", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "patch": "@@ -294,12 +294,22 @@ impl From<char> for ScalarInt {\n     }\n }\n \n+/// Error returned when a conversion from ScalarInt to char fails.\n+#[derive(Debug)]\n+pub struct CharTryFromScalarInt;\n+\n impl TryFrom<ScalarInt> for char {\n-    type Error = Size;\n+    type Error = CharTryFromScalarInt;\n+\n     #[inline]\n-    fn try_from(int: ScalarInt) -> Result<Self, Size> {\n-        int.to_bits(Size::from_bytes(std::mem::size_of::<char>()))\n-            .map(|u| char::from_u32(u.try_into().unwrap()).unwrap())\n+    fn try_from(int: ScalarInt) -> Result<Self, Self::Error> {\n+        let Ok(bits) = int.to_bits(Size::from_bytes(std::mem::size_of::<char>())) else  {\n+            return Err(CharTryFromScalarInt);\n+        };\n+        match char::from_u32(bits.try_into().unwrap()) {\n+            Some(c) => Ok(c),\n+            None => Err(CharTryFromScalarInt),\n+        }\n     }\n }\n "}, {"sha": "1b53318806f4d64cc07a40cf2166643d395d094f", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "patch": "@@ -5,39 +5,53 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n       let _1: std::option::Option<()>;     // in scope 0 at $DIR/invalid_constant.rs:16:5: 16:12\n       let mut _2: std::option::Option<std::option::Option<()>>; // in scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n-      scope 1 (inlined f) {                // at $DIR/invalid_constant.rs:16:5: 16:12\n-          debug x => _2;                   // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n-          let mut _3: isize;               // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n-          let _4: std::option::Option<()>; // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n-          scope 2 {\n-              debug y => _4;               // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+      let _3: main::Union;                 // in scope 0 at $DIR/invalid_constant.rs:22:9: 22:22\n+      scope 1 {\n+          debug _invalid_char => _3;       // in scope 1 at $DIR/invalid_constant.rs:22:9: 22:22\n+      }\n+      scope 2 (inlined f) {                // at $DIR/invalid_constant.rs:16:5: 16:12\n+          debug x => _2;                   // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+          let mut _4: isize;               // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+          let _5: std::option::Option<()>; // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+          scope 3 {\n+              debug y => _5;               // in scope 3 at $DIR/invalid_constant.rs:16:5: 16:12\n           }\n       }\n   \n       bb0: {\n           discriminant(_2) = 0;            // scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n--         _3 = discriminant(_2);           // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n--         switchInt(move _3) -> [0_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n-+         _3 = const 0_isize;              // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n-+         switchInt(const 0_isize) -> [0_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         _4 = discriminant(_2);           // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         switchInt(move _4) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _4 = const 0_isize;              // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++         switchInt(const 0_isize) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n       }\n   \n       bb1: {\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 17:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:17:2: 17:2\n+-         _3 = const { Union { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:22:25: 22:58\n++         _3 = const main::Union { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:22:25: 22:58\n+                                           // ty::Const\n+                                           // + ty: main::Union\n+-                                          // + val: Unevaluated(main::{constant#0}, [main::Union], None)\n++                                          // + val: Value(Scalar(0x00110001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/invalid_constant.rs:22:25: 22:58\n+-                                          // + literal: Const { ty: main::Union, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:8 ~ invalid_constant[726d]::main::{constant#0}), const_param_did: None }, substs: [main::Union], promoted: None }) }\n++                                          // + literal: Const { ty: main::Union, val: Value(Scalar(0x00110001)) }\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 23:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:23:2: 23:2\n       }\n   \n       bb2: {\n--         _4 = ((_2 as Some).0: std::option::Option<()>); // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n--         _1 = _4;                         // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-+         _4 = const Scalar(0x02): Option::<()>; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         _5 = ((_2 as Some).0: std::option::Option<()>); // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         _1 = _5;                         // scope 3 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _5 = const Scalar(0x02): Option::<()>; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n +                                          // ty::Const\n +                                          // + ty: std::option::Option<()>\n +                                          // + val: Value(Scalar(0x02))\n +                                          // mir::Constant\n +                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n +                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n-+         _1 = const Scalar(0x02): Option::<()>; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _1 = const Scalar(0x02): Option::<()>; // scope 3 at $DIR/invalid_constant.rs:16:5: 16:12\n +                                          // ty::Const\n +                                          // + ty: std::option::Option<()>\n +                                          // + val: Value(Scalar(0x02))\n@@ -48,7 +62,7 @@\n       }\n   \n       bb3: {\n-          discriminant(_1) = 0;            // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          discriminant(_1) = 0;            // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n           goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:9:17: 9:21\n       }\n   }"}, {"sha": "4aca90900199e755efc35408cc9b8859d2d35d69", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a083dbbe6cbb5e7bcab3b21942d162b4628e76f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=5a083dbbe6cbb5e7bcab3b21942d162b4628e76f", "patch": "@@ -2,7 +2,7 @@\n // by constant propagation. Regression test for issue #93688.\n //\n // compile-flags: -Copt-level=0 -Zinline-mir\n-\n+#![feature(inline_const)]\n #[inline(always)]\n pub fn f(x: Option<Option<()>>) -> Option<()> {\n     match x {\n@@ -14,4 +14,10 @@ pub fn f(x: Option<Option<()>>) -> Option<()> {\n // EMIT_MIR invalid_constant.main.ConstProp.diff\n fn main() {\n     f(None);\n+\n+    union Union {\n+        int: u32,\n+        chr: char,\n+    }\n+    let _invalid_char = const { Union { int: 0x110001 } };\n }"}]}