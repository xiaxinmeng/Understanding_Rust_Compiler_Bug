{"sha": "80991bb578329ca921fdc910d9b6b064e8f521d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOTkxYmI1NzgzMjljYTkyMWZkYzkxMGQ5YjZiMDY0ZThmNTIxZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-29T22:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-29T22:01:48Z"}, "message": "auto merge of #10719 : Kimundi/rust/switch_to_multi_item_macros, r=alexcrichton\n\n- Removed module reexport workaround for the integer module macros\r\n- Removed legacy reexports of `cmp::{min, max}` in the integer module macros\r\n- Combined a few macros in `vec` into one\r\n- Documented a few issues", "tree": {"sha": "aa303d7064dc72da11ace2e5782078be1136e9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa303d7064dc72da11ace2e5782078be1136e9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80991bb578329ca921fdc910d9b6b064e8f521d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80991bb578329ca921fdc910d9b6b064e8f521d2", "html_url": "https://github.com/rust-lang/rust/commit/80991bb578329ca921fdc910d9b6b064e8f521d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80991bb578329ca921fdc910d9b6b064e8f521d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1184eedb0e0828cea2f18d3fbd6319e981afda", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1184eedb0e0828cea2f18d3fbd6319e981afda", "html_url": "https://github.com/rust-lang/rust/commit/dd1184eedb0e0828cea2f18d3fbd6319e981afda"}, {"sha": "4840064f85a28c9332d928ad0631e9dc2d21e150", "url": "https://api.github.com/repos/rust-lang/rust/commits/4840064f85a28c9332d928ad0631e9dc2d21e150", "html_url": "https://github.com/rust-lang/rust/commit/4840064f85a28c9332d928ad0631e9dc2d21e150"}], "stats": {"total": 500, "additions": 244, "deletions": 256}, "files": [{"sha": "2a0840a0ef8ad380b5747144b8605b43b88adc80", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,32 +10,31 @@\n \n \n use back::{link};\n-use std::libc::c_uint;\n-use lib::llvm::{ValueRef, CallConv, StructRetAttribute};\n use lib::llvm::llvm;\n+use lib::llvm::{ValueRef, CallConv, StructRetAttribute};\n use lib;\n-use middle::trans::machine;\n-use middle::trans::base;\n use middle::trans::base::push_ctxt;\n-use middle::trans::cabi;\n+use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::builder::noname;\n+use middle::trans::cabi;\n use middle::trans::common::*;\n+use middle::trans::machine;\n+use middle::trans::type_::Type;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n-use middle::ty;\n use middle::ty::FnSig;\n-\n-use std::uint;\n+use middle::ty;\n+use std::cmp;\n+use std::libc::c_uint;\n use std::vec;\n+use syntax::abi::{Cdecl, Aapcs, C, AbiSet, Win64};\n+use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System};\n use syntax::codemap::Span;\n+use syntax::parse::token::special_idents;\n use syntax::{ast};\n use syntax::{attr, ast_map};\n-use syntax::parse::token::special_idents;\n-use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System,\n-                  Cdecl, Aapcs, C, AbiSet, Win64};\n use util::ppaux::{Repr, UserString};\n-use middle::trans::type_::Type;\n \n ///////////////////////////////////////////////////////////////////////////\n // Type definitions\n@@ -332,7 +331,7 @@ pub fn trans_native_call(bcx: @mut Block,\n             let llrust_size = machine::llsize_of_store(ccx, llrust_ret_ty);\n             let llforeign_align = machine::llalign_of_min(ccx, llforeign_ret_ty);\n             let llrust_align = machine::llalign_of_min(ccx, llrust_ret_ty);\n-            let llalign = uint::min(llforeign_align, llrust_align);\n+            let llalign = cmp::min(llforeign_align, llrust_align);\n             debug!(\"llrust_size={:?}\", llrust_size);\n             base::call_memcpy(bcx, llretptr_i8, llscratch_i8,\n                               C_uint(ccx, llrust_size), llalign as u32);"}, {"sha": "c74a9bc90517655dc46e002d0a16f6f72d360c1b", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -901,7 +901,7 @@ impl<'self> Formatter<'self> {\n                 // case where the maximum length will matter.\n                 let char_len = s.char_len();\n                 if char_len >= max {\n-                    let nchars = ::uint::min(max, char_len);\n+                    let nchars = ::cmp::min(max, char_len);\n                     self.buf.write(s.slice_chars(0, nchars).as_bytes());\n                     return\n                 }\n@@ -1036,31 +1036,26 @@ pub fn upperhex(buf: &[u8], f: &mut Formatter) {\n     f.pad_integral(local.slice_to(buf.len()), \"0x\", true);\n }\n \n-// FIXME(#4375) shouldn't need an inner module\n macro_rules! integer(($signed:ident, $unsigned:ident) => {\n-    mod $signed {\n-        use super::*;\n-\n-        // Signed is special because it actuall emits the negative sign,\n-        // nothing else should do that, however.\n-        impl Signed for $signed {\n-            fn fmt(c: &$signed, f: &mut Formatter) {\n-                ::$unsigned::to_str_bytes(c.abs() as $unsigned, 10, |buf| {\n-                    f.pad_integral(buf, \"\", *c >= 0);\n-                })\n-            }\n+    // Signed is special because it actuall emits the negative sign,\n+    // nothing else should do that, however.\n+    impl Signed for $signed {\n+        fn fmt(c: &$signed, f: &mut Formatter) {\n+            ::$unsigned::to_str_bytes(c.abs() as $unsigned, 10, |buf| {\n+                f.pad_integral(buf, \"\", *c >= 0);\n+            })\n         }\n-        int_base!($signed, $unsigned, 2, Binary, \"0b\")\n-        int_base!($signed, $unsigned, 8, Octal, \"0o\")\n-        int_base!($signed, $unsigned, 16, LowerHex, \"0x\")\n-        upper_hex!($signed, $unsigned)\n-\n-        int_base!($unsigned, $unsigned, 2, Binary, \"0b\")\n-        int_base!($unsigned, $unsigned, 8, Octal, \"0o\")\n-        int_base!($unsigned, $unsigned, 10, Unsigned, \"\")\n-        int_base!($unsigned, $unsigned, 16, LowerHex, \"0x\")\n-        upper_hex!($unsigned, $unsigned)\n     }\n+    int_base!($signed, $unsigned, 2, Binary, \"0b\")\n+    int_base!($signed, $unsigned, 8, Octal, \"0o\")\n+    int_base!($signed, $unsigned, 16, LowerHex, \"0x\")\n+    upper_hex!($signed, $unsigned)\n+\n+    int_base!($unsigned, $unsigned, 2, Binary, \"0b\")\n+    int_base!($unsigned, $unsigned, 8, Octal, \"0o\")\n+    int_base!($unsigned, $unsigned, 10, Unsigned, \"\")\n+    int_base!($unsigned, $unsigned, 16, LowerHex, \"0x\")\n+    upper_hex!($unsigned, $unsigned)\n })\n \n integer!(int, uint)"}, {"sha": "53bd2d3dc086547fec42e8d68f0b7a99f6c7ce7e", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -11,18 +11,19 @@\n //! Operations and constants for `f32`\n #[allow(missing_doc)];\n \n+use prelude::*;\n+\n+use cmath::c_float_utils;\n use default::Default;\n-use libc::c_int;\n-use num::{Zero, One, strconv};\n+use libc::{c_float, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n+use num::{Zero, One, strconv};\n use num;\n-use prelude::*;\n use to_str;\n+use unstable::intrinsics;\n \n pub use cmath::c_float_targ_consts::*;\n \n-use self::delegated::*;\n-\n macro_rules! delegate(\n     (\n         $(\n@@ -33,22 +34,14 @@ macro_rules! delegate(\n             ) -> $rv:ty = $bound_name:path\n         ),*\n     ) => (\n-        // An inner module is required to get the #[inline] attribute on the\n-        // functions.\n-        mod delegated {\n-            use cmath::c_float_utils;\n-            use libc::{c_float, c_int};\n-            use unstable::intrinsics;\n-\n-            $(\n-                #[inline]\n-                pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n-                    unsafe {\n-                        $bound_name($( $arg ),*)\n-                    }\n+        $(\n+            #[inline]\n+            pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n+                unsafe {\n+                    $bound_name($( $arg ),*)\n                 }\n-            )*\n-        }\n+            }\n+        )*\n     )\n )\n "}, {"sha": "49b20b2c4f473be111aefa67766449465a6401a8", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -12,19 +12,20 @@\n \n #[allow(missing_doc)];\n \n+use prelude::*;\n+\n+use cmath::c_double_utils;\n use default::Default;\n-use libc::c_int;\n-use num::{Zero, One, strconv};\n+use libc::{c_double, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n+use num::{Zero, One, strconv};\n use num;\n-use prelude::*;\n use to_str;\n+use unstable::intrinsics;\n \n pub use cmath::c_double_targ_consts::*;\n pub use cmp::{min, max};\n \n-use self::delegated::*;\n-\n macro_rules! delegate(\n     (\n         $(\n@@ -35,22 +36,14 @@ macro_rules! delegate(\n             ) -> $rv:ty = $bound_name:path\n         ),*\n     ) => (\n-        // An inner module is required to get the #[inline] attribute on the\n-        // functions.\n-        mod delegated {\n-            use cmath::c_double_utils;\n-            use libc::{c_double, c_int};\n-            use unstable::intrinsics;\n-\n-            $(\n-                #[inline]\n-                pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n-                    unsafe {\n-                        $bound_name($( $arg ),*)\n-                    }\n+        $(\n+            #[inline]\n+            pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n+                unsafe {\n+                    $bound_name($( $arg ),*)\n                 }\n-            )*\n-        }\n+            }\n+        )*\n     )\n )\n "}, {"sha": "fcf1f24d0e4555e8192a5150906c8dbcd549c037", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,12 +10,18 @@\n \n //! Operations and constants for `i16`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i16, 16)\n \n impl BitCount for i16 {"}, {"sha": "385e1c91ca503005014e7ec5da0b091db489aa33", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,12 +10,18 @@\n \n //! Operations and constants for `i32`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i32, 32)\n \n impl BitCount for i32 {"}, {"sha": "f6b369b1312a5ec494125cc991e0ae175f8017a5", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,14 +10,20 @@\n \n //! Operations and constants for `i64`\n \n-use num::{BitCount, CheckedAdd, CheckedSub};\n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n+use num::{BitCount, CheckedAdd, CheckedSub};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i64, 64)\n \n impl BitCount for i64 {"}, {"sha": "9de90ca4657d1147388fb4f8b79c5a87e02eedf6", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,12 +10,18 @@\n \n //! Operations and constants for `i8`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i8, 8)\n \n impl BitCount for i8 {"}, {"sha": "517bd45e45bd1b51d9d64554ea6e9908db96955d", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -12,16 +12,18 @@\n \n #[allow(non_uppercase_statics)];\n \n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n-#[cfg(target_word_size = \"32\")] pub static bits: uint = 32;\n-#[cfg(target_word_size = \"64\")] pub static bits: uint = 64;\n-\n-int_module!(int, super::bits)\n+#[cfg(target_word_size = \"32\")] int_module!(int, 32)\n+#[cfg(target_word_size = \"64\")] int_module!(int, 64)\n \n #[cfg(target_word_size = \"32\")]\n impl BitCount for int {"}, {"sha": "8c60b0ec75a694cb841cf92ac34d7334dcca0cc9", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -8,22 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME(#4375): this shouldn't have to be a nested module named 'generated'\n-\n #[macro_escape];\n #[doc(hidden)];\n \n-macro_rules! int_module (($T:ty, $bits:expr) => (mod generated {\n-\n-#[allow(non_uppercase_statics)];\n-\n-use default::Default;\n-use num::{ToStrRadix, FromStrRadix};\n-use num::{CheckedDiv, Zero, One, strconv};\n-use prelude::*;\n-use str;\n-\n-pub use cmp::{min, max};\n+macro_rules! int_module (($T:ty, $bits:expr) => (\n \n pub static bits : uint = $bits;\n pub static bytes : uint = ($bits / 8);\n@@ -781,4 +769,4 @@ mod tests {\n     }\n }\n \n-}))\n+))"}, {"sha": "ed8ec3b6c54b919230c2c34beb7ab73521eee254", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,12 +10,19 @@\n \n //! Operations and constants for `u16`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u16, i16, 16)\n \n impl CheckedAdd for u16 {"}, {"sha": "2977549803384b5562e87227cc607425ca59a5dc", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,12 +10,19 @@\n \n //! Operations and constants for `u32`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u32, i32, 32)\n \n impl CheckedAdd for u32 {"}, {"sha": "dc43801eb3958b43fef8ea47e0e94286b2fec650", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,14 +10,21 @@\n \n //! Operations and constants for `u64`\n \n-use num::{CheckedAdd, CheckedSub};\n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n+use num::{CheckedAdd, CheckedSub};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u64, i64, 64)\n \n impl CheckedAdd for u64 {"}, {"sha": "12ad4efdbd5d1d4197f00fb89ba6fe5cc9e6b1d3", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,12 +10,19 @@\n \n //! Operations and constants for `u8`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u8, i8, 8)\n \n impl CheckedAdd for u8 {"}, {"sha": "549490050c590d412c3d70608ee05e44aca57132", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -10,13 +10,20 @@\n \n //! Operations and constants for `uint`\n \n-use num;\n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use mem;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n+use num;\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n-use mem;\n-\n-pub use self::generated::*;\n \n uint_module!(uint, int, ::int::bits)\n "}, {"sha": "ee3cd6446089a32bd3d74f030b0bc3b775c2b97e", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -8,23 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME(#4375): this shouldn't have to be a nested module named 'generated'\n-\n #[macro_escape];\n #[doc(hidden)];\n \n-macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (mod generated {\n-\n-#[allow(non_uppercase_statics)];\n-\n-use default::Default;\n-use num::BitCount;\n-use num::{ToStrRadix, FromStrRadix};\n-use num::{CheckedDiv, Zero, One, strconv};\n-use prelude::*;\n-use str;\n-\n-pub use cmp::{min, max};\n+macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n pub static bits : uint = $bits;\n pub static bytes : uint = ($bits / 8);\n@@ -554,4 +541,4 @@ mod tests {\n     }\n }\n \n-}))\n+))"}, {"sha": "3f169b511df9a665a26b89c47494483d0c377bf3", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -17,7 +17,6 @@ use io::stdio::StdWriter;\n use io::buffered::LineBufferedWriter;\n use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n use str::StrSlice;\n-use u32;\n use vec::ImmutableVector;\n #[cfg(test)] use cast::transmute;\n \n@@ -46,7 +45,7 @@ fn parse_log_level(level: &str) -> Option<u32> {\n             let position = log_level_names.iter().position(|&name| name == level);\n             match position {\n                 Some(position) => {\n-                    log_level = Some(u32::min(MAX_LOG_LEVEL, (position + 1) as u32))\n+                    log_level = Some(::cmp::min(MAX_LOG_LEVEL, (position + 1) as u32))\n                 },\n                 _ => {\n                     log_level = None;"}, {"sha": "313fd9c79b46a6768c5eb074503225f98545e1c6", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 89, "deletions": 95, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -13,8 +13,9 @@\n #[allow(missing_doc)];\n \n use clone::Clone;\n-\n-pub use self::inner::*;\n+#[cfg(not(test))] use cmp::*;\n+#[cfg(not(test))] use default::Default;\n+#[cfg(not(test))] use num::Zero;\n \n /// Method extensions to pairs where both types satisfy the `Clone` bound\n pub trait CopyableTuple<T, U> {\n@@ -86,116 +87,109 @@ macro_rules! tuple_impls {\n             })+\n         }\n     )+) => {\n-        pub mod inner {\n-            use clone::Clone;\n-            #[cfg(not(test))] use cmp::*;\n-            #[cfg(not(test))] use default::Default;\n-            #[cfg(not(test))] use num::Zero;\n-\n-            $(\n-                pub trait $move_trait<$($T),+> {\n-                    $(fn $get_fn(self) -> $T;)+\n-                }\n+        $(\n+            pub trait $move_trait<$($T),+> {\n+                $(fn $get_fn(self) -> $T;)+\n+            }\n \n-                impl<$($T),+> $move_trait<$($T),+> for ($($T,)+) {\n-                    $(\n-                        #[inline]\n-                        fn $get_fn(self) -> $T {\n-                            let $move_pattern = self;\n-                            $ret\n-                        }\n-                    )+\n-                }\n-\n-                pub trait $immutable_trait<$($T),+> {\n-                    $(fn $get_ref_fn<'a>(&'a self) -> &'a $T;)+\n-                }\n+            impl<$($T),+> $move_trait<$($T),+> for ($($T,)+) {\n+                $(\n+                    #[inline]\n+                    fn $get_fn(self) -> $T {\n+                        let $move_pattern = self;\n+                        $ret\n+                    }\n+                )+\n+            }\n \n-                impl<$($T),+> $immutable_trait<$($T),+> for ($($T,)+) {\n-                    $(\n-                        #[inline]\n-                        fn $get_ref_fn<'a>(&'a self) -> &'a $T {\n-                            let $ref_pattern = *self;\n-                            $ret\n-                        }\n-                    )+\n-                }\n+            pub trait $immutable_trait<$($T),+> {\n+                $(fn $get_ref_fn<'a>(&'a self) -> &'a $T;)+\n+            }\n \n-                impl<$($T:Clone),+> Clone for ($($T,)+) {\n-                    fn clone(&self) -> ($($T,)+) {\n-                        ($(self.$get_ref_fn().clone(),)+)\n+            impl<$($T),+> $immutable_trait<$($T),+> for ($($T,)+) {\n+                $(\n+                    #[inline]\n+                    fn $get_ref_fn<'a>(&'a self) -> &'a $T {\n+                        let $ref_pattern = *self;\n+                        $ret\n                     }\n+                )+\n+            }\n+\n+            impl<$($T:Clone),+> Clone for ($($T,)+) {\n+                fn clone(&self) -> ($($T,)+) {\n+                    ($(self.$get_ref_fn().clone(),)+)\n                 }\n+            }\n \n-                #[cfg(not(test))]\n-                impl<$($T:Eq),+> Eq for ($($T,)+) {\n-                    #[inline]\n-                    fn eq(&self, other: &($($T,)+)) -> bool {\n-                        $(*self.$get_ref_fn() == *other.$get_ref_fn())&&+\n-                    }\n-                    #[inline]\n-                    fn ne(&self, other: &($($T,)+)) -> bool {\n-                        $(*self.$get_ref_fn() != *other.$get_ref_fn())||+\n-                    }\n+            #[cfg(not(test))]\n+            impl<$($T:Eq),+> Eq for ($($T,)+) {\n+                #[inline]\n+                fn eq(&self, other: &($($T,)+)) -> bool {\n+                    $(*self.$get_ref_fn() == *other.$get_ref_fn())&&+\n+                }\n+                #[inline]\n+                fn ne(&self, other: &($($T,)+)) -> bool {\n+                    $(*self.$get_ref_fn() != *other.$get_ref_fn())||+\n                 }\n+            }\n \n-                #[cfg(not(test))]\n-                impl<$($T:TotalEq),+> TotalEq for ($($T,)+) {\n-                    #[inline]\n-                    fn equals(&self, other: &($($T,)+)) -> bool {\n-                        $(self.$get_ref_fn().equals(other.$get_ref_fn()))&&+\n-                    }\n+            #[cfg(not(test))]\n+            impl<$($T:TotalEq),+> TotalEq for ($($T,)+) {\n+                #[inline]\n+                fn equals(&self, other: &($($T,)+)) -> bool {\n+                    $(self.$get_ref_fn().equals(other.$get_ref_fn()))&&+\n                 }\n+            }\n \n-                #[cfg(not(test))]\n-                impl<$($T:Ord + Eq),+> Ord for ($($T,)+) {\n-                    #[inline]\n-                    fn lt(&self, other: &($($T,)+)) -> bool {\n-                        lexical_ord!(lt, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n-                    }\n-                    #[inline]\n-                    fn le(&self, other: &($($T,)+)) -> bool {\n-                        lexical_ord!(le, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n-                    }\n-                    #[inline]\n-                    fn ge(&self, other: &($($T,)+)) -> bool {\n-                        lexical_ord!(ge, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n-                    }\n-                    #[inline]\n-                    fn gt(&self, other: &($($T,)+)) -> bool {\n-                        lexical_ord!(gt, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n-                    }\n+            #[cfg(not(test))]\n+            impl<$($T:Ord + Eq),+> Ord for ($($T,)+) {\n+                #[inline]\n+                fn lt(&self, other: &($($T,)+)) -> bool {\n+                    lexical_ord!(lt, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n+                }\n+                #[inline]\n+                fn le(&self, other: &($($T,)+)) -> bool {\n+                    lexical_ord!(le, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n+                }\n+                #[inline]\n+                fn ge(&self, other: &($($T,)+)) -> bool {\n+                    lexical_ord!(ge, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n                 }\n+                #[inline]\n+                fn gt(&self, other: &($($T,)+)) -> bool {\n+                    lexical_ord!(gt, $(self.$get_ref_fn(), other.$get_ref_fn()),+)\n+                }\n+            }\n \n-                #[cfg(not(test))]\n-                impl<$($T:TotalOrd),+> TotalOrd for ($($T,)+) {\n-                    #[inline]\n-                    fn cmp(&self, other: &($($T,)+)) -> Ordering {\n-                        lexical_cmp!($(self.$get_ref_fn(), other.$get_ref_fn()),+)\n-                    }\n+            #[cfg(not(test))]\n+            impl<$($T:TotalOrd),+> TotalOrd for ($($T,)+) {\n+                #[inline]\n+                fn cmp(&self, other: &($($T,)+)) -> Ordering {\n+                    lexical_cmp!($(self.$get_ref_fn(), other.$get_ref_fn()),+)\n                 }\n+            }\n \n-                #[cfg(not(test))]\n-                impl<$($T:Default),+> Default for ($($T,)+) {\n-                    #[inline]\n-                    fn default() -> ($($T,)+) {\n-                        ($({ let x: $T = Default::default(); x},)+)\n-                    }\n+            #[cfg(not(test))]\n+            impl<$($T:Default),+> Default for ($($T,)+) {\n+                #[inline]\n+                fn default() -> ($($T,)+) {\n+                    ($({ let x: $T = Default::default(); x},)+)\n                 }\n+            }\n \n-                #[cfg(not(test))]\n-                impl<$($T:Zero),+> Zero for ($($T,)+) {\n-                    #[inline]\n-                    fn zero() -> ($($T,)+) {\n-                        ($({ let x: $T = Zero::zero(); x},)+)\n-                    }\n-                    #[inline]\n-                    fn is_zero(&self) -> bool {\n-                        $(self.$get_ref_fn().is_zero())&&+\n-                    }\n+            #[cfg(not(test))]\n+            impl<$($T:Zero),+> Zero for ($($T,)+) {\n+                #[inline]\n+                fn zero() -> ($($T,)+) {\n+                    ($({ let x: $T = Zero::zero(); x},)+)\n                 }\n-            )+\n-        }\n+                #[inline]\n+                fn is_zero(&self) -> bool {\n+                    $(self.$get_ref_fn().is_zero())&&+\n+                }\n+            }\n+        )+\n     }\n }\n "}, {"sha": "293c9ed98172865ec51461bbcc9c197aa93bd95d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991bb578329ca921fdc910d9b6b064e8f521d2/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=80991bb578329ca921fdc910d9b6b064e8f521d2", "patch": "@@ -2463,15 +2463,14 @@ impl<A> Default for @[A] {\n }\n \n macro_rules! iterator {\n-    /* FIXME: #4375 Cannot attach documentation/attributes to a macro generated struct.\n     (struct $name:ident -> $ptr:ty, $elem:ty) => {\n+        /// An iterator for iterating over a vector.\n         pub struct $name<'self, T> {\n             priv ptr: $ptr,\n             priv end: $ptr,\n-            priv lifetime: $elem // FIXME: #5922\n+            priv lifetime: Option<$elem> // FIXME: #5922\n         }\n-    };*/\n-    (impl $name:ident -> $elem:ty) => {\n+\n         impl<'self, T> Iterator<$elem> for $name<'self, T> {\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n@@ -2502,11 +2501,7 @@ macro_rules! iterator {\n                 (exact, Some(exact))\n             }\n         }\n-    }\n-}\n \n-macro_rules! double_ended_iterator {\n-    (impl $name:ident -> $elem:ty) => {\n         impl<'self, T> DoubleEndedIterator<$elem> for $name<'self, T> {\n             #[inline]\n             fn next_back(&mut self) -> Option<$elem> {\n@@ -2548,15 +2543,7 @@ impl<'self, T> RandomAccessIterator<&'self T> for VecIterator<'self, T> {\n     }\n }\n \n-//iterator!{struct VecIterator -> *T, &'self T}\n-/// An iterator for iterating over a vector.\n-pub struct VecIterator<'self, T> {\n-    priv ptr: *T,\n-    priv end: *T,\n-    priv lifetime: Option<&'self ()> // FIXME: #5922\n-}\n-iterator!{impl VecIterator -> &'self T}\n-double_ended_iterator!{impl VecIterator -> &'self T}\n+iterator!{struct VecIterator -> *T, &'self T}\n pub type RevIterator<'self, T> = Invert<VecIterator<'self, T>>;\n \n impl<'self, T> ExactSize<&'self T> for VecIterator<'self, T> {}\n@@ -2566,15 +2553,7 @@ impl<'self, T> Clone for VecIterator<'self, T> {\n     fn clone(&self) -> VecIterator<'self, T> { *self }\n }\n \n-//iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n-/// An iterator for mutating the elements of a vector.\n-pub struct VecMutIterator<'self, T> {\n-    priv ptr: *mut T,\n-    priv end: *mut T,\n-    priv lifetime: Option<&'self mut ()> // FIXME: #5922\n-}\n-iterator!{impl VecMutIterator -> &'self mut T}\n-double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n+iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n pub type MutRevIterator<'self, T> = Invert<VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector."}]}