{"sha": "a17b41033ac5406ca93f46a0562f0792701586df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExN2I0MTAzM2FjNTQwNmNhOTNmNDZhMDU2MmYwNzkyNzAxNTg2ZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-01T12:29:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-01T12:30:07Z"}, "message": "update salsa", "tree": {"sha": "38828c9efec9d9d2ca6f925551389e891756427e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38828c9efec9d9d2ca6f925551389e891756427e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17b41033ac5406ca93f46a0562f0792701586df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17b41033ac5406ca93f46a0562f0792701586df", "html_url": "https://github.com/rust-lang/rust/commit/a17b41033ac5406ca93f46a0562f0792701586df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17b41033ac5406ca93f46a0562f0792701586df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962a491829c2a803f5dc8c8c5e173baa89079e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/962a491829c2a803f5dc8c8c5e173baa89079e8b", "html_url": "https://github.com/rust-lang/rust/commit/962a491829c2a803f5dc8c8c5e173baa89079e8b"}], "stats": {"total": 100, "additions": 55, "deletions": 45}, "files": [{"sha": "fd1fb5ea5aebbb15c397d4d5575a69159a30a046", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a17b41033ac5406ca93f46a0562f0792701586df/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a17b41033ac5406ca93f46a0562f0792701586df/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a17b41033ac5406ca93f46a0562f0792701586df", "patch": "@@ -268,7 +268,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -484,7 +484,7 @@ dependencies = [\n  \"num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -608,7 +608,7 @@ dependencies = [\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -836,7 +836,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.7.0\"\n+version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -890,7 +890,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -965,7 +965,7 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.16\"\n+version = \"0.15.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -980,7 +980,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -995,7 +995,7 @@ dependencies = [\n \n [[package]]\n name = \"tera\"\n-version = \"0.11.18\"\n+version = \"0.11.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1021,7 +1021,7 @@ dependencies = [\n  \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tera 0.11.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tera 0.11.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1352,7 +1352,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7153dd96dade874ab973e098cb62fcdbb89a03682e46b144fd09550998d4a4a7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\"\n-\"checksum salsa 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef0f1fb2a01d4579b6658343b1b5431a72c62c186ebb9b40bd6cd3078c7afecf\"\n+\"checksum salsa 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e56b13ce9b2bfaa1c89863d76880838c0734de85beeaef437fd70d4fa7e253d3\"\n \"checksum same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f20c4be53a8a1ff4c1f1b2bd14570d2f634628709752f0702ecdd2b3f9a5267\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n@@ -1368,10 +1368,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum superslice 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b50b13d42370e0f5fc62eafdd5c2d20065eaf5458dab215ff3e20e63eea96b30\"\n \"checksum syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"261ae9ecaa397c42b960649561949d69311f08eeaea86a65696e6e46517cf741\"\n-\"checksum syn 0.15.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b78d53b5e1b6e63129140b1336877c3bddbae398c7956150396bdad0e28676c\"\n+\"checksum syn 0.15.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3391038ebc3e4ab24eb028cb0ef2f2dc4ba0cbf72ee895ed6a6fad730640b5bc\"\n \"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n-\"checksum tera 0.11.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c87cae42cc4fc480278c7583792cc5da2d51a25be916b7921cbb45c43063b8d\"\n+\"checksum tera 0.11.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ac6d8ad623a7efcfb4367ce2a36f84ef849d5aa3c7bcf2e0324c4cbcc57ebaf\"\n \"checksum teraron 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d89ad4617d1dec55331067fadaa041e813479e1779616f3d3ce9308bf46184e\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8009d7bdbd896a7e09b595f8f9325a19047fc708653e60d0895202b82135048f\""}, {"sha": "908ee1c812a754afe37e641665deccbce997ddc0", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17b41033ac5406ca93f46a0562f0792701586df/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a17b41033ac5406ca93f46a0562f0792701586df/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=a17b41033ac5406ca93f46a0562f0792701586df", "patch": "@@ -9,7 +9,7 @@ log = \"0.4.5\"\n relative-path = \"0.4.0\"\n rayon = \"1.0.2\"\n fst = \"0.3.1\"\n-salsa = \"0.7.0\"\n+salsa = \"0.8.0\"\n rustc-hash = \"1.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }"}, {"sha": "9548ec602d2b92ddd02e3999f3c2f138c0abcc93", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a17b41033ac5406ca93f46a0562f0792701586df/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17b41033ac5406ca93f46a0562f0792701586df/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=a17b41033ac5406ca93f46a0562f0792701586df", "patch": "@@ -35,16 +35,10 @@ pub(crate) fn check_canceled(db: &impl salsa::Database) -> Cancelable<()> {\n }\n \n impl salsa::ParallelDatabase for RootDatabase {\n-    fn fork(&self) -> Self {\n-        RootDatabase {\n-            runtime: self.runtime.fork(),\n-        }\n-    }\n-}\n-\n-impl Clone for RootDatabase {\n-    fn clone(&self) -> RootDatabase {\n-        salsa::ParallelDatabase::fork(self)\n+    fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n+        salsa::Snapshot::new(RootDatabase {\n+            runtime: self.runtime.snapshot(self),\n+        })\n     }\n }\n "}, {"sha": "77dd71dcf1fdd9f403c81f49344d0dc1bf9f4cc1", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a17b41033ac5406ca93f46a0562f0792701586df/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17b41033ac5406ca93f46a0562f0792701586df/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=a17b41033ac5406ca93f46a0562f0792701586df", "patch": "@@ -1,4 +1,5 @@\n use std::{\n+    fmt,\n     hash::{Hash, Hasher},\n     sync::Arc,\n };\n@@ -92,26 +93,26 @@ pub(crate) struct AnalysisHostImpl {\n \n impl AnalysisHostImpl {\n     pub fn new() -> AnalysisHostImpl {\n-        let db = db::RootDatabase::default();\n-        db.query(crate::input::SourceRootQuery)\n+        let mut db = db::RootDatabase::default();\n+        db.query_mut(crate::input::SourceRootQuery)\n             .set(WORKSPACE, Default::default());\n-        db.query(crate::input::CrateGraphQuery)\n+        db.query_mut(crate::input::CrateGraphQuery)\n             .set((), Default::default());\n-        db.query(crate::input::LibrariesQuery)\n+        db.query_mut(crate::input::LibrariesQuery)\n             .set((), Default::default());\n         AnalysisHostImpl { db }\n     }\n     pub fn analysis(&self) -> AnalysisImpl {\n         AnalysisImpl {\n-            db: self.db.fork(), // freeze revision here\n+            db: self.db.snapshot(),\n         }\n     }\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n         log::info!(\"apply_change {:?}\", change);\n \n         for (file_id, text) in change.files_changed {\n             self.db\n-                .query(crate::input::FileTextQuery)\n+                .query_mut(crate::input::FileTextQuery)\n                 .set(file_id, Arc::new(text))\n         }\n         if !(change.files_added.is_empty() && change.files_removed.is_empty()) {\n@@ -121,22 +122,22 @@ impl AnalysisHostImpl {\n             let mut source_root = SourceRoot::clone(&self.db.source_root(WORKSPACE));\n             for (file_id, text) in change.files_added {\n                 self.db\n-                    .query(crate::input::FileTextQuery)\n+                    .query_mut(crate::input::FileTextQuery)\n                     .set(file_id, Arc::new(text));\n                 self.db\n-                    .query(crate::input::FileSourceRootQuery)\n+                    .query_mut(crate::input::FileSourceRootQuery)\n                     .set(file_id, crate::input::WORKSPACE);\n                 source_root.files.insert(file_id);\n             }\n             for file_id in change.files_removed {\n                 self.db\n-                    .query(crate::input::FileTextQuery)\n+                    .query_mut(crate::input::FileTextQuery)\n                     .set(file_id, Arc::new(String::new()));\n                 source_root.files.remove(&file_id);\n             }\n             source_root.file_resolver = file_resolver;\n             self.db\n-                .query(crate::input::SourceRootQuery)\n+                .query_mut(crate::input::SourceRootQuery)\n                 .set(WORKSPACE, Arc::new(source_root))\n         }\n         if !change.libraries_added.is_empty() {\n@@ -148,38 +149,44 @@ impl AnalysisHostImpl {\n                 for (file_id, text) in library.files {\n                     files.insert(file_id);\n                     self.db\n-                        .query(crate::input::FileSourceRootQuery)\n+                        .query_mut(crate::input::FileSourceRootQuery)\n                         .set_constant(file_id, source_root_id);\n                     self.db\n-                        .query(crate::input::FileTextQuery)\n+                        .query_mut(crate::input::FileTextQuery)\n                         .set_constant(file_id, Arc::new(text));\n                 }\n                 let source_root = SourceRoot {\n                     files,\n                     file_resolver: library.file_resolver,\n                 };\n                 self.db\n-                    .query(crate::input::SourceRootQuery)\n+                    .query_mut(crate::input::SourceRootQuery)\n                     .set(source_root_id, Arc::new(source_root));\n                 self.db\n-                    .query(crate::input::LibrarySymbolsQuery)\n+                    .query_mut(crate::input::LibrarySymbolsQuery)\n                     .set(source_root_id, Arc::new(library.symbol_index));\n             }\n             self.db\n-                .query(crate::input::LibrariesQuery)\n+                .query_mut(crate::input::LibrariesQuery)\n                 .set((), Arc::new(libraries));\n         }\n         if let Some(crate_graph) = change.crate_graph {\n             self.db\n-                .query(crate::input::CrateGraphQuery)\n+                .query_mut(crate::input::CrateGraphQuery)\n                 .set((), Arc::new(crate_graph))\n         }\n     }\n }\n \n-#[derive(Debug)]\n pub(crate) struct AnalysisImpl {\n-    pub(crate) db: db::RootDatabase,\n+    pub(crate) db: salsa::Snapshot<db::RootDatabase>,\n+}\n+\n+impl fmt::Debug for AnalysisImpl {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let db: &db::RootDatabase = &self.db;\n+        fmt.debug_struct(\"AnalysisImpl\").field(\"db\", db).finish()\n+    }\n }\n \n impl AnalysisImpl {\n@@ -198,10 +205,19 @@ impl AnalysisImpl {\n                 .collect()\n         } else {\n             let files = &self.db.source_root(WORKSPACE).files;\n-            let db = self.db.clone();\n+\n+            /// Need to wrap Snapshot to provide `Clon` impl for `map_with`\n+            struct Snap(salsa::Snapshot<db::RootDatabase>);\n+            impl Clone for Snap {\n+                fn clone(&self) -> Snap {\n+                    Snap(self.0.snapshot())\n+                }\n+            }\n+\n+            let snap = Snap(self.db.snapshot());\n             files\n                 .par_iter()\n-                .map_with(db, |db, &file_id| db.file_symbols(file_id))\n+                .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n                 .filter_map(|it| it.ok())\n                 .collect()\n         };\n@@ -229,7 +245,7 @@ impl AnalysisImpl {\n                         return None;\n                     }\n                 };\n-                let decl = link.bind_source(&module_tree, &self.db);\n+                let decl = link.bind_source(&module_tree, &*self.db);\n                 let decl = decl.ast();\n \n                 let sym = FileSymbol {\n@@ -371,7 +387,7 @@ impl AnalysisImpl {\n             })\n             .collect::<Vec<_>>();\n         if let Some(m) = module_tree.any_module_for_file(file_id) {\n-            for (name_node, problem) in m.problems(&module_tree, &self.db) {\n+            for (name_node, problem) in m.problems(&module_tree, &*self.db) {\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n                         let create_file = FileSystemEdit::CreateFile {"}]}