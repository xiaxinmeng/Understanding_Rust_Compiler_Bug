{"sha": "7549cfa599004715a57fa17f8a988c216e0f6f4e", "node_id": "C_kwDOAAsO6NoAKDc1NDljZmE1OTkwMDQ3MTVhNTdmYTE3ZjhhOTg4YzIxNmUwZjZmNGU", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-03-21T23:02:54Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-03-21T23:02:54Z"}, "message": "rename internal helper trait AsIntoIter to AsVecIntoIter", "tree": {"sha": "b5048e0ed0edac991b94bcf0e146e275dc533728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5048e0ed0edac991b94bcf0e146e275dc533728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7549cfa599004715a57fa17f8a988c216e0f6f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7549cfa599004715a57fa17f8a988c216e0f6f4e", "html_url": "https://github.com/rust-lang/rust/commit/7549cfa599004715a57fa17f8a988c216e0f6f4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7549cfa599004715a57fa17f8a988c216e0f6f4e/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a602adde806fb63853f705d8c98884e991545b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a602adde806fb63853f705d8c98884e991545b", "html_url": "https://github.com/rust-lang/rust/commit/a1a602adde806fb63853f705d8c98884e991545b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "ef5bef0253a569b2cbcc60d277a1b3ad8217d55c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=7549cfa599004715a57fa17f8a988c216e0f6f4e", "patch": "@@ -151,7 +151,7 @@ use core::ptr;\n \n use crate::collections::TryReserveError;\n use crate::slice;\n-use crate::vec::{self, AsIntoIter, Vec};\n+use crate::vec::{self, AsVecIntoIter, Vec};\n \n use super::SpecExtend;\n \n@@ -1418,7 +1418,7 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n #[doc(hidden)]\n unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n \n-unsafe impl<I> AsIntoIter for IntoIter<I> {\n+unsafe impl<I> AsVecIntoIter for IntoIter<I> {\n     type Item = I;\n \n     fn as_into_iter(&mut self) -> &mut vec::IntoIter<Self::Item> {"}, {"sha": "6dc548fc8e9ae9cd649c5f1cbaa9a0834d6372e8", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=7549cfa599004715a57fa17f8a988c216e0f6f4e", "patch": "@@ -16,7 +16,7 @@\n //! `FromIterator` implementation benefit from this too.\n //!\n //! Access to the underlying source goes through a further layer of indirection via the private\n-//! trait [`AsIntoIter`] to hide the implementation detail that other collections may use\n+//! trait [`AsVecIntoIter`] to hide the implementation detail that other collections may use\n //! `vec::IntoIter` internally.\n //!\n //! In-place iteration depends on the interaction of several unsafe traits, implementation\n@@ -142,16 +142,16 @@ impl<T> InPlaceIterableMarker for T where T: InPlaceIterable {}\n \n impl<T, I> SpecFromIter<T, I> for Vec<T>\n where\n-    I: Iterator<Item = T> + SourceIter<Source: AsIntoIter> + InPlaceIterableMarker,\n+    I: Iterator<Item = T> + SourceIter<Source: AsVecIntoIter> + InPlaceIterableMarker,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // See \"Layout constraints\" section in the module documentation. We rely on const\n         // optimization here since these conditions currently cannot be expressed as trait bounds\n         if mem::size_of::<T>() == 0\n             || mem::size_of::<T>()\n-                != mem::size_of::<<<I as SourceIter>::Source as AsIntoIter>::Item>()\n+                != mem::size_of::<<<I as SourceIter>::Source as AsVecIntoIter>::Item>()\n             || mem::align_of::<T>()\n-                != mem::align_of::<<<I as SourceIter>::Source as AsIntoIter>::Item>()\n+                != mem::align_of::<<<I as SourceIter>::Source as AsVecIntoIter>::Item>()\n         {\n             // fallback to more generic implementations\n             return SpecFromIterNested::from_iter(iterator);\n@@ -289,7 +289,7 @@ where\n /// In-place iteration relies on implementation details of `vec::IntoIter`, most importantly that\n /// it does not create references to the whole allocation during iteration, only raw pointers\n #[rustc_specialization_trait]\n-pub(crate) unsafe trait AsIntoIter {\n+pub(crate) unsafe trait AsVecIntoIter {\n     type Item;\n     fn as_into_iter(&mut self) -> &mut super::IntoIter<Self::Item>;\n }"}, {"sha": "f17b8d71b3a1a23815d56e7fc15c3187d3a602cc", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=7549cfa599004715a57fa17f8a988c216e0f6f4e", "patch": "@@ -1,5 +1,5 @@\n #[cfg(not(no_global_oom_handling))]\n-use super::AsIntoIter;\n+use super::AsVecIntoIter;\n use crate::alloc::{Allocator, Global};\n use crate::raw_vec::RawVec;\n use core::fmt;\n@@ -346,7 +346,7 @@ unsafe impl<T, A: Allocator> SourceIter for IntoIter<T, A> {\n }\n \n #[cfg(not(no_global_oom_handling))]\n-unsafe impl<T> AsIntoIter for IntoIter<T> {\n+unsafe impl<T> AsVecIntoIter for IntoIter<T> {\n     type Item = T;\n \n     fn as_into_iter(&mut self) -> &mut IntoIter<Self::Item> {"}, {"sha": "9a66e69bdc0615e7a6191d38370617802bb7b12d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7549cfa599004715a57fa17f8a988c216e0f6f4e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=7549cfa599004715a57fa17f8a988c216e0f6f4e", "patch": "@@ -96,7 +96,7 @@ mod drain;\n mod cow;\n \n #[cfg(not(no_global_oom_handling))]\n-pub(crate) use self::in_place_collect::AsIntoIter;\n+pub(crate) use self::in_place_collect::AsVecIntoIter;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::into_iter::IntoIter;\n "}]}