{"sha": "795bbfe056de9acd0ada4a401b128f23dd368868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWJiZmUwNTZkZTlhY2QwYWRhNGE0MDFiMTI4ZjIzZGQzNjg4Njg=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "benoit.dugarreau@platform.sh", "date": "2020-11-04T10:58:41Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "benoit.dugarreau@platform.sh", "date": "2020-11-04T10:58:41Z"}, "message": "Add tracking issue", "tree": {"sha": "db701a143c562e59793b3ec3b540c663ccd83648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db701a143c562e59793b3ec3b540c663ccd83648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795bbfe056de9acd0ada4a401b128f23dd368868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795bbfe056de9acd0ada4a401b128f23dd368868", "html_url": "https://github.com/rust-lang/rust/commit/795bbfe056de9acd0ada4a401b128f23dd368868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795bbfe056de9acd0ada4a401b128f23dd368868/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a12d727df77d086c83167e5f68da2fdc7303f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d727df77d086c83167e5f68da2fdc7303f7b", "html_url": "https://github.com/rust-lang/rust/commit/9a12d727df77d086c83167e5f68da2fdc7303f7b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d4096d60ca07a2b1c669dd2469b0d623562a6f90", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795bbfe056de9acd0ada4a401b128f23dd368868/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bbfe056de9acd0ada4a401b128f23dd368868/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=795bbfe056de9acd0ada4a401b128f23dd368868", "patch": "@@ -406,7 +406,7 @@ impl<T> Cell<T> {\n     /// assert_eq!(five, 5);\n     /// ```\n     #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n-    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     pub const fn into_inner(self) -> T {\n         self.value.into_inner()\n     }\n@@ -669,7 +669,7 @@ impl<T> RefCell<T> {\n     /// let five = c.into_inner();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     #[inline]\n     pub const fn into_inner(self) -> T {\n         // Since this function takes `self` (the `RefCell`) by value, the\n@@ -1682,7 +1682,7 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     pub const fn into_inner(self) -> T {\n         self.value\n     }"}, {"sha": "dd6dfcfa7f6a95032f5c9832693bc41943908543", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795bbfe056de9acd0ada4a401b128f23dd368868/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bbfe056de9acd0ada4a401b128f23dd368868/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=795bbfe056de9acd0ada4a401b128f23dd368868", "patch": "@@ -365,7 +365,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     pub const fn into_inner(self) -> bool {\n         self.v.into_inner() != 0\n     }\n@@ -942,7 +942,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     pub const fn into_inner(self) -> *mut T {\n         self.p.into_inner()\n     }\n@@ -1464,7 +1464,7 @@ assert_eq!(some_var.into_inner(), 5);\n ```\"),\n                 #[inline]\n                 #[$stable_access]\n-                #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+                #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n                 pub const fn into_inner(self) -> $int_type {\n                     self.v.into_inner()\n                 }"}]}