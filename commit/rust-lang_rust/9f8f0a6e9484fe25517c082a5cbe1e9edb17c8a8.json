{"sha": "9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "node_id": "C_kwDOAAsO6NoAKDlmOGYwYTZlOTQ4NGZlMjU1MTdjMDgyYTVjYmUxZTllZGIxN2M4YTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T13:28:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T13:28:49Z"}, "message": "Auto merge of #94357 - matthiaskrgr:rollup-xrjaof3, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #93845 (Remove in band lifetimes)\n - #94155 (Extend toggle GUI test a bit)\n - #94252 (don't special case `DefKind::Ctor` in encoding)\n - #94305 (Remove an unnecessary restriction in `dest_prop`)\n - #94343 (Miri fn ptr check: don't use conservative null check)\n - #94344 (diagnostic: suggest parens when users want logical ops, but get closures)\n - #94352 (Fix SGX docs build)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "73d3fa90a8ca718ed39a8529e1901015f3a9bdc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d3fa90a8ca718ed39a8529e1901015f3a9bdc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "html_url": "https://github.com/rust-lang/rust/commit/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "html_url": "https://github.com/rust-lang/rust/commit/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228"}, {"sha": "60606456d3b5cd4baf68f18191b0cfca57d9c85c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60606456d3b5cd4baf68f18191b0cfca57d9c85c", "html_url": "https://github.com/rust-lang/rust/commit/60606456d3b5cd4baf68f18191b0cfca57d9c85c"}], "stats": {"total": 2046, "additions": 386, "deletions": 1660}, "files": [{"sha": "abe086affda917a7fb8993f13874d2ec86e7d433", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 45, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -142,13 +142,9 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// indicate whether or not we're in a place where new lifetimes will result\n     /// in in-band lifetime definitions, such a function or an impl header,\n     /// including implicit lifetimes from `impl_header_lifetime_elision`.\n-    is_collecting_in_band_lifetimes: bool,\n+    is_collecting_anonymous_lifetimes: bool,\n \n     /// Currently in-scope lifetimes defined in impl headers, fn headers, or HRTB.\n-    /// When `is_collecting_in_band_lifetimes` is true, each lifetime is checked\n-    /// against this list to see if it is already in-scope, or if a definition\n-    /// needs to be created for it.\n-    ///\n     /// We always store a `normalize_to_macros_2_0()` version of the param-name in this\n     /// vector.\n     in_scope_lifetimes: Vec<ParamName>,\n@@ -379,7 +375,7 @@ pub fn lower_crate<'a, 'hir>(\n         task_context: None,\n         current_item: None,\n         lifetimes_to_define: Vec::new(),\n-        is_collecting_in_band_lifetimes: false,\n+        is_collecting_anonymous_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n         allow_try_trait: Some([sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n@@ -726,13 +722,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> (Vec<(Span, ParamName)>, T) {\n-        let was_collecting = std::mem::replace(&mut self.is_collecting_in_band_lifetimes, true);\n+        let was_collecting = std::mem::replace(&mut self.is_collecting_anonymous_lifetimes, true);\n         let len = self.lifetimes_to_define.len();\n \n         let res = f(self);\n \n         let lifetimes_to_define = self.lifetimes_to_define.split_off(len);\n-        self.is_collecting_in_band_lifetimes = was_collecting;\n+        self.is_collecting_anonymous_lifetimes = was_collecting;\n         (lifetimes_to_define, res)\n     }\n \n@@ -749,7 +745,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // that collisions are ok here and this shouldn't\n         // really show up for end-user.\n         let (str_name, kind) = match hir_name {\n-            ParamName::Plain(ident) => (ident.name, hir::LifetimeParamKind::InBand),\n+            ParamName::Plain(ident) => (ident.name, hir::LifetimeParamKind::Explicit),\n             ParamName::Fresh(_) => (kw::UnderscoreLifetime, hir::LifetimeParamKind::Elided),\n             ParamName::Error => (kw::UnderscoreLifetime, hir::LifetimeParamKind::Error),\n         };\n@@ -773,38 +769,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    /// When there is a reference to some lifetime `'a`, and in-band\n-    /// lifetimes are enabled, then we want to push that lifetime into\n-    /// the vector of names to define later. In that case, it will get\n-    /// added to the appropriate generics.\n-    fn maybe_collect_in_band_lifetime(&mut self, ident: Ident) {\n-        if !self.is_collecting_in_band_lifetimes {\n-            return;\n-        }\n-\n-        if !self.sess.features_untracked().in_band_lifetimes {\n-            return;\n-        }\n-\n-        if self.in_scope_lifetimes.contains(&ParamName::Plain(ident.normalize_to_macros_2_0())) {\n-            return;\n-        }\n-\n-        let hir_name = ParamName::Plain(ident);\n-\n-        if self.lifetimes_to_define.iter().any(|(_, lt_name)| {\n-            lt_name.normalize_to_macros_2_0() == hir_name.normalize_to_macros_2_0()\n-        }) {\n-            return;\n-        }\n-\n-        self.lifetimes_to_define.push((ident.span, hir_name));\n-    }\n-\n     /// When we have either an elided or `'_` lifetime in an impl\n     /// header, we convert it to an in-band lifetime.\n-    fn collect_fresh_in_band_lifetime(&mut self, span: Span) -> ParamName {\n-        assert!(self.is_collecting_in_band_lifetimes);\n+    fn collect_fresh_anonymous_lifetime(&mut self, span: Span) -> ParamName {\n+        assert!(self.is_collecting_anonymous_lifetimes);\n         let index = self.lifetimes_to_define.len() + self.in_scope_lifetimes.len();\n         let hir_name = ParamName::Fresh(index);\n         self.lifetimes_to_define.push((span, hir_name));\n@@ -1946,7 +1914,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             ident if ident.name == kw::UnderscoreLifetime => match self.anonymous_lifetime_mode {\n                 AnonymousLifetimeMode::CreateParameter => {\n-                    let fresh_name = self.collect_fresh_in_band_lifetime(span);\n+                    let fresh_name = self.collect_fresh_anonymous_lifetime(span);\n                     self.new_named_lifetime(l.id, span, hir::LifetimeName::Param(fresh_name))\n                 }\n \n@@ -1957,7 +1925,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 AnonymousLifetimeMode::ReportError => self.new_error_lifetime(Some(l.id), span),\n             },\n             ident => {\n-                self.maybe_collect_in_band_lifetime(ident);\n                 let param_name = ParamName::Plain(self.lower_ident(ident));\n                 self.new_named_lifetime(l.id, span, hir::LifetimeName::Param(param_name))\n             }\n@@ -2001,8 +1968,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let (name, kind) = match param.kind {\n             GenericParamKind::Lifetime => {\n-                let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n-                self.is_collecting_in_band_lifetimes = false;\n+                let was_collecting_in_band = self.is_collecting_anonymous_lifetimes;\n+                self.is_collecting_anonymous_lifetimes = false;\n \n                 let lt = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n@@ -2025,7 +1992,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let kind =\n                     hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit };\n \n-                self.is_collecting_in_band_lifetimes = was_collecting_in_band;\n+                self.is_collecting_anonymous_lifetimes = was_collecting_in_band;\n \n                 (param_name, kind)\n             }\n@@ -2384,7 +2351,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // Hence `impl Foo for &u32` becomes `impl<'f> Foo for &'f u32` for some fresh\n             // `'f`.\n             AnonymousLifetimeMode::CreateParameter => {\n-                let fresh_name = self.collect_fresh_in_band_lifetime(span);\n+                let fresh_name = self.collect_fresh_anonymous_lifetime(span);\n                 hir::Lifetime {\n                     hir_id: self.next_id(),\n                     span: self.lower_span(span),"}, {"sha": "99888992bc86aef53944c184b90edb73e82559c2", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -217,8 +217,9 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n             // Comparisons of abstract pointers with null pointers are known if the pointer\n             // is in bounds, because if they are in bounds, the pointer can't be null.\n             // Inequality with integers other than null can never be known for sure.\n-            (Scalar::Int(int), Scalar::Ptr(ptr, _)) | (Scalar::Ptr(ptr, _), Scalar::Int(int)) => {\n-                int.is_null() && !self.memory.ptr_may_be_null(ptr.into())\n+            (Scalar::Int(int), ptr @ Scalar::Ptr(..))\n+            | (ptr @ Scalar::Ptr(..), Scalar::Int(int)) => {\n+                int.is_null() && !self.scalar_may_be_null(ptr)\n             }\n             // FIXME: return `true` for at least some comparisons where we can reliably\n             // determine the result of runtime inequality tests at compile-time."}, {"sha": "45ac3cd1f84a60315ebd5df0d3cd519631eb1a69", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -22,9 +22,9 @@ use rustc_span::{Pos, Span};\n use rustc_target::abi::{call::FnAbi, Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, GlobalId, Immediate, InterpErrorInfo, InterpResult, MPlaceTy, Machine, MemPlace,\n-    MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance, Scalar,\n-    ScalarMaybeUninit, StackPopJump,\n+    AllocCheck, AllocId, GlobalId, Immediate, InterpErrorInfo, InterpResult, MPlaceTy, Machine,\n+    MemPlace, MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance,\n+    Scalar, ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n \n@@ -440,6 +440,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.scalar_to_ptr(scalar)\n     }\n \n+    /// Test if this value might be null.\n+    /// If the machine does not support ptr-to-int casts, this is conservative.\n+    pub fn scalar_may_be_null(&self, scalar: Scalar<M::PointerTag>) -> bool {\n+        match scalar.try_to_int() {\n+            Ok(int) => int.is_null(),\n+            Err(_) => {\n+                let ptr = self.scalar_to_ptr(scalar);\n+                match self.memory.ptr_try_get_alloc(ptr) {\n+                    Ok((alloc_id, offset, _)) => {\n+                        let (size, _align) = self\n+                            .memory\n+                            .get_size_and_align(alloc_id, AllocCheck::MaybeDead)\n+                            .expect(\"alloc info with MaybeDead cannot fail\");\n+                        // If the pointer is out-of-bounds, it may be null.\n+                        // Note that one-past-the-end (offset == size) is still inbounds, and never null.\n+                        offset > size\n+                    }\n+                    Err(offset) => offset == 0,\n+                }\n+            }\n+        }\n+    }\n+\n     /// Call this to turn untagged \"global\" pointers (obtained via `tcx`) into\n     /// the machine pointer to the allocation.  Must never be used\n     /// for any other pointers, nor for TLS statics."}, {"sha": "04a6209990ccf72795e45716ae4f89f30db87675", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -483,21 +483,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         })\n     }\n-\n-    /// Test if the pointer might be null.\n-    pub fn ptr_may_be_null(&self, ptr: Pointer<Option<M::PointerTag>>) -> bool {\n-        match self.ptr_try_get_alloc(ptr) {\n-            Ok((alloc_id, offset, _)) => {\n-                let (size, _align) = self\n-                    .get_size_and_align(alloc_id, AllocCheck::MaybeDead)\n-                    .expect(\"alloc info with MaybeDead cannot fail\");\n-                // If the pointer is out-of-bounds, it may be null.\n-                // Note that one-past-the-end (offset == size) is still inbounds, and never null.\n-                offset > size\n-            }\n-            Err(offset) => offset == 0,\n-        }\n-    }\n }\n \n /// Allocation accessors"}, {"sha": "9b317e8e0abfb3b4a100e6e69b122638ca901221", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -720,12 +720,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Err(dbg_val) => {\n                         // So this is a pointer then, and casting to an int failed.\n                         // Can only happen during CTFE.\n-                        let ptr = self.scalar_to_ptr(tag_val);\n                         // The niche must be just 0, and the ptr not null, then we know this is\n                         // okay. Everything else, we conservatively reject.\n                         let ptr_valid = niche_start == 0\n                             && variants_start == variants_end\n-                            && !self.memory.ptr_may_be_null(ptr);\n+                            && !self.scalar_may_be_null(tag_val);\n                         if !ptr_valid {\n                             throw_ub!(InvalidTag(dbg_val))\n                         }"}, {"sha": "5cacab823866ad81dc7804e103ae69a625e2b183", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -572,21 +572,25 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n                     err_ub!(InvalidUninitBytes(None)) => { \"uninitialized bytes\" } expected { \"a proper pointer or integer value\" },\n                 );\n-                let ptr = self.ecx.scalar_to_ptr(value);\n-                // Ensure the pointer is non-null.\n-                if self.ecx.memory.ptr_may_be_null(ptr) {\n-                    throw_validation_failure!(self.path, { \"a potentially null function pointer\" });\n-                }\n+\n                 // If we check references recursively, also check that this points to a function.\n                 if let Some(_) = self.ref_tracking {\n+                    let ptr = self.ecx.scalar_to_ptr(value);\n                     let _fn = try_validation!(\n                         self.ecx.memory.get_fn(ptr),\n                         self.path,\n+                        err_ub!(DanglingIntPointer(0, _)) =>\n+                            { \"a null function pointer\" },\n                         err_ub!(DanglingIntPointer(..)) |\n                         err_ub!(InvalidFunctionPointer(..)) =>\n                             { \"{:x}\", value } expected { \"a function pointer\" },\n                     );\n                     // FIXME: Check if the signature matches\n+                } else {\n+                    // Otherwise (for standalone Miri), we have to still check it to be non-null.\n+                    if self.ecx.scalar_may_be_null(value) {\n+                        throw_validation_failure!(self.path, { \"a null function pointer\" });\n+                    }\n                 }\n                 Ok(true)\n             }\n@@ -644,10 +648,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             Err(_) => {\n                 // So this is a pointer then, and casting to an int failed.\n                 // Can only happen during CTFE.\n-                let ptr = self.ecx.scalar_to_ptr(value);\n                 if start == 1 && end == max_value {\n                     // Only null is the niche.  So make sure the ptr is NOT null.\n-                    if self.ecx.memory.ptr_may_be_null(ptr) {\n+                    if self.ecx.scalar_may_be_null(value) {\n                         throw_validation_failure!(self.path,\n                             { \"a potentially null pointer\" }\n                             expected {\n@@ -758,7 +761,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     fn visit_value(&mut self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {\n         trace!(\"visit_value: {:?}, {:?}\", *op, op.layout);\n \n-        // Check primitive types -- the leafs of our recursive descend.\n+        // Check primitive types -- the leaves of our recursive descent.\n         if self.try_visit_primitive(op)? {\n             return Ok(());\n         }"}, {"sha": "05c4915535de87490bf90ec0deb533d2b61959ae", "filename": "compiler/rustc_error_codes/src/error_codes/E0687.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0687.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0687.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0687.md?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n In-band lifetimes cannot be used in `fn`/`Fn` syntax.\n \n Erroneous code examples:\n \n-```compile_fail,E0687\n+```ignore (feature got removed)\n #![feature(in_band_lifetimes)]\n \n fn foo(x: fn(&'a u32)) {} // error!"}, {"sha": "44e641a2a0b5a75feb8042bb5117d99942447030", "filename": "compiler/rustc_error_codes/src/error_codes/E0688.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0688.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0688.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0688.md?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n In-band lifetimes were mixed with explicit lifetime binders.\n \n Erroneous code example:\n \n-```compile_fail,E0688\n+```ignore (feature got removed)\n #![feature(in_band_lifetimes)]\n \n fn foo<'a>(x: &'a u32, y: &'b u32) {}   // error!"}, {"sha": "1d9d16e85cb21286a7510f5e24b8d3954b7a22d3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -400,8 +400,6 @@ declare_features! (\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n-    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n-    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n     /// Allows inferring `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n     /// Allows associated types in inherent impls."}, {"sha": "fae9bd633afffc829972012f85e9494649cd2077", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -104,6 +104,9 @@ declare_features! (\n     (removed, impl_trait_in_bindings, \"1.55.0\", Some(63065), None,\n      Some(\"the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done\")),\n     (removed, import_shadowing, \"1.0.0\", None, None, None),\n+    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    (removed, in_band_lifetimes, \"1.23.0\", Some(44524), None,\n+     Some(\"removed due to unsolved ergonomic questions and added lifetime resolution complexity\")),\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (removed, lazy_normalization_consts, \"1.46.0\", Some(72219), None, Some(\"superseded by `generic_const_exprs`\")),\n     /// Allows using the `#[link_args]` attribute."}, {"sha": "c3795e48d7625661518329cb8dcb52156231da4a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -471,11 +471,6 @@ pub enum LifetimeParamKind {\n     // `fn foo<'a>(x: &'a u8) -> &'a u8 { x }`).\n     Explicit,\n \n-    // Indicates that the lifetime definition was synthetically added\n-    // as a result of an in-band lifetime usage (e.g., in\n-    // `fn foo(x: &'a u8) -> &'a u8 { x }`).\n-    InBand,\n-\n     // Indication that the lifetime was elided (e.g., in both cases in\n     // `fn foo(x: &u8) -> &'_ u8 { x }`).\n     Elided,"}, {"sha": "135714af2a6c18fa13af2722bf1f45845395980a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // Find the index of the named region that was part of the\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n-                    (Some(rl::Region::EarlyBound(_, id, _)), ty::BrNamed(def_id, _)) => {\n+                    (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                         debug!(\"EarlyBound id={:?} def_id={:?}\", id, def_id);\n                         if id == def_id {\n                             self.found_type = Some(arg);\n@@ -137,7 +137,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n                     (\n-                        Some(rl::Region::LateBound(debruijn_index, _, id, _)),\n+                        Some(rl::Region::LateBound(debruijn_index, _, id)),\n                         ty::BrNamed(def_id, _),\n                     ) => {\n                         debug!(\n@@ -155,8 +155,8 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                         Some(\n                             rl::Region::Static\n                             | rl::Region::Free(_, _)\n-                            | rl::Region::EarlyBound(_, _, _)\n-                            | rl::Region::LateBound(_, _, _, _)\n+                            | rl::Region::EarlyBound(_, _)\n+                            | rl::Region::LateBound(_, _, _)\n                             | rl::Region::LateBoundAnon(_, _, _),\n                         )\n                         | None,\n@@ -221,15 +221,15 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n                 }\n             }\n \n-            (Some(rl::Region::EarlyBound(_, id, _)), ty::BrNamed(def_id, _)) => {\n+            (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"EarlyBound id={:?} def_id={:?}\", id, def_id);\n                 if id == def_id {\n                     self.found_it = true;\n                     return; // we can stop visiting now\n                 }\n             }\n \n-            (Some(rl::Region::LateBound(debruijn_index, _, id, _)), ty::BrNamed(def_id, _)) => {\n+            (Some(rl::Region::LateBound(debruijn_index, _, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\", debruijn_index,);\n                 debug!(\"id={:?}\", id);\n                 debug!(\"def_id={:?}\", def_id);\n@@ -242,8 +242,8 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n             (\n                 Some(\n                     rl::Region::Static\n-                    | rl::Region::EarlyBound(_, _, _)\n-                    | rl::Region::LateBound(_, _, _, _)\n+                    | rl::Region::EarlyBound(_, _)\n+                    | rl::Region::LateBound(_, _, _)\n                     | rl::Region::LateBoundAnon(_, _, _)\n                     | rl::Region::Free(_, _),\n                 )"}, {"sha": "c3e168c47272965fdbed44f30d7ee5fb57080696", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorOf, DefKind};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{\n     CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE,\n };\n@@ -983,12 +983,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let def_id = local_id.to_def_id();\n             let def_kind = tcx.opt_def_kind(local_id);\n             let Some(def_kind) = def_kind else { continue };\n-            record!(self.tables.opt_def_kind[def_id] <- match def_kind {\n-                // Replace Ctor by the enclosing object to avoid leaking details in children crates.\n-                DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,\n-                DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,\n-                def_kind => def_kind,\n-            });\n+            record!(self.tables.opt_def_kind[def_id] <- def_kind);\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));"}, {"sha": "98375cbad9f9b21f33e0d1ccbcb794fe62859533", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -4,47 +4,14 @@ use crate::ty;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::{GenericParam, ItemLocalId};\n-use rustc_hir::{GenericParamKind, LifetimeParamKind};\n+use rustc_hir::ItemLocalId;\n use rustc_macros::HashStable;\n \n-/// The origin of a named lifetime definition.\n-///\n-/// This is used to prevent the usage of in-band lifetimes in `Fn`/`fn` syntax.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n-pub enum LifetimeDefOrigin {\n-    // Explicit binders like `fn foo<'a>(x: &'a u8)` or elided like `impl Foo<&u32>`\n-    ExplicitOrElided,\n-    // In-band declarations like `fn foo(x: &'a u8)`\n-    InBand,\n-    // Some kind of erroneous origin\n-    Error,\n-}\n-\n-impl LifetimeDefOrigin {\n-    pub fn from_param(param: &GenericParam<'_>) -> Self {\n-        match param.kind {\n-            GenericParamKind::Lifetime { kind } => match kind {\n-                LifetimeParamKind::InBand => LifetimeDefOrigin::InBand,\n-                LifetimeParamKind::Explicit => LifetimeDefOrigin::ExplicitOrElided,\n-                LifetimeParamKind::Elided => LifetimeDefOrigin::ExplicitOrElided,\n-                LifetimeParamKind::Error => LifetimeDefOrigin::Error,\n-            },\n-            _ => bug!(\"expected a lifetime param\"),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n pub enum Region {\n     Static,\n-    EarlyBound(/* index */ u32, /* lifetime decl */ DefId, LifetimeDefOrigin),\n-    LateBound(\n-        ty::DebruijnIndex,\n-        /* late-bound index */ u32,\n-        /* lifetime decl */ DefId,\n-        LifetimeDefOrigin,\n-    ),\n+    EarlyBound(/* index */ u32, /* lifetime decl */ DefId),\n+    LateBound(ty::DebruijnIndex, /* late-bound index */ u32, /* lifetime decl */ DefId),\n     LateBoundAnon(ty::DebruijnIndex, /* late-bound index */ u32, /* anon index */ u32),\n     Free(DefId, /* lifetime decl */ DefId),\n }"}, {"sha": "7878d6eaab1232cabc15bd023c1735d92cf432fe", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -38,12 +38,6 @@\n //!   It must also not contain any indexing projections, since those take an arbitrary `Local` as\n //!   the index, and that local might only be initialized shortly before `dest` is used.\n //!\n-//!   Subtle case: If `dest` is a, or projects through a union, then we have to make sure that there\n-//!   remains an assignment to it, since that sets the \"active field\" of the union. But if `src` is\n-//!   a ZST, it might not be initialized, so there might not be any use of it before the assignment,\n-//!   and performing the optimization would simply delete the assignment, leaving `dest`\n-//!   uninitialized.\n-//!\n //! * `src` must be a bare `Local` without any indirections or field projections (FIXME: Is this a\n //!   fundamental restriction or just current impl state?). It can be copied or moved by the\n //!   assignment.\n@@ -103,7 +97,6 @@ use rustc_index::{\n     bit_set::{BitMatrix, BitSet},\n     vec::IndexVec,\n };\n-use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::{dump_mir, PassWhere};\n use rustc_middle::mir::{\n@@ -135,7 +128,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n \n-        let candidates = find_candidates(tcx, body);\n+        let candidates = find_candidates(body);\n         if candidates.is_empty() {\n             debug!(\"{:?}: no dest prop candidates, done\", def_id);\n             return;\n@@ -803,9 +796,8 @@ struct CandidateAssignment<'tcx> {\n /// comment) and also throw out assignments that involve a local that has its address taken or is\n /// otherwise ineligible (eg. locals used as array indices are ignored because we cannot propagate\n /// arbitrary places into array indices).\n-fn find_candidates<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n+fn find_candidates<'tcx>(body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n     let mut visitor = FindAssignments {\n-        tcx,\n         body,\n         candidates: Vec::new(),\n         ever_borrowed_locals: ever_borrowed_locals(body),\n@@ -816,7 +808,6 @@ fn find_candidates<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> Vec<CandidateA\n }\n \n struct FindAssignments<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     candidates: Vec<CandidateAssignment<'tcx>>,\n     ever_borrowed_locals: BitSet<Local>,\n@@ -845,10 +836,11 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, 'tcx> {\n                 return;\n             }\n \n-            // Can't optimize if both locals ever have their address taken (can introduce\n-            // aliasing).\n-            // FIXME: This can be smarter and take `StorageDead` into account (which\n-            // invalidates borrows).\n+            // Can't optimize if either local ever has their address taken. This optimization does\n+            // liveness analysis only based on assignments, and a local can be live even if its\n+            // never assigned to again, because a reference to it might be live.\n+            // FIXME: This can be smarter and take `StorageDead` into  account (which invalidates\n+            // borrows).\n             if self.ever_borrowed_locals.contains(dest.local)\n                 || self.ever_borrowed_locals.contains(src.local)\n             {\n@@ -862,22 +854,11 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, 'tcx> {\n                 return;\n             }\n \n-            // Handle the \"subtle case\" described above by rejecting any `dest` that is or\n-            // projects through a union.\n-            let mut place_ty = PlaceTy::from_ty(self.body.local_decls[dest.local].ty);\n-            if place_ty.ty.is_union() {\n-                return;\n-            }\n             for elem in dest.projection {\n                 if let PlaceElem::Index(_) = elem {\n                     // `dest` contains an indexing projection.\n                     return;\n                 }\n-\n-                place_ty = place_ty.projection_ty(self.tcx, elem);\n-                if place_ty.ty.is_union() {\n-                    return;\n-                }\n             }\n \n             self.candidates.push(CandidateAssignment {"}, {"sha": "a11cb3f5677c6fb8aeab0df15e86158406aee326", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -372,10 +372,17 @@ impl<'a> Parser<'a> {\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 false\n             }\n-            (true, Some(AssocOp::LAnd)) => {\n+            (true, Some(AssocOp::LAnd)) |\n+            (true, Some(AssocOp::LOr)) |\n+            (true, Some(AssocOp::BitOr)) => {\n                 // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the\n                 // above due to #74233.\n                 // These cases are ambiguous and can't be identified in the parser alone.\n+                //\n+                // Bitwise AND is left out because guessing intent is hard. We can make\n+                // suggestions based on the assumption that double-refs are rarely intentional,\n+                // and closures are distinct enough that they don't get mixed up with their\n+                // return value.\n                 let sp = self.sess.source_map().start_point(self.token.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 false\n@@ -1247,7 +1254,14 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Brace)) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)\n         } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {\n-            self.parse_closure_expr(attrs)\n+            self.parse_closure_expr(attrs).map_err(|mut err| {\n+                // If the input is something like `if a { 1 } else { 2 } | if a { 3 } else { 4 }`\n+                // then suggest parens around the lhs.\n+                if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&lo) {\n+                    self.sess.expr_parentheses_needed(&mut err, *sp);\n+                }\n+                err\n+            })\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             self.parse_array_or_repeat_expr(attrs, token::Bracket)\n         } else if self.check_path() {"}, {"sha": "0ead6708f9a7a59910dbdd25679f1b632f825e14", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1838,7 +1838,6 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             lifetime_ref\n         );\n         err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n-        let mut suggests_in_band = false;\n         let mut suggested_spans = vec![];\n         for missing in &self.missing_named_lifetime_spots {\n             match missing {\n@@ -1854,7 +1853,6 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     }) {\n                         (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n                     } else {\n-                        suggests_in_band = true;\n                         (generics.span, format!(\"<{}>\", lifetime_ref))\n                     };\n                     if suggested_spans.contains(&span) {\n@@ -1889,15 +1887,6 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 _ => {}\n             }\n         }\n-        if self.tcx.sess.is_nightly_build()\n-            && !self.tcx.features().in_band_lifetimes\n-            && suggests_in_band\n-        {\n-            err.help(\n-                \"if you want to experiment with in-band lifetime bindings, \\\n-                 add `#![feature(in_band_lifetimes)]` to the crate attributes\",\n-            );\n-        }\n         err.emit();\n     }\n "}, {"sha": "1997f2133ed0020debe30cfe0c61774f1860eb40", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 27, "deletions": 101, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-filelength\n //! Name resolution for lifetimes.\n //!\n //! Name resolution for lifetimes follows *much* simpler rules than the\n@@ -16,7 +15,7 @@ use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::hir_id::ItemLocalId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n-use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n+use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n@@ -63,23 +62,18 @@ impl RegionExt for Region {\n         let i = *index;\n         *index += 1;\n         let def_id = hir_map.local_def_id(param.hir_id);\n-        let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\"Region::early: index={} def_id={:?}\", i, def_id);\n-        (param.name.normalize_to_macros_2_0(), Region::EarlyBound(i, def_id.to_def_id(), origin))\n+        (param.name.normalize_to_macros_2_0(), Region::EarlyBound(i, def_id.to_def_id()))\n     }\n \n     fn late(idx: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n         let def_id = hir_map.local_def_id(param.hir_id);\n-        let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\n-            \"Region::late: idx={:?}, param={:?} depth={:?} def_id={:?} origin={:?}\",\n-            idx, param, depth, def_id, origin,\n+            \"Region::late: idx={:?}, param={:?} depth={:?} def_id={:?}\",\n+            idx, param, depth, def_id,\n         );\n-        (\n-            param.name.normalize_to_macros_2_0(),\n-            Region::LateBound(depth, idx, def_id.to_def_id(), origin),\n-        )\n+        (param.name.normalize_to_macros_2_0(), Region::LateBound(depth, idx, def_id.to_def_id()))\n     }\n \n     fn late_anon(named_late_bound_vars: u32, index: &Cell<u32>) -> Region {\n@@ -93,16 +87,16 @@ impl RegionExt for Region {\n         match *self {\n             Region::Static | Region::LateBoundAnon(..) => None,\n \n-            Region::EarlyBound(_, id, _) | Region::LateBound(_, _, id, _) | Region::Free(_, id) => {\n+            Region::EarlyBound(_, id) | Region::LateBound(_, _, id) | Region::Free(_, id) => {\n                 Some(id)\n             }\n         }\n     }\n \n     fn shifted(self, amount: u32) -> Region {\n         match self {\n-            Region::LateBound(debruijn, idx, id, origin) => {\n-                Region::LateBound(debruijn.shifted_in(amount), idx, id, origin)\n+            Region::LateBound(debruijn, idx, id) => {\n+                Region::LateBound(debruijn.shifted_in(amount), idx, id)\n             }\n             Region::LateBoundAnon(debruijn, index, anon_index) => {\n                 Region::LateBoundAnon(debruijn.shifted_in(amount), index, anon_index)\n@@ -113,8 +107,8 @@ impl RegionExt for Region {\n \n     fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region {\n         match self {\n-            Region::LateBound(debruijn, index, id, origin) => {\n-                Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id, origin)\n+            Region::LateBound(debruijn, index, id) => {\n+                Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id)\n             }\n             Region::LateBoundAnon(debruijn, index, anon_index) => {\n                 Region::LateBoundAnon(debruijn.shifted_out_to_binder(binder), index, anon_index)\n@@ -127,7 +121,7 @@ impl RegionExt for Region {\n     where\n         L: Iterator<Item = &'a hir::Lifetime>,\n     {\n-        if let Region::EarlyBound(index, _, _) = self {\n+        if let Region::EarlyBound(index, _) = self {\n             params.nth(index as usize).and_then(|lifetime| map.defs.get(&lifetime.hir_id).cloned())\n         } else {\n             Some(self)\n@@ -568,7 +562,7 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n \n fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::BoundVariableKind {\n     match region {\n-        Region::LateBound(_, _, def_id, _) => {\n+        Region::LateBound(_, _, def_id) => {\n             let name = tcx.hir().name(tcx.hir().local_def_id_to_hir_id(def_id.expect_local()));\n             ty::BoundVariableKind::Region(ty::BrNamed(*def_id, name))\n         }\n@@ -1010,7 +1004,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     // well-supported at the moment, so this doesn't work.\n                     // In the future, this should be fixed and this error should be removed.\n                     let def = self.map.defs.get(&lifetime.hir_id).cloned();\n-                    let Some(Region::LateBound(_, _, def_id, _)) = def else {\n+                    let Some(Region::LateBound(_, _, def_id)) = def else {\n                         continue\n                     };\n                     let Some(def_id) = def_id.as_local() else {\n@@ -1046,7 +1040,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n                             let (name, reg) = Region::early(self.tcx.hir(), &mut index, &param);\n-                            let Region::EarlyBound(_, def_id, _) = reg else {\n+                            let Region::EarlyBound(_, def_id) = reg else {\n                                 bug!();\n                             };\n                             // We cannot predict what lifetimes are unused in opaque type.\n@@ -1325,9 +1319,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {\n-        if !self.trait_definition_only {\n-            check_mixed_explicit_and_in_band_defs(self.tcx, &generics.params);\n-        }\n         let scope = Scope::TraitRefBoundary { s: self.scope };\n         self.with(scope, |_, this| {\n             for param in generics.params {\n@@ -1535,30 +1526,6 @@ impl ShadowKind {\n     }\n }\n \n-fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_>, params: &[hir::GenericParam<'_>]) {\n-    let lifetime_params: Vec<_> = params\n-        .iter()\n-        .filter_map(|param| match param.kind {\n-            GenericParamKind::Lifetime { kind, .. } => Some((kind, param.span)),\n-            _ => None,\n-        })\n-        .collect();\n-    let explicit = lifetime_params.iter().find(|(kind, _)| *kind == LifetimeParamKind::Explicit);\n-    let in_band = lifetime_params.iter().find(|(kind, _)| *kind == LifetimeParamKind::InBand);\n-\n-    if let (Some((_, explicit_span)), Some((_, in_band_span))) = (explicit, in_band) {\n-        struct_span_err!(\n-            tcx.sess,\n-            *in_band_span,\n-            E0688,\n-            \"cannot mix in-band and explicit lifetime definitions\"\n-        )\n-        .span_label(*in_band_span, \"in-band lifetime definition here\")\n-        .span_label(*explicit_span, \"explicit lifetime definition here\")\n-        .emit();\n-    }\n-}\n-\n fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: Symbol, orig: Original, shadower: Shadower) {\n     let mut err = if let (ShadowKind::Lifetime, ShadowKind::Lifetime) = (orig.kind, shadower.kind) {\n         // lifetime/lifetime shadowing is an error\n@@ -1696,7 +1663,7 @@ fn compute_object_lifetime_defaults<'tcx>(\n                     .map(|set| match *set {\n                         Set1::Empty => \"BaseDefault\".into(),\n                         Set1::One(Region::Static) => \"'static\".into(),\n-                        Set1::One(Region::EarlyBound(mut i, _, _)) => generics\n+                        Set1::One(Region::EarlyBound(mut i, _)) => generics\n                             .params\n                             .iter()\n                             .find_map(|param| match param.kind {\n@@ -1777,18 +1744,16 @@ fn object_lifetime_defaults_for_item<'tcx>(\n                             .params\n                             .iter()\n                             .filter_map(|param| match param.kind {\n-                                GenericParamKind::Lifetime { .. } => Some((\n-                                    param.hir_id,\n-                                    hir::LifetimeName::Param(param.name),\n-                                    LifetimeDefOrigin::from_param(param),\n-                                )),\n+                                GenericParamKind::Lifetime { .. } => {\n+                                    Some((param.hir_id, hir::LifetimeName::Param(param.name)))\n+                                }\n                                 _ => None,\n                             })\n                             .enumerate()\n-                            .find(|&(_, (_, lt_name, _))| lt_name == name)\n-                            .map_or(Set1::Many, |(i, (id, _, origin))| {\n+                            .find(|&(_, (_, lt_name))| lt_name == name)\n+                            .map_or(Set1::Many, |(i, (id, _))| {\n                                 let def_id = tcx.hir().local_def_id(id);\n-                                Set1::One(Region::EarlyBound(i as u32, def_id.to_def_id(), origin))\n+                                Set1::One(Region::EarlyBound(i as u32, def_id.to_def_id()))\n                             })\n                     }\n                 }\n@@ -1846,13 +1811,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn lifetime_deletion_span(&self, name: Ident, generics: &hir::Generics<'_>) -> Option<Span> {\n         generics.params.iter().enumerate().find_map(|(i, param)| {\n             if param.name.ident() == name {\n-                let in_band = matches!(\n-                    param.kind,\n-                    hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::InBand }\n-                );\n-                if in_band {\n-                    Some(param.span)\n-                } else if generics.params.len() == 1 {\n+                if generics.params.len() == 1 {\n                     // if sole lifetime, remove the entire `<>` brackets\n                     Some(generics.span)\n                 } else {\n@@ -1982,8 +1941,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let def_ids: Vec<_> = defined_by\n             .values()\n             .flat_map(|region| match region {\n-                Region::EarlyBound(_, def_id, _)\n-                | Region::LateBound(_, _, def_id, _)\n+                Region::EarlyBound(_, def_id)\n+                | Region::LateBound(_, _, def_id)\n                 | Region::Free(_, def_id) => Some(*def_id),\n \n                 Region::LateBoundAnon(..) | Region::Static => None,\n@@ -2338,39 +2297,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n             }\n \n-            // Check for fn-syntax conflicts with in-band lifetime definitions\n-            if !self.trait_definition_only && self.is_in_fn_syntax {\n-                match def {\n-                    Region::EarlyBound(_, _, LifetimeDefOrigin::InBand)\n-                    | Region::LateBound(_, _, _, LifetimeDefOrigin::InBand) => {\n-                        struct_span_err!(\n-                            self.tcx.sess,\n-                            lifetime_ref.span,\n-                            E0687,\n-                            \"lifetimes used in `fn` or `Fn` syntax must be \\\n-                             explicitly declared using `<...>` binders\"\n-                        )\n-                        .span_label(lifetime_ref.span, \"in-band lifetime definition\")\n-                        .emit();\n-                    }\n-\n-                    Region::Static\n-                    | Region::EarlyBound(\n-                        _,\n-                        _,\n-                        LifetimeDefOrigin::ExplicitOrElided | LifetimeDefOrigin::Error,\n-                    )\n-                    | Region::LateBound(\n-                        _,\n-                        _,\n-                        _,\n-                        LifetimeDefOrigin::ExplicitOrElided | LifetimeDefOrigin::Error,\n-                    )\n-                    | Region::LateBoundAnon(..)\n-                    | Region::Free(..) => {}\n-                }\n-            }\n-\n             self.insert_lifetime(lifetime_ref, def);\n         } else {\n             self.emit_undeclared_lifetime_error(lifetime_ref);\n@@ -2950,7 +2876,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n                 if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n                     match lifetime {\n-                        Region::LateBound(debruijn, _, _, _)\n+                        Region::LateBound(debruijn, _, _)\n                         | Region::LateBoundAnon(debruijn, _, _)\n                             if debruijn < self.outer_index =>\n                         {\n@@ -3356,8 +3282,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             Region::Free(_, def_id)\n-            | Region::LateBound(_, _, def_id, _)\n-            | Region::EarlyBound(_, def_id, _) => {\n+            | Region::LateBound(_, _, def_id)\n+            | Region::EarlyBound(_, def_id) => {\n                 // A lifetime declared by the user.\n                 let track_lifetime_uses = self.track_lifetime_uses();\n                 debug!(?track_lifetime_uses);"}, {"sha": "4a310e2be3e3c8ef325b7293aaec98e1e83bc99d", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -205,7 +205,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let r = match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => tcx.lifetimes.re_static,\n \n-            Some(rl::Region::LateBound(debruijn, index, def_id, _)) => {\n+            Some(rl::Region::LateBound(debruijn, index, def_id)) => {\n                 let name = lifetime_name(def_id.expect_local());\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::from_u32(index),\n@@ -222,7 +222,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n \n-            Some(rl::Region::EarlyBound(index, id, _)) => {\n+            Some(rl::Region::EarlyBound(index, id)) => {\n                 let name = lifetime_name(id.expect_local());\n                 tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion { def_id: id, index, name }))\n             }"}, {"sha": "2317ae43f11433b719312390b3edb8e56bcbaf42", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1377,7 +1377,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             match self.tcx.named_region(lt.hir_id) {\n                 Some(rl::Region::Static | rl::Region::EarlyBound(..)) => {}\n                 Some(\n-                    rl::Region::LateBound(debruijn, _, _, _)\n+                    rl::Region::LateBound(debruijn, _, _)\n                     | rl::Region::LateBoundAnon(debruijn, _, _),\n                 ) if debruijn < self.outer_index => {}\n                 Some("}, {"sha": "d72f9a2ff9c8f8a9fa53238730a1aefaebffb64b", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -8,7 +8,7 @@ use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-#[cfg(not(target_os = \"wasi\"))]\n+#[cfg(not(any(target_os = \"wasi\", target_env = \"sgx\")))]\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n "}, {"sha": "e0e641c2f9b5eb96628ad025960f03621fcc884c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -193,8 +193,8 @@ impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Lifetime {\n         let def = cx.tcx.named_region(self.hir_id);\n         if let Some(\n-            rl::Region::EarlyBound(_, node_id, _)\n-            | rl::Region::LateBound(_, _, node_id, _)\n+            rl::Region::EarlyBound(_, node_id)\n+            | rl::Region::LateBound(_, _, node_id)\n             | rl::Region::Free(_, node_id),\n         ) = def\n         {"}, {"sha": "11776ed21e1586b9ae92675c926ecd5a58970a36", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -17,23 +17,29 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n-          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n-          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n+-         StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+-         StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+-         _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n++         nop;                             // scope 0 at $DIR/union.rs:13:9: 13:11\n++         nop;                             // scope 0 at $DIR/union.rs:13:23: 13:28\n++         (_1.0: u32) = val() -> bb1;      // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n-          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n+-         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n+-         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n++         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n++         nop;                             // scope 0 at $DIR/union.rs:13:29: 13:30\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n           _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n-          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n++         nop;                             // scope 0 at $DIR/union.rs:16:1: 16:2\n           return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n       }\n   }"}, {"sha": "68c834dfbbf27bb491e76f51e1369074848ee83b", "filename": "src/test/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,4 +1,4 @@\n-//! Tests that projections through unions cancel `DestinationPropagation`.\n+//! Tests that we can propogate into places that are projections into unions\n // compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {\n     1"}, {"sha": "477105193d3eeb3e16b119ab1686eabe95fc7b14", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -3,12 +3,36 @@ goto: file://|DOC_PATH|/test_docs/index.html\n assert-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n click: \"#toggle-all-docs\"\n-wait-for: 1000\n+wait-for: 50\n // This is now collapsed so there shouldn't be the \"open\" attribute on details.\n assert-attribute-false: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n assert-text: (\"#toggle-all-docs\", \"[+]\")\n click: \"#toggle-all-docs\"\n-wait-for: 1000\n+wait-for: 50\n // Not collapsed anymore so the \"open\" attribute should be back.\n assert-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n+\n+// Check that it works on non-module pages as well.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+// We first check that everything is visible.\n+assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n+assert-attribute: (\"details.rustdoc-toggle\", {\"open\": \"\"}, ALL)\n+// We collapse them all.\n+click: \"#toggle-all-docs\"\n+wait-for: 50\n+assert-text: (\"#toggle-all-docs\", \"[+]\")\n+// We check that all <details> are collapsed (except for the impl block ones).\n+assert-attribute-false: (\"details.rustdoc-toggle:not(.implementors-toggle)\", {\"open\": \"\"}, ALL)\n+assert-attribute: (\"details.rustdoc-toggle.implementors-toggle\", {\"open\": \"\"})\n+// We now check that the other impl blocks are collapsed.\n+assert-attribute-false: (\n+    \"#blanket-implementations-list > details.rustdoc-toggle.implementors-toggle\",\n+    {\"open\": \"\"},\n+    ALL,\n+)\n+// We open them all again.\n+click: \"#toggle-all-docs\"\n+wait-for: 50\n+assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n+assert-attribute: (\"details.rustdoc-toggle\", {\"open\": \"\"}, ALL)"}, {"sha": "963b19b34a620b2edd13825211b1c1c6a75f79d9", "filename": "src/test/ui/async-await/generics-and-bounds.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(in_band_lifetimes)]\n-\n use std::future::Future;\n \n pub async fn simple_generic<T>() {}\n@@ -73,10 +71,6 @@ pub fn call_with_ref_block<'a>(f: &'a (impl Foo + 'a)) -> impl Future<Output = (\n     async move { f.foo() }\n }\n \n-pub fn call_with_ref_block_in_band(f: &'a (impl Foo + 'a)) -> impl Future<Output = ()> + 'a {\n-    async move { f.foo() }\n-}\n-\n pub fn async_block_with_same_generic_params_unifies() {\n     let mut a = call_generic_bound_block(FooType);\n     a = call_generic_bound_block(FooType);\n@@ -91,9 +85,4 @@ pub fn async_block_with_same_generic_params_unifies() {\n     let f_two = FooType;\n     let mut d = call_with_ref_block(&f_one);\n     d = call_with_ref_block(&f_two);\n-\n-    let f_one = FooType;\n-    let f_two = FooType;\n-    let mut d = call_with_ref_block_in_band(&f_one);\n-    d = call_with_ref_block_in_band(&f_two);\n }"}, {"sha": "f6f2432f2d71d8fa94a7bb6e11930f0c25d0420b", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -112,7 +112,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:49:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a potentially null function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a null function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "28bd040e2232c3f812ec966d822ef81efcd21b8b", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -112,7 +112,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:49:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a potentially null function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a null function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "a1a149ab3a0e1c7386f67e8baf786b13c6300d98", "filename": "src/test/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -35,21 +35,21 @@ mod cross_crate {\n             i: 0 //~ ERROR use of deprecated field `deprecation_lint::DeprecatedStruct::i`: text\n         };\n \n-        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated struct `deprecation_lint::DeprecatedUnitStruct`: text\n+        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated unit struct `deprecation_lint::DeprecatedUnitStruct`: text\n \n-        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated variant `deprecation_lint::Enum::DeprecatedVariant`: text\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated unit variant `deprecation_lint::Enum::DeprecatedVariant`: text\n \n-        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated struct `deprecation_lint::DeprecatedTupleStruct`: text\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated tuple struct `deprecation_lint::DeprecatedTupleStruct`: text\n \n         let _ = nested::DeprecatedStruct { //~ ERROR use of deprecated struct `deprecation_lint::nested::DeprecatedStruct`: text\n             i: 0 //~ ERROR use of deprecated field `deprecation_lint::nested::DeprecatedStruct::i`: text\n         };\n \n-        let _ = nested::DeprecatedUnitStruct; //~ ERROR use of deprecated struct `deprecation_lint::nested::DeprecatedUnitStruct`: text\n+        let _ = nested::DeprecatedUnitStruct; //~ ERROR use of deprecated unit struct `deprecation_lint::nested::DeprecatedUnitStruct`: text\n \n-        let _ = nested::Enum::DeprecatedVariant; //~ ERROR use of deprecated variant `deprecation_lint::nested::Enum::DeprecatedVariant`: text\n+        let _ = nested::Enum::DeprecatedVariant; //~ ERROR use of deprecated unit variant `deprecation_lint::nested::Enum::DeprecatedVariant`: text\n \n-        let _ = nested::DeprecatedTupleStruct (1); //~ ERROR use of deprecated struct `deprecation_lint::nested::DeprecatedTupleStruct`: text\n+        let _ = nested::DeprecatedTupleStruct (1); //~ ERROR use of deprecated tuple struct `deprecation_lint::nested::DeprecatedTupleStruct`: text\n \n         // At the moment, the lint checker only checks stability in\n         // in the arguments of macros.\n@@ -130,7 +130,7 @@ mod cross_crate {\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n-        //~^ ERROR use of deprecated struct `deprecation_lint::Deprecated2`: text\n+        //~^ ERROR use of deprecated tuple struct `deprecation_lint::Deprecated2`: text\n \n         let _ = x.0;\n         //~^ ERROR use of deprecated field `deprecation_lint::Deprecated2::0`: text\n@@ -140,7 +140,7 @@ mod cross_crate {\n         //~^ ERROR use of deprecated field `deprecation_lint::Deprecated2::2`: text\n \n         let Deprecated2\n-        //~^ ERROR use of deprecated struct `deprecation_lint::Deprecated2`: text\n+        //~^ ERROR use of deprecated tuple struct `deprecation_lint::Deprecated2`: text\n             (_,\n              //~^ ERROR use of deprecated field `deprecation_lint::Deprecated2::0`: text\n              _,\n@@ -149,7 +149,7 @@ mod cross_crate {\n              //~^ ERROR use of deprecated field `deprecation_lint::Deprecated2::2`: text\n             = x;\n         let Deprecated2\n-        //~^ ERROR use of deprecated struct `deprecation_lint::Deprecated2`: text\n+        //~^ ERROR use of deprecated tuple struct `deprecation_lint::Deprecated2`: text\n             // the patterns are all fine:\n             (..) = x;\n     }"}, {"sha": "3842f8492956033a6caff4416e73280f5ead0da7", "filename": "src/test/ui/deprecation/deprecation-lint.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -46,19 +46,19 @@ error: use of deprecated struct `deprecation_lint::DeprecatedStruct`: text\n LL |         let _ = DeprecatedStruct {\n    |                 ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::DeprecatedUnitStruct`: text\n+error: use of deprecated unit struct `deprecation_lint::DeprecatedUnitStruct`: text\n   --> $DIR/deprecation-lint.rs:38:17\n    |\n LL |         let _ = DeprecatedUnitStruct;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated variant `deprecation_lint::Enum::DeprecatedVariant`: text\n+error: use of deprecated unit variant `deprecation_lint::Enum::DeprecatedVariant`: text\n   --> $DIR/deprecation-lint.rs:40:23\n    |\n LL |         let _ = Enum::DeprecatedVariant;\n    |                       ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::DeprecatedTupleStruct`: text\n+error: use of deprecated tuple struct `deprecation_lint::DeprecatedTupleStruct`: text\n   --> $DIR/deprecation-lint.rs:42:17\n    |\n LL |         let _ = DeprecatedTupleStruct (1);\n@@ -70,19 +70,19 @@ error: use of deprecated struct `deprecation_lint::nested::DeprecatedStruct`: te\n LL |         let _ = nested::DeprecatedStruct {\n    |                         ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::nested::DeprecatedUnitStruct`: text\n+error: use of deprecated unit struct `deprecation_lint::nested::DeprecatedUnitStruct`: text\n   --> $DIR/deprecation-lint.rs:48:25\n    |\n LL |         let _ = nested::DeprecatedUnitStruct;\n    |                         ^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated variant `deprecation_lint::nested::Enum::DeprecatedVariant`: text\n+error: use of deprecated unit variant `deprecation_lint::nested::Enum::DeprecatedVariant`: text\n   --> $DIR/deprecation-lint.rs:50:31\n    |\n LL | ...   let _ = nested::Enum::DeprecatedVariant;\n    |                             ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::nested::DeprecatedTupleStruct`: text\n+error: use of deprecated tuple struct `deprecation_lint::nested::DeprecatedTupleStruct`: text\n   --> $DIR/deprecation-lint.rs:52:25\n    |\n LL | ...   let _ = nested::DeprecatedTupleStruct (1);\n@@ -154,19 +154,19 @@ error: use of deprecated struct `deprecation_lint::Deprecated`: text\n LL |         let Deprecated\n    |             ^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::Deprecated2`: text\n+error: use of deprecated tuple struct `deprecation_lint::Deprecated2`: text\n   --> $DIR/deprecation-lint.rs:132:17\n    |\n LL |         let x = Deprecated2(1, 2, 3);\n    |                 ^^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::Deprecated2`: text\n+error: use of deprecated tuple struct `deprecation_lint::Deprecated2`: text\n   --> $DIR/deprecation-lint.rs:142:13\n    |\n LL |         let Deprecated2\n    |             ^^^^^^^^^^^\n \n-error: use of deprecated struct `deprecation_lint::Deprecated2`: text\n+error: use of deprecated tuple struct `deprecation_lint::Deprecated2`: text\n   --> $DIR/deprecation-lint.rs:151:13\n    |\n LL |         let Deprecated2"}, {"sha": "0eab2dc0ee05f891e01f74514c246f58f4e5392b", "filename": "src/test/ui/error-codes/E0261.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL | fn foo(x: &'a str) { }\n    |       -    ^^ undeclared lifetime\n    |       |\n    |       help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:5:9\n@@ -15,8 +13,6 @@ LL | struct Foo {\n    |           - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     x: &'a str,\n    |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0e5f968892f3384afdb515d4a012d49c78ab4090", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,62 +0,0 @@\n-#![allow(warnings)]\n-\n-fn foo(x: &'x u8) -> &'x u8 { x }\n-//~^ ERROR use of undeclared lifetime name\n-//~^^ ERROR use of undeclared lifetime name\n-\n-struct X<'a>(&'a u8);\n-\n-impl<'a> X<'a> {\n-    fn inner(&self) -> &'a u8 {\n-        self.0\n-    }\n-}\n-\n-impl<'a> X<'b> {\n-//~^ ERROR use of undeclared lifetime name\n-    fn inner_2(&self) -> &'b u8 {\n-    //~^ ERROR use of undeclared lifetime name\n-        self.0\n-    }\n-}\n-\n-impl X<'b> {\n-//~^ ERROR use of undeclared lifetime name\n-    fn inner_3(&self) -> &'b u8 {\n-    //~^ ERROR use of undeclared lifetime name\n-        self.0\n-    }\n-}\n-\n-struct Y<T>(T);\n-\n-impl Y<&'a u8> {\n-    //~^ ERROR use of undeclared lifetime name\n-    fn inner(&self) -> &'a u8 {\n-    //~^ ERROR use of undeclared lifetime name\n-        self.0\n-    }\n-}\n-\n-trait MyTrait<'a> {\n-    fn my_lifetime(&self) -> &'a u8;\n-    fn any_lifetime() -> &'b u8;\n-    //~^ ERROR use of undeclared lifetime name\n-    fn borrowed_lifetime(&'b self) -> &'b u8;\n-    //~^ ERROR use of undeclared lifetime name\n-    //~^^ ERROR use of undeclared lifetime name\n-}\n-\n-impl MyTrait<'a> for Y<&'a u8> {\n-//~^ ERROR use of undeclared lifetime name\n-//~^^ ERROR use of undeclared lifetime name\n-    fn my_lifetime(&self) -> &'a u8 { self.0 }\n-    //~^ ERROR use of undeclared lifetime name\n-    fn any_lifetime() -> &'b u8 { &0 }\n-    //~^ ERROR use of undeclared lifetime name\n-    fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n-    //~^ ERROR use of undeclared lifetime name\n-    //~^^ ERROR use of undeclared lifetime name\n-}\n-\n-fn main() {}"}, {"sha": "41fb1456f869e7f68ef344f6f9cf73b0b045e180", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 231, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,231 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'x`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:3:12\n-   |\n-LL | fn foo(x: &'x u8) -> &'x u8 { x }\n-   |       -    ^^ undeclared lifetime\n-   |       |\n-   |       help: consider introducing lifetime `'x` here: `<'x>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'x`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:3:23\n-   |\n-LL | fn foo(x: &'x u8) -> &'x u8 { x }\n-   |       -               ^^ undeclared lifetime\n-   |       |\n-   |       help: consider introducing lifetime `'x` here: `<'x>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:15:12\n-   |\n-LL | impl<'a> X<'b> {\n-   |      -     ^^ undeclared lifetime\n-   |      |\n-   |      help: consider introducing lifetime `'b` here: `'b,`\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:17:27\n-   |\n-LL |     fn inner_2(&self) -> &'b u8 {\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b, 'a> X<'b> {\n-   |      +++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn inner_2<'b>(&self) -> &'b u8 {\n-   |               ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:23:8\n-   |\n-LL | impl X<'b> {\n-   |     -  ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'b` here: `<'b>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:25:27\n-   |\n-LL |     fn inner_3(&self) -> &'b u8 {\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> X<'b> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn inner_3<'b>(&self) -> &'b u8 {\n-   |               ++++\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:33:9\n-   |\n-LL | impl Y<&'a u8> {\n-   |     -   ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:35:25\n-   |\n-LL |     fn inner(&self) -> &'a u8 {\n-   |                         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'a` here\n-   |\n-LL | impl<'a> Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'a` here\n-   |\n-LL |     fn inner<'a>(&self) -> &'a u8 {\n-   |             ++++\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:50:14\n-   |\n-LL | impl MyTrait<'a> for Y<&'a u8> {\n-   |     -        ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:50:25\n-   |\n-LL | impl MyTrait<'a> for Y<&'a u8> {\n-   |     -                   ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:53:31\n-   |\n-LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n-   |                               ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'a` here\n-   |\n-LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'a` here\n-   |\n-LL |     fn my_lifetime<'a>(&self) -> &'a u8 { self.0 }\n-   |                   ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n-   |\n-LL |     fn any_lifetime() -> &'b u8 { &0 }\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn any_lifetime<'b>() -> &'b u8 { &0 }\n-   |                    ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:57:27\n-   |\n-LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n-   |                         ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:57:40\n-   |\n-LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n-   |                                        ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n-   |                         ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:43:27\n-   |\n-LL |     fn any_lifetime() -> &'b u8;\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | trait MyTrait<'b, 'a> {\n-   |               +++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn any_lifetime<'b>() -> &'b u8;\n-   |                    ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:45:27\n-   |\n-LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | trait MyTrait<'b, 'a> {\n-   |               +++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8;\n-   |                         ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:45:40\n-   |\n-LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n-   |                                        ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | trait MyTrait<'b, 'a> {\n-   |               +++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8;\n-   |                         ++++\n-\n-error: aborting due to 17 previous errors\n-\n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "317897ae70f72c9037aa5123a067968d2d423605", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    |        -                          ^^ undeclared lifetime\n    |        |\n    |        help: consider introducing lifetime `'x` here: `<'x>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0582]: binding for associated type `Y` references lifetime `'a`, which does not appear in the trait input types\n   --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:33"}, {"sha": "bf0ca8715036b130e46c9aa7da8f5d7564e65b1b", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -4,7 +4,6 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait Iterable<'b> {\n@@ -20,7 +19,6 @@ error[E0261]: use of undeclared lifetime name `'undeclared`\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'undeclared` here\n    |\n LL | trait Iterable<'undeclared> {"}, {"sha": "abc02b33e0e6a115635876ba33c9a4cc2f998d4d", "filename": "src/test/ui/generic-associated-types/issue-67510.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |     -               ^^ undeclared lifetime\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/issue-67510.rs:7:26\n@@ -15,8 +13,6 @@ LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |     -                    ^^ undeclared lifetime\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9f63a8617babdb0786ed6225182cc068df34ebd1", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -8,9 +8,8 @@\n // run-pass\n \n #![allow(dead_code)]\n-#![feature(in_band_lifetimes)]\n \n-fn foo(x: &'x u32) -> impl Fn() -> &'y u32\n+fn foo<'x, 'y>(x: &'x u32) -> impl Fn() -> &'y u32\n where 'x: 'y\n {\n     move || x"}, {"sha": "79319dfe796a2e51e623d0cda08d7d10e3ca9eee", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -8,13 +8,12 @@\n // run-pass\n \n #![allow(dead_code)]\n-#![feature(in_band_lifetimes)]\n \n trait Trait<'a> { }\n \n-impl Trait<'b> for &'a u32 { }\n+impl<'a, 'b> Trait<'b> for &'a u32 { }\n \n-fn foo(x: &'x u32) -> impl Trait<'y>\n+fn foo<'x, 'y>(x: &'x u32) -> impl Trait<'y>\n where 'x: 'y\n {\n     x"}, {"sha": "e834f96dbbeeb2dc16dc3da1097e8bacdecd3724", "filename": "src/test/ui/impl-trait/region-escape-via-bound.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -4,15 +4,14 @@\n // See https://github.com/rust-lang/rust/issues/46541 for more details.\n \n #![allow(dead_code)]\n-#![feature(in_band_lifetimes)]\n \n use std::cell::Cell;\n \n trait Trait<'a> { }\n \n-impl Trait<'b> for Cell<&'a u32> { }\n+impl<'a, 'b> Trait<'b> for Cell<&'a u32> { }\n \n-fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n+fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>\n     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0700]\n where 'x: 'y\n {"}, {"sha": "ecec34e0115c67205e8ef18382323cb60151a975", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,16 +1,15 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/region-escape-via-bound.rs:15:29\n+  --> $DIR/region-escape-via-bound.rs:14:37\n    |\n-LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n-   |                             ^^^^^^^^^^^^^^\n-LL |\n-LL | where 'x: 'y\n-   |       -- hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n+LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>\n+   |        --                           ^^^^^^^^^^^^^^\n+   |        |\n+   |        hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n    |\n help: to declare that the `impl Trait` captures `'x`, you can add an explicit `'x` lifetime bound\n    |\n-LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y> + 'x\n-   |                                            ++++\n+LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y> + 'x\n+   |                                                    ++++\n \n error: aborting due to previous error\n "}, {"sha": "2e262ddaea3f4b51ea820ef9081c63c319b1fd5c", "filename": "src/test/ui/in-band-lifetimes/E0687.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,16 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn foo(x: fn(&'a u32)) {} //~ ERROR must be explicitly\n-\n-fn bar(x: &Fn(&'a u32)) {} //~ ERROR must be explicitly\n-\n-fn baz(x: fn(&'a u32), y: &'a u32) {} //~ ERROR must be explicitly\n-\n-struct Foo<'a> { x: &'a u32 }\n-\n-impl Foo<'a> {\n-    fn bar(&self, x: fn(&'a u32)) {} //~ ERROR must be explicitly\n-}\n-\n-fn main() {}"}, {"sha": "7aea2f220466c53a0a0aed36d390b3a433d9b2fe", "filename": "src/test/ui/in-band-lifetimes/E0687.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,27 +0,0 @@\n-error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n-  --> $DIR/E0687.rs:4:15\n-   |\n-LL | fn foo(x: fn(&'a u32)) {}\n-   |               ^^ in-band lifetime definition\n-\n-error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n-  --> $DIR/E0687.rs:6:16\n-   |\n-LL | fn bar(x: &Fn(&'a u32)) {}\n-   |                ^^ in-band lifetime definition\n-\n-error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n-  --> $DIR/E0687.rs:8:15\n-   |\n-LL | fn baz(x: fn(&'a u32), y: &'a u32) {}\n-   |               ^^ in-band lifetime definition\n-\n-error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n-  --> $DIR/E0687.rs:13:26\n-   |\n-LL |     fn bar(&self, x: fn(&'a u32)) {}\n-   |                          ^^ in-band lifetime definition\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0687`."}, {"sha": "6cf8053287d8ff2d528ddd518e02ff9f178940f6", "filename": "src/test/ui/in-band-lifetimes/E0687_where.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,8 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn bar<F>(x: &F) where F: Fn(&'a u32) {} //~ ERROR must be explicitly\n-\n-fn baz(x: &impl Fn(&'a u32)) {} //~ ERROR must be explicitly\n-\n-fn main() {}"}, {"sha": "af0f9665f5d06df7ded816bc7e4b9bde522a8ffd", "filename": "src/test/ui/in-band-lifetimes/E0687_where.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,15 +0,0 @@\n-error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n-  --> $DIR/E0687_where.rs:4:31\n-   |\n-LL | fn bar<F>(x: &F) where F: Fn(&'a u32) {}\n-   |                               ^^ in-band lifetime definition\n-\n-error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n-  --> $DIR/E0687_where.rs:6:21\n-   |\n-LL | fn baz(x: &impl Fn(&'a u32)) {}\n-   |                     ^^ in-band lifetime definition\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0687`."}, {"sha": "a4e1f01c1781a08b0afe103987c657ad6b456207", "filename": "src/test/ui/in-band-lifetimes/E0688.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,16 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn foo<'a>(x: &'a u32, y: &'b u32) {} //~ ERROR cannot mix\n-\n-struct Foo<'a> { x: &'a u32 }\n-\n-impl Foo<'a> {\n-    fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {} //~ ERROR cannot mix\n-}\n-\n-impl<'b> Foo<'a> { //~ ERROR cannot mix\n-    fn baz() {}\n-}\n-\n-fn main() {}"}, {"sha": "afefcd9fc2c66f4aab96001385a38445c3bc6259", "filename": "src/test/ui/in-band-lifetimes/E0688.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,27 +0,0 @@\n-error[E0688]: cannot mix in-band and explicit lifetime definitions\n-  --> $DIR/E0688.rs:4:28\n-   |\n-LL | fn foo<'a>(x: &'a u32, y: &'b u32) {}\n-   |        --                  ^^ in-band lifetime definition here\n-   |        |\n-   |        explicit lifetime definition here\n-\n-error[E0688]: cannot mix in-band and explicit lifetime definitions\n-  --> $DIR/E0688.rs:9:44\n-   |\n-LL |     fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {}\n-   |            --                              ^^ in-band lifetime definition here\n-   |            |\n-   |            explicit lifetime definition here\n-\n-error[E0688]: cannot mix in-band and explicit lifetime definitions\n-  --> $DIR/E0688.rs:12:14\n-   |\n-LL | impl<'b> Foo<'a> {\n-   |      --      ^^ in-band lifetime definition here\n-   |      |\n-   |      explicit lifetime definition here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0688`."}, {"sha": "87a79b8813777fb9acd137d5f0cb31dd72a14ff6", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.fixed", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,119 +0,0 @@\n-// run-rustfix\n-// edition:2018\n-\n-#![allow(unused)]\n-#![deny(elided_lifetimes_in_paths)]\n-//~^ NOTE the lint level is defined here\n-\n-use std::cell::{Ref, RefCell};\n-\n-struct Foo<'a> {\n-    x: &'a u32,\n-}\n-\n-fn foo(x: &Foo<'_>) {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-}\n-\n-fn bar(x: &Foo<'_>) {}\n-\n-struct Wrapped<'a>(&'a str);\n-\n-struct WrappedWithBow<'a> {\n-    gift: &'a str,\n-}\n-\n-struct MatchedSet<'a, 'b> {\n-    one: &'a str,\n-    another: &'b str,\n-}\n-\n-fn wrap_gift(gift: &str) -> Wrapped<'_> {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-    Wrapped(gift)\n-}\n-\n-fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow<'_> {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-    WrappedWithBow { gift }\n-}\n-\n-fn inspect_matched_set(set: MatchedSet<'_, '_>) {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected 2 lifetime parameters\n-    //~| HELP consider using the `'_` lifetime\n-    println!(\"{} {}\", set.one, set.another);\n-}\n-\n-// Verify that the lint does not fire, because the added `'_` wouldn't be resolved correctly.\n-fn match_sets() -> MatchedSet<'static, 'static> {\n-    //~^ ERROR missing lifetime specifiers\n-    //~| NOTE expected 2 lifetime parameters\n-    //~| HELP this function's return type contains a borrowed value\n-    //~| HELP consider using the `'static` lifetime\n-    MatchedSet { one: \"one\", another: \"another\" }\n-}\n-\n-macro_rules! autowrapper {\n-    ($type_name:ident, $fn_name:ident, $lt:lifetime) => {\n-        struct $type_name<$lt> {\n-            gift: &$lt str\n-        }\n-\n-        fn $fn_name(gift: &str) -> $type_name<'_> {\n-            //~^ ERROR hidden lifetime parameters in types are deprecated\n-            //~| NOTE expected named lifetime parameter\n-            //~| HELP consider using the `'_` lifetime\n-            //~| ERROR hidden lifetime parameters in types are deprecated\n-            //~| NOTE expected named lifetime parameter\n-            //~| HELP consider using the `'_` lifetime\n-            $type_name { gift }\n-        }\n-    }\n-}\n-\n-autowrapper!(Autowrapped, autowrap_gift, 'a);\n-//~^ NOTE in this expansion of autowrapper!\n-//~| NOTE in this expansion of autowrapper!\n-\n-// Verify that rustfix does not try to apply the fix twice.\n-autowrapper!(AutowrappedAgain, autowrap_gift_again, 'a);\n-//~^ NOTE in this expansion of autowrapper!\n-//~| NOTE in this expansion of autowrapper!\n-\n-macro_rules! anytuple_ref_ty {\n-    ($($types:ty),*) => {\n-        Ref<'_, ($($types),*)>\n-        //~^ ERROR hidden lifetime parameters in types are deprecated\n-        //~| NOTE expected named lifetime parameter\n-        //~| HELP consider using the `'_` lifetime\n-    }\n-}\n-\n-#[allow(elided_lifetimes_in_paths)]\n-mod blah {\n-    struct Thing<'a>(&'a i32);\n-    struct Bar<T>(T);\n-\n-    fn foo(b: Bar<Thing>) {}\n-}\n-\n-fn main() {\n-    let honesty = RefCell::new((4, 'e'));\n-    let loyalty: Ref<'_, (u32, char)> = honesty.borrow();\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-    let generosity = Ref::map(loyalty, |t| &t.0);\n-\n-    let laughter = RefCell::new((true, \"magic\"));\n-    let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n-    //~^ NOTE in this expansion of anytuple_ref_ty!\n-    //~| NOTE in this expansion of anytuple_ref_ty!\n-}"}, {"sha": "28323a22427b64c837644d183f7b2e90a65c2778", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.rs", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,119 +0,0 @@\n-// run-rustfix\n-// edition:2018\n-\n-#![allow(unused)]\n-#![deny(elided_lifetimes_in_paths)]\n-//~^ NOTE the lint level is defined here\n-\n-use std::cell::{Ref, RefCell};\n-\n-struct Foo<'a> {\n-    x: &'a u32,\n-}\n-\n-fn foo(x: &Foo) {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-}\n-\n-fn bar(x: &Foo<'_>) {}\n-\n-struct Wrapped<'a>(&'a str);\n-\n-struct WrappedWithBow<'a> {\n-    gift: &'a str,\n-}\n-\n-struct MatchedSet<'a, 'b> {\n-    one: &'a str,\n-    another: &'b str,\n-}\n-\n-fn wrap_gift(gift: &str) -> Wrapped {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-    Wrapped(gift)\n-}\n-\n-fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-    WrappedWithBow { gift }\n-}\n-\n-fn inspect_matched_set(set: MatchedSet) {\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected 2 lifetime parameters\n-    //~| HELP consider using the `'_` lifetime\n-    println!(\"{} {}\", set.one, set.another);\n-}\n-\n-// Verify that the lint does not fire, because the added `'_` wouldn't be resolved correctly.\n-fn match_sets() -> MatchedSet {\n-    //~^ ERROR missing lifetime specifiers\n-    //~| NOTE expected 2 lifetime parameters\n-    //~| HELP this function's return type contains a borrowed value\n-    //~| HELP consider using the `'static` lifetime\n-    MatchedSet { one: \"one\", another: \"another\" }\n-}\n-\n-macro_rules! autowrapper {\n-    ($type_name:ident, $fn_name:ident, $lt:lifetime) => {\n-        struct $type_name<$lt> {\n-            gift: &$lt str\n-        }\n-\n-        fn $fn_name(gift: &str) -> $type_name {\n-            //~^ ERROR hidden lifetime parameters in types are deprecated\n-            //~| NOTE expected named lifetime parameter\n-            //~| HELP consider using the `'_` lifetime\n-            //~| ERROR hidden lifetime parameters in types are deprecated\n-            //~| NOTE expected named lifetime parameter\n-            //~| HELP consider using the `'_` lifetime\n-            $type_name { gift }\n-        }\n-    }\n-}\n-\n-autowrapper!(Autowrapped, autowrap_gift, 'a);\n-//~^ NOTE in this expansion of autowrapper!\n-//~| NOTE in this expansion of autowrapper!\n-\n-// Verify that rustfix does not try to apply the fix twice.\n-autowrapper!(AutowrappedAgain, autowrap_gift_again, 'a);\n-//~^ NOTE in this expansion of autowrapper!\n-//~| NOTE in this expansion of autowrapper!\n-\n-macro_rules! anytuple_ref_ty {\n-    ($($types:ty),*) => {\n-        Ref<($($types),*)>\n-        //~^ ERROR hidden lifetime parameters in types are deprecated\n-        //~| NOTE expected named lifetime parameter\n-        //~| HELP consider using the `'_` lifetime\n-    }\n-}\n-\n-#[allow(elided_lifetimes_in_paths)]\n-mod blah {\n-    struct Thing<'a>(&'a i32);\n-    struct Bar<T>(T);\n-\n-    fn foo(b: Bar<Thing>) {}\n-}\n-\n-fn main() {\n-    let honesty = RefCell::new((4, 'e'));\n-    let loyalty: Ref<(u32, char)> = honesty.borrow();\n-    //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| NOTE expected named lifetime parameter\n-    //~| HELP consider using the `'_` lifetime\n-    let generosity = Ref::map(loyalty, |t| &t.0);\n-\n-    let laughter = RefCell::new((true, \"magic\"));\n-    let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n-    //~^ NOTE in this expansion of anytuple_ref_ty!\n-    //~| NOTE in this expansion of anytuple_ref_ty!\n-}"}, {"sha": "2e65461b321e989fc65ee61de24230228b9787bd", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,120 +0,0 @@\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:14:12\n-   |\n-LL | fn foo(x: &Foo) {\n-   |            ^^^ expected named lifetime parameter\n-   |\n-note: the lint level is defined here\n-  --> $DIR/elided-lifetimes.rs:5:9\n-   |\n-LL | #![deny(elided_lifetimes_in_paths)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider using the `'_` lifetime\n-   |\n-LL | fn foo(x: &Foo<'_>) {\n-   |            ~~~~~~~\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:33:29\n-   |\n-LL | fn wrap_gift(gift: &str) -> Wrapped {\n-   |                             ^^^^^^^ expected named lifetime parameter\n-   |\n-help: consider using the `'_` lifetime\n-   |\n-LL | fn wrap_gift(gift: &str) -> Wrapped<'_> {\n-   |                             ~~~~~~~~~~~\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:40:38\n-   |\n-LL | fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow {\n-   |                                      ^^^^^^^^^^^^^^ expected named lifetime parameter\n-   |\n-help: consider using the `'_` lifetime\n-   |\n-LL | fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow<'_> {\n-   |                                      ~~~~~~~~~~~~~~~~~~\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:47:29\n-   |\n-LL | fn inspect_matched_set(set: MatchedSet) {\n-   |                             ^^^^^^^^^^ expected 2 lifetime parameters\n-   |\n-help: consider using the `'_` lifetime\n-   |\n-LL | fn inspect_matched_set(set: MatchedSet<'_, '_>) {\n-   |                             ~~~~~~~~~~~~~~~~~~\n-\n-error[E0106]: missing lifetime specifiers\n-  --> $DIR/elided-lifetimes.rs:55:20\n-   |\n-LL | fn match_sets() -> MatchedSet {\n-   |                    ^^^^^^^^^^ expected 2 lifetime parameters\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n-   |\n-LL | fn match_sets() -> MatchedSet<'static, 'static> {\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:69:36\n-   |\n-LL |         fn $fn_name(gift: &str) -> $type_name {\n-   |                                    ^^^^^^^^^^ expected named lifetime parameter\n-...\n-LL | autowrapper!(Autowrapped, autowrap_gift, 'a);\n-   | -------------------------------------------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `autowrapper` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider using the `'_` lifetime\n-   |\n-LL |         fn $fn_name(gift: &str) -> $type_name<'_> {\n-   |                                    ~~~~~~~~~~~~~~\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:69:36\n-   |\n-LL |         fn $fn_name(gift: &str) -> $type_name {\n-   |                                    ^^^^^^^^^^ expected named lifetime parameter\n-...\n-LL | autowrapper!(AutowrappedAgain, autowrap_gift_again, 'a);\n-   | ------------------------------------------------------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `autowrapper` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider using the `'_` lifetime\n-   |\n-LL |         fn $fn_name(gift: &str) -> $type_name<'_> {\n-   |                                    ~~~~~~~~~~~~~~\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:109:22\n-   |\n-LL |     let loyalty: Ref<(u32, char)> = honesty.borrow();\n-   |                      ^ expected named lifetime parameter\n-   |\n-help: consider using the `'_` lifetime\n-   |\n-LL |     let loyalty: Ref<'_, (u32, char)> = honesty.borrow();\n-   |                      +++\n-\n-error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:92:13\n-   |\n-LL |         Ref<($($types),*)>\n-   |             ^ expected named lifetime parameter\n-...\n-LL |     let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n-   |                 ---------------------------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `anytuple_ref_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider using the `'_` lifetime\n-   |\n-LL |         Ref<'_, ($($types),*)>\n-   |             +++\n-\n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "9b2e1fe83c1cc2015d00d527e1e4244c71b1c83f", "filename": "src/test/ui/in-band-lifetimes/in-band-lifetimes.rs", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fin-band-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fin-band-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fin-band-lifetimes.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,96 +0,0 @@\n-// run-pass\n-\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn foo(x: &'x u8) -> &'x u8 { x }\n-fn foo2(x: &'a u8, y: &u8) -> &'a u8 { x }\n-\n-fn check_in_band_can_be_late_bound() {\n-    let _: for<'x> fn(&'x u8, &u8) -> &'x u8 = foo2;\n-}\n-\n-struct ForInherentNoParams;\n-\n-impl ForInherentNoParams {\n-    fn foo(x: &'a u32, y: &u32) -> &'a u32 { x }\n-}\n-\n-struct X<'a>(&'a u8);\n-\n-impl<'a> X<'a> {\n-    fn inner(&self) -> &'a u8 {\n-        self.0\n-    }\n-\n-    fn same_lifetime_as_parameter(&mut self, x: &'a u8) {\n-        self.0 = x;\n-    }\n-}\n-\n-impl X<'b> {\n-    fn inner_2(&self) -> &'b u8 {\n-        self.0\n-    }\n-\n-    fn reference_already_introduced_in_band_from_method_with_explicit_binders<'a>(\n-        &'b self, x: &'a u32\n-    ) {}\n-}\n-\n-struct Y<T>(T);\n-\n-impl Y<&'a u8> {\n-    fn inner(&self) -> &'a u8 {\n-        self.0\n-    }\n-}\n-\n-trait MyTrait<'a> {\n-    fn my_lifetime(&self) -> &'a u8;\n-    fn any_lifetime() -> &'b u8;\n-    fn borrowed_lifetime(&'b self) -> &'b u8;\n-    fn default_impl(&self, x: &'b u32, y: &u32) -> &'b u32 { x }\n-    fn in_band_def_explicit_impl(&self, x: &'b u8);\n-}\n-\n-impl MyTrait<'a> for Y<&'a u8> {\n-    fn my_lifetime(&self) -> &'a u8 { self.0 }\n-    fn any_lifetime() -> &'b u8 { &0 }\n-    fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n-    fn in_band_def_explicit_impl<'b>(&self, x: &'b u8) {}\n-}\n-\n-fn test_hrtb_defined_lifetime_where<F>(_: F) where for<'a> F: Fn(&'a u8) {}\n-fn test_hrtb_defined_lifetime_polytraitref<F>(_: F) where F: for<'a> Fn(&'a u8) {}\n-\n-fn reference_in_band_from_locals(x: &'test u32) -> &'test u32 {\n-    let y: &'test u32 = x;\n-    y\n-}\n-\n-fn in_generics_in_band<T: MyTrait<'a>>(x: &T) {}\n-fn where_clause_in_band<T>(x: &T) where T: MyTrait<'a> {}\n-fn impl_trait_in_band(x: &impl MyTrait<'a>) {}\n-\n-// Tests around using in-band lifetimes within existential traits.\n-\n-trait FunkyTrait<'a> { }\n-impl<'a, T> FunkyTrait<'a> for T { }\n-fn ret_pos_impl_trait_in_band_outlives(x: &'a u32) -> impl ::std::fmt::Debug + 'a {\n-    x\n-}\n-fn ret_pos_impl_trait_in_band_param(x: &'a u32) -> impl FunkyTrait<'a> {\n-    x\n-}\n-fn ret_pos_impl_trait_in_band_param_static(x: &'a u32) -> impl FunkyTrait<'static> + 'a {\n-    x\n-}\n-fn ret_pos_impl_trait_in_band_param_outlives(x: &'a u32) -> impl FunkyTrait<'a> + 'a {\n-    x\n-}\n-fn ret_pos_impl_trait_in_band_higher_ranked(x: &'a u32) -> impl for<'b> FunkyTrait<'b> + 'a {\n-    x\n-}\n-\n-fn main() {}"}, {"sha": "cf08cb7eeacd856a241baf1c3e31d953809b7ac0", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,10 +0,0 @@\n-#![deny(elided_lifetimes_in_paths)]\n-\n-// Previously, the elided-lifetimes-in-path lint would fire, but we don't want\n-// that, because `'_` isn't legal in struct declarations.\n-\n-struct Betrayal<'a> { x: &'a u8 }\n-\n-struct Heartbreak(Betrayal);  //~ ERROR missing lifetime specifier\n-\n-fn main() {}"}, {"sha": "20369a543b3ae02256e5c3bffa1ad5d131b294ef", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,14 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-61124-anon-lifetime-in-struct-declaration.rs:8:19\n-   |\n-LL | struct Heartbreak(Betrayal);\n-   |                   ^^^^^^^^ expected named lifetime parameter\n-   |\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | struct Heartbreak<'a>(Betrayal<'a>);\n-   |                  ++++ ~~~~~~~~~~~~\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "db028e63a8244de84e323db4314c1473cd64c343", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,22 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/mismatched.rs:4:42\n-   |\n-LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y }\n-   |                       ----               ^ lifetime `'a` required\n-   |                       |\n-   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/mismatched.rs:6:46\n-   |\n-LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n-   |             --          --                   ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |             |           |\n-   |             |           lifetime `'b` defined here\n-   |             lifetime `'a` defined here\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "11c41eae954d4240b158fe3b682960ce38343a9b", "filename": "src/test/ui/in-band-lifetimes/mismatched.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,8 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n-\n-fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n-\n-fn main() {}"}, {"sha": "db72c20697108a8d9b1e450aeb9df8a2f27c0370", "filename": "src/test/ui/in-band-lifetimes/mismatched.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,20 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/mismatched.rs:4:42\n-   |\n-LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y }\n-   |                       ----               ^ lifetime `'a` required\n-   |                       |\n-   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/mismatched.rs:6:46\n-   |\n-LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n-   |                        -------     -------   ^ ...but data from `y` is returned here\n-   |                        |\n-   |                        this parameter and the return type are declared with different lifetimes...\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0621, E0623.\n-For more information about an error, try `rustc --explain E0621`."}, {"sha": "221f4fc271bbfe408e41c8caeaddb00f65a1b3e5", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,10 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-trait Get {\n-    fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n-        y //~ ERROR explicit lifetime required\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "ac66daa21c7a91653136978060ec4f50c87eb3c9", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,11 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/mismatched_trait.rs:6:9\n-   |\n-LL |     fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n-   |                                  ---- help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n-LL |         y\n-   |         ^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "1b524ec3833e88cebc84ae51b285c2fb842ecd44", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,14 +0,0 @@\n-use std::ops::Deref;\n-trait Trait {}\n-\n-struct Struct;\n-\n-impl Deref for Struct {\n-    type Target = dyn Trait;\n-    fn deref(&self) -> &dyn Trait {\n-    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n-        unimplemented!();\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "0546b6b51b27342f71de3f2bbf09ef055d7f4c0b", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,18 +0,0 @@\n-error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/mismatched_trait_impl-2.rs:8:5\n-   |\n-LL |     fn deref(&self) -> &dyn Trait {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct) -> &'1 (dyn Trait + '1)`\n-   |\n-  ::: $SRC_DIR/core/src/ops/deref.rs:LL:COL\n-   |\n-LL |     fn deref(&self) -> &Self::Target;\n-   |     --------------------------------- expected `fn(&'1 Struct) -> &'1 (dyn Trait + 'static)`\n-   |\n-   = note: expected `fn(&'1 Struct) -> &'1 (dyn Trait + 'static)`\n-              found `fn(&'1 Struct) -> &'1 (dyn Trait + '1)`\n-   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n-   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n-\n-error: aborting due to previous error\n-"}, {"sha": "c7a90c57add836b83d5f75a39b565a2693c58521", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,16 +0,0 @@\n-error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/mismatched_trait_impl.rs:9:5\n-   |\n-LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-   |     ---------------------------------------------- expected `fn(&'1 i32, &'a u32, &'2 u32) -> &'a u32`\n-...\n-LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 i32, &'2 u32, &'3 u32) -> &'3 u32`\n-   |\n-   = note: expected `fn(&'1 i32, &'a u32, &'2 u32) -> &'a u32`\n-              found `fn(&'1 i32, &'2 u32, &'3 u32) -> &'3 u32`\n-   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n-   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n-\n-error: aborting due to previous error\n-"}, {"sha": "b9e02e967c126b6d48974e5a78d9d047709ba465", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,14 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-trait Get {\n-    fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-}\n-\n-impl Get for i32 {\n-    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR `impl` item signature doesn't match\n-        x //~ ERROR lifetime mismatch\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "84e5339122ead338eee30d7ad1e85c932e43d22f", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,27 +0,0 @@\n-error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/mismatched_trait_impl.rs:9:5\n-   |\n-LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-   |     ---------------------------------------------- expected `fn(&'1 i32, &'a u32, &'2 u32) -> &'a u32`\n-...\n-LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 i32, &'2 u32, &'3 u32) -> &'3 u32`\n-   |\n-   = note: expected `fn(&'1 i32, &'a u32, &'2 u32) -> &'a u32`\n-              found `fn(&'1 i32, &'2 u32, &'3 u32) -> &'3 u32`\n-   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n-   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/mismatched_trait_impl.rs:10:9\n-   |\n-LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |                      ----                 -------\n-   |                      |\n-   |                      this parameter and the return type are declared with different lifetimes...\n-LL |         x\n-   |         ^ ...but data from `x` is returned here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "97e8ed0d2813e7c45eeccbf5c629052cf735530f", "filename": "src/test/ui/in-band-lifetimes/mut_while_borrow.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,11 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn foo(x: &'a u32) -> &'a u32 { x }\n-\n-fn main() {\n-    let mut p = 3;\n-    let r = foo(&p);\n-    p += 1; //~ ERROR cannot assign to `p` because it is borrowed\n-    println!(\"{}\", r);\n-}"}, {"sha": "f96ff9dd4e6740b7137abfa18c71fd0c23c4cc3b", "filename": "src/test/ui/in-band-lifetimes/mut_while_borrow.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,13 +0,0 @@\n-error[E0506]: cannot assign to `p` because it is borrowed\n-  --> $DIR/mut_while_borrow.rs:9:5\n-   |\n-LL |     let r = foo(&p);\n-   |                 -- borrow of `p` occurs here\n-LL |     p += 1;\n-   |     ^^^^^^ assignment to borrowed `p` occurs here\n-LL |     println!(\"{}\", r);\n-   |                    - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "7de20712fba94c20196260a61e0f27124c6cb420", "filename": "src/test/ui/in-band-lifetimes/nested-items.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,20 +0,0 @@\n-// Test that the `'a` from the impl doesn't\n-// prevent us from creating a `'a` parameter\n-// on the `blah` function.\n-//\n-// check-pass\n-\n-#![feature(in_band_lifetimes)]\n-\n-struct Foo<'a> {\n-    x: &'a u32\n-\n-}\n-\n-impl Foo<'a> {\n-    fn method(&self) {\n-        fn blah(f: Foo<'a>) { }\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "9b0c0cda77220a6fe002572db90bccf6d435117a", "filename": "src/test/ui/in-band-lifetimes/no_in_band_in_struct.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,12 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-struct Foo {\n-    x: &'test u32, //~ ERROR undeclared lifetime\n-}\n-\n-enum Bar {\n-    Baz(&'test u32), //~ ERROR undeclared lifetime\n-}\n-\n-fn main() {}"}, {"sha": "fe656f7af7e0139d7b1898e53bf372bd769b571a", "filename": "src/test/ui/in-band-lifetimes/no_in_band_in_struct.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,19 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'test`\n-  --> $DIR/no_in_band_in_struct.rs:5:9\n-   |\n-LL | struct Foo {\n-   |           - help: consider introducing lifetime `'test` here: `<'test>`\n-LL |     x: &'test u32,\n-   |         ^^^^^ undeclared lifetime\n-\n-error[E0261]: use of undeclared lifetime name `'test`\n-  --> $DIR/no_in_band_in_struct.rs:9:10\n-   |\n-LL | enum Bar {\n-   |         - help: consider introducing lifetime `'test` here: `<'test>`\n-LL |     Baz(&'test u32),\n-   |          ^^^^^ undeclared lifetime\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "c1c40afdbab55ac014b138dd3c8bc9abc2740463", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,13 +0,0 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n-fn foo(x: &u32) {\n-    let y: &'test u32 = x; //~ ERROR use of undeclared lifetime\n-}\n-\n-fn foo2(x: &u32) {}\n-fn bar() {\n-    let y: fn(&'test u32) = foo2; //~ ERROR use of undeclared lifetime\n-}\n-\n-fn main() {}"}, {"sha": "5f0de61e69d29177e49267eebddf3a6094182b6b", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,27 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'test`\n-  --> $DIR/no_introducing_in_band_in_locals.rs:5:13\n-   |\n-LL | fn foo(x: &u32) {\n-   |       - help: consider introducing lifetime `'test` here: `<'test>`\n-LL |     let y: &'test u32 = x;\n-   |             ^^^^^ undeclared lifetime\n-\n-error[E0261]: use of undeclared lifetime name `'test`\n-  --> $DIR/no_introducing_in_band_in_locals.rs:10:16\n-   |\n-LL |     let y: fn(&'test u32) = foo2;\n-   |                ^^^^^ undeclared lifetime\n-   |\n-   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider introducing lifetime `'test` here\n-   |\n-LL | fn bar<'test>() {\n-   |       +++++++\n-help: consider making the type lifetime-generic with a new `'test` lifetime\n-   |\n-LL |     let y: for<'test> fn(&'test u32) = foo2;\n-   |            ++++++++++\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "af7b6412780d85aa6718e2e49fc4b5a4d9e8a26f", "filename": "src/test/ui/lifetimes/missing-lifetime-in-alias.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-#![allow(unused)]\n \n trait Trait<'a> {\n     type Foo;", "previous_filename": "src/test/ui/in-band-lifetimes/missing-lifetime-in-alias.rs"}, {"sha": "b16b792aefee9f81e4b9e3ace0536f3d2ee0e35d", "filename": "src/test/ui/lifetimes/missing-lifetime-in-alias.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-in-alias.rs:23:24\n+  --> $DIR/missing-lifetime-in-alias.rs:22:24\n    |\n LL | type B<'a> = <A<'a> as Trait>::Foo;\n    |                        ^^^^^ expected named lifetime parameter\n@@ -10,25 +10,25 @@ LL | type B<'a> = <A<'a> as Trait<'a>>::Foo;\n    |                        ~~~~~~~~~\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-in-alias.rs:27:28\n+  --> $DIR/missing-lifetime-in-alias.rs:26:28\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n    |                            ^^^^^ expected named lifetime parameter\n    |\n note: these named lifetimes are available to use\n-  --> $DIR/missing-lifetime-in-alias.rs:27:8\n+  --> $DIR/missing-lifetime-in-alias.rs:26:8\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n    |        ^^  ^^\n \n error[E0107]: missing generics for associated type `Trait::Bar`\n-  --> $DIR/missing-lifetime-in-alias.rs:27:36\n+  --> $DIR/missing-lifetime-in-alias.rs:26:36\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n    |                                    ^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'b`\n-  --> $DIR/missing-lifetime-in-alias.rs:7:10\n+  --> $DIR/missing-lifetime-in-alias.rs:6:10\n    |\n LL |     type Bar<'b>\n    |          ^^^ --", "previous_filename": "src/test/ui/in-band-lifetimes/missing-lifetime-in-alias.stderr"}, {"sha": "f3f1f2016f23729e0abdb24f7b0e9237f897e630", "filename": "src/test/ui/lifetimes/nested.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fnested.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+fn method<'a>(_i: &'a i32) {\n+    fn inner<'a>(_j: &'a f32) {}\n+}\n+\n+fn main() {}"}, {"sha": "e2124887e0f091735c33dc699dba5fadcecf0fae", "filename": "src/test/ui/lifetimes/shadow.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fshadow.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,9 +1,6 @@\n-#![allow(warnings)]\n-#![feature(in_band_lifetimes)]\n-\n struct Foo<T>(T);\n \n-impl Foo<&'s u8> {\n+impl<'s> Foo<&'s u8> {\n     fn bar<'s>(&self, x: &'s u8) {} //~ ERROR shadows a lifetime name\n     fn baz(x: for<'s> fn(&'s u32)) {} //~ ERROR shadows a lifetime name\n }", "previous_filename": "src/test/ui/in-band-lifetimes/shadow.rs"}, {"sha": "b834e90d8d0795a5dd278293e8d724dc38b54ffa", "filename": "src/test/ui/lifetimes/shadow.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fshadow.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,16 +1,16 @@\n error[E0496]: lifetime name `'s` shadows a lifetime name that is already in scope\n-  --> $DIR/shadow.rs:7:12\n+  --> $DIR/shadow.rs:4:12\n    |\n-LL | impl Foo<&'s u8> {\n-   |           -- first declared here\n+LL | impl<'s> Foo<&'s u8> {\n+   |      -- first declared here\n LL |     fn bar<'s>(&self, x: &'s u8) {}\n    |            ^^ lifetime `'s` already in scope\n \n error[E0496]: lifetime name `'s` shadows a lifetime name that is already in scope\n-  --> $DIR/shadow.rs:8:19\n+  --> $DIR/shadow.rs:5:19\n    |\n-LL | impl Foo<&'s u8> {\n-   |           -- first declared here\n+LL | impl<'s> Foo<&'s u8> {\n+   |      -- first declared here\n LL |     fn bar<'s>(&self, x: &'s u8) {}\n LL |     fn baz(x: for<'s> fn(&'s u32)) {}\n    |                   ^^ lifetime `'s` already in scope", "previous_filename": "src/test/ui/in-band-lifetimes/shadow.stderr"}, {"sha": "cb459f31cd243fd14eb0683812b1c1b2847ee2b2", "filename": "src/test/ui/lifetimes/undeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL | struct Test {\n    |            - help: consider introducing lifetime `'b` here: `<'b>`\n LL |     a: &'b str,\n    |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n@@ -15,16 +13,13 @@ LL | struct Test {\n    |            - help: consider introducing lifetime `'b` here: `<'b>`\n LL |     a: &'b str,\n    |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:13:13\n    |\n LL |     fn foo(&'b self) {}\n    |             ^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> T for Test {"}, {"sha": "2f600971da113acd640856ae8b87374acd0833b9", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -115,18 +115,18 @@ mod cross_crate {\n         let _ = UnstableStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct; //~ WARN use of deprecated struct `lint_stability::DeprecatedUnitStruct`\n-        let _ = DeprecatedUnstableUnitStruct; //~ WARN use of deprecated struct `lint_stability::DeprecatedUnstableUnitStruct`\n+        let _ = DeprecatedUnitStruct; //~ WARN use of deprecated unit struct `lint_stability::DeprecatedUnitStruct`\n+        let _ = DeprecatedUnstableUnitStruct; //~ WARN use of deprecated unit struct `lint_stability::DeprecatedUnstableUnitStruct`\n         let _ = UnstableUnitStruct;\n         let _ = StableUnitStruct;\n \n-        let _ = Enum::DeprecatedVariant; //~ WARN use of deprecated variant `lint_stability::Enum::DeprecatedVariant`\n-        let _ = Enum::DeprecatedUnstableVariant; //~ WARN use of deprecated variant `lint_stability::Enum::DeprecatedUnstableVariant`\n+        let _ = Enum::DeprecatedVariant; //~ WARN use of deprecated unit variant `lint_stability::Enum::DeprecatedVariant`\n+        let _ = Enum::DeprecatedUnstableVariant; //~ WARN use of deprecated unit variant `lint_stability::Enum::DeprecatedUnstableVariant`\n         let _ = Enum::UnstableVariant;\n         let _ = Enum::StableVariant;\n \n-        let _ = DeprecatedTupleStruct (1); //~ WARN use of deprecated struct `lint_stability::DeprecatedTupleStruct`\n-        let _ = DeprecatedUnstableTupleStruct (1); //~ WARN use of deprecated struct `lint_stability::DeprecatedUnstableTupleStruct`\n+        let _ = DeprecatedTupleStruct (1); //~ WARN use of deprecated tuple struct `lint_stability::DeprecatedTupleStruct`\n+        let _ = DeprecatedUnstableTupleStruct (1); //~ WARN use of deprecated tuple struct `lint_stability::DeprecatedUnstableTupleStruct`\n         let _ = UnstableTupleStruct (1);\n         let _ = StableTupleStruct (1);\n "}, {"sha": "9f1e7b281e982a76e3dead827d7f574a4cdfc276", "filename": "src/test/ui/lint/lint-stability-deprecated.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -88,37 +88,37 @@ warning: use of deprecated struct `lint_stability::DeprecatedUnstableStruct`: te\n LL |         let _ = DeprecatedUnstableStruct {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated struct `lint_stability::DeprecatedUnitStruct`: text\n+warning: use of deprecated unit struct `lint_stability::DeprecatedUnitStruct`: text\n   --> $DIR/lint-stability-deprecated.rs:118:17\n    |\n LL |         let _ = DeprecatedUnitStruct;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated struct `lint_stability::DeprecatedUnstableUnitStruct`: text\n+warning: use of deprecated unit struct `lint_stability::DeprecatedUnstableUnitStruct`: text\n   --> $DIR/lint-stability-deprecated.rs:119:17\n    |\n LL |         let _ = DeprecatedUnstableUnitStruct;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated variant `lint_stability::Enum::DeprecatedVariant`: text\n+warning: use of deprecated unit variant `lint_stability::Enum::DeprecatedVariant`: text\n   --> $DIR/lint-stability-deprecated.rs:123:23\n    |\n LL |         let _ = Enum::DeprecatedVariant;\n    |                       ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated variant `lint_stability::Enum::DeprecatedUnstableVariant`: text\n+warning: use of deprecated unit variant `lint_stability::Enum::DeprecatedUnstableVariant`: text\n   --> $DIR/lint-stability-deprecated.rs:124:23\n    |\n LL |         let _ = Enum::DeprecatedUnstableVariant;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated struct `lint_stability::DeprecatedTupleStruct`: text\n+warning: use of deprecated tuple struct `lint_stability::DeprecatedTupleStruct`: text\n   --> $DIR/lint-stability-deprecated.rs:128:17\n    |\n LL |         let _ = DeprecatedTupleStruct (1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated struct `lint_stability::DeprecatedUnstableTupleStruct`: text\n+warning: use of deprecated tuple struct `lint_stability::DeprecatedUnstableTupleStruct`: text\n   --> $DIR/lint-stability-deprecated.rs:129:17\n    |\n LL |         let _ = DeprecatedUnstableTupleStruct (1);"}, {"sha": "a44eb1ce10a22aea4734f6dfe69f687a1c7e42bf", "filename": "src/test/ui/lint/lint-stability-fields-deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -129,7 +129,7 @@ mod cross_crate {\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n-        //~^ ERROR use of deprecated struct\n+        //~^ ERROR use of deprecated tuple struct\n \n         let _ = x.0;\n         //~^ ERROR use of deprecated field\n@@ -139,7 +139,7 @@ mod cross_crate {\n         //~^ ERROR use of deprecated field\n \n         let Deprecated2\n-        //~^ ERROR use of deprecated struct\n+        //~^ ERROR use of deprecated tuple struct\n             (_,\n              //~^ ERROR use of deprecated field\n              _,\n@@ -148,7 +148,7 @@ mod cross_crate {\n              //~^ ERROR use of deprecated field\n             = x;\n         let Deprecated2\n-        //~^ ERROR use of deprecated struct\n+        //~^ ERROR use of deprecated tuple struct\n             // the patterns are all fine:\n             (..) = x;\n     }"}, {"sha": "2d83260206f81084fe8e486a7b7ccd8069009dc1", "filename": "src/test/ui/lint/lint-stability-fields-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -22,19 +22,19 @@ error: use of deprecated struct `cross_crate::lint_stability_fields::Deprecated`\n LL |         let Deprecated\n    |             ^^^^^^^^^^\n \n-error: use of deprecated struct `cross_crate::lint_stability_fields::Deprecated2`: text\n+error: use of deprecated tuple struct `cross_crate::lint_stability_fields::Deprecated2`: text\n   --> $DIR/lint-stability-fields-deprecated.rs:131:17\n    |\n LL |         let x = Deprecated2(1, 2, 3);\n    |                 ^^^^^^^^^^^\n \n-error: use of deprecated struct `cross_crate::lint_stability_fields::Deprecated2`: text\n+error: use of deprecated tuple struct `cross_crate::lint_stability_fields::Deprecated2`: text\n   --> $DIR/lint-stability-fields-deprecated.rs:141:13\n    |\n LL |         let Deprecated2\n    |             ^^^^^^^^^^^\n \n-error: use of deprecated struct `cross_crate::lint_stability_fields::Deprecated2`: text\n+error: use of deprecated tuple struct `cross_crate::lint_stability_fields::Deprecated2`: text\n   --> $DIR/lint-stability-fields-deprecated.rs:150:13\n    |\n LL |         let Deprecated2"}, {"sha": "c9f235c4f7df7509b14b4aa93e065ec2670e2dc6", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL | fn main() {\n    |        - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     0.clone::<'a>();\n    |               ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to previous error\n "}, {"sha": "0f6d6cd4fa1805eecc3ff16f9f4aa1556ca56136", "filename": "src/test/ui/nll/issue-52742.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52742.rs:14:9\n+  --> $DIR/issue-52742.rs:12:9\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                 ---------         -- let's call this `'1`"}, {"sha": "d3e201b8ae8e7ab09ee45b0ad1fd9729667cebd6", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,5 +1,3 @@\n-#![feature(in_band_lifetimes)]\n-\n struct Foo<'a, 'b> {\n     x: &'a u32,\n     y: &'b u32,"}, {"sha": "67bac14b6e4e1dd380dea53eb65f9b48e35096cb", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-52742.rs:14:18\n+  --> $DIR/issue-52742.rs:12:18\n    |\n LL |         self.y = b.z\n    |                  ^^^\n    |\n note: ...the reference is valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-52742.rs:12:10\n+  --> $DIR/issue-52742.rs:10:10\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n note: ...but the borrowed content is only valid for the anonymous lifetime defined here\n-  --> $DIR/issue-52742.rs:13:31\n+  --> $DIR/issue-52742.rs:11:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                               ^^^^^^^"}, {"sha": "36709eea17c2144795de5995d944bf091a490b9f", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -37,4 +37,31 @@ fn qux() -> u32 {\n     //~^ ERROR mismatched types\n }\n \n+fn space_cadet() -> bool {\n+    ({ true }) | { true } //~ ERROR E0308\n+    //~^ ERROR expected parameter name\n+}\n+\n+fn revenge_from_mars() -> bool {\n+    ({ true }) && { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+fn attack_from_mars() -> bool {\n+    ({ true }) || { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+// This gets corrected by adding a semicolon, instead of parens.\n+// It's placed here to help keep track of the way this diagnostic\n+// needs to interact with type checking to avoid MachineApplicable\n+// suggestions that actually break stuff.\n+//\n+// If you're wondering what happens if that `foo()` is a `true` like\n+// all the ones above use? Nothing. It makes neither suggestion in\n+// that case.\n+fn asteroids() -> impl FnOnce() -> bool {\n+    { foo(); } || { true } //~ ERROR E0308\n+}\n+\n fn main() {}"}, {"sha": "92bb972b24020e3cc29ce21ef0d4e79d98bafffd", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -37,4 +37,31 @@ fn qux() -> u32 {\n     //~^ ERROR mismatched types\n }\n \n+fn space_cadet() -> bool {\n+    { true } | { true } //~ ERROR E0308\n+    //~^ ERROR expected parameter name\n+}\n+\n+fn revenge_from_mars() -> bool {\n+    { true } && { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+fn attack_from_mars() -> bool {\n+    { true } || { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+// This gets corrected by adding a semicolon, instead of parens.\n+// It's placed here to help keep track of the way this diagnostic\n+// needs to interact with type checking to avoid MachineApplicable\n+// suggestions that actually break stuff.\n+//\n+// If you're wondering what happens if that `foo()` is a `true` like\n+// all the ones above use? Nothing. It makes neither suggestion in\n+// that case.\n+fn asteroids() -> impl FnOnce() -> bool {\n+    { foo() } || { true } //~ ERROR E0308\n+}\n+\n fn main() {}"}, {"sha": "df0e4dcb16e2cbc57abb68659db7b9e804e1a6ac", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -44,6 +44,25 @@ LL |         _ => 1,\n LL ~     }) > 0\n    |\n \n+error: expected parameter name, found `{`\n+  --> $DIR/expr-as-stmt.rs:41:16\n+   |\n+LL |     { true } | { true }\n+   |                ^ expected parameter name\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ true }) | { true }\n+   |     +        +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:64:7\n+   |\n+LL |     { foo() } || { true }\n+   |       ^^^^^- help: consider using a semicolon here: `;`\n+   |       |\n+   |       expected `()`, found `i32`\n+\n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:8:6\n    |\n@@ -121,7 +140,68 @@ help: parentheses are required to parse this as an expression\n LL |     ({2}) - 2\n    |     +   +\n \n-error: aborting due to 11 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:41:7\n+   |\n+LL |     { true } | { true }\n+   |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; } | { true }\n+   |       ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:46:7\n+   |\n+LL |     { true } && { true }\n+   |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; } && { true }\n+   |       ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:46:14\n+   |\n+LL | fn revenge_from_mars() -> bool {\n+   |                           ---- expected `bool` because of return type\n+LL |     { true } && { true }\n+   |              ^^^^^^^^^^^ expected `bool`, found `&&bool`\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ true }) && { true }\n+   |     +        +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:51:7\n+   |\n+LL |     { true } || { true }\n+   |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; } || { true }\n+   |       ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:51:14\n+   |\n+LL | fn attack_from_mars() -> bool {\n+   |                          ---- expected `bool` because of return type\n+LL |     { true } || { true }\n+   |              ^^^^^^^^^^^ expected `bool`, found closure\n+   |\n+   = note: expected type `bool`\n+           found closure `[closure@$DIR/expr-as-stmt.rs:51:14: 51:25]`\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ true }) || { true }\n+   |     +        +\n+\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "66537653291c7ce98a2e2869c46ea832ea63e9cd", "filename": "src/test/ui/regions/regions-in-enums.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL | enum No0 {\n    |         - help: consider introducing lifetime `'foo` here: `<'foo>`\n LL |     X5(&'foo usize)\n    |         ^^^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-enums.rs:17:9\n@@ -15,8 +13,6 @@ LL | enum No1 {\n    |         - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     X6(&'a usize)\n    |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5dfdc2ee93b43120cad1131bb15f8af52b683849", "filename": "src/test/ui/regions/regions-in-structs.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL | struct StructDecl {\n    |                  - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     a: &'a isize,\n    |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-structs.rs:11:9\n@@ -16,8 +14,6 @@ LL | struct StructDecl {\n LL |     a: &'a isize,\n LL |     b: &'a isize,\n    |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4399263f716edca6daa667f35237d58778e1af44", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -5,8 +5,6 @@ LL |     enum E {\n    |           - help: consider introducing lifetime `'a` here: `<'a>`\n LL |         E1(&'a isize)\n    |             ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:31:13\n@@ -15,16 +13,13 @@ LL |     struct S {\n    |             - help: consider introducing lifetime `'a` here: `<'a>`\n LL |         f: &'a isize\n    |             ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:16:24\n    |\n LL |     fn m4(&self, arg: &'b isize) { }\n    |                        ^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -40,7 +35,6 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m5(&'b self) { }\n    |            ^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -56,7 +50,6 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m6(&self, arg: Foo<'b>) { }\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -73,8 +66,6 @@ LL |     type X = Option<&'a isize>;\n    |           -          ^^ undeclared lifetime\n    |           |\n    |           help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:33:14\n@@ -83,8 +74,6 @@ LL |     fn f(a: &'a isize) { }\n    |         -    ^^ undeclared lifetime\n    |         |\n    |         help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:41:17\n@@ -93,8 +82,6 @@ LL | fn fn_types(a: &'a isize,\n    |            -    ^^ undeclared lifetime\n    |            |\n    |            help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:43:36\n@@ -103,7 +90,6 @@ LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n@@ -120,7 +106,6 @@ LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n@@ -138,16 +123,13 @@ LL | fn fn_types(a: &'a isize,\n ...\n LL |             c: &'a isize)\n    |                 ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:53:31\n    |\n LL |     async fn buggy(&self) -> &'a str {\n    |                               ^^ undeclared lifetime\n    |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> Bug {"}, {"sha": "6bfde5524ac4961a2861d57a2af59f4bc35cab05", "filename": "src/test/ui/regions/regions-undeclared.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -11,8 +11,6 @@ LL | enum EnumDecl {\n    |              - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     Foo(&'a isize),\n    |          ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:5:10\n@@ -22,8 +20,6 @@ LL | enum EnumDecl {\n LL |     Foo(&'a isize),\n LL |     Bar(&'a isize),\n    |          ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:8:15\n@@ -32,8 +28,6 @@ LL | fn fnDecl(x: &'a isize,\n    |          -    ^^ undeclared lifetime\n    |          |\n    |          help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:9:15\n@@ -42,8 +36,6 @@ LL | fn fnDecl(x: &'a isize,\n    |          - help: consider introducing lifetime `'a` here: `<'a>`\n LL |           y: &'a isize)\n    |               ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 5 previous errors\n "}, {"sha": "6bc07afccbf39f0ea143a0e02e6de53a0e4e7adf", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.fixed", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.fixed?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,18 +0,0 @@\n-// run-rustfix\n-\n-#![feature(in_band_lifetimes)]\n-#![deny(single_use_lifetimes)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-\n-// Test that we DO warn when lifetime name is used only\n-// once in a fn argument, even with in band lifetimes.\n-\n-fn a(x: &u32, y: &u32) {\n-    //~^ ERROR `'a` only used once\n-    //~| ERROR `'b` only used once\n-    //~| HELP elide the single-use lifetime\n-    //~| HELP elide the single-use lifetime\n-}\n-\n-fn main() { }"}, {"sha": "22c6a5a9d38692d43fffeef5fb5069eea9fbd9d5", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,18 +0,0 @@\n-// run-rustfix\n-\n-#![feature(in_band_lifetimes)]\n-#![deny(single_use_lifetimes)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-\n-// Test that we DO warn when lifetime name is used only\n-// once in a fn argument, even with in band lifetimes.\n-\n-fn a(x: &'a u32, y: &'b u32) {\n-    //~^ ERROR `'a` only used once\n-    //~| ERROR `'b` only used once\n-    //~| HELP elide the single-use lifetime\n-    //~| HELP elide the single-use lifetime\n-}\n-\n-fn main() { }"}, {"sha": "b251e8a438ac1c79fda0763694e425e3c3e11f2a", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "patch": "@@ -1,26 +0,0 @@\n-error: lifetime parameter `'a` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:11:10\n-   |\n-LL | fn a(x: &'a u32, y: &'b u32) {\n-   |          ^^-\n-   |          |\n-   |          this lifetime is only used here\n-   |          help: elide the single-use lifetime\n-   |\n-note: the lint level is defined here\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:4:9\n-   |\n-LL | #![deny(single_use_lifetimes)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: lifetime parameter `'b` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:11:22\n-   |\n-LL | fn a(x: &'a u32, y: &'b u32) {\n-   |                      ^^-\n-   |                      |\n-   |                      this lifetime is only used here\n-   |                      help: elide the single-use lifetime\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "300cc34d63df205e8a0c056dc90ddfbc03a9200e", "filename": "src/test/ui/stability-attribute/generics-default-stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -217,25 +217,25 @@ fn main() {\n \n     let _ = ENUM4;\n     let _: Enum4<isize> = Enum4::Some(1);\n-    //~^ use of deprecated variant `unstable_generic_param::Enum4::Some`: test [deprecated]\n+    //~^ use of deprecated tuple variant `unstable_generic_param::Enum4::Some`: test [deprecated]\n     //~^^ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n     let _ = ENUM4;\n     let _: Enum4 = ENUM4; //~ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n     let _: Enum4<usize> = ENUM4; //~ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n     let _: Enum4<isize> = Enum4::Some(0);\n-    //~^ use of deprecated variant `unstable_generic_param::Enum4::Some`: test [deprecated]\n+    //~^ use of deprecated tuple variant `unstable_generic_param::Enum4::Some`: test [deprecated]\n     //~^^ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n \n     let _ = ENUM5;\n     let _: Enum5<isize> = Enum5::Some(1); //~ ERROR use of unstable library feature 'unstable_default'\n-    //~^ use of deprecated variant `unstable_generic_param::Enum5::Some`: test [deprecated]\n+    //~^ use of deprecated tuple variant `unstable_generic_param::Enum5::Some`: test [deprecated]\n     //~^^ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n     let _ = ENUM5;\n     let _: Enum5 = ENUM5; //~ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n     let _: Enum5<usize> = ENUM5; //~ ERROR use of unstable library feature 'unstable_default'\n     //~^ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n     let _: Enum5<isize> = Enum5::Some(0); //~ ERROR use of unstable library feature 'unstable_default'\n-    //~^ use of deprecated variant `unstable_generic_param::Enum5::Some`: test [deprecated]\n+    //~^ use of deprecated tuple variant `unstable_generic_param::Enum5::Some`: test [deprecated]\n     //~^^ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n \n     let _: Enum6<isize> = Enum6::Some(1); // ok"}, {"sha": "e094a10c8e7b474ceaa7de3a8a042df2eb0514a9", "filename": "src/test/ui/stability-attribute/generics-default-stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -144,7 +144,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n LL |     let _: Alias5<isize> = Alias5::Some(0);\n    |            ^^^^^^\n \n-warning: use of deprecated variant `unstable_generic_param::Enum4::Some`: test\n+warning: use of deprecated tuple variant `unstable_generic_param::Enum4::Some`: test\n   --> $DIR/generics-default-stability.rs:219:34\n    |\n LL |     let _: Enum4<isize> = Enum4::Some(1);\n@@ -168,7 +168,7 @@ warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n LL |     let _: Enum4<usize> = ENUM4;\n    |            ^^^^^\n \n-warning: use of deprecated variant `unstable_generic_param::Enum4::Some`: test\n+warning: use of deprecated tuple variant `unstable_generic_param::Enum4::Some`: test\n   --> $DIR/generics-default-stability.rs:225:34\n    |\n LL |     let _: Enum4<isize> = Enum4::Some(0);\n@@ -180,7 +180,7 @@ warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n LL |     let _: Enum4<isize> = Enum4::Some(0);\n    |            ^^^^^\n \n-warning: use of deprecated variant `unstable_generic_param::Enum5::Some`: test\n+warning: use of deprecated tuple variant `unstable_generic_param::Enum5::Some`: test\n   --> $DIR/generics-default-stability.rs:230:34\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(1);\n@@ -204,7 +204,7 @@ warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n LL |     let _: Enum5<usize> = ENUM5;\n    |            ^^^^^\n \n-warning: use of deprecated variant `unstable_generic_param::Enum5::Some`: test\n+warning: use of deprecated tuple variant `unstable_generic_param::Enum5::Some`: test\n   --> $DIR/generics-default-stability.rs:237:34\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(0);"}, {"sha": "6c52664154bbf333667287e087c21af0396527b6", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=9f8f0a6e9484fe25517c082a5cbe1e9edb17c8a8", "patch": "@@ -6,8 +6,6 @@ LL | fn f() where\n LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n@@ -17,8 +15,6 @@ LL | fn f() where\n ...\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}]}