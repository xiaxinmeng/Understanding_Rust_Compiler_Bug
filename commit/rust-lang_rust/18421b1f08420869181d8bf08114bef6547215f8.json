{"sha": "18421b1f08420869181d8bf08114bef6547215f8", "node_id": "C_kwDOAAsO6NoAKDE4NDIxYjFmMDg0MjA4NjkxODFkOGJmMDgxMTRiZWY2NTQ3MjE1Zjg", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-11-01T01:53:26Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-11-01T01:53:26Z"}, "message": "Add lint for region pairs too", "tree": {"sha": "87371e5ae6674b0b1c667cff1c8040fcf9b9b903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87371e5ae6674b0b1c667cff1c8040fcf9b9b903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18421b1f08420869181d8bf08114bef6547215f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18421b1f08420869181d8bf08114bef6547215f8", "html_url": "https://github.com/rust-lang/rust/commit/18421b1f08420869181d8bf08114bef6547215f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18421b1f08420869181d8bf08114bef6547215f8/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b84044acfff3635dd1f01a83f6cee08610e11889", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84044acfff3635dd1f01a83f6cee08610e11889", "html_url": "https://github.com/rust-lang/rust/commit/b84044acfff3635dd1f01a83f6cee08610e11889"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "5d884edfe1806a2caf3b16867c1750c1219c3e73", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/18421b1f08420869181d8bf08114bef6547215f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18421b1f08420869181d8bf08114bef6547215f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=18421b1f08420869181d8bf08114bef6547215f8", "patch": "@@ -412,6 +412,75 @@ fn check_gat_where_clauses(\n             }\n         }\n \n+        // For each region argument (e.g., 'a in our example), also check for a\n+        // relationship to the other region arguments. If there is an\n+        // outlives relationship, then we want to ensure that is\n+        // reflected in a where clause on the GAT itself.\n+        for (region_a, region_a_idx) in &visitor.regions {\n+            for (region_b, region_b_idx) in &visitor.regions {\n+                if region_a == region_b {\n+                    continue;\n+                }\n+\n+                // Unfortunately, we have to use a new `InferCtxt` for each\n+                // pair, because region constraints get added and solved there,\n+                // and we need to test each pair individually.\n+                tcx.infer_ctxt().enter(|infcx| {\n+                    let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+                    outlives_environment.add_implied_bounds(&infcx, wf_tys.clone(), id, DUMMY_SP);\n+                    outlives_environment.save_implied_bounds(id);\n+\n+                    let cause =\n+                        ObligationCause::new(DUMMY_SP, id, ObligationCauseCode::MiscObligation);\n+\n+                    let origin = SubregionOrigin::from_obligation_cause(&cause, || {\n+                        infer::RelateRegionParamBound(cause.span)\n+                    });\n+\n+                    use rustc_infer::infer::outlives::obligations::TypeOutlivesDelegate;\n+                    (&infcx).push_sub_region_constraint(origin, region_a, region_b);\n+\n+                    let errors = infcx.resolve_regions(\n+                        trait_item.def_id.to_def_id(),\n+                        &outlives_environment,\n+                        RegionckMode::default(),\n+                    );\n+\n+                    debug!(?errors, \"errors\");\n+\n+                    // If we were able to prove that Self: 'a without an error,\n+                    // it must be because of the implied or explicit bounds...\n+                    if errors.is_empty() {\n+                        debug!(?region_a_idx, ?region_b_idx);\n+                        debug!(\"required clause: {} must outlive {}\", region_a, region_b);\n+                        // Translate into the generic parameters of the GAT.\n+                        let region_a_param = generics.param_at(*region_a_idx, tcx);\n+                        let region_a_param =\n+                            tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n+                                def_id: region_a_param.def_id,\n+                                index: region_a_param.index,\n+                                name: region_a_param.name,\n+                            }));\n+                        // Same for the region.\n+                        let region_b_param = generics.param_at(*region_b_idx, tcx);\n+                        let region_b_param =\n+                            tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n+                                def_id: region_b_param.def_id,\n+                                index: region_b_param.index,\n+                                name: region_b_param.name,\n+                            }));\n+                        // The predicate we expect to see.\n+                        let clause = ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n+                            region_a_param,\n+                            region_b_param,\n+                        ));\n+                        let clause = tcx.mk_predicate(ty::Binder::dummy(clause));\n+                        function_clauses.insert(clause);\n+                    }\n+                });\n+            }\n+        }\n+\n         match clauses.as_mut() {\n             Some(clauses) => {\n                 clauses.drain_filter(|p| !function_clauses.contains(p));"}, {"sha": "df858c27cd3c578732497314cfddcb8503391555", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18421b1f08420869181d8bf08114bef6547215f8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18421b1f08420869181d8bf08114bef6547215f8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr?ref=18421b1f08420869181d8bf08114bef6547215f8", "patch": "@@ -86,5 +86,13 @@ LL |     type Iterator<'a>: Iterator<Item = Self::Item<'a>>;\n    |                                                       |\n    |                                                       help: add the required where clauses: `where Self: 'a`\n \n-error: aborting due to 11 previous errors\n+error: Missing required bounds on Bar\n+  --> $DIR/self-outlives-lint.rs:148:5\n+   |\n+LL |     type Bar<'a, 'b>;\n+   |     ^^^^^^^^^^^^^^^^-\n+   |                     |\n+   |                     help: add the required where clauses: `where 'a: 'b`\n+\n+error: aborting due to 12 previous errors\n "}]}