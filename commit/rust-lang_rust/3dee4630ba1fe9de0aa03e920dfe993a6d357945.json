{"sha": "3dee4630ba1fe9de0aa03e920dfe993a6d357945", "node_id": "C_kwDOAAsO6NoAKDNkZWU0NjMwYmExZmU5ZGUwYWEwM2U5MjBkZmU5OTNhNmQzNTc5NDU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-03T20:37:51Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-10T16:59:26Z"}, "message": "Add note when matching token with nonterminal\n\nThe current error message is _really_ confusing.", "tree": {"sha": "9cfc6e9c3ac1907d25851f46670aad77e9b2046f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cfc6e9c3ac1907d25851f46670aad77e9b2046f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dee4630ba1fe9de0aa03e920dfe993a6d357945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dee4630ba1fe9de0aa03e920dfe993a6d357945", "html_url": "https://github.com/rust-lang/rust/commit/3dee4630ba1fe9de0aa03e920dfe993a6d357945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dee4630ba1fe9de0aa03e920dfe993a6d357945/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5833423a02e2373c5e3cceb238fb19192cd82f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5833423a02e2373c5e3cceb238fb19192cd82f8", "html_url": "https://github.com/rust-lang/rust/commit/d5833423a02e2373c5e3cceb238fb19192cd82f8"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b1d9cea277397102a427e9b93a20e1e557e83e63", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3dee4630ba1fe9de0aa03e920dfe993a6d357945/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dee4630ba1fe9de0aa03e920dfe993a6d357945/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=3dee4630ba1fe9de0aa03e920dfe993a6d357945", "patch": "@@ -1,19 +1,18 @@\n-use std::borrow::Cow;\n-\n use crate::base::{DummyResult, ExtCtxt, MacResult};\n use crate::expand::{parse_ast_fragment, AstFragmentKind};\n use crate::mbe::{\n     macro_parser::{MatcherLoc, NamedParseResult, ParseResult::*, TtParser},\n     macro_rules::{try_match_macro, Tracker},\n };\n-use rustc_ast::token::{self, Token};\n+use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage};\n use rustc_parse::parser::{Parser, Recovery};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n+use std::borrow::Cow;\n \n use super::macro_rules::{parser_from_cx, NoopTracker};\n \n@@ -63,6 +62,13 @@ pub(super) fn failed_to_match_macro<'cx>(\n         err.note(format!(\"while trying to match {remaining_matcher}\"));\n     }\n \n+    if let MatcherLoc::Token { token: expected_token } = &remaining_matcher\n+        && (matches!(expected_token.kind, TokenKind::Interpolated(_))\n+            || matches!(token.kind, TokenKind::Interpolated(_)))\n+    {\n+        err.note(\"captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\");\n+    }\n+\n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n         for lhs in lhses {"}, {"sha": "762ecc3207fa558b3789c2d9d83b5652d57c7f25", "filename": "tests/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dee4630ba1fe9de0aa03e920dfe993a6d357945/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dee4630ba1fe9de0aa03e920dfe993a6d357945/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=3dee4630ba1fe9de0aa03e920dfe993a6d357945", "patch": "@@ -18,6 +18,7 @@ LL |     macro n(a $nt_item b) {\n ...\n LL | complex_nonterminal!(enum E {});\n    | ------------------------------- in this macro invocation\n+   = note: captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\n    = note: this error originates in the macro `complex_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}]}