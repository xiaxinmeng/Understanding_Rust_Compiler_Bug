{"sha": "af3f8dec5988930645bc2fbb77605965028c8032", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmM2Y4ZGVjNTk4ODkzMDY0NWJjMmZiYjc3NjA1OTY1MDI4YzgwMzI=", "commit": {"author": {"name": "Matt Stavola", "email": "mstavola9@gmail.com", "date": "2019-10-10T05:37:05Z"}, "committer": {"name": "Matt Stavola", "email": "mstavola9@gmail.com", "date": "2019-10-10T05:56:13Z"}, "message": "Delegate is_{freeze,copy,sized}_raw to is_item_raw", "tree": {"sha": "f76e9a295d7ca7c3a0127aa45791d7cacb5ba6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f76e9a295d7ca7c3a0127aa45791d7cacb5ba6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3f8dec5988930645bc2fbb77605965028c8032", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEXuhqMS0cGu+GpA4Ewo4e30SMMu0FAl2eyAgACgkQwo4e30SM\nMu01owf7B5AjuHkcK6/Rs+3VSa4iDTSX5u54CmjUb5sVRB670IplszVK2hdSqIfV\nxYNvpYzAHkbwHnSj4aQoTh7OUOfvsVlmzIHlRi5SHjKkbkcOuI2H3QkWVOq0g5Ao\nO/SilHabw7rGgI+FYlO346rPq+Fhv7dSdjURjEehctN+J35JQHVzZq4QK0unWyS9\n6fl2ttNozcjdG03B2QetsxBmmf+ZYxBD9WpWXO/K7Tphn+MbbsuousWqutKUvEwp\ne8lx8kGusA9Jdgz4p+1uH6pjLHT4fi04//Ttz/TEZYPx1qU52TMi3iiXPME5AhpJ\nCTC3q24+I9Gjhbusi1UhphlKKVx8Kg==\n=mVTk\n-----END PGP SIGNATURE-----", "payload": "tree f76e9a295d7ca7c3a0127aa45791d7cacb5ba6ee\nparent aa45e032d96f1785581d336170e6dc35d5f1cb65\nauthor Matt Stavola <mstavola9@gmail.com> 1570685825 -0700\ncommitter Matt Stavola <mstavola9@gmail.com> 1570686973 -0700\n\nDelegate is_{freeze,copy,sized}_raw to is_item_raw\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3f8dec5988930645bc2fbb77605965028c8032", "html_url": "https://github.com/rust-lang/rust/commit/af3f8dec5988930645bc2fbb77605965028c8032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3f8dec5988930645bc2fbb77605965028c8032/comments", "author": {"login": "mbStavola", "id": 155693, "node_id": "MDQ6VXNlcjE1NTY5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/155693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbStavola", "html_url": "https://github.com/mbStavola", "followers_url": "https://api.github.com/users/mbStavola/followers", "following_url": "https://api.github.com/users/mbStavola/following{/other_user}", "gists_url": "https://api.github.com/users/mbStavola/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbStavola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbStavola/subscriptions", "organizations_url": "https://api.github.com/users/mbStavola/orgs", "repos_url": "https://api.github.com/users/mbStavola/repos", "events_url": "https://api.github.com/users/mbStavola/events{/privacy}", "received_events_url": "https://api.github.com/users/mbStavola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbStavola", "id": 155693, "node_id": "MDQ6VXNlcjE1NTY5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/155693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbStavola", "html_url": "https://github.com/mbStavola", "followers_url": "https://api.github.com/users/mbStavola/followers", "following_url": "https://api.github.com/users/mbStavola/following{/other_user}", "gists_url": "https://api.github.com/users/mbStavola/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbStavola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbStavola/subscriptions", "organizations_url": "https://api.github.com/users/mbStavola/orgs", "repos_url": "https://api.github.com/users/mbStavola/repos", "events_url": "https://api.github.com/users/mbStavola/events{/privacy}", "received_events_url": "https://api.github.com/users/mbStavola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa45e032d96f1785581d336170e6dc35d5f1cb65", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa45e032d96f1785581d336170e6dc35d5f1cb65", "html_url": "https://github.com/rust-lang/rust/commit/aa45e032d96f1785581d336170e6dc35d5f1cb65"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "e5885ce3fa3bbd25b033f0a687795c00ba10889a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/af3f8dec5988930645bc2fbb77605965028c8032/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3f8dec5988930645bc2fbb77605965028c8032/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=af3f8dec5988930645bc2fbb77605965028c8032", "patch": "@@ -1017,34 +1017,25 @@ impl<'tcx> ty::TyS<'tcx> {\n }\n \n fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::CopyTraitLangItem, None);\n-    tcx.infer_ctxt()\n-        .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n-            &infcx,\n-            param_env,\n-            ty,\n-            trait_def_id,\n-            DUMMY_SP,\n-        ))\n+    is_item_raw(tcx, query, lang_items::CopyTraitLangItem)\n }\n \n fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n-    tcx.infer_ctxt()\n-        .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n-            &infcx,\n-            param_env,\n-            ty,\n-            trait_def_id,\n-            DUMMY_SP,\n-        ))\n+    is_item_raw(tcx, query, lang_items::SizedTraitLangItem)\n+\n }\n \n fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+    is_item_raw(tcx, query, lang_items::FreezeTraitLangItem)\n+}\n+\n+fn is_item_raw<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    item: LangItem\n+) -> bool {\n     let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::FreezeTraitLangItem, None);\n+    let trait_def_id = tcx.require_lang_item(item, None);\n     tcx.infer_ctxt()\n         .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n             &infcx,"}]}