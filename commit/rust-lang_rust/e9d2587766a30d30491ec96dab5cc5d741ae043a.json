{"sha": "e9d2587766a30d30491ec96dab5cc5d741ae043a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZDI1ODc3NjZhMzBkMzA0OTFlYzk2ZGFiNWNjNWQ3NDFhZTA0M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-22T01:12:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-22T01:12:26Z"}, "message": "Auto merge of #28364 - petrochenkov:usegate, r=alexcrichton\n\nCloses https://github.com/rust-lang/rust/issues/28075\r\nCloses https://github.com/rust-lang/rust/issues/28388\r\n\r\nr? @eddyb \r\ncc @brson", "tree": {"sha": "3c4f5ef22230bb3f67652a0e287a77b7aa39a0d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4f5ef22230bb3f67652a0e287a77b7aa39a0d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9d2587766a30d30491ec96dab5cc5d741ae043a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d2587766a30d30491ec96dab5cc5d741ae043a", "html_url": "https://github.com/rust-lang/rust/commit/e9d2587766a30d30491ec96dab5cc5d741ae043a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9d2587766a30d30491ec96dab5cc5d741ae043a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e", "html_url": "https://github.com/rust-lang/rust/commit/f93ab64d4a1a7ee91759a1594ab2a426b6cc657e"}, {"sha": "b44cb01bd73b32ffe046b4dcfa549a954d139ab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44cb01bd73b32ffe046b4dcfa549a954d139ab2", "html_url": "https://github.com/rust-lang/rust/commit/b44cb01bd73b32ffe046b4dcfa549a954d139ab2"}], "stats": {"total": 267, "additions": 209, "deletions": 58}, "files": [{"sha": "66de5d7bea84eab0cacb0571ffd32dc1dcc17d55", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -100,7 +100,7 @@\n #![cfg_attr(stage0, feature(alloc_system))]\n #![cfg_attr(not(stage0), feature(needs_allocator))]\n \n-#![cfg_attr(test, feature(test, rustc_private))]\n+#![cfg_attr(test, feature(test, rustc_private, box_heap))]\n \n #[cfg(stage0)]\n extern crate alloc_system;"}, {"sha": "34bd1345fcb3b24bac59adea1ef5c4cb95cbb18c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -38,6 +38,8 @@\n #![feature(core_intrinsics)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n+#![feature(fmt_internals)]\n+#![feature(fmt_radix)]\n #![feature(heap_api)]\n #![feature(iter_order)]\n #![feature(iter_arith)]\n@@ -47,6 +49,8 @@\n #![feature(oom)]\n #![feature(pattern)]\n #![feature(ptr_as_ref)]\n+#![feature(ref_slice)]\n+#![feature(slice_bytes)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(step_by)]"}, {"sha": "23c21a732b5202085b2ed2b40181e1fea7a60457", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -38,6 +38,7 @@ use slice::SliceConcatExt;\n use boxed::Box;\n \n pub use core::str::{FromStr, Utf8Error};\n+#[allow(deprecated)]\n pub use core::str::{Lines, LinesAny, CharRange};\n pub use core::str::{Split, RSplit};\n pub use core::str::{SplitN, RSplitN};"}, {"sha": "d3392c02b6f3b75aaea94df6c6532e0db88338d9", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -767,6 +767,11 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n         hir_visit::walk_path(self, p);\n     }\n \n+    fn visit_path_list_item(&mut self, prefix: &hir::Path, item: &hir::PathListItem) {\n+        run_lints!(self, check_path_list_item, late_passes, item);\n+        hir_visit::walk_path_list_item(self, prefix, item);\n+    }\n+\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         run_lints!(self, check_attribute, late_passes, attr);\n     }\n@@ -915,6 +920,11 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n         ast_visit::walk_path(self, p);\n     }\n \n+    fn visit_path_list_item(&mut self, prefix: &ast::Path, item: &ast::PathListItem) {\n+        run_lints!(self, check_path_list_item, early_passes, item);\n+        ast_visit::walk_path_list_item(self, prefix, item);\n+    }\n+\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         run_lints!(self, check_attribute, early_passes, attr);\n     }"}, {"sha": "08d1b445690d2338c0b809576cc9a18279afdb3d", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -161,6 +161,7 @@ pub trait LateLintPass: LintPass {\n     fn check_lifetime_def(&mut self, _: &LateContext, _: &hir::LifetimeDef) { }\n     fn check_explicit_self(&mut self, _: &LateContext, _: &hir::ExplicitSelf) { }\n     fn check_path(&mut self, _: &LateContext, _: &hir::Path, _: ast::NodeId) { }\n+    fn check_path_list_item(&mut self, _: &LateContext, _: &hir::PathListItem) { }\n     fn check_attribute(&mut self, _: &LateContext, _: &ast::Attribute) { }\n \n     /// Called when entering a syntax node that can have lint attributes such\n@@ -206,6 +207,7 @@ pub trait EarlyLintPass: LintPass {\n     fn check_lifetime_def(&mut self, _: &EarlyContext, _: &ast::LifetimeDef) { }\n     fn check_explicit_self(&mut self, _: &EarlyContext, _: &ast::ExplicitSelf) { }\n     fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }\n+    fn check_path_list_item(&mut self, _: &EarlyContext, _: &ast::PathListItem) { }\n     fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }\n \n     /// Called when entering a syntax node that can have lint attributes such"}, {"sha": "e077d6d35c74f8e32f5c01f9bcc552563fe61c81", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -279,6 +279,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         visit::walk_path(self, path);\n     }\n \n+    fn visit_path_list_item(&mut self, path: &hir::Path, item: &hir::PathListItem) {\n+        self.lookup_and_handle_definition(&item.node.id());\n+        visit::walk_path_list_item(self, path, item);\n+    }\n+\n     fn visit_item(&mut self, _: &hir::Item) {\n         // Do not recurse into items. These items will be added to the\n         // worklist and recursed into manually if necessary."}, {"sha": "c8ed90ec5d11b407aa93daf9c604c6cbf7599d4d", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -355,6 +355,12 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n         visit::walk_path(self, path)\n     }\n \n+    fn visit_path_list_item(&mut self, prefix: &hir::Path, item: &hir::PathListItem) {\n+        check_path_list_item(self.tcx, item,\n+                   &mut |id, sp, stab| self.check(id, sp, stab));\n+        visit::walk_path_list_item(self, prefix, item)\n+    }\n+\n     fn visit_pat(&mut self, pat: &hir::Pat) {\n         check_pat(self.tcx, pat,\n                   &mut |id, sp, stab| self.check(id, sp, stab));\n@@ -470,7 +476,17 @@ pub fn check_path(tcx: &ty::ctxt, path: &hir::Path, id: ast::NodeId,\n         }\n         None => {}\n     }\n+}\n \n+pub fn check_path_list_item(tcx: &ty::ctxt, item: &hir::PathListItem,\n+                  cb: &mut FnMut(DefId, Span, &Option<&Stability>)) {\n+    match tcx.def_map.borrow().get(&item.node.id()).map(|d| d.full_def()) {\n+        Some(def::DefPrimTy(..)) => {}\n+        Some(def) => {\n+            maybe_do_stability_check(tcx, def.def_id(), item.span, cb);\n+        }\n+        None => {}\n+    }\n }\n \n pub fn check_pat(tcx: &ty::ctxt, pat: &hir::Pat,"}, {"sha": "27d63d8a539af161d263a99821ad293e0279adaa", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -423,6 +423,10 @@ mod svh_visitor {\n             SawPath.hash(self.st); visit::walk_path(self, path)\n         }\n \n+        fn visit_path_list_item(&mut self, prefix: &Path, item: &'v PathListItem) {\n+            SawPath.hash(self.st); visit::walk_path_list_item(self, prefix, item)\n+        }\n+\n         fn visit_block(&mut self, b: &Block) {\n             SawBlock.hash(self.st); visit::walk_block(self, b)\n         }"}, {"sha": "8f5208d3ef1192cfe362d84bafcde2da4b4c5516", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -121,6 +121,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_path(&mut self, path: &'v Path, _id: NodeId) {\n         walk_path(self, path)\n     }\n+    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) {\n+        walk_path_list_item(self, prefix, item)\n+    }\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n@@ -203,26 +206,20 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemExternCrate(..) => {}\n         ItemUse(ref vp) => {\n             match vp.node {\n-                ViewPathSimple(ident, ref path) => {\n-                    visitor.visit_ident(vp.span, ident);\n+                ViewPathSimple(_ident, ref path) => {\n                     visitor.visit_path(path, item.id);\n                 }\n                 ViewPathGlob(ref path) => {\n                     visitor.visit_path(path, item.id);\n                 }\n                 ViewPathList(ref prefix, ref list) => {\n-                    for id in list {\n-                        match id.node {\n-                            PathListIdent { name, .. } => {\n-                                visitor.visit_ident(id.span, name);\n-                            }\n-                            PathListMod { .. } => ()\n+                    if !list.is_empty() {\n+                        for item in list {\n+                            visitor.visit_path_list_item(prefix, item)\n                         }\n+                    } else {\n+                        visitor.visit_path(prefix, item.id);\n                     }\n-\n-                    // Note that the `prefix` here is not a complete\n-                    // path, so we don't use `visit_path`.\n-                    walk_path(visitor, prefix);\n                 }\n             }\n         }\n@@ -400,6 +397,17 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     }\n }\n \n+pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V, prefix: &'v Path,\n+                                               item: &'v PathListItem) {\n+    for segment in &prefix.segments {\n+        visitor.visit_path_segment(prefix.span, segment);\n+    }\n+\n+    if let PathListIdent { name, .. } = item.node {\n+        visitor.visit_ident(item.span, name);\n+    }\n+}\n+\n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {"}, {"sha": "b011658d942a1bdb3e1b1e0b7bbc4d5174b2b0f0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -1386,6 +1386,13 @@ impl LateLintPass for Stability {\n                                           &stab.map(|s| hir_to_ast_stability(s)).as_ref()));\n     }\n \n+    fn check_path_list_item(&mut self, cx: &LateContext, item: &hir::PathListItem) {\n+        stability::check_path_list_item(cx.tcx, item,\n+                                         &mut |id, sp, stab|\n+                                           self.lint(cx, id, sp,\n+                                                &stab.map(|s| hir_to_ast_stability(s)).as_ref()));\n+    }\n+\n     fn check_pat(&mut self, cx: &LateContext, pat: &hir::Pat) {\n         stability::check_pat(cx.tcx, pat,\n                              &mut |id, sp, stab|"}, {"sha": "fb43d75c347e3e6e787a2c8bfa3e763c652bab97", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -859,23 +859,6 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        if let hir::ItemUse(ref vpath) = item.node {\n-            if let hir::ViewPathList(ref prefix, ref list) = vpath.node {\n-                for pid in list {\n-                    match pid.node {\n-                        hir::PathListIdent { id, name, .. } => {\n-                            debug!(\"privacy - ident item {}\", id);\n-                            self.check_path(pid.span, id, name.name);\n-                        }\n-                        hir::PathListMod { id, .. } => {\n-                            debug!(\"privacy - mod item {}\", id);\n-                            let name = prefix.segments.last().unwrap().identifier.name;\n-                            self.check_path(pid.span, id, name);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n         let orig_curitem = replace(&mut self.curitem, item.id);\n         visit::walk_item(self, item);\n         self.curitem = orig_curitem;\n@@ -997,8 +980,22 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_path(&mut self, path: &hir::Path, id: ast::NodeId) {\n-        self.check_path(path.span, id, path.segments.last().unwrap().identifier.name);\n-        visit::walk_path(self, path);\n+        if !path.segments.is_empty() {\n+            self.check_path(path.span, id, path.segments.last().unwrap().identifier.name);\n+            visit::walk_path(self, path);\n+        }\n+    }\n+\n+    fn visit_path_list_item(&mut self, prefix: &hir::Path, item: &hir::PathListItem) {\n+        let name = if let hir::PathListIdent { name, .. } = item.node {\n+            name.name\n+        } else if !prefix.segments.is_empty() {\n+            prefix.segments.last().unwrap().identifier.name\n+        } else {\n+            self.tcx.sess.bug(\"`self` import in an import list with empty prefix\");\n+        };\n+        self.check_path(item.span, item.node.id(), name);\n+        visit::walk_path_list_item(self, prefix, item);\n     }\n }\n "}, {"sha": "6159ba5b79e0e6cd45abcf3e22d0f733dba22a5b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -2210,23 +2210,39 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             ItemUse(ref view_path) => {\n                 // check for imports shadowing primitive types\n-                let check_rename = |id, ident: Ident| {\n-                    match self.def_map.borrow().get(&id).map(|d| d.full_def()) {\n+                let check_rename = |this: &Self, id, ident: Ident| {\n+                    match this.def_map.borrow().get(&id).map(|d| d.full_def()) {\n                         Some(DefTy(..)) | Some(DefStruct(..)) | Some(DefTrait(..)) | None => {\n-                            self.check_if_primitive_type_name(ident.name, item.span);\n+                            this.check_if_primitive_type_name(ident.name, item.span);\n                         }\n                         _ => {}\n                     }\n                 };\n \n                 match view_path.node {\n                     hir::ViewPathSimple(ident, _) => {\n-                        check_rename(item.id, ident);\n+                        check_rename(self, item.id, ident);\n                     }\n-                    hir::ViewPathList(_, ref items) => {\n+                    hir::ViewPathList(ref prefix, ref items) => {\n                         for item in items {\n                             if let Some(ident) = item.node.rename() {\n-                                check_rename(item.node.id(), ident);\n+                                check_rename(self, item.node.id(), ident);\n+                            }\n+                        }\n+\n+                        // Resolve prefix of an import with empty braces (issue #28388)\n+                        if items.is_empty() && !prefix.segments.is_empty() {\n+                            match self.resolve_crate_relative_path(prefix.span,\n+                                                                   &prefix.segments,\n+                                                                   TypeNS) {\n+                                Some((def, lp)) => self.record_def(item.id,\n+                                                   PathResolution::new(def, lp, 0)),\n+                                None => {\n+                                    resolve_error(self,\n+                                                  prefix.span,\n+                                                  ResolutionError::FailedToResolve(\n+                                                      &path_names_to_string(prefix, 0)));\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "f4f4c9dfc24fb172ebc6b3a3dde4a5214b65d5a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -127,6 +127,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_path(&mut self, path: &'v Path, _id: ast::NodeId) {\n         walk_path(self, path)\n     }\n+    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) {\n+        walk_path_list_item(self, prefix, item)\n+    }\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n@@ -209,33 +212,20 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemExternCrate(..) => {}\n         ItemUse(ref vp) => {\n             match vp.node {\n-                ViewPathSimple(ident, ref path) => {\n-                    visitor.visit_ident(vp.span, ident);\n+                ViewPathSimple(_ident, ref path) => {\n                     visitor.visit_path(path, item.id);\n                 }\n                 ViewPathGlob(ref path) => {\n                     visitor.visit_path(path, item.id);\n                 }\n                 ViewPathList(ref prefix, ref list) => {\n-                    for id in list {\n-                        match id.node {\n-                            PathListIdent { name, rename, .. } => {\n-                                visitor.visit_ident(id.span, name);\n-                                if let Some(ident) = rename {\n-                                    visitor.visit_ident(id.span, ident);\n-                                }\n-                            }\n-                            PathListMod { rename, .. } => {\n-                                if let Some(ident) = rename {\n-                                    visitor.visit_ident(id.span, ident);\n-                                }\n-                            }\n+                    if !list.is_empty() {\n+                        for item in list {\n+                            visitor.visit_path_list_item(prefix, item)\n                         }\n+                    } else {\n+                        visitor.visit_path(prefix, item.id);\n                     }\n-\n-                    // Note that the `prefix` here is not a complete\n-                    // path, so we don't use `visit_path`.\n-                    walk_path(visitor, prefix);\n                 }\n             }\n         }\n@@ -417,6 +407,17 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     }\n }\n \n+pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V, prefix: &'v Path,\n+                                               item: &'v PathListItem) {\n+    for segment in &prefix.segments {\n+        visitor.visit_path_segment(prefix.span, segment);\n+    }\n+\n+    if let PathListIdent { name, .. } = item.node {\n+        visitor.visit_ident(item.span, name);\n+    }\n+}\n+\n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {"}, {"sha": "d75f5f606a01a2d9e2a0f3f2451645f230b4afb4", "filename": "src/test/compile-fail/issue-28075.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unstable entities should be caught in import lists\n+\n+// aux-build:lint_stability.rs\n+\n+#![allow(unused_imports)]\n+\n+extern crate lint_stability;\n+\n+use lint_stability::{unstable, deprecated}; //~ ERROR use of unstable library feature 'test_feature'\n+//~^ WARNING use of deprecated item\n+\n+use lint_stability::unstable::{self as u}; //~ ERROR use of unstable library feature 'test_feature'\n+\n+fn main() {\n+}"}, {"sha": "ef97b400b00a5009bdd4cf969509328bfb95722c", "filename": "src/test/compile-fail/issue-28388-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n+\n+use foo::{}; //~ ERROR failed to resolve. foo\n+\n+fn main() {}"}, {"sha": "837dc67c804eb65c01c4d15e16598355d09b56a4", "filename": "src/test/compile-fail/issue-28388-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-2.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n+\n+mod m {\n+    mod n {}\n+}\n+\n+use m::n::{}; //~ ERROR module `n` is private\n+\n+fn main() {}"}, {"sha": "0cb669f5f8fb45d844907790a1ba18b4fccca0bf", "filename": "src/test/compile-fail/issue-28388-3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n+\n+// aux-build:lint_stability.rs\n+\n+extern crate lint_stability;\n+\n+use lint_stability::UnstableStruct::{}; //~ ERROR use of unstable library feature 'test_feature'\n+use lint_stability::StableStruct::{}; // OK\n+\n+fn main() {}"}, {"sha": "3febacca73f25afff69f538881efa2fb25f70606", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d2587766a30d30491ec96dab5cc5d741ae043a/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=e9d2587766a30d30491ec96dab5cc5d741ae043a", "patch": "@@ -14,7 +14,8 @@\n #![feature(foo)] //~ ERROR unused or unknown feature\n \n extern crate lint_output_format; //~ ERROR use of unstable library feature\n-use lint_output_format::{foo, bar};\n+use lint_output_format::{foo, bar}; //~ ERROR use of unstable library feature\n+//~^ WARNING use of deprecated item,\n \n fn main() {\n     let _x = foo(); //~ WARNING #[warn(deprecated)] on by default"}]}