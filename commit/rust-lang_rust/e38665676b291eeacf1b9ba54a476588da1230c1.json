{"sha": "e38665676b291eeacf1b9ba54a476588da1230c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODY2NTY3NmIyOTFlZWFjZjFiOWJhNTRhNDc2NTg4ZGExMjMwYzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T15:26:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-07T12:59:31Z"}, "message": "Rustfmt", "tree": {"sha": "251ad6b1eaa28a6bea2ba56aad527dd966a05f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251ad6b1eaa28a6bea2ba56aad527dd966a05f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38665676b291eeacf1b9ba54a476588da1230c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38665676b291eeacf1b9ba54a476588da1230c1", "html_url": "https://github.com/rust-lang/rust/commit/e38665676b291eeacf1b9ba54a476588da1230c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38665676b291eeacf1b9ba54a476588da1230c1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d01e7c6b3c646a183f9f0caab53b696b3feea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d01e7c6b3c646a183f9f0caab53b696b3feea8", "html_url": "https://github.com/rust-lang/rust/commit/91d01e7c6b3c646a183f9f0caab53b696b3feea8"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "0f30c2c020de75a225356a567d6d1be386435ffc", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e38665676b291eeacf1b9ba54a476588da1230c1/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38665676b291eeacf1b9ba54a476588da1230c1/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=e38665676b291eeacf1b9ba54a476588da1230c1", "patch": "@@ -22,10 +22,11 @@ impl MetadataLoader for LlvmMetadataLoader {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n         // internally to read the file. We also avoid even using a memcpy by\n         // just keeping the archive along while the metadata is in use.\n-        let archive = ArchiveRO::open(filename).map(|ar| OwningRef::new(Box::new(ar))).map_err(|e| {\n-            debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n-            format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n-        })?;\n+        let archive =\n+            ArchiveRO::open(filename).map(|ar| OwningRef::new(Box::new(ar))).map_err(|e| {\n+                debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n+                format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n+            })?;\n         let buf: OwningRef<_, [u8]> = archive.try_map(|ar| {\n             ar.iter()\n                 .filter_map(|s| s.ok())\n@@ -44,9 +45,10 @@ impl MetadataLoader for LlvmMetadataLoader {\n             let buf = path_to_c_string(filename);\n             let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n                 .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n-            let of = ObjectFile::new(mb).map(|of| OwningRef::new(Box::new(of))).ok_or_else(|| {\n-                format!(\"provided path not an object file: '{}'\", filename.display())\n-            })?;\n+            let of =\n+                ObjectFile::new(mb).map(|of| OwningRef::new(Box::new(of))).ok_or_else(|| {\n+                    format!(\"provided path not an object file: '{}'\", filename.display())\n+                })?;\n             let buf = of.try_map(|of| search_meta_section(of, target, filename))?;\n             Ok(rustc_erase_owner!(buf))\n         }"}]}