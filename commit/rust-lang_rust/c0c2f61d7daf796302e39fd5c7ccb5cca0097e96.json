{"sha": "c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzJmNjFkN2RhZjc5NjMwMmUzOWZkNWM3Y2NiNWNjYTAwOTdlOTY=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-04T13:28:58Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-04T13:28:58Z"}, "message": "Merge pull request #736 from mcarton/vec\n\nUpdate to rustc 1.9.0-nightly (e91f889ed 2016-03-03)", "tree": {"sha": "63f4edb536d3bd72a9d075b1b43f225691ceba00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f4edb536d3bd72a9d075b1b43f225691ceba00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "html_url": "https://github.com/rust-lang/rust/commit/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdda6a2d3ee6e05d7d494ad051911dcd85e1bbd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdda6a2d3ee6e05d7d494ad051911dcd85e1bbd5", "html_url": "https://github.com/rust-lang/rust/commit/bdda6a2d3ee6e05d7d494ad051911dcd85e1bbd5"}, {"sha": "026d443e1e091aee21b6f5fd4cfb13058427039a", "url": "https://api.github.com/repos/rust-lang/rust/commits/026d443e1e091aee21b6f5fd4cfb13058427039a", "html_url": "https://github.com/rust-lang/rust/commit/026d443e1e091aee21b6f5fd4cfb13058427039a"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "bee10dccd6f6ce30ca2ff91244f85a677c41ed61", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.45\"\n+version = \"0.0.46\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\","}, {"sha": "7034f87f59fa1ea9463ca0e8baf59b554560053f", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "patch": "@@ -116,7 +116,7 @@ impl<'a> Visitor<'a> for MatchArmCounter {\n     }\n }\n \n-struct DivergenceCounter<'a, 'tcx: 'a>(u64, &'a ty::ctxt<'tcx>);\n+struct DivergenceCounter<'a, 'tcx: 'a>(u64, &'a ty::TyCtxt<'tcx>);\n \n impl<'a, 'b, 'tcx> Visitor<'a> for DivergenceCounter<'b, 'tcx> {\n     fn visit_expr(&mut self, e: &'a Expr) {"}, {"sha": "dda552bc8f9bc84671dc512d75749139498ad793", "filename": "src/vec.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/src%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96/src%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvec.rs?ref=c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "patch": "@@ -3,7 +3,7 @@ use rustc::middle::ty::TypeVariants;\n use rustc_front::hir::*;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n-use utils::{BOX_NEW_PATH, VEC_FROM_ELEM_PATH};\n+use utils::VEC_FROM_ELEM_PATH;\n use utils::{is_expn_of, match_path, snippet, span_lint_and_then};\n \n /// **What it does:** This lint warns about using `&vec![..]` when using `&[..]` would be possible.\n@@ -33,9 +33,7 @@ impl LintPass for UselessVec {\n \n impl LateLintPass for UselessVec {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        unexpand_vec(cx, expr);\n-\n-        // search for `&!vec[_]` expressions where the adjusted type is `&[_]`\n+        // search for `&vec![_]` expressions where the adjusted type is `&[_]`\n         if_let_chain!{[\n             let TypeVariants::TyRef(_, ref ty) = cx.tcx.expr_ty_adjusted(expr).sty,\n             let TypeVariants::TySlice(..) = ty.ty.sty,\n@@ -71,7 +69,7 @@ impl LateLintPass for UselessVec {\n \n /// Represent the pre-expansion arguments of a `vec!` invocation.\n pub enum VecArgs<'a> {\n-    /// `vec![elem, len]`\n+    /// `vec![elem; len]`\n     Repeat(&'a P<Expr>, &'a P<Expr>),\n     /// `vec![a, b, c]`\n     Vec(&'a [P<Expr>]),\n@@ -91,10 +89,8 @@ pub fn unexpand_vec<'e>(cx: &LateContext, expr: &'e Expr) -> Option<VecArgs<'e>>\n         else if match_path(path, &[\"into_vec\"]) && args.len() == 1 {\n             // `vec![a, b, c]` case\n             if_let_chain!{[\n-                let ExprCall(ref fun, ref args) = args[0].node,\n-                let ExprPath(_, ref path) = fun.node,\n-                match_path(path, &BOX_NEW_PATH) && args.len() == 1,\n-                let ExprVec(ref args) = args[0].node\n+                let ExprBox(ref boxed) = args[0].node,\n+                let ExprVec(ref args) = boxed.node\n             ], {\n                 return Some(VecArgs::Vec(&*args));\n             }}"}]}