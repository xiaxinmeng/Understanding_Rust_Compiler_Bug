{"sha": "27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTc3ZTQxZmMyOGM0NWFmOWJkMjNjZDdlZWZiOWRlYzZlN2VhYjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-13T03:33:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-14T21:58:01Z"}, "message": "libuuid: Remove all uses of `~str` from `libuuid`.", "tree": {"sha": "31c66b9978c6c343f57399207c282e6b5c4a1327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c66b9978c6c343f57399207c282e6b5c4a1327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "html_url": "https://github.com/rust-lang/rust/commit/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "504335ae5aeb2f38b4b8281f313eceff066c1fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/504335ae5aeb2f38b4b8281f313eceff066c1fb2", "html_url": "https://github.com/rust-lang/rust/commit/504335ae5aeb2f38b4b8281f313eceff066c1fb2"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "d75f967a229b1990f43e9e9b1599f0226cf1966c", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27977e41fc28c45af9bd23cd7eefb9dec6e7eab0/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=27977e41fc28c45af9bd23cd7eefb9dec6e7eab0", "patch": "@@ -322,20 +322,20 @@ impl Uuid {\n     /// Returns the UUID as a string of 16 hexadecimal digits\n     ///\n     /// Example: `936DA01F9ABD4d9d80C702AF85C822A8`\n-    pub fn to_simple_str(&self) -> ~str {\n+    pub fn to_simple_str(&self) -> StrBuf {\n         let mut s: Vec<u8> = Vec::from_elem(32, 0u8);\n         for i in range(0u, 16u) {\n             let digit = format!(\"{:02x}\", self.bytes[i] as uint);\n             *s.get_mut(i*2+0) = digit[0];\n             *s.get_mut(i*2+1) = digit[1];\n         }\n-        str::from_utf8(s.as_slice()).unwrap().to_str()\n+        str::from_utf8(s.as_slice()).unwrap().to_strbuf()\n     }\n \n     /// Returns a string of hexadecimal digits, separated into groups with a hyphen.\n     ///\n     /// Example: `550e8400-e29b-41d4-a716-446655440000`\n-    pub fn to_hyphenated_str(&self) -> ~str {\n+    pub fn to_hyphenated_str(&self) -> StrBuf {\n         use std::mem::{to_be16, to_be32};\n         // Convert to field-based struct as it matches groups in output.\n         // Ensure fields are in network byte order, as per RFC.\n@@ -346,8 +346,8 @@ impl Uuid {\n         uf.data1 = to_be32(uf.data1);\n         uf.data2 = to_be16(uf.data2);\n         uf.data3 = to_be16(uf.data3);\n-        let s = format!(\"{:08x}-{:04x}-{:04x}-{:02x}{:02x}-\\\n-                         {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}\",\n+        let s = format_strbuf!(\"{:08x}-{:04x}-{:04x}-{:02x}{:02x}-\\\n+                                {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}\",\n             uf.data1,\n             uf.data2, uf.data3,\n             uf.data4[0], uf.data4[1],\n@@ -361,8 +361,8 @@ impl Uuid {\n     /// This is the same as the hyphenated format, but with the \"urn:uuid:\" prefix.\n     ///\n     /// Example: `urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4`\n-    pub fn to_urn_str(&self) -> ~str {\n-        \"urn:uuid:\" + self.to_hyphenated_str()\n+    pub fn to_urn_str(&self) -> StrBuf {\n+        format_strbuf!(\"urn:uuid:{}\", self.to_hyphenated_str())\n     }\n \n     /// Parses a UUID from a string of hexadecimal digits with optional hyphens\n@@ -493,7 +493,7 @@ impl TotalEq for Uuid {}\n impl<T: Encoder<E>, E> Encodable<T, E> for Uuid {\n     /// Encode a UUID as a hypenated string\n     fn encode(&self, e: &mut T) -> Result<(), E> {\n-        e.emit_str(self.to_hyphenated_str())\n+        e.emit_str(self.to_hyphenated_str().as_slice())\n     }\n }\n \n@@ -647,7 +647,7 @@ mod test {\n         let s = uuid1.to_simple_str();\n \n         assert!(s.len() == 32);\n-        assert!(s.chars().all(|c| c.is_digit_radix(16)));\n+        assert!(s.as_slice().chars().all(|c| c.is_digit_radix(16)));\n     }\n \n     #[test]\n@@ -656,7 +656,7 @@ mod test {\n         let s = uuid1.to_str();\n \n         assert!(s.len() == 32);\n-        assert!(s.chars().all(|c| c.is_digit_radix(16)));\n+        assert!(s.as_slice().chars().all(|c| c.is_digit_radix(16)));\n     }\n \n     #[test]\n@@ -665,18 +665,20 @@ mod test {\n         let s = uuid1.to_hyphenated_str();\n \n         assert!(s.len() == 36);\n-        assert!(s.chars().all(|c| c.is_digit_radix(16) || c == '-'));\n+        assert!(s.as_slice().chars().all(|c| c.is_digit_radix(16) || c == '-'));\n     }\n \n     #[test]\n     fn test_to_urn_str() {\n         let uuid1 = Uuid::new_v4();\n         let ss = uuid1.to_urn_str();\n-        let s = ss.slice(9, ss.len());\n+        let s = ss.as_slice().slice(9, ss.len());\n \n-        assert!(ss.starts_with(\"urn:uuid:\"));\n+        assert!(ss.as_slice().starts_with(\"urn:uuid:\"));\n         assert!(s.len() == 36);\n-        assert!(s.chars().all(|c| c.is_digit_radix(16) || c == '-'));\n+        assert!(s.as_slice()\n+                 .chars()\n+                 .all(|c| c.is_digit_radix(16) || c == '-'));\n     }\n \n     #[test]\n@@ -686,7 +688,8 @@ mod test {\n         let hs = uuid1.to_hyphenated_str();\n         let ss = uuid1.to_str();\n \n-        let hsn = str::from_chars(hs.chars()\n+        let hsn = str::from_chars(hs.as_slice()\n+                                    .chars()\n                                     .filter(|&c| c != '-')\n                                     .collect::<Vec<char>>()\n                                     .as_slice());\n@@ -699,7 +702,7 @@ mod test {\n         let uuid = Uuid::new_v4();\n \n         let hs = uuid.to_hyphenated_str();\n-        let uuid_hs = Uuid::parse_string(hs).unwrap();\n+        let uuid_hs = Uuid::parse_string(hs.as_slice()).unwrap();\n         assert!(uuid_hs == uuid);\n \n         let ss = uuid.to_str();\n@@ -727,7 +730,7 @@ mod test {\n \n         let u = Uuid::from_fields(d1, d2, d3, d4.as_slice());\n \n-        let expected = \"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\".to_owned();\n+        let expected = \"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\".to_strbuf();\n         let result = u.to_simple_str();\n         assert!(result == expected);\n     }\n@@ -738,7 +741,7 @@ mod test {\n                    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8 );\n \n         let u = Uuid::from_bytes(b.as_slice()).unwrap();\n-        let expected = \"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\".to_owned();\n+        let expected = \"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\".to_strbuf();\n \n         assert!(u.to_simple_str() == expected);\n     }"}]}