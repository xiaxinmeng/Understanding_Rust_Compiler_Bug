{"sha": "77dc61b5c68aacce4ab5d115b14825699ea6302b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZGM2MWI1YzY4YWFjY2U0YWI1ZDExNWIxNDgyNTY5OWVhNjMwMmI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-13T17:46:08Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-17T02:50:57Z"}, "message": "rustc: force all raw accesses to VecPerParamSpace through as_full_slice.", "tree": {"sha": "56684529f36dec17de0989d22335d5c318af2f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56684529f36dec17de0989d22335d5c318af2f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77dc61b5c68aacce4ab5d115b14825699ea6302b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77dc61b5c68aacce4ab5d115b14825699ea6302b", "html_url": "https://github.com/rust-lang/rust/commit/77dc61b5c68aacce4ab5d115b14825699ea6302b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77dc61b5c68aacce4ab5d115b14825699ea6302b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b354ae95a29a7f78059a1a9fc867dd2e8639671a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b354ae95a29a7f78059a1a9fc867dd2e8639671a", "html_url": "https://github.com/rust-lang/rust/commit/b354ae95a29a7f78059a1a9fc867dd2e8639671a"}], "stats": {"total": 137, "additions": 52, "deletions": 85}, "files": [{"sha": "1ee1dc50b717d1141ccd9d03b16ef7e77a0bd159", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'gcx, 'tcx> DeferredObligation<'tcx> {\n         // Auto trait obligations on `impl Trait`.\n         if tcx.trait_has_default_impl(predicate.def_id()) {\n             let substs = predicate.skip_binder().trait_ref.substs;\n-            if substs.types.as_slice().len() == 1 && substs.regions.is_empty() {\n+            if substs.types.as_full_slice().len() == 1 && substs.regions.is_empty() {\n                 if let ty::TyAnon(..) = predicate.skip_binder().self_ty().sty {\n                     return true;\n                 }"}, {"sha": "3a5f3d421eaf7303bb7d5617e89f19d03c666738", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -209,8 +209,8 @@ impl FlagComputation {\n     }\n \n     fn add_substs(&mut self, substs: &subst::Substs) {\n-        self.add_tys(substs.types.as_slice());\n-        for &r in &substs.regions {\n+        self.add_tys(substs.types.as_full_slice());\n+        for &r in substs.regions.as_full_slice() {\n             self.add_region(r);\n         }\n     }"}, {"sha": "708dcb30f1b8408c824d4f022c4a368a1ea20982", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -971,7 +971,7 @@ impl<'tcx> TraitPredicate<'tcx> {\n     }\n \n     pub fn input_types(&self) -> &[Ty<'tcx>] {\n-        self.trait_ref.substs.types.as_slice()\n+        self.trait_ref.substs.types.as_full_slice()\n     }\n \n     pub fn self_ty(&self) -> Ty<'tcx> {\n@@ -1113,7 +1113,7 @@ impl<'tcx> Predicate<'tcx> {\n     pub fn walk_tys(&self) -> IntoIter<Ty<'tcx>> {\n         let vec: Vec<_> = match *self {\n             ty::Predicate::Trait(ref data) => {\n-                data.0.trait_ref.substs.types.as_slice().to_vec()\n+                data.0.trait_ref.substs.types.as_full_slice().to_vec()\n             }\n             ty::Predicate::Rfc1592(ref data) => {\n                 return data.walk_tys()\n@@ -1128,7 +1128,8 @@ impl<'tcx> Predicate<'tcx> {\n                 vec![]\n             }\n             ty::Predicate::Projection(ref data) => {\n-                let trait_inputs = data.0.projection_ty.trait_ref.substs.types.as_slice();\n+                let trait_inputs = data.0.projection_ty.trait_ref.substs\n+                                       .types.as_full_slice();\n                 trait_inputs.iter()\n                             .cloned()\n                             .chain(Some(data.0.ty))\n@@ -1220,7 +1221,7 @@ impl<'tcx> TraitRef<'tcx> {\n         // now this is all the types that appear in the\n         // trait-reference, but it should eventually exclude\n         // associated types.\n-        self.substs.types.as_slice()\n+        self.substs.types.as_full_slice()\n     }\n }\n \n@@ -2864,15 +2865,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                  free_id_outlive: CodeExtent) -> Substs<'gcx> {\n         // map T => T\n         let mut types = VecPerParamSpace::empty();\n-        for def in generics.types.as_slice() {\n+        for def in generics.types.as_full_slice() {\n             debug!(\"construct_parameter_environment(): push_types_from_defs: def={:?}\",\n                     def);\n             types.push(def.space, self.global_tcx().mk_param_from_def(def));\n         }\n \n         // map bound 'a => free 'a\n         let mut regions = VecPerParamSpace::empty();\n-        for def in generics.regions.as_slice() {\n+        for def in generics.regions.as_full_slice() {\n             let region =\n                 ReFree(FreeRegion { scope: free_id_outlive,\n                                     bound_region: def.to_bound_region() });"}, {"sha": "b0f8e2e13f7e015d10e226bd57b4ff2ef609cad2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -433,7 +433,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|elem| elem.visit_with(visitor))\n+        self.as_full_slice().iter().any(|elem| elem.visit_with(visitor))\n     }\n }\n "}, {"sha": "098943dfce29adf7ed591650ea75747dd660563e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -1211,19 +1211,19 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyTrait(ref obj) => {\n                 let mut v = vec![obj.bounds.region_bound];\n                 v.extend_from_slice(obj.principal.skip_binder()\n-                                       .substs.regions.as_slice());\n+                                       .substs.regions.as_full_slice());\n                 v\n             }\n             TyEnum(_, substs) |\n             TyStruct(_, substs) |\n             TyAnon(_, substs) => {\n-                substs.regions.as_slice().to_vec()\n+                substs.regions.as_full_slice().to_vec()\n             }\n             TyClosure(_, ref substs) => {\n-                substs.func_substs.regions.as_slice().to_vec()\n+                substs.func_substs.regions.as_full_slice().to_vec()\n             }\n             TyProjection(ref data) => {\n-                data.trait_ref.substs.regions.as_slice().to_vec()\n+                data.trait_ref.substs.regions.as_full_slice().to_vec()\n             }\n             TyFnDef(..) |\n             TyFnPtr(_) |"}, {"sha": "10e7f3ad0d17f738d4b2d15dce2ff2741ab5fe5d", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -19,9 +19,6 @@ use ty::fold::{TypeFoldable, TypeFolder};\n \n use serialize::{Encodable, Encoder, Decodable, Decoder};\n use std::fmt;\n-use std::iter::IntoIterator;\n-use std::slice::Iter;\n-use std::vec::{Vec, IntoIter};\n use syntax_pos::{Span, DUMMY_SP};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -365,46 +362,34 @@ impl<T> VecPerParamSpace<T> {\n         &self.get_slice(space)[index]\n     }\n \n-    pub fn iter<'a>(&'a self) -> Iter<'a,T> {\n-        self.content.iter()\n-    }\n-\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        self.content.into_iter()\n-    }\n-\n     pub fn iter_enumerated<'a>(&'a self) -> EnumeratedItems<'a,T> {\n         EnumeratedItems::new(self)\n     }\n \n-    pub fn as_slice(&self) -> &[T] {\n+    pub fn as_full_slice(&self) -> &[T] {\n         &self.content\n     }\n \n-    pub fn into_vec(self) -> Vec<T> {\n-        self.content\n-    }\n-\n     pub fn all_vecs<P>(&self, mut pred: P) -> bool where\n         P: FnMut(&[T]) -> bool,\n     {\n         ParamSpace::all().iter().all(|&space| { pred(self.get_slice(space)) })\n     }\n \n     pub fn all<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool {\n-        self.iter().all(pred)\n+        self.as_full_slice().iter().all(pred)\n     }\n \n     pub fn any<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool {\n-        self.iter().any(pred)\n+        self.as_full_slice().iter().any(pred)\n     }\n \n     pub fn is_empty(&self) -> bool {\n         self.all_vecs(|v| v.is_empty())\n     }\n \n     pub fn map<U, P>(&self, pred: P) -> VecPerParamSpace<U> where P: FnMut(&T) -> U {\n-        let result = self.iter().map(pred).collect();\n+        let result = self.as_full_slice().iter().map(pred).collect();\n         VecPerParamSpace::new_internal(result,\n                                        self.self_limit,\n                                        self.type_limit)\n@@ -478,29 +463,11 @@ impl<'a,T> Iterator for EnumeratedItems<'a,T> {\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let size = self.vec.as_slice().len();\n+        let size = self.vec.as_full_slice().len();\n         (size, Some(size))\n     }\n }\n \n-impl<T> IntoIterator for VecPerParamSpace<T> {\n-    type Item = T;\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_vec().into_iter()\n-    }\n-}\n-\n-impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> {\n-    type Item = &'a T;\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.as_slice().into_iter()\n-    }\n-}\n-\n \n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`"}, {"sha": "3f87d80e337ddc2e5fcfb345973ed86db6400b1e", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -79,28 +79,28 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n             stack.push(mt.ty);\n         }\n         ty::TyProjection(ref data) => {\n-            push_reversed(stack, data.trait_ref.substs.types.as_slice());\n+            push_reversed(stack, data.trait_ref.substs.types.as_full_slice());\n         }\n         ty::TyTrait(box ty::TraitTy { ref principal, ref bounds }) => {\n-            push_reversed(stack, principal.substs().types.as_slice());\n+            push_reversed(stack, principal.substs().types.as_full_slice());\n             push_reversed(stack, &bounds.projection_bounds.iter().map(|pred| {\n                 pred.0.ty\n             }).collect::<Vec<_>>());\n         }\n         ty::TyEnum(_, ref substs) |\n         ty::TyStruct(_, ref substs) |\n         ty::TyAnon(_, ref substs) => {\n-            push_reversed(stack, substs.types.as_slice());\n+            push_reversed(stack, substs.types.as_full_slice());\n         }\n         ty::TyClosure(_, ref substs) => {\n-            push_reversed(stack, substs.func_substs.types.as_slice());\n+            push_reversed(stack, substs.func_substs.types.as_full_slice());\n             push_reversed(stack, &substs.upvar_tys);\n         }\n         ty::TyTuple(ref ts) => {\n             push_reversed(stack, ts);\n         }\n         ty::TyFnDef(_, substs, ref ft) => {\n-            push_reversed(stack, substs.types.as_slice());\n+            push_reversed(stack, substs.types.as_full_slice());\n             push_sig_subtypes(stack, &ft.sig);\n         }\n         ty::TyFnPtr(ref ft) => {"}, {"sha": "009e3e2433431f2d23783e684617e35969a1bf88", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -261,7 +261,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         let cause = self.cause(traits::MiscObligation);\n         self.out.extend(\n             trait_ref.substs.types\n-                            .as_slice()\n+                            .as_full_slice()\n                             .iter()\n                             .filter(|ty| !ty.has_escaping_regions())\n                             .map(|ty| traits::Obligation::new(cause.clone(),"}, {"sha": "d19eb6391820aa883b7305f558f5837754d45f90", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -515,15 +515,15 @@ fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,\n {\n     rbml_w.start_tag(tag);\n \n-    for param in &generics.types {\n+    for param in generics.types.as_full_slice() {\n         rbml_w.start_tag(tag_type_param_def);\n         tyencode::enc_type_param_def(rbml_w.writer, &ecx.ty_str_ctxt(), param);\n         rbml_w.mark_stable_position();\n         rbml_w.end_tag();\n     }\n \n     // Region parameters\n-    for param in &generics.regions {\n+    for param in generics.regions.as_full_slice() {\n         rbml_w.start_tag(tag_region_param_def);\n         tyencode::enc_region_param_def(rbml_w.writer, &ecx.ty_str_ctxt(), param);\n         rbml_w.mark_stable_position();"}, {"sha": "bb27a308f71f7d4988ce75d3ead71abd2e47da2a", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> Instance<'tcx> {\n         // and should not matter anyhow.\n         let instance_ty = scx.tcx().erase_regions(&instance_ty.ty);\n \n-        let hash = get_symbol_hash(scx, &def_path, instance_ty, substs.types.as_slice());\n+        let hash = get_symbol_hash(scx, &def_path, instance_ty, substs.types.as_full_slice());\n \n         let mut buffer = SymbolPathBuffer {\n             names: Vec::with_capacity(def_path.data.len())"}, {"sha": "1aae3b3127faa85a88eef24a965b15958591f3a7", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -358,7 +358,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                          name_to_append_suffix_to: &mut String)\n                                          -> DIArray\n     {\n-        let actual_types = param_substs.types.as_slice();\n+        let actual_types = param_substs.types.as_full_slice();\n \n         if actual_types.is_empty() {\n             return create_DIArray(DIB(cx), &[]);\n@@ -381,7 +381,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         // Again, only create type information if full debuginfo is enabled\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n-            generics.types.as_slice().iter().enumerate().map(|(i, param)| {\n+            generics.types.as_full_slice().iter().enumerate().map(|(i, param)| {\n                 let actual_type = cx.tcx().normalize_associated_type(&actual_types[i]);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(param.name.as_str().as_bytes()).unwrap();"}, {"sha": "4bca091ef95acb689bc1869734e314ebcfe711e8", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -181,7 +181,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         output.push('<');\n \n-        for &type_parameter in &substs.types {\n+        for &type_parameter in substs.types.as_full_slice() {\n             push_debuginfo_type_name(cx, type_parameter, true, output);\n             output.push_str(\", \");\n         }"}, {"sha": "663c5167d14924b525a13a073f36646d44f29a58", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n impl<'tcx> Instance<'tcx> {\n     pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>)\n                -> Instance<'tcx> {\n-        assert!(substs.regions.iter().all(|&r| r == ty::ReErased));\n+        assert!(substs.regions.as_full_slice().iter().all(|&r| r == ty::ReErased));\n         Instance { def: def_id, substs: substs }\n     }\n     pub fn mono<'a>(scx: &SharedCrateContext<'a, 'tcx>, def_id: DefId) -> Instance<'tcx> {"}, {"sha": "c1149279b4dddcf3b5ce336cff5fb875a414abc8", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -570,7 +570,7 @@ fn push_type_params<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     output.push('<');\n \n-    for &type_parameter in types {\n+    for &type_parameter in types.as_full_slice() {\n         push_unique_type_name(tcx, type_parameter, output);\n         output.push_str(\", \");\n     }"}, {"sha": "b82ce2f5bc4e04abd2ef1f494144a421ffd80546", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -888,7 +888,8 @@ fn check_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         // `{Self}` is allowed\n                         Position::ArgumentNamed(s) if s == \"Self\" => (),\n                         // So is `{A}` if A is a type parameter\n-                        Position::ArgumentNamed(s) => match types.iter().find(|t| {\n+                        Position::ArgumentNamed(s) => match types.as_full_slice()\n+                                                                 .iter().find(|t| {\n                             t.name.as_str() == s\n                         }) {\n                             Some(_) => (),\n@@ -1895,7 +1896,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Registers obligations that all types appearing in `substs` are well-formed.\n     pub fn add_wf_bounds(&self, substs: &Substs<'tcx>, expr: &hir::Expr)\n     {\n-        for &ty in &substs.types {\n+        for &ty in substs.types.as_full_slice() {\n             self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n         }\n     }"}, {"sha": "6f3d48282e25c13dd5e94c735d6ff8b5e6708cfb", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -1445,11 +1445,11 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         let origin = infer::ParameterInScope(origin, expr_span);\n \n-        for &region in &substs.regions {\n+        for &region in substs.regions.as_full_slice() {\n             self.sub_regions(origin.clone(), expr_region, region);\n         }\n \n-        for &ty in &substs.types {\n+        for &ty in substs.types.as_full_slice() {\n             let ty = self.resolve_type(ty);\n             self.type_must_outlive(origin.clone(), ty, expr_region);\n         }\n@@ -1571,18 +1571,15 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         // the problem is to add `T: 'r`, which isn't true. So, if there are no\n         // inference variables, we use a verify constraint instead of adding\n         // edges, which winds up enforcing the same condition.\n-        let needs_infer = {\n-            projection_ty.trait_ref.substs.types.iter().any(|t| t.needs_infer()) ||\n-                projection_ty.trait_ref.substs.regions.iter().any(|r| r.needs_infer())\n-        };\n+        let needs_infer = projection_ty.trait_ref.needs_infer();\n         if env_bounds.is_empty() && needs_infer {\n             debug!(\"projection_must_outlive: no declared bounds\");\n \n-            for &component_ty in &projection_ty.trait_ref.substs.types {\n+            for &component_ty in projection_ty.trait_ref.substs.types.as_full_slice() {\n                 self.type_must_outlive(origin.clone(), component_ty, region);\n             }\n \n-            for &r in &projection_ty.trait_ref.substs.regions {\n+            for &r in projection_ty.trait_ref.substs.regions.as_full_slice() {\n                 self.sub_regions(origin.clone(), region, r);\n             }\n \n@@ -1600,7 +1597,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         if !env_bounds.is_empty() && env_bounds[1..].iter().all(|b| *b == env_bounds[0]) {\n             let unique_bound = env_bounds[0];\n             debug!(\"projection_must_outlive: unique declared bound = {:?}\", unique_bound);\n-            if projection_ty.trait_ref.substs.regions\n+            if projection_ty.trait_ref.substs.regions.as_full_slice()\n                                              .iter()\n                                              .any(|r| env_bounds.contains(r))\n             {"}, {"sha": "678c102a4de3befe39d6c5aac1bf7b925c67aa3e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -621,7 +621,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // Trait impl: take implied bounds from all types that\n                 // appear in the trait reference.\n                 let trait_ref = self.instantiate_type_scheme(span, free_substs, trait_ref);\n-                trait_ref.substs.types.as_slice().to_vec()\n+                trait_ref.substs.types.as_full_slice().to_vec()\n             }\n \n             None => {"}, {"sha": "69545aefb4446b275c829407dba389f2365861ee", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -1550,7 +1550,7 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     // Debugging aid.\n     if tcx.has_attr(ccx.tcx.map.local_def_id(it.id), \"rustc_object_lifetime_default\") {\n         let object_lifetime_default_reprs: String =\n-            scheme.generics.types.iter()\n+            scheme.generics.types.as_full_slice().iter()\n                                  .map(|t| match t.object_lifetime_default {\n                                      ty::ObjectLifetimeDefault::Specific(r) => r.to_string(),\n                                      d => format!(\"{:?}\", d),"}, {"sha": "1e342d4b819712d13f2bd44dd441a866ad626ccc", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -302,8 +302,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         self.add_constraints_from_substs(\n             generics,\n             trait_ref.def_id,\n-            trait_def.generics.types.as_slice(),\n-            trait_def.generics.regions.as_slice(),\n+            trait_def.generics.types.as_full_slice(),\n+            trait_def.generics.regions.as_full_slice(),\n             trait_ref.substs,\n             variance);\n     }\n@@ -388,8 +388,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_substs(\n                     generics,\n                     trait_ref.def_id,\n-                    trait_def.generics.types.as_slice(),\n-                    trait_def.generics.regions.as_slice(),\n+                    trait_def.generics.types.as_full_slice(),\n+                    trait_def.generics.regions.as_full_slice(),\n                     trait_ref.substs,\n                     variance);\n             }"}, {"sha": "284e0d4dbddf388071fb132b078b10210d58f6a6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dc61b5c68aacce4ab5d115b14825699ea6302b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=77dc61b5c68aacce4ab5d115b14825699ea6302b", "patch": "@@ -788,8 +788,9 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n-        v.extend(self.regions.iter().filter_map(|r| r.clean(cx)).map(RegionBound));\n-        v.extend(self.types.iter().map(|t| TraitBound(PolyTrait {\n+        v.extend(self.regions.as_full_slice().iter().filter_map(|r| r.clean(cx))\n+                     .map(RegionBound));\n+        v.extend(self.types.as_full_slice().iter().map(|t| TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             lifetimes: vec![]\n         }, hir::TraitBoundModifier::None)));"}]}