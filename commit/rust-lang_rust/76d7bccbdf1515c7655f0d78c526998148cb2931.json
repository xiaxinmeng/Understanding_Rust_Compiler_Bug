{"sha": "76d7bccbdf1515c7655f0d78c526998148cb2931", "node_id": "C_kwDOAAsO6NoAKDc2ZDdiY2NiZGYxNTE1Yzc2NTVmMGQ3OGM1MjY5OTgxNDhjYjI5MzE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-23T23:31:03Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-24T00:55:35Z"}, "message": "Fix `cargo run` on Windows\n\nFixes the following error:\n```\nerror: failed to run custom build command for `bootstrap v0.0.0 (C:\\Users\\Walther\\git\\rust\\src\\bootstrap)`\n\nCaused by:\n  process didn't exit successfully: `C:\\Users\\Walther\\git\\rust\\target\\debug\\build\\bootstrap-7757a4777dec0f86\\build-script-build` (exit code: 101)\n  --- stdout\n  cargo:rerun-if-changed=build.rs\n  cargo:rerun-if-env-changed=RUSTC\n  cargo:rustc-env=BUILD_TRIPLE=x86_64-pc-windows-msvc\n  cargo:rerun-if-env-changed=PATH\n\n  --- stderr\n  thread 'main' panicked at 'assertion failed: rustc.is_absolute()', src\\bootstrap\\build.rs:22:5\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n```\n\nThe problem was that the `dir.join` check only works with rustc.exe, not rustc.\n\nThanks Walther for the help testing the fix!", "tree": {"sha": "2b20b762c347affd994de0b8b42a1b4c4450f9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b20b762c347affd994de0b8b42a1b4c4450f9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d7bccbdf1515c7655f0d78c526998148cb2931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d7bccbdf1515c7655f0d78c526998148cb2931", "html_url": "https://github.com/rust-lang/rust/commit/76d7bccbdf1515c7655f0d78c526998148cb2931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d7bccbdf1515c7655f0d78c526998148cb2931/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4e0677190b82e61dc507e3e72caf89da8e5e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4e0677190b82e61dc507e3e72caf89da8e5e28", "html_url": "https://github.com/rust-lang/rust/commit/5f4e0677190b82e61dc507e3e72caf89da8e5e28"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "ab34d5c1e5504a1272ca01a1d955616b9643130f", "filename": "src/bootstrap/build.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76d7bccbdf1515c7655f0d78c526998148cb2931/src%2Fbootstrap%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d7bccbdf1515c7655f0d78c526998148cb2931/src%2Fbootstrap%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild.rs?ref=76d7bccbdf1515c7655f0d78c526998148cb2931", "patch": "@@ -1,18 +1,33 @@\n+use env::consts::{EXE_EXTENSION, EXE_SUFFIX};\n use std::env;\n+use std::ffi::OsString;\n use std::path::PathBuf;\n \n+/// Given an executable called `name`, return the filename for the\n+/// executable for a particular target.\n+pub fn exe(name: &PathBuf) -> PathBuf {\n+    if EXE_EXTENSION != \"\" && name.extension() != Some(EXE_EXTENSION.as_ref()) {\n+        let mut name: OsString = name.clone().into();\n+        name.push(EXE_SUFFIX);\n+        name.into()\n+    } else {\n+        name.clone()\n+    }\n+}\n+\n fn main() {\n+    let host = env::var(\"HOST\").unwrap();\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     println!(\"cargo:rerun-if-env-changed=RUSTC\");\n-    println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", env::var(\"HOST\").unwrap());\n+    println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", host);\n \n     // This may not be a canonicalized path.\n     let mut rustc = PathBuf::from(env::var_os(\"RUSTC\").unwrap());\n \n     if rustc.is_relative() {\n         println!(\"cargo:rerun-if-env-changed=PATH\");\n         for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n-            let absolute = dir.join(&rustc);\n+            let absolute = dir.join(&exe(&rustc));\n             if absolute.exists() {\n                 rustc = absolute;\n                 break;"}]}