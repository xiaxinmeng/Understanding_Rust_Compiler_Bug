{"sha": "4deaa69b429442c0e25a7828cfd63d7be78772d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZWFhNjliNDI5NDQyYzBlMjVhNzgyOGNmZDYzZDdiZTc4NzcyZDg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-23T17:36:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: print elided regions as '_ instead of nothing, and use a separate check when optional.", "tree": {"sha": "cf33f84ebcc7b975b481c7ca976527cd22eacdfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf33f84ebcc7b975b481c7ca976527cd22eacdfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4deaa69b429442c0e25a7828cfd63d7be78772d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4deaa69b429442c0e25a7828cfd63d7be78772d8", "html_url": "https://github.com/rust-lang/rust/commit/4deaa69b429442c0e25a7828cfd63d7be78772d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4deaa69b429442c0e25a7828cfd63d7be78772d8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72690d24f02543f5a3c77a8506da48bb32fdc466", "url": "https://api.github.com/repos/rust-lang/rust/commits/72690d24f02543f5a3c77a8506da48bb32fdc466", "html_url": "https://github.com/rust-lang/rust/commit/72690d24f02543f5a3c77a8506da48bb32fdc466"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "14d9f9deb50ed1fd2e75b29589a2a72a429f5ea5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -826,11 +826,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             mutbl: hir::Mutability,\n             s: &mut DiagnosticStyledString,\n         ) {\n-            let r = &r.to_string();\n+            let mut r = r.to_string();\n+            if r == \"'_\" {\n+                r.clear();\n+            } else {\n+                r.push(' ');\n+            }\n             s.push_highlighted(format!(\n-                \"&{}{}{}\",\n+                \"&{}{}\",\n                 r,\n-                if r == \"\" { \"\" } else { \" \" },\n                 if mutbl == hir::MutMutable { \"mut \" } else { \"\" }\n             ));\n             s.push_normal(ty.to_string());"}, {"sha": "c576586fcad8ea21aa178266d64810988a11a281", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -411,7 +411,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_, '_, '_>, impl_def_id: DefId) -> Option<\n         w.push('<');\n         w.push_str(&substs.iter()\n             .map(|k| k.to_string())\n-            .filter(|k| !k.is_empty())\n+            .filter(|k| k != \"'_\")\n             .collect::<Vec<_>>().join(\", \"));\n         w.push('>');\n     }"}, {"sha": "fa3c76a817a4fbc22a0c814df380d6bf170d0f4e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n                 let tymut_string = tymut.to_string();\n                 if tymut_string == \"_\" ||         //unknown type name,\n                    tymut_string.len() > 10 ||     //name longer than saying \"reference\",\n-                   region.to_string() != \"\"       //... or a complex type\n+                   region.to_string() != \"'_\"     //... or a complex type\n                 {\n                     format!(\"{}reference\", match mutbl {\n                         hir::Mutability::MutMutable => \"mutable \","}, {"sha": "d4a539e3eed5c8198565afe01b62ed99f838aef0", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -222,14 +222,10 @@ pub trait PrettyPrinter:\n         false\n     }\n \n-    // HACK(eddyb) Trying to print a lifetime might not print anything, which\n-    // may need special handling in the caller (of `ty::RegionKind::print`).\n-    // To avoid printing to a temporary string (which isn't even supported),\n-    // the `print_region_outputs_anything` method can instead be used to\n-    // determine this, ahead of time.\n-    //\n-    // NB: this must be kept in sync with the implementation of `print_region`.\n-    fn print_region_outputs_anything(\n+    /// Return `true` if the region should be printed in\n+    /// optional positions, e.g. `&'a T` or `dyn Tr + 'b`.\n+    /// This is typically the case for all non-`'_` regions.\n+    fn region_should_not_be_omitted(\n         self: &PrintCx<'_, '_, '_, Self>,\n         region: ty::Region<'_>,\n     ) -> bool;\n@@ -497,7 +493,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n             match substs[param.index as usize].unpack() {\n                 UnpackedKind::Lifetime(r) => {\n                     self.always_print_region_in_paths(r) ||\n-                    self.print_region_outputs_anything(r)\n+                    self.region_should_not_be_omitted(r)\n                 }\n                 _ => false,\n             }\n@@ -535,19 +531,6 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n             for arg in arg0.into_iter().chain(args) {\n                 maybe_comma(&mut cx)?;\n \n-                if let UnpackedKind::Lifetime(region) = arg.unpack() {\n-                    if !cx.print_region_outputs_anything(region) {\n-                        // This happens when the value of the region\n-                        // parameter is not easily serialized. This may be\n-                        // because the user omitted it in the first place,\n-                        // or because it refers to some block in the code,\n-                        // etc. I'm not sure how best to serialize this.\n-                        p!(write(\"'_\"));\n-\n-                        continue;\n-                    }\n-                }\n-\n                 p!(print(arg));\n             }\n \n@@ -822,7 +805,7 @@ impl<F: fmt::Write> PrettyPrinter for FmtPrinter<F> {\n         *region != ty::ReErased\n     }\n \n-    fn print_region_outputs_anything(\n+    fn region_should_not_be_omitted(\n         self: &PrintCx<'_, '_, '_, Self>,\n         region: ty::Region<'_>,\n     ) -> bool {\n@@ -902,8 +885,9 @@ impl<F: fmt::Write> FmtPrinter<F> {\n         // `explain_region()` or `note_and_explain_region()`.\n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                if data.name != \"'_\" {\n+                if data.name != \"\" {\n                     p!(write(\"{}\", data.name));\n+                    return self.ok();\n                 }\n             }\n             ty::ReLateBound(_, br) |\n@@ -919,6 +903,7 @@ impl<F: fmt::Write> FmtPrinter<F> {\n                 if let Some((region, counter)) = highlight.highlight_bound_region {\n                     if br == region {\n                         p!(write(\"'{}\", counter));\n+                        return self.ok();\n                     }\n                 }\n             }\n@@ -938,20 +923,33 @@ impl<F: fmt::Write> FmtPrinter<F> {\n                         first_statement_index.index()\n                     )),\n                 }\n+                return self.ok();\n             }\n             ty::ReVar(region_vid) if identify_regions => {\n                 p!(write(\"{:?}\", region_vid));\n+                return self.ok();\n             }\n             ty::ReVar(_) => {}\n             ty::ReScope(_) |\n             ty::ReErased => {}\n-            ty::ReStatic => p!(write(\"'static\")),\n-            ty::ReEmpty => p!(write(\"'<empty>\")),\n+            ty::ReStatic => {\n+                p!(write(\"'static\"));\n+                return self.ok();\n+            }\n+            ty::ReEmpty => {\n+                p!(write(\"'<empty>\"));\n+                return self.ok();\n+            }\n \n             // The user should never encounter these in unsubstituted form.\n-            ty::ReClosureBound(vid) => p!(write(\"{:?}\", vid)),\n+            ty::ReClosureBound(vid) => {\n+                p!(write(\"{:?}\", vid));\n+                return self.ok();\n+            }\n         }\n \n+        p!(write(\"'_\"));\n+\n         self.ok()\n     }\n }\n@@ -978,7 +976,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n             }\n             ty::Ref(r, ty, mutbl) => {\n                 p!(write(\"&\"));\n-                if self.print_region_outputs_anything(r) {\n+                if self.region_should_not_be_omitted(r) {\n                     p!(print(r), write(\" \"));\n                 }\n                 p!(print(ty::TypeAndMut { ty, mutbl }))\n@@ -1027,7 +1025,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                 nest!(|cx| cx.print_def_path(def.did, Some(substs), iter::empty()));\n             }\n             ty::Dynamic(data, r) => {\n-                let print_r = self.print_region_outputs_anything(r);\n+                let print_r = self.region_should_not_be_omitted(r);\n                 if print_r {\n                     p!(write(\"(\"));\n                 }"}, {"sha": "1edb5dfe2b88f7d2582b4ee9e43b8c988d4cafd8", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -512,7 +512,7 @@ impl Printer for SymbolPath {\n }\n \n impl PrettyPrinter for SymbolPath {\n-    fn print_region_outputs_anything(\n+    fn region_should_not_be_omitted(\n         self: &PrintCx<'_, '_, '_, Self>,\n         _region: ty::Region<'_>,\n     ) -> bool {"}, {"sha": "e20869a6f3a7584c999f317d0b0b7ca026eb1cd5", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -11,7 +11,7 @@ LL | |     }\n    | |_____^ lifetime mismatch\n    |\n    = note: expected type `'a`\n-              found type ``\n+              found type `'_`\n note: the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n@@ -42,7 +42,7 @@ LL | |     }\n    | |_____^ lifetime mismatch\n    |\n    = note: expected type `'a`\n-              found type ``\n+              found type `'_`\n note: the lifetime 'a as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |"}, {"sha": "ac5e5e9aabc5bfa41e98ed87d428c99ec2ec8b50", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime  as defined on the body at 9:18...\n+note: first, the lifetime cannot outlive the lifetime '_ as defined on the body at 9:18...\n   --> $DIR/regions-addr-of-upvar-self.rs:9:18\n    |\n LL |         let _f = || {"}, {"sha": "be441bc48082ed16a97865d3c625d1c8696987cc", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4deaa69b429442c0e25a7828cfd63d7be78772d8/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr?ref=4deaa69b429442c0e25a7828cfd63d7be78772d8", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |         let mut f = || &mut x;\n    |                        ^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime  as defined on the body at 7:21...\n+note: first, the lifetime cannot outlive the lifetime '_ as defined on the body at 7:21...\n   --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:21\n    |\n LL |         let mut f = || &mut x;"}]}