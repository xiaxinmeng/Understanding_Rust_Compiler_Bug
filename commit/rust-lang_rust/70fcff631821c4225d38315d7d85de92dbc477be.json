{"sha": "70fcff631821c4225d38315d7d85de92dbc477be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZmNmZjYzMTgyMWM0MjI1ZDM4MzE1ZDdkODVkZTkyZGJjNDc3YmU=", "commit": {"author": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2017-03-21T15:03:52Z"}, "committer": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2017-04-13T00:12:49Z"}, "message": "Add new TransItem for global_asm trans", "tree": {"sha": "fe823e292b3635db48a4e8c6bd643e03e668c289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe823e292b3635db48a4e8c6bd643e03e668c289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70fcff631821c4225d38315d7d85de92dbc477be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70fcff631821c4225d38315d7d85de92dbc477be", "html_url": "https://github.com/rust-lang/rust/commit/70fcff631821c4225d38315d7d85de92dbc477be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70fcff631821c4225d38315d7d85de92dbc477be/comments", "author": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bcd5b0980921a90367a3f8c4fbcd5b15fc4b3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcd5b0980921a90367a3f8c4fbcd5b15fc4b3a5", "html_url": "https://github.com/rust-lang/rust/commit/6bcd5b0980921a90367a3f8c4fbcd5b15fc4b3a5"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "577d6798ec3fee1ffee3c71f3c57c713beb141eb", "filename": "src/librustc_trans/asm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=70fcff631821c4225d38315d7d85de92dbc477be", "patch": "@@ -124,3 +124,11 @@ pub fn trans_inline_asm<'a, 'tcx>(\n             llvm::LLVMMDNodeInContext(bcx.ccx.llcx(), &val, 1));\n     }\n }\n+\n+pub fn trans_global_asm<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                                  ga: &hir::GlobalAsm) {\n+    let asm = CString::new(ga.asm.as_str().as_bytes()).unwrap();\n+    unsafe {\n+        llvm::LLVMSetModuleInlineAsm(ccx.llmod(), asm.as_ptr());\n+    }\n+}"}, {"sha": "ba2b807d5a01c9496fc7f1967faf00644576a28f", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=70fcff631821c4225d38315d7d85de92dbc477be", "patch": "@@ -349,6 +349,9 @@ fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,\n \n             collect_neighbours(scx, instance, &mut neighbors);\n         }\n+        TransItem::GlobalAsm(..) => {\n+            recursion_depth_reset = None;\n+        }\n     }\n \n     record_inlining_canditates(scx.tcx(), starting_point, &neighbors[..], inlining_map);\n@@ -811,7 +814,6 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..)         |\n             hir::ItemForeignMod(..)  |\n-            hir::ItemGlobalAsm(..)   |\n             hir::ItemTy(..)          |\n             hir::ItemDefaultImpl(..) |\n             hir::ItemTrait(..)       |\n@@ -841,6 +843,12 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                     }\n                 }\n             }\n+            hir::ItemGlobalAsm(..) => {\n+                debug!(\"RootCollector: ItemGlobalAsm({})\",\n+                       def_id_to_string(self.scx.tcx(),\n+                                        self.scx.tcx().hir.local_def_id(item.id)));\n+                self.output.push(TransItem::GlobalAsm(item.id));\n+            }\n             hir::ItemStatic(..) => {\n                 debug!(\"RootCollector: ItemStatic({})\",\n                        def_id_to_string(self.scx.tcx(),"}, {"sha": "4973181202eeddcea8a787e66e53b42cecaba165", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=70fcff631821c4225d38315d7d85de92dbc477be", "patch": "@@ -185,15 +185,16 @@ impl<'tcx> CodegenUnit<'tcx> {\n             symbol_name.len().hash(&mut state);\n             symbol_name.hash(&mut state);\n             let exported = match item {\n-               TransItem::Fn(ref instance) => {\n-                   let node_id =\n-                       scx.tcx().hir.as_local_node_id(instance.def_id());\n+                TransItem::Fn(ref instance) => {\n+                    let node_id =\n+                        scx.tcx().hir.as_local_node_id(instance.def_id());\n                     node_id.map(|node_id| exported_symbols.contains(&node_id))\n-                           .unwrap_or(false)\n-               }\n-               TransItem::Static(node_id) => {\n+                        .unwrap_or(false)\n+                }\n+                TransItem::Static(node_id) => {\n                     exported_symbols.contains(&node_id)\n-               }\n+                }\n+                TransItem::GlobalAsm(..) => true,\n             };\n             exported.hash(&mut state);\n         }\n@@ -243,7 +244,9 @@ impl<'tcx> CodegenUnit<'tcx> {\n                 TransItem::Fn(instance) => {\n                     tcx.hir.as_local_node_id(instance.def_id())\n                 }\n-                TransItem::Static(node_id) => Some(node_id),\n+                TransItem::Static(node_id) | TransItem::GlobalAsm(node_id) => {\n+                    Some(node_id)\n+                }\n             }\n         }\n     }\n@@ -338,7 +341,8 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                 None => {\n                     match trans_item {\n                         TransItem::Fn(..) |\n-                        TransItem::Static(..) => llvm::ExternalLinkage,\n+                        TransItem::Static(..) |\n+                        TransItem::GlobalAsm(..) => llvm::ExternalLinkage,\n                     }\n                 }\n             };\n@@ -483,7 +487,8 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 't\n \n             Some(def_id)\n         }\n-        TransItem::Static(node_id) => Some(tcx.hir.local_def_id(node_id)),\n+        TransItem::Static(node_id) |\n+        TransItem::GlobalAsm(node_id) => Some(tcx.hir.local_def_id(node_id)),\n     }\n }\n "}, {"sha": "36c3981e3a6f240c2b78538f8a8e03a4ac8ed4c4", "filename": "src/librustc_trans/symbol_map.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fsymbol_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Fsymbol_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_map.rs?ref=70fcff631821c4225d38315d7d85de92dbc477be", "patch": "@@ -99,7 +99,10 @@ impl<'tcx> SymbolMap<'tcx> {\n                 TransItem::Fn(Instance { def, .. }) => {\n                     tcx.hir.as_local_node_id(def.def_id())\n                 }\n-                TransItem::Static(node_id) => Some(node_id),\n+                TransItem::Static(node_id) |\n+                TransItem::GlobalAsm(node_id) => {\n+                    Some(node_id)\n+                }\n             }.map(|node_id| {\n                 tcx.hir.span(node_id)\n             })"}, {"sha": "f5556bb8382f6540f58bea55168ad96429475e56", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fcff631821c4225d38315d7d85de92dbc477be/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=70fcff631821c4225d38315d7d85de92dbc477be", "patch": "@@ -14,6 +14,7 @@\n //! item-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n+use asm;\n use attributes;\n use base;\n use consts;\n@@ -38,7 +39,8 @@ use std::iter;\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum TransItem<'tcx> {\n     Fn(Instance<'tcx>),\n-    Static(NodeId)\n+    Static(NodeId),\n+    GlobalAsm(NodeId),\n }\n \n /// Describes how a translation item will be instantiated in object files.\n@@ -89,6 +91,14 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                     span_bug!(item.span, \"Mismatch between hir::Item type and TransItem type\")\n                 }\n             }\n+            TransItem::GlobalAsm(node_id) => {\n+                let item = ccx.tcx().hir.expect_item(node_id);\n+                if let hir::ItemGlobalAsm(ref ga) = item.node {\n+                    asm::trans_global_asm(ccx, ga);\n+                } else {\n+                    span_bug!(item.span, \"Mismatch between hir::Item type and TransItem type\")\n+                }\n+            }\n             TransItem::Fn(instance) => {\n                 let _task = ccx.tcx().dep_graph.in_task(\n                     DepNode::TransCrateItem(instance.def_id())); // (*)\n@@ -123,6 +133,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             TransItem::Fn(instance) => {\n                 TransItem::predefine_fn(ccx, instance, linkage, &symbol_name);\n             }\n+            TransItem::GlobalAsm(..) => {}\n         }\n \n         debug!(\"END PREDEFINING '{} ({})' in cgu {}\",\n@@ -185,6 +196,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 let def_id = scx.tcx().hir.local_def_id(node_id);\n                 symbol_names::symbol_name(Instance::mono(scx.tcx(), def_id), scx)\n             }\n+            TransItem::GlobalAsm(node_id) => {\n+                let def_id = scx.tcx().hir.local_def_id(node_id);\n+                format!(\"global_asm_{:?}\", def_id)\n+            }\n         }\n     }\n \n@@ -202,6 +217,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 }\n             }\n             TransItem::Static(..) => InstantiationMode::GloballyShared,\n+            TransItem::GlobalAsm(..) => InstantiationMode::GloballyShared,\n         }\n     }\n \n@@ -210,14 +226,16 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             TransItem::Fn(ref instance) => {\n                 instance.substs.types().next().is_some()\n             }\n-            TransItem::Static(..)   => false,\n+            TransItem::Static(..) |\n+            TransItem::GlobalAsm(..) => false,\n         }\n     }\n \n     pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<llvm::Linkage> {\n         let def_id = match *self {\n             TransItem::Fn(ref instance) => instance.def_id(),\n             TransItem::Static(node_id) => tcx.hir.local_def_id(node_id),\n+            TransItem::GlobalAsm(..) => return None,\n         };\n \n         let attributes = tcx.get_attrs(def_id);\n@@ -249,6 +267,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n                 to_string_internal(tcx, \"static \", instance)\n             },\n+            TransItem::GlobalAsm(..) => {\n+                \"global_asm\".to_string()\n+            }\n         };\n \n         fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -273,6 +294,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             TransItem::Static(id) => {\n                 format!(\"Static({:?})\", id)\n             }\n+            TransItem::GlobalAsm(id) => {\n+                format!(\"GlobalAsm({:?})\", id)\n+            }\n         }\n     }\n }"}]}