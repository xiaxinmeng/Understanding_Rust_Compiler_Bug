{"sha": "1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMjhmNWFhNjY4NTA0ZmQ4NGNlNGFiNzI5OGYyMDY5NmI5ZmZiNWE=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-04T20:59:07Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-08T18:24:38Z"}, "message": "improve non_camel_case_types diagnostics\n\nUse a structured suggestion and tighten the span to just the identifier.", "tree": {"sha": "8af95c28631e6682a77e64ba6f1c997c25641bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af95c28631e6682a77e64ba6f1c997c25641bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlw06uYWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdE+1B/9CaglAmpCjzpsVGIiSuUmfP4nx\nw2M9lGfQDdSJcrC16JKYWPiwaYsTClBAFW9AwIyY99K1L+oBSNr1bQfhW7aqM2dn\nDsjUO/qUNTD1mC7qvojy06jn9K81vGPr6T1rYCUkpTi9mVFataHqeSE8HA7mWmiZ\nBuROC/hPtinZ0TeA/BYcDalUBqJCrjhpauQl+oo5K5hkla1aKnsxlj+9KShSbS61\nfGgRBXvFPX5fXBS9Uh0JcHgcGpyZ+VzoJEsfWn6wvZVcB/VCFImWn/cdREU+hPXH\nYZ0S/CDxRyyMyTeoU8/HoB4IWGb35usfSPXR26cM9Xjffch5ZgPH51Et57ea\n=0nt7\n-----END PGP SIGNATURE-----", "payload": "tree 8af95c28631e6682a77e64ba6f1c997c25641bdd\nparent e37997005601e838aa221dc5be087e827df57264\nauthor Andy Russell <arussell123@gmail.com> 1546635547 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1546971878 -0500\n\nimprove non_camel_case_types diagnostics\n\nUse a structured suggestion and tighten the span to just the identifier.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "html_url": "https://github.com/rust-lang/rust/commit/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37997005601e838aa221dc5be087e827df57264", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37997005601e838aa221dc5be087e827df57264", "html_url": "https://github.com/rust-lang/rust/commit/e37997005601e838aa221dc5be087e827df57264"}], "stats": {"total": 165, "additions": 83, "deletions": 82}, "files": [{"sha": "a4a3fa552e9881627a9342126b7eb57452784379", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -41,13 +41,12 @@ declare_lint! {\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n-    fn check_case(&self, cx: &EarlyContext, sort: &str, name: ast::Name, span: Span) {\n+    fn check_case(&self, cx: &EarlyContext, sort: &str, ident: &Ident) {\n         fn char_has_case(c: char) -> bool {\n             c.is_lowercase() || c.is_uppercase()\n         }\n \n-        fn is_camel_case(name: ast::Name) -> bool {\n-            let name = name.as_str();\n+        fn is_camel_case(name: &str) -> bool {\n             let name = name.trim_matches('_');\n             if name.is_empty() {\n                 return true;\n@@ -87,14 +86,20 @@ impl NonCamelCaseTypes {\n                 }).0\n         }\n \n+        let name = &ident.name.as_str();\n+\n         if !is_camel_case(name) {\n-            let c = to_camel_case(&name.as_str());\n-            let m = if c.is_empty() {\n-                format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, name)\n-            } else {\n-                format!(\"{} `{}` should have a camel case name such as `{}`\", sort, name, c)\n-            };\n-            cx.span_lint(NON_CAMEL_CASE_TYPES, span, &m);\n+            let c = to_camel_case(name);\n+\n+            let msg = format!(\"{} `{}` should have a camel case name\", sort, name);\n+            cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, &msg)\n+                .span_suggestion_with_applicability(\n+                    ident.span,\n+                    \"convert the identifier to camel case\",\n+                    c,\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n         }\n     }\n }\n@@ -123,19 +128,19 @@ impl EarlyLintPass for NonCamelCaseTypes {\n             ast::ItemKind::Ty(..) |\n             ast::ItemKind::Enum(..) |\n             ast::ItemKind::Struct(..) |\n-            ast::ItemKind::Union(..) => self.check_case(cx, \"type\", it.ident.name, it.span),\n-            ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", it.ident.name, it.span),\n+            ast::ItemKind::Union(..) => self.check_case(cx, \"type\", &it.ident),\n+            ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", &it.ident),\n             _ => (),\n         }\n     }\n \n     fn check_variant(&mut self, cx: &EarlyContext, v: &ast::Variant, _: &ast::Generics) {\n-        self.check_case(cx, \"variant\", v.node.ident.name, v.span);\n+        self.check_case(cx, \"variant\", &v.node.ident);\n     }\n \n     fn check_generic_param(&mut self, cx: &EarlyContext, param: &ast::GenericParam) {\n         if let ast::GenericParamKind::Type { .. } = param.kind {\n-            self.check_case(cx, \"type parameter\", param.ident.name, param.ident.span);\n+            self.check_case(cx, \"type parameter\", &param.ident);\n         }\n     }\n }"}, {"sha": "f3c7d70054b777a4da352a603adc8cff81f95bda", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -1,8 +1,8 @@\n-warning: type `snake_case` should have a camel case name such as `SnakeCase`\n-  --> $DIR/lint-group-nonstandard-style.rs:22:9\n+warning: type `snake_case` should have a camel case name\n+  --> $DIR/lint-group-nonstandard-style.rs:22:16\n    |\n LL |         struct snake_case; //~ WARN should have a camel\n-   |         ^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^ help: convert the identifier to camel case: `SnakeCase`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:18:17"}, {"sha": "bca1992605b77f655f62068e4504c1cf78bdc881", "filename": "src/test/ui/lint/lint-non-camel-case-types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -2,31 +2,31 @@\n #![allow(dead_code)]\n \n struct ONE_TWO_THREE;\n-//~^ ERROR type `ONE_TWO_THREE` should have a camel case name such as `OneTwoThree`\n+//~^ ERROR type `ONE_TWO_THREE` should have a camel case name\n \n-struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n+struct foo { //~ ERROR type `foo` should have a camel case name\n     bar: isize,\n }\n \n-enum foo2 { //~ ERROR type `foo2` should have a camel case name such as `Foo2`\n+enum foo2 { //~ ERROR type `foo2` should have a camel case name\n     Bar\n }\n \n-struct foo3 { //~ ERROR type `foo3` should have a camel case name such as `Foo3`\n+struct foo3 { //~ ERROR type `foo3` should have a camel case name\n     bar: isize\n }\n \n-type foo4 = isize; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n+type foo4 = isize; //~ ERROR type `foo4` should have a camel case name\n \n enum Foo5 {\n-    bar //~ ERROR variant `bar` should have a camel case name such as `Bar`\n+    bar //~ ERROR variant `bar` should have a camel case name\n }\n \n-trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n+trait foo6 { //~ ERROR trait `foo6` should have a camel case name\n     fn dummy(&self) { }\n }\n \n-fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name such as `Ty`\n+fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name\n \n #[repr(C)]\n struct foo7 {\n@@ -35,10 +35,10 @@ struct foo7 {\n \n struct X86_64;\n \n-struct X86__64; //~ ERROR type `X86__64` should have a camel case name such as `X86_64`\n+struct X86__64; //~ ERROR type `X86__64` should have a camel case name\n \n-struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name such as `Abc123`\n+struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name\n \n-struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n+struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name\n \n fn main() { }"}, {"sha": "74f9a5993b8599a6280cf6a4309c573388596777", "filename": "src/test/ui/lint/lint-non-camel-case-types.stderr", "status": "modified", "additions": 41, "deletions": 49, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -1,82 +1,74 @@\n-error: type `ONE_TWO_THREE` should have a camel case name such as `OneTwoThree`\n-  --> $DIR/lint-non-camel-case-types.rs:4:1\n+error: type `ONE_TWO_THREE` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:4:8\n    |\n LL | struct ONE_TWO_THREE;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^ help: convert the identifier to camel case: `OneTwoThree`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-camel-case-types.rs:1:11\n    |\n LL | #![forbid(non_camel_case_types)]\n    |           ^^^^^^^^^^^^^^^^^^^^\n \n-error: type `foo` should have a camel case name such as `Foo`\n-  --> $DIR/lint-non-camel-case-types.rs:7:1\n+error: type `foo` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:7:8\n    |\n-LL | / struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n-LL | |     bar: isize,\n-LL | | }\n-   | |_^\n+LL | struct foo { //~ ERROR type `foo` should have a camel case name\n+   |        ^^^ help: convert the identifier to camel case: `Foo`\n \n-error: type `foo2` should have a camel case name such as `Foo2`\n-  --> $DIR/lint-non-camel-case-types.rs:11:1\n+error: type `foo2` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:11:6\n    |\n-LL | / enum foo2 { //~ ERROR type `foo2` should have a camel case name such as `Foo2`\n-LL | |     Bar\n-LL | | }\n-   | |_^\n+LL | enum foo2 { //~ ERROR type `foo2` should have a camel case name\n+   |      ^^^^ help: convert the identifier to camel case: `Foo2`\n \n-error: type `foo3` should have a camel case name such as `Foo3`\n-  --> $DIR/lint-non-camel-case-types.rs:15:1\n+error: type `foo3` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:15:8\n    |\n-LL | / struct foo3 { //~ ERROR type `foo3` should have a camel case name such as `Foo3`\n-LL | |     bar: isize\n-LL | | }\n-   | |_^\n+LL | struct foo3 { //~ ERROR type `foo3` should have a camel case name\n+   |        ^^^^ help: convert the identifier to camel case: `Foo3`\n \n-error: type `foo4` should have a camel case name such as `Foo4`\n-  --> $DIR/lint-non-camel-case-types.rs:19:1\n+error: type `foo4` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:19:6\n    |\n-LL | type foo4 = isize; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | type foo4 = isize; //~ ERROR type `foo4` should have a camel case name\n+   |      ^^^^ help: convert the identifier to camel case: `Foo4`\n \n-error: variant `bar` should have a camel case name such as `Bar`\n+error: variant `bar` should have a camel case name\n   --> $DIR/lint-non-camel-case-types.rs:22:5\n    |\n-LL |     bar //~ ERROR variant `bar` should have a camel case name such as `Bar`\n-   |     ^^^\n+LL |     bar //~ ERROR variant `bar` should have a camel case name\n+   |     ^^^ help: convert the identifier to camel case: `Bar`\n \n-error: trait `foo6` should have a camel case name such as `Foo6`\n-  --> $DIR/lint-non-camel-case-types.rs:25:1\n+error: trait `foo6` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:25:7\n    |\n-LL | / trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n-LL | |     fn dummy(&self) { }\n-LL | | }\n-   | |_^\n+LL | trait foo6 { //~ ERROR trait `foo6` should have a camel case name\n+   |       ^^^^ help: convert the identifier to camel case: `Foo6`\n \n-error: type parameter `ty` should have a camel case name such as `Ty`\n+error: type parameter `ty` should have a camel case name\n   --> $DIR/lint-non-camel-case-types.rs:29:6\n    |\n-LL | fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name such as `Ty`\n-   |      ^^\n+LL | fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name\n+   |      ^^ help: convert the identifier to camel case: `Ty`\n \n-error: type `X86__64` should have a camel case name such as `X86_64`\n-  --> $DIR/lint-non-camel-case-types.rs:38:1\n+error: type `X86__64` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:38:8\n    |\n-LL | struct X86__64; //~ ERROR type `X86__64` should have a camel case name such as `X86_64`\n-   | ^^^^^^^^^^^^^^^\n+LL | struct X86__64; //~ ERROR type `X86__64` should have a camel case name\n+   |        ^^^^^^^ help: convert the identifier to camel case: `X86_64`\n \n-error: type `Abc_123` should have a camel case name such as `Abc123`\n-  --> $DIR/lint-non-camel-case-types.rs:40:1\n+error: type `Abc_123` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:40:8\n    |\n-LL | struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name such as `Abc123`\n-   | ^^^^^^^^^^^^^^^\n+LL | struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name\n+   |        ^^^^^^^ help: convert the identifier to camel case: `Abc123`\n \n-error: type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n-  --> $DIR/lint-non-camel-case-types.rs:42:1\n+error: type `A1_b2_c3` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:42:8\n    |\n-LL | struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n-   | ^^^^^^^^^^^^^^^^\n+LL | struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name\n+   |        ^^^^^^^^ help: convert the identifier to camel case: `A1B2C3`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "1f06b28398426508eee908022a2a4f912422e237", "filename": "src/test/ui/lint/lint-non-camel-case-variant.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n #![deny(non_camel_case_types)]\n \n pub enum Foo {", "previous_filename": "src/test/run-pass/test-allow-non-camel-case-variant.rs"}, {"sha": "c2fdfb4fe421aad56096f0c1eeb90978a0caa4d9", "filename": "src/test/ui/lint/lint-non-camel-case-with-trailing-underscores.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n #![allow(dead_code)]\n // This is ok because we often use the trailing underscore to mean 'prime'\n ", "previous_filename": "src/test/run-pass/lint-non-camel-case-with-trailing-underscores.rs"}, {"sha": "a0b4130c3e92a9ee72f6c6cb3c32cdf1fb4f515a", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -1,6 +1,6 @@\n-//\n-#![allow(dead_code)]\n+// compile-pass\n \n+#![allow(dead_code)]\n \n #![forbid(non_camel_case_types)]\n #![forbid(non_upper_case_globals)]", "previous_filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs"}, {"sha": "e601c6e455544516948d72d06c02b909e13b9fd7", "filename": "src/test/ui/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.rs?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -3,7 +3,7 @@\n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n     \u03b3  //~ ERROR non-ascii idents are not fully supported\n-       //~^ WARN type parameter `\u03b3` should have a camel case name such as `\u0393`\n+       //~^ WARN type parameter `\u03b3` should have a camel case name\n >() {}\n \n struct X {"}, {"sha": "268dd99d06031ad10e7f74a51ec2f0ac40a33e4f", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "patch": "@@ -30,11 +30,11 @@ LL |     let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-warning: type parameter `\u03b3` should have a camel case name such as `\u0393`\n+warning: type parameter `\u03b3` should have a camel case name\n   --> $DIR/utf8_idents.rs:5:5\n    |\n LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n-   |     ^\n+   |     ^ help: convert the identifier to camel case: `\u0393`\n    |\n    = note: #[warn(non_camel_case_types)] on by default\n "}]}