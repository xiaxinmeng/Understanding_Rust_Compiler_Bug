{"sha": "a89510e5f9c1610bd5f503d7f556e94b68e6070c", "node_id": "C_kwDOAAsO6NoAKGE4OTUxMGU1ZjljMTYxMGJkNWY1MDNkN2Y1NTZlOTRiNjhlNjA3MGM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-29T06:18:52Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-24T12:01:22Z"}, "message": "Add issue numbers", "tree": {"sha": "d7dfeed9fa069db9c6e7872ad4465fa8f1968e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7dfeed9fa069db9c6e7872ad4465fa8f1968e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a89510e5f9c1610bd5f503d7f556e94b68e6070c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a89510e5f9c1610bd5f503d7f556e94b68e6070c", "html_url": "https://github.com/rust-lang/rust/commit/a89510e5f9c1610bd5f503d7f556e94b68e6070c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a89510e5f9c1610bd5f503d7f556e94b68e6070c/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc5463c18af25b880b1ca476ae05bcba87140e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc5463c18af25b880b1ca476ae05bcba87140e6", "html_url": "https://github.com/rust-lang/rust/commit/9fc5463c18af25b880b1ca476ae05bcba87140e6"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "e81d15f6c7ced855e8d7c803466d93f648ad5c31", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a89510e5f9c1610bd5f503d7f556e94b68e6070c/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89510e5f9c1610bd5f503d7f556e94b68e6070c/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=a89510e5f9c1610bd5f503d7f556e94b68e6070c", "patch": "@@ -605,7 +605,7 @@ impl Ordering {\n pub struct Reverse<T>(#[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")] pub T);\n \n #[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n impl<T: ~const PartialOrd> const PartialOrd for Reverse<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n@@ -876,7 +876,7 @@ pub macro Ord($item:item) {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n impl const Ord for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n@@ -885,7 +885,7 @@ impl const Ord for Ordering {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n impl const PartialOrd for Ordering {\n     #[inline]\n     fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {\n@@ -1203,7 +1203,7 @@ pub macro PartialOrd($item:item) {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_min\")]\n pub const fn min<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n     v1.min(v2)\n@@ -1267,7 +1267,7 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_max\")]\n pub const fn max<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n     v1.max(v2)\n@@ -1322,7 +1322,7 @@ mod impls {\n     macro_rules! partial_eq_impl {\n         ($($t:ty)*) => ($(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n             impl const PartialEq for $t {\n                 #[inline]\n                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }\n@@ -1333,7 +1333,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const PartialEq for () {\n         #[inline]\n         fn eq(&self, _other: &()) -> bool {\n@@ -1361,7 +1361,7 @@ mod impls {\n     macro_rules! partial_ord_impl {\n         ($($t:ty)*) => ($(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n             impl const PartialOrd for $t {\n                 #[inline]\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n@@ -1385,7 +1385,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const PartialOrd for () {\n         #[inline]\n         fn partial_cmp(&self, _: &()) -> Option<Ordering> {\n@@ -1394,7 +1394,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const PartialOrd for bool {\n         #[inline]\n         fn partial_cmp(&self, other: &bool) -> Option<Ordering> {\n@@ -1407,7 +1407,7 @@ mod impls {\n     macro_rules! ord_impl {\n         ($($t:ty)*) => ($(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n             impl const PartialOrd for $t {\n                 #[inline]\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n@@ -1424,7 +1424,7 @@ mod impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n             impl const Ord for $t {\n                 #[inline]\n                 fn cmp(&self, other: &$t) -> Ordering {\n@@ -1439,7 +1439,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const Ord for () {\n         #[inline]\n         fn cmp(&self, _other: &()) -> Ordering {\n@@ -1448,7 +1448,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const Ord for bool {\n         #[inline]\n         fn cmp(&self, other: &bool) -> Ordering {\n@@ -1468,7 +1468,7 @@ mod impls {\n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n     #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n@@ -1479,15 +1479,15 @@ mod impls {\n     impl Eq for ! {}\n \n     #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n     #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n     impl const Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}]}