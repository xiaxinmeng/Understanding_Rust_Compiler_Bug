{"sha": "148f8422f3bf1c1e50a3773c71e333aa6b166f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OGY4NDIyZjNiZjFjMWU1MGEzNzczYzcxZTMzM2FhNmIxNjZmMjI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-29T18:57:58Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-03T13:11:18Z"}, "message": "check for is_cleanup violations in MIR typeck\n\nThere weren't any in practice, but as these cause MSVC-only problems, the\ncheck looks like a good idea.", "tree": {"sha": "b8a6e7675ff96472d275fb037f8f344a08d6e633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a6e7675ff96472d275fb037f8f344a08d6e633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/148f8422f3bf1c1e50a3773c71e333aa6b166f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/148f8422f3bf1c1e50a3773c71e333aa6b166f22", "html_url": "https://github.com/rust-lang/rust/commit/148f8422f3bf1c1e50a3773c71e333aa6b166f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/148f8422f3bf1c1e50a3773c71e333aa6b166f22/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6068ea84788743079963471a8415884af2a6e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6068ea84788743079963471a8415884af2a6e56", "html_url": "https://github.com/rust-lang/rust/commit/f6068ea84788743079963471a8415884af2a6e56"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "efac8ea84611158524d635c7d74530898dd875c0", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/148f8422f3bf1c1e50a3773c71e333aa6b166f22/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148f8422f3bf1c1e50a3773c71e333aa6b166f22/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=148f8422f3bf1c1e50a3773c71e333aa6b166f22", "patch": "@@ -533,6 +533,69 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn check_iscleanup(&mut self, mir: &Mir<'tcx>, block: &BasicBlockData<'tcx>)\n+    {\n+        let is_cleanup = block.is_cleanup;\n+        self.last_span = block.terminator().span;\n+        match block.terminator().kind {\n+            TerminatorKind::Goto { target } =>\n+                self.assert_iscleanup(mir, block, target, is_cleanup),\n+            TerminatorKind::If { targets: (on_true, on_false), .. } => {\n+                self.assert_iscleanup(mir, block, on_true, is_cleanup);\n+                self.assert_iscleanup(mir, block, on_false, is_cleanup);\n+            }\n+            TerminatorKind::Switch { ref targets, .. } |\n+            TerminatorKind::SwitchInt { ref targets, .. } => {\n+                for target in targets {\n+                    self.assert_iscleanup(mir, block, *target, is_cleanup);\n+                }\n+            }\n+            TerminatorKind::Resume => {\n+                if !is_cleanup {\n+                    span_mirbug!(self, block, \"resume on non-cleanup block!\")\n+                }\n+            }\n+            TerminatorKind::Return => {\n+                if is_cleanup {\n+                    span_mirbug!(self, block, \"return on cleanup block\")\n+                }\n+            }\n+            TerminatorKind::Drop { target, unwind, .. } |\n+            TerminatorKind::DropAndReplace { target, unwind, .. } => {\n+                self.assert_iscleanup(mir, block, target, is_cleanup);\n+                if let Some(unwind) = unwind {\n+                    if is_cleanup {\n+                        span_mirbug!(self, block, \"unwind on cleanup block\")\n+                    }\n+                    self.assert_iscleanup(mir, block, unwind, true);\n+                }\n+            }\n+            TerminatorKind::Call { ref destination, cleanup, .. } => {\n+                if let &Some((_, target)) = destination {\n+                    self.assert_iscleanup(mir, block, target, is_cleanup);\n+                }\n+                if let Some(cleanup) = cleanup {\n+                    if is_cleanup {\n+                        span_mirbug!(self, block, \"cleanup on cleanup block\")\n+                    }\n+                    self.assert_iscleanup(mir, block, cleanup, true);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn assert_iscleanup(&mut self,\n+                        mir: &Mir<'tcx>,\n+                        ctxt: &fmt::Debug,\n+                        bb: BasicBlock,\n+                        iscleanuppad: bool)\n+    {\n+        if mir.basic_block_data(bb).is_cleanup != iscleanuppad {\n+            span_mirbug!(self, ctxt, \"cleanuppad mismatch: {:?} should be {:?}\",\n+                         bb, iscleanuppad);\n+        }\n+    }\n+\n     fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);\n@@ -544,9 +607,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 self.check_stmt(mir, stmt);\n             }\n \n-            if let Some(ref terminator) = block.terminator {\n-                self.check_terminator(mir, terminator);\n-            }\n+            self.check_terminator(mir, block.terminator());\n+            self.check_iscleanup(mir, block);\n         }\n     }\n "}]}