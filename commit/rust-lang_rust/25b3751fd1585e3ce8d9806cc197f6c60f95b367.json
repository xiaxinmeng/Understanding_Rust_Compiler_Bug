{"sha": "25b3751fd1585e3ce8d9806cc197f6c60f95b367", "node_id": "C_kwDOAAsO6NoAKDI1YjM3NTFmZDE1ODVlM2NlOGQ5ODA2Y2MxOTdmNmM2MGY5NWIzNjc", "commit": {"author": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2023-06-02T21:18:11Z"}, "committer": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2023-06-06T05:34:27Z"}, "message": "std: available_parallelism using native netbsd api first\nbefore falling back to existing code paths like FreeBSD does.", "tree": {"sha": "6a3c926feafe07ef23717833fb35858e1ce141f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3c926feafe07ef23717833fb35858e1ce141f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b3751fd1585e3ce8d9806cc197f6c60f95b367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b3751fd1585e3ce8d9806cc197f6c60f95b367", "html_url": "https://github.com/rust-lang/rust/commit/25b3751fd1585e3ce8d9806cc197f6c60f95b367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b3751fd1585e3ce8d9806cc197f6c60f95b367/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd9bf594366e73efb1a26a023e0b4de8eff82b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9bf594366e73efb1a26a023e0b4de8eff82b94", "html_url": "https://github.com/rust-lang/rust/commit/fd9bf594366e73efb1a26a023e0b4de8eff82b94"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "010015667f7a2a020a5ea70a336ad3a5e908bf3c", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/25b3751fd1585e3ce8d9806cc197f6c60f95b367/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b3751fd1585e3ce8d9806cc197f6c60f95b367/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=25b3751fd1585e3ce8d9806cc197f6c60f95b367", "patch": "@@ -344,6 +344,29 @@ pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n                 }\n             }\n \n+            #[cfg(target_os = \"netbsd\")]\n+            {\n+                unsafe {\n+                    let set = libc::_cpuset_create();\n+                    if !set.is_null() {\n+                        let mut count: usize = 0;\n+                        if libc::pthread_getaffinity_np(libc::pthread_self(), libc::_cpuset_size(set), set) == 0 {\n+                            for i in 0..u64::MAX {\n+                                match libc::_cpuset_isset(i, set) {\n+                                    -1 => break,\n+                                    0 => continue,\n+                                    _ => count = count + 1,\n+                                }\n+                            }\n+                        }\n+                        libc::_cpuset_destroy(set);\n+                        if let Some(count) = NonZeroUsize::new(count) {\n+                            return Ok(count);\n+                        }\n+                    }\n+                }\n+            }\n+\n             let mut cpus: libc::c_uint = 0;\n             let mut cpus_size = crate::mem::size_of_val(&cpus);\n "}]}