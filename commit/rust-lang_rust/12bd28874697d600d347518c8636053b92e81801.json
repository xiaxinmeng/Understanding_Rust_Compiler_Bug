{"sha": "12bd28874697d600d347518c8636053b92e81801", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYmQyODg3NDY5N2Q2MDBkMzQ3NTE4Yzg2MzYwNTNiOTJlODE4MDE=", "commit": {"author": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-05-25T21:53:22Z"}, "committer": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-06-01T15:13:26Z"}, "message": "incorporate changes from code review\n\nfurther reduce unsafe fn calls\nreduce right drift\nassert! sufficient capacity", "tree": {"sha": "a956bac2e10cd34fd4c3469d24d7ac21a8cc689c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a956bac2e10cd34fd4c3469d24d7ac21a8cc689c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12bd28874697d600d347518c8636053b92e81801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12bd28874697d600d347518c8636053b92e81801", "html_url": "https://github.com/rust-lang/rust/commit/12bd28874697d600d347518c8636053b92e81801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12bd28874697d600d347518c8636053b92e81801/comments", "author": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d0885c3fa85fd05946d69599a3ddd886c9671f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d0885c3fa85fd05946d69599a3ddd886c9671f", "html_url": "https://github.com/rust-lang/rust/commit/d0d0885c3fa85fd05946d69599a3ddd886c9671f"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "90bc2f9769c882fb34bbefb0909ec019e1bb881f", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12bd28874697d600d347518c8636053b92e81801/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12bd28874697d600d347518c8636053b92e81801/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=12bd28874697d600d347518c8636053b92e81801", "patch": "@@ -567,17 +567,19 @@ impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n \n     fn join(&self, sep: &T) -> Vec<T> {\n         let mut iter = self.iter();\n-        iter.next().map_or(vec![], |first| {\n-            let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n-            let mut result = Vec::with_capacity(size + self.len());\n-            result.extend_from_slice(first.borrow());\n-\n-            for v in iter {\n-                result.push(sep.clone());\n-                result.extend_from_slice(v.borrow())\n-            }\n-            result\n-        })\n+        let first = match iter.next() {\n+            Some(first) => first,\n+            None => return vec![],\n+        };\n+        let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n+        let mut result = Vec::with_capacity(size + self.len());\n+        result.extend_from_slice(first.borrow());\n+\n+        for v in iter {\n+            result.push(sep.clone());\n+            result.extend_from_slice(v.borrow())\n+        }\n+        result\n     }\n \n     fn connect(&self, sep: &T) -> Vec<T> {"}, {"sha": "32ca8d1fa5eba835c83378ac15c52589310e72d5", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/12bd28874697d600d347518c8636053b92e81801/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12bd28874697d600d347518c8636053b92e81801/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=12bd28874697d600d347518c8636053b92e81801", "patch": "@@ -130,9 +130,9 @@ macro_rules! spezialize_for_lengths {\n macro_rules! copy_slice_and_advance {\n     ($target:expr, $bytes:expr) => {\n         let len = $bytes.len();\n-        $target.get_unchecked_mut(..len)\n-            .copy_from_slice($bytes);\n-        $target = {$target}.get_unchecked_mut(len..);\n+        let (head, tail) = {$target}.split_at_mut(len);\n+        head.copy_from_slice($bytes);\n+        $target = tail;\n     }\n }\n \n@@ -152,36 +152,42 @@ where\n {\n     let sep_len = sep.len();\n     let mut iter = slice.iter();\n-    iter.next().map_or(vec![], |first| {\n-        // this is wrong without the guarantee that `slice` is non-empty\n-        // if the `len` calculation overflows, we'll panic\n-        // we would have run out of memory anyway and the rest of the function requires\n-        // the entire String pre-allocated for safety\n-        //\n-        // this is the exact len of the resulting String\n-        let len =  sep_len.checked_mul(slice.len() - 1).and_then(|n| {\n-            slice.iter().map(|s| s.borrow().as_ref().len()).try_fold(n, usize::checked_add)\n+\n+    // the first slice is the only one without a separator preceding it\n+    let first = match iter.next() {\n+        Some(first) => first,\n+        None => return vec![],\n+    };\n+\n+    // compute the exact total length of the joined Vec\n+    // if the `len` calculation overflows, we'll panic\n+    // we would have run out of memory anyway and the rest of the function requires\n+    // the entire Vec pre-allocated for safety\n+    let len =  sep_len.checked_mul(iter.len()).and_then(|n| {\n+            slice.iter()\n+                .map(|s| s.borrow().as_ref().len())\n+                .try_fold(n, usize::checked_add)\n         }).expect(\"attempt to join into collection with len > usize::MAX\");\n \n-        // crucial for safety\n-        let mut result = Vec::with_capacity(len);\n+    // crucial for safety\n+    let mut result = Vec::with_capacity(len);\n+    assert!(result.capacity() >= len);\n \n-        unsafe {\n-            result.extend_from_slice(first.borrow().as_ref());\n+    result.extend_from_slice(first.borrow().as_ref());\n \n-            {\n-                let pos = result.len();\n-                let target = result.get_unchecked_mut(pos..len);\n+    unsafe {\n+        {\n+            let pos = result.len();\n+            let target = result.get_unchecked_mut(pos..len);\n \n-                // copy separator and strs over without bounds checks\n-                // generate loops with hardcoded offsets for small separators\n-                // massive improvements possible (~ x2)\n-                spezialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n-            }\n-            result.set_len(len);\n+            // copy separator and slices over without bounds checks\n+            // generate loops with hardcoded offsets for small separators\n+            // massive improvements possible (~ x2)\n+            spezialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n         }\n-        result\n-    })\n+        result.set_len(len);\n+    }\n+    result\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}