{"sha": "63553a10adc8b507edee1fce43f868d93628ce34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNTUzYTEwYWRjOGI1MDdlZGVlMWZjZTQzZjg2OGQ5MzYyOGNlMzQ=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-11-30T08:33:04Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-11-30T08:33:04Z"}, "message": "Fix the ordering of `unsafe` and `extern` in methods\n\nThis breaks code that looks like this:\n\n    trait Foo {\n        extern \"C\" unsafe fn foo();\n    }\n\n    impl Foo for Bar {\n        extern \"C\" unsafe fn foo() { ... }\n    }\n\nChange such code to look like this:\n\n    trait Foo {\n        unsafe extern \"C\" fn foo();\n    }\n\n    impl Foo for Bar {\n        unsafe extern \"C\" fn foo() { ... }\n    }\n\nFixes #19398.\n\n[breaking-change]", "tree": {"sha": "b5161799251d404d1d79786c7e2dfdc2da794ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5161799251d404d1d79786c7e2dfdc2da794ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63553a10adc8b507edee1fce43f868d93628ce34", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63553a10adc8b507edee1fce43f868d93628ce34", "html_url": "https://github.com/rust-lang/rust/commit/63553a10adc8b507edee1fce43f868d93628ce34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63553a10adc8b507edee1fce43f868d93628ce34/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8f41b75f9bec7c7676122f85e049e7d7933298", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8f41b75f9bec7c7676122f85e049e7d7933298", "html_url": "https://github.com/rust-lang/rust/commit/8d8f41b75f9bec7c7676122f85e049e7d7933298"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "c76d9edf63527f045ec827e17f31f0ebc86b9590", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63553a10adc8b507edee1fce43f868d93628ce34/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553a10adc8b507edee1fce43f868d93628ce34/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63553a10adc8b507edee1fce43f868d93628ce34", "patch": "@@ -1296,13 +1296,14 @@ impl<'a> Parser<'a> {\n                 let lo = p.span.lo;\n \n                 let vis = p.parse_visibility();\n+                let style = p.parse_fn_style();\n                 let abi = if p.eat_keyword(keywords::Extern) {\n                     p.parse_opt_abi().unwrap_or(abi::C)\n                 } else {\n                     abi::Rust\n                 };\n+                p.expect_keyword(keywords::Fn);\n \n-                let style = p.parse_fn_style();\n                 let ident = p.parse_ident();\n                 let mut generics = p.parse_generics();\n \n@@ -4458,12 +4459,13 @@ impl<'a> Parser<'a> {\n                                                              self.span.hi) };\n                 (ast::MethMac(m), self.span.hi, attrs)\n             } else {\n+                let fn_style = self.parse_fn_style();\n                 let abi = if self.eat_keyword(keywords::Extern) {\n                     self.parse_opt_abi().unwrap_or(abi::C)\n                 } else {\n                     abi::Rust\n                 };\n-                let fn_style = self.parse_fn_style();\n+                self.expect_keyword(keywords::Fn);\n                 let ident = self.parse_ident();\n                 let mut generics = self.parse_generics();\n                 let (explicit_self, decl) = self.parse_fn_decl_with_self(|p| {\n@@ -5009,14 +5011,13 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parse safe/unsafe and fn\n+    /// Parse unsafe or not\n     fn parse_fn_style(&mut self) -> FnStyle {\n-        if self.eat_keyword(keywords::Fn) { NormalFn }\n-        else if self.eat_keyword(keywords::Unsafe) {\n-            self.expect_keyword(keywords::Fn);\n+        if self.eat_keyword(keywords::Unsafe) {\n             UnsafeFn\n+        } else {\n+            NormalFn\n         }\n-        else { self.unexpected(); }\n     }\n \n "}, {"sha": "3a6d15e0086f7378bb6ee2194ead36ff2364e4de", "filename": "src/test/compile-fail/issue-19398.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63553a10adc8b507edee1fce43f868d93628ce34/src%2Ftest%2Fcompile-fail%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553a10adc8b507edee1fce43f868d93628ce34/src%2Ftest%2Fcompile-fail%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19398.rs?ref=63553a10adc8b507edee1fce43f868d93628ce34", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T {\n+    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found `unsafe`\n+}\n+\n+fn main() {}"}, {"sha": "e3e1cb0f3cac89dd4382828062883174f0e8b66d", "filename": "src/test/compile-fail/removed-syntax-static-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63553a10adc8b507edee1fce43f868d93628ce34/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-static-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553a10adc8b507edee1fce43f868d93628ce34/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-static-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-static-fn.rs?ref=63553a10adc8b507edee1fce43f868d93628ce34", "patch": "@@ -11,5 +11,5 @@\n struct S;\n \n impl S {\n-    static fn f() {} //~ ERROR unexpected token: `static`\n+    static fn f() {} //~ ERROR expected `fn`, found `static`\n }"}, {"sha": "1196162568a916c75ce6f812be1ec751a28d03c3", "filename": "src/test/run-pass/issue-19398.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63553a10adc8b507edee1fce43f868d93628ce34/src%2Ftest%2Frun-pass%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553a10adc8b507edee1fce43f868d93628ce34/src%2Ftest%2Frun-pass%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19398.rs?ref=63553a10adc8b507edee1fce43f868d93628ce34", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T {\n+    unsafe extern \"Rust\" fn foo();\n+}\n+\n+impl T for () {\n+    unsafe extern \"Rust\" fn foo() {}\n+}\n+\n+fn main() {}"}]}