{"sha": "4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzA0NTJhY2VmMTM1NWJhNTY2YTMwYzViZDA0Y2NkM2I5YWNlZjI=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-09T10:06:55Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-10T23:46:00Z"}, "message": "Remove re-exports of std::io::stdio::{print, println} in the prelude.\n\nThe `print!` and `println!` macros are now the preferred method of printing, and so there is no reason to export the `stdio` functions in the prelude. The functions have also been replaced by their macro counterparts in the tutorial and other documentation so that newcomers don't get confused about what they should be using.", "tree": {"sha": "a11738f6d30837655498a8b7d2197bf01452a8f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a11738f6d30837655498a8b7d2197bf01452a8f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "html_url": "https://github.com/rust-lang/rust/commit/4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7ecca20e116b8365d8095fa9618dc11e54cfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7ecca20e116b8365d8095fa9618dc11e54cfbe", "html_url": "https://github.com/rust-lang/rust/commit/ff7ecca20e116b8365d8095fa9618dc11e54cfbe"}], "stats": {"total": 686, "additions": 350, "deletions": 336}, "files": [{"sha": "d7b6608ad45a4e4e83c4fe25eab2e440ca9bfc0e", "filename": "doc/guide-conditions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-conditions.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-conditions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-conditions.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -275,7 +275,7 @@ fn main() {\n \n     };\n     if result.is_err() {\n-            println(\"parsing failed\");\n+            println!(\"parsing failed\");\n     }\n }\n "}, {"sha": "668e263697c9da5aafefcd58d8c3d040ef395fdf", "filename": "doc/guide-container.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-container.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -218,12 +218,12 @@ let xs = [2u, 3, 5, 7, 11, 13, 17];\n \n // print out all the elements in the vector\n for x in xs.iter() {\n-    println(x.to_str())\n+    println!(\"{}\", *x)\n }\n \n // print out all but the first 3 elements in the vector\n for x in xs.iter().skip(3) {\n-    println(x.to_str())\n+    println!(\"{}\", *x)\n }\n ~~~\n "}, {"sha": "caa149c6e140f8406bc0988b87fd4d00a8586de7", "filename": "doc/guide-pointers.md", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-pointers.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -222,7 +222,7 @@ struct Point {\n fn main() {\n     let a = Point { x: 10, y: 20 };\n     do spawn {\n-        println(a.x.to_str());\n+        println!(\"{}\", a.x);\n     }\n }\n ~~~\n@@ -239,7 +239,7 @@ struct Point {\n fn main() {\n     let a = ~Point { x: 10, y: 20 };\n     do spawn {\n-        println(a.x.to_str());\n+        println!(\"{}\", a.x);\n     }\n }\n ~~~\n@@ -270,18 +270,22 @@ struct Point {\n fn main() {\n     let a = ~Point { x: 10, y: 20 };\n     let b = a;\n-    println(b.x.to_str());\n-    println(a.x.to_str());\n+    println!(\"{}\", b.x);\n+    println!(\"{}\", a.x);\n }\n ~~~\n \n You'll get this error:\n \n ~~~ {.notrust}\n-test.rs:10:12: 10:13 error: use of moved value: `a`\n-test.rs:10     println(a.x.to_str());\n-                       ^\n-test.rs:8:8: 8:9 note: `a` moved here because it has type `~Point`, which is moved by default (use `ref` to override)\n+test.rs:10:20: 10:21 error: use of moved value: `a`\n+test.rs:10     println!(\"{}\", a.x);\n+                              ^\n+note: in expansion of format_args!\n+<std-macros>:158:27: 158:81 note: expansion site\n+<std-macros>:157:5: 159:6 note: in expansion of println!\n+test.rs:10:5: 10:25 note: expansion site\n+test.rs:8:9: 8:10 note: `a` moved here because it has type `~Point`, which is moved by default (use `ref` to override)\n test.rs:8     let b = a;\n                   ^\n ~~~\n@@ -297,8 +301,8 @@ struct Point {\n fn main() {\n     let a = @Point { x: 10, y: 20 };\n     let b = a;\n-    println(b.x.to_str());\n-    println(a.x.to_str());\n+    println!(\"{}\", b.x);\n+    println!(\"{}\", a.x);\n }\n ~~~\n \n@@ -367,7 +371,7 @@ compile?\n \n ~~~rust{.xfail-test}\n fn main() {\n-    println(x.to_str());\n+    println!(\"{}\", x);\n     let x = 5;\n }\n ~~~"}, {"sha": "eccdf249156a93c6142b5c4121baf7e9ee623c6b", "filename": "doc/guide-rustpkg.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-rustpkg.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-rustpkg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-rustpkg.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -143,7 +143,7 @@ Next, let's add a source file:\n #[license = \"MIT\"];\n \n pub fn world() {\n-    println(\"Hello, world.\");\n+    println!(\"Hello, world.\");\n }\n ~~~\n "}, {"sha": "80261314d2abd8e211cbe5d7d18c47590d7113e3", "filename": "doc/guide-tasks.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-tasks.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -72,15 +72,15 @@ closure in the new task.\n # use std::task::spawn;\n \n // Print something profound in a different task using a named function\n-fn print_message() { println(\"I am running in a different task!\"); }\n+fn print_message() { println!(\"I am running in a different task!\"); }\n spawn(print_message);\n \n // Print something more profound in a different task using a lambda expression\n-spawn(proc() println(\"I am also running in a different task!\") );\n+spawn(proc() println!(\"I am also running in a different task!\") );\n \n // The canonical way to spawn is using `do` notation\n do spawn {\n-    println(\"I too am running in a different task!\");\n+    println!(\"I too am running in a different task!\");\n }\n ~~~~\n "}, {"sha": "8e967ea780e046092b8a939ef1a5e92b517062bf", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -2668,7 +2668,7 @@ An example:\n let mut i = 0;\n \n while i < 10 {\n-    println(\"hello\\n\");\n+    println!(\"hello\");\n     i = i + 1;\n }\n ~~~~\n@@ -3267,7 +3267,7 @@ impl Printable for int {\n }\n \n fn print(a: @Printable) {\n-   println(a.to_string());\n+   println!(\"{}\", a.to_string());\n }\n \n fn main() {"}, {"sha": "bb5e1bdd7bc77a079029f43a531db1878c28a1eb", "filename": "doc/tutorial.md", "status": "modified", "additions": 68, "deletions": 63, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -130,7 +130,7 @@ we have a file `hello.rs` containing this program:\n \n ~~~~\n fn main() {\n-    println(\"hello?\");\n+    println!(\"hello?\");\n }\n ~~~~\n \n@@ -140,12 +140,12 @@ Windows) which, upon running, will likely do exactly what you expect.\n \n The Rust compiler tries to provide useful information when it encounters an\n error. If you introduce an error into the program (for example, by changing\n-`println` to some nonexistent function), and then compile it, you'll see\n+`println!` to some nonexistent macro), and then compile it, you'll see\n an error message like this:\n \n ~~~~ {.notrust}\n-hello.rs:2:4: 2:16 error: unresolved name: print_with_unicorns\n-hello.rs:2     print_with_unicorns(\"hello?\");\n+hello.rs:2:5: 2:24 error: macro undefined: 'print_with_unicorns'\n+hello.rs:2     print_with_unicorns!(\"hello?\");\n                ^~~~~~~~~~~~~~~~~~~\n ~~~~\n \n@@ -424,11 +424,11 @@ compulsory, an `if` can have an optional `else` clause, and multiple\n \n ~~~~\n if false {\n-    println(\"that's odd\");\n+    println!(\"that's odd\");\n } else if true {\n-    println(\"right\");\n+    println!(\"right\");\n } else {\n-    println(\"neither true nor false\");\n+    println!(\"neither true nor false\");\n }\n ~~~~\n \n@@ -456,10 +456,10 @@ executes its corresponding arm.\n ~~~~\n # let my_number = 1;\n match my_number {\n-  0     => println(\"zero\"),\n-  1 | 2 => println(\"one or two\"),\n-  3..10 => println(\"three to ten\"),\n-  _     => println(\"something else\")\n+  0     => println!(\"zero\"),\n+  1 | 2 => println!(\"one or two\"),\n+  3..10 => println!(\"three to ten\"),\n+  _     => println!(\"something else\")\n }\n ~~~~\n \n@@ -484,8 +484,8 @@ commas are optional.\n ~~~\n # let my_number = 1;\n match my_number {\n-  0 => { println(\"zero\") }\n-  _ => { println(\"something else\") }\n+  0 => { println!(\"zero\") }\n+  _ => { println!(\"something else\") }\n }\n ~~~\n \n@@ -563,7 +563,7 @@ let mut x = 5u;\n loop {\n     x += x - 3;\n     if x % 5 == 0 { break; }\n-    println(x.to_str());\n+    println!(\"{}\", x);\n }\n ~~~~\n \n@@ -613,8 +613,8 @@ origin.y += 1.0; // ERROR: assigning to immutable field\n # struct Point { x: f64, y: f64 }\n # let mypoint = Point { x: 0.0, y: 0.0 };\n match mypoint {\n-    Point { x: 0.0, y: yy } => { println(yy.to_str());                     }\n-    Point { x: xx,  y: yy } => { println(xx.to_str() + \" \" + yy.to_str()); }\n+    Point { x: 0.0, y: yy } => println!(\"{}\", yy),\n+    Point { x: xx,  y: yy } => println!(\"{} {}\", xx, yy),\n }\n ~~~~\n \n@@ -629,7 +629,7 @@ reuses the field name as the binding name.\n # struct Point { x: f64, y: f64 }\n # let mypoint = Point { x: 0.0, y: 0.0 };\n match mypoint {\n-    Point { x, .. } => { println(x.to_str()) }\n+    Point { x, .. } => println!(\"{}\", x),\n }\n ~~~\n \n@@ -1777,7 +1777,7 @@ structure.\n ~~~~\n # fn call_it(op: proc(v: int)) { }\n call_it(proc(n) {\n-    println(n.to_str());\n+    println!(\"{}\", n);\n });\n ~~~~\n \n@@ -1787,7 +1787,7 @@ call for these functions.\n ~~~~\n # fn call_it(op: proc(v: int)) { }\n do call_it() |n| {\n-    println(n.to_str());\n+    println!(\"{}\", n);\n }\n ~~~~\n \n@@ -2124,7 +2124,7 @@ struct TimeBomb {\n impl Drop for TimeBomb {\n     fn drop(&mut self) {\n         for _ in range(0, self.explosivity) {\n-            println(\"blam!\");\n+            println!(\"blam!\");\n         }\n     }\n }\n@@ -2168,7 +2168,7 @@ impl Printable for int {\n }\n \n impl Printable for ~str {\n-    fn print(&self) { println(*self) }\n+    fn print(&self) { println!(\"{}\", *self) }\n }\n \n # 1.print();\n@@ -2214,7 +2214,7 @@ trait Printable {\n impl Printable for int {}\n \n impl Printable for ~str {\n-    fn print(&self) { println(*self) }\n+    fn print(&self) { println!(\"{}\", *self) }\n }\n \n impl Printable for bool {}\n@@ -2561,7 +2561,7 @@ For example, for a simple hello world program your crate only consists of this c\n ~~~~\n // main.rs\n fn main() {\n-    println(\"Hello world!\");\n+    println!(\"Hello world!\");\n }\n ~~~~\n \n@@ -2583,18 +2583,18 @@ All modules in a crate below the crate root are declared with the `mod` keyword:\n mod farm {\n     // This is the body of module 'farm' declared in the crate root.\n \n-    fn chicken() { println(\"cluck cluck\"); }\n-    fn cow() { println(\"mooo\"); }\n+    fn chicken() { println!(\"cluck cluck\"); }\n+    fn cow() { println!(\"mooo\"); }\n \n     mod barn {\n         // Body of module 'barn'\n \n-        fn hay() { println(\"...\"); }\n+        fn hay() { println!(\"...\"); }\n     }\n }\n \n fn main() {\n-    println(\"Hello farm!\");\n+    println!(\"Hello farm!\");\n }\n ~~~~\n \n@@ -2611,12 +2611,12 @@ One way to do it is to simply fully qualifying it:\n \n ~~~~ {.xfail-test}\n mod farm {\n-    fn chicken() { println(\"cluck cluck\"); }\n+    fn chicken() { println!(\"cluck cluck\"); }\n     // ...\n }\n \n fn main() {\n-    println(\"Hello chicken!\");\n+    println!(\"Hello chicken!\");\n \n     ::farm::chicken(); // Won't compile yet, see further down\n }\n@@ -2639,13 +2639,13 @@ _public_ with `pub`:\n \n ~~~~\n mod farm {\n-    pub fn chicken() { println(\"cluck cluck\"); }\n-    pub fn cow() { println(\"mooo\"); }\n+    pub fn chicken() { println!(\"cluck cluck\"); }\n+    pub fn cow() { println!(\"mooo\"); }\n     // ...\n }\n \n fn main() {\n-    println(\"Hello chicken!\");\n+    println!(\"Hello chicken!\");\n     ::farm::chicken(); // This compiles now\n }\n ~~~~\n@@ -2725,18 +2725,18 @@ So, if we want to move the content of `mod farm` into it's own file, it would lo\n mod farm; // Compiler will look for 'farm.rs' and 'farm/mod.rs'\n \n fn main() {\n-    println(\"Hello farm!\");\n+    println!(\"Hello farm!\");\n     ::farm::cow();\n }\n ~~~~\n \n ~~~~\n // farm.rs - contains body of module 'farm' in the crate root\n-pub fn chicken() { println(\"cluck cluck\"); }\n-pub fn cow() { println(\"mooo\"); }\n+pub fn chicken() { println!(\"cluck cluck\"); }\n+pub fn cow() { println!(\"mooo\"); }\n \n pub mod barn {\n-    pub fn hay() { println(\"...\"); }\n+    pub fn hay() { println!(\"...\"); }\n }\n # fn main() { }\n ~~~~\n@@ -2843,7 +2843,7 @@ without the `::` prefix. For example, this imports `cow` into the local scope:\n \n ~~~\n use farm::cow;\n-# mod farm { pub fn cow() { println(\"I'm a hidden ninja cow!\") } }\n+# mod farm { pub fn cow() { println!(\"I'm a hidden ninja cow!\") } }\n # fn main() { cow() }\n ~~~\n \n@@ -2861,7 +2861,7 @@ while adding a `self::` prefix will start in the current module:\n \n ~~~\n # mod workaround {\n-# pub fn some_parent_item(){ println(\"...\") }\n+# pub fn some_parent_item(){ println!(\"...\") }\n # mod foo {\n use super::some_parent_item;\n use self::some_child_module::some_item;\n@@ -2883,8 +2883,8 @@ scope with corresponding `use` statements.\n # // XXX: Allow unused import in doc test\n use farm::cow;\n // ...\n-# mod farm { pub fn cow() { println(\"Hidden ninja cow is hidden.\") } }\n-fn cow() { println(\"Mooo!\") }\n+# mod farm { pub fn cow() { println!(\"Hidden ninja cow is hidden.\") } }\n+fn cow() { println!(\"Mooo!\") }\n \n fn main() {\n     cow() // resolves to the locally defined cow() function\n@@ -2902,7 +2902,7 @@ even if they refer to things inside them:\n ~~~\n use farm::cow;\n mod farm {\n-    pub fn cow() { println(\"Moooooo?\") }\n+    pub fn cow() { println!(\"Moooooo?\") }\n }\n \n fn main() { cow() }\n@@ -2916,16 +2916,16 @@ use farm::cow;\n use farm::barn;\n \n mod farm {\n-    pub fn chicken() { println(\"cluck cluck\"); }\n-    pub fn cow() { println(\"mooo\"); }\n+    pub fn chicken() { println!(\"cluck cluck\"); }\n+    pub fn cow() { println!(\"mooo\"); }\n \n     pub mod barn {\n-        pub fn hay() { println(\"...\"); }\n+        pub fn hay() { println!(\"...\"); }\n     }\n }\n \n fn main() {\n-    println(\"Hello farm!\");\n+    println!(\"Hello farm!\");\n \n     // Can now refer to those names directly:\n     chicken();\n@@ -2952,7 +2952,7 @@ pub fn foo() { bar(); }\n \n ~~~\n // c.rs\n-pub fn bar() { println(\"Baz!\"); }\n+pub fn bar() { println!(\"Baz!\"); }\n # fn main() {}\n ~~~\n \n@@ -2963,8 +2963,8 @@ There also exist two short forms for importing multiple names at once:\n ~~~\n use farm::{chicken, cow};\n # mod farm {\n-#     pub fn cow() { println(\"Did I already mention how hidden and ninja I am?\") }\n-#     pub fn chicken() { println(\"I'm Bat-chicken, guardian of the hidden tutorial code.\") }\n+#     pub fn cow() { println!(\"Did I already mention how hidden and ninja I am?\") }\n+#     pub fn chicken() { println!(\"I'm Bat-chicken, guardian of the hidden tutorial code.\") }\n # }\n # fn main() { cow(); chicken() }\n ~~~\n@@ -2974,8 +2974,8 @@ use farm::{chicken, cow};\n ~~~\n use farm::*;\n # mod farm {\n-#     pub fn cow() { println(\"Bat-chicken? What a stupid name!\") }\n-#     pub fn chicken() { println(\"Says the 'hidden ninja' cow.\") }\n+#     pub fn cow() { println!(\"Bat-chicken? What a stupid name!\") }\n+#     pub fn chicken() { println!(\"Says the 'hidden ninja' cow.\") }\n # }\n # fn main() { cow(); chicken() }\n ~~~\n@@ -2988,7 +2988,7 @@ However, that's not all. You can also rename an item while you're bringing it in\n \n ~~~\n use egg_layer = farm::chicken;\n-# mod farm { pub fn chicken() { println(\"Laying eggs is fun!\")  } }\n+# mod farm { pub fn chicken() { println!(\"Laying eggs is fun!\")  } }\n // ...\n \n fn main() {\n@@ -3010,11 +3010,11 @@ For that, you write `pub use`:\n mod farm {\n     pub use self::barn::hay;\n \n-    pub fn chicken() { println(\"cluck cluck\"); }\n-    pub fn cow() { println(\"mooo\"); }\n+    pub fn chicken() { println!(\"cluck cluck\"); }\n+    pub fn cow() { println!(\"mooo\"); }\n \n     mod barn {\n-        pub fn hay() { println(\"...\"); }\n+        pub fn hay() { println!(\"...\"); }\n     }\n }\n \n@@ -3082,7 +3082,7 @@ use farm::dog;\n use extra::rational::Ratio;\n \n mod farm {\n-    pub fn dog() { println(\"woof\"); }\n+    pub fn dog() { println!(\"woof\"); }\n }\n \n fn main() {\n@@ -3180,7 +3180,7 @@ pub fn explore() -> &'static str { \"world\" }\n ~~~~ {.xfail-test}\n // main.rs\n extern mod world;\n-fn main() { println(\"hello \" + world::explore()); }\n+fn main() { println!(\"hello {}\", world::explore()); }\n ~~~~\n \n Now compile and run like this (adjust to your platform if necessary):\n@@ -3200,7 +3200,7 @@ a hash representing the crates package ID.\n ## The standard library and the prelude\n \n While reading the examples in this tutorial, you might have asked yourself where all\n-those magical predefined items like `println()` are coming from.\n+those magical predefined items like `range` are coming from.\n \n The truth is, there's nothing magical about them: They are all defined normally\n in the `std` library, which is a crate that ships with Rust.\n@@ -3219,19 +3219,24 @@ use std::prelude::*;\n \n The role of the `prelude` module is to re-export common definitions from `std`.\n \n-This allows you to use common types and functions like `Option<T>` or `println`\n+This allows you to use common types and functions like `Option<T>` or `range`\n without needing to import them. And if you need something from `std` that's not in the prelude,\n you just have to import it with an `use` statement.\n \n-For example, it re-exports `println` which is defined in `std::io::stdio::println`:\n+For example, it re-exports `range` which is defined in `std::iter::range`:\n \n ~~~\n-use puts = std::io::stdio::println;\n+use iter_range = std::iter::range;\n \n fn main() {\n-    println(\"println is imported per default.\");\n-    puts(\"Doesn't hinder you from importing it under a different name yourself.\");\n-    ::std::io::stdio::println(\"Or from not using the automatic import.\");\n+    // range is imported by default\n+    for _ in range(0, 10) {}\n+\n+    // Doesn't hinder you from importing it under a different name yourself\n+    for _ in iter_range(0, 10) {}\n+\n+    // Or from not using the automatic import.\n+    for _ in ::std::iter::range(0, 10) {}\n }\n ~~~\n "}, {"sha": "2e1384a110df226c2cbec51fda47429abfcb893f", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -84,8 +84,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n     let args_ = args.tail();\n     if args[1] == ~\"-h\" || args[1] == ~\"--help\" {\n         let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n-        println(getopts::groups::usage(message, groups));\n-        println(\"\");\n+        println!(\"{}\", getopts::groups::usage(message, groups));\n+        println!(\"\");\n         fail!()\n     }\n \n@@ -97,8 +97,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         let message = format!(\"Usage: {} [OPTIONS]  [TESTNAME...]\", argv0);\n-        println(getopts::groups::usage(message, groups));\n-        println(\"\");\n+        println!(\"{}\", getopts::groups::usage(message, groups));\n+        println!(\"\");\n         fail!()\n     }\n \n@@ -219,8 +219,8 @@ pub fn run_tests(config: &config) {\n     if config.target == ~\"arm-linux-androideabi\" {\n         match config.mode{\n             mode_debug_info => {\n-                println(\"arm-linux-androideabi debug-info \\\n-                        test uses tcp 5039 port. please reserve it\");\n+                println!(\"arm-linux-androideabi debug-info \\\n+                         test uses tcp 5039 port. please reserve it\");\n                 //arm-linux-androideabi debug-info test uses remote debugger\n                 //so, we test 1 task at once\n                 os::setenv(\"RUST_TEST_TASKS\",\"1\");"}, {"sha": "d127269ab41ba47641a816565df4110db54f0d6d", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -53,5 +53,5 @@ pub fn path_div() -> ~str { ~\";\" }\n \n pub fn logv(config: &config, s: ~str) {\n     debug!(\"{}\", s);\n-    if config.verbose { println(s); }\n+    if config.verbose { println!(\"{}\", s); }\n }"}, {"sha": "bf86bf526a29de3da6d404811faca4ad188a0f6c", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -35,17 +35,17 @@\n //! use std::os;\n //!\n //! fn do_work(inp: &str, out: Option<~str>) {\n-//!     println(inp);\n-//!     println(match out {\n-//!         Some(x) => x,\n-//!         None => ~\"No Output\"\n-//!     });\n+//!     println!(\"{}\", inp);\n+//!     match out {\n+//!         Some(x) => println!(\"{}\", x),\n+//!         None => println!(\"No Output\"),\n+//!     }\n //! }\n //!\n //! fn print_usage(program: &str, _opts: &[Opt]) {\n //!     println!(\"Usage: {} [options]\", program);\n-//!     println(\"-o\\t\\tOutput\");\n-//!     println(\"-h --help\\tUsage\");\n+//!     println!(\"-o\\t\\tOutput\");\n+//!     println!(\"-h --help\\tUsage\");\n //! }\n //!\n //! fn main() {"}, {"sha": "a978d1f65beefe4fbf738a5f7dcba80b5cfa99d0", "filename": "src/libextra/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -226,10 +226,10 @@ fn optgroups() -> ~[getopts::groups::OptGroup] {\n \n fn usage(binary: &str, helpstr: &str) {\n     let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n-    println(groups::usage(message, optgroups()));\n-    println(\"\");\n+    println!(\"{}\", groups::usage(message, optgroups()));\n+    println!(\"\");\n     if helpstr == \"help\" {\n-        println(\"\\\n+        println!(\"{}\", \"\\\n The FILTER is matched against the name of all tests to run, and if any tests\n have a substring match, only those tests are run.\n "}, {"sha": "657ff1737df116ce57f89a2b7f606e6c64498845", "filename": "src/libextra/url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -393,7 +393,7 @@ fn query_from_str(rawquery: &str) -> Query {\n  * use extra::url;\n  *\n  * let query = ~[(~\"title\", ~\"The Village\"), (~\"north\", ~\"52.91\"), (~\"west\", ~\"4.10\")];\n- * println(url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n+ * println!(\"{}\", url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n  * ```\n  */\n pub fn query_to_str(query: &Query) -> ~str {"}, {"sha": "b9e3e817414a555b7021245f5a390b9a132423cf", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -34,7 +34,7 @@ use extra::uuid::Uuid;\n \n fn main() {\n     let uuid1 = Uuid::new_v4();\n-    println(uuid1.to_str());\n+    println!(\"{}\", uuid1.to_str());\n }\n  ```\n "}, {"sha": "db4666c42b60b6a7bb3f6a6429a8a5adce28312b", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -536,5 +536,5 @@ fn test() {\n         }\n     });\n \n-    println(s);\n+    println!(\"{}\", s);\n }"}, {"sha": "f997c69b159d160a84fc5c87b265f52890af8e3f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -160,7 +160,7 @@ Additional help:\n }\n \n pub fn describe_warnings() {\n-    println(\"\n+    println!(\"\n Available lint options:\n     -W <foo>           Warn about <foo>\n     -A <foo>           Allow <foo>\n@@ -181,7 +181,7 @@ Available lint options:\n     fn padded(max: uint, s: &str) -> ~str {\n         \" \".repeat(max - s.len()) + s\n     }\n-    println(\"\\nAvailable lint checks:\\n\");\n+    println!(\"{}\", \"\\nAvailable lint checks:\\n\"); // FIXME: #9970\n     println!(\"    {}  {:7.7s}  {}\",\n              padded(max_key, \"name\"), \"default\", \"meaning\");\n     println!(\"    {}  {:7.7s}  {}\\n\",\n@@ -193,11 +193,11 @@ Available lint options:\n                  lint::level_to_str(spec.default),\n                  spec.desc);\n     }\n-    println(\"\");\n+    println!(\"\");\n }\n \n pub fn describe_debug_flags() {\n-    println(\"\\nAvailable debug options:\\n\");\n+    println!(\"{}\", \"\\nAvailable debug options:\\n\"); // FIXME: #9970\n     let r = session::debugging_opts_map();\n     for tuple in r.iter() {\n         match *tuple {\n@@ -312,10 +312,10 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n                 }\n             };\n             if crate_id {\n-                println(crateid.to_str());\n+                println!(\"{}\", crateid.to_str());\n             }\n             if crate_name {\n-                println(crateid.name);\n+                println!(\"{}\", crateid.name);\n             }\n         }\n "}, {"sha": "5848744ec1cda6e8b16b3d1162a4d86438cce09f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1905,7 +1905,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, crate: &Crate)\n             }\n         }\n \n-        println(\"metadata stats:\");\n+        println!(\"metadata stats:\");\n         println!(\"    inline bytes: {}\", ecx.stats.inline_bytes.get());\n         println!(\" attribute bytes: {}\", ecx.stats.attr_bytes.get());\n         println!(\"       dep bytes: {}\", ecx.stats.dep_bytes.get());"}, {"sha": "a2840e93c2f648e0163d4a2a82f6ed0976781a08", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -93,7 +93,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     visit::walk_crate(bccx, crate, ());\n \n     if tcx.sess.borrowck_stats() {\n-        println(\"--- borrowck stats ---\");\n+        println!(\"--- borrowck stats ---\");\n         println!(\"paths requiring guarantees: {}\",\n                  bccx.stats.guaranteed_paths.get());\n         println!(\"paths requiring loans     : {}\","}, {"sha": "dbe7a03ad0cd07d45968cf20b6303190ce2fdaa8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -3367,7 +3367,7 @@ pub fn trans_crate(sess: session::Session,\n     // Translate the metadata.\n     let metadata = write_metadata(ccx, &crate);\n     if ccx.sess.trans_stats() {\n-        println(\"--- trans stats ---\");\n+        println!(\"--- trans stats ---\");\n         println!(\"n_static_tydescs: {}\", ccx.stats.n_static_tydescs.get());\n         println!(\"n_glues_created: {}\", ccx.stats.n_glues_created.get());\n         println!(\"n_null_glues: {}\", ccx.stats.n_null_glues.get());\n@@ -3377,7 +3377,7 @@ pub fn trans_crate(sess: session::Session,\n         println!(\"n_monos: {}\", ccx.stats.n_monos.get());\n         println!(\"n_inlines: {}\", ccx.stats.n_inlines.get());\n         println!(\"n_closures: {}\", ccx.stats.n_closures.get());\n-        println(\"fn stats:\");\n+        println!(\"fn stats:\");\n         {\n             let mut fn_stats = ccx.stats.fn_stats.borrow_mut();\n             fn_stats.get().sort_by(|&(_, _, insns_a), &(_, _, insns_b)| {"}, {"sha": "69d5f631e360c579b64942e6aea795f8ca248bea", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -105,14 +105,14 @@ pub fn opts() -> ~[groups::OptGroup] {\n }\n \n pub fn usage(argv0: &str) {\n-    println(groups::usage(format!(\"{} [options] <input>\", argv0), opts()));\n+    println!(\"{}\", groups::usage(format!(\"{} [options] <input>\", argv0), opts()));\n }\n \n pub fn main_args(args: &[~str]) -> int {\n     let matches = match groups::getopts(args.tail(), opts()) {\n         Ok(m) => m,\n         Err(err) => {\n-            println(err.to_err_msg());\n+            println!(\"{}\", err.to_err_msg());\n             return 1;\n         }\n     };\n@@ -122,10 +122,10 @@ pub fn main_args(args: &[~str]) -> int {\n     }\n \n     if matches.free.len() == 0 {\n-        println(\"expected an input file to act on\");\n+        println!(\"expected an input file to act on\");\n         return 1;\n     } if matches.free.len() > 1 {\n-        println(\"only one input file may be specified\");\n+        println!(\"only one input file may be specified\");\n         return 1;\n     }\n     let input = matches.free[0].as_slice();\n@@ -135,11 +135,11 @@ pub fn main_args(args: &[~str]) -> int {\n     }\n \n     if matches.opt_strs(\"passes\") == ~[~\"list\"] {\n-        println(\"Available passes for running rustdoc:\");\n+        println!(\"Available passes for running rustdoc:\");\n         for &(name, _, description) in PASSES.iter() {\n             println!(\"{:>20s} - {}\", name, description);\n         }\n-        println(\"\\nDefault passes for rustdoc:\");\n+        println!(\"{}\", \"\\nDefault passes for rustdoc:\"); // FIXME: #9970\n         for &name in DEFAULT_PASSES.iter() {\n             println!(\"{:>20s}\", name);\n         }"}, {"sha": "51b42869c75954104b70fa8ce8b23a52480afbc5", "filename": "src/librustpkg/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcontext.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -269,43 +269,43 @@ pub fn flags_forbidden_for_cmd(flags: &RustcFlags,\n     };\n \n     if flags.linker.is_some() && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The --linker option can only be used with the build or install commands.\");\n+        println!(\"The --linker option can only be used with the build or install commands.\");\n         return true;\n     }\n     if flags.link_args.is_some() && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The --link-args option can only be used with the build or install commands.\");\n+        println!(\"The --link-args option can only be used with the build or install commands.\");\n         return true;\n     }\n \n     if !cfgs.is_empty() && cmd != BuildCmd && cmd != InstallCmd && cmd != TestCmd {\n-        println(\"The --cfg option can only be used with the build, test, or install commands.\");\n+        println!(\"The --cfg option can only be used with the build, test, or install commands.\");\n         return true;\n     }\n \n     if user_supplied_opt_level && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The -O and --opt-level options can only be used with the build \\\n+        println!(\"The -O and --opt-level options can only be used with the build \\\n                     or install commands.\");\n         return true;\n     }\n \n     if flags.save_temps  && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The --save-temps option can only be used with the build \\\n+        println!(\"The --save-temps option can only be used with the build \\\n                     or install commands.\");\n         return true;\n     }\n \n     if flags.target.is_some()  && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The --target option can only be used with the build \\\n+        println!(\"The --target option can only be used with the build \\\n                     or install commands.\");\n         return true;\n     }\n     if flags.target_cpu.is_some()  && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The --target-cpu option can only be used with the build \\\n+        println!(\"The --target-cpu option can only be used with the build \\\n                     or install commands.\");\n         return true;\n     }\n     if flags.experimental_features.is_some() && cmd != BuildCmd && cmd != InstallCmd {\n-        println(\"The -Z option can only be used with the build or install commands.\");\n+        println!(\"The -Z option can only be used with the build or install commands.\");\n         return true;\n     }\n "}, {"sha": "3d2ef2ebabad01a536ae8cba2e2a2588e82bfe11", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -364,9 +364,9 @@ impl CtxMethods for BuildContext {\n                 }\n             }\n             ListCmd => {\n-                println(\"Installed packages:\");\n+                println!(\"Installed packages:\");\n                 installed_packages::list_installed_packages(|pkg_id| {\n-                    pkg_id.path.display().with_str(|s| println(s));\n+                    pkg_id.path.display().with_str(|s| println!(\"{}\", s));\n                     true\n                 });\n             }\n@@ -747,7 +747,7 @@ impl CtxMethods for BuildContext {\n }\n \n pub fn main() {\n-    println(\"WARNING: The Rust package manager is experimental and may be unstable\");\n+    println!(\"WARNING: The Rust package manager is experimental and may be unstable\");\n     os::set_exit_status(main_args(os::args()));\n }\n "}, {"sha": "7da99c5d5621be2d2b701891a6c706e82031dc13", "filename": "src/librustpkg/source_control.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Fsource_control.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Fsource_control.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsource_control.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -38,8 +38,8 @@ pub fn safe_git_clone(source: &Path, v: &Version, target: &Path) -> CloneResult\n                                                        target.as_str().unwrap().to_owned()]);\n             let outp = opt_outp.expect(\"Failed to exec `git`\");\n             if !outp.status.success() {\n-                println(str::from_utf8_owned(outp.output.clone()));\n-                println(str::from_utf8_owned(outp.error));\n+                println!(\"{}\", str::from_utf8_owned(outp.output.clone()));\n+                println!(\"{}\", str::from_utf8_owned(outp.error));\n                 return DirToUse(target.clone());\n             }\n             else {\n@@ -54,8 +54,8 @@ pub fn safe_git_clone(source: &Path, v: &Version, target: &Path) -> CloneResult\n                              format!(\"--git-dir={}\", git_dir.as_str().unwrap().to_owned()),\n                              ~\"checkout\", format!(\"{}\", *s)]).expect(\"Failed to exec `git`\");\n                         if !outp.status.success() {\n-                            println(str::from_utf8_owned(outp.output.clone()));\n-                            println(str::from_utf8_owned(outp.error));\n+                            println!(\"{}\", str::from_utf8_owned(outp.output.clone()));\n+                            println!(\"{}\", str::from_utf8_owned(outp.error));\n                             return DirToUse(target.clone());\n                         }\n                     }"}, {"sha": "a4c2c1baabeffe37906b0fa8cc66e230da2a4c2a", "filename": "src/librustpkg/testsuite/fail/src/no-inferred-crates/src/zzyzx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Ftestsuite%2Ffail%2Fsrc%2Fno-inferred-crates%2Fsrc%2Fzzyzx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Ftestsuite%2Ffail%2Fsrc%2Fno-inferred-crates%2Fsrc%2Fzzyzx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Ffail%2Fsrc%2Fno-inferred-crates%2Fsrc%2Fzzyzx.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,5 +16,5 @@ The test runner should check that, after `rustpkg build hello-world`:\n */\n \n fn main() {\n-    println(~\"Hello world!\");\n+    println!(\"Hello world!\");\n }"}, {"sha": "b6c5e15c09a5f94ac0b81512d7c95b1cff7324dd", "filename": "src/librustpkg/testsuite/pass/src/c-dependencies/pkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fc-dependencies%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fc-dependencies%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fc-dependencies%2Fpkg.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n     }\n \n     if args[2] != ~\"install\" {\n-        println(format!(\"Warning: I don't know how to {}\", args[2]));\n+        println!(\"Warning: I don't know how to {}\", args[2]);\n         return;\n     }\n "}, {"sha": "54b536664a3453943822f51dfacc2136a36e3227", "filename": "src/librustpkg/testsuite/pass/src/hello-world/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fhello-world%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fhello-world%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fhello-world%2Fmain.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -19,5 +19,5 @@ The test runner should check that, after `rustpkg build hello-world`:\n */\n \n fn main() {\n-    println(\"Hello world!\");\n+    println!(\"Hello world!\");\n }"}, {"sha": "6fcafac4e5bddcf1386eaccb4e7cc039de3acfd8", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -11,7 +11,7 @@\n use context::Command;\n \n pub fn general() {\n-    println(\"Usage: rustpkg [options] <cmd> [args..]\n+    println!(\"Usage: rustpkg [options] <cmd> [args..]\n \n Where <cmd> is one of:\n     build, clean, do, info, install, list, prefer, test, uninstall, unprefer\n@@ -24,7 +24,7 @@ Options:\n }\n \n pub fn build() {\n-    println(\"rustpkg build [options..] [package-ID]\n+    println!(\"rustpkg build [options..] [package-ID]\n \n Build the given package ID if specified. With no package ID argument,\n build the package in the current directory. In that case, the current\n@@ -50,21 +50,21 @@ Options:\n }\n \n pub fn clean() {\n-    println(\"rustpkg clean\n+    println!(\"rustpkg clean\n \n Remove all build files in the work cache for the package in the current\n directory.\");\n }\n \n pub fn do_cmd() {\n-    println(\"rustpkg do <cmd>\n+    println!(r\"rustpkg do <cmd>\n \n Runs a command in the package script. You can listen to a command\n-by tagging a function with the attribute `#[pkg_do(cmd)]`.\");\n+by tagging a function with the attribute `\\#[pkg_do(cmd)]`.\");\n }\n \n pub fn info() {\n-    println(\"rustpkg [options..] info\n+    println!(\"rustpkg [options..] info\n \n Probe the package script in the current directory for information.\n \n@@ -73,13 +73,13 @@ Options:\n }\n \n pub fn list() {\n-    println(\"rustpkg list\n+    println!(\"rustpkg list\n \n List all installed packages.\");\n }\n \n pub fn install() {\n-    println(\"rustpkg install [options..] [package-ID]\n+    println!(r\"rustpkg install [options..] [package-ID]\n \n Install the given package ID if specified. With no package ID\n argument, install the package in the current directory.\n@@ -89,7 +89,7 @@ In that case, the current directory must be a direct child of a\n Examples:\n     rustpkg install\n     rustpkg install github.com/mozilla/servo\n-    rustpkg install github.com/mozilla/servo#0.1.2\n+    rustpkg install github.com/mozilla/servo\\#0.1.2\n \n Options:\n     -c, --cfg      Pass a cfg flag to the package script\n@@ -105,14 +105,14 @@ Options:\n }\n \n pub fn uninstall() {\n-    println(\"rustpkg uninstall <id|name>[@version]\n+    println!(\"rustpkg uninstall <id|name>[@version]\n \n Remove a package by id or name and optionally version. If the package(s)\n is/are depended on by another package then they cannot be removed.\");\n }\n \n pub fn prefer() {\n-    println(\"rustpkg [options..] prefer <id|name>[@version]\n+    println!(\"rustpkg [options..] prefer <id|name>[@version]\n \n By default all binaries are given a unique name so that multiple versions can\n coexist. The prefer command will symlink the uniquely named binary to\n@@ -130,7 +130,7 @@ Example:\n }\n \n pub fn unprefer() {\n-    println(\"rustpkg [options..] unprefer <id|name>[@version]\n+    println!(\"rustpkg [options..] unprefer <id|name>[@version]\n \n Remove all symlinks from the store to the binary directory for a package\n name and optionally version. If version is not supplied, the latest version\n@@ -139,7 +139,7 @@ information.\");\n }\n \n pub fn test() {\n-    println(\"rustpkg [options..] test\n+    println!(\"rustpkg [options..] test\n \n Build all test crates in the current directory with the test flag.\n Then, run all the resulting test executables, redirecting the output\n@@ -150,7 +150,7 @@ Options:\n }\n \n pub fn init() {\n-    println(\"rustpkg init\n+    println!(\"rustpkg init\n \n This will turn the current working directory into a workspace. The first\n command you run when starting off a new project."}, {"sha": "d080262ccc77dcd46f4ea55b5ee7b76541b4461d", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -54,7 +54,7 @@ use num::FromPrimitive;\n ///\n /// ```\n /// std::bool::all_values(|x: bool| {\n-///     println(x.to_str());\n+///     println!(\"{}\", x);\n /// })\n /// ```\n #[inline]"}, {"sha": "e0dc5c8b65d694d9a5d238bd31e27df21b5aa6b0", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -51,8 +51,8 @@ my_error::cond.trap(|raised_int| {\n     // condition, then the above handler will be invoked (so long as there's no\n     // other nested handler).\n \n-    println(my_error::cond.raise(3)); // prints \"three\"\n-    println(my_error::cond.raise(4)); // prints \"oh well\"\n+    println!(\"{}\", my_error::cond.raise(3)); // prints \"three\"\n+    println!(\"{}\", my_error::cond.raise(4)); // prints \"oh well\"\n \n })\n "}, {"sha": "2e33bef380cbd200ffdb9bf01793caf1f9c39081", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -32,7 +32,7 @@ Some examples of obvious things you might want to do\n     # let _g = ::std::io::ignore_io_error();\n     let mut stdin = BufferedReader::new(stdin());\n     for line in stdin.lines() {\n-        print(line);\n+        print!(\"{}\", line);\n     }\n     ```\n \n@@ -67,7 +67,7 @@ Some examples of obvious things you might want to do\n     let path = Path::new(\"message.txt\");\n     let mut file = BufferedReader::new(File::open(&path));\n     for line in file.lines() {\n-        print(line);\n+        print!(\"{}\", line);\n     }\n     ```\n \n@@ -204,7 +204,7 @@ io_error::cond.trap(|e: IoError| {\n });\n \n if error.is_some() {\n-    println(\"failed to write my diary\");\n+    println!(\"failed to write my diary\");\n }\n # ::std::io::fs::unlink(&Path::new(\"diary.txt\"));\n ```"}, {"sha": "34b4ed5e1ef453ecf9887b6ed6b61d92b1d4c337", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -68,7 +68,7 @@ pub enum Signum {\n /// do spawn {\n ///     loop {\n ///         match listener.port.recv() {\n-///             Interrupt => println(\"Got Interrupt'ed\"),\n+///             Interrupt => println!(\"Got Interrupt'ed\"),\n ///             _ => (),\n ///         }\n ///     }"}, {"sha": "2056f8b33ec1d5c93c9e4cda44a4ddef6a35c978", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -402,7 +402,7 @@ pub trait Iterator<A> {\n     ///             .filter(|&x| x % 2 == 0)\n     ///             .inspect(|&x| debug!(\"{} made it through\", x))\n     ///             .sum();\n-    /// println(sum.to_str());\n+    /// println!(\"{}\", sum);\n     /// ```\n     #[inline]\n     fn inspect<'r>(self, f: 'r |&A|) -> Inspect<'r, A, Self> {"}, {"sha": "a15ce4f0102b74f4b9dd1f6b7210c5d16d54593f", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -47,8 +47,8 @@\n  *     }\n  * }\n  * fn main() {\n- *     println(format!(\"{:?}\", Point {x: 1, y: 0} + Point {x: 2, y: 3}));\n- *     println(format!(\"{:?}\", Point {x: 1, y: 0} - Point {x: 2, y: 3}));\n+ *     println!(\"{:?}\", Point {x: 1, y: 0} + Point {x: 2, y: 3});\n+ *     println!(\"{:?}\", Point {x: 1, y: 0} - Point {x: 2, y: 3});\n  * }\n  * ```\n  *\n@@ -72,7 +72,7 @@\n  *\n  * impl Drop for HasDrop {\n  *   fn drop(&mut self) {\n- *       println(\"Dropping!\");\n+ *       println!(\"Dropping!\");\n  *   }\n  * }\n  *\n@@ -100,7 +100,7 @@ pub trait Drop {\n  *\n  * impl Add<Foo, Foo> for Foo {\n  *     fn add(&self, _rhs: &Foo) -> Foo {\n- *       println(\"Adding!\");\n+ *       println!(\"Adding!\");\n  *       *self\n  *   }\n  * }\n@@ -129,7 +129,7 @@ pub trait Add<RHS,Result> {\n  *\n  * impl Sub<Foo, Foo> for Foo {\n  *     fn sub(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Subtracting!\");\n+ *         println!(\"Subtracting!\");\n  *         *self\n  *     }\n  * }\n@@ -158,7 +158,7 @@ pub trait Sub<RHS,Result> {\n  *\n  * impl Mul<Foo, Foo> for Foo {\n  *     fn mul(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Multiplying!\");\n+ *         println!(\"Multiplying!\");\n  *         *self\n  *     }\n  * }\n@@ -187,7 +187,7 @@ pub trait Mul<RHS,Result> {\n  *\n  * impl Div<Foo, Foo> for Foo {\n  *     fn div(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Dividing!\");\n+ *         println!(\"Dividing!\");\n  *         *self\n  *     }\n  * }\n@@ -216,7 +216,7 @@ pub trait Div<RHS,Result> {\n  *\n  * impl Rem<Foo, Foo> for Foo {\n  *     fn rem(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Remainder-ing!\");\n+ *         println!(\"Remainder-ing!\");\n  *         *self\n  *     }\n  * }\n@@ -245,7 +245,7 @@ pub trait Rem<RHS,Result> {\n  *\n  * impl Neg<Foo> for Foo {\n  *     fn neg(&self) -> Foo {\n- *         println(\"Negating!\");\n+ *         println!(\"Negating!\");\n  *         *self\n  *     }\n  * }\n@@ -274,7 +274,7 @@ pub trait Neg<Result> {\n  *\n  * impl Not<Foo> for Foo {\n  *     fn not(&self) -> Foo {\n- *         println(\"Not-ing!\");\n+ *         println!(\"Not-ing!\");\n  *         *self\n  *     }\n  * }\n@@ -303,7 +303,7 @@ pub trait Not<Result> {\n  *\n  * impl BitAnd<Foo, Foo> for Foo {\n  *     fn bitand(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Bitwise And-ing!\");\n+ *         println!(\"Bitwise And-ing!\");\n  *         *self\n  *     }\n  * }\n@@ -332,7 +332,7 @@ pub trait BitAnd<RHS,Result> {\n  *\n  * impl BitOr<Foo, Foo> for Foo {\n  *     fn bitor(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Bitwise Or-ing!\");\n+ *         println!(\"Bitwise Or-ing!\");\n  *         *self\n  *     }\n  * }\n@@ -361,7 +361,7 @@ pub trait BitOr<RHS,Result> {\n  *\n  * impl BitXor<Foo, Foo> for Foo {\n  *     fn bitxor(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Bitwise Xor-ing!\");\n+ *         println!(\"Bitwise Xor-ing!\");\n  *         *self\n  *     }\n  * }\n@@ -390,7 +390,7 @@ pub trait BitXor<RHS,Result> {\n  *\n  * impl Shl<Foo, Foo> for Foo {\n  *     fn shl(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Shifting left!\");\n+ *         println!(\"Shifting left!\");\n  *         *self\n  *     }\n  * }\n@@ -419,7 +419,7 @@ pub trait Shl<RHS,Result> {\n  *\n  * impl Shr<Foo, Foo> for Foo {\n  *     fn shr(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Shifting right!\");\n+ *         println!(\"Shifting right!\");\n  *         *self\n  *     }\n  * }\n@@ -449,7 +449,7 @@ pub trait Shr<RHS,Result> {\n  *\n  * impl Index<Foo, Foo> for Foo {\n  *     fn index(&self, _rhs: &Foo) -> Foo {\n- *         println(\"Indexing!\");\n+ *         println!(\"Indexing!\");\n  *         *self\n  *     }\n  * }"}, {"sha": "bdec67e5d9f96c6f160d69ed2a5b38a632514580", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -26,7 +26,7 @@\n //!\n //! // Take a reference to the contained string\n //! match msg {\n-//!     Some(ref m) => io::println(*m),\n+//!     Some(ref m) => println!(\"{}\", *m),\n //!     None => ()\n //! }\n //!"}, {"sha": "9045bafbe4591bbd0260fbf8d1fd52f6bac0463c", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -40,7 +40,6 @@ pub use result::{Result, Ok, Err};\n // Reexported functions\n pub use from_str::from_str;\n pub use iter::range;\n-pub use io::stdio::{print, println};\n \n // Reexported types and traits\n "}, {"sha": "f9bd291fbf446f6b6c40d4a6a1580478b86f1e9e", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -244,7 +244,7 @@ pub trait Rng {\n     /// ```rust\n     /// use std::rand::{task_rng, Rng};\n     ///\n-    /// println(task_rng().gen_ascii_str(10));\n+    /// println!(\"{}\", task_rng().gen_ascii_str(10));\n     /// ```\n     fn gen_ascii_str(&mut self, len: uint) -> ~str {\n         static GEN_ASCII_STR_CHARSET: &'static [u8] = bytes!(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\"}, {"sha": "758ca22e5c3ec7666332ba637e08d6a400de382a", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -118,7 +118,7 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R>>\n ///     let mut rng = ReseedingRng::new(rand::StdRng::new(), 10, rsdr);\n ///\n ///     // this will repeat, because it gets reseeded very regularly.\n-///     println(rng.gen_ascii_str(100));\n+///     println!(\"{}\", rng.gen_ascii_str(100));\n /// }\n ///\n /// ```"}, {"sha": "e0f96365eddbdfaf2fb3f9cee682b50082675c0b", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -634,6 +634,7 @@ fn test_repr() {\n     use prelude::*;\n     use str;\n     use str::Str;\n+    use io::stdio::println;\n     use util::swap;\n     use char::is_alphabetic;\n "}, {"sha": "8b6e1520dc7141b4ab9dc11a09ffe8e972e7b3bd", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1591,8 +1591,8 @@ pub trait StrSlice<'a> {\n     /// assert_eq!(d.len(), 23);\n     ///\n     /// // the two strings *look* the same\n-    /// println(c);\n-    /// println(d);\n+    /// println!(\"{}\", c);\n+    /// println!(\"{}\", d);\n     /// ```\n     fn char_len(&self) -> uint;\n "}, {"sha": "257a1e6340fa64a88b93de36ccfb337d8f210bc4", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1317,7 +1317,7 @@ pub trait OwnedVector<T> {\n     /// let v = ~[~\"a\", ~\"b\"];\n     /// for s in v.move_iter() {\n     ///   // s has type ~str, not &~str\n-    ///   println(s);\n+    ///   println!(\"{}\", s);\n     /// }\n     /// ```\n     fn move_iter(self) -> MoveIterator<T>;"}, {"sha": "c8c9cb4d24766bfdbe1a27242ae598cb3dae122c", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1127,7 +1127,7 @@ mod test {\n         // - two renames of the same var.. can only happen if you use\n         // local-expand to prevent the inner binding from being renamed\n         // during the rename-pass caused by the first:\n-        println(\"about to run bad test\");\n+        println!(\"about to run bad test\");\n         { let sc = unfold_test_sc(~[R(id(a,EMPTY_CTXT),50),\n                                     R(id(a,EMPTY_CTXT),51)],\n                                   EMPTY_CTXT,&mut t);"}, {"sha": "a9cf807ff65ec8bf664f9df2d7e6c91c9aa8ca07", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1283,7 +1283,7 @@ mod test {\n \n     //fn expand_and_resolve(crate_str: @str) -> ast::crate {\n         //let expanded_ast = expand_crate_str(crate_str);\n-        // println(format!(\"expanded: {:?}\\n\",expanded_ast));\n+        // println!(\"expanded: {:?}\\n\",expanded_ast);\n         //mtwt_resolve_crate(expanded_ast)\n     //}\n     //fn expand_and_resolve_and_pretty_print (crate_str : @str) -> ~str {\n@@ -1396,7 +1396,7 @@ mod test {\n                     let varref_marks = mtwt_marksof(varref.segments[0].identifier.ctxt,\n                                                     invalid_name);\n                     if (!(varref_name==binding_name)){\n-                        println(\"uh oh, should match but doesn't:\");\n+                        println!(\"uh oh, should match but doesn't:\");\n                         println!(\"varref: {:?}\",varref);\n                         println!(\"binding: {:?}\", bindings[binding_idx]);\n                         ast_util::display_sctable(get_sctable());\n@@ -1458,15 +1458,15 @@ foo_module!()\n                                           && (@\"xx\" == (ident_to_str(&p.segments[0].identifier)))\n                                      }).enumerate() {\n             if (mtwt_resolve(v.segments[0].identifier) != resolved_binding) {\n-                println(\"uh oh, xx binding didn't match xx varref:\");\n+                println!(\"uh oh, xx binding didn't match xx varref:\");\n                 println!(\"this is xx varref \\\\# {:?}\",idx);\n                 println!(\"binding: {:?}\",cxbind);\n                 println!(\"resolves to: {:?}\",resolved_binding);\n                 println!(\"varref: {:?}\",v.segments[0].identifier);\n                 println!(\"resolves to: {:?}\",\n                          mtwt_resolve(v.segments[0].identifier));\n                 let table = get_sctable();\n-                println(\"SC table:\");\n+                println!(\"SC table:\");\n \n                 {\n                     let table = table.table.borrow();"}, {"sha": "947e8271f884ed08df243e748b28fd9c5d000a6c", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -21,7 +21,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt,\n                       -> base::MacResult {\n \n     cx.print_backtrace();\n-    println(\n+    println!(\"{}\",\n         print::pprust::tt_to_str(\n             &ast::TTDelim(@tt.to_owned()),\n             get_ident_interner()));"}, {"sha": "4cd64331f9a4d0f267a10fb77bff40950a17680d", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -983,7 +983,7 @@ mod test {\n     #[test] fn t1 () {\n         let Env {string_reader} =\n             setup(@\"/* my source file */ \\\n-                    fn main() { io::println(~\\\"zebra\\\"); }\\n\");\n+                    fn main() { println!(\\\"zebra\\\"); }\\n\");\n         let id = str_to_ident(\"fn\");\n         let tok1 = string_reader.next_token();\n         let tok2 = TokenAndSpan{"}, {"sha": "2f9d77691c56a34039f48095ac1f978e7bc36c08", "filename": "src/test/auxiliary/explicit_self_xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -20,6 +20,6 @@ pub struct Bar {\n impl Foo for Bar {\n     #[inline(always)]\n     fn f(&self) {\n-        println((*self).x);\n+        println!(\"{}\", (*self).x);\n     }\n }"}, {"sha": "d2d36f03698c7dedec0d73b87c3a11e79fe37bdd", "filename": "src/test/auxiliary/moves_based_on_type_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,7 +16,7 @@ pub struct S {\n \n impl Drop for S {\n     fn drop(&mut self) {\n-        println(\"goodbye\");\n+        println!(\"goodbye\");\n     }\n }\n "}, {"sha": "0a37e93f6e786bb3aee2d971fbfd3c2cb7ac76a8", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -27,7 +27,7 @@ fn timed(label: &str, f: ||) {\n }\n \n fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n-    println(\" Ascending integers:\");\n+    println!(\" Ascending integers:\");\n \n     timed(\"insert\", || {\n         for i in range(0u, n_keys) {\n@@ -49,7 +49,7 @@ fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n }\n \n fn descending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n-    println(\" Descending integers:\");\n+    println!(\" Descending integers:\");\n \n     timed(\"insert\", || {\n         for i in range(0, n_keys).invert() {\n@@ -115,7 +115,8 @@ fn main() {\n \n     println!(\"{} keys\", n_keys);\n \n-    println(\"\\nTreeMap:\");\n+    // FIXME: #9970\n+    println!(\"{}\", \"\\nTreeMap:\");\n \n     {\n         let mut map: TreeMap<uint,uint> = TreeMap::new();\n@@ -128,12 +129,13 @@ fn main() {\n     }\n \n     {\n-        println(\" Random integers:\");\n+        println!(\" Random integers:\");\n         let mut map: TreeMap<uint,uint> = TreeMap::new();\n         vector(&mut map, n_keys, rand);\n     }\n \n-    println(\"\\nHashMap:\");\n+    // FIXME: #9970\n+    println!(\"{}\", \"\\nHashMap:\");\n \n     {\n         let mut map: HashMap<uint,uint> = HashMap::new();\n@@ -146,12 +148,13 @@ fn main() {\n     }\n \n     {\n-        println(\" Random integers:\");\n+        println!(\" Random integers:\");\n         let mut map: HashMap<uint,uint> = HashMap::new();\n         vector(&mut map, n_keys, rand);\n     }\n \n-    println(\"\\nTrieMap:\");\n+    // FIXME: #9970\n+    println!(\"{}\", \"\\nTrieMap:\");\n \n     {\n         let mut map: TrieMap<uint> = TrieMap::new();\n@@ -164,7 +167,7 @@ fn main() {\n     }\n \n     {\n-        println(\" Random integers:\");\n+        println!(\" Random integers:\");\n         let mut map: TrieMap<uint> = TrieMap::new();\n         vector(&mut map, n_keys, rand);\n     }"}, {"sha": "c8f5dda41d8a7c0ce06507b9ea5817fa1edd1fb4", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -123,7 +123,7 @@ impl Results {\n }\n \n fn write_header(header: &str) {\n-    println(header);\n+    println!(\"{}\", header);\n }\n \n fn write_row(label: &str, value: f64) {"}, {"sha": "4ffe1aed32fb822681e061a1b2d85c586b84fc03", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -118,8 +118,8 @@ fn main() {\n \n     for y in range(0, 256) {\n         for x in range(0, 256) {\n-            print(symbols[(pixels[y*256+x] / 0.2f32) as int]);\n+            print!(\"{}\", symbols[(pixels[y*256+x] / 0.2f32) as int]);\n         }\n-        println(\"\");\n+        println!(\"\");\n     }\n }"}, {"sha": "976cd96ad309b57985f6c0c2ceae42a1d82b46fe", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -78,7 +78,7 @@ fn main() {\n         }).to_owned_vec();\n \n     for message in messages.mut_iter() {\n-        println(*message.get_ref());\n+        println!(\"{}\", *message.get_ref());\n     }\n \n     println!(\"long lived tree of depth {}\\t check: {}\","}, {"sha": "8f8485b5801ca0b502b015c9d42fa13e3692039d", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -20,8 +20,8 @@ fn print_complements() {\n     let all = [Blue, Red, Yellow];\n     for aa in all.iter() {\n         for bb in all.iter() {\n-            println(show_color(*aa) + \" + \" + show_color(*bb) +\n-                    \" -> \" + show_color(transform(*aa, *bb)));\n+            println!(\"{} + {} -> {}\", show_color(*aa), show_color(*bb),\n+                show_color(transform(*aa, *bb)));\n         }\n     }\n }\n@@ -187,15 +187,15 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     }\n \n     // print each color in the set\n-    println(show_color_list(set));\n+    println!(\"{}\", show_color_list(set));\n \n     // print each creature's stats\n     for rep in report.iter() {\n-        println(*rep);\n+        println!(\"{}\", *rep);\n     }\n \n     // print the total number of creatures met\n-    println(show_number(creatures_met));\n+    println!(\"{}\", show_number(creatures_met));\n }\n \n fn main() {\n@@ -211,10 +211,10 @@ fn main() {\n     let nn = from_str::<uint>(args[1]).unwrap();\n \n     print_complements();\n-    println(\"\");\n+    println!(\"\");\n \n     rendezvous(nn, ~[Blue, Red, Yellow]);\n-    println(\"\");\n+    println!(\"\");\n \n     rendezvous(nn,\n         ~[Blue, Red, Yellow, Red, Yellow, Blue, Red, Yellow, Red, Blue]);"}, {"sha": "b5697310fce188b951d6835dc85cdc9738d482d1", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -64,7 +64,7 @@ fn fannkuch_redux(n: i32) -> i32 {\n             // Use incremental change to generate another permutation.\n             loop {\n                 if r == n {\n-                    println(checksum.to_str());\n+                    println!(\"{}\", checksum);\n                     return max_flips_count;\n                 }\n "}, {"sha": "cef59b7c0e66c579e381a552389381306d491899", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -223,6 +223,6 @@ fn main() {\n \n    // now fetch and print result messages\n    for (ii, _sz) in sizes.iter().enumerate() {\n-       println(from_child[ii].recv());\n+       println!(\"{}\", from_child[ii].recv());\n    }\n }"}, {"sha": "732922cdb0785a38eb283e4f3071226797a54454", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -21,8 +21,8 @@ static LIMIT: f64 = 2.0;\n fn main() {\n     let args = std::os::args();\n     let (w, mut out) = if args.len() < 2 {\n-        println(\"Test mode: do not dump the image because it's not utf8, \\\n-                which interferes with the test runner.\");\n+        println!(\"Test mode: do not dump the image because it's not utf8, \\\n+                  which interferes with the test runner.\");\n         (1000, ~DummyWriter as ~Writer)\n     } else {\n         (from_str(args[1]).unwrap(),"}, {"sha": "4b6430cbd27bcb124c23ff16ec23cb4120b07ac9", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -193,11 +193,11 @@ fn to_utf8(raw_sol: &List<u64>) -> ~str {\n // Prints a solution in ~str form.\n fn print_sol(sol: &str) {\n     for (i, c) in sol.chars().enumerate() {\n-        if (i) % 5 == 0 {println(\"\");}\n-        if (i + 5) % 10 == 0 {print(\" \");}\n+        if (i) % 5 == 0 { println!(\"\"); }\n+        if (i + 5) % 10 == 0 { print!(\" \"); }\n         print!(\"{} \", c);\n     }\n-    println(\"\");\n+    println!(\"\");\n }\n \n // The data managed during the search\n@@ -277,5 +277,5 @@ fn main () {\n     println!(\"{} solutions found\", data.nb);\n     print_sol(data.min);\n     print_sol(data.max);\n-    println(\"\");\n+    println!(\"\");\n }"}, {"sha": "ba9bd40e08e61df3949a11ca22cc3151516672ed", "filename": "src/test/bench/shootout-pidigits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pidigits.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -80,7 +80,7 @@ fn pidigits(n: int) {\n \n     let m = n % 10;\n     if m != 0 {\n-        for _ in range(m, 10) {print(\" \");}\n+        for _ in range(m, 10) { print!(\" \"); }\n         print!(\"\\t:{}\\n\", n);\n     }\n }"}, {"sha": "30d57d4d755f04ade8515289684b84ab6950fe1a", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -22,7 +22,7 @@ enum Either<T, U> { Left(T), Right(U) }\n \n     fn g() {\n         let mut x: Either<int,f64> = Left(3);\n-        println(f(&mut x, &x).to_str()); //~ ERROR cannot borrow\n+        println!(\"{}\", f(&mut x, &x)); //~ ERROR cannot borrow\n     }\n \n     fn h() {"}, {"sha": "06b77686d2e5049025b0d187e2a3288de36034c5", "filename": "src/test/compile-fail/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1,6 +1,6 @@\n struct S {f:~str}\n impl Drop for S {\n-    fn drop(&mut self) { println(self.f); }\n+    fn drop(&mut self) { println!(\"{}\", self.f); }\n }\n \n fn move_in_match() {"}, {"sha": "058b8a3ce29d263559a53b8559f9c73964f77bfb", "filename": "src/test/compile-fail/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,5 +16,5 @@ fn main() {\n         },\n         None => { fail!() }\n     }\n-    println(*msg);\n+    println!(\"{}\", *msg);\n }"}, {"sha": "f05931d7fb40885ff793dd0cc9c81b69749a95d1", "filename": "src/test/compile-fail/by-move-pattern-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     };\n     match &s.x {\n         &Foo => {}\n-        &Bar(ref identifier) => println(*identifier)\n+        &Bar(ref identifier) => println!(\"{}\", *identifier)\n     };\n }"}, {"sha": "2adf44d4b615702875f3473a7c492f8ad5d6a1f0", "filename": "src/test/compile-fail/circular_modules_hello.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fcircular_modules_hello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fcircular_modules_hello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcircular_modules_hello.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -13,5 +13,5 @@\n mod circular_modules_main;\n \n pub fn say_hello() {\n-  println(circular_modules_main::hi_str());\n+    println!(\"{}\", circular_modules_main::hi_str());\n }"}, {"sha": "44c62442ff4d104248a473c1da3a9a8dcddeeb89", "filename": "src/test/compile-fail/closure-reform-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -7,7 +7,7 @@ fn call_bare(f: fn(&str)) {\n \n fn main() {\n     let string = \"world!\";\n-    let f: |&str| = |s| println(s + string);\n+    let f: |&str| = |s| println!(\"{}\", s + string);\n     call_bare(f)    //~ ERROR mismatched types\n }\n "}, {"sha": "ff901f986e68d5891755726ddf5026c31214622d", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -15,7 +15,7 @@ type Foo = @[u8];\n impl Drop for Foo {   //~ ERROR the Drop trait may only be implemented\n //~^ ERROR cannot provide an extension implementation\n     fn drop(&mut self) {\n-        println(\"kaboom\");\n+        println!(\"kaboom\");\n     }\n }\n "}, {"sha": "3f69cb6e51ea296debafb182374444556bb78bbd", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n-        println(\"kaboom\");\n+        println!(\"kaboom\");\n     }\n }\n "}, {"sha": "3d987bf4c58a2be9aae93d88116aa706fbb9838d", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -18,7 +18,7 @@ trait Bar : Drop {\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n-        println(\"kaboom\");\n+        println!(\"kaboom\");\n     }\n }\n "}, {"sha": "00945ea84693cca38682064b87e42b53c06fbd8b", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -17,7 +17,7 @@ use extra::arc::Arc;\n struct A { y: Arc<int>, x: Arc<int> }\n \n impl Drop for A {\n-    fn drop(&mut self) { println(format!(\"x={:?}\", self.x.get())); }\n+    fn drop(&mut self) { println!(\"x={:?}\", self.x.get()); }\n }\n fn main() {\n     let a = A { y: Arc::new(1), x: Arc::new(2) };"}, {"sha": "79af6617ab341e83e9d570950c591ed1f6fa7a4f", "filename": "src/test/compile-fail/issue-10412.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -24,8 +24,8 @@ impl<'self> Serializable<str> for &'self str {\n }\n \n fn main() {\n-    println(\"hello\");\n+    println!(\"hello\");\n     let x = ~\"foo\";\n     let y = x;\n-    println(y);\n+    println!(\"{}\", y);\n }"}, {"sha": "19bd9b2476b04337563436a9449bda735533376e", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -22,7 +22,7 @@ struct foo {\n impl Drop for foo {\n     fn drop(&mut self) {\n         unsafe {\n-            println(\"Goodbye, World!\");\n+            println!(\"Goodbye, World!\");\n             self.x.set(self.x.get() + 1);\n         }\n     }"}, {"sha": "308a881935555a2f5b0591c3f5e35cc1676e2c66", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -31,8 +31,8 @@ impl Eq for Lol {\n \n fn main() {\n     if Lol(2) == Lol(4) {\n-        println(\"2 == 4\");\n+        println!(\"2 == 4\");\n     } else {\n-        println(\"2 != 4\");\n+        println!(\"2 != 4\");\n     }\n }"}, {"sha": "6c5fe580e14c74684eaa5367cac2c6dad2894316", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -28,5 +28,5 @@ impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n \n fn main() {\n     let p = Point::new(0.0f, 0.0f);\n-    io::println(p.to_str());\n+    println!(\"{}\", p.to_str());\n }"}, {"sha": "d15fed2d9d261a014a45ef3f555c5144fae1a427", "filename": "src/test/compile-fail/issue-5060-fail.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -12,13 +12,14 @@\n \n macro_rules! print_hd_tl (\n     ($field_hd:ident, $($field_tl:ident),+) => ({\n-        print(stringify!($field)); //~ ERROR unknown macro variable\n-        print(\"::[\");\n+        print!(\"{}\", stringify!($field)); //~ ERROR unknown macro variable\n+        print!(\"::[\");\n         $(\n-            print(stringify!($field_tl));\n-            print(\", \");\n+            print!(\"{}\", stringify!($field_tl));\n+            print!(\", \");\n         )+\n-        print(\"]\\n\");\n+        // FIXME: #9970\n+        print!(\"{}\", \"]\\n\");\n     })\n )\n "}, {"sha": "88cf4537f10d4db198935b53baf3556e89134885", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     }\n \n     match ~[~\"foo\", ~\"bar\", ~\"baz\"] {\n-        [a, _, _, ..] => { println(a); }\n+        [a, _, _, ..] => { println!(\"{}\", a); }\n         [~\"foo\", ~\"bar\", ~\"baz\", ~\"foo\", ~\"bar\"] => { } //~ ERROR unreachable pattern\n         _ => { }\n     }"}, {"sha": "3cad214a44a7e21406ae0abbea28e49afe550fed", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -18,7 +18,7 @@ fn main() {\n         f(&s, |hellothere| {\n             match hellothere.x {\n                 ~Foo(_) => {}\n-                ~Bar(x) => println(x.to_str()), //~ ERROR cannot move out\n+                ~Bar(x) => println!(\"{}\", x.to_str()), //~ ERROR cannot move out\n                 ~Baz => {}\n             }\n         })"}, {"sha": "dd68cb8e994e93a1ecf7f0cbb76e6508267bc0df", "filename": "src/test/compile-fail/moves-based-on-type-capture-clause-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -3,7 +3,7 @@ use std::task;\n fn main() {\n     let x = ~\"Hello world!\";\n     do task::spawn {\n-        println(x);\n+        println!(\"{}\", x);\n     }\n-    println(x); //~ ERROR use of moved value\n+    println!(\"{}\", x); //~ ERROR use of moved value\n }"}, {"sha": "779a1ec7a5bf022d5f11d7168f3f9135c8d5242f", "filename": "src/test/compile-fail/no-implicit-prelude-nested.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -25,8 +25,7 @@ mod foo {\n         impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n \n         fn foo() {\n-            print(\"foo\"); //~ ERROR: unresolved name\n-            println(\"bar\"); //~ ERROR: unresolved name\n+            drop(2) //~ ERROR: unresolved name\n         }\n     }\n \n@@ -38,8 +37,7 @@ mod foo {\n     impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n \n     fn foo() {\n-        print(\"foo\"); //~ ERROR: unresolved name\n-        println(\"bar\"); //~ ERROR: unresolved name\n+        drop(2) //~ ERROR: unresolved name\n     }\n }\n \n@@ -54,15 +52,13 @@ fn qux() {\n         impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n \n         fn foo() {\n-            print(\"foo\"); //~ ERROR: unresolved name\n-            println(\"bar\"); //~ ERROR: unresolved name\n+            drop(2) //~ ERROR: unresolved name\n         }\n     }\n }\n \n \n fn main() {\n     // these should work fine\n-    print(\"foo\");\n-    println(\"bar\");\n+    drop(2)\n }"}, {"sha": "7f88af36e8a5c4a6ca279e531532e419c3ffbca1", "filename": "src/test/compile-fail/no-implicit-prelude.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -24,6 +24,5 @@ impl ToStr for Test {} //~ ERROR: attempt to implement a nonexistent trait\n impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n \n fn main() {\n-    print(\"foo\"); //~ ERROR: unresolved name\n-    println(\"bar\"); //~ ERROR: unresolved name\n+    drop(2) //~ ERROR: unresolved name\n }"}, {"sha": "d5489b6a852e444232206a7bb84b0a4d817e9126", "filename": "src/test/compile-fail/refutable-pattern-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let f = |3: int| println(\"hello\");  //~ ERROR refutable pattern\n+    let f = |3: int| println!(\"hello\");  //~ ERROR refutable pattern\n     f(4);\n }"}, {"sha": "77146b65ae676b4ccc3773088d0d51c0d6593cdf", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n-        println(\"Goodbye!\");\n+        println!(\"Goodbye!\");\n     }\n }\n "}, {"sha": "606a86f188f15fb299cd710dc931198ae40ae150", "filename": "src/test/compile-fail/uninhabited-enum-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Funinhabited-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Funinhabited-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-enum-cast.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -1,7 +1,7 @@\n enum E {}\n \n fn f(e: E) {\n-    println((e as int).to_str());   //~ ERROR non-scalar cast\n+    println!(\"{}\", (e as int).to_str());   //~ ERROR non-scalar cast\n }\n \n fn main() {}"}, {"sha": "843b61c9dbee209e154091d7ea414eeb5dd052f2", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -22,7 +22,7 @@ impl Drop for Bar {\n \n impl Foo for Bar {\n     fn f(&self) {\n-        println(\"hi\");\n+        println!(\"hi\");\n     }\n }\n "}, {"sha": "dc6f5e046b4b7878076c91fc3349b24ea3877b43", "filename": "src/test/compile-fail/use-after-move-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let x = ~\"Hello!\";\n     let _y = x;\n-    println(x); //~ ERROR use of moved value\n+    println!(\"{}\", x); //~ ERROR use of moved value\n }"}, {"sha": "b98827409a8774c9b6bf67934f7c1095dbc419b8", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -17,5 +17,5 @@ impl S {\n \n fn main() {\n     let x = S { x: 1 };\n-    println(x.foo().to_str());\n+    println!(\"{}\", x.foo());\n }"}, {"sha": "69a0b94c348df8a1e041922e283a7f8181dc196f", "filename": "src/test/compile-fail/use-after-move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -13,5 +13,5 @@ impl S {\n \n fn main() {\n     let x = S { x: ~1 };\n-    println(x.foo().to_str());\n+    println!(\"{}\", x.foo());\n }"}, {"sha": "f9fcfa22f14f756466b2d13045f1acbf1dd558f9", "filename": "src/test/debug-info/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -163,7 +163,7 @@ fn assignment(mut a: u64, b: u64, c: f64) {\n }\n \n fn function_call(x: u64, y: u64, z: f64) {\n-    print(\"Hi!\")\n+    std::io::stdio::print(\"Hi!\")\n }\n \n fn identifier(x: u64, y: u64, z: f64) -> u64 {"}, {"sha": "4d940c91d2a4cb5db8a285e6c9471c124200df20", "filename": "src/test/debug-info/function-prologue-stepping-no-split-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -162,7 +162,7 @@ fn assignment(mut a: u64, b: u64, c: f64) {\n \n #[no_split_stack]\n fn function_call(x: u64, y: u64, z: f64) {\n-    print(\"Hi!\")\n+    std::io::stdio::print(\"Hi!\")\n }\n \n #[no_split_stack]"}, {"sha": "98975c7f021c3ffaefdfc31d1b364dd20136090b", "filename": "src/test/run-pass/anon-trait-static-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -20,5 +20,5 @@ impl Foo {\n \n pub fn main() {\n     let x = Foo::new();\n-    println(x.x.to_str());\n+    println!(\"{}\", x.x);\n }"}, {"sha": "c797aa1fec1496c6d977eb96142e2fa2e8014e4e", "filename": "src/test/run-pass/anon_trait_static_method_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,5 +16,5 @@ use anon_trait_static_method_lib::Foo;\n \n pub fn main() {\n     let x = Foo::new();\n-    println(x.x.to_str());\n+    println!(\"{}\", x.x);\n }"}, {"sha": "ee3738518cd771f1f261277401b1cfb3659048e5", "filename": "src/test/run-pass/auto-ref-bounded-ty-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -28,7 +28,7 @@ impl<T:Baz> Foo for T {\n \n impl Baz for Bar {\n     fn g(&self) {\n-        println(self.x.to_str());\n+        println!(\"{}\", self.x);\n     }\n }\n "}, {"sha": "fefb303fc70feb83cf05346a952b1df3598f8f88", "filename": "src/test/run-pass/bare-static-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fbare-static-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fbare-static-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-static-string.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let x: &'static str = \"foo\";\n-    println(x);\n+    println!(\"{}\", x);\n }"}, {"sha": "aab5053693c96650359bfa9143ae5c428f170187", "filename": "src/test/run-pass/boxed-trait-with-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,7 +16,7 @@ trait Foo {\n \n impl Foo for int {\n     fn foo(@self) {\n-        println(\"Hello world!\");\n+        println!(\"Hello world!\");\n     }\n }\n "}, {"sha": "61175a401abe269495918e47eaa5ec5a5d46b044", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -2,9 +2,10 @@\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n use std::cast;\n+use std::io::stdio::println;\n \n fn call_it(f: proc(~str) -> ~str) {\n-    println(f(~\"Fred\"))\n+    println!(\"{}\", f(~\"Fred\"))\n }\n \n fn call_a_thunk(f: ||) {\n@@ -57,9 +58,9 @@ pub fn main() {\n \n     // Closures\n \n-    call_a_thunk(|| println(\"Hello world!\"));\n+    call_a_thunk(|| println!(\"Hello world!\"));\n \n-    call_this(|s| println(s));\n+    call_this(|s| println!(\"{}\", s));\n \n     call_that(|x, y| *x + *y);\n "}, {"sha": "547f342243c2bc2de0d6fd0b76010bc4d4af055d", "filename": "src/test/run-pass/default-method-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -11,7 +11,7 @@\n \n trait Foo {\n     fn f(&self) {\n-        println(\"Hello!\");\n+        println!(\"Hello!\");\n         self.g();\n     }\n     fn g(&self);\n@@ -23,7 +23,7 @@ struct A {\n \n impl Foo for A {\n     fn g(&self) {\n-        println(\"Goodbye!\");\n+        println!(\"Goodbye!\");\n     }\n }\n "}, {"sha": "977bd474d177d012c39fdaca98f2c9e55f060c08", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -15,7 +15,7 @@ struct S<T> {\n #[unsafe_destructor]\n impl<T> ::std::ops::Drop for S<T> {\n     fn drop(&mut self) {\n-        println(\"bye\");\n+        println!(\"bye\");\n     }\n }\n "}, {"sha": "8cbfee6c78d304eccd65e78a31ebce23928bf805", "filename": "src/test/run-pass/drop-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n-        println(\"bye\");\n+        println!(\"bye\");\n     }\n }\n "}, {"sha": "28fd5dbfa8dec2561f2366aafc344c7367037d3c", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -2,15 +2,15 @@\n \n pub fn main() {\n     let v: ~[int] = ~[ 1, ..5 ];\n-    println(v[0].to_str());\n-    println(v[1].to_str());\n-    println(v[2].to_str());\n-    println(v[3].to_str());\n-    println(v[4].to_str());\n+    println!(\"{}\", v[0]);\n+    println!(\"{}\", v[1]);\n+    println!(\"{}\", v[2]);\n+    println!(\"{}\", v[3]);\n+    println!(\"{}\", v[4]);\n     let v: @[int] = @[ 2, ..5 ];\n-    println(v[0].to_str());\n-    println(v[1].to_str());\n-    println(v[2].to_str());\n-    println(v[3].to_str());\n-    println(v[4].to_str());\n+    println!(\"{}\", v[0]);\n+    println!(\"{}\", v[1]);\n+    println!(\"{}\", v[2]);\n+    println!(\"{}\", v[3]);\n+    println!(\"{}\", v[4]);\n }"}, {"sha": "f8a1f2b8488de8b170f1e5eeee693a2e228853d2", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,5 +16,5 @@ extern mod extra;\n use extra::json::Object;\n \n pub fn main() {\n-    println(\"Hello world!\");\n+    println!(\"Hello world!\");\n }"}, {"sha": "b7c2c8d4953cbfc3138126651d59e8a727badc00", "filename": "src/test/run-pass/float-literal-inference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ffloat-literal-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ffloat-literal-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-literal-inference.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -14,9 +14,9 @@ struct S {\n \n pub fn main() {\n     let x: f32 = 4.0;\n-    println(x.to_str());\n+    println!(\"{}\", x);\n     let y: f64 = 64.0;\n-    println(y.to_str());\n+    println!(\"{}\", y);\n     let z = S { z: 1.0 };\n-    println(z.z.to_str());\n+    println!(\"{}\", z.z);\n }"}, {"sha": "8590c8b90b24e61697eb4e440a3cc05202f4e704", "filename": "src/test/run-pass/fn-pattern-expected-type-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type-2.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     let v : &[(int,int)] = &[ (1, 2), (3, 4), (5, 6) ];\n     for &(x, y) in v.iter() {\n-        println(y.to_str());\n-        println(x.to_str());\n+        println!(\"{}\", y);\n+        println!(\"{}\", x);\n     }\n }"}, {"sha": "61dcbb75b9ef9af4630d64efefee8ceffa3ebf7a", "filename": "src/test/run-pass/hello.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhello.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    println(\"hello, world\");\n+    println!(\"hello, world\");\n }"}, {"sha": "306294fa76d3bfd900356498708850b09622d657", "filename": "src/test/run-pass/impl-privacy-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -6,5 +6,5 @@ extern mod impl_privacy_xc_2;\n pub fn main() {\n     let fish1 = impl_privacy_xc_2::Fish { x: 1 };\n     let fish2 = impl_privacy_xc_2::Fish { x: 2 };\n-    println(if fish1.eq(&fish2) { \"yes\" } else { \"no \" });\n+    if fish1.eq(&fish2) { println!(\"yes\") } else { println!(\"no\") };\n }"}, {"sha": "45c0ea4d543caeb5f160d9954b3529cc07bb3e9a", "filename": "src/test/run-pass/issue-3389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3389.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -15,7 +15,7 @@ struct trie_node {\n \n fn print_str_vector(vector: ~[~str]) {\n     for string in vector.iter() {\n-        println(*string);\n+        println!(\"{}\", *string);\n     }\n }\n "}, {"sha": "a43445cd3aaa0b6665b87f16a2ec4fb5cc2d199a", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -35,5 +35,5 @@ pub fn main() {\n         element: S,\n         next: None\n     };\n-    println(ls.element);\n+    println!(\"{}\", ls.element);\n }"}, {"sha": "6f2d0481aec14462b0ed7754ba9021de34056f69", "filename": "src/test/run-pass/issue-3702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3702.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n   }\n \n   fn to_string(t: @Text) {\n-    println(t.to_str());\n+    println!(\"{}\", t.to_str());\n   }\n \n }"}, {"sha": "de01448f9b85efaa7a8fc7341f779a3ca7bb32d9", "filename": "src/test/run-pass/issue-3847.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-3847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3847.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -18,5 +18,5 @@ pub fn main() {\n         buildings::Tower { height: h } => { h }\n     };\n \n-    println(h.to_str());\n+    println!(\"{}\", h);\n }"}, {"sha": "dec148ca0f6dc16fbd27806438d67ed6ef6e533d", "filename": "src/test/run-pass/issue-4025.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4025.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -13,20 +13,20 @@\n */\n \n fn print1(b: bool, s1: &str, s2: &str) {\n-    println(if b { s1 } else { s2 });\n+    println!(\"{}\", if b { s1 } else { s2 });\n }\n fn print2<'a, 'b>(b: bool, s1: &'a str, s2: &'b str) {\n-    println(if b { s1 } else { s2 });\n+    println!(\"{}\", if b { s1 } else { s2 });\n }\n fn print3(b: bool, s1: &str, s2: &str) {\n     let mut s: &str;\n     if b { s = s1; } else { s = s2; }\n-    println(s);\n+    println!(\"{}\", s);\n }\n fn print4<'a, 'b>(b: bool, s1: &'a str, s2: &'b str) {\n     let mut s: &str;\n     if b { s = s1; } else { s = s2; }\n-    println(s);\n+    println!(\"{}\", s);\n }\n \n pub fn main() {}"}, {"sha": "4cdf7aa3dd02d385aced665f816116bd06dbe6d9", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -111,7 +111,7 @@ priv fn cmd_to_str(cmd: ~[~str]) -> ~str {\n \n fn query(cmd: ~[~str], sb: TcpSocketBuf) -> Result {\n   let cmd = cmd_to_str(cmd);\n-  //io::println(cmd);\n+  //println!(\"{}\", cmd);\n   sb.write_str(cmd);\n   let res = parse_response(@sb as @io::Reader);\n   res"}, {"sha": "baac8d0dcd14c462fe51f36e6b338d45d863bfd5", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::io::println;\n+\n pub fn main() {\n     let (port, chan) = Chan::new();\n "}, {"sha": "c1cab34f41cc72e0b4eb14974401022d83a5b2dd", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -26,5 +26,5 @@ fn parse_args() -> ~str {\n }\n \n pub fn main() {\n-    println(parse_args());\n+    println!(\"{}\", parse_args());\n }"}, {"sha": "f02d2ad49c0532864c0d65bed5603696f23df5d2", "filename": "src/test/run-pass/issue-5060.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5060.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -12,13 +12,14 @@\n \n macro_rules! print_hd_tl (\n     ($field_hd:ident, $($field_tl:ident),+) => ({\n-        print(stringify!($field_hd));\n-        print(\"::[\");\n+        print!(\"{}\", stringify!($field_hd));\n+        print!(\"::[\");\n         $(\n-            print(stringify!($field_tl));\n-            print(\", \");\n+            print!(\"{}\", stringify!($field_tl));\n+            print!(\", \");\n         )+\n-        print(\"]\\n\");\n+        // FIXME: #9970\n+        print!(\"{}\", \"]\\n\");\n     })\n )\n "}, {"sha": "0b2155cc3d03c862f7c0a551ff156f0a01fc24ed", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -14,7 +14,7 @@ trait Fooable {\n \n impl Fooable for uint {\n     fn yes(self) {\n-        self.times(|| println(\"yes\"));\n+        self.times(|| println!(\"yes\"));\n     }\n }\n "}, {"sha": "871ff892909607848924c49f7f0b1957b229b5d7", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -24,7 +24,7 @@ trait Inner {\n }\n \n impl Inner for int {\n-    fn print(&self) { print(format!(\"Inner: {}\\n\", *self)); }\n+    fn print(&self) { print!(\"Inner: {}\\n\", *self); }\n }\n \n struct Outer<'a> {"}, {"sha": "4e74a7a1ecfe08eabc878c1638fba3d8a2792b19", "filename": "src/test/run-pass/issue-7012.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7012.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -23,5 +23,5 @@ static test1: signature<'static> =  signature {\n \n pub fn main() {\n   let test = &[0x243f6a88u32,0x85a308d3u32,0x13198a2eu32,0x03707344u32,0xa4093822u32,0x299f31d0u32];\n-  println(format!(\"{}\",test==test1.pattern));\n+  println!(\"{}\",test==test1.pattern);\n }"}, {"sha": "f15c6de97783bd79bf2472807e579797b2195ad8", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -7,7 +7,7 @@ struct B<'a> { b: int, pa: &'a A }\n \n     impl IDummy for A {\n         fn do_nothing(&self) {\n-            println(\"A::do_nothing() is called\");\n+            println!(\"A::do_nothing() is called\");\n         }\n     }\n "}, {"sha": "27b161e659f618a1bffb4a44c5047ac47b6c3dc4", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     match &[(~5,~7)] {\n         ps => {\n            let (ref y, _) = ps[0];\n-           println(fmt!(\"1. y = %d\", **y));\n+           println!(\"1. y = {}\", **y);\n            assert!(**y == 5);\n         }\n     }\n@@ -24,8 +24,8 @@ pub fn main() {\n     match Some(&[(~5,)]) {\n         Some(ps) => {\n            let (ref y,) = ps[0];\n-           println(fmt!(\"2. y = %d\", **y));\n-           if **y != 5 { println(\"sadness\"); }\n+           println!(\"2. y = {}\", **y);\n+           if **y != 5 { println!(\"sadness\"); }\n         }\n         None => ()\n     }\n@@ -34,7 +34,7 @@ pub fn main() {\n     match Some(&[(~5,~7)]) {\n         Some(ps) => {\n            let (ref y, ref z) = ps[0];\n-           println(fmt!(\"3. y = %d z = %d\", **y, **z));\n+           println!(\"3. y = {} z = {}\", **y, **z);\n            assert!(**y == 5);\n         }\n         None => ()"}, {"sha": "80253d40a43c89f6b6a3e142ab4759782de00873", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -11,7 +11,7 @@\n fn f() {\n     let a = ~\"hello\";\n     let b: &str = a;\n-    println(b);\n+    println!(\"{}\", b);\n }\n \n pub fn main() {"}, {"sha": "dbc88f023696b5e218c37836b1c8a25f44550479", "filename": "src/test/run-pass/match-drop-strs-issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -22,5 +22,5 @@ fn parse_args() -> ~str {\n }\n \n pub fn main() {\n-    println(parse_args());\n+    println!(\"{}\", parse_args());\n }"}, {"sha": "1bb45b867c3341032b3fb967ea8ede1acf7a0460", "filename": "src/test/run-pass/move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmove-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmove-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-self.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -8,7 +8,7 @@ impl S {\n     }\n \n     pub fn bar(self) {\n-        println(self.x);\n+        println!(\"{}\", self.x);\n     }\n }\n "}, {"sha": "064fb385dccb3243bbcf4ee16e1e0369887a9ef4", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -3,6 +3,6 @@ use std::task;\n pub fn main() {\n     let x = ~\"Hello world!\";\n     do task::spawn {\n-        println(x);\n+        println!(\"{}\", x);\n     }\n }"}, {"sha": "ba3d89e3c7a647b9b9981dc7cfc9e6c0f8115f1e", "filename": "src/test/run-pass/multibyte.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultibyte.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -10,5 +10,5 @@\n \n // Test that multibyte characters don't crash the compiler\n pub fn main() {\n-    println(\"\ub9c8\uc774\ub108\uc2a4 \uc0ac\uc778\uc774 \uc5c6\uc73c\uba74\");\n+    println!(\"\ub9c8\uc774\ub108\uc2a4 \uc0ac\uc778\uc774 \uc5c6\uc73c\uba74\");\n }"}, {"sha": "c1cdb3c1b23ff243cd24a68db4bbc5f54ae13566", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -20,6 +20,6 @@ impl<T:ToStr> ToStr for PolymorphicThingy<T> {\n }\n \n pub fn main() {\n-    println(Thingy { x: 1, y: 2 }.to_str());\n-    println(PolymorphicThingy { x: Thingy { x: 1, y: 2 } }.to_str());\n+    println!(\"{}\", Thingy { x: 1, y: 2 }.to_str());\n+    println!(\"{}\", PolymorphicThingy { x: Thingy { x: 1, y: 2 } }.to_str());\n }"}, {"sha": "36e5b020b55abb33c0dccc0727cb2908f17a9077", "filename": "src/test/run-pass/new-import-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    println(\"Hello world!\");\n+    println!(\"Hello world!\");\n }"}, {"sha": "36a15373703edd10ed50fafdf4fee7210fd277b0", "filename": "src/test/run-pass/option-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Foption-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Foption-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-ext.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -13,6 +13,6 @@ pub fn main() {\n     let f = thing.find_str(\"{{\");\n \n     if f.is_none() {\n-        println(\"None!\");\n+        println!(\"None!\");\n     }\n }"}, {"sha": "e4f1df2d6376df916c553f21a2e8ec7abbaf7d17", "filename": "src/test/run-pass/pattern-in-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -14,8 +14,8 @@ struct Foo {\n }\n \n pub fn main() {\n-    let f = |(x, _): (int, int)| println((x + 1).to_str());\n-    let g = |Foo { x: x, y: _y }: Foo| println((x + 1).to_str());\n+    let f = |(x, _): (int, int)| println!(\"{}\", x + 1);\n+    let g = |Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n     f((2, 3));\n     g(Foo { x: 1, y: 2 });\n }"}, {"sha": "b6451c57772666d32c979de52a86efc548cf252d", "filename": "src/test/run-pass/shebang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fshebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Fshebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshebang.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -11,4 +11,4 @@\n \n // pp-exact\n \n-pub fn main() { println(\"Hello World\"); }\n+pub fn main() { println!(\"Hello World\"); }"}, {"sha": "5411a514991ae56684844c2b73303da6452d4636", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -18,7 +18,7 @@ enum color {\n \n pub fn main() {\n     let act = format!(\"{:?}\", red);\n-    println(act);\n+    println!(\"{}\", act);\n     assert_eq!(~\"red\", act);\n     assert_eq!(~\"green\", format!(\"{:?}\", green));\n     assert_eq!(~\"white\", format!(\"{:?}\", white));"}, {"sha": "f6ccf987fcbc1ae8d5b9352c1300a647be255450", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -10,6 +10,8 @@\n \n #[feature(managed_boxes)];\n \n+use std::io::println;\n+\n trait Trait<T> {\n     fn f(&self, x: T);\n }\n@@ -21,7 +23,7 @@ struct Struct {\n \n impl Trait<&'static str> for Struct {\n     fn f(&self, x: &'static str) {\n-        println(~\"Hi, \" + x + ~\"!\");\n+        println!(\"Hi, {}!\", x);\n     }\n }\n "}, {"sha": "7ee11b5d6e93f1df504c55144c86c73d31a3d08e", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -21,7 +21,7 @@ struct Struct {\n \n impl Trait for Struct {\n     fn f(&self) {\n-        println(\"Hi!\");\n+        println!(\"Hi!\");\n     }\n }\n "}, {"sha": "c1683082ae74a1cf1c04a65b0980dc7476d41f6a", "filename": "src/test/run-pass/trait-inheritance-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -12,7 +12,7 @@ struct S {\n \n impl Foo<S> for S {\n     fn f(&self, x: &S) {\n-        println(x.x.to_str());\n+        println!(\"{}\", x.x);\n     }\n }\n "}, {"sha": "412fb6625e33fa062a720975a05c927c20303cbc", "filename": "src/test/run-pass/trait-region-pointer-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-region-pointer-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-region-pointer-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-region-pointer-simple.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -18,7 +18,7 @@ struct A {\n \n impl Foo for A {\n     fn f(&self) -> int {\n-        println(~\"Today's number is \" + self.x.to_str());\n+        println!(\"Today's number is {}\", self.x);\n         return self.x;\n     }\n }"}, {"sha": "d798d7ef84b7e95a8fc5a063f411854c36563e99", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -21,7 +21,7 @@ mod base {\n \n     impl ::base::HasNew<Foo> for Foo {\n         fn new() -> Foo {\n-            println(\"Foo\");\n+            println!(\"Foo\");\n             Foo { dummy: () }\n         }\n     }\n@@ -32,7 +32,7 @@ mod base {\n \n     impl ::base::HasNew<Bar> for Bar {\n         fn new() -> Bar {\n-            println(\"Bar\");\n+            println!(\"Bar\");\n             Bar { dummy: () }\n         }\n     }"}, {"sha": "849b5810c5f14da7fe015c45fc3aa1f1f1ebd1e3", "filename": "src/test/run-pass/unit-like-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Funit-like-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc0452acef1355ba566a30c5bd04ccd3b9acef2/src%2Ftest%2Frun-pass%2Funit-like-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct.rs?ref=4fc0452acef1355ba566a30c5bd04ccd3b9acef2", "patch": "@@ -13,6 +13,6 @@ struct Foo;\n pub fn main() {\n     let x: Foo = Foo;\n     match x {\n-        Foo => { println(\"hi\"); }\n+        Foo => { println!(\"hi\"); }\n     }\n }"}]}