{"sha": "fef5fa2ae160118d7165a6394ff9d5447da17729", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZjVmYTJhZTE2MDExOGQ3MTY1YTYzOTRmZjlkNTQ0N2RhMTc3Mjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T13:47:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T13:47:33Z"}, "message": "add a Miri extern fn to mark an allocation as being a static root for leak checking", "tree": {"sha": "812c4c9d7342c9c6e1b682d2d4f2dfe514d380df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812c4c9d7342c9c6e1b682d2d4f2dfe514d380df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fef5fa2ae160118d7165a6394ff9d5447da17729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fef5fa2ae160118d7165a6394ff9d5447da17729", "html_url": "https://github.com/rust-lang/rust/commit/fef5fa2ae160118d7165a6394ff9d5447da17729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fef5fa2ae160118d7165a6394ff9d5447da17729/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4033358956eaca6ccd7fe6d905b572c243673a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/4033358956eaca6ccd7fe6d905b572c243673a62", "html_url": "https://github.com/rust-lang/rust/commit/4033358956eaca6ccd7fe6d905b572c243673a62"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "24cf0cbf06be0c70fe54090b833efa4febbfdb58", "filename": "src/eval.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fef5fa2ae160118d7165a6394ff9d5447da17729/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef5fa2ae160118d7165a6394ff9d5447da17729/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=fef5fa2ae160118d7165a6394ff9d5447da17729", "patch": "@@ -5,6 +5,7 @@ use std::ffi::OsStr;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n+use log::info;\n \n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, layout::LayoutCx, TyCtxt};\n@@ -195,8 +196,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n-    // FIXME: on Windows, we ignore leaks (https://github.com/rust-lang/miri/issues/1302).\n-    let ignore_leaks = config.ignore_leaks || tcx.sess.target.target.target_os == \"windows\";\n+    // Copy setting before we move `config`.\n+    let ignore_leaks = config.ignore_leaks;\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,\n@@ -244,7 +245,8 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n     match res {\n         Ok(return_code) => {\n             if !ignore_leaks {\n-                let leaks = ecx.memory.leak_report();\n+                info!(\"Additonal static roots: {:?}\", ecx.machine.static_roots);\n+                let leaks = ecx.memory.leak_report(&ecx.machine.static_roots);\n                 if leaks != 0 {\n                     tcx.sess.err(\"the evaluated program leaked memory\");\n                     // Ignore the provided return code - let the reported error"}, {"sha": "e9217896ef6eb5c01939d28a2c3f66ceeae4a10e", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fef5fa2ae160118d7165a6394ff9d5447da17729/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef5fa2ae160118d7165a6394ff9d5447da17729/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=fef5fa2ae160118d7165a6394ff9d5447da17729", "patch": "@@ -262,6 +262,9 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// Precomputed `TyLayout`s for primitive data types that are commonly used inside Miri.\n     pub(crate) layouts: PrimitiveLayouts<'tcx>,\n+\n+    /// Allocations that are considered roots of static memory (that may leak).\n+    pub(crate) static_roots: Vec<AllocId>,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -289,6 +292,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             time_anchor: Instant::now(),\n             layouts,\n             threads: ThreadManager::default(),\n+            static_roots: Vec::new(),\n         }\n     }\n }"}, {"sha": "f1b04afe0a620e7da316953edb5ec491ab0dbebe", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fef5fa2ae160118d7165a6394ff9d5447da17729/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef5fa2ae160118d7165a6394ff9d5447da17729/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=fef5fa2ae160118d7165a6394ff9d5447da17729", "patch": "@@ -197,6 +197,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n         // shim, add it to the corresponding submodule.\n         match link_name {\n+            // Miri-specific extern functions\n+            \"miri_static_root\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.force_ptr(ptr)?;\n+                if ptr.offset != Size::ZERO {\n+                    throw_unsup_format!(\"Pointer passed to miri_static_root must point to beginning of an allocated block\");\n+                }\n+                this.machine.static_roots.push(ptr.alloc_id);\n+            }\n+\n             // Standard C allocation\n             \"malloc\" => {\n                 let &[size] = check_arg_count(args)?;"}]}