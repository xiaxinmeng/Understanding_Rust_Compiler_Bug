{"sha": "dee6989b437c966a7cb0b3b6f572f71f529f282c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTY5ODliNDM3Yzk2NmE3Y2IwYjNiNmY1NzJmNzFmNTI5ZjI4MmM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-17T12:48:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-17T12:48:52Z"}, "message": "Rollup merge of #40457 - frewsxcv:frewsxcv-macos, r=steveklabnik\n\nUpdate usages of 'OSX' (and other old names) to 'macOS'.\n\nAs of last year with version 'Sierra', the Mac operating system is now\ncalled 'macOS'.", "tree": {"sha": "288c144bebc972230914fd0e8a5ea34f7d4f940b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288c144bebc972230914fd0e8a5ea34f7d4f940b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee6989b437c966a7cb0b3b6f572f71f529f282c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee6989b437c966a7cb0b3b6f572f71f529f282c", "html_url": "https://github.com/rust-lang/rust/commit/dee6989b437c966a7cb0b3b6f572f71f529f282c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee6989b437c966a7cb0b3b6f572f71f529f282c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69717170a410cd8f3e9647c5f38c72eff59e4c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/69717170a410cd8f3e9647c5f38c72eff59e4c72", "html_url": "https://github.com/rust-lang/rust/commit/69717170a410cd8f3e9647c5f38c72eff59e4c72"}, {"sha": "97a1b6a055d69cf21faa9773133725bdfddc5196", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a1b6a055d69cf21faa9773133725bdfddc5196", "html_url": "https://github.com/rust-lang/rust/commit/97a1b6a055d69cf21faa9773133725bdfddc5196"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "16257c3e9c04c2c55b042170cff09c708b0dd6fc", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -5056,7 +5056,7 @@ Version 0.1  (2012-01-20)\n \n    * Compiler works with the following configurations:\n       * Linux: x86 and x86_64 hosts and targets\n-      * MacOS: x86 and x86_64 hosts and targets\n+      * macOS: x86 and x86_64 hosts and targets\n       * Windows: x86 hosts and targets\n \n    * Cross compilation / multi-target configuration supported."}, {"sha": "ba85e81ff4fc49fadf76e6a5b2424ff5ddbdd3b4", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -182,7 +182,7 @@ fn main() {\n         if env::var(\"RUSTC_RPATH\") == Ok(\"true\".to_string()) {\n             let rpath = if target.contains(\"apple\") {\n \n-                // Note that we need to take one extra step on OSX to also pass\n+                // Note that we need to take one extra step on macOS to also pass\n                 // `-Wl,-instal_name,@rpath/...` to get things to work right. To\n                 // do that we pass a weird flag to the compiler to get it to do\n                 // so. Note that this is definitely a hack, and we should likely"}, {"sha": "0d962bd3b0c9324afbe89dbb41a6f5f9ef278163", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -176,7 +176,7 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--docck-python\").arg(build.python());\n \n     if build.config.build.ends_with(\"apple-darwin\") {\n-        // Force /usr/bin/python on OSX for LLDB tests because we're loading the\n+        // Force /usr/bin/python on macOS for LLDB tests because we're loading the\n         // LLDB plugin's compiled module which only works with the system python\n         // (namely not Homebrew-installed python)\n         cmd.arg(\"--lldb-python\").arg(\"/usr/bin/python\");"}, {"sha": "4201475c60c12da54371ca08286409df73a0e3df", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -249,7 +249,7 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n         cargo.env(\"CFG_LLVM_ROOT\", s);\n     }\n     // Building with a static libstdc++ is only supported on linux right now,\n-    // not for MSVC or OSX\n+    // not for MSVC or macOS\n     if build.config.llvm_static_stdcpp &&\n        !target.contains(\"windows\") &&\n        !target.contains(\"apple\") {"}, {"sha": "270cb8490d9a78cc8b825191b25923e90ae925b4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -846,7 +846,7 @@ impl Build {\n                            .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))\n                            .collect::<Vec<_>>();\n \n-        // If we're compiling on OSX then we add a few unconditional flags\n+        // If we're compiling on macOS then we add a few unconditional flags\n         // indicating that we want libc++ (more filled out than libstdc++) and\n         // we want to compile for 10.7. This way we can ensure that\n         // LLVM/jemalloc/etc are all properly compiled."}, {"sha": "235ce9360eff46a2004f6fcef30ebb7e64fe9a35", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -151,10 +151,10 @@ pub fn check(build: &mut Build) {\n     }\n \n     for target in build.config.target.iter() {\n-        // Can't compile for iOS unless we're on OSX\n+        // Can't compile for iOS unless we're on macOS\n         if target.contains(\"apple-ios\") &&\n            !build.config.build.contains(\"apple-darwin\") {\n-            panic!(\"the iOS target is only supported on OSX\");\n+            panic!(\"the iOS target is only supported on macOS\");\n         }\n \n         // Make sure musl-root is valid if specified"}, {"sha": "b4f580fcdfbef2db0ffb8a0fd605ff569afa8531", "filename": "src/doc/book/src/testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -147,7 +147,7 @@ And that's reflected in the summary line:\n test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n ```\n \n-We also get a non-zero status code. We can use `$?` on OS X and Linux:\n+We also get a non-zero status code. We can use `$?` on macOS and Linux:\n \n ```bash\n $ echo $?"}, {"sha": "a7a67ef76d4f75599be5998d701b67340ea34d07", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -30,7 +30,7 @@ pub use imp::*;\n mod imp {\n     use libc::{c_int, c_void, size_t};\n \n-    // Note that the symbols here are prefixed by default on OSX and Windows (we\n+    // Note that the symbols here are prefixed by default on macOS and Windows (we\n     // don't explicitly request it), and on Android and DragonFly we explicitly\n     // request it as unprefixing cause segfaults (mismatches in allocators).\n     extern \"C\" {"}, {"sha": "225d6fc9bb2b211100ff6bdf65a9fc7a8018d26c", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -123,7 +123,7 @@ pub enum LinkagePreference {\n pub enum NativeLibraryKind {\n     NativeStatic,    // native static library (.a archive)\n     NativeStaticNobundle, // native static library, which doesn't get bundled into .rlibs\n-    NativeFramework, // OSX-specific\n+    NativeFramework, // macOS-specific\n     NativeUnknown,   // default way to specify a dynamic library\n }\n "}, {"sha": "d7a765fb822158b3cbcd253713d1552d1779ff1a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -971,7 +971,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n           \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n-          \"pass `-install_name @rpath/...` to the OSX linker\"),\n+          \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n                                    \"Use a sanitizer\"),\n }"}, {"sha": "3a551a2b124b7cc69edc9856c2660f05a15178b9", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -13,12 +13,12 @@ use std::env;\n use target::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    // ELF TLS is only available in OSX 10.7+. If you try to compile for 10.6\n+    // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n-    // segfaulting at runtime when run on 10.6. Rust by default supports OSX\n+    // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n     // 10.7+, but there is a standard environment variable,\n     // MACOSX_DEPLOYMENT_TARGET, which is used to signal targeting older\n-    // versions of OSX. For example compiling on 10.10 with\n+    // versions of macOS. For example compiling on 10.10 with\n     // MACOSX_DEPLOYMENT_TARGET set to 10.6 will cause the linker to generate\n     // warnings about the usage of ELF TLS.\n     //\n@@ -33,7 +33,7 @@ pub fn opts() -> TargetOptions {\n     }).unwrap_or((10, 7));\n \n     TargetOptions {\n-        // OSX has -dead_strip, which doesn't rely on function_sections\n+        // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n         executables: true,"}, {"sha": "559418d2c4f5ffae02822040f3ed612b3d8b3085", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -318,8 +318,8 @@ pub struct TargetOptions {\n     /// Whether the target toolchain is like OpenBSD's.\n     /// Only useful for compiling against OpenBSD, for configuring abi when returning a struct.\n     pub is_like_openbsd: bool,\n-    /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\n-    /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n+    /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n+    /// in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n     /// Whether the target toolchain is like Solaris's.\n     /// Only useful for compiling against Illumos/Solaris,"}, {"sha": "63c14a0035f1a29d0774794f984fc2ccfb5ed40a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -99,7 +99,7 @@ fn register_native_lib(sess: &Session,\n     }\n     let is_osx = sess.target.target.options.is_like_osx;\n     if lib.kind == cstore::NativeFramework && !is_osx {\n-        let msg = \"native frameworks are only available on OSX targets\";\n+        let msg = \"native frameworks are only available on macOS targets\";\n         match span {\n             Some(span) => span_err!(sess, span, E0455, \"{}\", msg),\n             None => sess.err(msg),"}, {"sha": "fbdc4695cf826cf0afe3357543bd746d96670fa3", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -27,7 +27,7 @@ name. Example:\n \"##,\n \n E0455: r##\"\n-Linking with `kind=framework` is only supported when targeting OS X,\n+Linking with `kind=framework` is only supported when targeting macOS,\n as frameworks are specific to that operating system.\n \n Erroneous code example:"}, {"sha": "0c31e30671dc2678abdaae6d93030e836139d04c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -1404,7 +1404,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n //\n // And here we run into yet another obscure archive bug: in which metadata\n // loaded from archives may have trailing garbage bytes. Awhile back one of\n-// our tests was failing sporadically on the OSX 64-bit builders (both nopt\n+// our tests was failing sporadically on the macOS 64-bit builders (both nopt\n // and opt) by having ebml generate an out-of-bounds panic when looking at\n // metadata.\n //"}, {"sha": "cf1e10b317b1ed030a4acbdf60bc28131d477d61", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -583,7 +583,7 @@ fn link_rlib<'a>(sess: &'a Session,\n             }\n \n             // After adding all files to the archive, we need to update the\n-            // symbol table of the archive. This currently dies on OSX (see\n+            // symbol table of the archive. This currently dies on macOS (see\n             // #11162), and isn't necessary there anyway\n             if !sess.target.target.options.is_like_osx {\n                 ab.update_symbols();\n@@ -764,7 +764,7 @@ fn link_natively(sess: &Session,\n     // pain to land PRs when they spuriously fail due to a segfault.\n     //\n     // The issue #38878 has some more debugging information on it as well, but\n-    // this unfortunately looks like it's just a race condition in OSX's linker\n+    // this unfortunately looks like it's just a race condition in macOS's linker\n     // with some thread pool working in the background. It seems that no one\n     // currently knows a fix for this so in the meantime we're left with this...\n     info!(\"{:?}\", &cmd);\n@@ -841,7 +841,7 @@ fn link_natively(sess: &Session,\n     }\n \n \n-    // On OSX, debuggers need this utility to get run to do some munging of\n+    // On macOS, debuggers need this utility to get run to do some munging of\n     // the symbols\n     if sess.target.target.options.is_like_osx && sess.opts.debuginfo != NoDebugInfo {\n         match Command::new(\"dsymutil\").arg(out_filename).output() {"}, {"sha": "80801e8161cd063e81e1c64b196e5396c11b1b66", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -139,7 +139,7 @@ impl<'a> Linker for GnuLinker<'a> {\n                     .arg(\"-l\").arg(lib)\n                     .arg(\"-Wl,--no-whole-archive\");\n         } else {\n-            // -force_load is the OSX equivalent of --whole-archive, but it\n+            // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n             let mut v = OsString::from(\"-Wl,-force_load,\");\n             v.push(&archive::find_library(lib, search_path, &self.sess));"}, {"sha": "fe58bc8f5f28bde9bed02f7a2188ee2af45dddd6", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -351,7 +351,7 @@ fn mangle<PI: Iterator<Item=InternedString>>(path: PI, hash: &str) -> String {\n     // Follow C++ namespace-mangling style, see\n     // http://en.wikipedia.org/wiki/Name_mangling for more info.\n     //\n-    // It turns out that on OSX you can actually have arbitrary symbols in\n+    // It turns out that on macOS you can actually have arbitrary symbols in\n     // function names (at least when given to LLVM), but this is not possible\n     // when using unix's linker. Perhaps one day when we just use a linker from LLVM\n     // we won't need to do this name mangling. The problem with name mangling is"}, {"sha": "1d4aebf135b9ec1dcf2a459396ae725bc8f62f02", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -164,9 +164,9 @@ pub fn finalize(cx: &CrateContext) {\n         llvm::LLVMRustDIBuilderFinalize(DIB(cx));\n         llvm::LLVMRustDIBuilderDispose(DIB(cx));\n         // Debuginfo generation in LLVM by default uses a higher\n-        // version of dwarf than OS X currently understands. We can\n+        // version of dwarf than macOS currently understands. We can\n         // instruct LLVM to emit an older version of dwarf, however,\n-        // for OS X to understand. For more info see #11352\n+        // for macOS to understand. For more info see #11352\n         // This can be overridden using --llvm-opts -dwarf-version,N.\n         // Android has the same issue (#22398)\n         if cx.sess().target.target.options.is_like_osx ||"}, {"sha": "a38ef2b2518ed2e3f56bee7d5a43048f67098864", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -42,7 +42,7 @@ impl PluginManager {\n     /// Load a plugin with the given name.\n     ///\n     /// Turns `name` into the proper dynamic library filename for the given\n-    /// platform. On windows, it turns into name.dll, on OS X, name.dylib, and\n+    /// platform. On windows, it turns into name.dll, on macOS, name.dylib, and\n     /// elsewhere, libname.so.\n     pub fn load_plugin(&mut self, name: String) {\n         let x = self.prefix.join(libname(name));"}, {"sha": "c9406f7310039995a17e901115f9c109b4b75678", "filename": "src/libstd/os/macos/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! MacOS-specific definitions\n+//! macOS-specific definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n "}, {"sha": "8ffddf638b10c4939b55cad2d7c7772f35d5e14f", "filename": "src/libstd/os/macos/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! MacOS-specific raw type definitions\n+//! macOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n #![rustc_deprecated(since = \"1.8.0\","}, {"sha": "4f33d72639816ba0cbf59722c2cfb2454639f139", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -52,7 +52,7 @@\n //!     If an application does not have `getrandom` and likely to be run soon after first booting,\n //!     or on a system with very few entropy sources, one should consider using `/dev/random` via\n //!     `ReaderRng`.\n-//! -   On some systems (e.g. FreeBSD, OpenBSD and Mac OS X) there is no difference\n+//! -   On some systems (e.g. FreeBSD, OpenBSD and macOS) there is no difference\n //!     between the two sources. (Also note that, on some systems e.g. FreeBSD, both `/dev/random`\n //!     and `/dev/urandom` may block once if the CSPRNG has not seeded yet.)\n \n@@ -195,7 +195,7 @@ impl Rng for ThreadRng {\n /// A random number generator that retrieves randomness straight from\n /// the operating system. Platform sources:\n ///\n-/// - Unix-like systems (Linux, Android, Mac OSX): read directly from\n+/// - Unix-like systems (Linux, Android, macOS): read directly from\n ///   `/dev/urandom`, or from `getrandom(2)` system call if available.\n /// - Windows: calls `CryptGenRandom`, using the default cryptographic\n ///   service provider with the `PROV_RSA_FULL` type."}, {"sha": "f6414673dace13634300ab2c626e89620e053377", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -96,17 +96,17 @@ pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n     // `None`.\n     (*ptr).dtor_running.set(true);\n \n-    // The OSX implementation of TLS apparently had an odd aspect to it\n+    // The macOS implementation of TLS apparently had an odd aspect to it\n     // where the pointer we have may be overwritten while this destructor\n     // is running. Specifically if a TLS destructor re-accesses TLS it may\n     // trigger a re-initialization of all TLS variables, paving over at\n     // least some destroyed ones with initial values.\n     //\n-    // This means that if we drop a TLS value in place on OSX that we could\n+    // This means that if we drop a TLS value in place on macOS that we could\n     // revert the value to its original state halfway through the\n     // destructor, which would be bad!\n     //\n-    // Hence, we use `ptr::read` on OSX (to move to a \"safe\" location)\n+    // Hence, we use `ptr::read` on macOS (to move to a \"safe\" location)\n     // instead of drop_in_place.\n     if cfg!(target_os = \"macos\") {\n         ptr::read((*ptr).inner.get());"}, {"sha": "707b4cbc6acafad8dabdf282ee97d21a988a92c3", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -249,7 +249,7 @@ impl Command {\n     // mutex, and then after the fork they unlock it.\n     //\n     // Despite this information, libnative's spawn has been witnessed to\n-    // deadlock on both OSX and FreeBSD. I'm not entirely sure why, but\n+    // deadlock on both macOS and FreeBSD. I'm not entirely sure why, but\n     // all collected backtraces point at malloc/free traffic in the\n     // child spawned process.\n     //"}, {"sha": "bf52da2ed4ac51035661ff7b969fc4676c3db507", "filename": "src/libstd/sys/unix/backtrace/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -13,7 +13,7 @@\n /// Some methods of getting a backtrace:\n ///\n /// * The backtrace() functions on unix. It turns out this doesn't work very\n-///   well for green threads on OSX, and the address to symbol portion of it\n+///   well for green threads on macOS, and the address to symbol portion of it\n ///   suffers problems that are described below.\n ///\n /// * Using libunwind. This is more difficult than it sounds because libunwind\n@@ -51,9 +51,9 @@\n ///\n /// * Use dladdr(). The original backtrace()-based idea actually uses dladdr()\n ///   behind the scenes to translate, and this is why backtrace() was not used.\n-///   Conveniently, this method works fantastically on OSX. It appears dladdr()\n+///   Conveniently, this method works fantastically on macOS. It appears dladdr()\n ///   uses magic to consult the local symbol table, or we're putting everything\n-///   in the dynamic symbol table anyway. Regardless, for OSX, this is the\n+///   in the dynamic symbol table anyway. Regardless, for macOS, this is the\n ///   method used for translation. It's provided by the system and easy to do.o\n ///\n ///   Sadly, all other systems have a dladdr() implementation that does not\n@@ -75,7 +75,7 @@\n /// * Use `libbacktrace`. It turns out that this is a small library bundled in\n ///   the gcc repository which provides backtrace and symbol translation\n ///   functionality. All we really need from it is the backtrace functionality,\n-///   and we only really need this on everything that's not OSX, so this is the\n+///   and we only really need this on everything that's not macOS, so this is the\n ///   chosen route for now.\n ///\n /// In summary, the current situation uses libgcc_s to get a trace of stack"}, {"sha": "55118829eee9f950ef900cb1a5ca62c068c63eb9", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -204,7 +204,7 @@ impl SocketAddr {\n         let len = self.len as usize - sun_path_offset();\n         let path = unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.addr.sun_path) };\n \n-        // OSX seems to return a len of 16 and a zeroed sun_path for unnamed addresses\n+        // macOS seems to return a len of 16 and a zeroed sun_path for unnamed addresses\n         if len == 0 || (cfg!(not(target_os = \"linux\")) && self.addr.sun_path[0] == 0) {\n             AddressKind::Unnamed\n         } else if self.addr.sun_path[0] == 0 {"}, {"sha": "07d76a93dd150d12d13f539376716eda10e5df07", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -128,7 +128,7 @@ unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n     register_dtor_fallback(t, dtor);\n }\n \n-// OSX's analog of the above linux function is this _tlv_atexit function.\n+// macOS's analog of the above linux function is this _tlv_atexit function.\n // The disassembly of thread_local globals in C++ (at least produced by\n // clang) will have this show up in the output.\n #[cfg(target_os = \"macos\")]\n@@ -154,17 +154,17 @@ pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n     // `None`.\n     (*ptr).dtor_running.set(true);\n \n-    // The OSX implementation of TLS apparently had an odd aspect to it\n+    // The macOS implementation of TLS apparently had an odd aspect to it\n     // where the pointer we have may be overwritten while this destructor\n     // is running. Specifically if a TLS destructor re-accesses TLS it may\n     // trigger a re-initialization of all TLS variables, paving over at\n     // least some destroyed ones with initial values.\n     //\n-    // This means that if we drop a TLS value in place on OSX that we could\n+    // This means that if we drop a TLS value in place on macOS that we could\n     // revert the value to its original state halfway through the\n     // destructor, which would be bad!\n     //\n-    // Hence, we use `ptr::read` on OSX (to move to a \"safe\" location)\n+    // Hence, we use `ptr::read` on macOS (to move to a \"safe\" location)\n     // instead of drop_in_place.\n     if cfg!(target_os = \"macos\") {\n         ptr::read((*ptr).inner.get());"}, {"sha": "405fac2b9d743e04ceb513b7fee59a2b881b06e9", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -29,7 +29,7 @@ fn max_len() -> usize {\n     // with the man page quoting that if the count of bytes to read is\n     // greater than `SSIZE_MAX` the result is \"unspecified\".\n     //\n-    // On OSX, however, apparently the 64-bit libc is either buggy or\n+    // On macOS, however, apparently the 64-bit libc is either buggy or\n     // intentionally showing odd behavior by rejecting any read with a size\n     // larger than or equal to INT_MAX. To handle both of these the read\n     // size is capped on both platforms."}, {"sha": "e893a139094a14fe229b65a7a06b21d6721f5538", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -439,7 +439,7 @@ impl File {\n         // Linux kernel then the flag is just ignored by the OS, so we continue\n         // to explicitly ask for a CLOEXEC fd here.\n         //\n-        // The CLOEXEC flag, however, is supported on versions of OSX/BSD/etc\n+        // The CLOEXEC flag, however, is supported on versions of macOS/BSD/etc\n         // that we support, so we only do this on Linux currently.\n         if cfg!(target_os = \"linux\") {\n             fd.set_cloexec()?;\n@@ -573,7 +573,7 @@ impl fmt::Debug for File {\n         #[cfg(target_os = \"macos\")]\n         fn get_path(fd: c_int) -> Option<PathBuf> {\n             // FIXME: The use of PATH_MAX is generally not encouraged, but it\n-            // is inevitable in this case because OS X defines `fcntl` with\n+            // is inevitable in this case because macOS defines `fcntl` with\n             // `F_GETPATH` in terms of `MAXPATHLEN`, and there are no\n             // alternatives. If a better method is invented, it should be used\n             // instead."}, {"sha": "5f1a6c2f7465150a9132072807c3f9259d617651", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -434,8 +434,8 @@ mod tests {\n     }\n \n     // See #14232 for more information, but it appears that signal delivery to a\n-    // newly spawned process may just be raced in the OSX, so to prevent this\n-    // test from being flaky we ignore it on OSX.\n+    // newly spawned process may just be raced in the macOS, so to prevent this\n+    // test from being flaky we ignore it on macOS.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n     #[cfg_attr(target_os = \"nacl\", ignore)] // no signals on NaCl."}, {"sha": "a213273aac8fd55f174a91b145b2e27b139546ee", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -129,7 +129,7 @@ impl Command {\n     // mutex, and then after the fork they unlock it.\n     //\n     // Despite this information, libnative's spawn has been witnessed to\n-    // deadlock on both OSX and FreeBSD. I'm not entirely sure why, but\n+    // deadlock on both macOS and FreeBSD. I'm not entirely sure why, but\n     // all collected backtraces point at malloc/free traffic in the\n     // child spawned process.\n     //"}, {"sha": "51adbc24ae04779ed6eaba4f2ec7c6014bf2989e", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -187,7 +187,7 @@ mod imp {\n             let stack =  libc::stack_t {\n                 ss_sp: ptr::null_mut(),\n                 ss_flags: SS_DISABLE,\n-                // Workaround for bug in MacOS implementation of sigaltstack\n+                // Workaround for bug in macOS implementation of sigaltstack\n                 // UNIX2003 which returns ENOMEM when disabling a stack while\n                 // passing ss_size smaller than MINSIGSTKSZ. According to POSIX\n                 // both ss_sp and ss_size should be ignored in this case."}, {"sha": "e2b22b1d89f045496e267eed902d2b8e3adf2fe4", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -74,7 +74,7 @@ use mem;\n ///    destroyed, but not all platforms have this guard. Those platforms that do\n ///    not guard typically have a synthetic limit after which point no more\n ///    destructors are run.\n-/// 3. On OSX, initializing TLS during destruction of other TLS slots can\n+/// 3. On macOS, initializing TLS during destruction of other TLS slots can\n ///    sometimes cancel *all* destructors for the current thread, whether or not\n ///    the slots have already had their destructors run or not.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -524,9 +524,9 @@ mod tests {\n     }\n \n     // Note that this test will deadlock if TLS destructors aren't run (this\n-    // requires the destructor to be run to pass the test). OSX has a known bug\n+    // requires the destructor to be run to pass the test). macOS has a known bug\n     // where dtors-in-dtors may cancel other destructors, so we just ignore this\n-    // test on OSX.\n+    // test on macOS.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n     fn dtors_in_dtors_in_dtors() {"}, {"sha": "c9bde8b7b33f29c1c98eceba4a0df5300eb2109f", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -67,7 +67,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n             p.pop();\n \n             // on some installations the dir is named after the hex of the char\n-            // (e.g. OS X)\n+            // (e.g. macOS)\n             p.push(&format!(\"{:x}\", first_char as usize));\n             p.push(term);\n             if fs::metadata(&p).is_ok() {\n@@ -82,7 +82,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n #[ignore(reason = \"buildbots don't have ncurses installed and I can't mock everything I need\")]\n fn test_get_dbpath_for_term() {\n     // woefully inadequate test coverage\n-    // note: current tests won't work with non-standard terminfo hierarchies (e.g. OS X's)\n+    // note: current tests won't work with non-standard terminfo hierarchies (e.g. macOS's)\n     use std::env;\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     fn x(t: &str) -> String {"}, {"sha": "31009554c690d5b8657f89605a0d0ae4c245b4c5", "filename": "src/test/compile-fail/allocator-dylib-is-system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -30,7 +30,7 @@ extern crate allocator_dylib;\n // that this just passes on those platforms we link in some other allocator to\n // ensure we get the same error.\n //\n-// So long as we CI linux/OSX we should be good.\n+// So long as we CI linux/macOS we should be good.\n #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n extern crate alloc_jemalloc;\n #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]"}, {"sha": "68e01bad96bb20ddb2703f0052ef2b9ee013260b", "filename": "src/test/compile-fail/allocator-rust-dylib-is-jemalloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -28,7 +28,7 @@ extern crate allocator_dylib2;\n // that this just passes on those platforms we link in some other allocator to\n // ensure we get the same error.\n //\n-// So long as we CI linux/OSX we should be good.\n+// So long as we CI linux/macOS we should be good.\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"x86\", target_arch = \"x86_64\")),\n           target_os = \"macos\"))]\n extern crate alloc_system;"}, {"sha": "1ecf63813e9ab8976d8b4653dab267f44e6cf254", "filename": "src/test/compile-fail/manual-link-framework.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fmanual-link-framework.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fmanual-link-framework.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmanual-link-framework.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -11,7 +11,7 @@\n // ignore-macos\n // ignore-ios\n // compile-flags:-l framework=foo\n-// error-pattern: native frameworks are only available on OSX targets\n+// error-pattern: native frameworks are only available on macOS targets\n \n fn main() {\n }"}, {"sha": "026ef3c95f6639c1901fec31f841e3c748af30e8", "filename": "src/test/compile-fail/osx-frameworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Fcompile-fail%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fosx-frameworks.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -12,7 +12,7 @@\n \n #[link(name = \"foo\", kind = \"framework\")]\n extern {}\n-//~^^ ERROR: native frameworks are only available on OSX\n+//~^^ ERROR: native frameworks are only available on macOS\n \n fn main() {\n }"}, {"sha": "ede2325b51c2fbf1fc84aedbf80d3d4d3f3357d1", "filename": "src/test/run-pass/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-cast.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -94,7 +94,7 @@ fn main() {\n             // (E.g. negative float to unsigned integer goes through a\n             // library routine on the default i686 platforms, and the\n             // implementation of that routine differs on e.g. Linux\n-            // vs. OSX, resulting in different answers.)\n+            // vs. macOS, resulting in different answers.)\n             if $from::is_float() {\n                 if !$to::in_range(A) { from.0 = 0 as $to; to.0 = 0 as $to; }\n                 if !$to::in_range(B) { from.1 = 0 as $to; to.1 = 0 as $to; }"}, {"sha": "fcc5a727cf2d6559c030c66fd66aa6db0708a331", "filename": "src/tools/compiletest/src/raise_fd_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee6989b437c966a7cb0b3b6f572f71f529f282c/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs?ref=dee6989b437c966a7cb0b3b6f572f71f529f282c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// darwin_fd_limit exists to work around an issue where launchctl on Mac OS X\n+/// darwin_fd_limit exists to work around an issue where launchctl on macOS\n /// defaults the rlimit maxfiles to 256/unlimited. The default soft limit of 256\n /// ends up being far too low for our multithreaded scheduler testing, depending\n /// on the number of cores available."}]}