{"sha": "1e6406e22338af234180071c5b82e390cb43904b", "node_id": "C_kwDOAAsO6NoAKDFlNjQwNmUyMjMzOGFmMjM0MTgwMDcxYzViODJlMzkwY2I0MzkwNGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-01T13:49:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-01T13:49:05Z"}, "message": "Move extern prelude into CrateData", "tree": {"sha": "b4d042d7410e3f5688480a924bbd0422c11abebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4d042d7410e3f5688480a924bbd0422c11abebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e6406e22338af234180071c5b82e390cb43904b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6406e22338af234180071c5b82e390cb43904b", "html_url": "https://github.com/rust-lang/rust/commit/1e6406e22338af234180071c5b82e390cb43904b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e6406e22338af234180071c5b82e390cb43904b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdca349573c00542635848a16276272fb0c1acc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdca349573c00542635848a16276272fb0c1acc9", "html_url": "https://github.com/rust-lang/rust/commit/bdca349573c00542635848a16276272fb0c1acc9"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "e4693a2b7881e4d82e4105e8553bed06afc1ffb1", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e6406e22338af234180071c5b82e390cb43904b/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6406e22338af234180071c5b82e390cb43904b/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=1e6406e22338af234180071c5b82e390cb43904b", "patch": "@@ -103,8 +103,6 @@ pub struct DefMap {\n     /// but that attribute is nightly and when used in a block, it affects resolution globally\n     /// so we aren't handling this correctly anyways).\n     prelude: Option<ModuleId>,\n-    /// The extern prelude is only populated for non-block DefMaps\n-    extern_prelude: FxHashMap<Name, ModuleId>,\n     /// `macro_use` prelude that contains macros from `#[macro_use]`'d external crates. Note that\n     /// this contains all kinds of macro, not just `macro_rules!` macro.\n     macro_use_prelude: FxHashMap<Name, MacroId>,\n@@ -115,12 +113,13 @@ pub struct DefMap {\n \n     diagnostics: Vec<DefDiagnostic>,\n \n-    // FIXME: Arc this so we can share it with block def maps\n     data: Arc<CrateData>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n struct CrateData {\n+    extern_prelude: FxHashMap<Name, ModuleId>,\n+\n     /// Side table for resolving derive helpers.\n     exported_derives: FxHashMap<MacroDefId, Box<[Name]>>,\n     fn_proc_macro_mapping: FxHashMap<FunctionId, ProcMacroId>,\n@@ -141,9 +140,11 @@ struct CrateData {\n     edition: Edition,\n     recursion_limit: Option<u32>,\n }\n+\n impl CrateData {\n     fn shrink_to_fit(&mut self) {\n         let Self {\n+            extern_prelude,\n             exported_derives,\n             fn_proc_macro_mapping,\n             registered_attrs,\n@@ -156,6 +157,7 @@ impl CrateData {\n             edition: _,\n             recursion_limit: _,\n         } = self;\n+        extern_prelude.shrink_to_fit();\n         exported_derives.shrink_to_fit();\n         fn_proc_macro_mapping.shrink_to_fit();\n         registered_attrs.shrink_to_fit();\n@@ -181,7 +183,11 @@ struct BlockRelativeModuleId {\n \n impl BlockRelativeModuleId {\n     fn def_map(self, db: &dyn DefDatabase, krate: CrateId) -> Arc<DefMap> {\n-        ModuleId { krate, block: self.block, local_id: self.local_id }.def_map(db)\n+        self.into_module(krate).def_map(db)\n+    }\n+\n+    fn into_module(self, krate: CrateId) -> ModuleId {\n+        ModuleId { krate, block: self.block, local_id: self.local_id }\n     }\n }\n \n@@ -330,15 +336,14 @@ impl DefMap {\n         DefMap {\n             _c: Count::new(),\n             block: None,\n+            modules,\n             krate,\n-            extern_prelude: FxHashMap::default(),\n+            prelude: None,\n             macro_use_prelude: FxHashMap::default(),\n             derive_helpers_in_scope: FxHashMap::default(),\n-            prelude: None,\n-            modules,\n             diagnostics: Vec::new(),\n             data: Arc::new(CrateData {\n-                recursion_limit: None,\n+                extern_prelude: FxHashMap::default(),\n                 exported_derives: FxHashMap::default(),\n                 fn_proc_macro_mapping: FxHashMap::default(),\n                 proc_macro_loading_error: None,\n@@ -349,6 +354,7 @@ impl DefMap {\n                 no_core: false,\n                 no_std: false,\n                 edition,\n+                recursion_limit: None,\n             }),\n         }\n     }\n@@ -412,7 +418,7 @@ impl DefMap {\n     }\n \n     pub(crate) fn extern_prelude(&self) -> impl Iterator<Item = (&Name, ModuleId)> + '_ {\n-        self.extern_prelude.iter().map(|(name, def)| (name, *def))\n+        self.data.extern_prelude.iter().map(|(name, def)| (name, *def))\n     }\n \n     pub(crate) fn macro_use_prelude(&self) -> impl Iterator<Item = (&Name, MacroId)> + '_ {\n@@ -573,7 +579,6 @@ impl DefMap {\n         // Exhaustive match to require handling new fields.\n         let Self {\n             _c: _,\n-            extern_prelude,\n             macro_use_prelude,\n             diagnostics,\n             modules,\n@@ -584,7 +589,6 @@ impl DefMap {\n             data: _,\n         } = self;\n \n-        extern_prelude.shrink_to_fit();\n         macro_use_prelude.shrink_to_fit();\n         diagnostics.shrink_to_fit();\n         modules.shrink_to_fit();"}, {"sha": "29ee13648ea5d69f7e8a76021c4bfaff553fd7f2", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1e6406e22338af234180071c5b82e390cb43904b/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6406e22338af234180071c5b82e390cb43904b/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1e6406e22338af234180071c5b82e390cb43904b", "patch": "@@ -5,7 +5,7 @@\n \n use std::{iter, mem};\n \n-use base_db::{CrateId, Edition, FileId};\n+use base_db::{CrateId, Dependency, Edition, FileId};\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_expand::{\n@@ -62,22 +62,16 @@ static GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n static EXPANSION_DEPTH_LIMIT: Limit = Limit::new(128);\n static FIXED_POINT_LIMIT: Limit = Limit::new(8192);\n \n-pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: TreeId) -> DefMap {\n+pub(super) fn collect_defs(db: &dyn DefDatabase, def_map: DefMap, tree_id: TreeId) -> DefMap {\n     let crate_graph = db.crate_graph();\n \n     let mut deps = FxHashMap::default();\n     // populate external prelude and dependency list\n     let krate = &crate_graph[def_map.krate];\n     for dep in &krate.dependencies {\n         tracing::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n-        let dep_def_map = db.crate_def_map(dep.crate_id);\n-        let dep_root = dep_def_map.module_id(DefMap::ROOT);\n \n-        deps.insert(dep.as_name(), dep_root);\n-\n-        if dep.is_prelude() && !tree_id.is_block() {\n-            def_map.extern_prelude.insert(dep.as_name(), dep_root);\n-        }\n+        deps.insert(dep.as_name(), dep.clone());\n     }\n \n     let cfg_options = &krate.cfg_options;\n@@ -245,7 +239,7 @@ enum MacroDirectiveKind {\n struct DefCollector<'a> {\n     db: &'a dyn DefDatabase,\n     def_map: DefMap,\n-    deps: FxHashMap<Name, ModuleId>,\n+    deps: FxHashMap<Name, Dependency>,\n     glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, Visibility)>>,\n     unresolved_imports: Vec<ImportDirective>,\n     indeterminate_imports: Vec<ImportDirective>,\n@@ -289,6 +283,15 @@ impl DefCollector<'_> {\n             crate_data.proc_macro_loading_error = Some(e.clone());\n         }\n \n+        for (name, dep) in &self.deps {\n+            if dep.is_prelude() {\n+                crate_data.extern_prelude.insert(\n+                    name.clone(),\n+                    ModuleId { krate: dep.crate_id, block: None, local_id: DefMap::ROOT },\n+                );\n+            }\n+        }\n+\n         // Process other crate-level attributes.\n         for attr in &*attrs {\n             if let Some(cfg) = attr.cfg() {\n@@ -832,15 +835,16 @@ impl DefCollector<'_> {\n         if *name == name!(self) {\n             cov_mark::hit!(extern_crate_self_as);\n             let root = match self.def_map.block {\n-                Some(_) => {\n-                    let def_map = self.def_map.crate_root(self.db).def_map(self.db);\n-                    def_map.module_id(DefMap::ROOT)\n-                }\n+                Some(_) => self.def_map.crate_root(self.db),\n                 None => self.def_map.module_id(DefMap::ROOT),\n             };\n             Some(root)\n         } else {\n-            self.deps.get(name).copied()\n+            self.deps.get(name).map(|dep| ModuleId {\n+                krate: dep.crate_id,\n+                block: None,\n+                local_id: DefMap::ROOT,\n+            })\n         }\n     }\n \n@@ -883,7 +887,10 @@ impl DefCollector<'_> {\n                 {\n                     if let (Some(ModuleDefId::ModuleId(def)), Some(name)) = (def.take_types(), name)\n                     {\n-                        self.def_map.extern_prelude.insert(name.clone(), def);\n+                        Arc::get_mut(&mut self.def_map.data)\n+                            .unwrap()\n+                            .extern_prelude\n+                            .insert(name.clone(), def);\n                     }\n                 }\n "}, {"sha": "c5335aaf121e78eda4f85e2225edb832bd9177d1", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e6406e22338af234180071c5b82e390cb43904b/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6406e22338af234180071c5b82e390cb43904b/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=1e6406e22338af234180071c5b82e390cb43904b", "patch": "@@ -80,8 +80,8 @@ impl DefMap {\n         name: &Name,\n     ) -> Option<ModuleId> {\n         match self.block {\n-            Some(_) => self.crate_root(db).def_map(db).extern_prelude.get(name).copied(),\n-            None => self.extern_prelude.get(name).copied(),\n+            Some(_) => self.crate_root(db).def_map(db).data.extern_prelude.get(name).copied(),\n+            None => self.data.extern_prelude.get(name).copied(),\n         }\n     }\n \n@@ -304,7 +304,7 @@ impl DefMap {\n                     Some((_, segment)) => segment,\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n-                if let Some(&def) = self.extern_prelude.get(segment) {\n+                if let Some(&def) = self.data.extern_prelude.get(segment) {\n                     tracing::debug!(\"absolute path {:?} resolved to crate {:?}\", path, def);\n                     PerNs::types(def.into(), Visibility::Public)\n                 } else {\n@@ -453,7 +453,8 @@ impl DefMap {\n         };\n \n         let extern_prelude = || {\n-            self.extern_prelude\n+            self.data\n+                .extern_prelude\n                 .get(name)\n                 .map_or(PerNs::none(), |&it| PerNs::types(it.into(), Visibility::Public))\n         };"}]}