{"sha": "e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "node_id": "C_kwDOAAsO6NoAKGUyNDUzZGMyZmY4ZWE1OTg0YjllYmE0MGFmOGY4ZDEzZWU0ZTVkYTU", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-10-18T17:33:38Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-10-18T17:33:38Z"}, "message": "Revert \"Rollup merge of #86011 - tlyu:correct-sized-bound-spans, r=estebank\"\n\nThis reverts commit 36a1076d24697621a3bb67ef654b4eb79647aa54, reversing\nchanges made to e1e9319d93aea755c444c8f8ff863b0936d7a4b6.", "tree": {"sha": "28bb99c37a42ff1a477db1ee4b26b2ed88a321b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28bb99c37a42ff1a477db1ee4b26b2ed88a321b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmFtr/YACgkQ2rpbBylh\nwYrJZhAAqEQTOtTkkXQ8usNIHaQBous3L2TqrQYPUnaujTnYe27o1fIl9Bqsm2xm\n0b1D8Ll8IfvN/DYFjxaVDywTPwgbB+cZHsWXy52dg0PVVZUmx3AjFNR/5LNIwNaO\nSkTqMjJ1AuHQblIA7/7phMPgkbH3oY4eD4l1SOS17CXM1zBgFKz+DwKCxfGz7Q+B\ntKeIubURdSlX1ckTL8g/fPrl5yqsPfao+b8HU1jWNopIXdClPKIdBkZGAmQep/wH\n5tDcf62B72jRM3kqPr7jSggnA6ib5Xbr692Fh9dvONFE3pRZukTgEU6xATKI3VLa\nJDfNvbh+AG9+fg1vl73cSKgQhMQJ8m7oX8GCwQZ5dz6YLFFeea3u3gTcp9YHZRC7\ni0NpYuOAi3w38aEaofPUH8qz4DRyL53pvKRSHxKFaaVFhrG2kjgSI9NK3TO0WW5r\nw+CKYl12xcIhWPcrbt9liTDsP1YleHVtbGmQhsRgqUCyL585XybjdfwiCAaD6Tnu\nzvkbBMSj8Hvvx0+piMGboNVh+Wh2QIAfW/VCxhzQ0cTk6ZqnG6mrqfxJOmpkCnXf\nG7MX+/yv/IHM3a356pKVuWBwZCXhccqtlogf8EdZ+FLEdf87CdrlCpqMJCLylPbF\n+8+Fmlr0/2FcpD+Jo6YqdhwLm4BFj3mXeT9hyOLt0FzxH5WxsDQ=\n=3G7+\n-----END PGP SIGNATURE-----", "payload": "tree 28bb99c37a42ff1a477db1ee4b26b2ed88a321b1\nparent 5dab47dcd8267b8769421b46532414ec36d625e3\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1634578418 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1634578418 +0900\n\nRevert \"Rollup merge of #86011 - tlyu:correct-sized-bound-spans, r=estebank\"\n\nThis reverts commit 36a1076d24697621a3bb67ef654b4eb79647aa54, reversing\nchanges made to e1e9319d93aea755c444c8f8ff863b0936d7a4b6.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "html_url": "https://github.com/rust-lang/rust/commit/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dab47dcd8267b8769421b46532414ec36d625e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dab47dcd8267b8769421b46532414ec36d625e3", "html_url": "https://github.com/rust-lang/rust/commit/5dab47dcd8267b8769421b46532414ec36d625e3"}], "stats": {"total": 133, "additions": 61, "deletions": 72}, "files": [{"sha": "24474e163b9daf23586c3d24e2efb063f652c596", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -64,16 +64,16 @@ impl<'tcx> Bounds<'tcx> {\n             })\n         });\n \n-        self.region_bounds\n-            .iter()\n-            .map(|&(region_bound, span)| {\n+        sized_predicate\n+            .into_iter()\n+            .chain(self.region_bounds.iter().map(|&(region_bound, span)| {\n                 (\n                     region_bound\n                         .map_bound(|region_bound| ty::OutlivesPredicate(param_ty, region_bound))\n                         .to_predicate(tcx),\n                     span,\n                 )\n-            })\n+            }))\n             .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n                 let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);\n                 (predicate, span)\n@@ -83,7 +83,6 @@ impl<'tcx> Bounds<'tcx> {\n                     .iter()\n                     .map(|&(projection, span)| (projection.to_predicate(tcx), span)),\n             )\n-            .chain(sized_predicate.into_iter())\n             .collect()\n     }\n }"}, {"sha": "47c7f1c2c33408ec70a5ec983f934a8b81cef8a0", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "92f084b58e35be50a69503ed7ff9617a4dadad88", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "c57cebe04ebcbacb0e07e616ebefc10cbae2c9ba", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "200937f0c9fc380dbaee757da9f1a166c6ed0dc5", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "49ae87cbfe9dce4c73f81b0149d4bb6c6eabaa53", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -1,34 +1,34 @@\n-error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+error[E0277]: the trait bound `Self: Trait1` is not satisfied\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:5\n+  --> $DIR/issue-74816.rs:9:22\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n+   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n-LL | trait Trait2: Sized {\n-   |             +++++++\n+LL | trait Trait2: Trait1 {\n+   |             ++++++++\n \n-error[E0277]: the trait bound `Self: Trait1` is not satisfied\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:22\n+  --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n-LL | trait Trait2: Trait1 {\n-   |             ++++++++\n+LL | trait Trait2: Sized {\n+   |             +++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6978794e1e957304cda22c17a6f820f59cbf609", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -20,13 +20,13 @@ LL |     for<'a> T: 'a,\n    |                ^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-86483.rs:9:19\n+  --> $DIR/issue-86483.rs:9:5\n    |\n LL | pub trait IceIce<T>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/issue-86483.rs:7:16"}, {"sha": "2c397d80b013eef1ba385258632c4522aaa3c73e", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -6,10 +6,10 @@ LL | impl Tsized for () {}\n    |\n    = help: the trait `Sized` is not implemented for `[()]`\n note: required by a bound in `Tsized`\n-  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:17\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n    |\n LL | trait Tsized<P: Sized = [Self]> {}\n-   |                 ^^^^^ required by this bound in `Tsized`\n+   |              ^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "09e20c0c777314202c0c0fe590ae82b3de989be0", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -1,21 +1,11 @@\n-error[E0283]: type annotations needed\n+error[E0282]: type annotations needed\n   --> $DIR/issue-16966.rs:2:5\n    |\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: cannot satisfy `_: Any`\n-note: required by a bound in `begin_panic`\n-  --> $SRC_DIR/std/src/panicking.rs:LL:COL\n-   |\n-LL | pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n-   |                       ^^^ required by this bound in `begin_panic`\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider specifying the type argument in the function call\n-   |\n-LL |         $crate::rt::begin_panic::<M>($msg)\n-   |                                +++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "92742b50619e011746406ff19c536dac0f72f97e", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b345e90178742ee0049c08d733b604f2a1df7a0d", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Next`\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n   --> $DIR/issue-23122-2.rs:9:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;"}, {"sha": "df76a985559d08481719a915195ff666e87acd2e", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -12,10 +12,10 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |\n    = note: cannot satisfy `_: Tt`\n note: required by a bound in `Tt::const_val`\n-  --> $DIR/issue-54954.rs:5:27\n+  --> $DIR/issue-54954.rs:5:24\n    |\n LL |     const fn const_val<T: Sized>() -> usize {\n-   |                           ^^^^^ required by this bound in `Tt::const_val`\n+   |                        ^ required by this bound in `Tt::const_val`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fffb91f98700bdf8f9c9210468645a851944d9ca", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -20,11 +20,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:10\n+note: required by `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:5\n    |\n LL |     fn c<T: ~const Bar>();\n-   |          ^ required by this bound in `Foo::c`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -52,11 +52,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:10\n+note: required by `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:5\n    |\n LL |     fn c<T: ~const Bar>();\n-   |          ^ required by this bound in `Foo::c`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {"}, {"sha": "ae55c96702adaed6e9fd46b0482a968834e5d53c", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -49,10 +49,10 @@ LL |     f_sized(*ref_cl);\n    |\n    = help: the trait `Sized` is not implemented for `dyn Fn()`\n note: required by a bound in `f_sized`\n-  --> $DIR/issue-84973-blacklist.rs:9:15\n+  --> $DIR/issue-84973-blacklist.rs:9:12\n    |\n LL | fn f_sized<T: Sized>(t: T) {}\n-   |               ^^^^^ required by this bound in `f_sized`\n+   |            ^ required by this bound in `f_sized`\n \n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/issue-84973-blacklist.rs:27:12"}, {"sha": "0275fd475d8c6a1f5363b5ba7a807884a90c6fa2", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `[i32]` is not an iterator\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n@@ -18,7 +18,7 @@ LL |   for _ in &v[1..] {\n LL |   for _ in &mut v[1..] {\n    |            ++++\n \n-error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n@@ -38,7 +38,7 @@ LL |   for _ in &v[1..] {\n LL |   for _ in &mut v[1..] {\n    |            ++++\n \n-error[E0277]: `[K]` is not an iterator\n+error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n@@ -58,7 +58,7 @@ LL |   for i2 in &v2[1..] {\n LL |   for i2 in &mut v2[1..] {\n    |             ++++\n \n-error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n+error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {"}, {"sha": "747081933172b50aca38ca1e5efeaca93a347e5b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<A, B> = impl Debug;\n-//~^ ERROR the trait bound `A: Foo` is not satisfied\n+//~^ ERROR the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n //~| ERROR `A` doesn't implement `Debug`\n //~| ERROR `B` doesn't implement `Debug`\n "}, {"sha": "a8eb53a50e38bb33d99f2256d7c3d58739878055", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -10,6 +10,18 @@ note: previous use here\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n+   |\n+   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Foo, B> = impl Debug;\n+   |           +++++\n+\n error[E0277]: `A` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n@@ -34,18 +46,6 @@ help: consider restricting type parameter `B`\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n    |              +++++++++++++++++\n \n-error[E0277]: the trait bound `A: Foo` is not satisfied\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: Foo, B> = impl Debug;\n-   |           +++++\n-\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "5c40787febfb76498c19eff2762d28aa7f36af45", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -19,10 +19,10 @@ LL | | >(Unique<T>, A);\n    | |________________- doesn't satisfy `Box<dyn Foo>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `dyn Foo: Clone`\n-           which is required by `Box<dyn Foo>: Clone`\n            `dyn Foo: Sized`\n            which is required by `Box<dyn Foo>: Clone`\n+           `dyn Foo: Clone`\n+           which is required by `Box<dyn Foo>: Clone`\n \n error: aborting due to previous error\n "}, {"sha": "531e9b4c9c95533194bdb40bbbb245e58f2c400b", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -7,10 +7,10 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        this type parameter needs to be `std::marker::Sized`\n    |\n note: required by a bound in `bar`\n-  --> $DIR/unsized-bare-typaram.rs:1:11\n+  --> $DIR/unsized-bare-typaram.rs:1:8\n    |\n LL | fn bar<T: Sized>() { }\n-   |           ^^^^^ required by this bound in `bar`\n+   |        ^ required by this bound in `bar`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo<T: ?Sized>() { bar::<T>() }"}, {"sha": "1c70a840c77dc382553fb5be30e2f1e4f68b9ef7", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=e2453dc2ff8ea5984b9eba40af8f8d13ee4e5da5", "patch": "@@ -38,10 +38,10 @@ note: required because it appears within the type `Bar<T>`\n LL | struct Bar<T: ?Sized> { data: T }\n    |        ^^^\n note: required by a bound in `is_sized`\n-  --> $DIR/unsized-struct.rs:1:15\n+  --> $DIR/unsized-struct.rs:1:13\n    |\n LL | fn is_sized<T:Sized>() { }\n-   |               ^^^^^ required by this bound in `is_sized`\n+   |             ^ required by this bound in `is_sized`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }"}]}