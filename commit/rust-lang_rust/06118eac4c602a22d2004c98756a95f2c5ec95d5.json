{"sha": "06118eac4c602a22d2004c98756a95f2c5ec95d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTE4ZWFjNGM2MDJhMjJkMjAwNGM5ODc1NmE5NWYyYzVlYzk1ZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-10T01:16:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-10T01:16:02Z"}, "message": "Auto merge of #55626 - nikic:update-emscripten, r=alexcrichton\n\nUpdate emscripten\n\nThis updates emscripten to 1.38.15, which is based on LLVM 6.0.1 and would allow us to drop code for handling LLVM 4.\n\nThe main issue I ran into is that exporting statics through `EXPORTED_FUNCTIONS` no longer works. As far as I understand exporting non-functions doesn't really make sense under emscripten anyway, so I've modified the symbol export code to not even try.\n\nCloses #52323.", "tree": {"sha": "4039e739f4710fbe8a4aab96b21bfd1cc46a0daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4039e739f4710fbe8a4aab96b21bfd1cc46a0daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06118eac4c602a22d2004c98756a95f2c5ec95d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06118eac4c602a22d2004c98756a95f2c5ec95d5", "html_url": "https://github.com/rust-lang/rust/commit/06118eac4c602a22d2004c98756a95f2c5ec95d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06118eac4c602a22d2004c98756a95f2c5ec95d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a50c29f6c5c386fba6ab685818755ac55152e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a50c29f6c5c386fba6ab685818755ac55152e5", "html_url": "https://github.com/rust-lang/rust/commit/36a50c29f6c5c386fba6ab685818755ac55152e5"}, {"sha": "82574e9ec804b6efbf6dfcf523d32618528ee32b", "url": "https://api.github.com/repos/rust-lang/rust/commits/82574e9ec804b6efbf6dfcf523d32618528ee32b", "html_url": "https://github.com/rust-lang/rust/commit/82574e9ec804b6efbf6dfcf523d32618528ee32b"}], "stats": {"total": 88, "additions": 48, "deletions": 40}, "files": [{"sha": "cef0849937bf01861602cc947e48c63e562b2fc5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -736,7 +736,7 @@ pub fn build_codegen_backend(builder: &Builder,\n \n             // Pass down configuration from the LLVM build into the build of\n             // librustc_llvm and librustc_codegen_llvm.\n-            if builder.is_rust_llvm(target) {\n+            if builder.is_rust_llvm(target) && backend != \"emscripten\" {\n                 cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n             }\n             cargo.env(\"LLVM_CONFIG\", &llvm_config);"}, {"sha": "9eaffbf83eb4e43e897c93dfc814c4b53ec2f50e", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -20,11 +20,11 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/clang/e1.37.13_64bit/\n-ENV PATH=$PATH:/emsdk-portable/emscripten/1.37.13/\n-ENV PATH=$PATH:/emsdk-portable/node/4.1.1_64bit/bin/\n-ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.37.13/\n-ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.37.13_64bit/binaryen/\n+ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n+ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n+ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n+ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n+ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten"}, {"sha": "0d2bd39303ef8e1191b6986be45d546842b2b734", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -21,11 +21,11 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/clang/e1.37.13_64bit/\n-ENV PATH=$PATH:/emsdk-portable/emscripten/1.37.13/\n-ENV PATH=$PATH:/node-v8.0.0-linux-x64/bin/\n-ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.37.13/\n-ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.37.13_64bit/binaryen/\n+ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n+ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n+ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n+ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n+ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten"}, {"sha": "1d7b33db9ed86b32f94ac2a78f16341052de0dda", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -33,8 +33,8 @@ curl -fL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portab\n \n cd /emsdk-portable\n ./emsdk update\n-hide_output ./emsdk install sdk-1.37.13-64bit\n-./emsdk activate sdk-1.37.13-64bit\n+hide_output ./emsdk install sdk-1.38.15-64bit\n+./emsdk activate sdk-1.38.15-64bit\n \n # Compile and cache libc\n source ./emsdk_env.sh\n@@ -46,8 +46,3 @@ rm -f a.*\n # Make emsdk usable by any user\n cp /root/.emscripten /emsdk-portable\n chmod a+rxw -R /emsdk-portable\n-\n-# node 8 is required to run wasm\n-cd /\n-curl -sL https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz | \\\n-  tar -xJ"}, {"sha": "0e8fb1c28a3036296c579259f1e7952b7cbec2f1", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -243,7 +243,8 @@ pub fn target_feature_whitelist(sess: &Session)\n         \"hexagon\" => HEXAGON_WHITELIST,\n         \"mips\" | \"mips64\" => MIPS_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n-        \"wasm32\" => WASM_WHITELIST,\n+        // wasm32 on emscripten does not support these target features\n+        \"wasm32\" if !sess.target.target.options.is_like_emscripten => WASM_WHITELIST,\n         _ => &[],\n     }\n }"}, {"sha": "6c40296b2ef374c7380c7e5bc480862dc4e6a98e", "filename": "src/librustc_codegen_utils/symbol_export.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Flibrustc_codegen_utils%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Flibrustc_codegen_utils%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_export.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -388,6 +388,16 @@ fn symbol_export_level(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {\n         codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n \n     if is_extern && !std_internal {\n+        // Emscripten cannot export statics, so reduce their export level here\n+        if tcx.sess.target.target.options.is_like_emscripten {\n+            if let Some(Node::Item(&hir::Item {\n+                node: hir::ItemKind::Static(..),\n+                ..\n+            })) = tcx.hir.get_if_local(sym_def_id) {\n+                return SymbolExportLevel::Rust;\n+            }\n+        }\n+\n         SymbolExportLevel::C\n     } else {\n         SymbolExportLevel::Rust"}, {"sha": "7f23313edff8beccb3fe44b815714269c5124c15", "filename": "src/llvm-emscripten", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-emscripten?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -1 +1 @@\n-Subproject commit 2717444753318e461e0c3b30dacd03ffbac96903\n+Subproject commit 7f23313edff8beccb3fe44b815714269c5124c15"}, {"sha": "e8bfa22220743960b2b76414da546f1d2a142b8d", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -429,7 +429,7 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n     const char* PGOGenPath, const char* PGOUsePath) {\n-#if LLVM_RUSTLLVM\n+#if LLVM_VERSION_GE(7, 0)\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n #endif\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;"}, {"sha": "b3980f32d2736b2195fac070946da713d2f598d5", "filename": "src/test/run-fail/mir_drop_panics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -17,7 +17,7 @@ impl Drop for Droppable {\n         if self.0 == 1 {\n             panic!(\"panic 1\");\n         } else {\n-            eprint!(\"drop {}\", self.0);\n+            eprintln!(\"drop {}\", self.0);\n         }\n     }\n }"}, {"sha": "2fa933d513a669e4910e58ae5f330410166c6ab8", "filename": "src/test/run-fail/panic-set-handler.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -14,7 +14,7 @@ use std::panic;\n \n fn main() {\n     panic::set_hook(Box::new(|i| {\n-        eprint!(\"greetings from the panic handler\");\n+        eprintln!(\"greetings from the panic handler\");\n     }));\n     panic!(\"foobar\");\n }"}, {"sha": "529c21354e3838a2eccf54d2dd6b22438f853dd6", "filename": "src/test/run-pass/consts/const-endianess.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     assert_eq!(BE_U32, b(55u32).to_be());\n     assert_eq!(LE_U32, b(55u32).to_le());\n \n-    #[cfg(not(target_arch = \"asmjs\"))]\n+    #[cfg(not(target_os = \"emscripten\"))]\n     {\n         const BE_U128: u128 = 999999u128.to_be();\n         const LE_I128: i128 = (-999999i128).to_le();"}, {"sha": "5a08a097fd02faf3c60ec92bdbe04261c0af0105", "filename": "src/test/ui/inline-asm-bad-constraint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -10,6 +10,8 @@\n \n // Test that the compiler will catch invalid inline assembly constraints.\n \n+// ignore-emscripten\n+\n #![feature(asm)]\n \n extern \"C\" {"}, {"sha": "44facff080543aa8ea85917ae04c546126a25e90", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -1,17 +1,17 @@\n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:29:9\n+  --> $DIR/inline-asm-bad-constraint.rs:31:9\n    |\n LL |         asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:37:9\n+  --> $DIR/inline-asm-bad-constraint.rs:39:9\n    |\n LL |         asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:44:9\n+  --> $DIR/inline-asm-bad-constraint.rs:46:9\n    |\n LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0ee4080fd0cb1c4adefdb901d703881bf8619489", "filename": "src/test/ui/inline-asm-bad-operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -11,6 +11,8 @@\n // Test that the compiler will catch passing invalid values to inline assembly\n // operands.\n \n+// ignore-emscripten\n+\n #![feature(asm)]\n \n #[repr(C)]"}, {"sha": "1a99aa28f584ada4105e95324569404c7b9d5a28", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -1,41 +1,41 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:29:24\n+  --> $DIR/inline-asm-bad-operand.rs:31:24\n    |\n LL |         asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n    |                        ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:34:32\n+  --> $DIR/inline-asm-bad-operand.rs:36:32\n    |\n LL |         asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n    |                                ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:41:29\n+  --> $DIR/inline-asm-bad-operand.rs:43:29\n    |\n LL |     unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n    |                             ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:49:38\n+  --> $DIR/inline-asm-bad-operand.rs:51:38\n    |\n LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n    |                                      ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:56:32\n+  --> $DIR/inline-asm-bad-operand.rs:58:32\n    |\n LL |         asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n    |                                ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:63:32\n+  --> $DIR/inline-asm-bad-operand.rs:65:32\n    |\n LL |         asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n    |                                ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:64:32\n+  --> $DIR/inline-asm-bad-operand.rs:66:32\n    |\n LL |                            \"r\"(\"hello e0669\")); //~ ERROR E0669\n    |                                ^^^^^^^^^^^^^"}, {"sha": "83ebc92315552a291ef1722f3ba5f304c716f3f6", "filename": "src/test/ui/issues/issue-49579.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // compile-pass\n+// ignore-emscripten no i128 support\n \n #![feature(nll)]\n "}, {"sha": "22cf15fb2e4a1458b8bab26e645ac6b833540627", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -11,7 +11,7 @@\n \n use core::ops::RangeBounds;\n \n-#[cfg(not(target_arch = \"wasm32\"))]\n+#[cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))]\n #[lang = \"eh_personality\"]\n extern fn eh_personality() {}\n "}, {"sha": "399f9f577edf5b8a08fefa295ac15129135cb8f2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06118eac4c602a22d2004c98756a95f2c5ec95d5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=06118eac4c602a22d2004c98756a95f2c5ec95d5", "patch": "@@ -1870,11 +1870,9 @@ impl<'test> TestCx<'test> {\n             } else {\n                 self.fatal(\"no NodeJS binary found (--nodejs)\");\n             }\n-        }\n-\n-        // If this is otherwise wasm , then run tests under nodejs with our\n+        // If this is otherwise wasm, then run tests under nodejs with our\n         // shim\n-        if self.config.target.contains(\"wasm32\") {\n+        } else if self.config.target.contains(\"wasm32\") {\n             if let Some(ref p) = self.config.nodejs {\n                 args.push(p.clone());\n             } else {"}]}