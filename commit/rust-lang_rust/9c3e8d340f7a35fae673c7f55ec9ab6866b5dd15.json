{"sha": "9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljM2U4ZDM0MGY3YTM1ZmFlNjczYzdmNTVlYzlhYjY4NjZiNWRkMTU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-18T22:24:33Z"}, "message": "Rollup merge of #55827 - ljedrz:various_stashed, r=alexcrichton\n\nA few tweaks to iterations/collecting\n\n- simplify and speed up `dot::GraphWalk::nodes` for `cfg::CFG`\n- `reserve` the capacity for `edges` in `DepGraph::query`\n- collect directly to a `HirVec` in `LoweringContext::lower_attrs`\n- fix overallocation in `OnDiskCache::serialize`\n- preallocate the `new_partitioning` vector in `merge_codegen_units`\n- simplify `impl FromHex for str`\n- improve the creation of `self_arg_names` in `impl MethodDef`", "tree": {"sha": "f8ef14094a2d064878ccab3b24bee94d92595934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8ef14094a2d064878ccab3b24bee94d92595934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8eahCRBK7hj4Ov3rIwAAdHIIAFyAx6Bqt8JrFHAd1AT10FSE\nDQli04YTHLk0FCXiA5ASbUqMO59q8ljQWw9VFT9/ZzkiLyqHXWlLGCm2H6hDSQJQ\nzo18CQRVZEIAV+ADSSbQ81ZXWxsIK2WX40w665s5TYccnCKEmEclPJF39KuamRUq\ncVVMXtaY6IYkGwvEkPyQALxm7HfrI3hb5vb67ggffxAkx8AQbND8TCkvEoDIHGF1\ntrl2i+3qTaBk9qeaOW+G+Zh4QEbBQ41+AvQDj/21CBJI3iA/6/N8wmRi/ql2KhSN\n0kqECqd5MdvzQFXWEDPRVWMX/Ffvcjb73bCDq3RnDK1cnZQfvBxXBAbSKRjvwxk=\n=vqXP\n-----END PGP SIGNATURE-----\n", "payload": "tree f8ef14094a2d064878ccab3b24bee94d92595934\nparent 21ff709954f4bde159d7890e2fe973c58fa872ef\nparent 0c085299344d9af4e9bfd892a15d746b116ebe00\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579873 +0100\ncommitter GitHub <noreply@github.com> 1542579873 +0100\n\nRollup merge of #55827 - ljedrz:various_stashed, r=alexcrichton\n\nA few tweaks to iterations/collecting\n\n- simplify and speed up `dot::GraphWalk::nodes` for `cfg::CFG`\n- `reserve` the capacity for `edges` in `DepGraph::query`\n- collect directly to a `HirVec` in `LoweringContext::lower_attrs`\n- fix overallocation in `OnDiskCache::serialize`\n- preallocate the `new_partitioning` vector in `merge_codegen_units`\n- simplify `impl FromHex for str`\n- improve the creation of `self_arg_names` in `impl MethodDef`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "html_url": "https://github.com/rust-lang/rust/commit/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ff709954f4bde159d7890e2fe973c58fa872ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/21ff709954f4bde159d7890e2fe973c58fa872ef", "html_url": "https://github.com/rust-lang/rust/commit/21ff709954f4bde159d7890e2fe973c58fa872ef"}, {"sha": "0c085299344d9af4e9bfd892a15d746b116ebe00", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c085299344d9af4e9bfd892a15d746b116ebe00", "html_url": "https://github.com/rust-lang/rust/commit/0c085299344d9af4e9bfd892a15d746b116ebe00"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "650aa39114fad4566f5bb88b930479117ed9a8bf", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "patch": "@@ -106,8 +106,7 @@ impl<'a> dot::GraphWalk<'a> for &'a cfg::CFG {\n     type Node = Node<'a>;\n     type Edge = Edge<'a>;\n     fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> {\n-        let mut v = Vec::new();\n-        self.graph.each_node(|i, nd| { v.push((i, nd)); true });\n+        let v: Vec<_> = self.graph.enumerated_nodes().collect();\n         v.into()\n     }\n     fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> {"}, {"sha": "ce1e678043188c5d7802778b97f2e2aa65fb4997", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "patch": "@@ -1062,8 +1062,7 @@ impl<'a> LoweringContext<'a> {\n         attrs\n             .iter()\n             .map(|a| self.lower_attr(a))\n-            .collect::<Vec<_>>()\n-            .into()\n+            .collect()\n     }\n \n     fn lower_attr(&mut self, attr: &Attribute) -> Attribute {"}, {"sha": "7d3ae64f4fcd636d55cf17ab760a2feb440949be", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "patch": "@@ -281,7 +281,7 @@ impl<'sess> OnDiskCache<'sess> {\n                         // otherwise, abort\n                         break;\n                     }\n-                    interpret_alloc_index.reserve(new_n);\n+                    interpret_alloc_index.reserve(new_n - n);\n                     for idx in n..new_n {\n                         let id = encoder.interpret_allocs_inverse[idx];\n                         let pos = encoder.position() as u32;"}, {"sha": "5604729d2f8dc80819fda77d72c9888c1ca6faa3", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "patch": "@@ -146,7 +146,7 @@ impl FromHex for str {\n         }\n \n         match modulus {\n-            0 => Ok(b.into_iter().collect()),\n+            0 => Ok(b),\n             _ => Err(InvalidHexLength),\n         }\n     }"}, {"sha": "a5b12ce4c4d834c83586cd0f3e2321ffd342be54", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9c3e8d340f7a35fae673c7f55ec9ab6866b5dd15", "patch": "@@ -1200,16 +1200,14 @@ impl<'a> MethodDef<'a> {\n         let sp = trait_.span;\n         let variants = &enum_def.variants;\n \n-        let self_arg_names = self_args.iter()\n-            .enumerate()\n-            .map(|(arg_count, _self_arg)| {\n-                if arg_count == 0 {\n-                    \"__self\".to_string()\n-                } else {\n+        let self_arg_names = iter::once(\"__self\".to_string()).chain(\n+            self_args.iter()\n+                .enumerate()\n+                .skip(1)\n+                .map(|(arg_count, _self_arg)|\n                     format!(\"__arg_{}\", arg_count)\n-                }\n-            })\n-            .collect::<Vec<String>>();\n+                )\n+            ).collect::<Vec<String>>();\n \n         let self_arg_idents = self_arg_names.iter()\n             .map(|name| cx.ident_of(&name[..]))\n@@ -1218,7 +1216,7 @@ impl<'a> MethodDef<'a> {\n         // The `vi_idents` will be bound, solely in the catch-all, to\n         // a series of let statements mapping each self_arg to an int\n         // value corresponding to its discriminant.\n-        let vi_idents: Vec<ast::Ident> = self_arg_names.iter()\n+        let vi_idents = self_arg_names.iter()\n             .map(|name| {\n                 let vi_suffix = format!(\"{}_vi\", &name[..]);\n                 cx.ident_of(&vi_suffix[..]).gensym()"}]}