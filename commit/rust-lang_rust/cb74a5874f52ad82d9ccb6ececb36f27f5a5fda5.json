{"sha": "cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNzRhNTg3NGY1MmFkODJkOWNjYjZlY2VjYjM2ZjI3ZjVhNWZkYTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-27T23:02:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-28T01:14:54Z"}, "message": "configure: Check for valid Python on MinGW as well\n\nThe LLVM build system is somewhat picky about which Python is used to build it\nas it's known to be incompatible with the default `python2` package that ships\nwith MinGW. This was previously detected for MSVC builds but the logic was left\nout for MinGW by accident (now that we've switched to cmake builds for LLVM\neverywhere).\n\nThis corrects the `./configure` check and also updates the `README.md`\naccordingly. Additionally, a number of instructions were updated to work with\nthe most recent copy of MSYS2.\n\nCloses #34489", "tree": {"sha": "024bf8eaed5a9f14899631f44ed82fa48ad4ef53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/024bf8eaed5a9f14899631f44ed82fa48ad4ef53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5", "html_url": "https://github.com/rust-lang/rust/commit/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7189ae36116491ea4936ad34461c8d89f704608b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7189ae36116491ea4936ad34461c8d89f704608b", "html_url": "https://github.com/rust-lang/rust/commit/7189ae36116491ea4936ad34461c8d89f704608b"}], "stats": {"total": 101, "additions": 52, "deletions": 49}, "files": [{"sha": "e656585a8987794ed8f3d11fd07b13b0d0ceb5e3", "filename": "README.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5", "patch": "@@ -64,37 +64,37 @@ build.\n \n #### MinGW\n \n-[MSYS2](http://msys2.github.io/) can be used to easily build Rust on Windows:\n+[MSYS2][msys2] can be used to easily build Rust on Windows:\n \n-1. Grab the latest MSYS2 installer and go through the installer.\n+msys2: https://msys2.github.io/\n \n-2. From the MSYS2 terminal, install the `mingw64` toolchain and other required\n-   tools.\n+1. Grab the latest [MSYS2 installer][msys2] and go through the installer.\n \n-   ```sh\n-   # Update package mirrors (may be needed if you have a fresh install of MSYS2)\n-   $ pacman -Sy pacman-mirrors\n-   ```\n+2. Run `mingw32_shell.bat` or `mingw64_shell.bat` from wherever you installed\n+   MSYS2 (i.e. `C:\\msys64`), depending on whether you want 32-bit or 64-bit\n+   Rust. (As of the latest version of MSYS2 you have to run `msys2_shell.cmd\n+   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead)\n \n-   Download [MinGW from\n-   here](http://mingw-w64.org/doku.php/download/mingw-builds), and choose the\n-   `version=4.9.x,threads=win32,exceptions=dwarf/seh` flavor when installing. Also, make sure to install to a path without spaces in it. After installing,\n-   add its `bin` directory to your `PATH`. This is due to [#28260](https://github.com/rust-lang/rust/issues/28260), in the future,\n-   installing from pacman should be just fine.\n+3. From this terminal, install the required tools:\n \n    ```sh\n-   # Make git available in MSYS2 (if not already available on path)\n-   $ pacman -S git\n+   # Update package mirrors (may be needed if you have a fresh install of MSYS2)\n+   $ pacman -Sy pacman-mirrors\n \n-   $ pacman -S base-devel\n+   # Install build tools needed for Rust. If you're building a 32-bit compiler,\n+   # then replace \"x86_64\" below with \"i686\". If you've already got git, python,\n+   # or CMake installed and in PATH you can remove them from this list. Note\n+   # that it is important that the `python2` and `cmake` packages **not** used.\n+   # The build has historically been known to fail with these packages.\n+   $ pacman -S git \\\n+               make \\\n+               diffutils \\\n+               mingw-w64-x86_64-python2 \\\n+               mingw-w64-x86_64-cmake \\\n+               mingw-w64-x86_64-gcc\n    ```\n \n-3. Run `mingw32_shell.bat` or `mingw64_shell.bat` from wherever you installed\n-   MSYS2 (i.e. `C:\\msys`), depending on whether you want 32-bit or 64-bit Rust.\n-   (As of the latest version of MSYS2 you have to run `msys2_shell.cmd -mingw32`\n-   or `msys2_shell.cmd -mingw64` from the command line instead)\n-\n-4. Navigate to Rust's source code, configure and build it:\n+4. Navigate to Rust's source code (or clone it), then configure and build it:\n \n    ```sh\n    $ ./configure"}, {"sha": "c0db57922bf6b35ac186e86430e7e845f519e3c2", "filename": "configure", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5/configure", "raw_url": "https://github.com/rust-lang/rust/raw/cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=cb74a5874f52ad82d9ccb6ececb36f27f5a5fda5", "patch": "@@ -1178,33 +1178,6 @@ do\n             ;;\n \n         *-msvc)\n-            # There are some MSYS python builds which will auto-translate\n-            # windows-style paths to MSYS-style paths in Python itself.\n-            # Unfortunately this breaks LLVM's build system as somewhere along\n-            # the line LLVM prints a path into a file from Python and then CMake\n-            # later tries to interpret that path. If Python prints a MSYS path\n-            # and CMake tries to use it as a Windows path, you're gonna have a\n-            # Bad Time.\n-            #\n-            # Consequently here we try to detect when that happens and print an\n-            # error if it does.\n-            if $CFG_PYTHON -c 'import sys; print sys.argv[1]' `pwd` | grep '^/' > /dev/null\n-            then\n-                err \"\n-\n-python is silently translating windows paths to MSYS paths \\\n-and the build will fail if this python is used.\n-\n-Either an official python install must be used or an \\\n-alternative python package in MinGW must be used.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-python2 \\\n-package instead of python2:\n-\n-$ pacman -R python2 && pacman -S mingw-w64-x86_64-python2\n-\"\n-            fi\n-\n             # There are three builds of cmake on windows: MSVC, MinGW and Cygwin\n             # The Cygwin build does not have generators for Visual Studio, so\n             # detect that here and error.\n@@ -1288,6 +1261,36 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n     esac\n done\n \n+if [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ]\n+then\n+    # There are some MSYS python builds which will auto-translate\n+    # windows-style paths to MSYS-style paths in Python itself.\n+    # Unfortunately this breaks LLVM's build system as somewhere along\n+    # the line LLVM prints a path into a file from Python and then CMake\n+    # later tries to interpret that path. If Python prints a MSYS path\n+    # and CMake tries to use it as a Windows path, you're gonna have a\n+    # Bad Time.\n+    #\n+    # Consequently here we try to detect when that happens and print an\n+    # error if it does.\n+    if $CFG_PYTHON -c 'import sys; print sys.argv[1]' `pwd` | grep '^/' > /dev/null\n+    then\n+        err \"\n+\n+python is silently translating windows paths to MSYS paths \\\n+and the build will fail if this python is used.\n+\n+Either an official python install must be used or an \\\n+alternative python package in MinGW must be used.\n+\n+If you are building under msys2 try installing the mingw-w64-x86_64-python2 \\\n+package instead of python2:\n+\n+$ pacman -S mingw-w64-x86_64-python2\n+\"\n+    fi\n+fi\n+\n if [ -n \"$CFG_PERF\" ]\n then\n     HAVE_PERF_LOGFD=`$CFG_PERF stat --log-fd 2>&1 | grep 'unknown option'`"}]}