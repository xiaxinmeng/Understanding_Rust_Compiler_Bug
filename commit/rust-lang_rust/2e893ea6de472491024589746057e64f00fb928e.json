{"sha": "2e893ea6de472491024589746057e64f00fb928e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlODkzZWE2ZGU0NzI0OTEwMjQ1ODk3NDYwNTdlNjRmMDBmYjkyOGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-29T15:51:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-29T15:51:22Z"}, "message": "Rollup merge of #34497 - oli-obk:double_negation, r=eddyb\n\nRevert \"skip double negation in const eval\"\n\nThis reverts commit 735c018974e5570ea13fd887aa70a011a5b8e7b8.\n\nfixes #34395\n\nThe original commit was based on a mis-understanding of the overflowing literal lint.\n\nThis needs to be ported to beta.\n\nr? @eddyb", "tree": {"sha": "ffc7b85044d6a99e6543628ee24154f4a6e5e905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffc7b85044d6a99e6543628ee24154f4a6e5e905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e893ea6de472491024589746057e64f00fb928e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e893ea6de472491024589746057e64f00fb928e", "html_url": "https://github.com/rust-lang/rust/commit/2e893ea6de472491024589746057e64f00fb928e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e893ea6de472491024589746057e64f00fb928e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8886818a9ab3e6c52651038d4e22e2d51b932bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8886818a9ab3e6c52651038d4e22e2d51b932bb9", "html_url": "https://github.com/rust-lang/rust/commit/8886818a9ab3e6c52651038d4e22e2d51b932bb9"}, {"sha": "b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "html_url": "https://github.com/rust-lang/rust/commit/b8f9c88c2d86135f4d1c170be67d9d15c63b358a"}], "stats": {"total": 90, "additions": 42, "deletions": 48}, "files": [{"sha": "6c37662206ce252f5592eeeee86853fe43c4b1e6", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/2e893ea6de472491024589746057e64f00fb928e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e893ea6de472491024589746057e64f00fb928e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=2e893ea6de472491024589746057e64f00fb928e", "patch": "@@ -543,54 +543,47 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let result = match e.node {\n       hir::ExprUnary(hir::UnNeg, ref inner) => {\n         // unary neg literals already got their sign during creation\n-        match inner.node {\n-            hir::ExprLit(ref lit) => {\n-                use syntax::ast::*;\n-                use syntax::ast::LitIntType::*;\n-                const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n-                const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n-                const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n-                const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n-                match (&lit.node, ety.map(|t| &t.sty)) {\n-                    (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n-                    (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n-                        return Ok(Integral(I8(::std::i8::MIN)))\n-                    },\n-                    (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n-                    (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n-                        return Ok(Integral(I16(::std::i16::MIN)))\n-                    },\n-                    (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n-                    (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n-                        return Ok(Integral(I32(::std::i32::MIN)))\n-                    },\n-                    (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n-                    (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n-                        return Ok(Integral(I64(::std::i64::MIN)))\n-                    },\n-                    (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n-                    (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n-                        match tcx.sess.target.int_type {\n-                            IntTy::I16 => if n == I16_OVERFLOW {\n-                                return Ok(Integral(Isize(Is16(::std::i16::MIN))));\n-                            },\n-                            IntTy::I32 => if n == I32_OVERFLOW {\n-                                return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n-                            },\n-                            IntTy::I64 => if n == I64_OVERFLOW {\n-                                return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n-                            },\n-                            _ => bug!(),\n-                        }\n-                    },\n-                    _ => {},\n-                }\n-            },\n-            hir::ExprUnary(hir::UnNeg, ref inner) => {\n-                // skip `--$expr`\n-                return eval_const_expr_partial(tcx, inner, ty_hint, fn_args);\n-            },\n-            _ => {},\n+        if let hir::ExprLit(ref lit) = inner.node {\n+            use syntax::ast::*;\n+            use syntax::ast::LitIntType::*;\n+            const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n+            const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n+            const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n+            const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n+            match (&lit.node, ety.map(|t| &t.sty)) {\n+                (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n+                (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n+                    return Ok(Integral(I8(::std::i8::MIN)))\n+                },\n+                (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n+                (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n+                    return Ok(Integral(I16(::std::i16::MIN)))\n+                },\n+                (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n+                (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n+                    return Ok(Integral(I32(::std::i32::MIN)))\n+                },\n+                (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n+                (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n+                    return Ok(Integral(I64(::std::i64::MIN)))\n+                },\n+                (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n+                (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n+                    match tcx.sess.target.int_type {\n+                        IntTy::I16 => if n == I16_OVERFLOW {\n+                            return Ok(Integral(Isize(Is16(::std::i16::MIN))));\n+                        },\n+                        IntTy::I32 => if n == I32_OVERFLOW {\n+                            return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n+                        },\n+                        IntTy::I64 => if n == I64_OVERFLOW {\n+                            return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n+                        },\n+                        _ => bug!(),\n+                    }\n+                },\n+                _ => {},\n+            }\n         }\n         match eval_const_expr_partial(tcx, &inner, ty_hint, fn_args)? {\n           Float(f) => Float(-f),"}, {"sha": "e99dfb9aa0f0e9b6a425e6c9329ff3896feb9899", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e893ea6de472491024589746057e64f00fb928e/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e893ea6de472491024589746057e64f00fb928e/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=2e893ea6de472491024589746057e64f00fb928e", "patch": "@@ -15,6 +15,7 @@\n #[allow(unused_variables)]\n fn main() {\n     let x2: i8 = --128; //~ error: literal out of range for i8\n+    //~^ error: attempted to negate with overflow\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for f32"}]}