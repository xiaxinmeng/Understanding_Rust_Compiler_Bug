{"sha": "25dda3647ea42d1b64aca6e5584faff0d8a38dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZGRhMzY0N2VhNDJkMWI2NGFjYTZlNTU4NGZhZmYwZDhhMzhkYmM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-11T19:31:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-11T19:31:58Z"}, "message": "Rollup merge of #73936 - zachlute:rustdoc-optflagmulti, r=jyn514\n\nRustdoc: Change all 'optflag' arguments to 'optflagmulti'\n\nBecause specifying these flags multiple times will never be discernibly different in functionality from specifying them a single time, there is no reason to fail and report an error to the user.\n\nThis might be a slightly controversial change. it's tough to say, but it's hard to imagine a case where somebody was depending on this behavior, and doing this seem actively better for the user.\n\nThis originally came up in discussion of a fix for  [Cargo #8373](https://github.com/rust-lang/cargo/issues/8373), in [Cargo PR #8422](https://github.com/rust-lang/cargo/pull/8422).\n\nThe issue is that Cargo will automatically add things like `--document-private-items` to binaries, because it's the only thing that makes sense there. Then some poor user comes along and adds `--document-private-items` to their `rustdoc` flags for the project and suddenly they're getting errors for specifying a flag twice and need to track down which targets to actually add it to without getting duplicates for reasons they won't understand without deep understanding of Cargo behavior.\n\nWe're apparently hesitant to inspect `rustdoc` flags provided by the user directly in Cargo, because they're supposed to be opaque, so looking to see if it's already provided before adding it is evidently a non-starter. In trying to resolve that, one suggestion I came up with was to just change `rustdoc` to support passing the flag multiple times, because the user's intent should be clear and it's not *really* an error, so maybe this is a case of 'be permissive in what you accept'.\n\nThis PR is an attempt to do that in a straightforward manner for purposes of discussion.", "tree": {"sha": "4380897dfa3a4566961df61240833f1fc83454f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4380897dfa3a4566961df61240833f1fc83454f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25dda3647ea42d1b64aca6e5584faff0d8a38dbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg60cuCRBK7hj4Ov3rIwAApPEIAIoCCGWX8ApRx7nRQ0Tqk40K\nK4a9ElvALQK8nRXvVuyuAnT8qQsGatsrEv1q1xJqKBP88aAvtVxyV2yJ0ixeMkvl\n8y5oVNN5MjEatdQP33jISWVgmabMqt/+oTaAAzfh8m8FdPe2ROVHz16Gk5Uk+axi\nF5u/VhB2Ar8qxd9xteT95l3/zz+GQrWLBQmSIkS1zVavvz8lG6XuSQa7a5gWXgWs\nmsPM/9costH+A7xcCMmt/dDIooak9Pt5/82CbpI3ruTMGvSon/+P2f3zr6uO5C+Q\ncHmSmQUotynhZeUihwBpGMiWeYbRLE7JWTtLkA7dSwSeRwvoJY3rj5WIVapi+GY=\n=HbLP\n-----END PGP SIGNATURE-----\n", "payload": "tree 4380897dfa3a4566961df61240833f1fc83454f3\nparent 72568552fdc34673b5ab3546843fe3bdbadb7926\nparent 0cc66c8ea73354e96abcd7fe4dc63e71a96451a5\nauthor Yuki Okushi <jtitor@2k36.org> 1626031918 +0900\ncommitter GitHub <noreply@github.com> 1626031918 +0900\n\nRollup merge of #73936 - zachlute:rustdoc-optflagmulti, r=jyn514\n\nRustdoc: Change all 'optflag' arguments to 'optflagmulti'\n\nBecause specifying these flags multiple times will never be discernibly different in functionality from specifying them a single time, there is no reason to fail and report an error to the user.\n\nThis might be a slightly controversial change. it's tough to say, but it's hard to imagine a case where somebody was depending on this behavior, and doing this seem actively better for the user.\n\nThis originally came up in discussion of a fix for  [Cargo #8373](https://github.com/rust-lang/cargo/issues/8373), in [Cargo PR #8422](https://github.com/rust-lang/cargo/pull/8422).\n\nThe issue is that Cargo will automatically add things like `--document-private-items` to binaries, because it's the only thing that makes sense there. Then some poor user comes along and adds `--document-private-items` to their `rustdoc` flags for the project and suddenly they're getting errors for specifying a flag twice and need to track down which targets to actually add it to without getting duplicates for reasons they won't understand without deep understanding of Cargo behavior.\n\nWe're apparently hesitant to inspect `rustdoc` flags provided by the user directly in Cargo, because they're supposed to be opaque, so looking to see if it's already provided before adding it is evidently a non-starter. In trying to resolve that, one suggestion I came up with was to just change `rustdoc` to support passing the flag multiple times, because the user's intent should be clear and it's not *really* an error, so maybe this is a case of 'be permissive in what you accept'.\n\nThis PR is an attempt to do that in a straightforward manner for purposes of discussion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25dda3647ea42d1b64aca6e5584faff0d8a38dbc", "html_url": "https://github.com/rust-lang/rust/commit/25dda3647ea42d1b64aca6e5584faff0d8a38dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25dda3647ea42d1b64aca6e5584faff0d8a38dbc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72568552fdc34673b5ab3546843fe3bdbadb7926", "url": "https://api.github.com/repos/rust-lang/rust/commits/72568552fdc34673b5ab3546843fe3bdbadb7926", "html_url": "https://github.com/rust-lang/rust/commit/72568552fdc34673b5ab3546843fe3bdbadb7926"}, {"sha": "0cc66c8ea73354e96abcd7fe4dc63e71a96451a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc66c8ea73354e96abcd7fe4dc63e71a96451a5", "html_url": "https://github.com/rust-lang/rust/commit/0cc66c8ea73354e96abcd7fe4dc63e71a96451a5"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "bc635190f4281047557df305da92ee074088509f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25dda3647ea42d1b64aca6e5584faff0d8a38dbc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25dda3647ea42d1b64aca6e5584faff0d8a38dbc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=25dda3647ea42d1b64aca6e5584faff0d8a38dbc", "patch": "@@ -269,9 +269,9 @@ fn opts() -> Vec<RustcOptGroup> {\n     let stable: fn(_, fn(&mut getopts::Options) -> &mut _) -> _ = RustcOptGroup::stable;\n     let unstable: fn(_, fn(&mut getopts::Options) -> &mut _) -> _ = RustcOptGroup::unstable;\n     vec![\n-        stable(\"h\", |o| o.optflag(\"h\", \"help\", \"show this help message\")),\n-        stable(\"V\", |o| o.optflag(\"V\", \"version\", \"print rustdoc's version\")),\n-        stable(\"v\", |o| o.optflag(\"v\", \"verbose\", \"use verbose output\")),\n+        stable(\"h\", |o| o.optflagmulti(\"h\", \"help\", \"show this help message\")),\n+        stable(\"V\", |o| o.optflagmulti(\"V\", \"version\", \"print rustdoc's version\")),\n+        stable(\"v\", |o| o.optflagmulti(\"v\", \"verbose\", \"use verbose output\")),\n         stable(\"r\", |o| {\n             o.optopt(\"r\", \"input-format\", \"the input type of the specified file\", \"[rust]\")\n         }),\n@@ -309,14 +309,14 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         stable(\"plugins\", |o| o.optmulti(\"\", \"plugins\", \"removed\", \"PLUGINS\")),\n-        stable(\"no-default\", |o| o.optflag(\"\", \"no-defaults\", \"don't run the default passes\")),\n+        stable(\"no-default\", |o| o.optflagmulti(\"\", \"no-defaults\", \"don't run the default passes\")),\n         stable(\"document-private-items\", |o| {\n-            o.optflag(\"\", \"document-private-items\", \"document private items\")\n+            o.optflagmulti(\"\", \"document-private-items\", \"document private items\")\n         }),\n         unstable(\"document-hidden-items\", |o| {\n-            o.optflag(\"\", \"document-hidden-items\", \"document items that have doc(hidden)\")\n+            o.optflagmulti(\"\", \"document-hidden-items\", \"document items that have doc(hidden)\")\n         }),\n-        stable(\"test\", |o| o.optflag(\"\", \"test\", \"run code examples as tests\")),\n+        stable(\"test\", |o| o.optflagmulti(\"\", \"test\", \"run code examples as tests\")),\n         stable(\"test-args\", |o| {\n             o.optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\", \"ARGS\")\n         }),\n@@ -386,7 +386,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"markdown-playground-url\", \"URL to send code snippets to\", \"URL\")\n         }),\n         stable(\"markdown-no-toc\", |o| {\n-            o.optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")\n+            o.optflagmulti(\"\", \"markdown-no-toc\", \"don't include table of contents\")\n         }),\n         stable(\"e\", |o| {\n             o.optopt(\n@@ -412,13 +412,13 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"display-warnings\", |o| {\n-            o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n+            o.optflagmulti(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n         }),\n         stable(\"crate-version\", |o| {\n             o.optopt(\"\", \"crate-version\", \"crate version to print into documentation\", \"VERSION\")\n         }),\n         unstable(\"sort-modules-by-appearance\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"sort-modules-by-appearance\",\n                 \"sort modules by where they appear in the program, rather than alphabetically\",\n@@ -495,7 +495,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"json\", \"Configure the structure of JSON diagnostics\", \"CONFIG\")\n         }),\n         unstable(\"disable-minification\", |o| {\n-            o.optflag(\"\", \"disable-minification\", \"Disable minification applied on JS files\")\n+            o.optflagmulti(\"\", \"disable-minification\", \"Disable minification applied on JS files\")\n         }),\n         stable(\"warn\", |o| o.optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\")),\n         stable(\"allow\", |o| o.optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\")),\n@@ -523,7 +523,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"index-page\", \"Markdown file to be used as index page\", \"PATH\")\n         }),\n         unstable(\"enable-index-page\", |o| {\n-            o.optflag(\"\", \"enable-index-page\", \"To enable generation of the index page\")\n+            o.optflagmulti(\"\", \"enable-index-page\", \"To enable generation of the index page\")\n         }),\n         unstable(\"static-root-path\", |o| {\n             o.optopt(\n@@ -535,7 +535,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"disable-per-crate-search\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"disable-per-crate-search\",\n                 \"disables generating the crate selector on the search box\",\n@@ -550,14 +550,14 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"show-coverage\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"show-coverage\",\n                 \"calculate percentage of public items with documentation\",\n             )\n         }),\n         unstable(\"enable-per-target-ignores\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"enable-per-target-ignores\",\n                 \"parse ignore-foo for ignoring doctests on a per-target basis\",\n@@ -582,9 +582,9 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"test-builder\", |o| {\n             o.optopt(\"\", \"test-builder\", \"The rustc-like binary to use as the test builder\", \"PATH\")\n         }),\n-        unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n+        unstable(\"check\", |o| o.optflagmulti(\"\", \"check\", \"Run rustdoc checks\")),\n         unstable(\"generate-redirect-map\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"generate-redirect-map\",\n                 \"Generate JSON file at the top level instead of generating HTML redirection files\",\n@@ -598,9 +598,11 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"[unversioned-shared-resources,toolchain-shared-resources,invocation-specific]\",\n             )\n         }),\n-        unstable(\"no-run\", |o| o.optflag(\"\", \"no-run\", \"Compile doctests without running them\")),\n+        unstable(\"no-run\", |o| {\n+            o.optflagmulti(\"\", \"no-run\", \"Compile doctests without running them\")\n+        }),\n         unstable(\"show-type-layout\", |o| {\n-            o.optflag(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n+            o.optflagmulti(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n         }),\n     ]\n }"}, {"sha": "dde36df2cf50eb7fe5ff19dc460eee08f3e72581", "filename": "src/test/rustdoc/duplicate-flags.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25dda3647ea42d1b64aca6e5584faff0d8a38dbc/src%2Ftest%2Frustdoc%2Fduplicate-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25dda3647ea42d1b64aca6e5584faff0d8a38dbc/src%2Ftest%2Frustdoc%2Fduplicate-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-flags.rs?ref=25dda3647ea42d1b64aca6e5584faff0d8a38dbc", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --document-private-items --document-private-items\n+\n+// @has duplicate_flags/struct.Private.html\n+struct Private;"}]}