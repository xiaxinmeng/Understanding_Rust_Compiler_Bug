{"sha": "c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDVlOWQwY2E3ZmMyMWM1YjcyM2Y2NmQ2ZWI0YTM2ZWMyOWQ3MzA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-11T23:04:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-11T23:04:04Z"}, "message": "Rollup merge of #84014 - estebank:cool-bears-hot-tip, r=varkor\n\nImprove trait/impl method discrepancy errors\n\n* Use more accurate spans\n* Clean up some code by removing previous hack\n* Provide structured suggestions\n\nStructured suggestions are particularly useful for cases where arbitrary self types are used, like in custom `Future`s, because the way to write `self: Pin<&mut Self>` is not necessarily self-evident when first encountered.", "tree": {"sha": "687df080ec62a1835c18d5de3d903c36a48e0554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687df080ec62a1835c18d5de3d903c36a48e0554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgc4BlCRBK7hj4Ov3rIwAAdHIIAJKEEtLiWtmAT94dMorle6AD\nlCTmfkxGD6wW9HWCf/Ch00Q2jc+qJKnFidTUaBNLX75yUFDeUCs/GvoFW+HHzFx5\niv0OkPXrFrsnlPS7Gp1BYA0kNrlYCCMk6yk7XRWFgzzIzNDluU7yTpllPQkDKe/j\ntPVvLg8W9TRNz6NTPYtQCaU1jmFW4CWZ8x5TV8BD2xGWn6zH6Jmz9bblRzgajAIQ\n/zLiLqGy2PqvksXOqDRIZURq/Jm0V1BiGKNoawy/A1MAMkqLHQzSjbfWwpV5Ebzx\nlaWkdjXtHN+9TYwCnKv9ISBCtJRSuM519+0zT6PDRPnWGRLMWKVb+Adc8wKVmy0=\n=To9R\n-----END PGP SIGNATURE-----\n", "payload": "tree 687df080ec62a1835c18d5de3d903c36a48e0554\nparent b6780b3a20ad9f482911119eee84b0ad5a495af6\nparent bb502c488915253a261f837cce7a920bf49a1666\nauthor Dylan DPC <dylan.dpc@gmail.com> 1618182244 +0200\ncommitter GitHub <noreply@github.com> 1618182244 +0200\n\nRollup merge of #84014 - estebank:cool-bears-hot-tip, r=varkor\n\nImprove trait/impl method discrepancy errors\n\n* Use more accurate spans\n* Clean up some code by removing previous hack\n* Provide structured suggestions\n\nStructured suggestions are particularly useful for cases where arbitrary self types are used, like in custom `Future`s, because the way to write `self: Pin<&mut Self>` is not necessarily self-evident when first encountered.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "html_url": "https://github.com/rust-lang/rust/commit/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6780b3a20ad9f482911119eee84b0ad5a495af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6780b3a20ad9f482911119eee84b0ad5a495af6", "html_url": "https://github.com/rust-lang/rust/commit/b6780b3a20ad9f482911119eee84b0ad5a495af6"}, {"sha": "bb502c488915253a261f837cce7a920bf49a1666", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb502c488915253a261f837cce7a920bf49a1666", "html_url": "https://github.com/rust-lang/rust/commit/bb502c488915253a261f837cce7a920bf49a1666"}], "stats": {"total": 375, "additions": 258, "deletions": 117}, "files": [{"sha": "008e6d015e879e2068c78cc80dbbe19bf1168b6e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -36,6 +36,7 @@ pub enum TypeError<'tcx> {\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n+    ArgumentMutability(usize),\n     TupleSize(ExpectedFound<usize>),\n     FixedArraySize(ExpectedFound<u64>),\n     ArgCount,\n@@ -46,6 +47,7 @@ pub enum TypeError<'tcx> {\n     RegionsPlaceholderMismatch,\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n+    ArgumentSorts(ExpectedFound<Ty<'tcx>>, usize),\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n     FloatMismatch(ExpectedFound<ty::FloatTy>),\n     Traits(ExpectedFound<DefId>),\n@@ -110,7 +112,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             AbiMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n             }\n-            Mutability => write!(f, \"types differ in mutability\"),\n+            ArgumentMutability(_) | Mutability => write!(f, \"types differ in mutability\"),\n             TupleSize(values) => write!(\n                 f,\n                 \"expected a tuple with {} element{}, \\\n@@ -142,7 +144,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 br_string(br)\n             ),\n             RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n-            Sorts(values) => ty::tls::with(|tcx| {\n+            ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n                 report_maybe_different(\n                     f,\n                     &values.expected.sort_string(tcx),\n@@ -199,10 +201,11 @@ impl<'tcx> TypeError<'tcx> {\n         use self::TypeError::*;\n         match self {\n             CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_)\n-            | FixedArraySize(_) | Sorts(_) | IntMismatch(_) | FloatMismatch(_)\n-            | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n+            | FixedArraySize(_) | ArgumentSorts(..) | Sorts(_) | IntMismatch(_)\n+            | FloatMismatch(_) | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n \n             Mutability\n+            | ArgumentMutability(_)\n             | TupleSize(_)\n             | ArgCount\n             | RegionsDoesNotOutlive(..)\n@@ -339,7 +342,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         use self::TypeError::*;\n         debug!(\"note_and_explain_type_err err={:?} cause={:?}\", err, cause);\n         match err {\n-            Sorts(values) => {\n+            ArgumentSorts(values, _) | Sorts(values) => {\n                 match (values.expected.kind(), values.found.kind()) {\n                     (ty::Closure(..), ty::Closure(..)) => {\n                         db.note(\"no two closures, even if identical, have the same type\");"}, {"sha": "b6f93c9bd59e79bbe51efb25aefa106fdcea6e10", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -179,6 +179,12 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n                 } else {\n                     relation.relate_with_variance(ty::Contravariant, a, b)\n                 }\n+            })\n+            .enumerate()\n+            .map(|(i, r)| match r {\n+                Err(TypeError::Sorts(exp_found)) => Err(TypeError::ArgumentSorts(exp_found, i)),\n+                Err(TypeError::Mutability) => Err(TypeError::ArgumentMutability(i)),\n+                r => r,\n             });\n         Ok(ty::FnSig {\n             inputs_and_output: tcx.mk_type_list(inputs_and_output)?,"}, {"sha": "7290c41d615dfbb962b3d49f693bb3b2bc85ffcf", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -587,6 +587,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             UnsafetyMismatch(x) => UnsafetyMismatch(x),\n             AbiMismatch(x) => AbiMismatch(x),\n             Mutability => Mutability,\n+            ArgumentMutability(i) => ArgumentMutability(i),\n             TupleSize(x) => TupleSize(x),\n             FixedArraySize(x) => FixedArraySize(x),\n             ArgCount => ArgCount,\n@@ -607,6 +608,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             CyclicTy(t) => return tcx.lift(t).map(|t| CyclicTy(t)),\n             CyclicConst(ct) => return tcx.lift(ct).map(|ct| CyclicConst(ct)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n+            ArgumentSorts(x, i) => return tcx.lift(x).map(|x| ArgumentSorts(x, i)),\n             Sorts(x) => return tcx.lift(x).map(Sorts),\n             ExistentialMismatch(x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(x) => return tcx.lift(x).map(ConstMismatch),"}, {"sha": "60ca562f9920068d44fc8e5635a65b7ed0a4652b", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 87, "deletions": 81, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -278,9 +278,8 @@ fn compare_predicate_entailment<'tcx>(\n         if let Err(terr) = sub_result {\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n \n-            let (impl_err_span, trait_err_span) = extract_spans_for_error_reporting(\n-                &infcx, param_env, &terr, &cause, impl_m, impl_sig, trait_m, trait_sig,\n-            );\n+            let (impl_err_span, trait_err_span) =\n+                extract_spans_for_error_reporting(&infcx, &terr, &cause, impl_m, trait_m);\n \n             cause.make_mut().span = impl_err_span;\n \n@@ -291,18 +290,79 @@ fn compare_predicate_entailment<'tcx>(\n                 \"method `{}` has an incompatible type for trait\",\n                 trait_m.ident\n             );\n-            if let TypeError::Mutability = terr {\n-                if let Some(trait_err_span) = trait_err_span {\n-                    if let Ok(trait_err_str) = tcx.sess.source_map().span_to_snippet(trait_err_span)\n+            match &terr {\n+                TypeError::ArgumentMutability(0) | TypeError::ArgumentSorts(_, 0)\n+                    if trait_m.fn_has_self_parameter =>\n+                {\n+                    let ty = trait_sig.inputs()[0];\n+                    let sugg = match ExplicitSelf::determine(ty, |_| ty == impl_trait_ref.self_ty())\n                     {\n+                        ExplicitSelf::ByValue => \"self\".to_owned(),\n+                        ExplicitSelf::ByReference(_, hir::Mutability::Not) => \"&self\".to_owned(),\n+                        ExplicitSelf::ByReference(_, hir::Mutability::Mut) => {\n+                            \"&mut self\".to_owned()\n+                        }\n+                        _ => format!(\"self: {}\", ty),\n+                    };\n+\n+                    // When the `impl` receiver is an arbitrary self type, like `self: Box<Self>`, the\n+                    // span points only at the type `Box<Self`>, but we want to cover the whole\n+                    // argument pattern and type.\n+                    let impl_m_hir_id =\n+                        tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n+                    let span = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+                        ImplItemKind::Fn(ref sig, body) => tcx\n+                            .hir()\n+                            .body_param_names(body)\n+                            .zip(sig.decl.inputs.iter())\n+                            .map(|(param, ty)| param.span.to(ty.span))\n+                            .next()\n+                            .unwrap_or(impl_err_span),\n+                        _ => bug!(\"{:?} is not a method\", impl_m),\n+                    };\n+\n+                    diag.span_suggestion(\n+                        span,\n+                        \"change the self-receiver type to match the trait\",\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                TypeError::ArgumentMutability(i) | TypeError::ArgumentSorts(_, i) => {\n+                    if trait_sig.inputs().len() == *i {\n+                        // Suggestion to change output type. We do not suggest in `async` functions\n+                        // to avoid complex logic or incorrect output.\n+                        let impl_m_hir_id =\n+                            tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n+                        match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+                            ImplItemKind::Fn(ref sig, _)\n+                                if sig.header.asyncness == hir::IsAsync::NotAsync =>\n+                            {\n+                                let msg = \"change the output type to match the trait\";\n+                                let ap = Applicability::MachineApplicable;\n+                                match sig.decl.output {\n+                                    hir::FnRetTy::DefaultReturn(sp) => {\n+                                        let sugg = format!(\"-> {} \", trait_sig.output());\n+                                        diag.span_suggestion_verbose(sp, msg, sugg, ap);\n+                                    }\n+                                    hir::FnRetTy::Return(hir_ty) => {\n+                                        let sugg = trait_sig.output().to_string();\n+                                        diag.span_suggestion(hir_ty.span, msg, sugg, ap);\n+                                    }\n+                                };\n+                            }\n+                            _ => {}\n+                        };\n+                    } else if let Some(trait_ty) = trait_sig.inputs().get(*i) {\n                         diag.span_suggestion(\n                             impl_err_span,\n-                            \"consider changing the mutability to match the trait\",\n-                            trait_err_str,\n+                            \"change the parameter type to match the trait\",\n+                            trait_ty.to_string(),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n+                _ => {}\n             }\n \n             infcx.note_type_err(\n@@ -385,86 +445,35 @@ fn check_region_bounds_on_impl_item<'tcx>(\n \n fn extract_spans_for_error_reporting<'a, 'tcx>(\n     infcx: &infer::InferCtxt<'a, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     terr: &TypeError<'_>,\n     cause: &ObligationCause<'tcx>,\n     impl_m: &ty::AssocItem,\n-    impl_sig: ty::FnSig<'tcx>,\n     trait_m: &ty::AssocItem,\n-    trait_sig: ty::FnSig<'tcx>,\n ) -> (Span, Option<Span>) {\n     let tcx = infcx.tcx;\n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-    let (impl_m_output, impl_m_iter) = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n-        ImplItemKind::Fn(ref impl_m_sig, _) => {\n-            (&impl_m_sig.decl.output, impl_m_sig.decl.inputs.iter())\n+    let mut impl_args = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+        ImplItemKind::Fn(ref sig, _) => {\n+            sig.decl.inputs.iter().map(|t| t.span).chain(iter::once(sig.decl.output.span()))\n         }\n         _ => bug!(\"{:?} is not a method\", impl_m),\n     };\n-\n-    match *terr {\n-        TypeError::Mutability => {\n-            if let Some(def_id) = trait_m.def_id.as_local() {\n-                let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let trait_m_iter = match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                    TraitItemKind::Fn(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n-                    _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n-                };\n-\n-                iter::zip(impl_m_iter, trait_m_iter)\n-                    .find(|&(ref impl_arg, ref trait_arg)| {\n-                        match (&impl_arg.kind, &trait_arg.kind) {\n-                            (\n-                                &hir::TyKind::Rptr(_, ref impl_mt),\n-                                &hir::TyKind::Rptr(_, ref trait_mt),\n-                            )\n-                            | (&hir::TyKind::Ptr(ref impl_mt), &hir::TyKind::Ptr(ref trait_mt)) => {\n-                                impl_mt.mutbl != trait_mt.mutbl\n-                            }\n-                            _ => false,\n-                        }\n-                    })\n-                    .map(|(ref impl_arg, ref trait_arg)| (impl_arg.span, Some(trait_arg.span)))\n-                    .unwrap_or_else(|| (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)))\n-            } else {\n-                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n+    let trait_args = trait_m.def_id.as_local().map(|def_id| {\n+        let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n+            TraitItemKind::Fn(ref sig, _) => {\n+                sig.decl.inputs.iter().map(|t| t.span).chain(iter::once(sig.decl.output.span()))\n             }\n+            _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n         }\n-        TypeError::Sorts(ExpectedFound { .. }) => {\n-            if let Some(def_id) = trait_m.def_id.as_local() {\n-                let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let (trait_m_output, trait_m_iter) =\n-                    match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                        TraitItemKind::Fn(ref trait_m_sig, _) => {\n-                            (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n-                        }\n-                        _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n-                    };\n+    });\n \n-                let impl_iter = impl_sig.inputs().iter();\n-                let trait_iter = trait_sig.inputs().iter();\n-                iter::zip(iter::zip(impl_iter, trait_iter), iter::zip(impl_m_iter, trait_m_iter))\n-                    .find_map(|((&impl_arg_ty, &trait_arg_ty), (impl_arg, trait_arg))| match infcx\n-                        .at(&cause, param_env)\n-                        .sub(trait_arg_ty, impl_arg_ty)\n-                    {\n-                        Ok(_) => None,\n-                        Err(_) => Some((impl_arg.span, Some(trait_arg.span))),\n-                    })\n-                    .unwrap_or_else(|| {\n-                        if infcx\n-                            .at(&cause, param_env)\n-                            .sup(trait_sig.output(), impl_sig.output())\n-                            .is_err()\n-                        {\n-                            (impl_m_output.span(), Some(trait_m_output.span()))\n-                        } else {\n-                            (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n-                        }\n-                    })\n-            } else {\n-                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n-            }\n+    match *terr {\n+        TypeError::ArgumentMutability(i) => {\n+            (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n+        }\n+        TypeError::ArgumentSorts(ExpectedFound { .. }, i) => {\n+            (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n         }\n         _ => (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)),\n     }\n@@ -514,8 +523,7 @@ fn compare_self_type<'tcx>(\n                 tcx.sess,\n                 impl_m_span,\n                 E0185,\n-                \"method `{}` has a `{}` declaration in the impl, but \\\n-                                            not in the trait\",\n+                \"method `{}` has a `{}` declaration in the impl, but not in the trait\",\n                 trait_m.ident,\n                 self_descr\n             );\n@@ -535,8 +543,7 @@ fn compare_self_type<'tcx>(\n                 tcx.sess,\n                 impl_m_span,\n                 E0186,\n-                \"method `{}` has a `{}` declaration in the trait, but \\\n-                                            not in the impl\",\n+                \"method `{}` has a `{}` declaration in the trait, but not in the impl\",\n                 trait_m.ident,\n                 self_descr\n             );\n@@ -993,8 +1000,7 @@ crate fn compare_const_impl<'tcx>(\n                 tcx.sess,\n                 cause.span,\n                 E0326,\n-                \"implemented const `{}` has an incompatible type for \\\n-                                             trait\",\n+                \"implemented const `{}` has an incompatible type for trait\",\n                 trait_c.ident\n             );\n "}, {"sha": "3c7dc1fc3c9b23f88e97439f934418204b48713c", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -15,7 +15,10 @@ LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n ...\n LL |     fn make() -> u8 { 0 }\n-   |                  ^^ expected associated type, found `u8`\n+   |                  ^^\n+   |                  |\n+   |                  expected associated type, found `u8`\n+   |                  help: change the output type to match the trait: `<A<T> as Tr>::Ty`\n    |\n    = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n               found fn pointer `fn() -> u8`\n@@ -30,7 +33,10 @@ LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n LL | \n LL |     fn make() -> bool { true }\n-   |                  ^^^^ expected associated type, found `bool`\n+   |                  ^^^^\n+   |                  |\n+   |                  expected associated type, found `bool`\n+   |                  help: change the output type to match the trait: `<B<T> as Tr>::Ty`\n    |\n    = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n               found fn pointer `fn() -> bool`"}, {"sha": "f42a9e49abdff5947c5a947fa3c0cb9ce08c4693", "filename": "src/test/ui/compare-method/bad-self-type.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -0,0 +1,26 @@\n+use std::future::Future;\n+use std::task::{Context, Poll};\n+\n+fn main() {}\n+\n+struct MyFuture {}\n+\n+impl Future for MyFuture {\n+    type Output = ();\n+    fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n+    //~^ ERROR method `poll` has an incompatible type for trait\n+        todo!()\n+    }\n+}\n+\n+trait T {\n+    fn foo(self);\n+    fn bar(self) -> Option<()>;\n+}\n+\n+impl T for MyFuture {\n+    fn foo(self: Box<Self>) {}\n+    //~^ ERROR method `foo` has an incompatible type for trait\n+    fn bar(self) {}\n+    //~^ ERROR method `bar` has an incompatible type for trait\n+}"}, {"sha": "76f91fbf241d030c36065d5acd923aa1bfa0f67e", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -0,0 +1,46 @@\n+error[E0053]: method `poll` has an incompatible type for trait\n+  --> $DIR/bad-self-type.rs:10:13\n+   |\n+LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n+   |             ^^^^\n+   |             |\n+   |             expected struct `Pin`, found struct `MyFuture`\n+   |             help: change the self-receiver type to match the trait: `self: Pin<&mut MyFuture>`\n+   |\n+   = note: expected fn pointer `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n+              found fn pointer `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n+\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/bad-self-type.rs:22:18\n+   |\n+LL |     fn foo(self);\n+   |            ---- type in trait\n+...\n+LL |     fn foo(self: Box<Self>) {}\n+   |            ------^^^^^^^^^\n+   |            |     |\n+   |            |     expected struct `MyFuture`, found struct `Box`\n+   |            help: change the self-receiver type to match the trait: `self`\n+   |\n+   = note: expected fn pointer `fn(MyFuture)`\n+              found fn pointer `fn(Box<MyFuture>)`\n+\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/bad-self-type.rs:24:18\n+   |\n+LL |     fn bar(self) -> Option<()>;\n+   |                     ---------- type in trait\n+...\n+LL |     fn bar(self) {}\n+   |                  ^ expected enum `Option`, found `()`\n+   |\n+   = note: expected fn pointer `fn(MyFuture) -> Option<()>`\n+              found fn pointer `fn(MyFuture)`\n+help: change the output type to match the trait\n+   |\n+LL |     fn bar(self) -> Option<()> {}\n+   |                  ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "d581628ea48adaffbef65f307f500bbb3190350a", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -5,8 +5,10 @@ LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             - type in trait\n ...\n LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n-   |        -       -             ^ expected type parameter `F`, found type parameter `G`\n-   |        |       |\n+   |        -       -             ^\n+   |        |       |             |\n+   |        |       |             expected type parameter `F`, found type parameter `G`\n+   |        |       |             help: change the parameter type to match the trait: `F`\n    |        |       found type parameter\n    |        expected type parameter\n    |"}, {"sha": "d37670db08537447ae3edf31558ec295efe4560a", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -5,8 +5,10 @@ LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                -- type in trait\n ...\n LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n-   |            -                   ^^^^^^^^^^^ expected type parameter `B`, found type parameter `impl Debug`\n-   |            |\n+   |            -                   ^^^^^^^^^^^\n+   |            |                   |\n+   |            |                   expected type parameter `B`, found type parameter `impl Debug`\n+   |            |                   help: change the parameter type to match the trait: `&B`\n    |            expected type parameter\n    |\n    = note: expected fn pointer `fn(&(), &B, &impl Debug)`"}, {"sha": "bea24339837a2414cb7ecf02ac6648b287b3a871", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -1,8 +1,11 @@\n error[E0053]: method `fmt` has an incompatible type for trait\n-  --> $DIR/trait_type.rs:7:4\n+  --> $DIR/trait_type.rs:7:21\n    |\n LL |    fn fmt(&self, x: &str) -> () { }\n-   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n+   |                     ^^^^\n+   |                     |\n+   |                     types differ in mutability\n+   |                     help: change the parameter type to match the trait: `&mut Formatter<'_>`\n    |\n    = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n               found fn pointer `fn(&MyType, &str)`"}, {"sha": "6c3651ff1217a28381698ec173b811ac0a11aa52", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -8,7 +8,7 @@ LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^\n    |                              |\n    |                              types differ in mutability\n-   |                              help: consider changing the mutability to match the trait: `&mut dyn Foo`\n+   |                              help: change the parameter type to match the trait: `&mut dyn Foo`\n    |\n    = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n               found fn pointer `fn(&mut Baz, &dyn Foo)`"}, {"sha": "6f4813ca6235b1cfb1d8a3331d530d1ff06d42f8", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -1,33 +1,42 @@\n error[E0053]: method `call` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:6:3\n+  --> $DIR/issue-20225.rs:6:43\n    |\n LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n+   |                                           ^^^^\n+   |                                           |\n+   |                                           expected `&T`, found type parameter `T`\n+   |                                           help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:11:3\n+  --> $DIR/issue-20225.rs:11:51\n    |\n LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n+   |                                                   ^^^^\n+   |                                                   |\n+   |                                                   expected `&T`, found type parameter `T`\n+   |                                                   help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n \n error[E0053]: method `call_once` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:18:3\n+  --> $DIR/issue-20225.rs:18:47\n    |\n LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n    |          - this type parameter\n ...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n+   |                                               ^^^^\n+   |                                               |\n+   |                                               expected `&T`, found type parameter `T`\n+   |                                               help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "d92966da17c4ceb7e2db6a3fb02c81a502cf3560", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -1,8 +1,11 @@\n error[E0053]: method `next` has an incompatible type for trait\n-  --> $DIR/issue-21332.rs:5:5\n+  --> $DIR/issue-21332.rs:5:27\n    |\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n+   |                           ^^^^^^^^^^^^^^^^\n+   |                           |\n+   |                           expected enum `Option`, found enum `Result`\n+   |                           help: change the output type to match the trait: `Option<i32>`\n    |\n    = note: expected fn pointer `fn(&mut S) -> Option<i32>`\n               found fn pointer `fn(&mut S) -> Result<i32, i32>`"}, {"sha": "71b2a9df09553d49538f881b6c13c3d346223f2b", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(_: fn(u8) -> ());\n    |               ------------ type in trait\n ...\n LL |     fn foo(_: fn(u16) -> ()) {}\n-   |               ^^^^^^^^^^^^^ expected `u8`, found `u16`\n+   |               ^^^^^^^^^^^^^\n+   |               |\n+   |               expected `u8`, found `u16`\n+   |               help: change the parameter type to match the trait: `fn(u8)`\n    |\n    = note: expected fn pointer `fn(fn(u8))`\n               found fn pointer `fn(fn(u16))`\n@@ -17,7 +20,10 @@ LL |     fn bar(_: Option<u8>);\n    |               ---------- type in trait\n ...\n LL |     fn bar(_: Option<u16>) {}\n-   |               ^^^^^^^^^^^ expected `u8`, found `u16`\n+   |               ^^^^^^^^^^^\n+   |               |\n+   |               expected `u8`, found `u16`\n+   |               help: change the parameter type to match the trait: `Option<u8>`\n    |\n    = note: expected fn pointer `fn(Option<u8>)`\n               found fn pointer `fn(Option<u16>)`\n@@ -29,7 +35,10 @@ LL |     fn baz(_: (u8, u16));\n    |               --------- type in trait\n ...\n LL |     fn baz(_: (u16, u16)) {}\n-   |               ^^^^^^^^^^ expected `u8`, found `u16`\n+   |               ^^^^^^^^^^\n+   |               |\n+   |               expected `u8`, found `u16`\n+   |               help: change the parameter type to match the trait: `(u8, u16)`\n    |\n    = note: expected fn pointer `fn((u8, _))`\n               found fn pointer `fn((u16, _))`\n@@ -41,7 +50,10 @@ LL |     fn qux() -> u8;\n    |                 -- type in trait\n ...\n LL |     fn qux() -> u16 { 5u16 }\n-   |                 ^^^ expected `u8`, found `u16`\n+   |                 ^^^\n+   |                 |\n+   |                 expected `u8`, found `u16`\n+   |                 help: change the output type to match the trait: `u8`\n    |\n    = note: expected fn pointer `fn() -> u8`\n               found fn pointer `fn() -> u16`"}, {"sha": "6ce8126b9f970d64d592d3bf8a2b5c5e7754d11c", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(x: u16);\n    |               --- type in trait\n ...\n LL |     fn foo(x: i16) { }\n-   |               ^^^ expected `u16`, found `i16`\n+   |               ^^^\n+   |               |\n+   |               expected `u16`, found `i16`\n+   |               help: change the parameter type to match the trait: `u16`\n    |\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`\n@@ -20,7 +23,7 @@ LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^\n    |            |\n    |            types differ in mutability\n-   |            help: consider changing the mutability to match the trait: `&self`\n+   |            help: change the self-receiver type to match the trait: `self: &Bar`\n    |\n    = note: expected fn pointer `fn(&Bar)`\n               found fn pointer `fn(&mut Bar)`"}, {"sha": "2ac4d1c33a9b945c2891d266394963180614a88b", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(x: u16);\n    |               --- type in trait\n ...\n LL |     fn foo(x: i16) { }\n-   |               ^^^ expected `u16`, found `i16`\n+   |               ^^^\n+   |               |\n+   |               expected `u16`, found `i16`\n+   |               help: change the parameter type to match the trait: `u16`\n    |\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`\n@@ -20,7 +23,7 @@ LL |     fn bar(&mut self, bar: &Bar) { }\n    |                            ^^^^\n    |                            |\n    |                            types differ in mutability\n-   |                            help: consider changing the mutability to match the trait: `&mut Bar`\n+   |                            help: change the parameter type to match the trait: `&mut Bar`\n    |\n    = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n               found fn pointer `fn(&mut Bar, &Bar)`"}, {"sha": "9f8896f01ee06f90e776c07c1ccbfdfa8a496216", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=c905e9d0ca7fc21c5b723f66d6eb4a36ec29d730", "patch": "@@ -1,26 +1,35 @@\n error[E0053]: method `mul` has an incompatible type for trait\n-  --> $DIR/wrong-mul-method-signature.rs:16:5\n+  --> $DIR/wrong-mul-method-signature.rs:16:21\n    |\n LL |     fn mul(self, s: &f64) -> Vec1 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n+   |                     ^^^^\n+   |                     |\n+   |                     expected `f64`, found `&f64`\n+   |                     help: change the parameter type to match the trait: `f64`\n    |\n    = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n               found fn pointer `fn(Vec1, &f64) -> Vec1`\n \n error[E0053]: method `mul` has an incompatible type for trait\n-  --> $DIR/wrong-mul-method-signature.rs:33:5\n+  --> $DIR/wrong-mul-method-signature.rs:33:21\n    |\n LL |     fn mul(self, s: f64) -> Vec2 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found `f64`\n+   |                     ^^^\n+   |                     |\n+   |                     expected struct `Vec2`, found `f64`\n+   |                     help: change the parameter type to match the trait: `Vec2`\n    |\n    = note: expected fn pointer `fn(Vec2, Vec2) -> f64`\n               found fn pointer `fn(Vec2, f64) -> Vec2`\n \n error[E0053]: method `mul` has an incompatible type for trait\n-  --> $DIR/wrong-mul-method-signature.rs:52:5\n+  --> $DIR/wrong-mul-method-signature.rs:52:29\n    |\n LL |     fn mul(self, s: f64) -> f64 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `f64`\n+   |                             ^^^\n+   |                             |\n+   |                             expected `i32`, found `f64`\n+   |                             help: change the output type to match the trait: `i32`\n    |\n    = note: expected fn pointer `fn(Vec3, _) -> i32`\n               found fn pointer `fn(Vec3, _) -> f64`"}]}