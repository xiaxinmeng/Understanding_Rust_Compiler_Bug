{"sha": "4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NTBlOGJjZjQwNGQ0YzI3ZGJiZDU0NDZhNTZmYjA2NmFkYTMwZjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T20:16:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T08:32:53Z"}, "message": "Make sure resource destructors are properly monomorphized", "tree": {"sha": "7039da7407e5c71f1c0f3f2f0da0f2a98bb4d032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7039da7407e5c71f1c0f3f2f0da0f2a98bb4d032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "html_url": "https://github.com/rust-lang/rust/commit/4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f84d4c8b6305c960cf51c35a5ea38697d7fa530", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f84d4c8b6305c960cf51c35a5ea38697d7fa530", "html_url": "https://github.com/rust-lang/rust/commit/8f84d4c8b6305c960cf51c35a5ea38697d7fa530"}], "stats": {"total": 119, "additions": 73, "deletions": 46}, "files": [{"sha": "3d54ffe39442d41720958b1b52c666725bbec2b4", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -135,6 +135,10 @@ fn visit_ids(item: ast::inlined_item, vfn: fn@(ast::node_id)) {\n \n         visit_item: fn@(i: @ast::item) {\n             vfn(i.id);\n+            alt i.node {\n+              ast::item_res(_, _, _, d_id, c_id) { vfn(d_id); vfn(c_id); }\n+              _ {}\n+            }\n         },\n \n         visit_local: fn@(l: @ast::local) {"}, {"sha": "6a8a77b119119124c4c2e9500398076403fb42e5", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -339,10 +339,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n     }\n \n     let tcx = ecx.ccx.tcx;\n-    let must_write = alt item.node {\n-      item_enum(_, _) | item_res(_, _, _, _, _) { true }\n-      _ { false }\n-    };\n+    let must_write = alt item.node { item_enum(_, _) { true } _ { false } };\n     if !must_write && !ecx.reachable.contains_key(item.id) { ret false; }\n \n     alt item.node {\n@@ -419,6 +416,8 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_name(ebml_w, item.ident);\n         if tps.len() == 0u {\n             encode_symbol(ecx, ebml_w, item.id);\n+        } else {\n+            astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         }\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n@@ -533,7 +532,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n     ecx.ccx.tcx.items.items {|key, val|\n         let where = ebml_w.writer.tell();\n         let written = alt val {\n-          middle::ast_map::node_item(i, path) {\n+          middle::ast_map::node_item(i, path) if i.id == key {\n             encode_info_for_item(ecx, ebml_w, i, index, *path)\n           }\n           middle::ast_map::node_native_item(i, _, path) {"}, {"sha": "1ee2d8eab95ae99db856af0cb44b7ddd9e76bdf8", "filename": "src/rustc/metadata/reachable.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmetadata%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmetadata%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Freachable.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -7,7 +7,7 @@\n \n import middle::{resolve, ast_map, typeck};\n import syntax::ast::*;\n-import syntax::visit;\n+import syntax::{visit, ast_util};\n import syntax::ast_util::def_id_of_def;\n import front::attr;\n import std::map::hashmap;\n@@ -22,7 +22,9 @@ type ctx = {ccx: @middle::trans::common::crate_ctxt,\n fn find_reachable(ccx: @middle::trans::common::crate_ctxt, crate_mod: _mod)\n     -> map {\n     let rmap = std::map::int_hash();\n-    traverse_public_mod({ccx: ccx, rmap: rmap}, crate_mod);\n+    let cx = {ccx: ccx, rmap: rmap};\n+    traverse_public_mod(cx, crate_mod);\n+    traverse_all_resources(cx, crate_mod);\n     rmap\n }\n \n@@ -124,3 +126,17 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n         with *visit::default_visitor()\n     }));\n }\n+\n+fn traverse_all_resources(cx: ctx, crate_mod: _mod) {\n+    visit::visit_mod(crate_mod, ast_util::dummy_sp(), 0, cx, visit::mk_vt(@{\n+        visit_expr: {|_e, _cx, _v|},\n+        visit_item: {|i, cx, v|\n+            visit::visit_item(i, cx, v);\n+            alt i.node {\n+              item_res(_, _, _, _, _) { traverse_public_item(cx, i); }\n+              _ {}\n+            }\n+        }\n+        with *visit::default_visitor()\n+    }));\n+}"}, {"sha": "0dde3983dbd14e2a1d24d61bee3ea20649606493", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -859,6 +859,24 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     build_return(bcx);\n }\n \n+fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n+   -> ValueRef {\n+    let did = if did.crate != ast::local_crate && substs.len() > 0u {\n+        maybe_instantiate_inline(ccx, did)\n+    } else { did };\n+    if did.crate == ast::local_crate {\n+        option::get(monomorphic_fn(ccx, did, substs, none))\n+    } else {\n+        assert substs.len() == 0u;\n+        let nil = ty::mk_nil(ccx.tcx);\n+        let arg = {mode: ast::expl(ast::by_ref),\n+                   ty: ty::mk_mut_ptr(ccx.tcx, nil)};\n+        let f_t = type_of::type_of_fn(ccx, [arg], nil, 0u);\n+        get_extern_const(ccx.externs, ccx.llmod,\n+                         csearch::get_symbol(ccx.sess.cstore, did), f_t)\n+    }\n+}\n+\n fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n                   inner_t: ty::t, tps: [ty::t]) -> block {\n     let ccx = bcx.ccx();\n@@ -869,16 +887,11 @@ fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n     with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) {|bcx|\n         let {bcx, val: valptr} = GEP_tup_like(bcx, tup_ty, rs, [0, 1]);\n         // Find and call the actual destructor.\n-        let dtor_addr = common::get_res_dtor(ccx, did, inner_t);\n+        let dtor_addr = get_res_dtor(ccx, did, tps);\n         let args = [bcx.fcx.llretptr, null_env_ptr(bcx)];\n-        for tp in tps {\n-            let td = get_tydesc_simple(bcx, tp);\n-            args += [td.val];\n-            bcx = td.bcx;\n-        }\n         // Kludge to work around the fact that we know the precise type of the\n-        // value here, but the dtor expects a type that still has opaque\n-        // pointers for type variables.\n+        // value here, but the dtor expects a type that might have opaque\n+        // boxes and such.\n         let val_llty = lib::llvm::fn_ty_param_tys\n             (llvm::LLVMGetElementType\n              (llvm::LLVMTypeOf(dtor_addr)))[args.len()];\n@@ -1997,13 +2010,20 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n     }\n \n     let tpt = ty::lookup_item_type(ccx.tcx, fn_id);\n-    let mono_ty = ty::substitute_type_params(ccx.tcx, substs, tpt.ty);\n-    let llfty = type_of_fn_from_ty(ccx, mono_ty, 0u);\n+    let item_ty = tpt.ty;\n \n     let map_node = ccx.tcx.items.get(fn_id.node);\n     // Get the path so that we can create a symbol\n     let (pt, name) = alt map_node {\n-      ast_map::node_item(i, pt) { (pt, i.ident) }\n+      ast_map::node_item(i, pt) {\n+        alt i.node {\n+          ast::item_res(_, _, _, dtor_id, _) {\n+            item_ty = ty::node_id_to_type(ccx.tcx, dtor_id);\n+          }\n+          _ {}\n+        }\n+        (pt, i.ident)\n+      }\n       ast_map::node_variant(v, _, pt) { (pt, v.node.name) }\n       ast_map::node_method(m, _, pt) { (pt, m.ident) }\n       // We can't monomorphize native functions\n@@ -2015,6 +2035,9 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n       }\n       _ { fail \"unexpected node type\"; }\n     };\n+    let mono_ty = ty::substitute_type_params(ccx.tcx, substs, item_ty);\n+    let llfty = type_of_fn_from_ty(ccx, mono_ty, 0u);\n+\n     let pt = *pt + [path_name(ccx.names(name))];\n     let s = mangle_exported_name(ccx, pt, mono_ty);\n     let lldecl = decl_cdecl_fn(ccx.llmod, s, llfty);\n@@ -2027,6 +2050,9 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n         trans_fn(ccx, pt, decl, body, lldecl, no_self, psubsts, fn_id.node,\n                  none);\n       }\n+      ast_map::node_item(@{node: ast::item_res(d, _, body, d_id, _), _}, _) {\n+        trans_fn(ccx, pt, d, body, lldecl, no_self, psubsts, d_id, none);\n+      }\n       ast_map::node_variant(v, enum_item, _) {\n         let tvs = ty::enum_variants(ccx.tcx, local_def(enum_item.id));\n         let this_tv = option::get(vec::find(*tvs, {|tv|"}, {"sha": "f8932a0225073fa51d4ec8368f18f7c6fe3defba", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -298,22 +298,6 @@ fn revoke_clean(cx: block, val: ValueRef) {\n     }\n }\n \n-fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, inner_t: ty::t)\n-   -> ValueRef {\n-    if did.crate == ast::local_crate {\n-        ret base::get_item_val(ccx, did.node);\n-    }\n-\n-    let param_bounds = ty::lookup_item_type(ccx.tcx, did).bounds;\n-    let nil_res = ty::mk_nil(ccx.tcx);\n-    let fn_mode = ast::expl(ast::by_ref);\n-    let f_t = type_of::type_of_fn(ccx, [{mode: fn_mode, ty: inner_t}],\n-                                  nil_res, (*param_bounds).len());\n-    ret base::get_extern_const(ccx.externs, ccx.llmod,\n-                                csearch::get_symbol(ccx.sess.cstore,\n-                                                    did), f_t);\n-}\n-\n enum block_kind {\n     // A scope at the end of which temporary values created inside of it are\n     // cleaned up. May correspond to an actual block in the language, but also"}, {"sha": "b5351321b9649c7076e6617fabe1767d3dc7a236", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -21,7 +21,7 @@ import std::map::hashmap;\n \n import ty_ctxt = middle::ty::ctxt;\n \n-type res_info = {did: ast::def_id, t: ty::t};\n+type res_info = {did: ast::def_id, tps: [ty::t]};\n \n type ctxt =\n     {mutable next_tag_id: u16,\n@@ -67,15 +67,13 @@ fn hash_res_info(ri: res_info) -> uint {\n     h += ri.did.crate as uint;\n     h *= 33u;\n     h += ri.did.node as uint;\n-    h *= 33u;\n-    h += ty::type_id(ri.t);\n+    for t in ri.tps {\n+        h *= 33u;\n+        h += ty::type_id(t);\n+    }\n     ret h;\n }\n \n-fn eq_res_info(a: res_info, b: res_info) -> bool {\n-    ret a.did.crate == b.did.crate && a.did.node == b.did.node && a.t == b.t;\n-}\n-\n fn mk_global(ccx: @crate_ctxt, name: str, llval: ValueRef, internal: bool) ->\n    ValueRef {\n     let llglobal =\n@@ -278,7 +276,7 @@ fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n          pad: 0u16,\n          tag_id_to_index: common::new_def_hash(),\n          mutable tag_order: [],\n-         resources: interner::mk(hash_res_info, eq_res_info),\n+         resources: interner::mk(hash_res_info, {|a, b| a == b}),\n          llshapetablesty: llshapetablesty,\n          llshapetables: llshapetables};\n }\n@@ -391,7 +389,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       }\n       ty::ty_res(did, raw_subt, tps) {\n         let subt = ty::substitute_type_params(ccx.tcx, tps, raw_subt);\n-        let ri = {did: did, t: subt};\n+        let ri = {did: did, tps: tps};\n         let id = interner::intern(ccx.shape_cx.resources, ri);\n \n         s += [shape_res];\n@@ -553,7 +551,7 @@ fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     let len = interner::len(ccx.shape_cx.resources);\n     while i < len {\n         let ri = interner::get(ccx.shape_cx.resources, i);\n-        dtors += [trans::common::get_res_dtor(ccx, ri.did, ri.t)];\n+        dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.tps)];\n         i += 1u;\n     }\n "}, {"sha": "62de1f881ef828bc057444accf9237f42cc0f9aa", "filename": "src/rustc/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4650e8bcf404d4c27dbbd5446a56fb066ada30f9/src%2Frustc%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Ffold.rs?ref=4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "patch": "@@ -289,8 +289,8 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n             item_res(fold_fn_decl(decl, fld),\n                      fold_ty_params(typms, fld),\n                      fld.fold_block(body),\n-                     did,\n-                     cid)\n+                     fld.new_id(did),\n+                     fld.new_id(cid))\n           }\n         };\n }"}]}