{"sha": "da65d8166fe50a817a49d542460986234e94dc6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjVkODE2NmZlNTBhODE3YTQ5ZDU0MjQ2MDk4NjIzNGU5NGRjNmQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2021-01-17T18:09:24Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-10T10:57:28Z"}, "message": "Don't trigger use_self in macros", "tree": {"sha": "d9c66ebed8dfa2868e8e5efaaf52020789205dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c66ebed8dfa2868e8e5efaaf52020789205dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da65d8166fe50a817a49d542460986234e94dc6d", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmAjvBgACgkQHKDfKvWd\naKWxPg/+LMwerG8JNyEg6a9DitadEyzh8dWuD7eYl1ma6AfRIE25jfxhq8B0+qjh\nLmoR4wCDdmlPRV5CrR40Cjw/U8DkhrWXAVaL6KAg12BDfM/Ws4bRRy31AtNPOqCf\nKE/0BArsbOVlhBTvpuLZiv90VvKznykn17WIeq+nvKpH1tPd1s6oX5rNqPQ+ovT4\nrYJcNpeBGDzCprTYuJnzIDZECSDNWxLfQgUAvpUbHf1zN/8hTwYRog2CnkC2BFLD\nUzsYQ8bBH7ryf+Z0k/i6zwVnCrODE4XGjIdHjabHrOWe7BSxv0UbM+movR86Mev7\n7NZUf9bvRjULSHuZc99MZkDc3MLX/phKCp+pIzTQbjyO5ezfZMM12swmCbNtbEdC\n1+ngeRo9vV/NeSD8V5ANlTXLNxp1N+RJ+52ryJz4P/VcQJRWibUGfAo+RTdaIU3I\nO4a8LmkOD0cbiIVFurVTN47ForV4S/cuxP90VZuNVf8qdWXjqL1cB9DwYpALpL4U\nBVu/vyw0rFITHHYD2Ga81KCTqU1cov8TZb5dOhATLUdj9lbnBB3KttSEx4jywZ6Y\n8G0sYP4voUK6AgLzsxp24cAGeuhFwI/bEvSy5hCl2Xx3gq0mWV79LYWJf89ZcJCP\nfRzhhAYPZDwxnSMcRaEcAC3LXNDNbRL3tiOGURE05NPOudJB/AU=\n=hRL1\n-----END PGP SIGNATURE-----", "payload": "tree d9c66ebed8dfa2868e8e5efaaf52020789205dfe\nparent bb40db7adc6c42fb675559b7ac92468ed416747f\nauthor flip1995 <hello@philkrones.com> 1610906964 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1612954648 +0100\n\nDon't trigger use_self in macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da65d8166fe50a817a49d542460986234e94dc6d", "html_url": "https://github.com/rust-lang/rust/commit/da65d8166fe50a817a49d542460986234e94dc6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da65d8166fe50a817a49d542460986234e94dc6d/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb40db7adc6c42fb675559b7ac92468ed416747f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb40db7adc6c42fb675559b7ac92468ed416747f", "html_url": "https://github.com/rust-lang/rust/commit/bb40db7adc6c42fb675559b7ac92468ed416747f"}], "stats": {"total": 123, "additions": 63, "deletions": 60}, "files": [{"sha": "3dfec190541dbc0bb0f30fb8d7458f13ae4ec36a", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da65d8166fe50a817a49d542460986234e94dc6d/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da65d8166fe50a817a49d542460986234e94dc6d/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=da65d8166fe50a817a49d542460986234e94dc6d", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{meets_msrv, qpath_res, snippet_opt, span_lint_and_sugg};\n+use crate::utils::{in_macro, meets_msrv, qpath_res, snippet_opt, span_lint_and_sugg};\n use if_chain::if_chain;\n \n use rustc_errors::Applicability;\n@@ -13,7 +13,6 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{AssocKind, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -232,7 +231,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n-        if in_external_macro(cx.sess(), hir_ty.span)\n+        if in_macro(hir_ty.span)\n             | in_impl(cx, hir_ty)\n             | self.types_to_skip.contains(&hir_ty.hir_id)\n             | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV)\n@@ -274,7 +273,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             }\n         }\n \n-        if in_external_macro(cx.sess(), expr.span) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n+        if in_macro(expr.span) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n             return;\n         }\n "}, {"sha": "aebeaf346799d3767a483533b9ff1e2f67c17783", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=da65d8166fe50a817a49d542460986234e94dc6d", "patch": "@@ -41,3 +41,15 @@ pub fn derive_foo(_input: TokenStream) -> TokenStream {\n         }\n     }\n }\n+\n+#[proc_macro_derive(StructAUseSelf)]\n+pub fn derive_use_self(_input: TokenStream) -> proc_macro::TokenStream {\n+    quote! {\n+        struct A;\n+        impl A {\n+            fn new() -> A {\n+                A\n+            }\n+        }\n+    }\n+}"}, {"sha": "95e7bc754310f8393cf59cf6939ddc2f8e7bf170", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=da65d8166fe50a817a49d542460986234e94dc6d", "patch": "@@ -1,10 +1,14 @@\n // run-rustfix\n // edition:2018\n+// aux-build:proc_macro_derive.rs\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n #![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n \n+#[macro_use]\n+extern crate proc_macro_derive;\n+\n fn main() {}\n \n mod use_self {\n@@ -109,17 +113,20 @@ mod tuple_structs {\n mod macros {\n     macro_rules! use_self_expand {\n         () => {\n-            fn new() -> Self {\n-                Self {}\n+            fn new() -> Foo {\n+                Foo {}\n             }\n         };\n     }\n \n     struct Foo {}\n \n     impl Foo {\n-        use_self_expand!(); // Should lint in local macros\n+        use_self_expand!(); // Should not lint in local macros\n     }\n+\n+    #[derive(StructAUseSelf)] // Should not lint in derives\n+    struct A;\n }\n \n mod nesting {"}, {"sha": "75424f341597d1e50aa08ef0362dfeb9b8d1256c", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=da65d8166fe50a817a49d542460986234e94dc6d", "patch": "@@ -1,10 +1,14 @@\n // run-rustfix\n // edition:2018\n+// aux-build:proc_macro_derive.rs\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n #![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n \n+#[macro_use]\n+extern crate proc_macro_derive;\n+\n fn main() {}\n \n mod use_self {\n@@ -118,8 +122,11 @@ mod macros {\n     struct Foo {}\n \n     impl Foo {\n-        use_self_expand!(); // Should lint in local macros\n+        use_self_expand!(); // Should not lint in local macros\n     }\n+\n+    #[derive(StructAUseSelf)] // Should not lint in derives\n+    struct A;\n }\n \n mod nesting {"}, {"sha": "37dfef7cfe0e516996b23ddc5d43c5393a4004d6", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 30, "deletions": 52, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da65d8166fe50a817a49d542460986234e94dc6d/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=da65d8166fe50a817a49d542460986234e94dc6d", "patch": "@@ -1,200 +1,178 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:21\n+  --> $DIR/use_self.rs:18:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:15:13\n+  --> $DIR/use_self.rs:19:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:17:22\n+  --> $DIR/use_self.rs:21:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:18:13\n+  --> $DIR/use_self.rs:22:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:25\n+  --> $DIR/use_self.rs:27:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:24:13\n+  --> $DIR/use_self.rs:28:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:89:24\n+  --> $DIR/use_self.rs:93:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:89:55\n+  --> $DIR/use_self.rs:93:55\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                                                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:104:13\n+  --> $DIR/use_self.rs:108:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:112:25\n-   |\n-LL |             fn new() -> Foo {\n-   |                         ^^^ help: use the applicable keyword: `Self`\n-...\n-LL |         use_self_expand!(); // Should lint in local macros\n-   |         ------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:113:17\n-   |\n-LL |                 Foo {}\n-   |                 ^^^ help: use the applicable keyword: `Self`\n-...\n-LL |         use_self_expand!(); // Should lint in local macros\n-   |         ------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:136:29\n+  --> $DIR/use_self.rs:143:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:137:21\n+  --> $DIR/use_self.rs:144:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:148:21\n+  --> $DIR/use_self.rs:155:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:149:13\n+  --> $DIR/use_self.rs:156:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:166:21\n+  --> $DIR/use_self.rs:173:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:167:21\n+  --> $DIR/use_self.rs:174:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:168:21\n+  --> $DIR/use_self.rs:175:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:210:13\n+  --> $DIR/use_self.rs:217:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:211:13\n+  --> $DIR/use_self.rs:218:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:213:13\n+  --> $DIR/use_self.rs:220:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:232:13\n+  --> $DIR/use_self.rs:239:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:246:25\n+  --> $DIR/use_self.rs:253:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:247:13\n+  --> $DIR/use_self.rs:254:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:251:16\n+  --> $DIR/use_self.rs:258:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:251:22\n+  --> $DIR/use_self.rs:258:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:274:29\n+  --> $DIR/use_self.rs:281:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:275:13\n+  --> $DIR/use_self.rs:282:13\n    |\n LL |             Foo { value }\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:312:21\n+  --> $DIR/use_self.rs:319:21\n    |\n LL |         type From = T::From;\n    |                     ^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:313:19\n+  --> $DIR/use_self.rs:320:19\n    |\n LL |         type To = T::To;\n    |                   ^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:450:13\n+  --> $DIR/use_self.rs:457:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 29 previous errors\n "}]}