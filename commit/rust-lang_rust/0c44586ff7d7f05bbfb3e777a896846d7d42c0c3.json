{"sha": "0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "node_id": "C_kwDOAAsO6NoAKDBjNDQ1ODZmZjdkN2YwNWJiZmIzZTc3N2E4OTY4NDZkN2Q0MmMwYzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-19T12:42:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-19T12:42:33Z"}, "message": "Auto merge of #10651 - lukaslueg:issue10641, r=xFrednet\n\nAdd size-parameter to unecessary_box_returns\n\nFixes #10641\n\nThis adds a configuration-knob to the `unecessary_box_returns`-lint which allows _not_ linting a `fn() -> Box<T>` if `T` is \"large\". The default byte size above which we no longer lint is 128 bytes (due to https://github.com/rust-lang/rust-clippy/issues/4652#issue-505670554, also used in #9373). The overall rational is given in #10641.\n\n---\n\nchangelog: Enhancement: [`unnecessary_box_returns`]: Added new lint configuration `unnecessary-box-size` to set the maximum size of `T` in `Box<T>` to be linted\n[#10651](https://github.com/rust-lang/rust-clippy/pull/10651)\n<!-- changelog_checked -->", "tree": {"sha": "3b924ba52d71367304a4876714043b4496009158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b924ba52d71367304a4876714043b4496009158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "html_url": "https://github.com/rust-lang/rust/commit/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8099f195168b9aa954dd3981ab643f44f59005d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8099f195168b9aa954dd3981ab643f44f59005d4", "html_url": "https://github.com/rust-lang/rust/commit/8099f195168b9aa954dd3981ab643f44f59005d4"}, {"sha": "4bc68f9c60c72c9608b49d20907843b37c91f39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc68f9c60c72c9608b49d20907843b37c91f39b", "html_url": "https://github.com/rust-lang/rust/commit/4bc68f9c60c72c9608b49d20907843b37c91f39b"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "a702226e86103fcc1d28dec1fe72bc5af4aa02f3", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "patch": "@@ -55,6 +55,7 @@ Please use that command to update the file and do not edit it by hand.\n | [suppress-restriction-lint-in-const](#suppress-restriction-lint-in-const) | `false` |\n | [missing-docs-in-crate-items](#missing-docs-in-crate-items) | `false` |\n | [future-size-threshold](#future-size-threshold) | `16384` |\n+| [unnecessary-box-size](#unnecessary-box-size) | `128` |\n \n ### arithmetic-side-effects-allowed\n Suppress checking of the passed type names in all types of operations.\n@@ -561,4 +562,12 @@ The maximum byte size a `Future` can have, before it triggers the `clippy::large\n * [large_futures](https://rust-lang.github.io/rust-clippy/master/index.html#large_futures)\n \n \n+### unnecessary-box-size\n+The byte size a `T` in `Box<T>` can have, below which it triggers the `clippy::unnecessary_box` lint\n+\n+**Default Value:** `128` (`u64`)\n+\n+* [unnecessary_box_returns](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns)\n+\n+\n "}, {"sha": "af2c780360162dbc11b23b5f36e0704fe6d006e9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "patch": "@@ -950,9 +950,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n     store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n+    let unnecessary_box_size = conf.unnecessary_box_size;\n     store.register_late_pass(move |_| {\n         Box::new(unnecessary_box_returns::UnnecessaryBoxReturns::new(\n             avoid_breaking_exported_api,\n+            unnecessary_box_size,\n         ))\n     });\n     store.register_late_pass(|_| Box::new(lines_filter_map_ok::LinesFilterMapOk));"}, {"sha": "af1c8d83b4fe627f80cbb274c43e41239930425b", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{diagnostics::span_lint_and_then, ty::approx_ty_size};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::LocalDefId, FnDecl, FnRetTy, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -10,6 +10,9 @@ declare_clippy_lint! {\n     ///\n     /// Checks for a return type containing a `Box<T>` where `T` implements `Sized`\n     ///\n+    /// The lint ignores `Box<T>` where `T` is larger than `unnecessary_box_size`,\n+    /// as returning a large `T` directly may be detrimental to performance.\n+    ///\n     /// ### Why is this bad?\n     ///\n     /// It's better to just return `T` in these cases. The caller may not need\n@@ -36,14 +39,16 @@ declare_clippy_lint! {\n \n pub struct UnnecessaryBoxReturns {\n     avoid_breaking_exported_api: bool,\n+    maximum_size: u64,\n }\n \n impl_lint_pass!(UnnecessaryBoxReturns => [UNNECESSARY_BOX_RETURNS]);\n \n impl UnnecessaryBoxReturns {\n-    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+    pub fn new(avoid_breaking_exported_api: bool, maximum_size: u64) -> Self {\n         Self {\n             avoid_breaking_exported_api,\n+            maximum_size,\n         }\n     }\n \n@@ -71,8 +76,10 @@ impl UnnecessaryBoxReturns {\n \n         let boxed_ty = return_ty.boxed_ty();\n \n-        // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n-        if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n+        // It's sometimes useful to return Box<T> if T is unsized, so don't lint those.\n+        // Also, don't lint if we know that T is very large, in which case returning\n+        // a Box<T> may be beneficial.\n+        if boxed_ty.is_sized(cx.tcx, cx.param_env) && approx_ty_size(cx, boxed_ty) <= self.maximum_size {\n             span_lint_and_then(\n                 cx,\n                 UNNECESSARY_BOX_RETURNS,"}, {"sha": "67bb499c455a2a4f50e4045e52bdcb8494c2c1db", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "patch": "@@ -463,6 +463,10 @@ define_Conf! {\n     ///\n     /// The maximum byte size a `Future` can have, before it triggers the `clippy::large_futures` lint\n     (future_size_threshold: u64 = 16 * 1024),\n+    /// Lint: UNNECESSARY_BOX_RETURNS.\n+    ///\n+    /// The byte size a `T` in `Box<T>` can have, below which it triggers the `clippy::unnecessary_box` lint\n+    (unnecessary_box_size: u64 = 128),\n }\n \n /// Search for the configuration file."}, {"sha": "36b372b36f4faa5bba731ef0fca00bc70730b649", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "patch": "@@ -46,6 +46,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            too-many-lines-threshold\n            trivial-copy-size-limit\n            type-complexity-threshold\n+           unnecessary-box-size\n            unreadable-literal-lint-fractions\n            upper-case-acronyms-aggressive\n            vec-box-size-threshold"}, {"sha": "ce7cc2e97cb25be0b89e0114e2ab0977988c18e2", "filename": "tests/ui/unnecessary_box_returns.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/tests%2Fui%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c44586ff7d7f05bbfb3e777a896846d7d42c0c3/tests%2Fui%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.rs?ref=0c44586ff7d7f05bbfb3e777a896846d7d42c0c3", "patch": "@@ -54,6 +54,16 @@ fn string() -> String {\n     String::from(\"Hello, world\")\n }\n \n+struct Huge([u8; 500]);\n+struct HasHuge(Box<Huge>);\n+\n+impl HasHuge {\n+    // don't lint: The size of `Huge` is very large\n+    fn into_huge(self) -> Box<Huge> {\n+        self.0\n+    }\n+}\n+\n fn main() {\n     // don't lint: this is a closure\n     let a = || -> Box<usize> { Box::new(5) };"}]}