{"sha": "e1f70f77bf7aae099453d54a1175d8453ce4f5cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZjcwZjc3YmY3YWFlMDk5NDUzZDU0YTExNzVkODQ1M2NlNGY1Y2I=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-01-18T23:44:05Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-01-18T23:45:00Z"}, "message": "[const-prop] Remove useless typedef\n\nIt's confusing because it conflicts with ty::Const and just isn't\ngenerally useful.", "tree": {"sha": "9391830d89810704e39e7121482755955028a55e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9391830d89810704e39e7121482755955028a55e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f70f77bf7aae099453d54a1175d8453ce4f5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f70f77bf7aae099453d54a1175d8453ce4f5cb", "html_url": "https://github.com/rust-lang/rust/commit/e1f70f77bf7aae099453d54a1175d8453ce4f5cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f70f77bf7aae099453d54a1175d8453ce4f5cb/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce08f9d631ef767c915270bc63283c6af40dc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce08f9d631ef767c915270bc63283c6af40dc3f", "html_url": "https://github.com/rust-lang/rust/commit/1ce08f9d631ef767c915270bc63283c6af40dc3f"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "2fd59f3ee194400ff2b63b0b46547fdb99c96b78", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1f70f77bf7aae099453d54a1175d8453ce4f5cb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f70f77bf7aae099453d54a1175d8453ce4f5cb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e1f70f77bf7aae099453d54a1175d8453ce4f5cb", "patch": "@@ -288,8 +288,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n }\n \n-type Const<'tcx> = OpTy<'tcx>;\n-\n /// Finds optimization opportunities on the MIR.\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine>,\n@@ -387,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n+    fn get_const(&self, local: Local) -> Option<OpTy<'tcx>> {\n         if local == RETURN_PLACE {\n             // Try to read the return place as an immediate so that if it is representable as a\n             // scalar, we can handle it as such, but otherwise, just return the value as is.\n@@ -470,7 +468,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         &mut self,\n         c: &Constant<'tcx>,\n         source_info: SourceInfo,\n-    ) -> Option<Const<'tcx>> {\n+    ) -> Option<OpTy<'tcx>> {\n         self.ecx.tcx.span = c.span;\n \n         // FIXME we need to revisit this for #67176\n@@ -510,12 +508,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n         self.use_ecx(source_info, |this| this.ecx.eval_place_to_op(place, None))\n     }\n \n-    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         match *op {\n             Operand::Constant(ref c) => self.eval_constant(c, source_info),\n             Operand::Move(ref place) | Operand::Copy(ref place) => {\n@@ -664,7 +662,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn replace_with_const(\n         &mut self,\n         rval: &mut Rvalue<'tcx>,\n-        value: Const<'tcx>,\n+        value: OpTy<'tcx>,\n         source_info: SourceInfo,\n     ) {\n         trace!(\"attepting to replace {:?} with {:?}\", rval, value);"}]}