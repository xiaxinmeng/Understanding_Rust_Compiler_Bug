{"sha": "ffaf857045f4f4d8bb563e0a5077f9b065f42916", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWY4NTcwNDVmNGY0ZDhiYjU2M2UwYTUwNzdmOWIwNjVmNDI5MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T02:24:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T02:24:11Z"}, "message": "Auto merge of #88448 - xu-cheng:btree-blk-build, r=Mark-Simulacrum\n\nBTreeMap/BTreeSet::from_iter: use bulk building to improve the performance\n\nBulk building is a common technique to increase the performance of building a fresh btree map. Instead of inserting items one-by-one, we sort all the items beforehand then create the BtreeMap in bulk.\n\nBenchmark\n```\n./x.py bench library/alloc --test-args btree::map::from_iter\n```\n\n* Before\n```\ntest btree::map::from_iter_rand_100                      ... bench:       3,694 ns/iter (+/- 840)\ntest btree::map::from_iter_rand_10_000                   ... bench:   1,033,446 ns/iter (+/- 192,950)\ntest btree::map::from_iter_seq_100                       ... bench:       5,689 ns/iter (+/- 1,259)\ntest btree::map::from_iter_seq_10_000                    ... bench:     861,033 ns/iter (+/- 118,815)\n```\n\n* After\n```\ntest btree::map::from_iter_rand_100                      ... bench:       3,033 ns/iter (+/- 707)\ntest btree::map::from_iter_rand_10_000                   ... bench:     775,958 ns/iter (+/- 105,152)\ntest btree::map::from_iter_seq_100                       ... bench:       2,969 ns/iter (+/- 336)\ntest btree::map::from_iter_seq_10_000                    ... bench:     258,292 ns/iter (+/- 29,364)\n```", "tree": {"sha": "c4ddda3dc84bfd079a01e805fe3b865a04698cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ddda3dc84bfd079a01e805fe3b865a04698cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffaf857045f4f4d8bb563e0a5077f9b065f42916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf857045f4f4d8bb563e0a5077f9b065f42916", "html_url": "https://github.com/rust-lang/rust/commit/ffaf857045f4f4d8bb563e0a5077f9b065f42916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf857045f4f4d8bb563e0a5077f9b065f42916/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11bbb5231349a0a144d86d5c0c21061a06d1969d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11bbb5231349a0a144d86d5c0c21061a06d1969d", "html_url": "https://github.com/rust-lang/rust/commit/11bbb5231349a0a144d86d5c0c21061a06d1969d"}, {"sha": "a03287bbf765ce7ac0e2ae9e64d8ade168ece301", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03287bbf765ce7ac0e2ae9e64d8ade168ece301", "html_url": "https://github.com/rust-lang/rust/commit/a03287bbf765ce7ac0e2ae9e64d8ade168ece301"}], "stats": {"total": 161, "additions": 151, "deletions": 10}, "files": [{"sha": "c304f74884721a60d976eef7abe200e00999f68e", "filename": "library/alloc/benches/btree/map.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs?ref=ffaf857045f4f4d8bb563e0a5077f9b065f42916", "patch": "@@ -54,6 +54,50 @@ macro_rules! map_insert_seq_bench {\n     };\n }\n \n+macro_rules! map_from_iter_rand_bench {\n+    ($name: ident, $n: expr, $map: ident) => {\n+        #[bench]\n+        pub fn $name(b: &mut Bencher) {\n+            let n: usize = $n;\n+            // setup\n+            let mut rng = thread_rng();\n+            let mut vec = Vec::with_capacity(n);\n+\n+            for _ in 0..n {\n+                let i = rng.gen::<usize>() % n;\n+                vec.push((i, i));\n+            }\n+\n+            // measure\n+            b.iter(|| {\n+                let map: $map<_, _> = vec.iter().copied().collect();\n+                black_box(map);\n+            });\n+        }\n+    };\n+}\n+\n+macro_rules! map_from_iter_seq_bench {\n+    ($name: ident, $n: expr, $map: ident) => {\n+        #[bench]\n+        pub fn $name(b: &mut Bencher) {\n+            let n: usize = $n;\n+            // setup\n+            let mut vec = Vec::with_capacity(n);\n+\n+            for i in 0..n {\n+                vec.push((i, i));\n+            }\n+\n+            // measure\n+            b.iter(|| {\n+                let map: $map<_, _> = vec.iter().copied().collect();\n+                black_box(map);\n+            });\n+        }\n+    };\n+}\n+\n macro_rules! map_find_rand_bench {\n     ($name: ident, $n: expr, $map: ident) => {\n         #[bench]\n@@ -111,6 +155,12 @@ map_insert_rand_bench! {insert_rand_10_000, 10_000, BTreeMap}\n map_insert_seq_bench! {insert_seq_100,    100,    BTreeMap}\n map_insert_seq_bench! {insert_seq_10_000, 10_000, BTreeMap}\n \n+map_from_iter_rand_bench! {from_iter_rand_100,    100,    BTreeMap}\n+map_from_iter_rand_bench! {from_iter_rand_10_000, 10_000, BTreeMap}\n+\n+map_from_iter_seq_bench! {from_iter_seq_100,    100,    BTreeMap}\n+map_from_iter_seq_bench! {from_iter_seq_10_000, 10_000, BTreeMap}\n+\n map_find_rand_bench! {find_rand_100,    100,    BTreeMap}\n map_find_rand_bench! {find_rand_10_000, 10_000, BTreeMap}\n "}, {"sha": "60bf83b8387c38c135d51b51329774d9638c836b", "filename": "library/alloc/src/collections/btree/dedup_sorted_iter.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs?ref=ffaf857045f4f4d8bb563e0a5077f9b065f42916", "patch": "@@ -0,0 +1,47 @@\n+use core::iter::Peekable;\n+\n+/// A iterator for deduping the key of a sorted iterator.\n+/// When encountering the duplicated key, only the last key-value pair is yielded.\n+///\n+/// Used by [`BTreeMap::bulk_build_from_sorted_iter`].\n+pub struct DedupSortedIter<K, V, I>\n+where\n+    I: Iterator<Item = (K, V)>,\n+{\n+    iter: Peekable<I>,\n+}\n+\n+impl<K, V, I> DedupSortedIter<K, V, I>\n+where\n+    I: Iterator<Item = (K, V)>,\n+{\n+    pub fn new(iter: I) -> Self {\n+        Self { iter: iter.peekable() }\n+    }\n+}\n+\n+impl<K, V, I> Iterator for DedupSortedIter<K, V, I>\n+where\n+    K: Eq,\n+    I: Iterator<Item = (K, V)>,\n+{\n+    type Item = (K, V);\n+\n+    fn next(&mut self) -> Option<(K, V)> {\n+        loop {\n+            let next = match self.iter.next() {\n+                Some(next) => next,\n+                None => return None,\n+            };\n+\n+            let peeked = match self.iter.peek() {\n+                Some(peeked) => peeked,\n+                None => return Some(next),\n+            };\n+\n+            if next.0 != peeked.0 {\n+                return Some(next);\n+            }\n+        }\n+    }\n+}"}, {"sha": "501a604e7f76d037fdfbc23c21a22367816491c6", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=ffaf857045f4f4d8bb563e0a5077f9b065f42916", "patch": "@@ -1,3 +1,4 @@\n+use crate::vec::Vec;\n use core::borrow::Borrow;\n use core::cmp::Ordering;\n use core::fmt::{self, Debug};\n@@ -9,6 +10,7 @@ use core::ops::{Index, RangeBounds};\n use core::ptr;\n \n use super::borrow::DormantMutRef;\n+use super::dedup_sorted_iter::DedupSortedIter;\n use super::navigate::{LazyLeafRange, LeafRange};\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n@@ -1285,6 +1287,18 @@ impl<K, V> BTreeMap<K, V> {\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n+\n+    /// Makes a `BTreeMap` from a sorted iterator.\n+    pub(crate) fn bulk_build_from_sorted_iter<I>(iter: I) -> Self\n+    where\n+        K: Ord,\n+        I: Iterator<Item = (K, V)>,\n+    {\n+        let mut root = Root::new();\n+        let mut length = 0;\n+        root.bulk_push(DedupSortedIter::new(iter), &mut length);\n+        BTreeMap { root: Some(root), length }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1909,9 +1923,15 @@ impl<K, V> FusedIterator for RangeMut<'_, K, V> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> BTreeMap<K, V> {\n-        let mut map = BTreeMap::new();\n-        map.extend(iter);\n-        map\n+        let mut inputs: Vec<_> = iter.into_iter().collect();\n+\n+        if inputs.is_empty() {\n+            return BTreeMap::new();\n+        }\n+\n+        // use stable sort to preserve the insertion order.\n+        inputs.sort_by(|a, b| a.0.cmp(&b.0));\n+        BTreeMap::bulk_build_from_sorted_iter(inputs.into_iter())\n     }\n }\n \n@@ -2020,8 +2040,14 @@ impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n     /// let map2: BTreeMap<_, _> = [(1, 2), (3, 4)].into();\n     /// assert_eq!(map1, map2);\n     /// ```\n-    fn from(arr: [(K, V); N]) -> Self {\n-        core::array::IntoIter::new(arr).collect()\n+    fn from(mut arr: [(K, V); N]) -> Self {\n+        if N == 0 {\n+            return BTreeMap::new();\n+        }\n+\n+        // use stable sort to preserve the insertion order.\n+        arr.sort_by(|a, b| a.0.cmp(&b.0));\n+        BTreeMap::bulk_build_from_sorted_iter(core::array::IntoIter::new(arr))\n     }\n }\n "}, {"sha": "9571b3d594df8cf6c410a663388c6825d099c82d", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=ffaf857045f4f4d8bb563e0a5077f9b065f42916", "patch": "@@ -1,5 +1,6 @@\n mod append;\n mod borrow;\n+mod dedup_sorted_iter;\n mod fix;\n pub mod map;\n mod mem;"}, {"sha": "c664e201aec544067d825faf5633b9c90a253020", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf857045f4f4d8bb563e0a5077f9b065f42916/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=ffaf857045f4f4d8bb563e0a5077f9b065f42916", "patch": "@@ -1,6 +1,7 @@\n // This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n // to TreeMap\n \n+use crate::vec::Vec;\n use core::borrow::Borrow;\n use core::cmp::Ordering::{Equal, Greater, Less};\n use core::cmp::{max, min};\n@@ -1056,9 +1057,17 @@ impl<T> BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BTreeSet<T> {\n-        let mut set = BTreeSet::new();\n-        set.extend(iter);\n-        set\n+        let mut inputs: Vec<_> = iter.into_iter().collect();\n+\n+        if inputs.is_empty() {\n+            return BTreeSet::new();\n+        }\n+\n+        // use stable sort to preserve the insertion order.\n+        inputs.sort();\n+        let iter = inputs.into_iter().map(|k| (k, ()));\n+        let map = BTreeMap::bulk_build_from_sorted_iter(iter);\n+        BTreeSet { map }\n     }\n }\n \n@@ -1071,8 +1080,16 @@ impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n     /// let set2: BTreeSet<_> = [1, 2, 3, 4].into();\n     /// assert_eq!(set1, set2);\n     /// ```\n-    fn from(arr: [T; N]) -> Self {\n-        core::array::IntoIter::new(arr).collect()\n+    fn from(mut arr: [T; N]) -> Self {\n+        if N == 0 {\n+            return BTreeSet::new();\n+        }\n+\n+        // use stable sort to preserve the insertion order.\n+        arr.sort();\n+        let iter = core::array::IntoIter::new(arr).map(|k| (k, ()));\n+        let map = BTreeMap::bulk_build_from_sorted_iter(iter);\n+        BTreeSet { map }\n     }\n }\n "}]}