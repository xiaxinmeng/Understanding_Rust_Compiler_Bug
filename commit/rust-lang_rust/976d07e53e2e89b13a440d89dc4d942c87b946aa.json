{"sha": "976d07e53e2e89b13a440d89dc4d942c87b946aa", "node_id": "C_kwDOAAsO6NoAKDk3NmQwN2U1M2UyZTg5YjEzYTQ0MGQ4OWRjNGQ5NDJjODdiOTQ2YWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-05T10:46:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-05T10:46:09Z"}, "message": "fix: Fix unresolved proc macro diagnostics pointing to macro expansions", "tree": {"sha": "de9bb0c4a69bd3ce18623247c77b42a519359407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9bb0c4a69bd3ce18623247c77b42a519359407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976d07e53e2e89b13a440d89dc4d942c87b946aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976d07e53e2e89b13a440d89dc4d942c87b946aa", "html_url": "https://github.com/rust-lang/rust/commit/976d07e53e2e89b13a440d89dc4d942c87b946aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976d07e53e2e89b13a440d89dc4d942c87b946aa/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed44fe52e4a730e4f892cde094fbba8ae8621589", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed44fe52e4a730e4f892cde094fbba8ae8621589", "html_url": "https://github.com/rust-lang/rust/commit/ed44fe52e4a730e4f892cde094fbba8ae8621589"}], "stats": {"total": 104, "additions": 63, "deletions": 41}, "files": [{"sha": "8fcfad20095f41f6a4f13edeaf1d46b600e34fa9", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 47, "deletions": 33, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=976d07e53e2e89b13a440d89dc4d942c87b946aa", "patch": "@@ -778,36 +778,19 @@ impl<'a> InFile<&'a SyntaxNode> {\n     /// For attributes and derives, this will point back to the attribute only.\n     /// For the entire item `InFile::use original_file_range_full`.\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n-        if let Some(res) = self.original_file_range_opt(db) {\n-            return res;\n-        }\n-\n-        // Fall back to whole macro call.\n         match self.file_id.0 {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n             HirFileIdRepr::MacroFile(mac_file) => {\n+                if let Some(res) = self.original_file_range_opt(db) {\n+                    return res;\n+                }\n+                // Fall back to whole macro call.\n                 let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n                 loc.kind.original_call_range(db)\n             }\n         }\n     }\n \n-    /// Falls back to the macro call range if the node cannot be mapped up fully.\n-    pub fn original_file_range_full(self, db: &dyn db::AstDatabase) -> FileRange {\n-        if let Some(res) = self.original_file_range_opt(db) {\n-            return res;\n-        }\n-\n-        // Fall back to whole macro call.\n-        match self.file_id.0 {\n-            HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n-            HirFileIdRepr::MacroFile(mac_file) => {\n-                let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n-                loc.kind.original_call_range_with_body(db)\n-            }\n-        }\n-    }\n-\n     /// Attempts to map the syntax node back up its macro calls.\n     pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n         match ascend_node_border_tokens(db, self) {\n@@ -834,6 +817,49 @@ impl InFile<SyntaxToken> {\n         let expansion = self.file_id.expansion_info(db)?;\n         expansion.map_token_up(db, self.as_ref()).map(|(it, _)| it)\n     }\n+\n+    /// Falls back to the macro call range if the node cannot be mapped up fully.\n+    pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n+        match self.file_id.0 {\n+            HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n+            HirFileIdRepr::MacroFile(mac_file) => {\n+                if let Some(res) = self.original_file_range_opt(db) {\n+                    return res;\n+                }\n+                // Fall back to whole macro call.\n+                let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n+                loc.kind.original_call_range(db)\n+            }\n+        }\n+    }\n+\n+    /// Attempts to map the syntax node back up its macro calls.\n+    pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n+        match self.file_id.0 {\n+            HirFileIdRepr::FileId(file_id) => {\n+                Some(FileRange { file_id, range: self.value.text_range() })\n+            }\n+            HirFileIdRepr::MacroFile(_) => {\n+                let expansion = self.file_id.expansion_info(db)?;\n+                let InFile { file_id, value } = ascend_call_token(db, &expansion, self)?;\n+                let original_file = file_id.original_file(db);\n+                if file_id != original_file.into() {\n+                    return None;\n+                }\n+                Some(FileRange { file_id: original_file, range: value.text_range() })\n+            }\n+        }\n+    }\n+\n+    pub fn ancestors_with_macros(\n+        self,\n+        db: &dyn db::AstDatabase,\n+    ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n+        self.value.parent().into_iter().flat_map({\n+            let file_id = self.file_id;\n+            move |parent| InFile::new(file_id, &parent).ancestors_with_macros(db)\n+        })\n+    }\n }\n \n fn ascend_node_border_tokens(\n@@ -867,18 +893,6 @@ fn ascend_call_token(\n     None\n }\n \n-impl InFile<SyntaxToken> {\n-    pub fn ancestors_with_macros(\n-        self,\n-        db: &dyn db::AstDatabase,\n-    ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n-        self.value.parent().into_iter().flat_map({\n-            let file_id = self.file_id;\n-            move |parent| InFile::new(file_id, &parent).ancestors_with_macros(db)\n-        })\n-    }\n-}\n-\n impl<N: AstNode> InFile<N> {\n     pub fn descendants<T: AstNode>(self) -> impl Iterator<Item = InFile<T>> {\n         self.value.syntax().descendants().filter_map(T::cast).map(move |n| self.with_value(n))"}, {"sha": "061a4813447d2fb9357a85a4468c85cf86dc1aca", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=976d07e53e2e89b13a440d89dc4d942c87b946aa", "patch": "@@ -176,7 +176,7 @@ fn get_adt_source(\n     adt: &hir::Adt,\n     fn_name: &str,\n ) -> Option<(Option<ast::Impl>, FileId)> {\n-    let range = adt.source(ctx.sema.db)?.syntax().original_file_range_full(ctx.sema.db);\n+    let range = adt.source(ctx.sema.db)?.syntax().original_file_range(ctx.sema.db);\n     let file = ctx.sema.parse(range.file_id);\n     let adt_source =\n         ctx.sema.find_node_at_offset_with_macros(file.syntax(), range.range.start())?;"}, {"sha": "c857adf876ef1010aa1d09506dd2e386b843d4c4", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=976d07e53e2e89b13a440d89dc4d942c87b946aa", "patch": "@@ -198,7 +198,7 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let fn_body = fn_source.value.body()?;\n     let param_list = fn_source.value.param_list()?;\n \n-    let FileRange { file_id, range } = fn_source.syntax().original_file_range_full(ctx.sema.db);\n+    let FileRange { file_id, range } = fn_source.syntax().original_file_range(ctx.sema.db);\n     if file_id == ctx.file_id() && range.contains(ctx.offset()) {\n         cov_mark::hit!(inline_call_recursive);\n         return None;"}, {"sha": "4a11fb73cd6d987aab3e1a84e4ea29873ac4b6d2", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=976d07e53e2e89b13a440d89dc4d942c87b946aa", "patch": "@@ -239,14 +239,14 @@ impl Definition {\n                 DefWithBody::Static(s) => s.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::SelfType(impl_) = self {\n             return match impl_.source(db).map(|src| src.syntax().cloned()) {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n@@ -262,7 +262,7 @@ impl Definition {\n                 hir::GenericDef::Const(it) => it.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }"}, {"sha": "760f51f90498c5ba07b57849bd75844e63bf4435", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976d07e53e2e89b13a440d89dc4d942c87b946aa/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=976d07e53e2e89b13a440d89dc4d942c87b946aa", "patch": "@@ -1,4 +1,5 @@\n use hir::db::DefDatabase;\n+use syntax::NodeOrToken;\n \n use crate::{Diagnostic, DiagnosticsContext, Severity};\n \n@@ -18,9 +19,16 @@ pub(crate) fn unresolved_proc_macro(\n     proc_attr_macros_enabled: bool,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = d\n-        .precise_location\n-        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n+    let display_range = (|| {\n+        let precise_location = d.precise_location?;\n+        let root = ctx.sema.parse_or_expand(d.node.file_id)?;\n+        match root.covering_element(precise_location) {\n+            NodeOrToken::Node(it) => Some(ctx.sema.original_range(&it)),\n+            NodeOrToken::Token(it) => d.node.with_value(it).original_file_range_opt(ctx.sema.db),\n+        }\n+    })()\n+    .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()))\n+    .range;\n \n     let config_enabled = match d.kind {\n         hir::MacroKind::Attr => proc_macros_enabled && proc_attr_macros_enabled,"}]}