{"sha": "73cb9ab5261813309b41e21cacfc44d2b61fe396", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczY2I5YWI1MjYxODEzMzA5YjQxZTIxY2FjZmM0NGQyYjYxZmUzOTY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T08:39:19Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T10:50:06Z"}, "message": "rename hir::map::get_by_hir_id to get", "tree": {"sha": "eb91efa442853ee82e3c0676e745c970a1a4a417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb91efa442853ee82e3c0676e745c970a1a4a417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73cb9ab5261813309b41e21cacfc44d2b61fe396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73cb9ab5261813309b41e21cacfc44d2b61fe396", "html_url": "https://github.com/rust-lang/rust/commit/73cb9ab5261813309b41e21cacfc44d2b61fe396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73cb9ab5261813309b41e21cacfc44d2b61fe396/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64456e48e782137d9c4a7ac407a047bc765db81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64456e48e782137d9c4a7ac407a047bc765db81", "html_url": "https://github.com/rust-lang/rust/commit/a64456e48e782137d9c4a7ac407a047bc765db81"}], "stats": {"total": 176, "additions": 88, "deletions": 88}, "files": [{"sha": "8c5fa97d4b72d03054df28a439271080e6b2aa62", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -84,7 +84,7 @@ impl<'a> Code<'a> {\n \n     /// Attempts to construct a Code from presumed FnLike or Expr node input.\n     pub fn from_node(map: &map::Map<'a>, id: ast::HirId) -> Option<Code<'a>> {\n-        match map.get_by_hir_id(id) {\n+        match map.get(id) {\n             map::Node::Block(_) => {\n                 //  Use the parent, hopefully an expression node.\n                 Code::from_node(map, map.get_parent_node_by_hir_id(id))"}, {"sha": "0b8b69be0a48007b8fd98d2b94230ef11d36b40b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -458,7 +458,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {\n-        match self.get_by_hir_id(id) {\n+        match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Const(..), .. }) |\n             Node::TraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n             Node::ImplItem(&ImplItem { node: ImplItemKind::Const(..), .. }) |\n@@ -482,7 +482,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn ty_param_owner(&self, id: HirId) -> HirId {\n-        match self.get_by_hir_id(id) {\n+        match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Trait(..), .. }) |\n             Node::Item(&Item { node: ItemKind::TraitAlias(..), .. }) => id,\n             Node::GenericParam(_) => self.get_parent_node_by_hir_id(id),\n@@ -491,7 +491,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn ty_param_name(&self, id: HirId) -> Name {\n-        match self.get_by_hir_id(id) {\n+        match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Trait(..), .. }) |\n             Node::Item(&Item { node: ItemKind::TraitAlias(..), .. }) => kw::SelfUpper,\n             Node::GenericParam(param) => param.name.ident().name,\n@@ -561,14 +561,14 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n-    pub fn get_by_hir_id(&self, id: HirId) -> Node<'hir> {\n+    pub fn get(&self, id: HirId) -> Node<'hir> {\n         // read recorded by `find`\n         self.find_by_hir_id(id).unwrap_or_else(||\n             bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n-        self.as_local_hir_id(id).map(|id| self.get_by_hir_id(id)) // read recorded by `get`\n+        self.as_local_hir_id(id).map(|id| self.get(id)) // read recorded by `get`\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics> {\n@@ -840,7 +840,7 @@ impl<'hir> Map<'hir> {\n             if scope == CRATE_HIR_ID {\n                 return Some(CRATE_HIR_ID);\n             }\n-            match self.get_by_hir_id(scope) {\n+            match self.get(scope) {\n                 Node::Item(i) => {\n                     match i.node {\n                         ItemKind::Existential(ExistTy { impl_trait_fn: None, .. }) => {}\n@@ -929,7 +929,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn name(&self, id: HirId) -> Name {\n-        match self.get_by_hir_id(id) {\n+        match self.get(id) {\n             Node::Item(i) => i.ident.name,\n             Node::ForeignItem(fi) => fi.ident.name,\n             Node::ImplItem(ii) => ii.ident.name,\n@@ -1061,7 +1061,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn hir_to_pretty_string(&self, id: HirId) -> String {\n-        print::to_string(self, |s| s.print_node(self.get_by_hir_id(id)))\n+        print::to_string(self, |s| s.print_node(self.get(id)))\n     }\n }\n "}, {"sha": "d1e32b1dbad36761cf7a42b23896322be1334ebc", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -1335,7 +1335,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                             // instead we suggest `T: 'a + 'b` in that case.\n                             let mut has_bounds = false;\n-                            if let Node::GenericParam(ref param) = hir.get_by_hir_id(id) {\n+                            if let Node::GenericParam(ref param) = hir.get(id) {\n                                 has_bounds = !param.bounds.is_empty();\n                             }\n                             let sp = hir.span(id);"}, {"sha": "283af94b89b4841604bfdd19bdbcbae273f5e6bf", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n             let def_id = anon_reg.def_id;\n             if let Some(hir_id) = self.tcx().hir().as_local_hir_id(def_id) {\n-                let fndecl = match self.tcx().hir().get_by_hir_id(hir_id) {\n+                let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item {\n                         node: hir::ItemKind::Fn(ref fndecl, ..),\n                         .."}, {"sha": "f5a4dac2c2cb8e799b0e2fa7162e3bc0bb6dba83", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     if let Node::Expr(Expr {\n                         node: Closure(_, _, _, closure_span, None),\n                         ..\n-                    }) = hir.get_by_hir_id(hir_id) {\n+                    }) = hir.get(hir_id) {\n                         let sup_sp = sup_origin.span();\n                         let origin_sp = origin.span();\n                         let mut err = self.tcx().sess.struct_span_err("}, {"sha": "a687b0e459100d7a084e3d99c6980ad3c05cc97e", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -945,8 +945,8 @@ pub fn may_define_existential_type(\n     let mut hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     trace!(\n         \"may_define_existential_type(def={:?}, opaque_node={:?})\",\n-        tcx.hir().get_by_hir_id(hir_id),\n-        tcx.hir().get_by_hir_id(opaque_hir_id)\n+        tcx.hir().get(hir_id),\n+        tcx.hir().get(opaque_hir_id)\n     );\n \n     // Named existential types can be defined by any siblings or children of siblings."}, {"sha": "0d59e32b09818fdf5c71d7086100c9d180f80f0b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -1630,7 +1630,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     );\n \n                     if self.ir.variable_is_shorthand(var) {\n-                        if let Node::Binding(pat) = self.ir.tcx.hir().get_by_hir_id(hir_id) {\n+                        if let Node::Binding(pat) = self.ir.tcx.hir().get(hir_id) {\n                             // Handle `ref` and `ref mut`.\n                             let spans = spans.iter()\n                                 .map(|_span| (pat.span, format!(\"{}: _\", name)))"}, {"sha": "10796abe5d4c42b2f90000505eef8da113a90414", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -344,7 +344,7 @@ impl MutabilityCategory {\n         tables: &ty::TypeckTables<'_>,\n         id: hir::HirId,\n     ) -> MutabilityCategory {\n-        let ret = match tcx.hir().get_by_hir_id(id) {\n+        let ret = match tcx.hir().get(id) {\n             Node::Binding(p) => match p.node {\n                 PatKind::Binding(..) => {\n                     let bm = *tables.pat_binding_modes()"}, {"sha": "d9ccb9d42f23656c0c96a0b0aa8d413beaf1f2f1", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -190,7 +190,7 @@ impl Scope {\n         }\n         let span = tcx.hir().span(hir_id);\n         if let ScopeData::Remainder(first_statement_index) = self.data {\n-            if let Node::Block(ref blk) = tcx.hir().get_by_hir_id(hir_id) {\n+            if let Node::Block(ref blk) = tcx.hir().get(hir_id) {\n                 // Want span for scope starting after the\n                 // indexed statement and ending at end of\n                 // `blk`; reuse span of `blk` and shift `lo`\n@@ -1368,7 +1368,7 @@ fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ScopeTree\n         // If the item is an associated const or a method,\n         // record its impl/trait parent, as it can also have\n         // lifetime parameters free in this body.\n-        match tcx.hir().get_by_hir_id(id) {\n+        match tcx.hir().get(id) {\n             Node::ImplItem(_) |\n             Node::TraitItem(_) => {\n                 visitor.scope_tree.root_parent = Some(tcx.hir().get_parent_item(id));"}, {"sha": "b8e7db99d071ca629234cbadeafda033c00e8b6d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -1488,7 +1488,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n             }\n         };\n-        if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get_by_hir_id(lifetime.hir_id) {\n+        if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get(lifetime.hir_id) {\n             if let Some(parent) = self.tcx.hir().find_by_hir_id(\n                 self.tcx.hir().get_parent_item(hir_lifetime.hir_id))\n             {\n@@ -1569,7 +1569,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 Some(LifetimeUseSet::One(lifetime)) => {\n                     let hir_id = self.tcx.hir().as_local_hir_id(def_id).unwrap();\n                     debug!(\"hir id first={:?}\", hir_id);\n-                    if let Some((id, span, name)) = match self.tcx.hir().get_by_hir_id(hir_id) {\n+                    if let Some((id, span, name)) = match self.tcx.hir().get(hir_id) {\n                         Node::Lifetime(hir_lifetime) => Some((\n                             hir_lifetime.hir_id,\n                             hir_lifetime.span,\n@@ -1620,7 +1620,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n                 None => {\n                     let hir_id = self.tcx.hir().as_local_hir_id(def_id).unwrap();\n-                    if let Some((id, span, name)) = match self.tcx.hir().get_by_hir_id(hir_id) {\n+                    if let Some((id, span, name)) = match self.tcx.hir().get(hir_id) {\n                         Node::Lifetime(hir_lifetime) => Some((\n                             hir_lifetime.hir_id,\n                             hir_lifetime.span,\n@@ -1823,7 +1823,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 // Do not free early-bound regions, only late-bound ones.\n             } else if let Some(body_id) = outermost_body {\n                 let fn_id = self.tcx.hir().body_owner(body_id);\n-                match self.tcx.hir().get_by_hir_id(fn_id) {\n+                match self.tcx.hir().get(fn_id) {\n                     Node::Item(&hir::Item {\n                         node: hir::ItemKind::Fn(..),\n                         ..\n@@ -2052,7 +2052,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let mut assoc_item_kind = None;\n         let mut impl_self = None;\n         let parent = self.tcx.hir().get_parent_node_by_hir_id(output.hir_id);\n-        let body = match self.tcx.hir().get_by_hir_id(parent) {\n+        let body = match self.tcx.hir().get(parent) {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item {\n                 node: hir::ItemKind::Fn(.., body),"}, {"sha": "38df4060652b7c6b799bfaa4ed08ee1f06f64b2d", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -580,7 +580,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             let mut diag = self.struct_span_lint_hir(lint, id, span, &msg);\n             if let Some(suggestion) = suggestion {\n-                if let hir::Node::Expr(_) = self.hir().get_by_hir_id(id) {\n+                if let hir::Node::Expr(_) = self.hir().get(id) {\n                     diag.span_suggestion(\n                         span,\n                         \"replace the use of the deprecated item\","}, {"sha": "80d97b7bc774f0afa2e83603f4caf59149d03665", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -73,7 +73,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         let hir_id = tcx.hir().as_local_hir_id(def_id)\n                               .expect(\"Non-local call to local provider is_const_fn\");\n \n-        let node = tcx.hir().get_by_hir_id(hir_id);\n+        let node = tcx.hir().get(hir_id);\n         if let Some(fn_like) = FnLikeNode::from_node(node) {\n             fn_like.constness() == hir::Constness::Const\n         } else if let hir::Node::Ctor(_) = node {"}, {"sha": "f0452befed8e280c55b0edfccd11926818e7f489", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -1610,7 +1610,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Option<Ty<'tcx>> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return None\n         let hir_id = self.hir().as_local_hir_id(scope_def_id).unwrap();\n-        match self.hir().get_by_hir_id(hir_id) {\n+        match self.hir().get(hir_id) {\n             Node::Item(item) => {\n                 match item.node {\n                     ItemKind::Fn(..) => { /* type_of_def_id() will work */ }"}, {"sha": "a3cb9d17cd20d29a21bb634a180fee97080e8ba5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -2791,7 +2791,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn opt_associated_item(self, def_id: DefId) -> Option<AssocItem> {\n         let is_associated_item = if let Some(hir_id) = self.hir().as_local_hir_id(def_id) {\n-            match self.hir().get_by_hir_id(hir_id) {\n+            match self.hir().get(hir_id) {\n                 Node::TraitItem(_) | Node::ImplItem(_) => true,\n                 _ => false,\n             }\n@@ -3213,7 +3213,7 @@ fn trait_of_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId> {\n /// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition.\n pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n-        if let Node::Item(item) = tcx.hir().get_by_hir_id(hir_id) {\n+        if let Node::Item(item) = tcx.hir().get(hir_id) {\n             if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n                 return exist_ty.impl_trait_fn;\n             }"}, {"sha": "714b7c27200e3ebe0215dbd1c12522930079fff7", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -191,7 +191,7 @@ pub fn check_loans<'a, 'tcx>(\n     let def_id = bccx.tcx.hir().body_owner_def_id(body.id());\n \n     let hir_id = bccx.tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let movable_generator = !match bccx.tcx.hir().get_by_hir_id(hir_id) {\n+    let movable_generator = !match bccx.tcx.hir().get(hir_id) {\n         Node::Expr(&hir::Expr {\n             node: hir::ExprKind::Closure(.., Some(hir::GeneratorMovability::Static)),\n             .."}, {"sha": "fa286632dac8480a8f3a6f6410a15f379e3da5f9", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -49,7 +49,7 @@ fn get_pattern_source<'tcx>(tcx: TyCtxt<'tcx>, pat: &Pat) -> PatternSource<'tcx>\n \n     let parent = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n \n-    match tcx.hir().get_by_hir_id(parent) {\n+    match tcx.hir().get(parent) {\n         Node::Expr(ref e) => {\n             // the enclosing expression must be a `match` or something else\n             assert!(match e.node {"}, {"sha": "87c0b8563cadb45e568d67bb7b70528b36f622f8", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -80,7 +80,7 @@ fn borrowck<'tcx>(tcx: TyCtxt<'tcx>, owner_def_id: DefId) -> &'tcx BorrowCheckRe\n \n     let owner_id = tcx.hir().as_local_hir_id(owner_def_id).unwrap();\n \n-    match tcx.hir().get_by_hir_id(owner_id) {\n+    match tcx.hir().get(owner_id) {\n         Node::Ctor(..) => {\n             // We get invoked with anything that has MIR, but some of\n             // those things (notably the synthesized constructors from\n@@ -390,7 +390,7 @@ pub enum LoanPathElem<'tcx> {\n \n fn closure_to_block(closure_id: LocalDefId, tcx: TyCtxt<'_>) -> HirId {\n     let closure_id = tcx.hir().local_def_id_to_hir_id(closure_id);\n-    match tcx.hir().get_by_hir_id(closure_id) {\n+    match tcx.hir().get(closure_id) {\n         Node::Expr(expr) => match expr.node {\n             hir::ExprKind::Closure(.., body_id, _, _) => {\n                 body_id.hir_id\n@@ -896,7 +896,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 // to implement two traits for \"one operator\" is not very intuitive for\n                 // many programmers.\n                 if err.cmt.note == mc::NoteIndex {\n-                    let node = self.tcx.hir().get_by_hir_id(err.cmt.hir_id);\n+                    let node = self.tcx.hir().get(err.cmt.hir_id);\n \n                     // This pattern probably always matches.\n                     if let Node::Expr(\n@@ -1172,7 +1172,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n     }\n \n     fn local_binding_mode(&self, hir_id: hir::HirId) -> ty::BindingMode {\n-        let pat = match self.tcx.hir().get_by_hir_id(hir_id) {\n+        let pat = match self.tcx.hir().get(hir_id) {\n             Node::Binding(pat) => pat,\n             node => bug!(\"bad node for local: {:?}\", node)\n         };\n@@ -1190,7 +1190,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n \n     fn local_ty(&self, hir_id: hir::HirId) -> (Option<&hir::Ty>, bool) {\n         let parent = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n-        let parent_node = self.tcx.hir().get_by_hir_id(parent);\n+        let parent_node = self.tcx.hir().get(parent);\n \n         // The parent node is like a fn\n         if let Some(fn_like) = FnLikeNode::from_node(parent_node) {\n@@ -1255,7 +1255,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                     None => return\n                 };\n \n-                if let Node::Field(ref field) = self.tcx.hir().get_by_hir_id(hir_id) {\n+                if let Node::Field(ref field) = self.tcx.hir().get(hir_id) {\n                     if let Some(msg) = self.suggest_mut_for_immutable(&field.ty, false) {\n                         db.span_label(field.ty.span, msg);\n                     }"}, {"sha": "ef8ca6f7a06cf277f379c493e97c763fb7568075", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -208,7 +208,7 @@ impl CodegenCx<'ll, 'tcx> {\n         let g = if let Some(id) = self.tcx.hir().as_local_hir_id(def_id) {\n \n             let llty = self.layout_of(ty).llvm_type(self);\n-            let (g, attrs) = match self.tcx.hir().get_by_hir_id(id) {\n+            let (g, attrs) = match self.tcx.hir().get(id) {\n                 Node::Item(&hir::Item {\n                     ref attrs, span, node: hir::ItemKind::Static(..), ..\n                 }) => {"}, {"sha": "b9ee82f108ae34a50dcacb12918609efcc359e0c", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -82,7 +82,7 @@ fn reachable_non_generics_provider<'tcx>(\n             //\n             // As a result, if this id is an FFI item (foreign item) then we only\n             // let it through if it's included statically.\n-            match tcx.hir().get_by_hir_id(hir_id) {\n+            match tcx.hir().get(hir_id) {\n                 Node::ForeignItem(..) => {\n                     let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n                     if tcx.is_statically_included_foreign_item(def_id) {"}, {"sha": "7ccd024769f757179a4af9e1b4cf5e8d2c14067f", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -135,7 +135,7 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n \n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n     let is_foreign = if let Some(id) = hir_id {\n-        match tcx.hir().get_by_hir_id(id) {\n+        match tcx.hir().get(id) {\n             Node::ForeignItem(_) => true,\n             _ => false,\n         }"}, {"sha": "030166182490b6e9b180428f207eb4d63aee58e6", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -627,7 +627,7 @@ fn print_flowgraph<'tcx, W: Write>(\n             // Find the function this expression is from.\n             let mut hir_id = expr.hir_id;\n             loop {\n-                let node = tcx.hir().get_by_hir_id(hir_id);\n+                let node = tcx.hir().get(hir_id);\n                 if let Some(n) = hir::map::blocks::FnLikeNode::from_node(node) {\n                     break n.body();\n                 }\n@@ -831,7 +831,7 @@ pub fn print_after_hir_lowering<'tcx>(\n                                                                          annotation.pp_ann());\n                     for node_id in uii.all_matching_node_ids(hir_map) {\n                         let hir_id = tcx.hir().node_to_hir_id(node_id);\n-                        let node = hir_map.get_by_hir_id(hir_id);\n+                        let node = hir_map.get(hir_id);\n                         pp_state.print_node(node)?;\n                         pp_state.s.space()?;\n                         let path = annotation.node_path(node_id)\n@@ -849,7 +849,7 @@ pub fn print_after_hir_lowering<'tcx>(\n                     debug!(\"pretty printing source code {:?}\", s);\n                     for node_id in uii.all_matching_node_ids(tcx.hir()) {\n                         let hir_id = tcx.hir().node_to_hir_id(node_id);\n-                        let node = tcx.hir().get_by_hir_id(hir_id);\n+                        let node = tcx.hir().get(hir_id);\n                         write!(out, \"{:#?}\", node)?;\n                     }\n                     Ok(())"}, {"sha": "5296ed0ffd0b818bfa46b554c729f558f4407e78", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -322,7 +322,7 @@ impl DirtyCleanVisitor<'tcx> {\n     /// Return all DepNode labels that should be asserted for this item.\n     /// index=0 is the \"name\" used for error messages\n     fn auto_labels(&mut self, item_id: hir::HirId, attr: &Attribute) -> (&'static str, Labels) {\n-        let node = self.tcx.hir().get_by_hir_id(item_id);\n+        let node = self.tcx.hir().get(item_id);\n         let (name, labels) = match node {\n             HirNode::Item(item) => {\n                 match item.node {"}, {"sha": "cd4eecf26387fbb7108c8ec76a7fcc280af6f41a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -276,7 +276,7 @@ fn lint_int_literal<'a, 'tcx>(\n         }\n \n         let par_id = cx.tcx.hir().get_parent_node_by_hir_id(e.hir_id);\n-        if let Node::Expr(par_e) = cx.tcx.hir().get_by_hir_id(par_id) {\n+        if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.node {\n                 if is_range_literal(cx.sess(), par_e)\n                     && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t)\n@@ -315,7 +315,7 @@ fn lint_uint_literal<'a, 'tcx>(\n     };\n     if lit_val < min || lit_val > max {\n         let parent_id = cx.tcx.hir().get_parent_node_by_hir_id(e.hir_id);\n-        if let Node::Expr(par_e) = cx.tcx.hir().get_by_hir_id(parent_id) {\n+        if let Node::Expr(par_e) = cx.tcx.hir().get(parent_id) {\n             match par_e.node {\n                 hir::ExprKind::Cast(..) => {\n                     if let ty::Char = cx.tables.expr_ty(par_e).sty {"}, {"sha": "919ed5ccaba1e9170e85bc91b17d83b8fff51cd7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -230,7 +230,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n     ));\n \n-    let movable_generator = match tcx.hir().get_by_hir_id(id) {\n+    let movable_generator = match tcx.hir().get(id) {\n         Node::Expr(&hir::Expr {\n             node: hir::ExprKind::Closure(.., Some(hir::GeneratorMovability::Static)),\n             .."}, {"sha": "3f5b2f4bce78b7973431515aeab11d908e83eb93", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -698,7 +698,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).expect(\"non-local mir\");\n \n-        let (return_span, mir_description) = match tcx.hir().get_by_hir_id(mir_hir_id) {\n+        let (return_span, mir_description) = match tcx.hir().get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n                 node: hir::ExprKind::Closure(_, return_ty, _, span, gen_move),\n                 ..\n@@ -761,7 +761,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).expect(\"non-local mir\");\n \n-        let yield_span = match tcx.hir().get_by_hir_id(mir_hir_id) {\n+        let yield_span = match tcx.hir().get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n                 node: hir::ExprKind::Closure(_, _, _, span, _),\n                 .."}, {"sha": "66064221b391c4b9b162359ec71e8d9007f39383", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -26,7 +26,7 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n-    let (body_id, return_ty_span) = match tcx.hir().get_by_hir_id(id) {\n+    let (body_id, return_ty_span) = match tcx.hir().get(id) {\n         Node::Expr(hir::Expr { node: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n         | Node::Item(hir::Item { node: hir::ItemKind::Fn(decl, _, _, body_id), .. })\n         | Node::ImplItem("}, {"sha": "a21d900cf5e5e2344e21bdfd95b213a4b2957adb", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n \n     pub fn pattern_from_hir(&mut self, p: &hir::Pat) -> Pattern<'tcx> {\n         let tcx = self.tcx.global_tcx();\n-        let p = match tcx.hir().get_by_hir_id(p.hir_id) {\n+        let p = match tcx.hir().get(p.hir_id) {\n             Node::Pat(p) | Node::Binding(p) => p,\n             node => bug!(\"pattern became {:?}\", node)\n         };"}, {"sha": "e42c667fec9ef5241526c946cef975654e99b753", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -193,7 +193,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                         // Sometimes the index is beyond the number of upvars (seen\n                         // for a generator).\n                         if let Some((&var_hir_id, _)) = upvars.get_index(field) {\n-                            let node = self.ecx.tcx.hir().get_by_hir_id(var_hir_id);\n+                            let node = self.ecx.tcx.hir().get(var_hir_id);\n                             if let hir::Node::Binding(pat) = node {\n                                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                                     name = Some(ident.name);"}, {"sha": "8c815a51b5d65d919eddd59d4f8febffe512a370", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::subst::InternalSubsts;\n pub fn check(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n-    if let Some(fn_like_node) = FnLikeNode::from_node(tcx.hir().get_by_hir_id(hir_id)) {\n+    if let Some(fn_like_node) = FnLikeNode::from_node(tcx.hir().get(hir_id)) {\n         check_fn_for_unconditional_recursion(tcx, fn_like_node.kind(), body, def_id);\n     }\n }"}, {"sha": "9092cf2c457963f704ffa97b340ffe494e6c9640", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -41,7 +41,7 @@ impl MirPass for ConstProp {\n         let hir_id = tcx.hir().as_local_hir_id(source.def_id())\n                               .expect(\"Non-local call to local provider is_const_fn\");\n \n-        let is_fn_like = FnLikeNode::from_node(tcx.hir().get_by_hir_id(hir_id)).is_some();\n+        let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n         let is_assoc_const = match tcx.def_kind(source.def_id()) {\n             Some(DefKind::AssocConst) => true,\n             _ => false,"}, {"sha": "0fdc9ac8903500e111a7e7e622c90a52257dc1ad", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -229,14 +229,14 @@ fn def_id_visibility<'tcx>(\n ) -> (ty::Visibility, Span, &'static str) {\n     match tcx.hir().as_local_hir_id(def_id) {\n         Some(hir_id) => {\n-            let vis = match tcx.hir().get_by_hir_id(hir_id) {\n+            let vis = match tcx.hir().get(hir_id) {\n                 Node::Item(item) => &item.vis,\n                 Node::ForeignItem(foreign_item) => &foreign_item.vis,\n                 Node::TraitItem(..) | Node::Variant(..) => {\n                     return def_id_visibility(tcx, tcx.hir().get_parent_did(hir_id));\n                 }\n                 Node::ImplItem(impl_item) => {\n-                    match tcx.hir().get_by_hir_id(tcx.hir().get_parent_item(hir_id)) {\n+                    match tcx.hir().get(tcx.hir().get_parent_item(hir_id)) {\n                         Node::Item(item) => match &item.node {\n                             hir::ItemKind::Impl(.., None, _, _) => &impl_item.vis,\n                             hir::ItemKind::Impl(.., Some(trait_ref), _, _)\n@@ -248,7 +248,7 @@ fn def_id_visibility<'tcx>(\n                 }\n                 Node::Ctor(vdata) => {\n                     let parent_hir_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n-                    match tcx.hir().get_by_hir_id(parent_hir_id) {\n+                    match tcx.hir().get(parent_hir_id) {\n                         Node::Variant(..) => {\n                             let parent_did = tcx.hir().local_def_id_from_hir_id(parent_hir_id);\n                             let (mut ctor_vis, mut span, mut descr) = def_id_visibility(\n@@ -274,7 +274,7 @@ fn def_id_visibility<'tcx>(\n                             return (ctor_vis, span, descr);\n                         }\n                         Node::Item(..) => {\n-                            let item = match tcx.hir().get_by_hir_id(parent_hir_id) {\n+                            let item = match tcx.hir().get(parent_hir_id) {\n                                 Node::Item(item) => item,\n                                 node => bug!(\"unexpected node kind: {:?}\", node),\n                             };"}, {"sha": "27e312f65ce24d02255ab9d77680893703ba7868", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -607,7 +607,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_path_res(&self, hir_id: hir::HirId) -> Res {\n-        match self.tcx.hir().get_by_hir_id(hir_id) {\n+        match self.tcx.hir().get(hir_id) {\n             Node::TraitRef(tr) => tr.path.res,\n \n             Node::Item(&hir::Item {"}, {"sha": "017368558314824c1dfa9c8bdf227680b58135fa", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -185,7 +185,7 @@ crate fn environment<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Environment<'tcx\n         .map(Clause::ForAll);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let node = tcx.hir().get_by_hir_id(hir_id);\n+    let node = tcx.hir().get(hir_id);\n \n     enum NodeKind {\n         TraitImpl,"}, {"sha": "293b68c8711317736ca1c1ba40929dbf067dcfce", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         if let PatKind::Binding(..) = inner.node {\n             let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n-            let parent = tcx.hir().get_by_hir_id(parent_id);\n+            let parent = tcx.hir().get(parent_id);\n             debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n             match parent {\n                 hir::Node::Item(hir::Item { node: hir::ItemKind::Fn(..), .. }) |\n@@ -812,10 +812,10 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         let match_id = hir.get_parent_node_by_hir_id(arm_id);\n         let containing_id = hir.get_parent_node_by_hir_id(match_id);\n \n-        let node = hir.get_by_hir_id(containing_id);\n+        let node = hir.get(containing_id);\n         if let Block(block) = node {\n             // check that the body's parent is an fn\n-            let parent = hir.get_by_hir_id(\n+            let parent = hir.get(\n                 hir.get_parent_node_by_hir_id(\n                     hir.get_parent_node_by_hir_id(block.hir_id),\n                 ),"}, {"sha": "87807ad91a27db7a14e76ff67c7d39499f61a845", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -245,7 +245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_span: Span,\n     ) {\n         let hir_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n-        let parent_node = self.tcx.hir().get_by_hir_id(hir_id);\n+        let parent_node = self.tcx.hir().get(hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr { node: hir::ExprKind::Closure(_, _, _, sp, ..), .. }),\n             hir::ExprKind::Block(..),"}, {"sha": "71a0ca090b0d8e58575268f40eb79de3d8c0fc5e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -1291,7 +1291,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 cause.span,\n                 blk_id,\n             );\n-            let parent = fcx.tcx.hir().get_by_hir_id(parent_id);\n+            let parent = fcx.tcx.hir().get(parent_id);\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)"}, {"sha": "8ad67c2adc035e1526311ad86f284a4bb1e6f7bf", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         let snippet = tcx.sess.source_map().span_to_snippet(span);\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n-                                        let parent_node = self.tcx.hir().get_by_hir_id(\n+                                        let parent_node = self.tcx.hir().get(\n                                             self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n                                         );\n                                         let msg = format!("}, {"sha": "bddbebb4e156643859a0d3a1f37239eb9246688a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -759,7 +759,7 @@ fn primary_body_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     id: hir::HirId,\n ) -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)> {\n-    match tcx.hir().get_by_hir_id(id) {\n+    match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n                 hir::ItemKind::Const(_, body) |\n@@ -1213,7 +1213,7 @@ fn check_fn<'a, 'tcx>(\n                         );\n                     }\n \n-                    if let Node::Item(item) = fcx.tcx.hir().get_by_hir_id(fn_id) {\n+                    if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n                         if let ItemKind::Fn(_, _, ref generics, _) = item.node {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n@@ -1261,7 +1261,7 @@ fn check_fn<'a, 'tcx>(\n                         );\n                     }\n \n-                    if let Node::Item(item) = fcx.tcx.hir().get_by_hir_id(fn_id) {\n+                    if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n                         if let ItemKind::Fn(_, _, ref generics, _) = item.node {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n@@ -3676,7 +3676,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn parent_item_span(&self, id: hir::HirId) -> Option<Span> {\n-        let node = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_item(id));\n+        let node = self.tcx.hir().get(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item {\n                 node: hir::ItemKind::Fn(_, _, _, body_id), ..\n@@ -3696,7 +3696,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n     fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl, ast::Ident)> {\n-        let parent = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_item(blk_id));\n+        let parent = self.tcx.hir().get(self.tcx.hir().get_parent_item(blk_id));\n         self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n     }\n \n@@ -3731,7 +3731,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n         // `while` before reaching it, as block tail returns are not available in them.\n         self.tcx.hir().get_return_block(blk_id).and_then(|blk_id| {\n-            let parent = self.tcx.hir().get_by_hir_id(blk_id);\n+            let parent = self.tcx.hir().get(blk_id);\n             self.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n         })\n     }\n@@ -4258,7 +4258,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If our calling expression is indeed the function itself, we're good!\n         // If not, generate an error that this can only be called directly.\n-        if let Node::Expr(expr) = self.tcx.hir().get_by_hir_id(\n+        if let Node::Expr(expr) = self.tcx.hir().get(\n             self.tcx.hir().get_parent_node_by_hir_id(hir_id))\n         {\n             if let ExprKind::Call(ref callee, ..) = expr.node {\n@@ -4334,7 +4334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut contained_in_place = false;\n \n         while let hir::Node::Expr(parent_expr) =\n-            self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_node_by_hir_id(expr_id))\n+            self.tcx.hir().get(self.tcx.hir().get_parent_node_by_hir_id(expr_id))\n         {\n             match &parent_expr.node {\n                 hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {"}, {"sha": "301168aefd203640200a00e122d908971d04300e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -284,7 +284,7 @@ fn type_param_predicates<'tcx>(\n     let mut extend = None;\n \n     let item_hir_id = tcx.hir().as_local_hir_id(item_def_id).unwrap();\n-    let ast_generics = match tcx.hir().get_by_hir_id(item_hir_id) {\n+    let ast_generics = match tcx.hir().get(item_hir_id) {\n         Node::TraitItem(item) => &item.generics,\n \n         Node::ImplItem(item) => &item.generics,\n@@ -623,7 +623,7 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let item = match tcx.hir().get_by_hir_id(hir_id) {\n+    let item = match tcx.hir().get(hir_id) {\n         Node::Item(item) => item,\n         _ => bug!(),\n     };\n@@ -693,7 +693,7 @@ fn super_predicates_of<'tcx>(\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n-    let item = match tcx.hir().get_by_hir_id(trait_hir_id) {\n+    let item = match tcx.hir().get(trait_hir_id) {\n         Node::Item(item) => item,\n         _ => bug!(\"trait_node_id {} is not an item\", trait_hir_id),\n     };\n@@ -884,7 +884,7 @@ fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n-    let node = tcx.hir().get_by_hir_id(hir_id);\n+    let node = tcx.hir().get(hir_id);\n     let parent_def_id = match node {\n         Node::ImplItem(_) | Node::TraitItem(_) | Node::Variant(_) |\n         Node::Ctor(..) | Node::Field(_) => {\n@@ -1154,7 +1154,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n \n     let icx = ItemCtxt::new(tcx, def_id);\n \n-    Some(match tcx.hir().get_by_hir_id(hir_id) {\n+    Some(match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.node {\n             TraitItemKind::Method(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -1298,7 +1298,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n         }\n \n         Node::AnonConst(_) => {\n-            let parent_node = tcx.hir().get_by_hir_id(tcx.hir().get_parent_node_by_hir_id(hir_id));\n+            let parent_node = tcx.hir().get(tcx.hir().get_parent_node_by_hir_id(hir_id));\n             match parent_node {\n                 Node::Ty(&hir::Ty {\n                     node: hir::TyKind::Array(_, ref constant),\n@@ -1660,8 +1660,8 @@ fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'t\n     if scope == hir::CRATE_HIR_ID {\n         intravisit::walk_crate(&mut locator, tcx.hir().krate());\n     } else {\n-        debug!(\"find_existential_constraints: scope={:?}\", tcx.hir().get_by_hir_id(scope));\n-        match tcx.hir().get_by_hir_id(scope) {\n+        debug!(\"find_existential_constraints: scope={:?}\", tcx.hir().get(scope));\n+        match tcx.hir().get(scope) {\n             Node::Item(ref it) => intravisit::walk_item(&mut locator, it),\n             Node::ImplItem(ref it) => intravisit::walk_impl_item(&mut locator, it),\n             Node::TraitItem(ref it) => intravisit::walk_trait_item(&mut locator, it),\n@@ -1690,7 +1690,7 @@ fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n \n     let icx = ItemCtxt::new(tcx, def_id);\n \n-    match tcx.hir().get_by_hir_id(hir_id) {\n+    match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n             node: TraitItemKind::Method(sig, _),\n             ..\n@@ -1903,7 +1903,7 @@ fn explicit_predicates_of<'tcx>(\n         Some(hir_id) => hir_id,\n         None => return tcx.predicates_of(def_id),\n     };\n-    let node = tcx.hir().get_by_hir_id(hir_id);\n+    let node = tcx.hir().get(hir_id);\n \n     let mut is_trait = None;\n     let mut is_default_impl_trait = None;"}, {"sha": "f2661b46b8b0c56a291cbcf994a63bf034db3cae", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -61,7 +61,7 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n             .hir()\n             .as_local_hir_id(item_did)\n             .expect(\"expected local def-id\");\n-        let item = match self.tcx.hir().get_by_hir_id(hir_id) {\n+        let item = match self.tcx.hir().get(hir_id) {\n             Node::Item(item) => item,\n             _ => bug!(),\n         };"}, {"sha": "63e41e01fbff5ffb512558aa931cbd9dfafeefd9", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -29,7 +29,7 @@ fn inferred_outlives_of<'tcx>(\n         .as_local_hir_id(item_def_id)\n         .expect(\"expected local def-id\");\n \n-    match tcx.hir().get_by_hir_id(id) {\n+    match tcx.hir().get(id) {\n         Node::Item(item) => match item.node {\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {\n                 let crate_map = tcx.inferred_outlives_crate(LOCAL_CRATE);"}, {"sha": "1a8871a3da9dab3230dda20d4cd554c5c9919301", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -48,7 +48,7 @@ fn variances_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> &'tcx [ty::Varia\n         // Variance not relevant.\n         span_bug!(tcx.hir().span(id), \"asked to compute variance for wrong kind of item\")\n     };\n-    match tcx.hir().get_by_hir_id(id) {\n+    match tcx.hir().get(id) {\n         Node::Item(item) => match item.node {\n             hir::ItemKind::Enum(..) |\n             hir::ItemKind::Struct(..) |"}, {"sha": "781e62c3b274cfcfc15349bd19fb6d2df76bf119", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -337,7 +337,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n         if !self.view_item_stack.insert(res_hir_id) { return false }\n \n-        let ret = match tcx.hir().get_by_hir_id(res_hir_id) {\n+        let ret = match tcx.hir().get(res_hir_id) {\n             Node::Item(&hir::Item { node: hir::ItemKind::Mod(ref m), .. }) if glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n                 for i in &m.item_ids {"}, {"sha": "64b795af9267fc75a43bdd221cf4b93b25f18969", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cb9ab5261813309b41e21cacfc44d2b61fe396/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=73cb9ab5261813309b41e21cacfc44d2b61fe396", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n                 span: source_map::Span,\n                 id: hir::HirId) {\n \n-        let item = match cx.tcx.hir().get_by_hir_id(id) {\n+        let item = match cx.tcx.hir().get(id) {\n             Node::Item(item) => item,\n             _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n         };"}]}