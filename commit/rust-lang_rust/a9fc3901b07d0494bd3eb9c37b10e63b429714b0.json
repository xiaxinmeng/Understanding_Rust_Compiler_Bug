{"sha": "a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZmMzOTAxYjA3ZDA0OTRiZDNlYjljMzdiMTBlNjNiNDI5NzE0YjA=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-01-21T08:44:41Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-14T04:44:51Z"}, "message": "stabilise feature(never_type)\n\nReplace feature(never_type) with feature(exhaustive_patterns).\nfeature(exhaustive_patterns) only covers the pattern-exhaustives checks\nthat used to be covered by feature(never_type)", "tree": {"sha": "ba7a2a9824455ec8cecc9d83270559c428400ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7a2a9824455ec8cecc9d83270559c428400ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "html_url": "https://github.com/rust-lang/rust/commit/a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "html_url": "https://github.com/rust-lang/rust/commit/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6"}], "stats": {"total": 251, "additions": 89, "deletions": 162}, "files": [{"sha": "fdb9946469b4edc95c75b0f62977055b88080bc9", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -882,24 +882,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.24.0\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.24.0\")]\n     impl Eq for ! {}\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.24.0\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.24.0\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "3706da7c52183b2f7a195912784a91639f2443ee", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1579,14 +1579,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.24.0\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.24.0\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self"}, {"sha": "a947c9f0b7c1315fb80d102d79317603fa6dc33f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -85,7 +85,7 @@\n #![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n@@ -103,6 +103,7 @@\n #![feature(unwind_attributes)]\n \n #![cfg_attr(stage0, allow(unused_attributes))]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "51882385b2ef212cb5d920ffe78b29c3dc925ffb", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -60,7 +60,7 @@\n #![feature(match_default_bindings)]\n #![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(non_exhaustive)]\n #![feature(nonzero)]\n #![feature(proc_macro_internals)]"}, {"sha": "cbc1d7c38d61d32dc54b95094d26197cc55a48c9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -32,6 +32,7 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use]\n extern crate syntax;"}, {"sha": "4e95ee6444dcf956754807bb61380204c2bf9c44", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n                 let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n                     i == variant_index || {\n-                        self.hir.tcx().features().never_type &&\n+                        self.hir.tcx().features().exhaustive_patterns &&\n                         self.hir.tcx().is_variant_uninhabited_from_all_modules(v, substs)\n                     }\n                 });"}, {"sha": "6f8b1f8e799403bd2d5497425a05f98f5c795284", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     }\n \n     fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n-        if self.tcx.features().never_type {\n+        if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_ty_uninhabited_from(self.module, ty)\n         } else {\n             false\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n                               substs: &'tcx ty::subst::Substs<'tcx>)\n                               -> bool\n     {\n-        if self.tcx.features().never_type {\n+        if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_enum_variant_uninhabited_from(self.module, variant, substs)\n         } else {\n             false\n@@ -694,7 +694,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // test for details.\n         //\n         // FIXME: currently the only way I know of something can\n-        // be a privately-empty enum is when the never_type\n+        // be a privately-empty enum is when the exhaustive_patterns\n         // feature flag is not present, so this is only\n         // needed for that case.\n "}, {"sha": "d924baaf0052139421800caaff7efe1dcbb46722", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             let pat_ty = self.tables.node_id_to_type(scrut.hir_id);\n             let module = self.tcx.hir.get_module_parent(scrut.id);\n             if inlined_arms.is_empty() {\n-                let scrutinee_is_uninhabited = if self.tcx.features().never_type {\n+                let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n                     self.conservative_is_uninhabited(pat_ty)"}, {"sha": "5510e219780608402914881d51d2e47f271ba619", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -32,13 +32,14 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(inclusive_range)]\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(placement_in_syntax)]\n #![feature(collection_placement)]\n #![feature(nonzero)]\n #![feature(underscore_lifetimes)]\n+#![cfg_attr(stage0, feature(never_type))]\n \n extern crate arena;\n #[macro_use]"}, {"sha": "a97c6e84eab5baffc0d4562b445b02e8f10305ab", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -80,13 +80,14 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n #![feature(match_default_bindings)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(option_filter)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(i128_type)]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "347b82244109d14041abdb8019f3d2092bf604e3", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -234,7 +234,7 @@ impl<'a> From<Cow<'a, str>> for Box<Error> {\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.24.0\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }"}, {"sha": "eea0e6b67527940c303a7511f8fb6da5c8ca2891", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -282,7 +282,7 @@\n #![feature(macro_reexport)]\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]\n@@ -324,6 +324,7 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #![default_lib_allocator]\n "}, {"sha": "e6e6be2e45379a9ab39b9188fac28ef114433d3e", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -79,7 +79,6 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n-/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -131,13 +130,15 @@ mod prim_bool { }\n /// [`Result<String, !>`] which we can unpack like this:\n ///\n /// ```ignore (string-from-str-error-type-is-not-never-yet)\n+/// #[feature(exhaustive_patterns)]\n /// // NOTE: This does not work today!\n /// let Ok(s) = String::from_str(\"hello\");\n /// ```\n ///\n-/// Since the [`Err`] variant contains a `!`, it can never occur. So we can exhaustively match on\n-/// [`Result<T, !>`] by just taking the [`Ok`] variant. This illustrates another behaviour of `!` -\n-/// it can be used to \"delete\" certain enum variants from generic types like `Result`.\n+/// Since the [`Err`] variant contains a `!`, it can never occur. If the `exhaustive_patterns`\n+/// feature is present this means we can exhaustively match on [`Result<T, !>`] by just taking the\n+/// [`Ok`] variant. This illustrates another behaviour of `!` - it can be used to \"delete\" certain\n+/// enum variants from generic types like `Result`.\n ///\n /// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n /// [`Result<String, !>`]: result/enum.Result.html\n@@ -154,7 +155,6 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n-/// # #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n@@ -192,7 +192,6 @@ mod prim_bool { }\n /// [`Default`]: default/trait.Default.html\n /// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never { }\n \n #[doc(primitive = \"char\")]"}, {"sha": "91364fe6ed48eb2cb8638475473bc215c34cc2fc", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -286,8 +286,8 @@ declare_features! (\n     // Allows `impl Trait` in function arguments.\n     (active, universal_impl_trait, \"1.23.0\", Some(34511), None),\n \n-    // The `!` type\n-    (active, never_type, \"1.13.0\", Some(35121), None),\n+    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    (active, exhaustive_patterns, \"1.13.0\", None, None),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n     (active, attr_literals, \"1.13.0\", Some(34981), None),\n@@ -1566,10 +1566,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_abi(bare_fn_ty.abi, ty.span);\n             }\n-            ast::TyKind::Never => {\n-                gate_feature_post!(&self, never_type, ty.span,\n-                                   \"The `!` type is experimental\");\n-            },\n             ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::Dyn) => {\n                 gate_feature_post!(&self, dyn_trait, ty.span,\n                                    \"`dyn Trait` syntax is unstable\");"}, {"sha": "c2f157cd35cce82942e077ba8dbf7f63217322a8", "filename": "src/test/compile-fail/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can't pass other types for !\n \n-#![feature(never_type)]\n-\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "8b3a9ed092d9a5df855d79a0ab3015990ff5075d", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n #[deny(coerce_never)]"}, {"sha": "b365f142a9b779a79a122652593456d4a712539f", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n #![deny(coerce_never)]\n \n fn foo(x: usize, y: !, z: usize) { }"}, {"sha": "b9741e0add61ce17ea6325257bd474b37121a592", "filename": "src/test/compile-fail/inhabitedness-infinite-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:reached recursion limit\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n struct Foo<'a, T: 'a> {\n     ph: std::marker::PhantomData<T>,"}, {"sha": "5ef46bb27fd60a4a772978a3abeee3e9e85adc14", "filename": "src/test/compile-fail/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "e18c7d77ce366ce974dd48046a07e8ed458ac010", "filename": "src/test/compile-fail/match-privately-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n mod private {\n     pub struct Private {"}, {"sha": "4e987d1ddce577a9c7548a76d16cf5e72b6d3c7c", "filename": "src/test/compile-fail/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,7 +10,7 @@\n \n // Test that an assignment of type ! makes the rest of the block dead code.\n \n-#![feature(never_type, rustc_attrs)]\n+#![feature(rustc_attrs)]\n #![warn(unused)]\n \n #[rustc_error]"}, {"sha": "8c2de7d68d3de334dc849d08b1f0bdc07d0c955a", "filename": "src/test/compile-fail/never-assign-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,7 +10,6 @@\n \n // Test that we can't use another type in place of !\n \n-#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "fa936697072243a2b1092c1f39b39db99b92fff3", "filename": "src/test/compile-fail/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//#![feature(never_type)]\n-\n struct R<'a> {\n     r: &'a R<'a>,\n }"}, {"sha": "72b0afa6bd3eea8bc04ddc24b49bdaad4c406f79", "filename": "src/test/compile-fail/uninhabited-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n mod foo {\n     pub struct SecretlyEmpty {"}, {"sha": "9f943f08232d673470cde1b68e5bec664b202ae4", "filename": "src/test/compile-fail/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_patterns)]\n #![feature(slice_patterns)]\n #![feature(box_syntax)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n \n mod foo {"}, {"sha": "dca79bdfb87f755e5d8490b5a23baba83e50776a", "filename": "src/test/compile-fail/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "0caf7d51234918b7c25eb1b148448b1d4ddd2cb6", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type, rustc_attrs)]\n+#![feature(exhaustive_patterns, rustc_attrs)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]\n "}, {"sha": "7a4b5e59eeb75ddad5474202c4af1d1fee0b9fc5", "filename": "src/test/run-fail/adjust_never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fadjust_never.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a variable of type ! can coerce to another type.\n \n-#![feature(never_type)]\n-\n // error-pattern:explicit\n fn main() {\n     let x: ! = panic!();"}, {"sha": "56454586bb95773ef21bd88a848894c0d9812031", "filename": "src/test/run-fail/call-fn-never-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n \n // error-pattern:wowzers!\n \n-#![feature(never_type)]\n #![allow(unreachable_code)]\n \n fn foo(x: !) -> ! {"}, {"sha": "0155332c51d1b374676376aedf87b16de7b94b9c", "filename": "src/test/run-fail/cast-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcast-never.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can explicitly cast ! to another type\n \n-#![feature(never_type)]\n-\n // error-pattern:explicit\n fn main() {\n     let x: ! = panic!();"}, {"sha": "d9b8461a1d07c4b2239daf7607d88bf14245dd73", "filename": "src/test/run-fail/never-associated-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can use ! as an associated type.\n \n-#![feature(never_type)]\n-\n // error-pattern:kapow!\n \n trait Foo {"}, {"sha": "0fe10d43910bfbf961e2dd8db234279bc5d114e8", "filename": "src/test/run-fail/never-type-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,8 +12,6 @@\n \n // error-pattern:oh no!\n \n-#![feature(never_type)]\n-\n struct Wub;\n \n impl PartialEq<!> for Wub {"}, {"sha": "a96f98b9efda96bed1c5d770d9e0f8c04a091345", "filename": "src/test/run-pass/diverging-fallback-control-flow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -14,8 +14,6 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n-#![feature(never_type)]\n-\n trait BadDefault {\n     fn default() -> Self;\n }"}, {"sha": "87db440192984d3ea55709c771a8b0027c9eaf09", "filename": "src/test/run-pass/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]\n #![allow(unreachable_code)]"}, {"sha": "cf54e1c3bd598d6b4346c92dcc3a4c624b240412", "filename": "src/test/run-pass/impl-for-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n-#![feature(never_type)]\n-\n trait StringifyType {\n     fn stringify_type() -> &'static str;\n }"}, {"sha": "a5a0a5a57944782c423033944f566f426ee28166", "filename": "src/test/run-pass/issue-44402.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44402.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old\n // cache used to cause us to incorrectly decide"}, {"sha": "ffdd99ebf6e5cf6688fea86109dd2c5d280866a6", "filename": "src/test/run-pass/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-value.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-\n #[allow(unused)]\n fn never_returns() {\n     loop {"}, {"sha": "dda7a46f325850fb1e863f5b59e86cf609d14fc8", "filename": "src/test/run-pass/mir_calls_to_shims.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -11,7 +11,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n-#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "8aa2a13ed8c8d810b6a3cdb6ca405de69513cea7", "filename": "src/test/run-pass/never-result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Frun-pass%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-result.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "477dd1b38eb0d7c6e4ca29150935d32f44a4da77", "filename": "src/test/ui/feature-gate-exhaustive-patterns.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,18 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This issue tracks a regression (a new warning) without\n-// feature(never_type). When we make that the default, please\n-// remove this test.\n-\n-enum Foo { }\n-\n-fn make_foo() -> Option<Foo> { None }\n+fn foo() -> Result<u32, !> {\n+    Ok(123)\n+}\n \n-#[deny(warnings)]\n fn main() {\n-    match make_foo() {\n-        None => {},\n-        Some(_) => {}\n-    }\n+    let Ok(_x) = foo(); //~ ERROR refutable pattern in local binding\n }\n+", "previous_filename": "src/test/run-pass/issue-38972.rs"}, {"sha": "43a4adf93730d7c0403cd1a973a9daed544e13ba", "filename": "src/test/ui/feature-gate-exhaustive-patterns.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -0,0 +1,8 @@\n+error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:16:9\n+   |\n+16 |     let Ok(_x) = foo(); //~ ERROR refutable pattern in local binding\n+   |         ^^^^^^ pattern `Err(_)` not covered\n+\n+error: aborting due to previous error\n+"}, {"sha": "11b9f412957eb52c2ef5c5da3241c942a13733bd", "filename": "src/test/ui/feature-gate-never_type.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that ! errors when used in illegal positions with feature(never_type) disabled\n-\n-trait Foo {\n-    type Wub;\n-}\n-\n-type Ma = (u32, !, i32); //~ ERROR type is experimental\n-type Meeshka = Vec<!>; //~ ERROR type is experimental\n-type Mow = &fn(!) -> !; //~ ERROR type is experimental\n-type Skwoz = &mut !; //~ ERROR type is experimental\n-\n-impl Foo for Meeshka {\n-    type Wub = !; //~ ERROR type is experimental\n-}\n-\n-fn main() {\n-}\n-"}, {"sha": "7e8eff02c20a16ccbe86df2fc75bd2305e9d03df", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -Z print-type-sizes\n // must-compile-successfully\n \n-#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "3e39b75d8c0f33010564f2699e87a188c5bbbba1", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "f49a781ce336af5e5722d8aaaba4471a7b8f2c09", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,11 +1,11 @@\n error: unreachable expression\n-  --> $DIR/expr_add.rs:27:13\n+  --> $DIR/expr_add.rs:26:13\n    |\n LL |     let x = Foo + return; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/expr_add.rs:13:9\n+  --> $DIR/expr_add.rs:12:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "323a5752e220e772d769c5af143294f2038af7f3", "filename": "src/test/ui/reachable/expr_array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {\n@@ -21,7 +20,7 @@ fn a() {\n }\n \n fn b() {\n-    // the `array is unreachable:\n+    // the array is unreachable:\n     let x: [usize; 2] = [22, return]; //~ ERROR unreachable\n }\n "}, {"sha": "78ac76a6137f4dbc5c96f354754abab88caf5d67", "filename": "src/test/ui/reachable/expr_array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_array.rs:20:34\n+  --> $DIR/expr_array.rs:19:34\n    |\n LL |     let x: [usize; 2] = [return, 22]; //~ ERROR unreachable\n    |                                  ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_array.rs:25:25\n+  --> $DIR/expr_array.rs:24:25\n    |\n LL |     let x: [usize; 2] = [22, return]; //~ ERROR unreachable\n    |                         ^^^^^^^^^^^^"}, {"sha": "73083af34d97d3ddab8f162a42667273ab050a75", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo() {\n     // No error here."}, {"sha": "628bfbf62171683f60086ba667533283ba1eef80", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_assign.rs:20:5\n+  --> $DIR/expr_assign.rs:19:5\n    |\n LL |     x = return; //~ ERROR unreachable\n    |     ^^^^^^^^^^\n@@ -11,13 +11,13 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:30:14\n+  --> $DIR/expr_assign.rs:29:14\n    |\n LL |         *p = return; //~ ERROR unreachable\n    |              ^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:36:15\n+  --> $DIR/expr_assign.rs:35:15\n    |\n LL |     *{return; &mut i} = 22; //~ ERROR unreachable\n    |               ^^^^^^"}, {"sha": "93bce43f76d911f624e48b2d8a03e6f7dbf69698", "filename": "src/test/ui/reachable/expr_block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn a() {\n     // Here the tail expression is considered unreachable:"}, {"sha": "5f5696aadb37cd7b26419296ffa2ec4c13a9977e", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_block.rs:21:9\n+  --> $DIR/expr_block.rs:20:9\n    |\n LL |         22 //~ ERROR unreachable\n    |         ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable statement\n-  --> $DIR/expr_block.rs:36:9\n+  --> $DIR/expr_block.rs:35:9\n    |\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "2772dd429d184275d4b97c65892f4d4f4083ce56", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo(x: !, y: usize) { }\n "}, {"sha": "414d29ec2a73411c0a62c09b137160fd15d923ba", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_call.rs:23:17\n+  --> $DIR/expr_call.rs:22:17\n    |\n LL |     foo(return, 22); //~ ERROR unreachable\n    |                 ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_call.rs:28:5\n+  --> $DIR/expr_call.rs:27:5\n    |\n LL |     bar(return); //~ ERROR unreachable\n    |     ^^^^^^^^^^^"}, {"sha": "88846b638416a5a9da4ea22622003f4fb6365413", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "458334e2af9670e5e1399ecdb9be9e52d25b52b6", "filename": "src/test/ui/reachable/expr_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_cast.rs:20:13\n+  --> $DIR/expr_cast.rs:19:13\n    |\n LL |     let x = {return} as !; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^^"}, {"sha": "d2fb1044e48b12816880c30e9e3281b5dd7529b7", "filename": "src/test/ui/reachable/expr_if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo() {\n     if {return} {"}, {"sha": "6e8afd1c5be823a1249a8f62230995bca6eb9fe9", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable statement\n-  --> $DIR/expr_if.rs:38:5\n+  --> $DIR/expr_if.rs:37:5\n    |\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "533cdac0968b388450f7ee5c7e010b351846a550", "filename": "src/test/ui/reachable/expr_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn a() {\n     loop { return; }"}, {"sha": "a51ef293acf1575d5e7ff7d6050c68ed59852be1", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable statement\n-  --> $DIR/expr_loop.rs:19:5\n+  --> $DIR/expr_loop.rs:18:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,15 +12,15 @@ LL | #![deny(unreachable_code)]\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_loop.rs:31:5\n+  --> $DIR/expr_loop.rs:30:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_loop.rs:41:5\n+  --> $DIR/expr_loop.rs:40:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "193edd7743572924e9ad44bc2c20345a613a6571", "filename": "src/test/ui/reachable/expr_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn a() {\n     // The match is considered unreachable here, because the `return`"}, {"sha": "dfc1417f3d2946a7d45fc1d4ec4cc9c9f08c535c", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_match.rs:20:5\n+  --> $DIR/expr_match.rs:19:5\n    |\n LL |     match {return} { } //~ ERROR unreachable\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -11,15 +11,15 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable statement\n-  --> $DIR/expr_match.rs:25:5\n+  --> $DIR/expr_match.rs:24:5\n    |\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_match.rs:35:5\n+  --> $DIR/expr_match.rs:34:5\n    |\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7dabb307097622859232eef056fb7d510dcb61ce", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n struct Foo;\n "}, {"sha": "6d67bfcd54a7a313403723c78c11b7553a7ea3ce", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_method.rs:26:21\n+  --> $DIR/expr_method.rs:25:21\n    |\n LL |     Foo.foo(return, 22); //~ ERROR unreachable\n    |                     ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_method.rs:31:5\n+  --> $DIR/expr_method.rs:30:5\n    |\n LL |     Foo.bar(return); //~ ERROR unreachable\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "fd9fca413a7f2d1512ea2c8c839107064832eaa4", "filename": "src/test/ui/reachable/expr_repeat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "36393de90b7cdbfeda9cf7769cb8dd049121b574", "filename": "src/test/ui/reachable/expr_repeat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_repeat.rs:20:25\n+  --> $DIR/expr_repeat.rs:19:25\n    |\n LL |     let x: [usize; 2] = [return; 2]; //~ ERROR unreachable\n    |                         ^^^^^^^^^^^"}, {"sha": "9bbbe6f909986cf16c26a6b02074ee7abc3653fd", "filename": "src/test/ui/reachable/expr_return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "2dcc50944c5d71b95d2d602bfa6ce6c6a0d87095", "filename": "src/test/ui/reachable/expr_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_return.rs:21:22\n+  --> $DIR/expr_return.rs:20:22\n    |\n LL |     let x = {return {return {return;}}}; //~ ERROR unreachable\n    |                      ^^^^^^^^^^^^^^^^"}, {"sha": "66414f6084b818538760bd39f74f21199c878b85", "filename": "src/test/ui/reachable/expr_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n struct Foo {"}, {"sha": "3f0ecb204798b33c8268ce1794d2a6606e68aa10", "filename": "src/test/ui/reachable/expr_struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_struct.rs:25:13\n+  --> $DIR/expr_struct.rs:24:13\n    |\n LL |     let x = Foo { a: 22, b: 33, ..return }; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,19 +11,19 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_struct.rs:30:33\n+  --> $DIR/expr_struct.rs:29:33\n    |\n LL |     let x = Foo { a: return, b: 33, ..return }; //~ ERROR unreachable\n    |                                 ^^\n \n error: unreachable expression\n-  --> $DIR/expr_struct.rs:35:39\n+  --> $DIR/expr_struct.rs:34:39\n    |\n LL |     let x = Foo { a: 22, b: return, ..return }; //~ ERROR unreachable\n    |                                       ^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_struct.rs:40:13\n+  --> $DIR/expr_struct.rs:39:13\n    |\n LL |     let x = Foo { a: 22, b: return }; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e2c100902489179427713b8feda025d379e002b7", "filename": "src/test/ui/reachable/expr_tup.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "d372373ced0f2e46654f238dd78417835ca92bb8", "filename": "src/test/ui/reachable/expr_tup.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_tup.rs:20:38\n+  --> $DIR/expr_tup.rs:19:38\n    |\n LL |     let x: (usize, usize) = (return, 2); //~ ERROR unreachable\n    |                                      ^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_tup.rs:25:29\n+  --> $DIR/expr_tup.rs:24:29\n    |\n LL |     let x: (usize, usize) = (2, return); //~ ERROR unreachable\n    |                             ^^^^^^^^^^^"}, {"sha": "2381ea2ac7a1b0b727cb2f99e57251e8242e4f5d", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "9b165d6b3ee196c716dc7b5eff1aa121b6c30110", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_type.rs:20:13\n+  --> $DIR/expr_type.rs:19:13\n    |\n LL |     let x = {return}: !; //~ ERROR unreachable\n    |             ^^^^^^^^^^^"}, {"sha": "524784934c7e496367ba95d078c539c52e772a63", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -13,7 +13,6 @@\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n #![deny(coerce_never)]\n-#![feature(never_type)]\n \n fn foo() {\n     let x: ! = ! { return; 22 }; //~ ERROR unreachable"}, {"sha": "1239701cabd2b0d7acafc74288779819c15f4fbc", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_unary.rs:19:28\n+  --> $DIR/expr_unary.rs:18:28\n    |\n LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                            ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: cannot coerce `{integer}` to !\n-  --> $DIR/expr_unary.rs:19:28\n+  --> $DIR/expr_unary.rs:18:28\n    |\n LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                            ^^\n@@ -25,7 +25,7 @@ LL | #![deny(coerce_never)]\n    = note: for more information, see issue #46325 <https://github.com/rust-lang/rust/issues/46325>\n \n error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:19:16\n+  --> $DIR/expr_unary.rs:18:16\n    |\n LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                ^^^^^^^^^^^^^^^^"}, {"sha": "79fa69a9289bb7a6efc2bca711559cf10971f2f2", "filename": "src/test/ui/reachable/expr_while.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo() {\n     while {return} {"}, {"sha": "90c35bfaa7acd08be10682c372b0c7d81ab10843", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fc3901b07d0494bd3eb9c37b10e63b429714b0/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=a9fc3901b07d0494bd3eb9c37b10e63b429714b0", "patch": "@@ -1,5 +1,5 @@\n error: unreachable statement\n-  --> $DIR/expr_while.rs:19:9\n+  --> $DIR/expr_while.rs:18:9\n    |\n LL |         println!(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,15 +12,15 @@ LL | #![deny(unreachable_code)]\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_while.rs:33:9\n+  --> $DIR/expr_while.rs:32:9\n    |\n LL |         println!(\"I am dead.\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_while.rs:35:5\n+  --> $DIR/expr_while.rs:34:5\n    |\n LL |     println!(\"I am, too.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}]}