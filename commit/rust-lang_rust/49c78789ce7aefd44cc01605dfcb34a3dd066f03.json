{"sha": "49c78789ce7aefd44cc01605dfcb34a3dd066f03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Yzc4Nzg5Y2U3YWVmZDQ0Y2MwMTYwNWRmY2IzNGEzZGQwNjZmMDM=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-10-22T02:14:11Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-10-24T18:53:33Z"}, "message": "Remove unnecessary String allocations from str tests", "tree": {"sha": "7ce86a81a7a8b72b11569fd4a593f5331728325b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce86a81a7a8b72b11569fd4a593f5331728325b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c78789ce7aefd44cc01605dfcb34a3dd066f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c78789ce7aefd44cc01605dfcb34a3dd066f03", "html_url": "https://github.com/rust-lang/rust/commit/49c78789ce7aefd44cc01605dfcb34a3dd066f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c78789ce7aefd44cc01605dfcb34a3dd066f03/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e497c0056aed899cd6edbc98e7a68a9b391c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e497c0056aed899cd6edbc98e7a68a9b391c5c", "html_url": "https://github.com/rust-lang/rust/commit/04e497c0056aed899cd6edbc98e7a68a9b391c5c"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "df9c03cdf9106c20b788d77d5d619057dacb292a", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 30, "deletions": 50, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/49c78789ce7aefd44cc01605dfcb34a3dd066f03/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c78789ce7aefd44cc01605dfcb34a3dd066f03/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=49c78789ce7aefd44cc01605dfcb34a3dd066f03", "patch": "@@ -41,10 +41,10 @@ fn test_rfind() {\n \n #[test]\n fn test_collect() {\n-    let empty = String::from(\"\");\n+    let empty = \"\";\n     let s: String = empty.chars().collect();\n     assert_eq!(empty, s);\n-    let data = String::from(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n+    let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n     let s: String = data.chars().collect();\n     assert_eq!(data, s);\n }\n@@ -187,10 +187,8 @@ fn test_unsafe_slice() {\n         rs\n     }\n     let letters = a_million_letter_a();\n-    assert!(half_a_million_letter_a() ==\n-        unsafe {String::from(letters.slice_unchecked(\n-                                 0,\n-                                 500000))});\n+    assert_eq!(half_a_million_letter_a(),\n+        unsafe { letters.slice_unchecked(0, 500000)});\n }\n \n #[test]\n@@ -224,13 +222,12 @@ fn test_is_empty() {\n #[test]\n fn test_replace() {\n     let a = \"a\";\n-    assert_eq!(\"\".replace(a, \"b\"), String::from(\"\"));\n-    assert_eq!(\"a\".replace(a, \"b\"), String::from(\"b\"));\n-    assert_eq!(\"ab\".replace(a, \"b\"), String::from(\"bb\"));\n+    assert_eq!(\"\".replace(a, \"b\"), \"\");\n+    assert_eq!(\"a\".replace(a, \"b\"), \"b\");\n+    assert_eq!(\"ab\".replace(a, \"b\"), \"bb\");\n     let test = \"test\";\n-    assert!(\" test test \".replace(test, \"toast\") ==\n-        String::from(\" toast toast \"));\n-    assert_eq!(\" test test \".replace(test, \"\"), String::from(\"   \"));\n+    assert_eq!(\" test test \".replace(test, \"toast\"), \" toast toast \");\n+    assert_eq!(\" test test \".replace(test, \"\"), \"   \");\n }\n \n #[test]\n@@ -304,8 +301,7 @@ fn test_slice() {\n         rs\n     }\n     let letters = a_million_letter_x();\n-    assert!(half_a_million_letter_x() ==\n-        String::from(&letters[0..3 * 500000]));\n+    assert_eq!(half_a_million_letter_x(), &letters[0..3 * 500000]);\n }\n \n #[test]\n@@ -676,40 +672,27 @@ fn test_split_at_boundscheck() {\n \n #[test]\n fn test_escape_unicode() {\n-    assert_eq!(\"abc\".escape_unicode(),\n-               String::from(\"\\\\u{61}\\\\u{62}\\\\u{63}\"));\n-    assert_eq!(\"a c\".escape_unicode(),\n-               String::from(\"\\\\u{61}\\\\u{20}\\\\u{63}\"));\n-    assert_eq!(\"\\r\\n\\t\".escape_unicode(),\n-               String::from(\"\\\\u{d}\\\\u{a}\\\\u{9}\"));\n-    assert_eq!(\"'\\\"\\\\\".escape_unicode(),\n-               String::from(\"\\\\u{27}\\\\u{22}\\\\u{5c}\"));\n-    assert_eq!(\"\\x00\\x01\\u{fe}\\u{ff}\".escape_unicode(),\n-               String::from(\"\\\\u{0}\\\\u{1}\\\\u{fe}\\\\u{ff}\"));\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_unicode(),\n-               String::from(\"\\\\u{100}\\\\u{ffff}\"));\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_unicode(),\n-               String::from(\"\\\\u{10000}\\\\u{10ffff}\"));\n-    assert_eq!(\"ab\\u{fb00}\".escape_unicode(),\n-               String::from(\"\\\\u{61}\\\\u{62}\\\\u{fb00}\"));\n-    assert_eq!(\"\\u{1d4ea}\\r\".escape_unicode(),\n-               String::from(\"\\\\u{1d4ea}\\\\u{d}\"));\n+    assert_eq!(\"abc\".escape_unicode(), \"\\\\u{61}\\\\u{62}\\\\u{63}\");\n+    assert_eq!(\"a c\".escape_unicode(), \"\\\\u{61}\\\\u{20}\\\\u{63}\");\n+    assert_eq!(\"\\r\\n\\t\".escape_unicode(), \"\\\\u{d}\\\\u{a}\\\\u{9}\");\n+    assert_eq!(\"'\\\"\\\\\".escape_unicode(), \"\\\\u{27}\\\\u{22}\\\\u{5c}\");\n+    assert_eq!(\"\\x00\\x01\\u{fe}\\u{ff}\".escape_unicode(), \"\\\\u{0}\\\\u{1}\\\\u{fe}\\\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_unicode(), \"\\\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_unicode(), \"\\\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{fb00}\".escape_unicode(), \"\\\\u{61}\\\\u{62}\\\\u{fb00}\");\n+    assert_eq!(\"\\u{1d4ea}\\r\".escape_unicode(), \"\\\\u{1d4ea}\\\\u{d}\");\n }\n \n #[test]\n fn test_escape_default() {\n-    assert_eq!(\"abc\".escape_default(), String::from(\"abc\"));\n-    assert_eq!(\"a c\".escape_default(), String::from(\"a c\"));\n-    assert_eq!(\"\\r\\n\\t\".escape_default(), String::from(\"\\\\r\\\\n\\\\t\"));\n-    assert_eq!(\"'\\\"\\\\\".escape_default(), String::from(\"\\\\'\\\\\\\"\\\\\\\\\"));\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(),\n-               String::from(\"\\\\u{100}\\\\u{ffff}\"));\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(),\n-               String::from(\"\\\\u{10000}\\\\u{10ffff}\"));\n-    assert_eq!(\"ab\\u{fb00}\".escape_default(),\n-               String::from(\"ab\\\\u{fb00}\"));\n-    assert_eq!(\"\\u{1d4ea}\\r\".escape_default(),\n-               String::from(\"\\\\u{1d4ea}\\\\r\"));\n+    assert_eq!(\"abc\".escape_default(), \"abc\");\n+    assert_eq!(\"a c\".escape_default(), \"a c\");\n+    assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\");\n+    assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), \"\\\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(), \"\\\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{fb00}\".escape_default(), \"ab\\\\u{fb00}\");\n+    assert_eq!(\"\\u{1d4ea}\\r\".escape_default(), \"\\\\u{1d4ea}\\\\r\");\n }\n \n #[test]\n@@ -1014,13 +997,10 @@ fn test_str_container() {\n         v.iter().map(|x| x.len()).sum()\n     }\n \n-    let s = String::from(\"01234\");\n+    let s = \"01234\";\n     assert_eq!(5, sum_len(&[\"012\", \"\", \"34\"]));\n-    assert_eq!(5, sum_len(&[&String::from(\"01\"),\n-                            &String::from(\"2\"),\n-                            &String::from(\"34\"),\n-                            &String::from(\"\")]));\n-    assert_eq!(5, sum_len(&[&s]));\n+    assert_eq!(5, sum_len(&[\"01\", \"2\", \"34\", \"\"]));\n+    assert_eq!(5, sum_len(&[s]));\n }\n \n #[test]"}]}