{"sha": "fe713420911b6f0d7816ba5254f364557cfc8284", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzEzNDIwOTExYjZmMGQ3ODE2YmE1MjU0ZjM2NDU1N2NmYzgyODQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-09T10:16:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "tweak outline module parsing spans", "tree": {"sha": "d265d5005a84ce7397e99f9df6185a5b7b2fa250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d265d5005a84ce7397e99f9df6185a5b7b2fa250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe713420911b6f0d7816ba5254f364557cfc8284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe713420911b6f0d7816ba5254f364557cfc8284", "html_url": "https://github.com/rust-lang/rust/commit/fe713420911b6f0d7816ba5254f364557cfc8284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe713420911b6f0d7816ba5254f364557cfc8284/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d0e5bbb67f5c1d30b8c23bbfdaa6ed3cc281786", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0e5bbb67f5c1d30b8c23bbfdaa6ed3cc281786", "html_url": "https://github.com/rust-lang/rust/commit/7d0e5bbb67f5c1d30b8c23bbfdaa6ed3cc281786"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "834febceb1ecbcd59ac3ff95d27090a7ccbd65f4", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1429,17 +1429,15 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         let mut attrs = mem::take(&mut item.attrs); // We do this to please borrowck.\n         let ident = item.ident;\n+        let span = item.span;\n \n         match item.kind {\n             ast::ItemKind::MacCall(..) => {\n                 item.attrs = attrs;\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n                     ItemKind::MacCall(mac) => self\n-                        .collect(\n-                            AstFragmentKind::Items,\n-                            InvocationKind::Bang { mac, span: item.span },\n-                        )\n+                        .collect(AstFragmentKind::Items, InvocationKind::Bang { mac, span })\n                         .make_items(),\n                     _ => unreachable!(),\n                 })\n@@ -1457,7 +1455,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     push_directory(ident, &item.attrs, dir)\n                 } else {\n                     // We have an outline `mod foo;` so we need to parse the file.\n-                    let (new_mod, dir) = parse_external_mod(sess, ident, dir, &mut attrs, pushed);\n+                    let (new_mod, dir) =\n+                        parse_external_mod(sess, ident, span, dir, &mut attrs, pushed);\n                     *old_mod = new_mod;\n                     item.attrs = attrs;\n                     // File can have inline attributes, e.g., `#![cfg(...)]` & co. => Reconfigure."}, {"sha": "2d5e4d4e8894d8127dba4811a8f706ab5fadfc1e", "filename": "src/librustc_expand/module.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -41,25 +41,26 @@ pub struct ModulePathSuccess {\n crate fn parse_external_mod(\n     sess: &ParseSess,\n     id: ast::Ident,\n+    span: Span, // The span to blame on errors.\n     Directory { mut ownership, path }: Directory,\n     attrs: &mut Vec<Attribute>,\n     pop_mod_stack: &mut bool,\n ) -> (Mod, Directory) {\n     // We bail on the first error, but that error does not cause a fatal error... (1)\n     let result: PResult<'_, _> = try {\n         // Extract the file path and the new ownership.\n-        let mp = submod_path(sess, id, &attrs, ownership, &path)?;\n+        let mp = submod_path(sess, id, span, &attrs, ownership, &path)?;\n         ownership = mp.ownership;\n \n         // Ensure file paths are acyclic.\n         let mut included_mod_stack = sess.included_mod_stack.borrow_mut();\n-        error_on_circular_module(sess, id.span, &mp.path, &included_mod_stack)?;\n+        error_on_circular_module(sess, span, &mp.path, &included_mod_stack)?;\n         included_mod_stack.push(mp.path.clone());\n         *pop_mod_stack = true; // We have pushed, so notify caller.\n         drop(included_mod_stack);\n \n         // Actually parse the external file as amodule.\n-        let mut p0 = new_sub_parser_from_file(sess, &mp.path, Some(id.to_string()), id.span);\n+        let mut p0 = new_sub_parser_from_file(sess, &mp.path, Some(id.to_string()), span);\n         let mut module = p0.parse_mod(&token::Eof)?;\n         module.0.inline = false;\n         module\n@@ -126,6 +127,7 @@ crate fn push_directory(\n fn submod_path<'a>(\n     sess: &'a ParseSess,\n     id: ast::Ident,\n+    span: Span,\n     attrs: &[Attribute],\n     ownership: DirectoryOwnership,\n     dir_path: &Path,\n@@ -150,54 +152,53 @@ fn submod_path<'a>(\n         DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n     };\n     let ModulePath { path_exists, name, result } =\n-        default_submod_path(sess, id, relative, dir_path);\n+        default_submod_path(sess, id, span, relative, dir_path);\n     match ownership {\n         DirectoryOwnership::Owned { .. } => Ok(result?),\n         DirectoryOwnership::UnownedViaBlock => {\n             let _ = result.map_err(|mut err| err.cancel());\n-            error_decl_mod_in_block(sess, id.span, path_exists, &name)\n+            error_decl_mod_in_block(sess, span, path_exists, &name)\n         }\n         DirectoryOwnership::UnownedViaMod => {\n             let _ = result.map_err(|mut err| err.cancel());\n-            error_cannot_declare_mod_here(sess, id.span, path_exists, &name)\n+            error_cannot_declare_mod_here(sess, span, path_exists, &name)\n         }\n     }\n }\n \n fn error_decl_mod_in_block<'a, T>(\n     sess: &'a ParseSess,\n-    id_sp: Span,\n+    span: Span,\n     path_exists: bool,\n     name: &str,\n ) -> PResult<'a, T> {\n     let msg = \"Cannot declare a non-inline module inside a block unless it has a path attribute\";\n-    let mut err = sess.span_diagnostic.struct_span_err(id_sp, msg);\n+    let mut err = sess.span_diagnostic.struct_span_err(span, msg);\n     if path_exists {\n         let msg = format!(\"Maybe `use` the module `{}` instead of redeclaring it\", name);\n-        err.span_note(id_sp, &msg);\n+        err.span_note(span, &msg);\n     }\n     Err(err)\n }\n \n fn error_cannot_declare_mod_here<'a, T>(\n     sess: &'a ParseSess,\n-    id_sp: Span,\n+    span: Span,\n     path_exists: bool,\n     name: &str,\n ) -> PResult<'a, T> {\n     let mut err =\n-        sess.span_diagnostic.struct_span_err(id_sp, \"cannot declare a new module at this location\");\n-    if !id_sp.is_dummy() {\n-        if let FileName::Real(src_path) = sess.source_map().span_to_filename(id_sp) {\n+        sess.span_diagnostic.struct_span_err(span, \"cannot declare a new module at this location\");\n+    if !span.is_dummy() {\n+        if let FileName::Real(src_path) = sess.source_map().span_to_filename(span) {\n             if let Some(stem) = src_path.file_stem() {\n                 let mut dest_path = src_path.clone();\n                 dest_path.set_file_name(stem);\n                 dest_path.push(\"mod.rs\");\n                 err.span_note(\n-                    id_sp,\n+                    span,\n                     &format!(\n-                        \"maybe move this module `{}` to its own \\\n-                                directory via `{}`\",\n+                        \"maybe move this module `{}` to its own directory via `{}`\",\n                         src_path.display(),\n                         dest_path.display()\n                     ),\n@@ -207,7 +208,7 @@ fn error_cannot_declare_mod_here<'a, T>(\n     }\n     if path_exists {\n         err.span_note(\n-            id_sp,\n+            span,\n             &format!(\"... or maybe `use` the module `{}` instead of possibly redeclaring it\", name),\n         );\n     }\n@@ -237,6 +238,7 @@ pub fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<Pat\n pub fn default_submod_path<'a>(\n     sess: &'a ParseSess,\n     id: ast::Ident,\n+    span: Span,\n     relative: Option<ast::Ident>,\n     dir_path: &Path,\n ) -> ModulePath<'a> {\n@@ -273,7 +275,7 @@ pub fn default_submod_path<'a>(\n         (false, false) => {\n             let mut err = struct_span_err!(\n                 sess.span_diagnostic,\n-                id.span,\n+                span,\n                 E0583,\n                 \"file not found for module `{}`\",\n                 mod_name,\n@@ -288,7 +290,7 @@ pub fn default_submod_path<'a>(\n         (true, true) => {\n             let mut err = struct_span_err!(\n                 sess.span_diagnostic,\n-                id.span,\n+                span,\n                 E0584,\n                 \"file for module `{}` found at both {} and {}\",\n                 mod_name,"}, {"sha": "873b7e93c6f6b157e398507b4c472adbc74ecda1", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -38,7 +38,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n-    pub(super) fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n+    fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n         let id = self.parse_ident()?;\n         let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n             Default::default()"}, {"sha": "9cb159603a8c561c1ce76152d2475ab59269782e", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -2,7 +2,7 @@\n \n macro_rules! mod_decl {\n     ($i:ident) => {\n-        mod $i;\n+        mod $i; //~ ERROR Cannot declare a non-inline module inside a block\n     };\n }\n \n@@ -11,5 +11,5 @@ mod macro_expanded_mod_helper {\n }\n \n fn main() {\n-    mod_decl!(foo); //~ ERROR Cannot declare a non-inline module inside a block\n+    mod_decl!(foo);\n }"}, {"sha": "f90419247c92badae27794bd1690ebbdf6ef3164", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,13 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n-  --> $DIR/macro-expanded-mod.rs:14:15\n+  --> $DIR/macro-expanded-mod.rs:5:9\n    |\n+LL |         mod $i;\n+   |         ^^^^^^^\n+...\n LL |     mod_decl!(foo);\n-   |               ^^^\n+   |     --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d034942ca5d4cc7a50ab020eeecadca5ad3a5878", "filename": "src/test/ui/directory_ownership/non-inline-mod-restriction.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fdirectory_ownership%2Fnon-inline-mod-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fdirectory_ownership%2Fnon-inline-mod-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fnon-inline-mod-restriction.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n-  --> $DIR/non-inline-mod-restriction.rs:4:9\n+  --> $DIR/non-inline-mod-restriction.rs:4:5\n    |\n LL |     mod foo;\n-   |         ^^^\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dbe700355957b1ebe76edff13adb9d7108211fca", "filename": "src/test/ui/error-codes/E0583.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `module_that_doesnt_exist`\n-  --> $DIR/E0583.rs:1:5\n+  --> $DIR/E0583.rs:1:1\n    |\n LL | mod module_that_doesnt_exist;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: to create the module `module_that_doesnt_exist`, create file \"$DIR/module_that_doesnt_exist.rs\"\n "}, {"sha": "52296042eb4a73b80b129fdda944822d3ee7e1cd", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `baz`\n-  --> $DIR/auxiliary/foo/bar.rs:1:9\n+  --> $DIR/auxiliary/foo/bar.rs:1:1\n    |\n LL | pub mod baz;\n-   |         ^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: to create the module `baz`, create file \"$DIR/auxiliary/foo/bar/baz.rs\"\n "}, {"sha": "91b3fe15c4be7a87a4b8525988378e29831eb974", "filename": "src/test/ui/missing_non_modrs_mod/missing_non_modrs_mod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `missing`\n-  --> $DIR/foo.rs:4:5\n+  --> $DIR/foo.rs:4:1\n    |\n LL | mod missing;\n-   |     ^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: to create the module `missing`, create file \"$DIR/foo/missing.rs\"\n "}, {"sha": "f519de46c767f9627419778a00845c35a4750ab1", "filename": "src/test/ui/missing_non_modrs_mod/missing_non_modrs_mod_inline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `missing`\n-  --> $DIR/foo_inline.rs:4:9\n+  --> $DIR/foo_inline.rs:4:5\n    |\n LL |     mod missing;\n-   |         ^^^^^^^\n+   |     ^^^^^^^^^^^^\n    |\n    = help: to create the module `missing`, create file \"$DIR/foo_inline/inline/missing.rs\"\n "}, {"sha": "490633a3fb0ab15b620d9b362251b724e403eb58", "filename": "src/test/ui/mod/mod_file_disambig.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error[E0584]: file for module `mod_file_disambig_aux` found at both mod_file_disambig_aux.rs and mod_file_disambig_aux/mod.rs\n-  --> $DIR/mod_file_disambig.rs:1:5\n+  --> $DIR/mod_file_disambig.rs:1:1\n    |\n LL | mod mod_file_disambig_aux;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: delete or rename one of them to remove the ambiguity\n "}, {"sha": "90f81c64835b74ae0eca9f50703c1cf2b79b94be", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error: circular modules: $DIR/circular_modules_hello.rs -> $DIR/circular_modules_main.rs -> $DIR/circular_modules_hello.rs\n-  --> $DIR/circular_modules_main.rs:2:5\n+  --> $DIR/circular_modules_main.rs:2:1\n    |\n LL | mod circular_modules_hello;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0425]: cannot find function `say_hello` in module `circular_modules_hello`\n   --> $DIR/circular_modules_main.rs:9:29"}, {"sha": "bdb5c91ff91eb084cee75f781937ef5eb2309be4", "filename": "src/test/ui/parser/issue-5806.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fissue-5806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fissue-5806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-5806.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error: couldn't read $DIR/../parser: $ACCESS_DENIED_MSG (os error $ACCESS_DENIED_CODE)\n-  --> $DIR/issue-5806.rs:5:5\n+  --> $DIR/issue-5806.rs:5:1\n    |\n LL | mod foo;\n-   |     ^^^\n+   | ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "087ae9fe3e016c92e9cc1ebfc0e3510b86f4dd0b", "filename": "src/test/ui/parser/mod_file_not_exist.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `not_a_real_file`\n-  --> $DIR/mod_file_not_exist.rs:3:5\n+  --> $DIR/mod_file_not_exist.rs:3:1\n    |\n LL | mod not_a_real_file;\n-   |     ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\"\n "}, {"sha": "cd1add73d58400b7ea41d757995f34b334a1e831", "filename": "src/test/ui/parser/mod_file_with_path_attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fmod_file_with_path_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe713420911b6f0d7816ba5254f364557cfc8284/src%2Ftest%2Fui%2Fparser%2Fmod_file_with_path_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_with_path_attr.stderr?ref=fe713420911b6f0d7816ba5254f364557cfc8284", "patch": "@@ -1,8 +1,8 @@\n error: couldn't read $DIR/not_a_real_file.rs: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/mod_file_with_path_attr.rs:4:5\n+  --> $DIR/mod_file_with_path_attr.rs:4:1\n    |\n LL | mod m;\n-   |     ^\n+   | ^^^^^^\n \n error: aborting due to previous error\n "}]}