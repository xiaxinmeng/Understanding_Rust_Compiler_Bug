{"sha": "1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDNkOWJjMmQzMjhlMTY0YzU5NGYzZDIwMjJkY2YxNzRmOTA3YTk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-26T16:02:00Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-26T16:02:00Z"}, "message": "Merge #1212\n\n1212: Clippy cleanups r=matklad a=kjeremy\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "e4d7f73b0253fb882ac043dd75a111fcaf487c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d7f73b0253fb882ac043dd75a111fcaf487c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "html_url": "https://github.com/rust-lang/rust/commit/1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "42c4e0f378faeabd425392d4a7a7839bd7e8ac2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c4e0f378faeabd425392d4a7a7839bd7e8ac2f", "html_url": "https://github.com/rust-lang/rust/commit/42c4e0f378faeabd425392d4a7a7839bd7e8ac2f"}, {"sha": "d8649c1af86118dea6b6340c999b5864a8d55279", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8649c1af86118dea6b6340c999b5864a8d55279", "html_url": "https://github.com/rust-lang/rust/commit/d8649c1af86118dea6b6340c999b5864a8d55279"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "26641e6903586d3f8d8b8366da8ce9cbd9d950c3", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "patch": "@@ -71,12 +71,15 @@ impl<ID: ArenaId, T> Arena<ID, T> {\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n     pub fn alloc(&mut self, value: T) -> ID {\n         let id = RawId(self.data.len() as u32);\n         self.data.push(value);\n         ID::from_raw(id)\n     }\n-    pub fn iter<'a>(&'a self) -> impl Iterator<Item = (ID, &'a T)> {\n+    pub fn iter(&self) -> impl Iterator<Item = (ID, &T)> {\n         self.data.iter().enumerate().map(|(idx, value)| (ID::from_raw(RawId(idx as u32)), value))\n     }\n }"}, {"sha": "9fe529f53b3493c754a758ef218b7d5f8ec31b1e", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "patch": "@@ -252,12 +252,12 @@ fn expr_bp(\n     // `newly_dollar_open` is a flag indicated that dollar is just closed after lhs, e.g.\n     // `$1$ + a`\n     // We use this flag to skip handling it.\n-    let mut newly_dollar_open = false;\n-\n-    if p.at_l_dollar() {\n+    let mut newly_dollar_open = if p.at_l_dollar() {\n         *dollar_lvl += p.eat_l_dollars();\n-        newly_dollar_open = true;\n-    }\n+        true\n+    } else {\n+        false\n+    };\n \n     let mut lhs = match lhs(p, r, dollar_lvl) {\n         Some((lhs, blocklike)) => {\n@@ -535,7 +535,7 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n         }\n         EXCL => {\n             let block_like = items::macro_call_after_excl(p);\n-            return (m.complete(p, MACRO_CALL), block_like);\n+            (m.complete(p, MACRO_CALL), block_like)\n         }\n         _ => (m.complete(p, PATH_EXPR), BlockLike::NotBlock),\n     }"}, {"sha": "9ecb8e744b3ad97953ef810dbb4a9110106b3862", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd3d9bc2d328e164c594f3d2022dcf174f907a9/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "patch": "@@ -67,14 +67,11 @@ pub fn profile(desc: &str) -> Profiler {\n \n     PROFILE_STACK.with(|stack| {\n         let mut stack = stack.borrow_mut();\n-        if stack.starts.len() == 0 {\n-            match FILTER.try_read() {\n-                Ok(f) => {\n-                    if f.version > stack.filter_data.version {\n-                        stack.filter_data = f.clone();\n-                    }\n+        if stack.starts.is_empty() {\n+            if let Ok(f) = FILTER.try_read() {\n+                if f.version > stack.filter_data.version {\n+                    stack.filter_data = f.clone();\n                 }\n-                Err(_) => (),\n             };\n         }\n \n@@ -107,23 +104,23 @@ impl Filter {\n     // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n     // env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n     pub fn from_spec(mut spec: &str) -> Filter {\n-        let longer_than = if let Some(idx) = spec.rfind(\">\") {\n+        let longer_than = if let Some(idx) = spec.rfind('>') {\n             let longer_than = spec[idx + 1..].parse().expect(\"invalid profile longer_than\");\n             spec = &spec[..idx];\n             Duration::from_millis(longer_than)\n         } else {\n             Duration::new(0, 0)\n         };\n \n-        let depth = if let Some(idx) = spec.rfind(\"@\") {\n+        let depth = if let Some(idx) = spec.rfind('@') {\n             let depth: usize = spec[idx + 1..].parse().expect(\"invalid profile depth\");\n             spec = &spec[..idx];\n             depth\n         } else {\n             999\n         };\n         let allowed =\n-            if spec == \"*\" { Vec::new() } else { spec.split(\"|\").map(String::from).collect() };\n+            if spec == \"*\" { Vec::new() } else { spec.split('|').map(String::from).collect() };\n         Filter::new(depth, allowed, longer_than)\n     }\n "}]}