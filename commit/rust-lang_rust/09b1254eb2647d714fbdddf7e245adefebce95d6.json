{"sha": "09b1254eb2647d714fbdddf7e245adefebce95d6", "node_id": "C_kwDOAAsO6NoAKDA5YjEyNTRlYjI2NDdkNzE0ZmJkZGRmN2UyNDVhZGVmZWJjZTk1ZDY", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-21T12:00:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T12:00:23Z"}, "message": "Rollup merge of #109124 - ferrocene:pa-compression-mode, r=Mark-Simulacrum\n\nAdd `dist.compression-profile` option to control compression speed\n\nPR #108534 reduced the size of compressed archives, but (as expected) it also resulted in way longer compression times and memory usage during compression.\n\nIt's desirable to keep status quo (smaller archives but more CI usage), but it should also be configurable so that downstream users don't have to waste that much time on CI. As a data point, this resulted in doubling the time of Ferrocene's dist jobs, and required us to increase the RAM allocation for one of such jobs.\n\nThis PR adds a new `config.toml` setting, `dist.compression-profile`. The values can be:\n\n* `fast`: equivalent to the gzip and xz preset of \"1\"\n* `balanced`: equivalent to the gzip and xz preset of \"6\" (the CLI defaults as far as I'm aware)\n* `best`: equivalent to the gzip present of \"9\", and our custom xz profile\n\nThe default has also been moved back to `balanced`, to try and avoid the compression time regression for downstream users. I don't feel too strongly on the default, and I'm open to changing it.\n\nAlso, for the `best` profile the XZ settings do not match the \"9\" preset used by the CLI, and it might be confusing. Should we create a `custom-rustc-ci`/`ultra` profile for that?\n\nr? ``@Mark-Simulacrum``", "tree": {"sha": "5fd8862b40fa313ccd5180fddd4a8ce8ec5d94a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd8862b40fa313ccd5180fddd4a8ce8ec5d94a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b1254eb2647d714fbdddf7e245adefebce95d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGZxXCRBK7hj4Ov3rIwAAvTYIAEXIxqKB03yR63paWCsvOdPk\nDTahlaSBS8IyXmUKQEAc3rMgJHOyZbJXET6kXslXq4tnnrOT/y9aa79V0VHfo2kR\nykpTv2/gRtTk6cHInx0lIAnxtCSD+I75UVqAfwjcC/HdprAIqiuen/t9BX4BFUZP\nneunUkiLVgvnfHWijPW0rGbgEgZ9RMgILzbRluhzPwTajH1TZEu8DKs0ZLvQjIVT\nqM31VyangAk5QgQiM/ECL0wsCaG4ZXGYnpEbY4xryR9VZtbu9Hfo9qyp4WrDyk42\nMgs/U0Aa1vQ0o1W2LpzxID3fR6EttipN93sxNymHAUbmeBnuYK/DJlmEg9SLoQ8=\n=KnAO\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fd8862b40fa313ccd5180fddd4a8ce8ec5d94a5\nparent e79b182fcacd1ad6499a97d428c2176c696eee8e\nparent 01771762cd6369f941d4d4ed04993209f2a85e08\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1679400023 +0100\ncommitter GitHub <noreply@github.com> 1679400023 +0100\n\nRollup merge of #109124 - ferrocene:pa-compression-mode, r=Mark-Simulacrum\n\nAdd `dist.compression-profile` option to control compression speed\n\nPR #108534 reduced the size of compressed archives, but (as expected) it also resulted in way longer compression times and memory usage during compression.\n\nIt's desirable to keep status quo (smaller archives but more CI usage), but it should also be configurable so that downstream users don't have to waste that much time on CI. As a data point, this resulted in doubling the time of Ferrocene's dist jobs, and required us to increase the RAM allocation for one of such jobs.\n\nThis PR adds a new `config.toml` setting, `dist.compression-profile`. The values can be:\n\n* `fast`: equivalent to the gzip and xz preset of \"1\"\n* `balanced`: equivalent to the gzip and xz preset of \"6\" (the CLI defaults as far as I'm aware)\n* `best`: equivalent to the gzip present of \"9\", and our custom xz profile\n\nThe default has also been moved back to `balanced`, to try and avoid the compression time regression for downstream users. I don't feel too strongly on the default, and I'm open to changing it.\n\nAlso, for the `best` profile the XZ settings do not match the \"9\" preset used by the CLI, and it might be confusing. Should we create a `custom-rustc-ci`/`ultra` profile for that?\n\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b1254eb2647d714fbdddf7e245adefebce95d6", "html_url": "https://github.com/rust-lang/rust/commit/09b1254eb2647d714fbdddf7e245adefebce95d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b1254eb2647d714fbdddf7e245adefebce95d6/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79b182fcacd1ad6499a97d428c2176c696eee8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79b182fcacd1ad6499a97d428c2176c696eee8e", "html_url": "https://github.com/rust-lang/rust/commit/e79b182fcacd1ad6499a97d428c2176c696eee8e"}, {"sha": "01771762cd6369f941d4d4ed04993209f2a85e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/01771762cd6369f941d4d4ed04993209f2a85e08", "html_url": "https://github.com/rust-lang/rust/commit/01771762cd6369f941d4d4ed04993209f2a85e08"}], "stats": {"total": 174, "additions": 127, "deletions": 47}, "files": [{"sha": "32eab76b3695909d16f01126dd867322e1ba6740", "filename": "config.example.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -806,3 +806,9 @@ changelog-seen = 2\n #\n # This list must be non-empty.\n #compression-formats = [\"gz\", \"xz\"]\n+\n+# How much time should be spent compressing the tarballs. The better the\n+# compression profile, the longer compression will take.\n+#\n+# Available options: fast, balanced, best\n+#compression-profile = \"fast\""}, {"sha": "d2c046c39798935b178bd6d79d017ab642be8df5", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -191,6 +191,7 @@ pub struct Config {\n     pub dist_sign_folder: Option<PathBuf>,\n     pub dist_upload_addr: Option<String>,\n     pub dist_compression_formats: Option<Vec<String>>,\n+    pub dist_compression_profile: String,\n     pub dist_include_mingw_linker: bool,\n \n     // libstd features\n@@ -703,6 +704,7 @@ define_config! {\n         src_tarball: Option<bool> = \"src-tarball\",\n         missing_tools: Option<bool> = \"missing-tools\",\n         compression_formats: Option<Vec<String>> = \"compression-formats\",\n+        compression_profile: Option<String> = \"compression-profile\",\n         include_mingw_linker: Option<bool> = \"include-mingw-linker\",\n     }\n }\n@@ -821,6 +823,7 @@ impl Config {\n         config.deny_warnings = true;\n         config.bindir = \"bin\".into();\n         config.dist_include_mingw_linker = true;\n+        config.dist_compression_profile = \"fast\".into();\n \n         // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n@@ -1308,6 +1311,7 @@ impl Config {\n             config.dist_sign_folder = t.sign_folder.map(PathBuf::from);\n             config.dist_upload_addr = t.upload_addr;\n             config.dist_compression_formats = t.compression_formats;\n+            set(&mut config.dist_compression_profile, t.compression_profile);\n             set(&mut config.rust_dist_src, t.src_tarball);\n             set(&mut config.missing_tools, t.missing_tools);\n             set(&mut config.dist_include_mingw_linker, t.include_mingw_linker)"}, {"sha": "ee271c3fb519dc58a4278360a3f42ee3f7f43ed0", "filename": "src/bootstrap/defaults/config.user.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -11,3 +11,7 @@ extended = true\n [llvm]\n # Most users installing from source want to build all parts of the project from source, not just rustc itself.\n download-ci-llvm = false\n+\n+[dist]\n+# Use better compression when preparing tarballs.\n+compression-profile = \"balanced\""}, {"sha": "7fa8a4d9d7f8afdf9044ba1195bd1be2bdc8db79", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -318,6 +318,7 @@ impl<'a> Tarball<'a> {\n             assert!(!formats.is_empty(), \"dist.compression-formats can't be empty\");\n             cmd.arg(\"--compression-formats\").arg(formats.join(\",\"));\n         }\n+        cmd.args(&[\"--compression-profile\", &self.builder.config.dist_compression_profile]);\n         self.builder.run(&mut cmd);\n \n         // Ensure there are no symbolic links in the tarball. In particular,"}, {"sha": "8ca22d6e68fd45abe5cea57d6f77e22770a1d825", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -58,6 +58,7 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-native-static\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.codegen-units-std=1\"\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set dist.compression-profile=best\"\n \n # Only produce xz tarballs on CI. gz tarballs will be generated by the release\n # process by recompressing the existing xz ones. This decreases the storage"}, {"sha": "abcf59cfe36cd39372b6ca1490aeb60fcf5e75ba", "filename": "src/tools/rust-installer/src/combiner.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Fcombiner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Fcombiner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fcombiner.rs?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -1,7 +1,7 @@\n use super::Scripter;\n use super::Tarballer;\n use crate::{\n-    compression::{CompressionFormat, CompressionFormats},\n+    compression::{CompressionFormat, CompressionFormats, CompressionProfile},\n     util::*,\n };\n use anyhow::{bail, Context, Result};\n@@ -48,6 +48,10 @@ actor! {\n         #[clap(value_name = \"DIR\")]\n         output_dir: String = \"./dist\",\n \n+        /// The profile used to compress the tarball.\n+        #[clap(value_name = \"FORMAT\", default_value_t)]\n+        compression_profile: CompressionProfile,\n+\n         /// The formats used to compress the tarball\n         #[clap(value_name = \"FORMAT\", default_value_t)]\n         compression_formats: CompressionFormats,\n@@ -153,6 +157,7 @@ impl Combiner {\n             .work_dir(self.work_dir)\n             .input(self.package_name)\n             .output(path_to_str(&output)?.into())\n+            .compression_profile(self.compression_profile)\n             .compression_formats(self.compression_formats.clone());\n         tarballer.run()?;\n "}, {"sha": "510c914163c7e754b83485dee4a9328dd68a6782", "filename": "src/tools/rust-installer/src/compression.rs", "status": "modified", "additions": 93, "deletions": 43, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -4,6 +4,37 @@ use rayon::prelude::*;\n use std::{convert::TryFrom, fmt, io::Read, io::Write, path::Path, str::FromStr};\n use xz2::{read::XzDecoder, write::XzEncoder};\n \n+#[derive(Default, Debug, Copy, Clone)]\n+pub enum CompressionProfile {\n+    Fast,\n+    #[default]\n+    Balanced,\n+    Best,\n+}\n+\n+impl FromStr for CompressionProfile {\n+    type Err = Error;\n+\n+    fn from_str(input: &str) -> Result<Self, Error> {\n+        Ok(match input {\n+            \"fast\" => Self::Fast,\n+            \"balanced\" => Self::Balanced,\n+            \"best\" => Self::Best,\n+            other => anyhow::bail!(\"invalid compression profile: {other}\"),\n+        })\n+    }\n+}\n+\n+impl fmt::Display for CompressionProfile {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            CompressionProfile::Fast => f.write_str(\"fast\"),\n+            CompressionProfile::Balanced => f.write_str(\"balanced\"),\n+            CompressionProfile::Best => f.write_str(\"best\"),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone)]\n pub enum CompressionFormat {\n     Gz,\n@@ -26,7 +57,11 @@ impl CompressionFormat {\n         }\n     }\n \n-    pub(crate) fn encode(&self, path: impl AsRef<Path>) -> Result<Box<dyn Encoder>, Error> {\n+    pub(crate) fn encode(\n+        &self,\n+        path: impl AsRef<Path>,\n+        profile: CompressionProfile,\n+    ) -> Result<Box<dyn Encoder>, Error> {\n         let mut os = path.as_ref().as_os_str().to_os_string();\n         os.push(format!(\".{}\", self.extension()));\n         let path = Path::new(&os);\n@@ -37,49 +72,64 @@ impl CompressionFormat {\n         let file = crate::util::create_new_file(path)?;\n \n         Ok(match self {\n-            CompressionFormat::Gz => Box::new(GzEncoder::new(file, flate2::Compression::best())),\n+            CompressionFormat::Gz => Box::new(GzEncoder::new(\n+                file,\n+                match profile {\n+                    CompressionProfile::Fast => flate2::Compression::fast(),\n+                    CompressionProfile::Balanced => flate2::Compression::new(6),\n+                    CompressionProfile::Best => flate2::Compression::best(),\n+                },\n+            )),\n             CompressionFormat::Xz => {\n-                let mut filters = xz2::stream::Filters::new();\n-                // the preset is overridden by the other options so it doesn't matter\n-                let mut lzma_ops = xz2::stream::LzmaOptions::new_preset(9).unwrap();\n-                // This sets the overall dictionary size, which is also how much memory (baseline)\n-                // is needed for decompression.\n-                lzma_ops.dict_size(64 * 1024 * 1024);\n-                // Use the best match finder for compression ratio.\n-                lzma_ops.match_finder(xz2::stream::MatchFinder::BinaryTree4);\n-                lzma_ops.mode(xz2::stream::Mode::Normal);\n-                // Set nice len to the maximum for best compression ratio\n-                lzma_ops.nice_len(273);\n-                // Set depth to a reasonable value, 0 means auto, 1000 is somwhat high but gives\n-                // good results.\n-                lzma_ops.depth(1000);\n-                // 2 is the default and does well for most files\n-                lzma_ops.position_bits(2);\n-                // 0 is the default and does well for most files\n-                lzma_ops.literal_position_bits(0);\n-                // 3 is the default and does well for most files\n-                lzma_ops.literal_context_bits(3);\n-\n-                filters.lzma2(&lzma_ops);\n-\n-                let mut builder = xz2::stream::MtStreamBuilder::new();\n-                builder.filters(filters);\n-\n-                // On 32-bit platforms limit ourselves to 3 threads, otherwise we exceed memory\n-                // usage this process can take. In the future we'll likely only do super-fast\n-                // compression in CI and move this heavyweight processing to promote-release (which\n-                // is always 64-bit and can run on big-memory machines) but for now this lets us\n-                // move forward.\n-                if std::mem::size_of::<usize>() == 4 {\n-                    builder.threads(3);\n-                } else {\n-                    builder.threads(6);\n-                }\n-\n-                let compressor = XzEncoder::new_stream(\n-                    std::io::BufWriter::new(file),\n-                    builder.encoder().unwrap(),\n-                );\n+                let encoder = match profile {\n+                    CompressionProfile::Fast => {\n+                        xz2::stream::MtStreamBuilder::new().threads(6).preset(1).encoder().unwrap()\n+                    }\n+                    CompressionProfile::Balanced => {\n+                        xz2::stream::MtStreamBuilder::new().threads(6).preset(6).encoder().unwrap()\n+                    }\n+                    CompressionProfile::Best => {\n+                        let mut filters = xz2::stream::Filters::new();\n+                        // the preset is overridden by the other options so it doesn't matter\n+                        let mut lzma_ops = xz2::stream::LzmaOptions::new_preset(9).unwrap();\n+                        // This sets the overall dictionary size, which is also how much memory (baseline)\n+                        // is needed for decompression.\n+                        lzma_ops.dict_size(64 * 1024 * 1024);\n+                        // Use the best match finder for compression ratio.\n+                        lzma_ops.match_finder(xz2::stream::MatchFinder::BinaryTree4);\n+                        lzma_ops.mode(xz2::stream::Mode::Normal);\n+                        // Set nice len to the maximum for best compression ratio\n+                        lzma_ops.nice_len(273);\n+                        // Set depth to a reasonable value, 0 means auto, 1000 is somwhat high but gives\n+                        // good results.\n+                        lzma_ops.depth(1000);\n+                        // 2 is the default and does well for most files\n+                        lzma_ops.position_bits(2);\n+                        // 0 is the default and does well for most files\n+                        lzma_ops.literal_position_bits(0);\n+                        // 3 is the default and does well for most files\n+                        lzma_ops.literal_context_bits(3);\n+\n+                        filters.lzma2(&lzma_ops);\n+\n+                        let mut builder = xz2::stream::MtStreamBuilder::new();\n+                        builder.filters(filters);\n+\n+                        // On 32-bit platforms limit ourselves to 3 threads, otherwise we exceed memory\n+                        // usage this process can take. In the future we'll likely only do super-fast\n+                        // compression in CI and move this heavyweight processing to promote-release (which\n+                        // is always 64-bit and can run on big-memory machines) but for now this lets us\n+                        // move forward.\n+                        if std::mem::size_of::<usize>() == 4 {\n+                            builder.threads(3);\n+                        } else {\n+                            builder.threads(6);\n+                        }\n+                        builder.encoder().unwrap()\n+                    }\n+                };\n+\n+                let compressor = XzEncoder::new_stream(std::io::BufWriter::new(file), encoder);\n                 Box::new(compressor)\n             }\n         })"}, {"sha": "ddd1052599d58bff1fc353383aa413a737905b70", "filename": "src/tools/rust-installer/src/generator.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fgenerator.rs?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -1,6 +1,6 @@\n use super::Scripter;\n use super::Tarballer;\n-use crate::compression::CompressionFormats;\n+use crate::compression::{CompressionFormats, CompressionProfile};\n use crate::util::*;\n use anyhow::{bail, format_err, Context, Result};\n use std::collections::BTreeSet;\n@@ -54,6 +54,10 @@ actor! {\n         #[clap(value_name = \"DIR\")]\n         output_dir: String = \"./dist\",\n \n+        /// The profile used to compress the tarball.\n+        #[clap(value_name = \"FORMAT\", default_value_t)]\n+        compression_profile: CompressionProfile,\n+\n         /// The formats used to compress the tarball\n         #[clap(value_name = \"FORMAT\", default_value_t)]\n         compression_formats: CompressionFormats,\n@@ -113,6 +117,7 @@ impl Generator {\n             .work_dir(self.work_dir)\n             .input(self.package_name)\n             .output(path_to_str(&output)?.into())\n+            .compression_profile(self.compression_profile)\n             .compression_formats(self.compression_formats.clone());\n         tarballer.run()?;\n "}, {"sha": "592eba8f69850aa51e98fe355bc45b8a9bb40849", "filename": "src/tools/rust-installer/src/tarballer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Ftarballer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b1254eb2647d714fbdddf7e245adefebce95d6/src%2Ftools%2Frust-installer%2Fsrc%2Ftarballer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Ftarballer.rs?ref=09b1254eb2647d714fbdddf7e245adefebce95d6", "patch": "@@ -6,7 +6,7 @@ use tar::{Builder, Header};\n use walkdir::WalkDir;\n \n use crate::{\n-    compression::{CombinedEncoder, CompressionFormats},\n+    compression::{CombinedEncoder, CompressionFormats, CompressionProfile},\n     util::*,\n };\n \n@@ -25,6 +25,10 @@ actor! {\n         #[clap(value_name = \"DIR\")]\n         work_dir: String = \"./workdir\",\n \n+        /// The profile used to compress the tarball.\n+        #[clap(value_name = \"FORMAT\", default_value_t)]\n+        compression_profile: CompressionProfile,\n+\n         /// The formats used to compress the tarball.\n         #[clap(value_name = \"FORMAT\", default_value_t)]\n         compression_formats: CompressionFormats,\n@@ -38,7 +42,7 @@ impl Tarballer {\n         let encoder = CombinedEncoder::new(\n             self.compression_formats\n                 .iter()\n-                .map(|f| f.encode(&tarball_name))\n+                .map(|f| f.encode(&tarball_name, self.compression_profile))\n                 .collect::<Result<Vec<_>>>()?,\n         );\n "}]}