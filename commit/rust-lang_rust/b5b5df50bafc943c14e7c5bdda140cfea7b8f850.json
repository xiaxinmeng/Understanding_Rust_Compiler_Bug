{"sha": "b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YjVkZjUwYmFmYzk0M2MxNGU3YzViZGRhMTQwY2ZlYTdiOGY4NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-15T14:01:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-15T14:01:18Z"}, "message": "Auto merge of #1710 - hyd-dev:crate-types, r=RalfJung\n\n Patch `--extern` arguments in `phase_cargo_rustc` as well\n\nFixes #1705.", "tree": {"sha": "2c47329f12b4bcb895940c52b55e157b8c036197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c47329f12b4bcb895940c52b55e157b8c036197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "html_url": "https://github.com/rust-lang/rust/commit/b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f7069a0f755b154cf9c62b94154570695e7813", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f7069a0f755b154cf9c62b94154570695e7813", "html_url": "https://github.com/rust-lang/rust/commit/c3f7069a0f755b154cf9c62b94154570695e7813"}, {"sha": "1923044705b2e9d54f7fa8f40e1c0bab5ea081ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1923044705b2e9d54f7fa8f40e1c0bab5ea081ff", "html_url": "https://github.com/rust-lang/rust/commit/1923044705b2e9d54f7fa8f40e1c0bab5ea081ff"}], "stats": {"total": 97, "additions": 74, "deletions": 23}, "files": [{"sha": "cb003c0f3e8bd85ec36a3a78663d206dfb7a3eb0", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -143,6 +143,18 @@ fn get_arg_flag_value(name: &str) -> Option<String> {\n     ArgFlagValueIter::new(name).next()\n }\n \n+fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut Command) {\n+    cmd.arg(\"--extern\"); // always forward flag, but adjust filename:\n+    let path = args.next().expect(\"`--extern` should be followed by a filename\");\n+    if let Some(lib) = path.strip_suffix(\".rlib\") {\n+        // If this is an rlib, make it an rmeta.\n+        cmd.arg(format!(\"{}.rmeta\", lib));\n+    } else {\n+        // Some other extern file (e.g. a `.so`). Forward unchanged.\n+        cmd.arg(path);\n+    }\n+}\n+\n /// Returns the path to the `miri` binary\n fn find_miri() -> PathBuf {\n     if let Some(path) = env::var_os(\"MIRI\") {\n@@ -553,7 +565,7 @@ fn phase_cargo_miri(mut args: env::Args) {\n     exec(cmd)\n }\n \n-fn phase_cargo_rustc(args: env::Args) {\n+fn phase_cargo_rustc(mut args: env::Args) {\n     /// Determines if we are being invoked (as rustc) to build a crate for\n     /// the \"target\" architecture, in contrast to the \"host\" architecture.\n     /// Host crates are for build scripts and proc macros and still need to\n@@ -596,15 +608,6 @@ fn phase_cargo_rustc(args: env::Args) {\n     let target_crate = is_target_crate();\n     let print = get_arg_flag_value(\"--print\").is_some(); // whether this is cargo passing `--print` to get some infos\n \n-    // cdylib is just skipped, we cannot interpret it and do not need it\n-    // for the rest of the build either.\n-    if get_arg_flag_value(\"--crate-type\").as_deref() == Some(\"cdylib\") {\n-        if verbose {\n-            eprint!(\"[cargo-miri rustc] (cdylib skipped)\");\n-        }\n-        return;\n-    }\n-\n     let store_json = |info: CrateRunInfo| {\n         let filename = out_filename(\"\", \"\");\n         if verbose {\n@@ -643,7 +646,7 @@ fn phase_cargo_rustc(args: env::Args) {\n     if !print && target_crate {\n         // Forward arguments, but remove \"link\" from \"--emit\" to make this a check-only build.\n         let emit_flag = \"--emit\";\n-        for arg in args {\n+        while let Some(arg) = args.next() {\n             if arg.starts_with(emit_flag) {\n                 // Patch this argument. First, extract its value.\n                 let val = &arg[emit_flag.len()..];\n@@ -659,6 +662,10 @@ fn phase_cargo_rustc(args: env::Args) {\n                     }\n                 }\n                 cmd.arg(format!(\"{}={}\", emit_flag, val.join(\",\")));\n+            } else if arg == \"--extern\" {\n+                // Patch `--extern` filenames, since Cargo sometimes passes stub `.rlib` files:\n+                // https://github.com/rust-lang/miri/issues/1705\n+                forward_patched_extern_arg(&mut args, &mut cmd);\n             } else {\n                 cmd.arg(arg);\n             }\n@@ -734,21 +741,11 @@ fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n     // but when we run here, cargo does not interpret the JSON any more. `--json`\n     // then also nees to be dropped.\n     let mut args = info.args.into_iter();\n-    let extern_flag = \"--extern\";\n     let error_format_flag = \"--error-format\";\n     let json_flag = \"--json\";\n     while let Some(arg) = args.next() {\n-        if arg == extern_flag {\n-            cmd.arg(extern_flag); // always forward flag, but adjust filename\n-            // `--extern` is always passed as a separate argument by cargo.\n-            let next_arg = args.next().expect(\"`--extern` should be followed by a filename\");\n-            if let Some(next_lib) = next_arg.strip_suffix(\".rlib\") {\n-                // If this is an rlib, make it an rmeta.\n-                cmd.arg(format!(\"{}.rmeta\", next_lib));\n-            } else {\n-                // Some other extern file (e.g., a `.so`). Forward unchanged.\n-                cmd.arg(next_arg);\n-            }\n+        if arg == \"--extern\" {\n+            forward_patched_extern_arg(&mut args, &mut cmd);\n         } else if arg.starts_with(error_format_flag) {\n             let suffix = &arg[error_format_flag.len()..];\n             assert!(suffix.starts_with('='));"}, {"sha": "1f1541b92a5631abf4489041cc53f00b8ab9b84a", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -11,12 +11,21 @@ name = \"cargo-miri-test\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder\",\n+ \"cdylib\",\n  \"issue_1567\",\n  \"issue_1691\",\n+ \"issue_1705\",\n  \"rand\",\n  \"serde_derive\",\n ]\n \n+[[package]]\n+name = \"cdylib\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"byteorder\",\n+]\n+\n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n@@ -54,6 +63,13 @@ dependencies = [\n name = \"issue_1691\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"issue_1705\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"byteorder\",\n+]\n+\n [[package]]\n name = \"libc\"\n version = \"0.2.81\""}, {"sha": "7ffe7d04ea4759f21a2e089f5b4a38c4a08f74b2", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -9,8 +9,10 @@ edition = \"2018\"\n \n [dependencies]\n byteorder = \"1.0\"\n+cdylib = { path = \"cdylib\" }\n issue_1567 = { path = \"issue-1567\" }\n issue_1691 = { path = \"issue-1691\" }\n+issue_1705 = { path = \"issue-1705\" }\n \n [dev-dependencies]\n rand = { version = \"0.7\", features = [\"small_rng\"] }"}, {"sha": "4e5b5601a56cea5eea13f558882dac93a2a80764", "filename": "test-cargo-miri/cdylib/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fcdylib%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fcdylib%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fcdylib%2FCargo.toml?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+name = \"cdylib\"\n+version = \"0.1.0\"\n+authors = [\"Miri Team\"]\n+edition = \"2018\"\n+\n+[lib]\n+# cargo-miri used to handle `cdylib` crate-type specially (https://github.com/rust-lang/miri/pull/1577).\n+crate-type = [\"cdylib\"]\n+\n+[dependencies]\n+byteorder = \"1.0\""}, {"sha": "dd89048284deef338d1fd938ee251686aca8d5f4", "filename": "test-cargo-miri/cdylib/src/lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fcdylib%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fcdylib%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fcdylib%2Fsrc%2Flib.rs?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -0,0 +1,6 @@\n+use byteorder::{BigEndian, ByteOrder};\n+\n+#[no_mangle]\n+extern \"C\" fn use_the_dependency() {\n+    let _n = <BigEndian as ByteOrder>::read_u64(&[1,2,3,4,5,6,7,8]);\n+}"}, {"sha": "ae63647a88819b3a7d7d51b32fbd691ee30462b3", "filename": "test-cargo-miri/issue-1705/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fissue-1705%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fissue-1705%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1705%2FCargo.toml?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"issue_1705\"\n+version = \"0.1.0\"\n+authors = [\"Miri Team\"]\n+edition = \"2018\"\n+\n+[lib]\n+crate-type = [\"lib\", \"staticlib\", \"cdylib\"]\n+\n+[dependencies]\n+byteorder = \"1.0\""}, {"sha": "ef24d3f1a06da6be0ce03f2637e4ee6c922f2f91", "filename": "test-cargo-miri/issue-1705/src/lib.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fissue-1705%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fissue-1705%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-1705%2Fsrc%2Flib.rs?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -0,0 +1,5 @@\n+use byteorder::{LittleEndian, ByteOrder};\n+\n+pub fn use_the_dependency() {\n+    let _n = <LittleEndian as ByteOrder>::read_u32(&[1,2,3,4]);\n+}"}, {"sha": "33bbd8c966e58f694e3e1de59649449f7c336605", "filename": "test-cargo-miri/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5df50bafc943c14e7c5bdda140cfea7b8f850/test-cargo-miri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Flib.rs?ref=b5b5df50bafc943c14e7c5bdda140cfea7b8f850", "patch": "@@ -3,5 +3,7 @@\n /// assert!(cargo_miri_test::make_true());\n /// ```\n pub fn make_true() -> bool {\n+    issue_1567::use_the_dependency();\n+    issue_1705::use_the_dependency();\n     issue_1691::use_me()\n }"}]}