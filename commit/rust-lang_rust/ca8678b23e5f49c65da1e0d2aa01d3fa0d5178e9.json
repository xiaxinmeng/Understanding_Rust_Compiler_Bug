{"sha": "ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhODY3OGIyM2U1ZjQ5YzY1ZGExZTBkMmFhMDFkM2ZhMGQ1MTc4ZTk=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-30T00:20:41Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-30T18:02:30Z"}, "message": "Handle inactive enum variants in `MaybeUninitializedPlaces`", "tree": {"sha": "d5f26e13150ce0db279e7513e1e5e52ad11564ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f26e13150ce0db279e7513e1e5e52ad11564ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "html_url": "https://github.com/rust-lang/rust/commit/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "html_url": "https://github.com/rust-lang/rust/commit/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741"}], "stats": {"total": 112, "additions": 89, "deletions": 23}, "files": [{"sha": "707e136678e9ca2738074b3e0188411602d49c55", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "patch": "@@ -1,6 +1,7 @@\n use crate::util::elaborate_drops::DropFlagState;\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n \n use super::indexes::MovePathIndex;\n use super::move_paths::{InitKind, LookupResult, MoveData};\n@@ -228,3 +229,42 @@ pub(crate) fn for_location_inits<'tcx, F>(\n         }\n     }\n }\n+\n+/// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a\n+/// `Downcast` to a variant besides the `active_variant`.\n+///\n+/// NOTE: If there are no move paths corresponding to an inactive variant,\n+/// `handle_inactive_variant` will not be called for that variant.\n+pub(crate) fn on_all_inactive_variants<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mir::Body<'tcx>,\n+    move_data: &MoveData<'tcx>,\n+    enum_place: mir::Place<'tcx>,\n+    active_variant: VariantIdx,\n+    mut handle_inactive_variant: impl FnMut(MovePathIndex),\n+) {\n+    let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {\n+        LookupResult::Exact(mpi) => mpi,\n+        LookupResult::Parent(_) => return,\n+    };\n+\n+    let enum_path = &move_data.move_paths[enum_mpi];\n+    for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {\n+        // Because of the way we build the `MoveData` tree, each child should have exactly one more\n+        // projection than `enum_place`. This additional projection must be a downcast since the\n+        // base is an enum.\n+        let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();\n+        assert_eq!(enum_place.projection.len(), base_proj.len());\n+\n+        let variant_idx = match *downcast {\n+            mir::ProjectionElem::Downcast(_, idx) => idx,\n+            _ => unreachable!(),\n+        };\n+\n+        if variant_idx != active_variant {\n+            on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {\n+                handle_inactive_variant(mpi)\n+            });\n+        }\n+    }\n+}"}, {"sha": "8975faec487657dafa81c3ff2530e6cceff56766", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "patch": "@@ -12,7 +12,7 @@ use super::MoveDataParamEnv;\n \n use crate::util::elaborate_drops::DropFlagState;\n \n-use super::move_paths::{HasMoveData, InitIndex, InitKind, LookupResult, MoveData, MovePathIndex};\n+use super::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n use super::{AnalysisDomain, BottomValue, GenKill, GenKillAnalysis};\n \n use super::drop_flag_effects_for_function_entry;\n@@ -124,11 +124,23 @@ pub struct MaybeUninitializedPlaces<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n+\n+    mark_inactive_variants_as_uninit: bool,\n }\n \n impl<'a, 'tcx> MaybeUninitializedPlaces<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {\n-        MaybeUninitializedPlaces { tcx, body, mdpe }\n+        MaybeUninitializedPlaces { tcx, body, mdpe, mark_inactive_variants_as_uninit: false }\n+    }\n+\n+    /// Causes inactive enum variants to be marked as \"maybe uninitialized\" after a switch on an\n+    /// enum discriminant.\n+    ///\n+    /// This is correct in a vacuum but is not the default because it causes problems in the borrow\n+    /// checker, where this information gets propagated along `FakeEdge`s.\n+    pub fn mark_inactive_variants_as_uninit(mut self) -> Self {\n+        self.mark_inactive_variants_as_uninit = true;\n+        self\n     }\n }\n \n@@ -350,27 +362,16 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         _adt: &ty::AdtDef,\n         variant: VariantIdx,\n     ) {\n-        let enum_mpi = match self.move_data().rev_lookup.find(enum_place.as_ref()) {\n-            LookupResult::Exact(mpi) => mpi,\n-            LookupResult::Parent(_) => return,\n-        };\n-\n-        // Kill all move paths that correspond to variants other than this one\n-        let move_paths = &self.move_data().move_paths;\n-        let enum_path = &move_paths[enum_mpi];\n-        for (mpi, variant_path) in enum_path.children(move_paths) {\n-            trans.kill(mpi);\n-            match variant_path.place.projection.last().unwrap() {\n-                mir::ProjectionElem::Downcast(_, idx) if *idx == variant => continue,\n-                _ => drop_flag_effects::on_all_children_bits(\n-                    self.tcx,\n-                    self.body,\n-                    self.move_data(),\n-                    mpi,\n-                    |mpi| trans.kill(mpi),\n-                ),\n-            }\n-        }\n+        // Kill all move paths that correspond to variants we know to be inactive along this\n+        // particular outgoing edge of a `SwitchInt`.\n+        drop_flag_effects::on_all_inactive_variants(\n+            self.tcx,\n+            self.body,\n+            self.move_data(),\n+            enum_place,\n+            variant,\n+            |mpi| trans.kill(mpi),\n+        );\n     }\n }\n \n@@ -443,6 +444,30 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n             },\n         );\n     }\n+\n+    fn discriminant_switch_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _block: mir::BasicBlock,\n+        enum_place: mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        variant: VariantIdx,\n+    ) {\n+        if !self.mark_inactive_variants_as_uninit {\n+            return;\n+        }\n+\n+        // Mark all move paths that correspond to variants other than this one as maybe\n+        // uninitialized (in reality, they are *definitely* uninitialized).\n+        drop_flag_effects::on_all_inactive_variants(\n+            self.tcx,\n+            self.body,\n+            self.move_data(),\n+            enum_place,\n+            variant,\n+            |mpi| trans.gen(mpi),\n+        );\n+    }\n }\n \n impl<'a, 'tcx> AnalysisDomain<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {"}, {"sha": "d3bfd872d16c2c57c622f9871e6959b6b2a6fa1e", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=ca8678b23e5f49c65da1e0d2aa01d3fa0d5178e9", "patch": "@@ -48,6 +48,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n                 .into_results_cursor(body);\n \n             let uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n+                .mark_inactive_variants_as_uninit()\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n                 .iterate_to_fixpoint()"}]}