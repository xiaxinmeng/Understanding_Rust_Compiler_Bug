{"sha": "ad63f907e987673fc99dce3e4d1437720705f5a8", "node_id": "C_kwDOAAsO6NoAKGFkNjNmOTA3ZTk4NzY3M2ZjOTlkY2UzZTRkMTQzNzcyMDcwNWY1YTg", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-01T23:55:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-02T00:46:55Z"}, "message": "Make output more specific", "tree": {"sha": "c4311c51cea569aad8bdf4a50403c0dc292f5e92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4311c51cea569aad8bdf4a50403c0dc292f5e92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad63f907e987673fc99dce3e4d1437720705f5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad63f907e987673fc99dce3e4d1437720705f5a8", "html_url": "https://github.com/rust-lang/rust/commit/ad63f907e987673fc99dce3e4d1437720705f5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad63f907e987673fc99dce3e4d1437720705f5a8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196a30ebff0156240b3297f9859fb57fe725c081", "url": "https://api.github.com/repos/rust-lang/rust/commits/196a30ebff0156240b3297f9859fb57fe725c081", "html_url": "https://github.com/rust-lang/rust/commit/196a30ebff0156240b3297f9859fb57fe725c081"}], "stats": {"total": 608, "additions": 391, "deletions": 217}, "files": [{"sha": "405acfc186cf4fa5dd82a3c28d1081e93713b530", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -2108,6 +2108,46 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         extend: impl Fn(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n     ) -> bool {\n         let args = segments.clone().flat_map(|segment| segment.args().args);\n+        let types_and_spans: Vec<_> = segments\n+            .clone()\n+            .flat_map(|segment| {\n+                segment.res.and_then(|res| {\n+                    if segment.args().args.is_empty() {\n+                        None\n+                    } else {\n+                        let mut desc = res.descr();\n+                        if desc == \"unresolved item\" {\n+                            desc = \"this type\";\n+                        };\n+\n+                        let name = match res {\n+                            Res::PrimTy(ty) => Some(ty.name()),\n+                            Res::Def(_, def_id) => self.tcx().opt_item_name(def_id),\n+                            _ => None,\n+                        };\n+                        Some((\n+                            match name {\n+                                Some(ty) => format!(\"{desc} `{ty}`\"),\n+                                None => desc.to_string(),\n+                            },\n+                            segment.ident.span,\n+                        ))\n+                    }\n+                })\n+            })\n+            .collect();\n+        let this_type = match &types_and_spans[..] {\n+            [.., _, (last, _)] => format!(\n+                \"{} and {last}\",\n+                types_and_spans[..types_and_spans.len() - 1]\n+                    .iter()\n+                    .map(|(x, _)| x.as_str())\n+                    .intersperse(&\", \")\n+                    .collect::<String>()\n+            ),\n+            [(only, _)] => only.to_string(),\n+            [] => \"this type\".to_string(),\n+        };\n \n         let (lt, ty, ct, inf) =\n             args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n@@ -2143,7 +2183,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let (kind, s) = match types[..] {\n                 [.., _, last] => (\n                     format!(\n-                        \"{} and `{last}`\",\n+                        \"{} and {last}\",\n                         types[..types.len() - 1]\n                             .iter()\n                             .map(|&x| x)\n@@ -2161,9 +2201,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.tcx().sess,\n                 span,\n                 E0109,\n-                \"{kind} arguments are not allowed for this type\",\n+                \"{kind} arguments are not allowed on {this_type}\",\n             );\n             err.span_label(last_span, format!(\"{kind} argument{s} not allowed\"));\n+            for (_, span) in types_and_spans {\n+                err.span_label(span, \"not allowed on this\");\n+            }\n             extend(&mut err);\n             err.emit();\n             emitted = true;"}, {"sha": "6f0e4d55aeb0432f33146021b8a866cc3267cf6e", "filename": "src/test/ui/derives/issue-97343.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fderives%2Fissue-97343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fderives%2Fissue-97343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-97343.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::Debug;\n \n #[derive(Debug)]\n-pub struct Irrelevant<Irrelevant> { //~ ERROR type arguments are not allowed for this type\n+pub struct Irrelevant<Irrelevant> { //~ ERROR type arguments are not allowed on type parameter\n     irrelevant: Irrelevant,\n }\n "}, {"sha": "ac797a8f50152e0c4a8cab24419255d44c28504b", "filename": "src/test/ui/derives/issue-97343.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,11 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on type parameter `Irrelevant`\n   --> $DIR/issue-97343.rs:4:23\n    |\n LL | #[derive(Debug)]\n-   |          ----- in this derive macro expansion\n+   |          -----\n+   |          |\n+   |          not allowed on this\n+   |          in this derive macro expansion\n LL | pub struct Irrelevant<Irrelevant> {\n    |                       ^^^^^^^^^^ type argument not allowed\n    |"}, {"sha": "e91c74151b3b39687e782cbbd46ff32c433f2557", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/E0109.rs:1:14\n    |\n LL | type X = u32<i32>;\n-   |              ^^^ type argument not allowed\n+   |          --- ^^^ type argument not allowed\n+   |          |\n+   |          not allowed on this\n    |\n help: primitive type `u32` doesn't have type parameters\n    |"}, {"sha": "4425d87e2b0c88e911af0b1ff2f6c7a8bd9adb46", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/E0110.rs:1:14\n    |\n LL | type X = u32<'static>;\n-   |              ^^^^^^^ lifetime argument not allowed\n+   |          --- ^^^^^^^ lifetime argument not allowed\n+   |          |\n+   |          not allowed on this\n    |\n help: primitive type `u32` doesn't have type parameters\n    |"}, {"sha": "bb8a58d3d2ecc63c36340bff5de941e6379f08ca", "filename": "src/test/ui/issues/issue-22706.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,3 +1,3 @@\n fn is_copy<T: ::std::marker<i32>::Copy>() {}\n-//~^ ERROR type arguments are not allowed for this type [E0109]\n+//~^ ERROR type arguments are not allowed on module `marker` [E0109]\n fn main() {}"}, {"sha": "66911f081d76cd74f2e2ec78f717e7b4dbcb7a62", "filename": "src/test/ui/issues/issue-22706.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on module `marker`\n   --> $DIR/issue-22706.rs:1:29\n    |\n LL | fn is_copy<T: ::std::marker<i32>::Copy>() {}\n-   |                             ^^^ type argument not allowed\n+   |                      ------ ^^^ type argument not allowed\n+   |                      |\n+   |                      not allowed on this\n \n error: aborting due to previous error\n "}, {"sha": "8846912a8ff79bb11d6daeda27101d845d4f61cd", "filename": "src/test/ui/issues/issue-57924.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-57924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-57924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57924.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -3,7 +3,7 @@ pub struct Gcm<E>(E);\n impl<E> Gcm<E> {\n     pub fn crash(e: E) -> Self {\n         Self::<E>(e)\n-        //~^ ERROR type arguments are not allowed for this type\n+        //~^ ERROR type arguments are not allowed on self constructor\n     }\n }\n "}, {"sha": "211b0dde48c2e24046245cfe994138bd1257970b", "filename": "src/test/ui/issues/issue-57924.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self constructor\n   --> $DIR/issue-57924.rs:5:16\n    |\n LL |         Self::<E>(e)\n-   |                ^ type argument not allowed\n+   |         ----   ^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n \n error: aborting due to previous error\n "}, {"sha": "29db3fdb47104815247640c37fcb33494f3325b1", "filename": "src/test/ui/issues/issue-60989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -10,9 +10,9 @@ impl From<A> for B {\n fn main() {\n     let c1 = ();\n     c1::<()>;\n-    //~^ ERROR type arguments are not allowed for this type\n+    //~^ ERROR type arguments are not allowed on local variable\n \n     let c1 = A {};\n     c1::<dyn Into<B>>;\n-    //~^ ERROR type arguments are not allowed for this type\n+    //~^ ERROR type arguments are not allowed on local variable\n }"}, {"sha": "9076f4f9385ba178073a6f532423ec9c7cd31876", "filename": "src/test/ui/issues/issue-60989.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,14 +1,18 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on local variable\n   --> $DIR/issue-60989.rs:12:10\n    |\n LL |     c1::<()>;\n-   |          ^^ type argument not allowed\n+   |     --   ^^ type argument not allowed\n+   |     |\n+   |     not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on local variable\n   --> $DIR/issue-60989.rs:16:10\n    |\n LL |     c1::<dyn Into<B>>;\n-   |          ^^^^^^^^^^^ type argument not allowed\n+   |     --   ^^^^^^^^^^^ type argument not allowed\n+   |     |\n+   |     not allowed on this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "959024c46f4ffe601e9e52c22b822f65abe15dbc", "filename": "src/test/ui/mod-subitem-as-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -5,5 +5,5 @@ mod Mod {\n fn main() {\n     Mod::FakeVariant::<i32>(0);\n     Mod::<i32>::FakeVariant(0);\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on module `Mod` [E0109]\n }"}, {"sha": "15da1d155a337fc17a2a26a3fa81ba91f350dfae", "filename": "src/test/ui/mod-subitem-as-enum-variant.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on module `Mod`\n   --> $DIR/mod-subitem-as-enum-variant.rs:7:11\n    |\n LL |     Mod::<i32>::FakeVariant(0);\n-   |           ^^^ type argument not allowed\n+   |     ---   ^^^ type argument not allowed\n+   |     |\n+   |     not allowed on this\n \n error: aborting due to previous error\n "}, {"sha": "f88572f8419c03a1590888658bc41458bb5d6100", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -13,7 +13,7 @@ fn f<T: Tr>() {\n     //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n     //~^ ERROR expected struct, variant or union type, found associated type\n-    //~| ERROR type arguments are not allowed for this type\n+    //~| ERROR type arguments are not allowed on this type\n     match S {\n         T::A {} => {}\n         //~^ ERROR expected struct, variant or union type, found associated type\n@@ -22,7 +22,7 @@ fn f<T: Tr>() {\n \n fn g<T: Tr<A = S>>() {\n     let s = T::A {}; // OK\n-    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed for this type\n+    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed on this type\n     match S {\n         T::A {} => {} // OK\n     }"}, {"sha": "7424ceecbe3b63195ab9f00da7dcae7606ad8ac7", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -4,11 +4,13 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |     let s = T::A {};\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/struct-path-associated-type.rs:14:20\n    |\n LL |     let z = T::A::<u8> {};\n-   |                    ^^ type argument not allowed\n+   |                -   ^^ type argument not allowed\n+   |                |\n+   |                not allowed on this\n \n error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:14:13\n@@ -22,11 +24,13 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |         T::A {} => {}\n    |         ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/struct-path-associated-type.rs:25:20\n    |\n LL |     let z = T::A::<u8> {};\n-   |                    ^^ type argument not allowed\n+   |                -   ^^ type argument not allowed\n+   |                |\n+   |                not allowed on this\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:32:13"}, {"sha": "6e529c7ed2b70c417fc56fafb4a54f9e01fe1613", "filename": "src/test/ui/structs/struct-path-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -6,7 +6,7 @@ trait Tr {\n         //~^ ERROR expected struct, variant or union type, found type parameter\n         let z = Self::<u8> {};\n         //~^ ERROR expected struct, variant or union type, found type parameter\n-        //~| ERROR type arguments are not allowed for this type\n+        //~| ERROR type arguments are not allowed on self type\n         match s {\n             Self { .. } => {}\n             //~^ ERROR expected struct, variant or union type, found type parameter\n@@ -17,7 +17,7 @@ trait Tr {\n impl Tr for S {\n     fn f() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed for this type\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on self type\n         match s {\n             Self { .. } => {} // OK\n         }\n@@ -27,7 +27,7 @@ impl Tr for S {\n impl S {\n     fn g() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed for this type\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on self type\n         match s {\n             Self { .. } => {} // OK\n         }"}, {"sha": "3a4baeb9f6cf0573df76ab7386470fdb83aa0137", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -4,11 +4,13 @@ error[E0071]: expected struct, variant or union type, found type parameter `Self\n LL |         let s = Self {};\n    |                 ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/struct-path-self.rs:7:24\n    |\n LL |         let z = Self::<u8> {};\n-   |                        ^^ type argument not allowed\n+   |                 ----   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n    |\n help: the `Self` type doesn't accept type parameters\n    |\n@@ -28,11 +30,13 @@ error[E0071]: expected struct, variant or union type, found type parameter `Self\n LL |             Self { .. } => {}\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/struct-path-self.rs:20:24\n    |\n LL |         let z = Self::<u8> {};\n-   |                        ^^ type argument not allowed\n+   |                 ----   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n    |\n note: `Self` is of type `S`\n   --> $DIR/struct-path-self.rs:1:8\n@@ -48,11 +52,13 @@ LL -         let z = Self::<u8> {};\n LL +         let z = Self {};\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/struct-path-self.rs:30:24\n    |\n LL |         let z = Self::<u8> {};\n-   |                        ^^ type argument not allowed\n+   |                 ----   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n    |\n note: `Self` is of type `S`\n   --> $DIR/struct-path-self.rs:1:8"}, {"sha": "e6f45036f8514fcd8b59e16fcd4674bbdf5577b8", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -13,93 +13,93 @@ impl<T> Enum<T> {\n         Self::TSVariant(());\n         //~^ ERROR mismatched types [E0308]\n         Self::TSVariant::<()>(());\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this type [E0109]\n         Self::<()>::TSVariant(());\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on self type [E0109]\n         //~| ERROR mismatched types [E0308]\n         Self::<()>::TSVariant::<()>(());\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~| ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on self type [E0109]\n+        //~| ERROR type arguments are not allowed on this type [E0109]\n     }\n \n     fn s_variant() {\n         Self::SVariant { v: () };\n         //~^ ERROR mismatched types [E0308]\n         Self::SVariant::<()> { v: () };\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this type [E0109]\n         //~| ERROR mismatched types [E0308]\n         Self::<()>::SVariant { v: () };\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on self type [E0109]\n         //~| ERROR mismatched types [E0308]\n         Self::<()>::SVariant::<()> { v: () };\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~| ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on self type [E0109]\n+        //~| ERROR type arguments are not allowed on this type [E0109]\n         //~| ERROR mismatched types [E0308]\n     }\n \n     fn u_variant() {\n         Self::UVariant::<()>;\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this type [E0109]\n         Self::<()>::UVariant;\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on self type [E0109]\n         Self::<()>::UVariant::<()>;\n-        //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~| ERROR type arguments are not allowed for this type [E0109]\n+        //~^ ERROR type arguments are not allowed on self type [E0109]\n+        //~| ERROR type arguments are not allowed on this type [E0109]\n     }\n }\n \n fn main() {\n     // Tuple struct variant\n \n     Enum::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n \n     Alias::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     Alias::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n \n     AliasFixed::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     AliasFixed::<()>::TSVariant(());\n     //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n \n     // Struct variant\n \n     Enum::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n \n     Alias::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     Alias::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n \n     AliasFixed::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     AliasFixed::<()>::SVariant { v: () };\n     //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n \n     // Unit variant\n \n     Enum::<()>::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n \n     Alias::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     Alias::<()>::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n \n     AliasFixed::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     AliasFixed::<()>::UVariant;\n     //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this type [E0109]\n     //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n }"}, {"sha": "3e60ab108a82fc8fda4488d83150a4b6f1c286fb", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 108, "deletions": 54, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -17,17 +17,21 @@ note: tuple variant defined here\n LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |                ^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:15:27\n    |\n LL |         Self::TSVariant::<()>(());\n-   |                           ^^ type argument not allowed\n+   |               ---------   ^^ type argument not allowed\n+   |               |\n+   |               not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:17:16\n    |\n LL |         Self::<()>::TSVariant(());\n-   |                ^^ type argument not allowed\n+   |         ----   ^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -61,11 +65,13 @@ note: tuple variant defined here\n LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |                ^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:20:16\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n-   |                ^^ type argument not allowed\n+   |         ----   ^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -80,11 +86,13 @@ help: the `Self` type doesn't accept type parameters, use the concrete type's na\n LL |         Enum::<()>::TSVariant::<()>(());\n    |         ~~~~\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:20:33\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n-   |                                 ^^ type argument not allowed\n+   |                     ---------   ^^ type argument not allowed\n+   |                     |\n+   |                     not allowed on this\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:26:29\n@@ -98,11 +106,13 @@ LL |         Self::SVariant { v: () };\n    = note: expected type parameter `T`\n                    found unit type `()`\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:28:26\n    |\n LL |         Self::SVariant::<()> { v: () };\n-   |                          ^^ type argument not allowed\n+   |               --------   ^^ type argument not allowed\n+   |               |\n+   |               not allowed on this\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -123,11 +133,13 @@ LL |         Self::SVariant::<()> { v: () };\n    = note: expected type parameter `T`\n                    found unit type `()`\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:31:16\n    |\n LL |         Self::<()>::SVariant { v: () };\n-   |                ^^ type argument not allowed\n+   |         ----   ^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -154,11 +166,13 @@ LL |         Self::<()>::SVariant { v: () };\n    = note: expected type parameter `T`\n                    found unit type `()`\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:34:16\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n-   |                ^^ type argument not allowed\n+   |         ----   ^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -173,11 +187,13 @@ help: the `Self` type doesn't accept type parameters, use the concrete type's na\n LL |         Enum::<()>::SVariant::<()> { v: () };\n    |         ~~~~\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:34:32\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n-   |                                ^^ type argument not allowed\n+   |                     --------   ^^ type argument not allowed\n+   |                     |\n+   |                     not allowed on this\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -198,17 +214,21 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    = note: expected type parameter `T`\n                    found unit type `()`\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:41:26\n    |\n LL |         Self::UVariant::<()>;\n-   |                          ^^ type argument not allowed\n+   |               --------   ^^ type argument not allowed\n+   |               |\n+   |               not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:43:16\n    |\n LL |         Self::<()>::UVariant;\n-   |                ^^ type argument not allowed\n+   |         ----   ^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -223,11 +243,13 @@ help: the `Self` type doesn't accept type parameters, use the concrete type's na\n LL |         Enum::<()>::UVariant;\n    |         ~~~~\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:45:16\n    |\n LL |         Self::<()>::UVariant::<()>;\n-   |                ^^ type argument not allowed\n+   |         ----   ^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -242,35 +264,45 @@ help: the `Self` type doesn't accept type parameters, use the concrete type's na\n LL |         Enum::<()>::UVariant::<()>;\n    |         ~~~~\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:45:32\n    |\n LL |         Self::<()>::UVariant::<()>;\n-   |                                ^^ type argument not allowed\n+   |                     --------   ^^ type argument not allowed\n+   |                     |\n+   |                     not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:54:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n-   |                             ^^ type argument not allowed\n+   |                 ---------   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:57:24\n    |\n LL |     Alias::TSVariant::<()>(());\n-   |                        ^^ type argument not allowed\n+   |            ---------   ^^ type argument not allowed\n+   |            |\n+   |            not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:59:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n-   |                              ^^ type argument not allowed\n+   |                  ---------   ^^ type argument not allowed\n+   |                  |\n+   |                  not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:62:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n-   |                             ^^ type argument not allowed\n+   |                 ---------   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n \n error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:64:5\n@@ -300,25 +332,31 @@ note: type alias defined here, with 0 generic parameters\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:66:35\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n-   |                                   ^^ type argument not allowed\n+   |                       ---------   ^^ type argument not allowed\n+   |                       |\n+   |                       not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:72:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n-   |                            ^^ type argument not allowed\n+   |                 --------   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n    |\n    = note: enum variants can't have type parameters\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:75:23\n    |\n LL |     Alias::SVariant::<()> { v: () };\n-   |                       ^^ type argument not allowed\n+   |            --------   ^^ type argument not allowed\n+   |            |\n+   |            not allowed on this\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -327,11 +365,13 @@ LL -     Alias::SVariant::<()> { v: () };\n LL +     Alias::<()>::SVariant { v: () };\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:77:29\n    |\n LL |     Alias::<()>::SVariant::<()> { v: () };\n-   |                             ^^ type argument not allowed\n+   |                  --------   ^^ type argument not allowed\n+   |                  |\n+   |                  not allowed on this\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -340,11 +380,13 @@ LL -     Alias::<()>::SVariant::<()> { v: () };\n LL +     Alias::<()>::SVariant { v: () };\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:80:28\n    |\n LL |     AliasFixed::SVariant::<()> { v: () };\n-   |                            ^^ type argument not allowed\n+   |                 --------   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -381,11 +423,13 @@ note: type alias defined here, with 0 generic parameters\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:84:34\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n-   |                                  ^^ type argument not allowed\n+   |                       --------   ^^ type argument not allowed\n+   |                       |\n+   |                       not allowed on this\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -394,29 +438,37 @@ LL -     AliasFixed::<()>::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:90:28\n    |\n LL |     Enum::<()>::UVariant::<()>;\n-   |                            ^^ type argument not allowed\n+   |                 --------   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:93:23\n    |\n LL |     Alias::UVariant::<()>;\n-   |                       ^^ type argument not allowed\n+   |            --------   ^^ type argument not allowed\n+   |            |\n+   |            not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:95:29\n    |\n LL |     Alias::<()>::UVariant::<()>;\n-   |                             ^^ type argument not allowed\n+   |                  --------   ^^ type argument not allowed\n+   |                  |\n+   |                  not allowed on this\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:98:28\n    |\n LL |     AliasFixed::UVariant::<()>;\n-   |                            ^^ type argument not allowed\n+   |                 --------   ^^ type argument not allowed\n+   |                 |\n+   |                 not allowed on this\n \n error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:100:5\n@@ -446,11 +498,13 @@ note: type alias defined here, with 0 generic parameters\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:102:34\n    |\n LL |     AliasFixed::<()>::UVariant::<()>;\n-   |                                  ^^ type argument not allowed\n+   |                       --------   ^^ type argument not allowed\n+   |                       |\n+   |                       not allowed on this\n \n error: aborting due to 39 previous errors\n "}, {"sha": "872ece0c0f99e4d1dedd99601c33b995ca7b1848", "filename": "src/test/ui/type-alias-enum-variants/no-type-application-on-aliased-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let _ = Option::<u8>::None; // OK\n     let _ = Option::None::<u8>; // OK (Lint in future!)\n     let _ = Alias::<u8>::None; // OK\n-    let _ = Alias::None::<u8>; //~ ERROR type arguments are not allowed for this type\n+    let _ = Alias::None::<u8>; //~ ERROR type arguments are not allowed on this type\n }"}, {"sha": "474548a14a9a6e9e89731a82f10c79f6f7a97055", "filename": "src/test/ui/type-alias-enum-variants/no-type-application-on-aliased-enum-variant.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/no-type-application-on-aliased-enum-variant.rs:13:27\n    |\n LL |     let _ = Alias::None::<u8>;\n-   |                           ^^ type argument not allowed\n+   |                    ----   ^^ type argument not allowed\n+   |                    |\n+   |                    not allowed on this\n \n error: aborting due to previous error\n "}, {"sha": "01ed9ea9e231ff2d73e4996b1cc45b5b2a2b6ec0", "filename": "src/test/ui/type/issue-91268.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: this file contains an unclosed delimiter\n // error-pattern: cannot find type `\u0163` in this scope\n // error-pattern: parenthesized type parameters may only be used with a `Fn` trait\n-// error-pattern: type arguments are not allowed for this type\n+// error-pattern: type arguments are not allowed on this type\n // error-pattern: mismatched types\n // ignore-tidy-trailing-newlines\n // `\u0163` must be the last character in this file, it cannot be followed by a newline"}, {"sha": "b8900b0218066e6b1b1419e89eac22e6a8a55b66", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -30,11 +30,13 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL |     0: u8(\u0163\n    |        ^^^^ only `Fn` traits may use parentheses\n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/issue-91268.rs:9:11\n    |\n LL |     0: u8(\u0163\n-   |           ^ type argument not allowed\n+   |        -- ^ type argument not allowed\n+   |        |\n+   |        not allowed on this\n    |\n help: primitive type `u8` doesn't have type parameters\n    |"}, {"sha": "1c5fd7508676a640bf0952ed3ac5fd9309437195", "filename": "src/test/ui/typeck/prim-with-args.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,28 +1,28 @@\n // run-rustfix\n fn main() {\n \n-let _x: isize; //~ ERROR type arguments are not allowed for this type\n-let _x: i8; //~ ERROR type arguments are not allowed for this type\n-let _x: i16; //~ ERROR type arguments are not allowed for this type\n-let _x: i32; //~ ERROR type arguments are not allowed for this type\n-let _x: i64; //~ ERROR type arguments are not allowed for this type\n-let _x: usize; //~ ERROR type arguments are not allowed for this type\n-let _x: u8; //~ ERROR type arguments are not allowed for this type\n-let _x: u16; //~ ERROR type arguments are not allowed for this type\n-let _x: u32; //~ ERROR type arguments are not allowed for this type\n-let _x: u64; //~ ERROR type arguments are not allowed for this type\n-let _x: char; //~ ERROR type arguments are not allowed for this type\n+let _x: isize; //~ ERROR type arguments are not allowed on this type\n+let _x: i8; //~ ERROR type arguments are not allowed on this type\n+let _x: i16; //~ ERROR type arguments are not allowed on this type\n+let _x: i32; //~ ERROR type arguments are not allowed on this type\n+let _x: i64; //~ ERROR type arguments are not allowed on this type\n+let _x: usize; //~ ERROR type arguments are not allowed on this type\n+let _x: u8; //~ ERROR type arguments are not allowed on this type\n+let _x: u16; //~ ERROR type arguments are not allowed on this type\n+let _x: u32; //~ ERROR type arguments are not allowed on this type\n+let _x: u64; //~ ERROR type arguments are not allowed on this type\n+let _x: char; //~ ERROR type arguments are not allowed on this type\n \n-let _x: isize; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i8; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i16; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i32; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i64; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: usize; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u8; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u16; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u32; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u64; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: char; //~ ERROR lifetime arguments are not allowed for this type\n+let _x: isize; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i8; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i16; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i32; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i64; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: usize; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u8; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u16; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u32; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u64; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: char; //~ ERROR lifetime arguments are not allowed on this type\n \n }"}, {"sha": "b05d6c1cb4e4a4e190ac03fd6116fd3dc4df4815", "filename": "src/test/ui/typeck/prim-with-args.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,28 +1,28 @@\n // run-rustfix\n fn main() {\n \n-let _x: isize<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: i8<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: i16<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: i32<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: i64<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: usize<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: u8<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: u16<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: u32<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: u64<isize>; //~ ERROR type arguments are not allowed for this type\n-let _x: char<isize>; //~ ERROR type arguments are not allowed for this type\n+let _x: isize<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: i8<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: i16<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: i32<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: i64<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: usize<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: u8<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: u16<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: u32<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: u64<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: char<isize>; //~ ERROR type arguments are not allowed on this type\n \n-let _x: isize<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i8<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i16<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i32<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: i64<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: usize<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u8<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u16<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u32<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: u64<'static>; //~ ERROR lifetime arguments are not allowed for this type\n-let _x: char<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let _x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: char<'static>; //~ ERROR lifetime arguments are not allowed on this type\n \n }"}, {"sha": "1728757c8086b64004da7e3d22b8c3e86c4d474a", "filename": "src/test/ui/typeck/prim-with-args.stderr", "status": "modified", "additions": 88, "deletions": 44, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,260 +1,304 @@\n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:4:15\n    |\n LL | let _x: isize<isize>;\n-   |               ^^^^^ type argument not allowed\n+   |         ----- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `isize` doesn't have type parameters\n    |\n LL - let _x: isize<isize>;\n LL + let _x: isize;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:5:12\n    |\n LL | let _x: i8<isize>;\n-   |            ^^^^^ type argument not allowed\n+   |         -- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i8` doesn't have type parameters\n    |\n LL - let _x: i8<isize>;\n LL + let _x: i8;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:6:13\n    |\n LL | let _x: i16<isize>;\n-   |             ^^^^^ type argument not allowed\n+   |         --- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i16` doesn't have type parameters\n    |\n LL - let _x: i16<isize>;\n LL + let _x: i16;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:7:13\n    |\n LL | let _x: i32<isize>;\n-   |             ^^^^^ type argument not allowed\n+   |         --- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i32` doesn't have type parameters\n    |\n LL - let _x: i32<isize>;\n LL + let _x: i32;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:8:13\n    |\n LL | let _x: i64<isize>;\n-   |             ^^^^^ type argument not allowed\n+   |         --- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i64` doesn't have type parameters\n    |\n LL - let _x: i64<isize>;\n LL + let _x: i64;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:9:15\n    |\n LL | let _x: usize<isize>;\n-   |               ^^^^^ type argument not allowed\n+   |         ----- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `usize` doesn't have type parameters\n    |\n LL - let _x: usize<isize>;\n LL + let _x: usize;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:10:12\n    |\n LL | let _x: u8<isize>;\n-   |            ^^^^^ type argument not allowed\n+   |         -- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u8` doesn't have type parameters\n    |\n LL - let _x: u8<isize>;\n LL + let _x: u8;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:11:13\n    |\n LL | let _x: u16<isize>;\n-   |             ^^^^^ type argument not allowed\n+   |         --- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u16` doesn't have type parameters\n    |\n LL - let _x: u16<isize>;\n LL + let _x: u16;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:12:13\n    |\n LL | let _x: u32<isize>;\n-   |             ^^^^^ type argument not allowed\n+   |         --- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u32` doesn't have type parameters\n    |\n LL - let _x: u32<isize>;\n LL + let _x: u32;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:13:13\n    |\n LL | let _x: u64<isize>;\n-   |             ^^^^^ type argument not allowed\n+   |         --- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u64` doesn't have type parameters\n    |\n LL - let _x: u64<isize>;\n LL + let _x: u64;\n    | \n \n-error[E0109]: type arguments are not allowed for this type\n+error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:14:14\n    |\n LL | let _x: char<isize>;\n-   |              ^^^^^ type argument not allowed\n+   |         ---- ^^^^^ type argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `char` doesn't have type parameters\n    |\n LL - let _x: char<isize>;\n LL + let _x: char;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:16:15\n    |\n LL | let _x: isize<'static>;\n-   |               ^^^^^^^ lifetime argument not allowed\n+   |         ----- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `isize` doesn't have type parameters\n    |\n LL - let _x: isize<'static>;\n LL + let _x: isize;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:17:12\n    |\n LL | let _x: i8<'static>;\n-   |            ^^^^^^^ lifetime argument not allowed\n+   |         -- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i8` doesn't have type parameters\n    |\n LL - let _x: i8<'static>;\n LL + let _x: i8;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:18:13\n    |\n LL | let _x: i16<'static>;\n-   |             ^^^^^^^ lifetime argument not allowed\n+   |         --- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i16` doesn't have type parameters\n    |\n LL - let _x: i16<'static>;\n LL + let _x: i16;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:19:13\n    |\n LL | let _x: i32<'static>;\n-   |             ^^^^^^^ lifetime argument not allowed\n+   |         --- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i32` doesn't have type parameters\n    |\n LL - let _x: i32<'static>;\n LL + let _x: i32;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:20:13\n    |\n LL | let _x: i64<'static>;\n-   |             ^^^^^^^ lifetime argument not allowed\n+   |         --- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `i64` doesn't have type parameters\n    |\n LL - let _x: i64<'static>;\n LL + let _x: i64;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:21:15\n    |\n LL | let _x: usize<'static>;\n-   |               ^^^^^^^ lifetime argument not allowed\n+   |         ----- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `usize` doesn't have type parameters\n    |\n LL - let _x: usize<'static>;\n LL + let _x: usize;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:22:12\n    |\n LL | let _x: u8<'static>;\n-   |            ^^^^^^^ lifetime argument not allowed\n+   |         -- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u8` doesn't have type parameters\n    |\n LL - let _x: u8<'static>;\n LL + let _x: u8;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:23:13\n    |\n LL | let _x: u16<'static>;\n-   |             ^^^^^^^ lifetime argument not allowed\n+   |         --- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u16` doesn't have type parameters\n    |\n LL - let _x: u16<'static>;\n LL + let _x: u16;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:24:13\n    |\n LL | let _x: u32<'static>;\n-   |             ^^^^^^^ lifetime argument not allowed\n+   |         --- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u32` doesn't have type parameters\n    |\n LL - let _x: u32<'static>;\n LL + let _x: u32;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:25:13\n    |\n LL | let _x: u64<'static>;\n-   |             ^^^^^^^ lifetime argument not allowed\n+   |         --- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `u64` doesn't have type parameters\n    |\n LL - let _x: u64<'static>;\n LL + let _x: u64;\n    | \n \n-error[E0109]: lifetime arguments are not allowed for this type\n+error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:26:14\n    |\n LL | let _x: char<'static>;\n-   |              ^^^^^^^ lifetime argument not allowed\n+   |         ---- ^^^^^^^ lifetime argument not allowed\n+   |         |\n+   |         not allowed on this\n    |\n help: primitive type `char` doesn't have type parameters\n    |"}, {"sha": "6d17ba9b5b26199c599edc7686bfc3c150b36d80", "filename": "src/test/ui/usize-generic-argument-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,5 +1,5 @@\n fn foo() {\n-    let x: usize<foo>; //~ ERROR const arguments are not allowed for this type\n+    let x: usize<foo>; //~ ERROR const arguments are not allowed on this type\n }\n \n fn main() {}"}, {"sha": "e47de289d1ed2dc375ac71f32ae5498a60a9f82d", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad63f907e987673fc99dce3e4d1437720705f5a8/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=ad63f907e987673fc99dce3e4d1437720705f5a8", "patch": "@@ -1,8 +1,10 @@\n-error[E0109]: const arguments are not allowed for this type\n+error[E0109]: const arguments are not allowed on this type\n   --> $DIR/usize-generic-argument-parent.rs:2:18\n    |\n LL |     let x: usize<foo>;\n-   |                  ^^^ const argument not allowed\n+   |            ----- ^^^ const argument not allowed\n+   |            |\n+   |            not allowed on this\n    |\n help: primitive type `usize` doesn't have type parameters\n    |"}]}