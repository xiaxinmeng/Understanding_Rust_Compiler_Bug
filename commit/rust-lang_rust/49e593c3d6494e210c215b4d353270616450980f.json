{"sha": "49e593c3d6494e210c215b4d353270616450980f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTU5M2MzZDY0OTRlMjEwYzIxNWI0ZDM1MzI3MDYxNjQ1MDk4MGY=", "commit": {"author": {"name": "Dan Schatzberg", "email": "schatzberg.dan@gmail.com", "date": "2014-10-02T18:06:31Z"}, "committer": {"name": "Dan Schatzberg", "email": "schatzberg.dan@gmail.com", "date": "2014-10-02T18:06:31Z"}, "message": "Add fixes for new lifetime bounds", "tree": {"sha": "e9a8d3e5ab7ae2dfc37233679fc3b8cd0bfb27d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a8d3e5ab7ae2dfc37233679fc3b8cd0bfb27d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e593c3d6494e210c215b4d353270616450980f", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e593c3d6494e210c215b4d353270616450980f", "html_url": "https://github.com/rust-lang/rust/commit/49e593c3d6494e210c215b4d353270616450980f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e593c3d6494e210c215b4d353270616450980f/comments", "author": {"login": "dschatzberg", "id": 165988, "node_id": "MDQ6VXNlcjE2NTk4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/165988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschatzberg", "html_url": "https://github.com/dschatzberg", "followers_url": "https://api.github.com/users/dschatzberg/followers", "following_url": "https://api.github.com/users/dschatzberg/following{/other_user}", "gists_url": "https://api.github.com/users/dschatzberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschatzberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschatzberg/subscriptions", "organizations_url": "https://api.github.com/users/dschatzberg/orgs", "repos_url": "https://api.github.com/users/dschatzberg/repos", "events_url": "https://api.github.com/users/dschatzberg/events{/privacy}", "received_events_url": "https://api.github.com/users/dschatzberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dschatzberg", "id": 165988, "node_id": "MDQ6VXNlcjE2NTk4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/165988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschatzberg", "html_url": "https://github.com/dschatzberg", "followers_url": "https://api.github.com/users/dschatzberg/followers", "following_url": "https://api.github.com/users/dschatzberg/following{/other_user}", "gists_url": "https://api.github.com/users/dschatzberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschatzberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschatzberg/subscriptions", "organizations_url": "https://api.github.com/users/dschatzberg/orgs", "repos_url": "https://api.github.com/users/dschatzberg/repos", "events_url": "https://api.github.com/users/dschatzberg/events{/privacy}", "received_events_url": "https://api.github.com/users/dschatzberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c63a4a4f58fe8f7e989fa431af860ce00ea0980", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c63a4a4f58fe8f7e989fa431af860ce00ea0980", "html_url": "https://github.com/rust-lang/rust/commit/0c63a4a4f58fe8f7e989fa431af860ce00ea0980"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "ab1605954337e611cbbee13a571b936edcd61c20", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49e593c3d6494e210c215b4d353270616450980f/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e593c3d6494e210c215b4d353270616450980f/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=49e593c3d6494e210c215b4d353270616450980f", "patch": "@@ -46,12 +46,12 @@ struct AbsEntries<T> {\n }\n \n /// An iterator over a BTreeMap's entries.\n-pub struct Entries<'a, K, V> {\n+pub struct Entries<'a, K: 'a, V: 'a> {\n     inner: AbsEntries<Traversal<'a, K, V>>\n }\n \n /// A mutable iterator over a BTreeMap's entries.\n-pub struct MutEntries<'a, K, V> {\n+pub struct MutEntries<'a, K: 'a, V: 'a> {\n     inner: AbsEntries<MutTraversal<'a, K, V>>\n }\n "}, {"sha": "9ada9ede4356f271aee6cf13ba68f874ea962730", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/49e593c3d6494e210c215b4d353270616450980f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e593c3d6494e210c215b4d353270616450980f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=49e593c3d6494e210c215b4d353270616450980f", "patch": "@@ -849,9 +849,9 @@ impl<T> Vec<T> {\n             let cap = self.cap;\n             let begin = self.ptr as *const T;\n             let end = if mem::size_of::<T>() == 0 {\n-                (ptr as uint + self.len()) as *const T;\n+                (ptr as uint + self.len()) as *const T\n             } else {\n-                ptr.offset(self.len() as int)\n+                ptr.offset(self.len() as int) as *const T\n             };\n             mem::forget(self);\n             MoveItems { allocation: ptr, cap: cap, ptr: begin, end: end }\n@@ -1788,7 +1788,7 @@ impl<T> MoveItems<T> {\n     pub fn unwrap(mut self) -> Vec<T> {\n         unsafe {\n             for _x in self { }\n-            let MoveItems { allocation, cap, iter: _iter } = self;\n+            let MoveItems { allocation, cap, ptr: _ptr, end: _end } = self;\n             mem::forget(self);\n             Vec { ptr: allocation, cap: cap, len: 0 }\n         }\n@@ -2569,33 +2569,30 @@ mod tests {\n     fn test_move_items() {\n         let mut vec = vec!(1i, 2, 3);\n         let mut vec2 : Vec<int> = vec!();\n-        for i in vec.move_iter() {\n+        for i in vec.into_iter() {\n             vec2.push(i);\n         }\n         assert!(vec2 == vec!(1i, 2, 3));\n-        assert!(vec.empty());\n     }\n \n     #[test]\n     fn test_move_items_reverse() {\n         let mut vec = vec!(1i, 2, 3);\n         let mut vec2 : Vec<int> = vec!();\n-        for i in vec.move_iter().rev() {\n+        for i in vec.into_iter().rev() {\n             vec2.push(i);\n         }\n         assert!(vec2 == vec!(3i, 2, 1));\n-        assert!(vec.empty());\n     }\n \n     #[test]\n     fn test_move_items_zero_sized() {\n         let mut vec = vec!((), (), ());\n         let mut vec2 : Vec<()> = vec!();\n-        for i in vec.move_iter() {\n+        for i in vec.into_iter() {\n             vec2.push(i);\n         }\n         assert!(vec2 == vec!((), (), ()));\n-        assert!(vec.empty());\n     }\n \n     #[bench]"}]}