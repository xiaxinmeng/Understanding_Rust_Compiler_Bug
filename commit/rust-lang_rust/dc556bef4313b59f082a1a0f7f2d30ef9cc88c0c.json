{"sha": "dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNTU2YmVmNDMxM2I1OWYwODJhMWEwZjdmMmQzMGVmOWNjODhjMGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-22T15:31:19Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-24T18:34:10Z"}, "message": "Add long diagnostics for E0272-274 (on_unimplemented)", "tree": {"sha": "8db64d7462c55da226c99e81a66d4e61103f25b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db64d7462c55da226c99e81a66d4e61103f25b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c", "html_url": "https://github.com/rust-lang/rust/commit/dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8590501b31f4ab7d6cc1a818aa717afb5a3d4d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/8590501b31f4ab7d6cc1a818aa717afb5a3d4d96", "html_url": "https://github.com/rust-lang/rust/commit/8590501b31f4ab7d6cc1a818aa717afb5a3d4d96"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "cb29f01776578f52c6a8ff99d6028f2a81da2993", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=dc556bef4313b59f082a1a0f7f2d30ef9cc88c0c", "patch": "@@ -1359,8 +1359,84 @@ for v in &vs {\n \"##,\n \n E0272: r##\"\n+The `#[rustc_on_unimplemented]` attribute lets you specify a custom error\n+message for when a particular trait isn't implemented on a type placed in a\n+position that needs that trait. For example, when the following code is\n+compiled:\n \n-The `#[rustc_on_unimplemented]` attribute lets you specify\n+```\n+fn foo<T: Index<u8>>(x: T){}\n+\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n+trait Index<Idx> { ... }\n+\n+foo(true); // `bool` does not implement `Index<u8>`\n+```\n+\n+there will be an error about `bool` not implementing `Index<u8>`, followed by a\n+note saying \"the type `bool` cannot be indexed by `u8`\".\n+\n+As you can see, you can specify type parameters in curly braces for substitution\n+with the actual types (using the regular format string syntax) in a given\n+situation. Furthermore, `{Self}` will substitute to the type (in this case,\n+`bool`) that we tried to use.\n+\n+This error appears when the curly braces contain an identifier which doesn't\n+match with any of the type parameters or the string `Self`. This might happen if\n+you misspelled a type parameter, or if you intended to use literal curly braces.\n+If it is the latter, escape the curly braces with a second curly brace of the\n+same type; e.g. a literal `{` is `{{`\n+\"##,\n+\n+E0273: r##\"\n+The `#[rustc_on_unimplemented]` attribute lets you specify a custom error\n+message for when a particular trait isn't implemented on a type placed in a\n+position that needs that trait. For example, when the following code is\n+compiled:\n+\n+```\n+fn foo<T: Index<u8>>(x: T){}\n+\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n+trait Index<Idx> { ... }\n+\n+foo(true); // `bool` does not implement `Index<u8>`\n+```\n+\n+there will be an error about `bool` not implementing `Index<u8>`, followed by a\n+note saying \"the type `bool` cannot be indexed by `u8`\".\n+\n+As you can see, you can specify type parameters in curly braces for substitution\n+with the actual types (using the regular format string syntax) in a given\n+situation. Furthermore, `{Self}` will substitute to the type (in this case,\n+`bool`) that we tried to use.\n+\n+This error appears when the curly braces do not contain an identifier. Please\n+add one of the same name as a type parameter. If you intended to use literal\n+braces, use `{{` and `}}` to escape them.\n+\"##,\n+\n+E0273: r##\"\n+The `#[rustc_on_unimplemented]` attribute lets you specify a custom error\n+message for when a particular trait isn't implemented on a type placed in a\n+position that needs that trait. For example, when the following code is\n+compiled:\n+\n+```\n+fn foo<T: Index<u8>>(x: T){}\n+\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n+trait Index<Idx> { ... }\n+\n+foo(true); // `bool` does not implement `Index<u8>`\n+```\n+\n+there will be an error about `bool` not implementing `Index<u8>`, followed by a\n+note saying \"the type `bool` cannot be indexed by `u8`\".\n+\n+For this to work, some note must be specified. An empty attribute will not do\n+anything, please remove the attribute or add some helpful note for users of the\n+trait.\n \"##,\n \n E0277: r##\"\n@@ -1787,9 +1863,6 @@ register_diagnostics! {\n //  E0134,\n //  E0135,\n     E0264, // unknown external lang item\n-    E0272, // rustc_on_unimplemented attribute refers to non-existent type parameter\n-    E0273, // rustc_on_unimplemented must have named format arguments\n-    E0274, // rustc_on_unimplemented must have a value\n     E0275, // overflow evaluating requirement\n     E0276, // requirement appears on impl method but not on corresponding trait method\n     E0278, // requirement is not satisfied"}]}