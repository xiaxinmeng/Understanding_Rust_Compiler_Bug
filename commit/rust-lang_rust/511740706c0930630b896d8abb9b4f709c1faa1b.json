{"sha": "511740706c0930630b896d8abb9b4f709c1faa1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMTc0MDcwNmMwOTMwNjMwYjg5NmQ4YWJiOWI0ZjcwOWMxZmFhMWI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-26T19:53:10Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-27T21:07:19Z"}, "message": "Remove `derived_from_illegal_borrow`", "tree": {"sha": "ab699d57fdae2f33a60234aa1c3e45c3204657d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab699d57fdae2f33a60234aa1c3e45c3204657d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/511740706c0930630b896d8abb9b4f709c1faa1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/511740706c0930630b896d8abb9b4f709c1faa1b", "html_url": "https://github.com/rust-lang/rust/commit/511740706c0930630b896d8abb9b4f709c1faa1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/511740706c0930630b896d8abb9b4f709c1faa1b/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a10430f2c50937b5417881d2a8580becd6100cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a10430f2c50937b5417881d2a8580becd6100cc", "html_url": "https://github.com/rust-lang/rust/commit/5a10430f2c50937b5417881d2a8580becd6100cc"}], "stats": {"total": 42, "additions": 1, "deletions": 41}, "files": [{"sha": "4867e05e3e8e7d7fda0aa02165ce1e561ab90e10", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/511740706c0930630b896d8abb9b4f709c1faa1b/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511740706c0930630b896d8abb9b4f709c1faa1b/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=511740706c0930630b896d8abb9b4f709c1faa1b", "patch": "@@ -149,17 +149,6 @@ pub struct Validator<'a, 'mir, 'tcx> {\n \n     /// The span of the current statement.\n     span: Span,\n-\n-    /// True if the local was assigned the result of an illegal borrow (`ops::MutBorrow`).\n-    ///\n-    /// This is used to hide errors from {re,}borrowing the newly-assigned local, instead pointing\n-    /// the user to the place where the illegal borrow occurred. This set is only populated once an\n-    /// error has been emitted, so it will never cause an erroneous `mir::Body` to pass validation.\n-    ///\n-    /// FIXME(ecstaticmorse): assert at the end of checking that if `tcx.has_errors() == false`,\n-    /// this set is empty. Note that if we start removing locals from\n-    /// `derived_from_illegal_borrow`, just checking at the end won't be enough.\n-    derived_from_illegal_borrow: BitSet<Local>,\n }\n \n impl Deref for Validator<'_, 'mir, 'tcx> {\n@@ -213,7 +202,6 @@ impl Validator<'a, 'mir, 'tcx> {\n             span: item.body.span,\n             item,\n             qualifs,\n-            derived_from_illegal_borrow: BitSet::new_empty(item.body.local_decls.len()),\n         }\n     }\n \n@@ -406,35 +394,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 );\n \n                 if borrowed_place_has_mut_interior {\n-                    let src_derived_from_illegal_borrow = borrowed_place\n-                        .as_local()\n-                        .map_or(false, |local| self.derived_from_illegal_borrow.contains(local));\n-\n-                    // Don't emit errors for borrows of values that are *themselves* the result of\n-                    // an illegal borrow (e.g., the outermost `&` in `&&Cell::new(42)`). We want to\n-                    // point the user to the place where the original illegal borrow occurred, not\n-                    // to subsequent borrows of the resulting value.\n-                    let dest_derived_from_illegal_borrow = if !src_derived_from_illegal_borrow {\n-                        self.check_op(ops::MutBorrow(kind)) == CheckOpResult::Forbidden\n-                    } else {\n-                        true\n-                    };\n-\n-                    // When the target of the assignment is a local with no projections, it will be\n-                    // marked as derived from an illegal borrow if necessary.\n-                    //\n-                    // FIXME: should we also clear `derived_from_illegal_borrow` when a local is\n-                    // assigned a new value?\n-\n-                    if dest_derived_from_illegal_borrow {\n-                        let block = &self.body[location.block];\n-                        let statement = &block.statements[location.statement_index];\n-                        if let StatementKind::Assign(box (dest, _)) = &statement.kind {\n-                            if let Some(dest) = dest.as_local() {\n-                                self.derived_from_illegal_borrow.insert(dest);\n-                            }\n-                        }\n-                    }\n+                    self.check_op(ops::MutBorrow(kind));\n                 }\n             }\n "}]}