{"sha": "fbca21edd27dcd6e49a8020ed77a133ffa357c63", "node_id": "C_kwDOAAsO6NoAKGZiY2EyMWVkZDI3ZGNkNmU0OWE4MDIwZWQ3N2ExMzNmZmEzNTdjNjM", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-06-29T02:02:30Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-06-29T02:02:30Z"}, "message": "get rid of `tcx` in deadlock handler when parallel compilation", "tree": {"sha": "2e95e882f80b978ca28d27324f23eb5b07e0c2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e95e882f80b978ca28d27324f23eb5b07e0c2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbca21edd27dcd6e49a8020ed77a133ffa357c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbca21edd27dcd6e49a8020ed77a133ffa357c63", "html_url": "https://github.com/rust-lang/rust/commit/fbca21edd27dcd6e49a8020ed77a133ffa357c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbca21edd27dcd6e49a8020ed77a133ffa357c63/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0d4813ab461ec81eab8980bb884691c97c5a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0d4813ab461ec81eab8980bb884691c97c5a35", "html_url": "https://github.com/rust-lang/rust/commit/3b0d4813ab461ec81eab8980bb884691c97c5a35"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "8796ad5a33cff0b4013dca3e9ee168fb24cc972a", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=fbca21edd27dcd6e49a8020ed77a133ffa357c63", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::registry::Registry;\n use rustc_middle::ty::tls;\n use rustc_parse::validate_attr;\n #[cfg(parallel_compiler)]\n-use rustc_query_impl::QueryCtxt;\n+use rustc_query_impl::{QueryContext, QueryCtxt};\n use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n@@ -166,20 +166,12 @@ pub fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n unsafe fn handle_deadlock() {\n     let registry = rustc_rayon_core::Registry::current();\n \n-    let context = tls::get_tlv();\n-    assert!(context != 0);\n-    rustc_data_structures::sync::assert_sync::<tls::ImplicitCtxt<'_, '_>>();\n-    let icx: &tls::ImplicitCtxt<'_, '_> = &*(context as *const tls::ImplicitCtxt<'_, '_>);\n-\n-    let session_globals = rustc_span::with_session_globals(|sg| sg as *const _);\n-    let session_globals = &*session_globals;\n-    thread::spawn(move || {\n-        tls::enter_context(icx, |_| {\n-            rustc_span::set_session_globals_then(session_globals, || {\n-                tls::with(|tcx| QueryCtxt::from_tcx(tcx).deadlock(&registry))\n-            })\n-        });\n+    let query_map = tls::with(|tcx| {\n+        QueryCtxt::from_tcx(tcx)\n+            .try_collect_active_jobs()\n+            .expect(\"active jobs shouldn't be locked in deadlock handler\")\n     });\n+    thread::spawn(move || rustc_query_impl::deadlock(query_map, &registry));\n }\n \n #[cfg(parallel_compiler)]"}, {"sha": "7c1fdc4e306a4ea159091e56f1059753522caf28", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=fbca21edd27dcd6e49a8020ed77a133ffa357c63", "patch": "@@ -27,6 +27,8 @@ use rustc_span::Span;\n mod plumbing;\n pub use plumbing::QueryCtxt;\n use rustc_query_system::query::*;\n+#[cfg(parallel_compiler)]\n+pub use rustc_query_system::query::{deadlock, QueryContext};\n \n mod keys;\n use keys::Key;"}, {"sha": "307ad4e844b35e9ebdbbcebd9b505fe07663fe4f", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=fbca21edd27dcd6e49a8020ed77a133ffa357c63", "patch": "@@ -132,11 +132,6 @@ impl<'tcx> QueryCtxt<'tcx> {\n         self.queries.on_disk_cache.as_ref()\n     }\n \n-    #[cfg(parallel_compiler)]\n-    pub unsafe fn deadlock(self, registry: &rustc_rayon_core::Registry) {\n-        rustc_query_system::query::deadlock(self, registry)\n-    }\n-\n     pub(super) fn encode_query_results(\n         self,\n         encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx>,"}, {"sha": "f1316557c2985f206745ce1cd640c6d41a269832", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbca21edd27dcd6e49a8020ed77a133ffa357c63/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=fbca21edd27dcd6e49a8020ed77a133ffa357c63", "patch": "@@ -492,14 +492,13 @@ fn remove_cycle(\n /// There may be multiple cycles involved in a deadlock, so this searches\n /// all active queries for cycles before finally resuming all the waiters at once.\n #[cfg(parallel_compiler)]\n-pub fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n+pub fn deadlock(query_map: QueryMap, registry: &rayon_core::Registry) {\n     let on_panic = OnDrop(|| {\n         eprintln!(\"deadlock handler panicked, aborting process\");\n         process::abort();\n     });\n \n     let mut wakelist = Vec::new();\n-    let query_map = tcx.try_collect_active_jobs().unwrap();\n     let mut jobs: Vec<QueryJobId> = query_map.keys().cloned().collect();\n \n     let mut found_cycle = false;"}]}