{"sha": "2445d740f741c9d0954822ef0f0cd0c2a1c6acd2", "node_id": "C_kwDOAAsO6NoAKDI0NDVkNzQwZjc0MWM5ZDA5NTQ4MjJlZjBmMGNkMGMyYTFjNmFjZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T19:03:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T19:03:27Z"}, "message": "Auto merge of #112314 - ferrocene:pa-core-alloc-abort, r=bjorn3\n\nIgnore `core`, `alloc` and `test` tests that require unwinding on `-C panic=abort`\n\nSome of the tests for `core` and `alloc` require unwinding through their use of `catch_unwind`. These tests fail when testing using `-C panic=abort` (in my case through a target without unwinding support, and `-Z panic-abort-tests`), while they should be ignored as they don't indicate a failure.\n\nThis PR marks all of these tests with this attribute:\n\n```rust\n#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n```\n\nI'm not aware of a way to test this on rust-lang/rust's CI, as we don't test any target with `-C panic=abort`, but I tested this locally on a Ferrocene target and it does indeed make the test suite pass.", "tree": {"sha": "bae2f3ff46bbc14158a255e684a1667cba4a4cde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bae2f3ff46bbc14158a255e684a1667cba4a4cde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2445d740f741c9d0954822ef0f0cd0c2a1c6acd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2445d740f741c9d0954822ef0f0cd0c2a1c6acd2", "html_url": "https://github.com/rust-lang/rust/commit/2445d740f741c9d0954822ef0f0cd0c2a1c6acd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2445d740f741c9d0954822ef0f0cd0c2a1c6acd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8cde5884d94617044c8c40d24f9fe6f355fd73f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8cde5884d94617044c8c40d24f9fe6f355fd73f", "html_url": "https://github.com/rust-lang/rust/commit/f8cde5884d94617044c8c40d24f9fe6f355fd73f"}, {"sha": "7886be6327772937d895c9738edb097b06d18b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7886be6327772937d895c9738edb097b06d18b74", "html_url": "https://github.com/rust-lang/rust/commit/7886be6327772937d895c9738edb097b06d18b74"}], "stats": {"total": 36, "additions": 0, "deletions": 36}, "files": [{"sha": "385f5a8a2e039774927f732aa05be14efb325a94", "filename": "patches/0023-coretests-Ignore-failing-tests.patch", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2445d740f741c9d0954822ef0f0cd0c2a1c6acd2/patches%2F0023-coretests-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/2445d740f741c9d0954822ef0f0cd0c2a1c6acd2/patches%2F0023-coretests-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-coretests-Ignore-failing-tests.patch?ref=2445d740f741c9d0954822ef0f0cd0c2a1c6acd2", "patch": "@@ -10,42 +10,6 @@ Subject: [PATCH] [core] Ignore failing tests\n  library/core/tests/time.rs       |  1 +\n  4 files changed, 18 insertions(+), 2 deletions(-)\n \n-diff --git a/array.rs b/array.rs\n-index 4bc44e9..8e3c7a4 100644\n---- a/array.rs\n-+++ b/array.rs\n-@@ -242,6 +242,7 @@ fn iterator_drops() {\n-     assert_eq!(i.get(), 5);\n- }\n- \n-+/*\n- // This test does not work on targets without panic=unwind support.\n- // To work around this problem, test is marked is should_panic, so it will\n- // be automagically skipped on unsuitable targets, such as\n-@@ -283,6 +284,7 @@ fn array_default_impl_avoids_leaks_on_panic() {\n-     assert_eq!(COUNTER.load(Relaxed), 0);\n-     panic!(\"test succeeded\")\n- }\n-+*/\n- \n- #[test]\n- fn empty_array_is_always_default() {\n-@@ -304,6 +304,7 @@ fn array_map() {\n-     assert_eq!(b, [1, 2, 3]);\n- }\n- \n-+/*\n- // See note on above test for why `should_panic` is used.\n- #[test]\n- #[should_panic(expected = \"test succeeded\")]\n-@@ -332,6 +333,7 @@ fn array_map_drop_safety() {\n-     assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n-     panic!(\"test succeeded\")\n- }\n-+*/\n- \n- #[test]\n- fn cell_allows_array_cycle() {\n diff --git a/atomic.rs b/atomic.rs\n index 13b12db..96fe4b9 100644\n --- a/atomic.rs"}]}