{"sha": "9b889e53e78a186a861a8407c225f9d8e0d436f5", "node_id": "C_kwDOAAsO6NoAKDliODg5ZTUzZTc4YTE4NmE4NjFhODQwN2MyMjVmOWQ4ZTBkNDM2ZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T06:56:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T06:56:02Z"}, "message": "Auto merge of #103881 - ChayimFriedman2:patch-2, r=compiler-errors\n\nClarify docs of `RefCell`\n\nComparison operators only panic if the `RefCell` is mutably borrowed, and `RefCell::swap()` can also panic if swapping a `RefCell` with itself.", "tree": {"sha": "1e34d012373b8c56c7c2b1142a4ce44c9e7b87de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e34d012373b8c56c7c2b1142a4ce44c9e7b87de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b889e53e78a186a861a8407c225f9d8e0d436f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b889e53e78a186a861a8407c225f9d8e0d436f5", "html_url": "https://github.com/rust-lang/rust/commit/9b889e53e78a186a861a8407c225f9d8e0d436f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b889e53e78a186a861a8407c225f9d8e0d436f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4624d73b34153811f7642b89bd396306aa7843", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4624d73b34153811f7642b89bd396306aa7843", "html_url": "https://github.com/rust-lang/rust/commit/6a4624d73b34153811f7642b89bd396306aa7843"}, {"sha": "d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "html_url": "https://github.com/rust-lang/rust/commit/d2eb2bb8548e97e29abfeab1825c006c5ba02efc"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "77f1ffaacff66d40fc637b7bb1619aed1dbc6bb4", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b889e53e78a186a861a8407c225f9d8e0d436f5/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b889e53e78a186a861a8407c225f9d8e0d436f5/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9b889e53e78a186a861a8407c225f9d8e0d436f5", "patch": "@@ -807,7 +807,8 @@ impl<T> RefCell<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed, or\n+    /// if `self` and `other` point to the same `RefCell`.\n     ///\n     /// # Examples\n     ///\n@@ -1193,7 +1194,7 @@ impl<T: Default> Default for RefCell<T> {\n impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n@@ -1207,39 +1208,39 @@ impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering> {\n         self.borrow().partial_cmp(&*other.borrow())\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn lt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() < *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn le(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() <= *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn gt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() > *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn ge(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() >= *other.borrow()\n@@ -1250,7 +1251,7 @@ impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n impl<T: ?Sized + Ord> Ord for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn cmp(&self, other: &RefCell<T>) -> Ordering {\n         self.borrow().cmp(&*other.borrow())"}]}