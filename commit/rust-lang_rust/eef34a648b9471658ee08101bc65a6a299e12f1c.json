{"sha": "eef34a648b9471658ee08101bc65a6a299e12f1c", "node_id": "C_kwDOAAsO6NoAKGVlZjM0YTY0OGI5NDcxNjU4ZWUwODEwMWJjNjVhNmEyOTllMTJmMWM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-01T12:34:00Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T11:58:29Z"}, "message": "stop suggesting things inside of macros", "tree": {"sha": "56c5a9472fa93e7e2ee4c49488bcb03f6e9ea7f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c5a9472fa93e7e2ee4c49488bcb03f6e9ea7f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eef34a648b9471658ee08101bc65a6a299e12f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eef34a648b9471658ee08101bc65a6a299e12f1c", "html_url": "https://github.com/rust-lang/rust/commit/eef34a648b9471658ee08101bc65a6a299e12f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eef34a648b9471658ee08101bc65a6a299e12f1c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1836c453a34bf7904508146598568dc47dcffea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1836c453a34bf7904508146598568dc47dcffea", "html_url": "https://github.com/rust-lang/rust/commit/f1836c453a34bf7904508146598568dc47dcffea"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "c44e53af5b3c2a62451557707b3a1844456dc31a", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eef34a648b9471658ee08101bc65a6a299e12f1c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef34a648b9471658ee08101bc65a6a299e12f1c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=eef34a648b9471658ee08101bc65a6a299e12f1c", "patch": "@@ -532,6 +532,22 @@ enum InferSourceKind<'tcx> {\n     },\n }\n \n+impl<'tcx> InferSource<'tcx> {\n+    /// Returns the span where we're going to insert our suggestion.\n+    ///\n+    /// Used when computing the cost of this infer source to check whether\n+    /// we're inside of a macro expansion.\n+    fn main_insert_span(&self) -> Span {\n+        match self.kind {\n+            InferSourceKind::LetBinding { insert_span, .. } => insert_span,\n+            InferSourceKind::ClosureArg { insert_span, .. } => insert_span,\n+            InferSourceKind::GenericArg { insert_span, .. } => insert_span,\n+            InferSourceKind::FullyQualifiedMethodCall { receiver, .. } => receiver.span,\n+            InferSourceKind::ClosureReturn { data, .. } => data.span(),\n+        }\n+    }\n+}\n+\n impl<'tcx> InferSourceKind<'tcx> {\n     fn ty_msg(&self, infcx: &InferCtxt<'_, 'tcx>) -> String {\n         match *self {\n@@ -638,7 +654,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         // The sources are listed in order of preference here.\n         let tcx = self.infcx.tcx;\n         let ctx = CostCtxt { tcx };\n-        match source.kind {\n+        let base_cost = match source.kind {\n             InferSourceKind::LetBinding { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::ClosureArg { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::GenericArg { def_id, generic_args, .. } => {\n@@ -655,7 +671,12 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             InferSourceKind::ClosureReturn { ty, should_wrap_expr, .. } => {\n                 30 + ctx.ty_cost(ty) + if should_wrap_expr.is_some() { 10 } else { 0 }\n             }\n-        }\n+        };\n+\n+        let suggestion_may_apply =\n+            if source.main_insert_span().can_be_used_for_suggestions() { 0 } else { 10000 };\n+\n+        base_cost + suggestion_may_apply\n     }\n \n     /// Uses `fn source_cost` to determine whether this inference source is preferable to"}, {"sha": "be60cda68b9f0fb0ce1951d6d84934f929f10a1d", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eef34a648b9471658ee08101bc65a6a299e12f1c/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eef34a648b9471658ee08101bc65a6a299e12f1c/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=eef34a648b9471658ee08101bc65a6a299e12f1c", "patch": "@@ -1,15 +1,13 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n+error[E0282]: type annotations needed for `(Vec<T>,)`\n+  --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:9\n    |\n LL |     let (x, ) = (vec![], );\n-   |                  ^^^^^^ cannot infer type of the type parameter `T` declared on the struct `Vec`\n+   |         ^^^^^\n    |\n-   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider specifying the generic argument\n-  --> $SRC_DIR/alloc/src/macros.rs:LL:COL\n+help: consider giving this pattern a type, where the type for type parameter `T` is specified\n    |\n-LL |         $crate::__rust_force_expr!($crate::vec::Vec::<T>::new())\n-   |                                                    +++++\n+LL |     let (x, ): (Vec<T>,) = (vec![], );\n+   |              +++++++++++\n \n error: aborting due to previous error\n "}]}