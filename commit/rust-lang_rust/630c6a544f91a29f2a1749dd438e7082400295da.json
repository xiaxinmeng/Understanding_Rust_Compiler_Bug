{"sha": "630c6a544f91a29f2a1749dd438e7082400295da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMGM2YTU0NGY5MWEyOWYyYTE3NDlkZDQzOGU3MDgyNDAwMjk1ZGE=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-09-30T00:25:26Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-27T19:28:48Z"}, "message": "introducing lint reason annotations (RFC 2383)\n\nThis is just for the `reason =` name-value meta-item; the\n`#[expect(lint)]` attribute also described in the RFC is a problem for\nanother day.\n\nThe place where we were directly calling `emit()` on a match block\n(whose arms returned a mutable reference to a diagnostic-builder) was\nadmittedly cute, but no longer plausibly natural after adding the\nif-let to the end of the `LintSource::Node` arm.\n\nThis regards #54503.", "tree": {"sha": "1d6100acf111dbce3aaf8c81272b18403a57f454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6100acf111dbce3aaf8c81272b18403a57f454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/630c6a544f91a29f2a1749dd438e7082400295da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/630c6a544f91a29f2a1749dd438e7082400295da", "html_url": "https://github.com/rust-lang/rust/commit/630c6a544f91a29f2a1749dd438e7082400295da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/630c6a544f91a29f2a1749dd438e7082400295da/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32f1113c93fe84f252293ae4af86be1ceae4a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32f1113c93fe84f252293ae4af86be1ceae4a84", "html_url": "https://github.com/rust-lang/rust/commit/f32f1113c93fe84f252293ae4af86be1ceae4a84"}], "stats": {"total": 231, "additions": 211, "deletions": 20}, "files": [{"sha": "86d0a5a4790060f35ce6e252b4528e4514b9cad1", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -199,8 +199,7 @@ impl<'a> LintLevelsBuilder<'a> {\n         let store = self.sess.lint_store.borrow();\n         let sess = self.sess;\n         let bad_attr = |span| {\n-            span_err!(sess, span, E0452,\n-                      \"malformed lint attribute\");\n+            struct_span_err!(sess, span, E0452, \"malformed lint attribute\")\n         };\n         for attr in attrs {\n             let level = match Level::from_str(&attr.name().as_str()) {\n@@ -214,17 +213,45 @@ impl<'a> LintLevelsBuilder<'a> {\n             let metas = if let Some(metas) = meta.meta_item_list() {\n                 metas\n             } else {\n-                bad_attr(meta.span);\n+                let mut err = bad_attr(meta.span);\n+                err.emit();\n                 continue\n             };\n \n+            // Before processing the lint names, look for a reason (RFC 2383).\n+            let mut reason = None;\n+            for li in metas {\n+                if let Some(item) = li.meta_item() {\n+                    match item.node {\n+                        ast::MetaItemKind::Word => {}  // actual lint names handled later\n+                        ast::MetaItemKind::NameValue(ref name_value) => {\n+                            let name_ident = item.ident.segments[0].ident;\n+                            let name = name_ident.name.as_str();\n+                            if name == \"reason\" {\n+                                if let ast::LitKind::Str(rationale, _) = name_value.node {\n+                                    reason = Some(rationale);\n+                                } else {\n+                                    let mut err = bad_attr(name_value.span);\n+                                    err.help(\"reason must be a string literal\");\n+                                    err.emit();\n+                                }\n+                            } else {\n+                                let mut err = bad_attr(item.span);\n+                                err.emit();\n+                            }\n+                        },\n+                        ast::MetaItemKind::List(_) => {\n+                            let mut err = bad_attr(item.span);\n+                            err.emit();\n+                        }\n+                    }\n+                }\n+            }\n+\n             for li in metas {\n                 let word = match li.word() {\n                     Some(word) => word,\n-                    None => {\n-                        bad_attr(li.span);\n-                        continue\n-                    }\n+                    None => { continue; }\n                 };\n                 let tool_name = if let Some(lint_tool) = word.is_scoped() {\n                     if !attr::is_known_lint_tool(lint_tool) {\n@@ -245,7 +272,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                 let name = word.name();\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n-                        let src = LintSource::Node(name, li.span);\n+                        let src = LintSource::Node(name, li.span, reason);\n                         for id in ids {\n                             specs.insert(*id, (level, src));\n                         }\n@@ -255,7 +282,9 @@ impl<'a> LintLevelsBuilder<'a> {\n                         match result {\n                             Ok(ids) => {\n                                 let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n-                                let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n+                                let src = LintSource::Node(\n+                                    Symbol::intern(complete_name), li.span, reason\n+                                );\n                                 for id in ids {\n                                     specs.insert(*id, (level, src));\n                                 }\n@@ -286,7 +315,9 @@ impl<'a> LintLevelsBuilder<'a> {\n                                     Applicability::MachineApplicable,\n                                 ).emit();\n \n-                                let src = LintSource::Node(Symbol::intern(&new_lint_name), li.span);\n+                                let src = LintSource::Node(\n+                                    Symbol::intern(&new_lint_name), li.span, reason\n+                                );\n                                 for id in ids {\n                                     specs.insert(*id, (level, src));\n                                 }\n@@ -368,11 +399,11 @@ impl<'a> LintLevelsBuilder<'a> {\n             };\n             let forbidden_lint_name = match forbid_src {\n                 LintSource::Default => id.to_string(),\n-                LintSource::Node(name, _) => name.to_string(),\n+                LintSource::Node(name, _, _) => name.to_string(),\n                 LintSource::CommandLine(name) => name.to_string(),\n             };\n             let (lint_attr_name, lint_attr_span) = match *src {\n-                LintSource::Node(name, span) => (name, span),\n+                LintSource::Node(name, span, _) => (name, span),\n                 _ => continue,\n             };\n             let mut diag_builder = struct_span_err!(self.sess,\n@@ -384,15 +415,19 @@ impl<'a> LintLevelsBuilder<'a> {\n                                                     forbidden_lint_name);\n             diag_builder.span_label(lint_attr_span, \"overruled by previous forbid\");\n             match forbid_src {\n-                LintSource::Default => &mut diag_builder,\n-                LintSource::Node(_, forbid_source_span) => {\n+                LintSource::Default => {},\n+                LintSource::Node(_, forbid_source_span, reason) => {\n                     diag_builder.span_label(forbid_source_span,\n-                                            \"`forbid` level set here\")\n+                                            \"`forbid` level set here\");\n+                    if let Some(rationale) = reason {\n+                        diag_builder.note(&rationale.as_str());\n+                    }\n                 },\n                 LintSource::CommandLine(_) => {\n-                    diag_builder.note(\"`forbid` lint level was set on command line\")\n+                    diag_builder.note(\"`forbid` lint level was set on command line\");\n                 }\n-            }.emit();\n+            }\n+            diag_builder.emit();\n             // don't set a separate error for every lint in the group\n             break\n         }"}, {"sha": "afd78008109828eb6814461a8bd96b246722641b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -470,15 +470,15 @@ pub enum LintSource {\n     Default,\n \n     /// Lint level was set by an attribute.\n-    Node(ast::Name, Span),\n+    Node(ast::Name, Span, Option<Symbol> /* RFC 2383 reason */),\n \n     /// Lint level was set by a command-line flag.\n     CommandLine(Symbol),\n }\n \n impl_stable_hash_for!(enum self::LintSource {\n     Default,\n-    Node(name, span),\n+    Node(name, span, reason),\n     CommandLine(text)\n });\n \n@@ -578,7 +578,10 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n                              hyphen_case_flag_val));\n             }\n         }\n-        LintSource::Node(lint_attr_name, src) => {\n+        LintSource::Node(lint_attr_name, src, reason) => {\n+            if let Some(rationale) = reason {\n+                err.note(&rationale.as_str());\n+            }\n             sess.diag_span_note_once(&mut err, DiagnosticMessageId::from(lint),\n                                      src, \"lint level defined here\");\n             if lint_attr_name.as_str() != name {"}, {"sha": "68f2ce42847d7cefb3e580dfa41032ec61812f9f", "filename": "src/test/ui/lint/reasons-erroneous.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -0,0 +1,16 @@\n+#![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n+//~^ ERROR malformed lint attribute\n+//~| HELP reason must be a string literal\n+#![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n+//~^ ERROR malformed lint attribute\n+//~| HELP reason must be a string literal\n+#![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+//~^ ERROR malformed lint attribute\n+#![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+//~^ ERROR malformed lint attribute\n+#![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+//~^ ERROR malformed lint attribute\n+#![warn(ellipsis_inclusive_range_patterns, reason)]\n+//~^ WARN unknown lint\n+\n+fn main() {}"}, {"sha": "25bdda178eee06fc4be0bf77ab0bc516afbdc35a", "filename": "src/test/ui/lint/reasons-erroneous.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -0,0 +1,45 @@\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:1:58\n+   |\n+LL | #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n+   |                                                          ^\n+   |\n+   = help: reason must be a string literal\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:4:40\n+   |\n+LL | #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: reason must be a string literal\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:7:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:9:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:11:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unknown lint: `reason`\n+  --> $DIR/reasons-erroneous.rs:13:44\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns, reason)]\n+   |                                            ^^^^^^\n+   |\n+   = note: #[warn(unknown_lints)] on by default\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0452`."}, {"sha": "cad62b3a3c16c77bb54106229ca45caaeb8f9d1b", "filename": "src/test/ui/lint/reasons-forbidden.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -0,0 +1,19 @@\n+#![forbid(\n+    unsafe_code,\n+    //~^ NOTE `forbid` level set here\n+    reason = \"our errors & omissions insurance policy doesn't cover unsafe Rust\"\n+)]\n+\n+use std::ptr;\n+\n+fn main() {\n+    let a_billion_dollar_mistake = ptr::null();\n+\n+    #[allow(unsafe_code)]\n+    //~^ ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    unsafe {\n+        *a_billion_dollar_mistake\n+    }\n+}"}, {"sha": "cc9e787b2d42dc546155ec74dcc3663c38d5fa22", "filename": "src/test/ui/lint/reasons-forbidden.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -0,0 +1,14 @@\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:12:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "9166caf9ebec6e1d103f2618cdff3cbc2b1a60b9", "filename": "src/test/ui/lint/reasons.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.rs?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -0,0 +1,31 @@\n+// compile-pass\n+\n+#![warn(elided_lifetimes_in_paths,\n+        //~^ NOTE lint level defined here\n+        reason = \"explicit anonymous lifetimes aid reasoning about ownership\")]\n+#![warn(\n+    nonstandard_style,\n+    //~^ NOTE lint level defined here\n+    reason = r#\"people shouldn't have to change their usual style habits\n+to contribute to our project\"#\n+)]\n+#![allow(unused, reason = \"unused code has never killed anypony\")]\n+\n+use std::fmt;\n+\n+pub struct CheaterDetectionMechanism {}\n+\n+impl fmt::Debug for CheaterDetectionMechanism {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        //~^ WARN hidden lifetime parameters in types are deprecated\n+        //~| NOTE explicit anonymous lifetimes aid\n+        //~| HELP indicate the anonymous lifetime\n+        fmt.debug_struct(\"CheaterDetectionMechanism\").finish()\n+    }\n+}\n+\n+fn main() {\n+    let Social_exchange_psychology = CheaterDetectionMechanism {};\n+    //~^ WARN should have a snake case name such as\n+    //~| NOTE people shouldn't have to change their usual style habits\n+}"}, {"sha": "bdaf848c340e3fd078ea3bc3a7cbefdbb58d5314", "filename": "src/test/ui/lint/reasons.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/630c6a544f91a29f2a1749dd438e7082400295da/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=630c6a544f91a29f2a1749dd438e7082400295da", "patch": "@@ -0,0 +1,28 @@\n+warning: hidden lifetime parameters in types are deprecated\n+  --> $DIR/reasons.rs:19:29\n+   |\n+LL |     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+   |                             ^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |\n+   = note: explicit anonymous lifetimes aid reasoning about ownership\n+note: lint level defined here\n+  --> $DIR/reasons.rs:3:9\n+   |\n+LL | #![warn(elided_lifetimes_in_paths,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: variable `Social_exchange_psychology` should have a snake case name such as `social_exchange_psychology`\n+  --> $DIR/reasons.rs:28:9\n+   |\n+LL |     let Social_exchange_psychology = CheaterDetectionMechanism {};\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: people shouldn't have to change their usual style habits\n+           to contribute to our project\n+note: lint level defined here\n+  --> $DIR/reasons.rs:7:5\n+   |\n+LL |     nonstandard_style,\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n+"}]}