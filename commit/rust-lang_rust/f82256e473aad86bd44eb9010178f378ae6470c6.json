{"sha": "f82256e473aad86bd44eb9010178f378ae6470c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MjI1NmU0NzNhYWQ4NmJkNDRlYjkwMTAxNzhmMzc4YWU2NDcwYzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-22T17:30:16Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:37Z"}, "message": "primval -> scalar rename", "tree": {"sha": "c5a38d5a8d3455c35ba8cba6cfdf6032c51b44e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a38d5a8d3455c35ba8cba6cfdf6032c51b44e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82256e473aad86bd44eb9010178f378ae6470c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82256e473aad86bd44eb9010178f378ae6470c6", "html_url": "https://github.com/rust-lang/rust/commit/f82256e473aad86bd44eb9010178f378ae6470c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82256e473aad86bd44eb9010178f378ae6470c6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1550fd212b2100c875f7fc2ccb9638c7ca7c709b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1550fd212b2100c875f7fc2ccb9638c7ca7c709b", "html_url": "https://github.com/rust-lang/rust/commit/1550fd212b2100c875f7fc2ccb9638c7ca7c709b"}], "stats": {"total": 158, "additions": 79, "deletions": 79}, "files": [{"sha": "2bda474a0a60479629f0c147ab03943a95bd4400", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -37,12 +37,12 @@ impl<'tcx> ConstValue<'tcx> {\n     }\n \n     #[inline]\n-    pub fn from_primval(val: Scalar) -> Self {\n+    pub fn from_scalar(val: Scalar) -> Self {\n         ConstValue::Scalar(val)\n     }\n \n     #[inline]\n-    pub fn to_primval(&self) -> Option<Scalar> {\n+    pub fn to_scalar(&self) -> Option<Scalar> {\n         match *self {\n             ConstValue::ByRef(..) => None,\n             ConstValue::ScalarPair(..) => None,\n@@ -52,12 +52,12 @@ impl<'tcx> ConstValue<'tcx> {\n \n     #[inline]\n     pub fn to_bits(&self, size: Size) -> Option<u128> {\n-        self.to_primval()?.to_bits(size).ok()\n+        self.to_scalar()?.to_bits(size).ok()\n     }\n \n     #[inline]\n     pub fn to_ptr(&self) -> Option<Pointer> {\n-        self.to_primval()?.to_ptr().ok()\n+        self.to_scalar()?.to_ptr().ok()\n     }\n }\n "}, {"sha": "edec1fe280d3d27b84ce59c7491569b12de4cd6b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -1830,12 +1830,12 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn from_primval(\n+    pub fn from_scalar(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         val: Scalar,\n         ty: Ty<'tcx>,\n     ) -> &'tcx Self {\n-        Self::from_const_value(tcx, ConstValue::from_primval(val), ty)\n+        Self::from_const_value(tcx, ConstValue::from_scalar(val), ty)\n     }\n \n     #[inline]\n@@ -1847,12 +1847,12 @@ impl<'tcx> Const<'tcx> {\n         let defined = ty.scalar_size(tcx).unwrap_or_else(|| {\n             panic!(\"non-scalar type in from_bits: {:?}\", ty)\n         }).bits() as u8;\n-        Self::from_primval(tcx, Scalar::Bits { bits, defined }, ty)\n+        Self::from_scalar(tcx, Scalar::Bits { bits, defined }, ty)\n     }\n \n     #[inline]\n     pub fn zero_sized(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n-        Self::from_primval(tcx, Scalar::undef(), ty)\n+        Self::from_scalar(tcx, Scalar::undef(), ty)\n     }\n \n     #[inline]\n@@ -1894,9 +1894,9 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn to_primval(&self) -> Option<Scalar> {\n+    pub fn to_scalar(&self) -> Option<Scalar> {\n         match self.val {\n-            ConstVal::Value(val) => val.to_primval(),\n+            ConstVal::Value(val) => val.to_scalar(),\n             _ => None,\n         }\n     }"}, {"sha": "ef0bc3ed3306a9c561904fe6c1a24123b400b42c", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -28,7 +28,7 @@ use syntax::ast::Mutability;\n use super::super::callee;\n use super::FunctionCx;\n \n-pub fn primval_to_llvm(cx: &CodegenCx,\n+pub fn scalar_to_llvm(cx: &CodegenCx,\n                        cv: Scalar,\n                        layout: &layout::Scalar,\n                        llty: Type) -> ValueRef {\n@@ -96,7 +96,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx, alloc: &Allocation) -> ValueRef {\n             layout.endian,\n             &alloc.bytes[offset..(offset + pointer_size)],\n         ).expect(\"const_alloc_to_llvm: could not read relocation pointer\") as u64;\n-        llvals.push(primval_to_llvm(\n+        llvals.push(scalar_to_llvm(\n             cx,\n             Pointer { alloc_id, offset: Size::from_bytes(ptr_offset) }.into(),\n             &layout::Scalar {\n@@ -199,13 +199,13 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         c,\n                         constant.ty,\n                     )?;\n-                    if let Some(prim) = field.to_primval() {\n+                    if let Some(prim) = field.to_scalar() {\n                         let layout = bx.cx.layout_of(field_ty);\n                         let scalar = match layout.abi {\n                             layout::Abi::Scalar(ref x) => x,\n                             _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout)\n                         };\n-                        Ok(primval_to_llvm(\n+                        Ok(scalar_to_llvm(\n                             bx.cx, prim, scalar,\n                             layout.immediate_llvm_type(bx.cx),\n                         ))"}, {"sha": "98383e882c4e8eeeb01ef9326e46a669825e85e4", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -28,7 +28,7 @@ use std::fmt;\n use std::ptr;\n \n use super::{FunctionCx, LocalRef};\n-use super::constant::{primval_to_llvm, const_alloc_to_llvm};\n+use super::constant::{scalar_to_llvm, const_alloc_to_llvm};\n use super::place::PlaceRef;\n \n /// The representation of a Rust value. The enum variant is in fact\n@@ -110,7 +110,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n                     layout::Abi::Scalar(ref x) => x,\n                     _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout)\n                 };\n-                let llval = primval_to_llvm(\n+                let llval = scalar_to_llvm(\n                     bx.cx,\n                     x,\n                     scalar,\n@@ -123,13 +123,13 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n                     layout::Abi::ScalarPair(ref a, ref b) => (a, b),\n                     _ => bug!(\"from_const: invalid ScalarPair layout: {:#?}\", layout)\n                 };\n-                let a_llval = primval_to_llvm(\n+                let a_llval = scalar_to_llvm(\n                     bx.cx,\n                     a,\n                     a_scalar,\n                     layout.scalar_pair_element_llvm_type(bx.cx, 0),\n                 );\n-                let b_llval = primval_to_llvm(\n+                let b_llval = scalar_to_llvm(\n                     bx.cx,\n                     b,\n                     b_scalar,"}, {"sha": "fb80f80cd27dd5aa9ce143e762efd40654137fd4", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::interpret::{Scalar, EvalResult, Pointer, PointerArithmetic};\n use rustc_apfloat::Float;\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n-    pub(super) fn cast_primval(\n+    pub(super) fn cast_scalar(\n         &self,\n         val: Scalar,\n         src_ty: Ty<'tcx>,"}, {"sha": "b1f290d7b614fc6b41d133cac840c46d6e276272", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -323,7 +323,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n                     bits: elem_align as u128,\n                     defined: dest_layout.size.bits() as u8,\n                 };\n-                ecx.write_primval(dest, align_val, dest_layout.ty)?;\n+                ecx.write_scalar(dest, align_val, dest_layout.ty)?;\n             }\n \n             \"size_of\" => {\n@@ -333,7 +333,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n                     bits: size,\n                     defined: dest_layout.size.bits() as u8,\n                 };\n-                ecx.write_primval(dest, size_val, dest_layout.ty)?;\n+                ecx.write_scalar(dest, size_val, dest_layout.ty)?;\n             }\n \n             \"type_id\" => {\n@@ -343,7 +343,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n                     bits: type_id,\n                     defined: dest_layout.size.bits() as u8,\n                 };\n-                ecx.write_primval(dest, id_val, dest_layout.ty)?;\n+                ecx.write_scalar(dest, id_val, dest_layout.ty)?;\n             }\n \n             name => return Err(ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()),\n@@ -488,7 +488,7 @@ pub fn const_variant_index<'a, 'tcx>(\n         },\n         Value::ByRef(ptr, align) => (ptr, align),\n     };\n-    let place = Place::from_primval_ptr(ptr, align);\n+    let place = Place::from_scalar_ptr(ptr, align);\n     ecx.read_discriminant_as_variant_index(place, ty)\n }\n "}, {"sha": "963e5b5ec62323f1d8ae382627e4e6fdf3270321", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -546,9 +546,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             }\n \n             UnaryOp(un_op, ref operand) => {\n-                let val = self.eval_operand_to_primval(operand)?;\n+                let val = self.eval_operand_to_scalar(operand)?;\n                 let val = self.unary_op(un_op, val, dest_ty)?;\n-                self.write_primval(\n+                self.write_scalar(\n                     dest,\n                     val,\n                     dest_ty,\n@@ -610,7 +610,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 let ty = self.place_ty(place);\n                 let (_, len) = src.elem_ty_and_len(ty, self.tcx.tcx);\n                 let defined = self.memory.pointer_size().bits() as u8;\n-                self.write_primval(\n+                self.write_scalar(\n                     dest,\n                     Scalar::Bits {\n                         bits: len as u128,\n@@ -652,7 +652,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 assert!(!layout.is_unsized(),\n                         \"SizeOf nullary MIR operator called for unsized type\");\n                 let defined = self.memory.pointer_size().bits() as u8;\n-                self.write_primval(\n+                self.write_scalar(\n                     dest,\n                     Scalar::Bits {\n                         bits: layout.size.bytes() as u128,\n@@ -709,7 +709,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                                     .scalar_size(self.tcx.tcx)\n                                                     .expect(\"can only cast variants to ints\")\n                                                     .bits() as u8;\n-                                        return self.write_primval(\n+                                        return self.write_scalar(\n                                             dest,\n                                             Scalar::Bits {\n                                                 bits: discr_val,\n@@ -722,8 +722,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                 layout::Variants::NicheFilling { .. } => {},\n                             }\n \n-                            let src_val = self.value_to_primval(src)?;\n-                            let dest_val = self.cast_primval(src_val, src.ty, dest_ty)?;\n+                            let src_val = self.value_to_scalar(src)?;\n+                            let dest_val = self.cast_scalar(src_val, src.ty, dest_ty)?;\n                             let valty = ValTy {\n                                 value: Value::Scalar(dest_val),\n                                 ty: dest_ty,\n@@ -799,7 +799,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 let place = self.eval_place(place)?;\n                 let discr_val = self.read_discriminant_value(place, ty)?;\n                 let defined = ty.scalar_size(self.tcx.tcx).expect(\"discriminant must be scalar\").bits() as u8;\n-                self.write_primval(dest, Scalar::Bits {\n+                self.write_scalar(dest, Scalar::Bits {\n                     bits: discr_val,\n                     defined,\n                 }, dest_ty)?;\n@@ -820,12 +820,12 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub(super) fn eval_operand_to_primval(\n+    pub(super) fn eval_operand_to_scalar(\n         &mut self,\n         op: &mir::Operand<'tcx>,\n     ) -> EvalResult<'tcx, Scalar> {\n         let valty = self.eval_operand(op)?;\n-        self.value_to_primval(valty)\n+        self.value_to_scalar(valty)\n     }\n \n     pub(crate) fn operands_to_args(\n@@ -923,7 +923,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n         let (discr_place, discr) = self.place_field(place, mir::Field::new(0), layout)?;\n         trace!(\"discr place: {:?}, {:?}\", discr_place, discr);\n-        let raw_discr = self.value_to_primval(ValTy {\n+        let raw_discr = self.value_to_scalar(ValTy {\n             value: self.read_place(discr_place)?,\n             ty: discr.ty\n         })?;\n@@ -1014,7 +1014,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 let discr_val = (discr_val << amt) >> amt;\n \n                 let (discr_dest, tag) = self.place_field(dest, mir::Field::new(0), layout)?;\n-                self.write_primval(discr_dest, Scalar::Bits {\n+                self.write_scalar(discr_dest, Scalar::Bits {\n                     bits: discr_val,\n                     defined: size as u8,\n                 }, tag.ty)?;\n@@ -1030,7 +1030,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                         self.place_field(dest, mir::Field::new(0), layout)?;\n                     let niche_value = ((variant_index - niche_variants.start()) as u128)\n                         .wrapping_add(niche_start);\n-                    self.write_primval(niche_dest, Scalar::Bits {\n+                    self.write_scalar(niche_dest, Scalar::Bits {\n                         bits: niche_value,\n                         defined: niche.size.bits() as u8,\n                     }, niche.ty)?;\n@@ -1116,20 +1116,20 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub fn value_to_primval(\n+    pub fn value_to_scalar(\n         &self,\n         ValTy { value, ty } : ValTy<'tcx>,\n     ) -> EvalResult<'tcx, Scalar> {\n         match self.follow_by_ref_value(value, ty)? {\n             Value::ByRef { .. } => bug!(\"follow_by_ref_value can't result in `ByRef`\"),\n \n-            Value::Scalar(primval) => {\n+            Value::Scalar(scalar) => {\n                 // TODO: Do we really want insta-UB here?\n-                self.ensure_valid_value(primval, ty)?;\n-                Ok(primval)\n+                self.ensure_valid_value(scalar, ty)?;\n+                Ok(scalar)\n             }\n \n-            Value::ScalarPair(..) => bug!(\"value_to_primval can't work with fat pointers\"),\n+            Value::ScalarPair(..) => bug!(\"value_to_scalar can't work with fat pointers\"),\n         }\n     }\n \n@@ -1141,7 +1141,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         self.write_value(valty, dest)\n     }\n \n-    pub fn write_primval(\n+    pub fn write_scalar(\n         &mut self,\n         dest: Place,\n         val: Scalar,\n@@ -1240,18 +1240,18 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             Value::ByRef(ptr, align) => {\n                 self.memory.copy(ptr, align.min(layout.align), dest, dest_align.min(layout.align), layout.size, false)\n             }\n-            Value::Scalar(primval) => {\n+            Value::Scalar(scalar) => {\n                 let signed = match layout.abi {\n                     layout::Abi::Scalar(ref scal) => match scal.value {\n                         layout::Primitive::Int(_, signed) => signed,\n                         _ => false,\n                     },\n-                    _ => match primval {\n+                    _ => match scalar {\n                         Scalar::Bits { defined: 0, .. } => false,\n                         _ => bug!(\"write_value_to_ptr: invalid ByVal layout: {:#?}\", layout),\n                     }\n                 };\n-                self.memory.write_primval(dest, dest_align, primval, layout.size, signed)\n+                self.memory.write_scalar(dest, dest_align, scalar, layout.size, signed)\n             }\n             Value::ScalarPair(a_val, b_val) => {\n                 trace!(\"write_value_to_ptr valpair: {:#?}\", layout);\n@@ -1264,13 +1264,13 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 let b_offset = a_size.abi_align(b.align(&self));\n                 let b_ptr = dest.ptr_offset(b_offset, &self)?.into();\n                 // TODO: What about signedess?\n-                self.memory.write_primval(a_ptr, dest_align, a_val, a_size, false)?;\n-                self.memory.write_primval(b_ptr, dest_align, b_val, b_size, false)\n+                self.memory.write_scalar(a_ptr, dest_align, a_val, a_size, false)?;\n+                self.memory.write_scalar(b_ptr, dest_align, b_val, b_size, false)\n             }\n         }\n     }\n \n-    pub fn ty_to_primval_kind(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, ScalarKind> {\n+    pub fn ty_to_scalar_kind(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, ScalarKind> {\n         use syntax::ast::FloatTy;\n \n         let kind = match ty.sty {\n@@ -1382,7 +1382,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                         .to_bits(ptr_size)?;\n                     Ok(p.to_value_with_len(len as u64, self.tcx.tcx))\n                 },\n-                _ => bug!(\"unsized primval ptr read from {:?}\", pointee_ty),\n+                _ => bug!(\"unsized scalar ptr read from {:?}\", pointee_ty),\n             }\n         }\n     }\n@@ -1395,10 +1395,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     ) -> EvalResult<'tcx> {\n         match ty.sty {\n             ty::TyBool => {\n-                self.memory.read_primval(ptr, ptr_align, Size::from_bytes(1))?.to_bool()?;\n+                self.memory.read_scalar(ptr, ptr_align, Size::from_bytes(1))?.to_bool()?;\n             }\n             ty::TyChar => {\n-                let c = self.memory.read_primval(ptr, ptr_align, Size::from_bytes(4))?.to_bits(Size::from_bytes(4))? as u32;\n+                let c = self.memory.read_scalar(ptr, ptr_align, Size::from_bytes(4))?.to_bits(Size::from_bytes(4))? as u32;\n                 match ::std::char::from_u32(c) {\n                     Some(..) => (),\n                     None => return err!(InvalidChar(c as u128)),\n@@ -1421,7 +1421,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n                 if let layout::Abi::Scalar(ref scalar) = self.layout_of(ty)?.abi {\n                     let size = scalar.value.size(self);\n-                    self.memory.read_primval(ptr, ptr_align, size)?;\n+                    self.memory.read_scalar(ptr, ptr_align, size)?;\n                 }\n             }\n \n@@ -1455,17 +1455,17 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n         match layout.abi {\n             layout::Abi::Scalar(..) => {\n-                let primval = self.memory.read_primval(ptr, ptr_align, layout.size)?;\n-                Ok(Some(Value::Scalar(primval)))\n+                let scalar = self.memory.read_scalar(ptr, ptr_align, layout.size)?;\n+                Ok(Some(Value::Scalar(scalar)))\n             }\n             layout::Abi::ScalarPair(ref a, ref b) => {\n                 let (a, b) = (&a.value, &b.value);\n                 let (a_size, b_size) = (a.size(self), b.size(self));\n                 let a_ptr = ptr;\n                 let b_offset = a_size.abi_align(b.align(self));\n                 let b_ptr = ptr.offset(b_offset, self)?.into();\n-                let a_val = self.memory.read_primval(a_ptr, ptr_align, a_size)?;\n-                let b_val = self.memory.read_primval(b_ptr, ptr_align, b_size)?;\n+                let a_val = self.memory.read_scalar(a_ptr, ptr_align, a_size)?;\n+                let b_val = self.memory.read_scalar(b_ptr, ptr_align, b_size)?;\n                 Ok(Some(Value::ScalarPair(a_val, b_val)))\n             }\n             _ => Ok(None),\n@@ -1584,7 +1584,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     }\n                     let (src_f_value, src_field) = match src {\n                         Value::ByRef(ptr, align) => {\n-                            let src_place = Place::from_primval_ptr(ptr, align);\n+                            let src_place = Place::from_scalar_ptr(ptr, align);\n                             let (src_f_place, src_field) =\n                                 self.place_field(src_place, mir::Field::new(i), src_layout)?;\n                             (self.read_place(src_f_place)?, src_field)"}, {"sha": "42e93593028db3f4dd8c1ae4c4bf503e2016024b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub fn read_primval(&self, ptr: Pointer, ptr_align: Align, size: Size) -> EvalResult<'tcx, Scalar> {\n+    pub fn read_scalar(&self, ptr: Pointer, ptr_align: Align, size: Size) -> EvalResult<'tcx, Scalar> {\n         self.check_relocation_edges(ptr, size)?; // Make sure we don't read part of a pointer as a pointer\n         let endianness = self.endianness();\n         let bytes = self.get_bytes_unchecked(ptr, size, ptr_align.min(self.int_align(size)))?;\n@@ -738,10 +738,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     }\n \n     pub fn read_ptr_sized(&self, ptr: Pointer, ptr_align: Align) -> EvalResult<'tcx, Scalar> {\n-        self.read_primval(ptr, ptr_align, self.pointer_size())\n+        self.read_scalar(ptr, ptr_align, self.pointer_size())\n     }\n \n-    pub fn write_primval(&mut self, ptr: Scalar, ptr_align: Align, val: Scalar, size: Size, signed: bool) -> EvalResult<'tcx> {\n+    pub fn write_scalar(&mut self, ptr: Scalar, ptr_align: Align, val: Scalar, size: Size, signed: bool) -> EvalResult<'tcx> {\n         let endianness = self.endianness();\n \n         let bytes = match val {\n@@ -787,7 +787,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn write_ptr_sized_unsigned(&mut self, ptr: Pointer, ptr_align: Align, val: Scalar) -> EvalResult<'tcx> {\n         let ptr_size = self.pointer_size();\n-        self.write_primval(ptr.into(), ptr_align, val, ptr_size, false)\n+        self.write_scalar(ptr.into(), ptr_align, val, ptr_size, false)\n     }\n \n     fn int_align(&self, size: Size) -> Align {"}, {"sha": "13c576b4883e9bb94dfd8ef4c3378f1924d154e9", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -16,8 +16,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         left: ValTy<'tcx>,\n         right: ValTy<'tcx>,\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n-        let left_val = self.value_to_primval(left)?;\n-        let right_val = self.value_to_primval(right)?;\n+        let left_val = self.value_to_scalar(left)?;\n+        let right_val = self.value_to_scalar(right)?;\n         self.binary_op(op, left_val, left.ty, right_val, right.ty)\n     }\n \n@@ -51,7 +51,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, bool> {\n         let (val, overflowed) = self.binop_with_overflow(op, left, right)?;\n-        self.write_primval(dest, val, dest_ty)?;\n+        self.write_scalar(dest, val, dest_ty)?;\n         Ok(overflowed)\n     }\n }\n@@ -68,8 +68,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n         use rustc::mir::BinOp::*;\n \n-        let left_kind = self.ty_to_primval_kind(left_ty)?;\n-        let right_kind = self.ty_to_primval_kind(right_ty)?;\n+        let left_kind = self.ty_to_scalar_kind(left_ty)?;\n+        let right_kind = self.ty_to_scalar_kind(right_ty)?;\n         trace!(\"Running binary op {:?}: {:?} ({:?}), {:?} ({:?})\", bin_op, left, left_kind, right, right_kind);\n \n         // I: Handle operations that support pointers"}, {"sha": "c1bcffe7e9aa5812b2956a61a9b7360f24a1a29f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -35,10 +35,10 @@ pub enum PlaceExtra {\n impl<'tcx> Place {\n     /// Produces a Place that will error if attempted to be read from\n     pub fn undef() -> Self {\n-        Self::from_primval_ptr(Scalar::undef().into(), Align::from_bytes(1, 1).unwrap())\n+        Self::from_scalar_ptr(Scalar::undef().into(), Align::from_bytes(1, 1).unwrap())\n     }\n \n-    pub fn from_primval_ptr(ptr: Scalar, align: Align) -> Self {\n+    pub fn from_scalar_ptr(ptr: Scalar, align: Align) -> Self {\n         Place::Ptr {\n             ptr,\n             align,\n@@ -47,7 +47,7 @@ impl<'tcx> Place {\n     }\n \n     pub fn from_ptr(ptr: Pointer, align: Align) -> Self {\n-        Self::from_primval_ptr(ptr.into(), align)\n+        Self::from_scalar_ptr(ptr.into(), align)\n     }\n \n     pub fn to_ptr_align_extra(self) -> (Scalar, Align, PlaceExtra) {\n@@ -310,7 +310,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     extra: PlaceExtra::Length(len),\n                 }\n             }\n-            _ => Place::from_primval_ptr(self.into_ptr(val)?, layout.align),\n+            _ => Place::from_scalar_ptr(self.into_ptr(val)?, layout.align),\n         })\n     }\n \n@@ -388,7 +388,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let value = self.frame().get_local(local)?;\n                 let ty = self.tcx.types.usize;\n                 let n = self\n-                    .value_to_primval(ValTy { value, ty })?\n+                    .value_to_scalar(ValTy { value, ty })?\n                     .to_bits(self.tcx.data_layout.pointer_size)?;\n                 self.place_index(base, base_ty, n as u64)\n             }"}, {"sha": "2cc355b04e314db2648766df602d53ecc9245a36", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -38,7 +38,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 ..\n             } => {\n                 let discr_val = self.eval_operand(discr)?;\n-                let discr_prim = self.value_to_primval(discr_val)?;\n+                let discr_prim = self.value_to_scalar(discr_val)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n@@ -67,7 +67,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let func = self.eval_operand(func)?;\n                 let (fn_def, sig) = match func.ty.sty {\n                     ty::TyFnPtr(sig) => {\n-                        let fn_ptr = self.value_to_primval(func)?.to_ptr()?;\n+                        let fn_ptr = self.value_to_scalar(func)?.to_ptr()?;\n                         let instance = self.memory.get_fn(fn_ptr)?;\n                         let instance_ty = instance.ty(*self.tcx);\n                         match instance_ty.sty {\n@@ -144,17 +144,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 target,\n                 ..\n             } => {\n-                let cond_val = self.eval_operand_to_primval(cond)?.to_bool()?;\n+                let cond_val = self.eval_operand_to_scalar(cond)?.to_bool()?;\n                 if expected == cond_val {\n                     self.goto_block(target);\n                 } else {\n                     use rustc::mir::interpret::EvalErrorKind::*;\n                     return match *msg {\n                         BoundsCheck { ref len, ref index } => {\n-                            let len = self.eval_operand_to_primval(len)\n+                            let len = self.eval_operand_to_scalar(len)\n                                 .expect(\"can't eval len\")\n                                 .to_bits(self.memory().pointer_size())? as u64;\n-                            let index = self.eval_operand_to_primval(index)\n+                            let index = self.eval_operand_to_scalar(index)\n                                 .expect(\"can't eval index\")\n                                 .to_bits(self.memory().pointer_size())? as u64;\n                             err!(BoundsCheck { len, index })"}, {"sha": "0083c22dc177e4c4e0145a1f7ad6a89cbb3bed59", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82256e473aad86bd44eb9010178f378ae6470c6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f82256e473aad86bd44eb9010178f378ae6470c6", "patch": "@@ -305,7 +305,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n \n                 let val = self.eval_operand(arg)?;\n                 let prim = self.use_ecx(span, |this| {\n-                    this.ecx.value_to_primval(ValTy { value: val.0, ty: val.1 })\n+                    this.ecx.value_to_scalar(ValTy { value: val.0, ty: val.1 })\n                 })?;\n                 let val = self.use_ecx(span, |this| this.ecx.unary_op(op, prim, val.1))?;\n                 Some((Value::Scalar(val), place_ty, span))\n@@ -326,7 +326,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 }\n \n                 let r = self.use_ecx(span, |this| {\n-                    this.ecx.value_to_primval(ValTy { value: right.0, ty: right.1 })\n+                    this.ecx.value_to_scalar(ValTy { value: right.0, ty: right.1 })\n                 })?;\n                 if op == BinOp::Shr || op == BinOp::Shl {\n                     let left_ty = left.ty(self.mir, self.tcx);\n@@ -353,7 +353,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 }\n                 let left = self.eval_operand(left)?;\n                 let l = self.use_ecx(span, |this| {\n-                    this.ecx.value_to_primval(ValTy { value: left.0, ty: left.1 })\n+                    this.ecx.value_to_scalar(ValTy { value: left.0, ty: left.1 })\n                 })?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n                 let (val, overflow) = self.use_ecx(span, |this| {"}]}