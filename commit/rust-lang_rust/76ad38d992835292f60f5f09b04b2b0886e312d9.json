{"sha": "76ad38d992835292f60f5f09b04b2b0886e312d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YWQzOGQ5OTI4MzUyOTJmNjBmNWYwOWIwNGIyYjA4ODZlMzEyZDk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-12T12:30:39Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-19T10:16:12Z"}, "message": "lint: prohibit fields with opaque types\n\nOpaque types cannot be used in extern declarations, and normally cannot\nexist in fields - except with type aliases to `impl Trait` and\nprojections which normalize to them.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "5af08108de034e1280b5ffa1fb73d15a498a15b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af08108de034e1280b5ffa1fb73d15a498a15b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76ad38d992835292f60f5f09b04b2b0886e312d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7skGwACgkQJZLnbIc4\nH9mASw//dLxF2hvUcme7nys+oHzuZUZuc9HiUQzHA4PccXXVvNeyFPGOp6pJn8av\nW/B/tiWEN0mJrfUqsxaoLRa26CRrLfqE+KjycKX7JD0xKzFRT3wKW+MjZClI8vvj\nO0MazECHj9xTDVSDwltGpFp145h8fzglYtYrMI9fSmoRytot1Mzg8ca/hQnjDf/5\nEckDJSNzJQAb5LLRjNeAvJbQ2Fqs6Q889ZxbcnjDrFRqhSC6TEYNZL5d858l/59t\nlC2SrBDVLTLRbbr4qZyuqSGsOSeCKubtzMqy3/vej0vEO1eGzuSgJdbHuPX7KhLk\nH8gf3OLRswuptdCX8t0j24zB8rRsMt7ytBhUfoTyNYIhOAX9nmAjL1B+OSTuIo+i\nRl+8JdfyBcXWp74+mtYN0O2xVX7GNiZH1e/0gNeVOsg2jDovtjAxLdhce5BxQQe8\nlv6t1yneskoYijthpwIMj4cotHj3Epya2EmEX9OAWx+19QzHtlL86dEPVf9cXO66\neNPhgxgPG6XG1wI7JUewEF63/M2uU1xkNq9mGp5ogC3/NqoFVv71EbXWFWRHPtED\nF4Bhvl56X+t2Jd2Skjiakm/CWrPBl/tJUSI18mnYT9bm8hTuR+8FdF1sOnGiKSac\nFouDOB36yKXOdyHSYyAn7ZzySZyN1CdpfTQkKe7SgpbJTO9yjws=\n=88an\n-----END PGP SIGNATURE-----", "payload": "tree 5af08108de034e1280b5ffa1fb73d15a498a15b6\nparent d5b07373cef98dec5672cd94bf14609eec65aa03\nauthor David Wood <david@davidtw.co> 1591965039 +0100\ncommitter David Wood <david@davidtw.co> 1592561772 +0100\n\nlint: prohibit fields with opaque types\n\nOpaque types cannot be used in extern declarations, and normally cannot\nexist in fields - except with type aliases to `impl Trait` and\nprojections which normalize to them.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76ad38d992835292f60f5f09b04b2b0886e312d9", "html_url": "https://github.com/rust-lang/rust/commit/76ad38d992835292f60f5f09b04b2b0886e312d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76ad38d992835292f60f5f09b04b2b0886e312d9/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b07373cef98dec5672cd94bf14609eec65aa03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b07373cef98dec5672cd94bf14609eec65aa03", "html_url": "https://github.com/rust-lang/rust/commit/d5b07373cef98dec5672cd94bf14609eec65aa03"}], "stats": {"total": 155, "additions": 141, "deletions": 14}, "files": [{"sha": "f429eef90c8c8b4aaf5784fd5575ba959d37d0cf", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -11,7 +11,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{sign_extend, truncate};\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -597,6 +597,22 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n+    /// Checks if the given field's type is \"ffi-safe\".\n+    fn check_field_type_for_ffi(\n+        &self,\n+        cache: &mut FxHashSet<Ty<'tcx>>,\n+        field: &ty::FieldDef,\n+        substs: SubstsRef<'tcx>,\n+    ) -> FfiResult<'tcx> {\n+        let field_ty = field.ty(self.cx.tcx, substs);\n+        if field_ty.has_opaque_types() {\n+            self.check_type_for_ffi(cache, field_ty)\n+        } else {\n+            let field_ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, field_ty);\n+            self.check_type_for_ffi(cache, field_ty)\n+        }\n+    }\n+\n     /// Checks if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n     fn check_type_for_ffi(&self, cache: &mut FxHashSet<Ty<'tcx>>, ty: Ty<'tcx>) -> FfiResult<'tcx> {\n@@ -654,11 +670,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             if let Some(field) =\n                                 def.transparent_newtype_field(cx, self.cx.param_env)\n                             {\n-                                let field_ty = cx.normalize_erasing_regions(\n-                                    self.cx.param_env,\n-                                    field.ty(cx, substs),\n-                                );\n-                                self.check_type_for_ffi(cache, field_ty)\n+                                self.check_field_type_for_ffi(cache, field, substs)\n                             } else {\n                                 FfiSafe\n                             }\n@@ -667,11 +679,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             // actually safe.\n                             let mut all_phantom = true;\n                             for field in &def.non_enum_variant().fields {\n-                                let field_ty = cx.normalize_erasing_regions(\n-                                    self.cx.param_env,\n-                                    field.ty(cx, substs),\n-                                );\n-                                let r = self.check_type_for_ffi(cache, field_ty);\n+                                let r = self.check_field_type_for_ffi(cache, field, substs);\n                                 match r {\n                                     FfiSafe => {\n                                         all_phantom = false;\n@@ -886,6 +894,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             ty::Foreign(..) => FfiSafe,\n \n+            // While opaque types are checked for earlier, if a projection in a struct field\n+            // normalizes to an opaque type, then it will reach this branch.\n+            ty::Opaque(..) => {\n+                FfiUnsafe { ty, reason: \"opaque types have no C equivalent\", help: None }\n+            }\n+\n             ty::Param(..)\n             | ty::Infer(..)\n             | ty::Bound(..)\n@@ -895,7 +909,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             | ty::GeneratorWitness(..)\n             | ty::Placeholder(..)\n             | ty::Projection(..)\n-            | ty::Opaque(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }\n     }\n@@ -925,8 +938,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n-        use rustc_middle::ty::TypeFoldable;\n-\n         struct ProhibitOpaqueTypes<'tcx> {\n             ty: Option<Ty<'tcx>>,\n         };"}, {"sha": "86cc5e2c31e8170014f5c25081af499220217e29", "filename": "src/test/ui/lint/lint-ctypes-73249-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -0,0 +1,29 @@\n+#![feature(type_alias_impl_trait)]\n+#![deny(improper_ctypes)]\n+\n+pub trait Baz { }\n+\n+impl Baz for () { }\n+\n+type Qux = impl Baz;\n+\n+fn assign() -> Qux {}\n+\n+pub trait Foo {\n+    type Assoc: 'static;\n+}\n+\n+impl Foo for () {\n+    type Assoc = Qux;\n+}\n+\n+#[repr(transparent)]\n+pub struct A<T: Foo> {\n+    x: &'static <T as Foo>::Assoc,\n+}\n+\n+extern \"C\" {\n+    pub fn lint_me() -> A<()>; //~ ERROR: uses type `impl Baz`\n+}\n+\n+fn main() {}"}, {"sha": "36dbe3217d75ada5d0e445ea6b3f217c669109cf", "filename": "src/test/ui/lint/lint-ctypes-73249-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-2.rs:26:25\n+   |\n+LL |     pub fn lint_me() -> A<()>;\n+   |                         ^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-2.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "25c4e7c92a854f303933b1899efa950fa131bbc2", "filename": "src/test/ui/lint/lint-ctypes-73249-3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -0,0 +1,21 @@\n+#![feature(type_alias_impl_trait)]\n+#![deny(improper_ctypes)]\n+\n+pub trait Baz { }\n+\n+impl Baz for u32 { }\n+\n+type Qux = impl Baz;\n+\n+fn assign() -> Qux { 3 }\n+\n+#[repr(C)]\n+pub struct A {\n+    x: Qux,\n+}\n+\n+extern \"C\" {\n+    pub fn lint_me() -> A; //~ ERROR: uses type `impl Baz`\n+}\n+\n+fn main() {}"}, {"sha": "7d133287bd73e9468ebccc804cb3b5d966f5be54", "filename": "src/test/ui/lint/lint-ctypes-73249-3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-3.rs:18:25\n+   |\n+LL |     pub fn lint_me() -> A;\n+   |                         ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-3.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "61e46983ede65479cf3b051a82245ab962dde4dd", "filename": "src/test/ui/lint/lint-ctypes-73249-5.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -0,0 +1,21 @@\n+#![feature(type_alias_impl_trait)]\n+#![deny(improper_ctypes)]\n+\n+pub trait Baz { }\n+\n+impl Baz for u32 { }\n+\n+type Qux = impl Baz;\n+\n+fn assign() -> Qux { 3 }\n+\n+#[repr(transparent)]\n+pub struct A {\n+    x: Qux,\n+}\n+\n+extern \"C\" {\n+    pub fn lint_me() -> A; //~ ERROR: uses type `impl Baz`\n+}\n+\n+fn main() {}"}, {"sha": "d2780cb60e7dd11b1af1587eb7281a08c058dc36", "filename": "src/test/ui/lint/lint-ctypes-73249-5.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76ad38d992835292f60f5f09b04b2b0886e312d9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr?ref=76ad38d992835292f60f5f09b04b2b0886e312d9", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-5.rs:18:25\n+   |\n+LL |     pub fn lint_me() -> A;\n+   |                         ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-5.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}]}