{"sha": "ff34064aa3b49eb649d411b733201c512e9c5eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMzQwNjRhYTNiNDllYjY0OWQ0MTFiNzMzMjAxYzUxMmU5YzVlZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-23T00:28:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-23T00:28:35Z"}, "message": "auto merge of #7916 : olsonjeffery/rust/newrt_timer, r=brson\n\nMy first bit of newsched IO work. Pretty simple and limited in scope.\r\n\r\nthe RtioTimer trait only has a `sleep(msecs: u64)` method, for now. Taking requests on what else ought to be here.\r\n\r\noh yeah: this resolves #6435", "tree": {"sha": "66bd62614d0e9dceeef47f9dfae47e5c00cb6591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66bd62614d0e9dceeef47f9dfae47e5c00cb6591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff34064aa3b49eb649d411b733201c512e9c5eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff34064aa3b49eb649d411b733201c512e9c5eed", "html_url": "https://github.com/rust-lang/rust/commit/ff34064aa3b49eb649d411b733201c512e9c5eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff34064aa3b49eb649d411b733201c512e9c5eed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73921f91a326e51118077ff3fd5c5c6196ff7c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/73921f91a326e51118077ff3fd5c5c6196ff7c3a", "html_url": "https://github.com/rust-lang/rust/commit/73921f91a326e51118077ff3fd5c5c6196ff7c3a"}, {"sha": "3169bb70d8bef4fea776916f900bf9e407e6469c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3169bb70d8bef4fea776916f900bf9e407e6469c", "html_url": "https://github.com/rust-lang/rust/commit/3169bb70d8bef4fea776916f900bf9e407e6469c"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "838c2d86c9fa267607df1002b342cd8e33dbf1bf", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=ff34064aa3b49eb649d411b733201c512e9c5eed", "patch": "@@ -252,6 +252,7 @@ pub use self::stdio::print;\n pub use self::stdio::println;\n \n pub use self::file::FileStream;\n+pub use self::timer::Timer;\n pub use self::net::ip::IpAddr;\n pub use self::net::tcp::TcpListener;\n pub use self::net::tcp::TcpStream;\n@@ -296,6 +297,9 @@ mod extensions;\n /// Non-I/O things needed by the I/O module\n mod support;\n \n+/// Basic Timer\n+pub mod timer;\n+\n /// Thread-blocking implementations\n pub mod native {\n     /// Posix file I/O"}, {"sha": "c7820ebf6238bb6b7508ffc7afbc0089ad77bf00", "filename": "src/libstd/rt/io/timer.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ftimer.rs?ref=ff34064aa3b49eb649d411b733201c512e9c5eed", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use option::{Option, Some, None};\n+use result::{Ok, Err};\n+use rt::io::{io_error};\n+use rt::rtio::{IoFactory, IoFactoryObject,\n+               RtioTimer, RtioTimerObject};\n+use rt::local::Local;\n+\n+pub struct Timer(~RtioTimerObject);\n+\n+impl Timer {\n+    fn new_on_rt(i: ~RtioTimerObject) -> Timer {\n+        Timer(i)\n+    }\n+\n+    pub fn new() -> Option<Timer> {\n+        let timer = unsafe {\n+            rtdebug!(\"Timer::init: borrowing io to init timer\");\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n+            rtdebug!(\"about to init timer\");\n+            (*io).timer_init()\n+        };\n+        match timer {\n+            Ok(t) => Some(Timer::new_on_rt(t)),\n+            Err(ioerr) => {\n+                rtdebug!(\"Timer::init: failed to init: %?\", ioerr);\n+                io_error::cond.raise(ioerr);\n+                None\n+            }\n+        }\n+    }\n+}\n+\n+impl RtioTimer for Timer {\n+    fn sleep(&self, msecs: u64) {\n+        (**self).sleep(msecs);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use rt::test::*;\n+    use option::{Some, None};\n+    #[test]\n+    fn test_io_timer_sleep_simple() {\n+        do run_in_newsched_task {\n+            let timer = Timer::new();\n+            match timer {\n+                Some(t) => t.sleep(1),\n+                None => assert!(false)\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "aa8b9dc3a944d67342b88847b6f402c135f21bc2", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=ff34064aa3b49eb649d411b733201c512e9c5eed", "patch": "@@ -23,6 +23,7 @@ pub type IoFactoryObject = uvio::UvIoFactory;\n pub type RtioTcpStreamObject = uvio::UvTcpStream;\n pub type RtioTcpListenerObject = uvio::UvTcpListener;\n pub type RtioUdpSocketObject = uvio::UvUdpSocket;\n+pub type RtioTimerObject = uvio::UvTimer;\n \n pub trait EventLoop {\n     fn run(&mut self);\n@@ -46,6 +47,7 @@ pub trait IoFactory {\n     fn tcp_connect(&mut self, addr: IpAddr) -> Result<~RtioTcpStreamObject, IoError>;\n     fn tcp_bind(&mut self, addr: IpAddr) -> Result<~RtioTcpListenerObject, IoError>;\n     fn udp_bind(&mut self, addr: IpAddr) -> Result<~RtioUdpSocketObject, IoError>;\n+    fn timer_init(&mut self) -> Result<~RtioTimerObject, IoError>;\n }\n \n pub trait RtioTcpListener : RtioSocket {\n@@ -84,3 +86,7 @@ pub trait RtioUdpSocket : RtioSocket {\n     fn hear_broadcasts(&mut self);\n     fn ignore_broadcasts(&mut self);\n }\n+\n+pub trait RtioTimer {\n+    fn sleep(&self, msecs: u64);\n+}"}, {"sha": "9c386b4bed11d16c0ee7f0c3f03e5d4a34a15726", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff34064aa3b49eb649d411b733201c512e9c5eed/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=ff34064aa3b49eb649d411b733201c512e9c5eed", "patch": "@@ -280,6 +280,10 @@ impl IoFactory for UvIoFactory {\n             }\n         }\n     }\n+\n+    fn timer_init(&mut self) -> Result<~RtioTimerObject, IoError> {\n+        Ok(~UvTimer(TimerWatcher::new(self.uv_loop())))\n+    }\n }\n \n // FIXME #6090: Prefer newtype structs but Drop doesn't work\n@@ -562,6 +566,48 @@ impl RtioUdpSocket for UvUdpSocket {\n     fn ignore_broadcasts(&mut self) { fail!(); }\n }\n \n+pub struct UvTimer(timer::TimerWatcher);\n+\n+impl UvTimer {\n+    fn new(w: timer::TimerWatcher) -> UvTimer {\n+        UvTimer(w)\n+    }\n+}\n+\n+impl Drop for UvTimer {\n+    fn drop(&self) {\n+        rtdebug!(\"closing UvTimer\");\n+        let scheduler = Local::take::<Scheduler>();\n+        do scheduler.deschedule_running_task_and_then |_, task| {\n+            let task_cell = Cell::new(task);\n+            do self.close {\n+                let scheduler = Local::take::<Scheduler>();\n+                scheduler.resume_blocked_task_immediately(task_cell.take());\n+            }\n+        }\n+    }\n+}\n+\n+impl RtioTimer for UvTimer {\n+    fn sleep(&self, msecs: u64) {\n+        let scheduler = Local::take::<Scheduler>();\n+        assert!(scheduler.in_task_context());\n+        do scheduler.deschedule_running_task_and_then |sched, task| {\n+            rtdebug!(\"sleep: entered scheduler context\");\n+            assert!(!sched.in_task_context());\n+            let task_cell = Cell::new(task);\n+            let mut watcher = **self;\n+            do watcher.start(msecs, 0) |_, status| {\n+                assert!(status.is_none());\n+                let scheduler = Local::take::<Scheduler>();\n+                scheduler.resume_blocked_task_immediately(task_cell.take());\n+            }\n+        }\n+        let mut w = **self;\n+        w.stop();\n+    }\n+}\n+\n #[test]\n fn test_simple_io_no_connect() {\n     do run_in_newsched_task {\n@@ -832,3 +878,20 @@ fn test_udp_many_read() {\n         }\n     }\n }\n+\n+fn test_timer_sleep_simple_impl() {\n+    unsafe {\n+        let io = Local::unsafe_borrow::<IoFactoryObject>();\n+        let timer = (*io).timer_init();\n+        match timer {\n+            Ok(t) => t.sleep(1),\n+            Err(_) => assert!(false)\n+        }\n+    }\n+}\n+#[test]\n+fn test_timer_sleep_simple() {\n+    do run_in_newsched_task {\n+        test_timer_sleep_simple_impl();\n+    }\n+}"}]}