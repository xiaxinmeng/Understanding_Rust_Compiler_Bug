{"sha": "9483db5052415464fcb59ab480479afdd35710a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODNkYjUwNTI0MTU0NjRmY2I1OWFiNDgwNDc5YWZkZDM1NzEwYTU=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2019-09-04T23:08:52Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2019-09-05T05:32:53Z"}, "message": "Opaque type locations in error message for clarity.", "tree": {"sha": "e4b64e10ce85501bc4805c716f32c3f4dd2b38d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b64e10ce85501bc4805c716f32c3f4dd2b38d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9483db5052415464fcb59ab480479afdd35710a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9483db5052415464fcb59ab480479afdd35710a5", "html_url": "https://github.com/rust-lang/rust/commit/9483db5052415464fcb59ab480479afdd35710a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9483db5052415464fcb59ab480479afdd35710a5/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b50520835f3b14409797139eca23f401a529e711", "url": "https://api.github.com/repos/rust-lang/rust/commits/b50520835f3b14409797139eca23f401a529e711", "html_url": "https://github.com/rust-lang/rust/commit/b50520835f3b14409797139eca23f401a529e711"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "fdadda92010a55d8a8bc785da118a9317d6bfc81", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9483db5052415464fcb59ab480479afdd35710a5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9483db5052415464fcb59ab480479afdd35710a5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9483db5052415464fcb59ab480479afdd35710a5", "patch": "@@ -1136,12 +1136,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Some((expected, found)) = expected_found {\n             match (terr, is_simple_error, expected == found) {\n                 (&TypeError::Sorts(ref values), false, true) => {\n+                    let sort_string = | a_type: Ty<'tcx> |\n+                        if let ty::Opaque(def_id, _) = a_type.sty {\n+                            format!(\" (opaque type at {})\", self.tcx.sess.source_map()\n+                                .mk_substr_filename(self.tcx.def_span(def_id)))\n+                        } else {\n+                            format!(\" ({})\", a_type.sort_string(self.tcx))\n+                        };\n                     diag.note_expected_found_extra(\n                         &\"type\",\n                         expected,\n                         found,\n-                        &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n-                        &format!(\" ({})\", values.found.sort_string(self.tcx)),\n+                        &sort_string(values.expected),\n+                        &sort_string(values.found),\n                     );\n                 }\n                 (_, false, _) => {"}, {"sha": "450cbd4799fdc05b8ad5e8119f10ad1adb319f92", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9483db5052415464fcb59ab480479afdd35710a5/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9483db5052415464fcb59ab480479afdd35710a5/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=9483db5052415464fcb59ab480479afdd35710a5", "patch": "@@ -10,8 +10,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- if and else have incompatible types\n    |\n-   = note: expected type `impl std::future::Future` (opaque type)\n-              found type `impl std::future::Future` (opaque type)\n+   = note: expected type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+              found type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n    = help: if both `Future`s have the same `Output` type, consider `.await`ing on both of them\n "}]}