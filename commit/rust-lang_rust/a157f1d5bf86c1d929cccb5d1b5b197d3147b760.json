{"sha": "a157f1d5bf86c1d929cccb5d1b5b197d3147b760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNTdmMWQ1YmY4NmMxZDkyOWNjY2I1ZDFiNWIxOTdkMzE0N2I3NjA=", "commit": {"author": {"name": "Ashok Gautham", "email": "ScriptDevil@gmail.com", "date": "2013-01-13T11:38:33Z"}, "committer": {"name": "Ashok Gautham", "email": "ScriptDevil@gmail.com", "date": "2013-01-13T11:48:10Z"}, "message": "Add range checking in the time library\n\nThis was requested in Issue #2350. New function match_digits_in_range\nadded and used instead of match_digits wherever needed.", "tree": {"sha": "6c20cbf06d92ed1d19b187ada64ae4da1d4e4a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c20cbf06d92ed1d19b187ada64ae4da1d4e4a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a157f1d5bf86c1d929cccb5d1b5b197d3147b760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a157f1d5bf86c1d929cccb5d1b5b197d3147b760", "html_url": "https://github.com/rust-lang/rust/commit/a157f1d5bf86c1d929cccb5d1b5b197d3147b760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a157f1d5bf86c1d929cccb5d1b5b197d3147b760/comments", "author": {"login": "ScriptDevil", "id": 85740, "node_id": "MDQ6VXNlcjg1NzQw", "avatar_url": "https://avatars.githubusercontent.com/u/85740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScriptDevil", "html_url": "https://github.com/ScriptDevil", "followers_url": "https://api.github.com/users/ScriptDevil/followers", "following_url": "https://api.github.com/users/ScriptDevil/following{/other_user}", "gists_url": "https://api.github.com/users/ScriptDevil/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScriptDevil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScriptDevil/subscriptions", "organizations_url": "https://api.github.com/users/ScriptDevil/orgs", "repos_url": "https://api.github.com/users/ScriptDevil/repos", "events_url": "https://api.github.com/users/ScriptDevil/events{/privacy}", "received_events_url": "https://api.github.com/users/ScriptDevil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ScriptDevil", "id": 85740, "node_id": "MDQ6VXNlcjg1NzQw", "avatar_url": "https://avatars.githubusercontent.com/u/85740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScriptDevil", "html_url": "https://github.com/ScriptDevil", "followers_url": "https://api.github.com/users/ScriptDevil/followers", "following_url": "https://api.github.com/users/ScriptDevil/following{/other_user}", "gists_url": "https://api.github.com/users/ScriptDevil/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScriptDevil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScriptDevil/subscriptions", "organizations_url": "https://api.github.com/users/ScriptDevil/orgs", "repos_url": "https://api.github.com/users/ScriptDevil/repos", "events_url": "https://api.github.com/users/ScriptDevil/events{/privacy}", "received_events_url": "https://api.github.com/users/ScriptDevil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406d2b3bfe6336c71b6aedd202bb896fc47b2587", "url": "https://api.github.com/repos/rust-lang/rust/commits/406d2b3bfe6336c71b6aedd202bb896fc47b2587", "html_url": "https://github.com/rust-lang/rust/commit/406d2b3bfe6336c71b6aedd202bb896fc47b2587"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "5684f8b581049f73684185d4c0e36dd5234a790e", "filename": "src/libstd/time.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a157f1d5bf86c1d929cccb5d1b5b197d3147b760/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a157f1d5bf86c1d929cccb5d1b5b197d3147b760/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=a157f1d5bf86c1d929cccb5d1b5b197d3147b760", "patch": "@@ -320,6 +320,16 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         Some((value, pos))\n     }\n \n+    fn match_digits_in_range(ss: &str, pos: uint, digits: uint, ws: bool, min: i32, max: i32)\n+      -> Option<(i32, uint)> {\n+        match match_digits(ss, pos, digits, ws) {\n+          Some((val, pos)) if val >= min && val <= max => {\n+            Some((val, pos))\n+          }\n+          _ => None\n+        }\n+    }\n+\n     fn parse_char(s: &str, pos: uint, c: char) -> Result<uint, ~str> {\n         let range = str::char_range_at(s, pos);\n \n@@ -393,7 +403,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             Some(item) => { let (v, pos) = item; tm.tm_mon = v; Ok(pos) }\n             None => Err(~\"Invalid month\")\n           },\n-          'C' => match match_digits(s, pos, 2u, false) {\n+          'C' => match match_digits_in_range(s, pos, 2u, false, 0_i32, 99_i32) {\n             Some(item) => {\n                 let (v, pos) = item;\n                   tm.tm_year += (v * 100_i32) - 1900_i32;\n@@ -419,11 +429,11 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 .chain(|pos| parse_char(s, pos, '/'))\n                 .chain(|pos| parse_type(s, pos, 'y', tm))\n           }\n-          'd' => match match_digits(s, pos, 2u, false) {\n+          'd' => match match_digits_in_range(s, pos, 2u, false, 1_i32, 31_i32) {\n             Some(item) => { let (v, pos) = item; tm.tm_mday = v; Ok(pos) }\n             None => Err(~\"Invalid day of the month\")\n           },\n-          'e' => match match_digits(s, pos, 2u, true) {\n+          'e' => match match_digits_in_range(s, pos, 2u, true, 1_i32, 31_i32) {\n             Some(item) => { let (v, pos) = item; tm.tm_mday = v; Ok(pos) }\n             None => Err(~\"Invalid day of the month\")\n           },\n@@ -435,15 +445,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 .chain(|pos| parse_type(s, pos, 'd', tm))\n           }\n           'H' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 23_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_hour = v; Ok(pos) }\n               None => Err(~\"Invalid hour\")\n             }\n           }\n           'I' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 1_i32, 12_i32) {\n               Some(item) => {\n                   let (v, pos) = item;\n                   tm.tm_hour = if v == 12_i32 { 0_i32 } else { v };\n@@ -453,8 +461,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             }\n           }\n           'j' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 3u, false) {\n+            match match_digits_in_range(s, pos, 3u, false, 1_i32, 366_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_yday = v - 1_i32;\n@@ -464,15 +471,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             }\n           }\n           'k' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, true) {\n+            match match_digits_in_range(s, pos, 2u, true, 0_i32, 23_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_hour = v; Ok(pos) }\n               None => Err(~\"Invalid hour\")\n             }\n           }\n           'l' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, true) {\n+            match match_digits_in_range(s, pos, 2u, true, 1_i32, 12_i32) {\n               Some(item) => {\n                   let (v, pos) = item;\n                   tm.tm_hour = if v == 12_i32 { 0_i32 } else { v };\n@@ -482,15 +487,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             }\n           }\n           'M' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 59_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_min = v; Ok(pos) }\n               None => Err(~\"Invalid minute\")\n             }\n           }\n           'm' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 1_i32, 12_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_mon = v - 1_i32;\n@@ -527,8 +530,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 .chain(|pos| parse_type(s, pos, 'p', tm))\n           }\n           'S' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 60_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_sec = v;\n@@ -547,8 +549,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           }\n           't' => parse_char(s, pos, '\\t'),\n           'u' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 1u, false) {\n+            match match_digits_in_range(s, pos, 1u, false, 1_i32, 7_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_wday = v-1_i32;\n@@ -566,16 +567,14 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           }\n           //'W' {}\n           'w' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 1u, false) {\n+            match match_digits_in_range(s, pos, 1u, false, 0_i32, 6_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n               None => Err(~\"Invalid day of week\")\n             }\n           }\n           //'X' {}\n           //'x' {}\n           'Y' => {\n-            // FIXME (#2350): range check.\n             match match_digits(s, pos, 4u, false) {\n               Some(item) => {\n                 let (v, pos) = item;\n@@ -586,8 +585,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             }\n           }\n           'y' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 99_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_year = v;"}]}