{"sha": "931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMWEzYzRmOWRmMmZiZjA0M2JjMzBjMDUyNGJjOTNlMWZmYTM5N2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-11T21:37:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T15:55:36Z"}, "message": "Detect and store object-lifetime-defaults.", "tree": {"sha": "c766d38008da97964668661d37f92adbee59087b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c766d38008da97964668661d37f92adbee59087b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "html_url": "https://github.com/rust-lang/rust/commit/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5db290bf6df986a6acd5ce993f278c18e55ca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5db290bf6df986a6acd5ce993f278c18e55ca37", "html_url": "https://github.com/rust-lang/rust/commit/c5db290bf6df986a6acd5ce993f278c18e55ca37"}], "stats": {"total": 234, "additions": 228, "deletions": 6}, "files": [{"sha": "94654b849229a3a058b3b42d78b03392e31c7c65", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "patch": "@@ -824,14 +824,32 @@ fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n     assert_eq!(next(st), '|');\n     let bounds = parse_bounds_(st, conv);\n     let default = parse_opt(st, |st| parse_ty_(st, conv));\n+    let object_lifetime_default = parse_object_lifetime_default(st, conv);\n \n     ty::TypeParameterDef {\n         name: name,\n         def_id: def_id,\n         space: space,\n         index: index,\n         bounds: bounds,\n-        default: default\n+        default: default,\n+        object_lifetime_default: object_lifetime_default,\n+    }\n+}\n+\n+fn parse_object_lifetime_default<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n+                                             conv: &mut F)\n+                                             -> Option<ty::ObjectLifetimeDefault>\n+    where F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    match next(st) {\n+        'n' => None,\n+        'a' => Some(ty::ObjectLifetimeDefault::Ambiguous),\n+        's' => {\n+            let region = parse_region_(st, conv);\n+            Some(ty::ObjectLifetimeDefault::Specific(region))\n+        }\n+        _ => panic!(\"parse_object_lifetime_default: bad input\")\n     }\n }\n "}, {"sha": "e1e9d49dd05859d3df5e3ff67b98c2f6d17ef0cf", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "patch": "@@ -414,6 +414,21 @@ pub fn enc_type_param_def<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tc\n              v.space.to_uint(), v.index);\n     enc_bounds(w, cx, &v.bounds);\n     enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));\n+    enc_object_lifetime_default(w, cx, v.object_lifetime_default);\n+}\n+\n+fn enc_object_lifetime_default<'a, 'tcx>(w: &mut SeekableMemWriter,\n+                                         cx: &ctxt<'a, 'tcx>,\n+                                         default: Option<ty::ObjectLifetimeDefault>)\n+{\n+    match default {\n+        None => mywrite!(w, \"n\"),\n+        Some(ty::ObjectLifetimeDefault::Ambiguous) => mywrite!(w, \"a\"),\n+        Some(ty::ObjectLifetimeDefault::Specific(r)) => {\n+            mywrite!(w, \"s\");\n+            enc_region(w, cx, r);\n+        }\n+    }\n }\n \n pub fn enc_predicate<'a, 'tcx>(w: &mut SeekableMemWriter,"}, {"sha": "6be16de950155b620362b5639ec37dbea1a20324", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "patch": "@@ -1758,6 +1758,21 @@ impl fmt::Debug for IntVarValue {\n     }\n }\n \n+/// Default region to use for the bound of objects that are\n+/// supplied as the value for this type parameter. This is derived\n+/// from `T:'a` annotations appearing in the type definition.  If\n+/// this is `None`, then the default is inherited from the\n+/// surrounding context. See RFC #599 for details.\n+#[derive(Copy, Clone, Debug)]\n+pub enum ObjectLifetimeDefault {\n+    /// Require an explicit annotation. Occurs when multiple\n+    /// `T:'a` constraints are found.\n+    Ambiguous,\n+\n+    /// Use the given region as the default.\n+    Specific(Region),\n+}\n+\n #[derive(Clone, Debug)]\n pub struct TypeParameterDef<'tcx> {\n     pub name: ast::Name,\n@@ -1766,6 +1781,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub index: u32,\n     pub bounds: ParamBounds<'tcx>,\n     pub default: Option<Ty<'tcx>>,\n+    pub object_lifetime_default: Option<ObjectLifetimeDefault>,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Clone, Debug)]\n@@ -7386,3 +7402,12 @@ impl<'a, 'tcx> Repr<'tcx> for ParameterEnvironment<'a, 'tcx> {\n             self.caller_bounds.repr(tcx))\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for ObjectLifetimeDefault {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        match *self {\n+            ObjectLifetimeDefault::Ambiguous => format!(\"Ambiguous\"),\n+            ObjectLifetimeDefault::Specific(ref r) => r.repr(tcx),\n+        }\n+    }\n+}"}, {"sha": "5e46ce08e4f7605b57fd458e383a85ad4241342e", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "patch": "@@ -379,6 +379,19 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n             index: self.index,\n             bounds: self.bounds.fold_with(folder),\n             default: self.default.fold_with(folder),\n+            object_lifetime_default: self.object_lifetime_default.fold_with(folder),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ObjectLifetimeDefault {\n+        match *self {\n+            ty::ObjectLifetimeDefault::Ambiguous =>\n+                ty::ObjectLifetimeDefault::Ambiguous,\n+\n+            ty::ObjectLifetimeDefault::Specific(r) =>\n+                ty::ObjectLifetimeDefault::Specific(r.fold_with(folder)),\n         }\n     }\n }"}, {"sha": "f26041dbbe1eb04dea4e769a185bd23e74127423", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 124, "deletions": 5, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "patch": "@@ -86,6 +86,7 @@ There are some shortcomings in this design:\n */\n \n use astconv::{self, AstConv, ty_of_arg, ast_ty_to_ty, ast_region_to_region};\n+use middle::def;\n use middle::lang_items::SizedTraitLangItem;\n use middle::region;\n use middle::resolve_lifetime;\n@@ -1199,8 +1200,23 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n                                                              predicates.clone());\n     assert!(prev_predicates.is_none());\n \n-    return (scheme, predicates);\n+    // Debugging aid.\n+    if ty::has_attr(tcx, local_def(it.id), \"rustc_object_lifetime_default\") {\n+        let object_lifetime_default_reprs: String =\n+            scheme.generics.types.iter()\n+                                 .map(|t| match t.object_lifetime_default {\n+                                     Some(ty::ObjectLifetimeDefault::Specific(r)) =>\n+                                         r.user_string(tcx),\n+                                     d =>\n+                                         d.repr(ccx.tcx()),\n+                                 })\n+                                 .collect::<Vec<String>>()\n+                                 .connect(\",\");\n+\n+        tcx.sess.span_err(it.span, &object_lifetime_default_reprs);\n+    }\n \n+    return (scheme, predicates);\n }\n \n fn type_scheme_of_foreign_item<'a, 'tcx>(\n@@ -1269,6 +1285,7 @@ fn ty_generics_for_type_or_impl<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n                 subst::TypeSpace,\n                 &generics.lifetimes[],\n                 &generics.ty_params[],\n+                &generics.where_clause,\n                 ty::Generics::empty())\n }\n \n@@ -1298,6 +1315,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n                     subst::TypeSpace,\n                     &ast_generics.lifetimes[],\n                     &ast_generics.ty_params[],\n+                    &ast_generics.where_clause,\n                     ty::Generics::empty());\n \n     // Add in the self type parameter.\n@@ -1321,7 +1339,8 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n             trait_bounds: vec!(ty::Binder(self_trait_ref.clone())),\n             projection_bounds: vec!(),\n         },\n-        default: None\n+        default: None,\n+        object_lifetime_default: None,\n     };\n \n     ccx.tcx.ty_param_defs.borrow_mut().insert(param_id, def.clone());\n@@ -1341,6 +1360,7 @@ fn ty_generics_for_fn_or_method<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n                 subst::FnSpace,\n                 &early_lifetimes[],\n                 &generics.ty_params[],\n+                &generics.where_clause,\n                 base_generics)\n }\n \n@@ -1487,6 +1507,7 @@ fn ty_generics<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n                         space: subst::ParamSpace,\n                         lifetime_defs: &[ast::LifetimeDef],\n                         types: &[ast::TyParam],\n+                        where_clause: &ast::WhereClause,\n                         base_generics: ty::Generics<'tcx>)\n                         -> ty::Generics<'tcx>\n {\n@@ -1511,7 +1532,7 @@ fn ty_generics<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n \n     // Now create the real type parameters.\n     for (i, param) in types.iter().enumerate() {\n-        let def = get_or_create_type_parameter_def(ccx, space, param, i as u32);\n+        let def = get_or_create_type_parameter_def(ccx, space, param, i as u32, where_clause);\n         debug!(\"ty_generics: def for type param: {:?}, {:?}\", def, space);\n         result.types.push(space, def);\n     }\n@@ -1522,7 +1543,8 @@ fn ty_generics<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n                                              space: subst::ParamSpace,\n                                              param: &ast::TyParam,\n-                                             index: u32)\n+                                             index: u32,\n+                                             where_clause: &ast::WhereClause)\n                                              -> ty::TypeParameterDef<'tcx>\n {\n     let tcx = ccx.tcx;\n@@ -1558,20 +1580,117 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n         }\n     };\n \n+    let object_lifetime_default =\n+        compute_object_lifetime_default(ccx, space, index, &param.bounds, where_clause);\n+\n     let def = ty::TypeParameterDef {\n         space: space,\n         index: index,\n         name: param.ident.name,\n         def_id: local_def(param.id),\n         bounds: bounds,\n-        default: default\n+        default: default,\n+        object_lifetime_default: object_lifetime_default,\n     };\n \n     tcx.ty_param_defs.borrow_mut().insert(param.id, def.clone());\n \n     def\n }\n \n+/// Scan the bounds and where-clauses on a parameter to extract bounds\n+/// of the form `T:'a` so as to determine the `ObjectLifetimeDefault`.\n+/// This runs as part of computing the minimal type scheme, so we\n+/// intentionally avoid just asking astconv to convert all the where\n+/// clauses into a `ty::Predicate`. This is because that could induce\n+/// artificial cycles.\n+fn compute_object_lifetime_default<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n+                                            space: subst::ParamSpace,\n+                                            index: u32,\n+                                            param_bounds: &[ast::TyParamBound],\n+                                            where_clause: &ast::WhereClause)\n+                                            -> Option<ty::ObjectLifetimeDefault>\n+{\n+    let inline_bounds = from_bounds(ccx, param_bounds);\n+    let where_bounds = from_predicates(ccx, space, index, &where_clause.predicates);\n+    let all_bounds: HashSet<_> = inline_bounds.into_iter()\n+                                              .chain(where_bounds.into_iter())\n+                                              .collect();\n+    return if all_bounds.len() > 1 {\n+        Some(ty::ObjectLifetimeDefault::Ambiguous)\n+    } else {\n+        all_bounds.into_iter()\n+                  .next()\n+                  .map(ty::ObjectLifetimeDefault::Specific)\n+    };\n+\n+    fn from_bounds<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n+                            bounds: &[ast::TyParamBound])\n+                            -> Vec<ty::Region>\n+    {\n+        bounds.iter()\n+              .filter_map(|bound| {\n+                  match *bound {\n+                      ast::TraitTyParamBound(..) =>\n+                          None,\n+                      ast::RegionTyParamBound(ref lifetime) =>\n+                          Some(astconv::ast_region_to_region(ccx.tcx(), lifetime)),\n+                  }\n+              })\n+              .collect()\n+    }\n+\n+    fn from_predicates<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n+                                space: subst::ParamSpace,\n+                                index: u32,\n+                                predicates: &[ast::WherePredicate])\n+                                -> Vec<ty::Region>\n+    {\n+        predicates.iter()\n+                  .flat_map(|predicate| {\n+                      match *predicate {\n+                          ast::WherePredicate::BoundPredicate(ref data) => {\n+                              if data.bound_lifetimes.len() == 0 &&\n+                                  is_param(ccx, &data.bounded_ty, space, index)\n+                              {\n+                                  from_bounds(ccx, &data.bounds).into_iter()\n+                              } else {\n+                                  Vec::new().into_iter()\n+                              }\n+                          }\n+                          ast::WherePredicate::RegionPredicate(..) |\n+                          ast::WherePredicate::EqPredicate(..) => {\n+                              Vec::new().into_iter()\n+                          }\n+                      }\n+                  })\n+                  .collect()\n+    }\n+\n+    fn is_param(ccx: &CollectCtxt,\n+                ast_ty: &ast::Ty,\n+                space: subst::ParamSpace,\n+                index: u32)\n+                -> bool\n+    {\n+        match ast_ty.node {\n+            ast::TyPath(_, id) => {\n+                match ccx.tcx.def_map.borrow()[id] {\n+                    def::DefTyParam(s, i, _, _) => {\n+                        space == s && index == i\n+                    }\n+                    _ => {\n+                        false\n+                    }\n+                }\n+            }\n+            _ => {\n+                false\n+            }\n+        }\n+    }\n+}\n+\n enum SizedByDefault { Yes, No }\n \n /// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or"}, {"sha": "73f71751ee80f37d35e857e31e86917af0f83381", "filename": "src/test/compile-fail/object-lifetime-default.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931a3c4f9df2fbf043bc30c0524bc93e1ffa397e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default.rs?ref=931a3c4f9df2fbf043bc30c0524bc93e1ffa397e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[rustc_object_lifetime_default]\n+struct A<T>(T); //~ ERROR None\n+\n+#[rustc_object_lifetime_default]\n+struct B<'a,T>(&'a (), T); //~ ERROR None\n+\n+#[rustc_object_lifetime_default]\n+struct C<'a,T:'a>(&'a T); //~ ERROR 'a\n+\n+#[rustc_object_lifetime_default]\n+struct D<'a,'b,T:'a+'b>(&'a T, &'b T); //~ ERROR Ambiguous\n+\n+#[rustc_object_lifetime_default]\n+struct E<'a,'b:'a,T:'b>(&'a T, &'b T); //~ ERROR 'b\n+\n+#[rustc_object_lifetime_default]\n+struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U); //~ ERROR 'a,'b\n+\n+#[rustc_object_lifetime_default]\n+struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U); //~ ERROR 'a,Ambiguous\n+\n+fn main() { }"}]}