{"sha": "b08b4848c3653818b47fa8cc0a613455c8b4d255", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOGI0ODQ4YzM2NTM4MThiNDdmYThjYzBhNjEzNDU1YzhiNGQyNTU=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "77335613+ABouttefeux@users.noreply.github.com", "date": "2021-04-05T19:13:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T19:13:29Z"}, "message": "Merge branch 'master' into master", "tree": {"sha": "a9162fd1698833dc8cf9ef55af102be906df22d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9162fd1698833dc8cf9ef55af102be906df22d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08b4848c3653818b47fa8cc0a613455c8b4d255", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga2FZCRBK7hj4Ov3rIwAAdHIIAJjHcpdNMOpkVAn1NrO7TTrO\nSMpm2QS6eDsuRKGQ5/tjyo5RrluiWGnTPWdpV2JviOdchbO2qrfb/8OFHGaEK+oF\nKggdq3PVTFguLt3aYAoO2RXkS0CZA6wh4d08LRyywAmRrXukuJbCw9p8sxqYDQ6F\nCb2UuHLz9QOqcGIC/8h+/4XfqaIBvKlj1FLQ3OaVimPpmXj1o8gf8wdg1S1aThFA\n6aqm3VG7/7MjF7kwOKEEipOnUEu/4Ngdqpx3pq7c5zSZxKsCOSBONH1sdTAmxqHd\nAKf3u0N3YDMts9z3MAXXtGbqH8fRPVIYsU/0Pi3cv/hOBRICbzvE13Q+1jURpwY=\n=sAb0\n-----END PGP SIGNATURE-----\n", "payload": "tree a9162fd1698833dc8cf9ef55af102be906df22d5\nparent 72f534aae1c6cca58b97957d6c225885fcdb4d1b\nparent 5a7a0ac51eefbdacc5b1763f8d49a787407afb34\nauthor Ali\u00e9nore Bouttefeux <77335613+ABouttefeux@users.noreply.github.com> 1617650009 +0200\ncommitter GitHub <noreply@github.com> 1617650009 +0200\n\nMerge branch 'master' into master"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08b4848c3653818b47fa8cc0a613455c8b4d255", "html_url": "https://github.com/rust-lang/rust/commit/b08b4848c3653818b47fa8cc0a613455c8b4d255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08b4848c3653818b47fa8cc0a613455c8b4d255/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f534aae1c6cca58b97957d6c225885fcdb4d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f534aae1c6cca58b97957d6c225885fcdb4d1b", "html_url": "https://github.com/rust-lang/rust/commit/72f534aae1c6cca58b97957d6c225885fcdb4d1b"}, {"sha": "5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "html_url": "https://github.com/rust-lang/rust/commit/5a7a0ac51eefbdacc5b1763f8d49a787407afb34"}], "stats": {"total": 6052, "additions": 3080, "deletions": 2972}, "files": [{"sha": "d5a9d7ee6e3666f3fb3800ddc4afa3f081441611", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1499,46 +1499,64 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // previous iteration.\n                 required_features.clear();\n \n-                // Validate register classes against currently enabled target\n-                // features. We check that at least one type is available for\n-                // the current target.\n                 let reg_class = reg.reg_class();\n                 if reg_class == asm::InlineAsmRegClass::Err {\n                     continue;\n                 }\n-                for &(_, feature) in reg_class.supported_types(asm_arch.unwrap()) {\n-                    if let Some(feature) = feature {\n-                        if self.sess.target_features.contains(&Symbol::intern(feature)) {\n+\n+                // We ignore target feature requirements for clobbers: if the\n+                // feature is disabled then the compiler doesn't care what we\n+                // do with the registers.\n+                //\n+                // Note that this is only possible for explicit register\n+                // operands, which cannot be used in the asm string.\n+                let is_clobber = matches!(\n+                    op,\n+                    hir::InlineAsmOperand::Out {\n+                        reg: asm::InlineAsmRegOrRegClass::Reg(_),\n+                        late: _,\n+                        expr: None\n+                    }\n+                );\n+\n+                if !is_clobber {\n+                    // Validate register classes against currently enabled target\n+                    // features. We check that at least one type is available for\n+                    // the current target.\n+                    for &(_, feature) in reg_class.supported_types(asm_arch.unwrap()) {\n+                        if let Some(feature) = feature {\n+                            if self.sess.target_features.contains(&Symbol::intern(feature)) {\n+                                required_features.clear();\n+                                break;\n+                            } else {\n+                                required_features.push(feature);\n+                            }\n+                        } else {\n                             required_features.clear();\n                             break;\n-                        } else {\n-                            required_features.push(feature);\n                         }\n-                    } else {\n-                        required_features.clear();\n-                        break;\n                     }\n-                }\n-                // We are sorting primitive strs here and can use unstable sort here\n-                required_features.sort_unstable();\n-                required_features.dedup();\n-                match &required_features[..] {\n-                    [] => {}\n-                    [feature] => {\n-                        let msg = format!(\n-                            \"register class `{}` requires the `{}` target feature\",\n-                            reg_class.name(),\n-                            feature\n-                        );\n-                        sess.struct_span_err(op_sp, &msg).emit();\n-                    }\n-                    features => {\n-                        let msg = format!(\n-                            \"register class `{}` requires at least one target feature: {}\",\n-                            reg_class.name(),\n-                            features.join(\", \")\n-                        );\n-                        sess.struct_span_err(op_sp, &msg).emit();\n+                    // We are sorting primitive strs here and can use unstable sort here\n+                    required_features.sort_unstable();\n+                    required_features.dedup();\n+                    match &required_features[..] {\n+                        [] => {}\n+                        [feature] => {\n+                            let msg = format!(\n+                                \"register class `{}` requires the `{}` target feature\",\n+                                reg_class.name(),\n+                                feature\n+                            );\n+                            sess.struct_span_err(op_sp, &msg).emit();\n+                        }\n+                        features => {\n+                            let msg = format!(\n+                                \"register class `{}` requires at least one target feature: {}\",\n+                                reg_class.name(),\n+                                features.join(\", \")\n+                            );\n+                            sess.struct_span_err(op_sp, &msg).emit();\n+                        }\n                     }\n                 }\n "}, {"sha": "1bb050a40cee23c813d617f5d024bded7b38a3e6", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,6 @@\n use crate::cfg_eval::cfg_eval;\n \n-use rustc_ast::{self as ast, token, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast::{self as ast, attr, token, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n use rustc_feature::AttributeTemplate;\n@@ -26,32 +26,39 @@ impl MultiItemModifier for Expander {\n             return ExpandResult::Ready(vec![item]);\n         }\n \n-        let template =\n-            AttributeTemplate { list: Some(\"Trait1, Trait2, ...\"), ..Default::default() };\n-        let attr = ecx.attribute(meta_item.clone());\n-        validate_attr::check_builtin_attribute(&sess.parse_sess, &attr, sym::derive, template);\n+        let result =\n+            ecx.resolver.resolve_derives(ecx.current_expansion.id, ecx.force_mode, &|| {\n+                let template =\n+                    AttributeTemplate { list: Some(\"Trait1, Trait2, ...\"), ..Default::default() };\n+                let attr = attr::mk_attr_outer(meta_item.clone());\n+                validate_attr::check_builtin_attribute(\n+                    &sess.parse_sess,\n+                    &attr,\n+                    sym::derive,\n+                    template,\n+                );\n \n-        let derives: Vec<_> = attr\n-            .meta_item_list()\n-            .unwrap_or_default()\n-            .into_iter()\n-            .filter_map(|nested_meta| match nested_meta {\n-                NestedMetaItem::MetaItem(meta) => Some(meta),\n-                NestedMetaItem::Literal(lit) => {\n-                    // Reject `#[derive(\"Debug\")]`.\n-                    report_unexpected_literal(sess, &lit);\n-                    None\n-                }\n-            })\n-            .map(|meta| {\n-                // Reject `#[derive(Debug = \"value\", Debug(abc))]`, but recover the paths.\n-                report_path_args(sess, &meta);\n-                meta.path\n-            })\n-            .collect();\n+                attr.meta_item_list()\n+                    .unwrap_or_default()\n+                    .into_iter()\n+                    .filter_map(|nested_meta| match nested_meta {\n+                        NestedMetaItem::MetaItem(meta) => Some(meta),\n+                        NestedMetaItem::Literal(lit) => {\n+                            // Reject `#[derive(\"Debug\")]`.\n+                            report_unexpected_literal(sess, &lit);\n+                            None\n+                        }\n+                    })\n+                    .map(|meta| {\n+                        // Reject `#[derive(Debug = \"value\", Debug(abc))]`, but recover the paths.\n+                        report_path_args(sess, &meta);\n+                        meta.path\n+                    })\n+                    .map(|path| (path, None))\n+                    .collect()\n+            });\n \n-        // FIXME: Try to cache intermediate results to avoid collecting same paths multiple times.\n-        match ecx.resolver.resolve_derives(ecx.current_expansion.id, derives, ecx.force_mode) {\n+        match result {\n             Ok(()) => ExpandResult::Ready(cfg_eval(ecx, item)),\n             Err(Indeterminate) => ExpandResult::Retry(item),\n         }"}, {"sha": "84b091d8d4d79ec4d15710ad20356a9bd21f658b", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::{bug, span_bug};\n-use rustc_span::{Pos, Span};\n+use rustc_span::{Pos, Span, Symbol};\n use rustc_target::abi::*;\n use rustc_target::asm::*;\n \n@@ -125,15 +125,39 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n         // Collect the types of output operands\n         let mut constraints = vec![];\n+        let mut clobbers = vec![];\n         let mut output_types = vec![];\n         let mut op_idx = FxHashMap::default();\n         for (idx, op) in operands.iter().enumerate() {\n             match *op {\n                 InlineAsmOperandRef::Out { reg, late, place } => {\n+                    let is_target_supported = |reg_class: InlineAsmRegClass| {\n+                        for &(_, feature) in reg_class.supported_types(asm_arch) {\n+                            if let Some(feature) = feature {\n+                                if self.tcx.sess.target_features.contains(&Symbol::intern(feature))\n+                                {\n+                                    return true;\n+                                }\n+                            } else {\n+                                // Register class is unconditionally supported\n+                                return true;\n+                            }\n+                        }\n+                        false\n+                    };\n+\n                     let mut layout = None;\n                     let ty = if let Some(ref place) = place {\n                         layout = Some(&place.layout);\n                         llvm_fixup_output_type(self.cx, reg.reg_class(), &place.layout)\n+                    } else if !is_target_supported(reg.reg_class()) {\n+                        // We turn discarded outputs into clobber constraints\n+                        // if the target feature needed by the register class is\n+                        // disabled. This is necessary otherwise LLVM will try\n+                        // to actually allocate a register for the dummy output.\n+                        assert!(matches!(reg, InlineAsmRegOrRegClass::Reg(_)));\n+                        clobbers.push(format!(\"~{}\", reg_to_llvm(reg, None)));\n+                        continue;\n                     } else {\n                         // If the output is discarded, we don't really care what\n                         // type is used. We're just using this to tell LLVM to\n@@ -244,6 +268,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n         }\n \n+        constraints.append(&mut clobbers);\n         if !options.contains(InlineAsmOptions::PRESERVES_FLAGS) {\n             match asm_arch {\n                 InlineAsmArch::AArch64 | InlineAsmArch::Arm => {"}, {"sha": "6e1d4eba842e98f844254df63292d3239589a1fe", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -317,7 +317,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     // Note that currently the `wasm-import-module` doesn't do anything, but\n     // eventually LLVM 7 should read this and ferry the appropriate import\n     // module to the output file.\n-    if cx.tcx.sess.target.arch == \"wasm32\" {\n+    if cx.tcx.sess.target.is_like_wasm {\n         if let Some(module) = wasm_import_module(cx.tcx, instance.def_id()) {\n             llvm::AddFunctionAttrStringValue(\n                 llfn,"}, {"sha": "b628ae3ae3afccbc6afa3eda3e80e8a5438555c1", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -170,10 +170,7 @@ pub fn target_machine_factory(\n     // On the wasm target once the `atomics` feature is enabled that means that\n     // we're no longer single-threaded, or otherwise we don't want LLVM to\n     // lower atomic operations to single-threaded operations.\n-    if singlethread\n-        && sess.target.llvm_target.contains(\"wasm32\")\n-        && sess.target_features.contains(&sym::atomics)\n-    {\n+    if singlethread && sess.target.is_like_wasm && sess.target_features.contains(&sym::atomics) {\n         singlethread = false;\n     }\n \n@@ -1050,7 +1047,7 @@ pub unsafe fn with_llvm_pmb(\n     // thresholds copied from clang.\n     match (opt_level, opt_size, inline_threshold) {\n         (.., Some(t)) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t);\n         }\n         (llvm::CodeGenOptLevel::Aggressive, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);"}, {"sha": "e6fa852155b5123b927228bc94baa38336404750", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1083,9 +1083,9 @@ pub fn compile_unit_metadata(\n             );\n         }\n \n-        // Insert `llvm.ident` metadata on the wasm32 targets since that will\n+        // Insert `llvm.ident` metadata on the wasm targets since that will\n         // get hooked up to the \"producer\" sections `processed-by` information.\n-        if tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+        if tcx.sess.target.is_like_wasm {\n             let name_metadata = llvm::LLVMMDStringInContext(\n                 debug_context.llcontext,\n                 rustc_producer.as_ptr().cast(),"}, {"sha": "ea75943d6f3147c768b278fffd438c96a0c1020f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1411,15 +1411,10 @@ fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_ty\n     }\n }\n \n-/// Add arbitrary \"user defined\" args defined from command line and by `#[link_args]` attributes.\n+/// Add arbitrary \"user defined\" args defined from command line.\n /// FIXME: Determine where exactly these args need to be inserted.\n-fn add_user_defined_link_args(\n-    cmd: &mut dyn Linker,\n-    sess: &Session,\n-    codegen_results: &CodegenResults,\n-) {\n+fn add_user_defined_link_args(cmd: &mut dyn Linker, sess: &Session) {\n     cmd.args(&sess.opts.cg.link_args);\n-    cmd.args(&*codegen_results.crate_info.link_args);\n }\n \n /// Add arbitrary \"late link\" args defined by the target spec.\n@@ -1761,7 +1756,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n \n     // OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n-    add_user_defined_link_args(cmd, sess, codegen_results);\n+    add_user_defined_link_args(cmd, sess);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     cmd.finalize();"}, {"sha": "77d8ab49ff258d2b2acaac870182fefc5c759f4a", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -186,7 +186,7 @@ impl<'a> GccLinker<'a> {\n         // * On OSX they have their own linker, not binutils'\n         // * For WebAssembly the only functional linker is LLD, which doesn't\n         //   support hint flags\n-        !self.sess.target.is_like_osx && self.sess.target.arch != \"wasm32\"\n+        !self.sess.target.is_like_osx && !self.sess.target.is_like_wasm\n     }\n \n     // Some platforms take hints about whether a library is static or dynamic."}, {"sha": "04d06864ee14fea4ad950454a08f26a71c709534", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -107,7 +107,7 @@ pub struct ModuleConfig {\n     pub vectorize_loop: bool,\n     pub vectorize_slp: bool,\n     pub merge_functions: bool,\n-    pub inline_threshold: Option<usize>,\n+    pub inline_threshold: Option<u32>,\n     pub new_llvm_pass_manager: bool,\n     pub emit_lifetime_markers: bool,\n }"}, {"sha": "318eed76acf2b0558dbdb918540f9ec7cfc5f907", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -754,7 +754,6 @@ impl CrateInfo {\n             is_no_builtins: Default::default(),\n             native_libraries: Default::default(),\n             used_libraries: tcx.native_libraries(LOCAL_CRATE).iter().map(Into::into).collect(),\n-            link_args: tcx.link_args(LOCAL_CRATE),\n             crate_name: Default::default(),\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),"}, {"sha": "f0f45b067b35261a81230ae8436f634e47cf4ac7", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -139,7 +139,6 @@ pub struct CrateInfo {\n     pub native_libraries: FxHashMap<CrateNum, Vec<NativeLib>>,\n     pub crate_name: FxHashMap<CrateNum, String>,\n     pub used_libraries: Vec<NativeLib>,\n-    pub link_args: Lrc<Vec<String>>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates_static: Vec<(CrateNum, LibSource)>,\n     pub used_crates_dynamic: Vec<(CrateNum, LibSource)>,"}, {"sha": "4e987908b4ea7b5cda6559f7a35afa11879c066e", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -161,7 +161,7 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n         \"mips\" | \"mips64\" => MIPS_ALLOWED_FEATURES,\n         \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n         \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n-        \"wasm32\" => WASM_ALLOWED_FEATURES,\n+        \"wasm32\" | \"wasm64\" => WASM_ALLOWED_FEATURES,\n         _ => &[],\n     }\n }"}, {"sha": "f2432f61653530d35b95e8f36c97b23b6ed52b9b", "filename": "compiler/rustc_error_codes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,4 @@\n-#![cfg_attr(bootstrap, deny(invalid_codeblock_attributes))]\n-#![cfg_attr(not(bootstrap), deny(rustdoc::invalid_codeblock_attributes))]\n+#![deny(rustdoc::invalid_codeblock_attributes)]\n //! This library is used to gather all error codes into one place,\n //! the goal being to make their maintenance easier.\n "}, {"sha": "a58caf2667b063422046e32ebdf2ed020ce5f1eb", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -195,6 +195,9 @@ pub trait Emitter {\n \n     fn emit_future_breakage_report(&mut self, _diags: Vec<(FutureBreakage, Diagnostic)>) {}\n \n+    /// Emit list of unused externs\n+    fn emit_unused_externs(&mut self, _lint_level: &str, _unused_externs: &[&str]) {}\n+\n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n         true"}, {"sha": "40277006462d2b55cebe960d4ee8a6451311b6a6", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -159,6 +159,19 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n+    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+        let data = UnusedExterns { lint_level, unused_extern_names: unused_externs };\n+        let result = if self.pretty {\n+            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+        } else {\n+            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+        }\n+        .and_then(|_| self.dst.flush());\n+        if let Err(e) = result {\n+            panic!(\"failed to print unused externs: {:?}\", e);\n+        }\n+    }\n+\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         Some(&self.sm)\n     }\n@@ -322,6 +335,18 @@ struct FutureIncompatReport {\n     future_incompat_report: Vec<FutureBreakageItem>,\n }\n \n+// NOTE: Keep this in sync with the equivalent structs in rustdoc's\n+// doctest component (as well as cargo).\n+// We could unify this struct the one in rustdoc but they have different\n+// ownership semantics, so doing so would create wasteful allocations.\n+#[derive(Encodable)]\n+struct UnusedExterns<'a, 'b, 'c> {\n+    /// The severity level of the unused dependencies lint\n+    lint_level: &'a str,\n+    /// List of unused externs by their names.\n+    unused_extern_names: &'b [&'c str],\n+}\n+\n impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let sugg = diag.suggestions.iter().map(|sugg| Diagnostic {"}, {"sha": "0d1f55a6b00eee194ff4eadb5936338ca86db0bc", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -765,6 +765,10 @@ impl Handler {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n \n+    pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n+        self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n+    }\n+\n     pub fn delay_as_bug(&self, diagnostic: Diagnostic) {\n         self.inner.borrow_mut().delay_as_bug(diagnostic)\n     }\n@@ -839,6 +843,10 @@ impl HandlerInner {\n         self.emitter.emit_artifact_notification(path, artifact_type);\n     }\n \n+    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+        self.emitter.emit_unused_externs(lint_level, unused_externs);\n+    }\n+\n     fn treat_err_as_bug(&self) -> bool {\n         self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c.get())\n     }"}, {"sha": "a2035ee3c6ec9b93d9858f6a5087d765033afee6", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -868,6 +868,8 @@ impl SyntaxExtension {\n /// Error type that denotes indeterminacy.\n pub struct Indeterminate;\n \n+pub type DeriveResolutions = Vec<(ast::Path, Option<Lrc<SyntaxExtension>>)>;\n+\n pub trait ResolverExpand {\n     fn next_node_id(&mut self) -> NodeId;\n \n@@ -904,15 +906,12 @@ pub trait ResolverExpand {\n     fn resolve_derives(\n         &mut self,\n         expn_id: ExpnId,\n-        derives: Vec<ast::Path>,\n         force: bool,\n+        derive_paths: &dyn Fn() -> DeriveResolutions,\n     ) -> Result<(), Indeterminate>;\n     /// Take resolutions for paths inside the `#[derive(...)]` attribute with the given `ExpnId`\n     /// back from resolver.\n-    fn take_derive_resolutions(\n-        &mut self,\n-        expn_id: ExpnId,\n-    ) -> Option<Vec<(Lrc<SyntaxExtension>, ast::Path)>>;\n+    fn take_derive_resolutions(&mut self, expn_id: ExpnId) -> Option<DeriveResolutions>;\n     /// Path resolution logic for `#[cfg_accessible(path)]`.\n     fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate>;\n }"}, {"sha": "53e2b4e6accb4712abe0b2ecf39d79af2bf86ca5", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -515,7 +515,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             invocations.reserve(derives.len());\n                             derives\n                                 .into_iter()\n-                                .map(|(_exts, path)| {\n+                                .map(|(path, _exts)| {\n                                     // FIXME: Consider using the derive resolutions (`_exts`)\n                                     // instead of enqueuing the derives to be resolved again later.\n                                     let expn_id = ExpnId::fresh(None);"}, {"sha": "abbeb9554e3a99f091d590db60582a9fa95f0e24", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -258,9 +258,6 @@ declare_features! (\n     // feature-group-start: actual feature gates\n     // -------------------------------------------------------------------------\n \n-    /// Allows using the `#[link_args]` attribute.\n-    (active, link_args, \"1.0.0\", Some(29596), None),\n-\n     /// Allows defining identifiers beyond ASCII.\n     (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n "}, {"sha": "7df9b3f0a796059025305ad316c331599f5b7e12", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -279,11 +279,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Linking:\n     gated!(naked, AssumedUsed, template!(Word), naked_functions, experimental!(naked)),\n-    gated!(\n-        link_args, Normal, template!(NameValueStr: \"args\"),\n-        \"the `link_args` attribute is experimental and not portable across platforms, \\\n-        it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n-    ),\n     gated!(\n         link_ordinal, AssumedUsed, template!(List: \"ordinal\"), raw_dylib,\n         experimental!(link_ordinal)"}, {"sha": "e1491576616627d13dc538b5442d163c3be065ea", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -128,6 +128,10 @@ declare_features! (\n     /// Allows comparing raw pointers during const eval.\n     (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n      Some(\"cannot be allowed in const eval in any meaningful way\")),\n+    /// Allows using the `#[link_args]` attribute.\n+    (removed, link_args, \"1.53.0\", Some(29596), None,\n+     Some(\"removed in favor of using `-C link-arg=ARG` on command line, \\\n+           which is available from cargo build scripts with `cargo:rustc-link-arg` now\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "02e62a2cee951d62044871a00e208ab5901a75e4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n+use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n@@ -831,6 +832,12 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                 });\n \n                 sess.time(\"looking_for_derive_registrar\", || proc_macro_decls::find(tcx));\n+\n+                let cstore = tcx\n+                    .cstore_as_any()\n+                    .downcast_ref::<CStore>()\n+                    .expect(\"`tcx.cstore` is not a `CStore`\");\n+                cstore.report_unused_deps(tcx);\n             },\n             {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {"}, {"sha": "26db3a5f39d7c80e8ee0aa1b2960a13c5ecfc3b9", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -46,6 +46,9 @@ pub struct CStore {\n     /// This map is used to verify we get no hash conflicts between\n     /// `StableCrateId` values.\n     stable_crate_ids: FxHashMap<StableCrateId, CrateNum>,\n+\n+    /// Unused externs of the crate\n+    unused_externs: Vec<Symbol>,\n }\n \n pub struct CrateLoader<'a> {\n@@ -190,6 +193,27 @@ impl CStore {\n     crate fn has_global_allocator(&self) -> bool {\n         self.has_global_allocator\n     }\n+\n+    pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n+        // We put the check for the option before the lint_level_at_node call\n+        // because the call mutates internal state and introducing it\n+        // leads to some ui tests failing.\n+        if !tcx.sess.opts.json_unused_externs {\n+            return;\n+        }\n+        let level = tcx\n+            .lint_level_at_node(lint::builtin::UNUSED_CRATE_DEPENDENCIES, rustc_hir::CRATE_HIR_ID)\n+            .0;\n+        if level != lint::Level::Allow {\n+            let unused_externs =\n+                self.unused_externs.iter().map(|ident| ident.to_ident_string()).collect::<Vec<_>>();\n+            let unused_externs = unused_externs.iter().map(String::as_str).collect::<Vec<&str>>();\n+            tcx.sess\n+                .parse_sess\n+                .span_diagnostic\n+                .emit_unused_externs(level.as_str(), &unused_externs);\n+        }\n+    }\n }\n \n impl<'a> CrateLoader<'a> {\n@@ -217,6 +241,7 @@ impl<'a> CrateLoader<'a> {\n                 allocator_kind: None,\n                 has_global_allocator: false,\n                 stable_crate_ids,\n+                unused_externs: Vec::new(),\n             },\n             used_extern_options: Default::default(),\n         }\n@@ -904,11 +929,17 @@ impl<'a> CrateLoader<'a> {\n                 // Don't worry about pathless `--extern foo` sysroot references\n                 continue;\n             }\n-            if self.used_extern_options.contains(&Symbol::intern(name)) {\n+            let name_interned = Symbol::intern(name);\n+            if self.used_extern_options.contains(&name_interned) {\n                 continue;\n             }\n \n             // Got a real unused --extern\n+            if self.sess.opts.json_unused_externs {\n+                self.cstore.unused_externs.push(name_interned);\n+                continue;\n+            }\n+\n             let diag = match self.sess.opts.extern_dep_specs.get(name) {\n                 Some(loc) => BuiltinLintDiagnostics::ExternDepSpec(name.clone(), loc.into()),\n                 None => {\n@@ -941,9 +972,9 @@ impl<'a> CrateLoader<'a> {\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);\n \n-        info!(\"{:?}\", CrateDump(&self.cstore));\n-\n         self.report_unused_deps(krate);\n+\n+        info!(\"{:?}\", CrateDump(&self.cstore));\n     }\n \n     pub fn process_extern_crate("}, {"sha": "c4d9e3f77f071676abde7df7be011382ceb65b21", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -26,7 +26,6 @@ pub use rmeta::{provide, provide_extern};\n \n mod dependency_format;\n mod foreign_modules;\n-mod link_args;\n mod native_libs;\n mod rmeta;\n "}, {"sha": "9e1ac33368c7fdad810b923f1455f56feebe34f9", "filename": "compiler/rustc_metadata/src/link_args.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/72f534aae1c6cca58b97957d6c225885fcdb4d1b/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f534aae1c6cca58b97957d6c225885fcdb4d1b/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs?ref=72f534aae1c6cca58b97957d6c225885fcdb4d1b", "patch": "@@ -1,57 +0,0 @@\n-use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::spec::abi::Abi;\n-\n-crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n-    let mut collector = Collector { tcx, args: Vec::new() };\n-    tcx.hir().krate().visit_all_item_likes(&mut collector);\n-\n-    for attr in tcx.hir().attrs(hir::CRATE_HIR_ID).iter() {\n-        if attr.has_name(sym::link_args) {\n-            if let Some(linkarg) = attr.value_str() {\n-                collector.add_link_args(linkarg);\n-            }\n-        }\n-    }\n-\n-    collector.args\n-}\n-\n-struct Collector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    args: Vec<String>,\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n-    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let abi = match it.kind {\n-            hir::ItemKind::ForeignMod { abi, .. } => abi,\n-            _ => return,\n-        };\n-        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n-            return;\n-        }\n-\n-        // First, add all of the custom #[link_args] attributes\n-        let sess = &self.tcx.sess;\n-        for m in\n-            self.tcx.hir().attrs(it.hir_id()).iter().filter(|a| sess.check_name(a, sym::link_args))\n-        {\n-            if let Some(linkarg) = m.value_str() {\n-                self.add_link_args(linkarg);\n-            }\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n-    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n-}\n-\n-impl<'tcx> Collector<'tcx> {\n-    fn add_link_args(&mut self, args: Symbol) {\n-        self.args.extend(args.as_str().split(' ').filter(|s| !s.is_empty()).map(|s| s.to_string()))\n-    }\n-}"}, {"sha": "bebee9dac3b739d33353300c49e5824e04baaf6e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n use crate::creader::{CStore, LoadedMacro};\n use crate::foreign_modules;\n-use crate::link_args;\n use crate::native_libs;\n use crate::rmeta::{self, encoder};\n \n@@ -295,10 +294,6 @@ pub fn provide(providers: &mut Providers) {\n                 foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect();\n             Lrc::new(modules)\n         },\n-        link_args: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            Lrc::new(link_args::collect(tcx))\n-        },\n \n         // Returns a map from a sufficiently visible external item (i.e., an\n         // external item that is visible from at least one local module) to a"}, {"sha": "a7e9fc468b4fdfc0bfb50aee29205cb397dfd87e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1482,7 +1482,7 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Note that this also is emitted for regular `let` bindings to ensure that locals that are\n     /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`\n-    FakeRead(FakeReadCause, Box<Place<'tcx>>),\n+    FakeRead(Box<(FakeReadCause, Place<'tcx>)>),\n \n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n@@ -1575,7 +1575,12 @@ pub enum FakeReadCause {\n \n     /// `let x: !; match x {}` doesn't generate any read of x so we need to\n     /// generate a read of x to check that it is initialized and safe.\n-    ForMatchedPlace,\n+    ///\n+    /// If a closure pattern matches a Place starting with an Upvar, then we introduce a\n+    /// FakeRead for that Place outside the closure, in such a case this option would be\n+    /// Some(closure_def_id).\n+    /// Otherwise, the value of the optional DefId will be None.\n+    ForMatchedPlace(Option<DefId>),\n \n     /// A fake read of the RefWithinGuard version of a bind-by-value variable\n     /// in a match guard to ensure that it's value hasn't change by the time\n@@ -1594,7 +1599,12 @@ pub enum FakeReadCause {\n     /// but in some cases it can affect the borrow checker, as in #53695.\n     /// Therefore, we insert a \"fake read\" here to ensure that we get\n     /// appropriate errors.\n-    ForLet,\n+    ///\n+    /// If a closure pattern matches a Place starting with an Upvar, then we introduce a\n+    /// FakeRead for that Place outside the closure, in such a case this option would be\n+    /// Some(closure_def_id).\n+    /// Otherwise, the value of the optional DefId will be None.\n+    ForLet(Option<DefId>),\n \n     /// If we have an index expression like\n     ///\n@@ -1618,7 +1628,9 @@ impl Debug for Statement<'_> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(box (ref place, ref rv)) => write!(fmt, \"{:?} = {:?}\", place, rv),\n-            FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n+            FakeRead(box (ref cause, ref place)) => {\n+                write!(fmt, \"FakeRead({:?}, {:?})\", cause, place)\n+            }\n             Retag(ref kind, ref place) => write!(\n                 fmt,\n                 \"Retag({}{:?})\","}, {"sha": "fd504f8c5d5acae6a65770544419e4ed96e8b3c6", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -380,7 +380,7 @@ macro_rules! make_mir_visitor {\n                     ) => {\n                         self.visit_assign(place, rvalue, location);\n                     }\n-                    StatementKind::FakeRead(_, place) => {\n+                    StatementKind::FakeRead(box (_, place)) => {\n                         self.visit_place(\n                             place,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect),"}, {"sha": "bac69e282a521672ae81467f3ae72581e2aac37c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1253,11 +1253,6 @@ rustc_queries! {\n         desc { |tcx| \"native_library_kind({})\", tcx.def_path_str(def_id) }\n     }\n \n-    query link_args(_: CrateNum) -> Lrc<Vec<String>> {\n-        eval_always\n-        desc { \"looking up link arguments for a crate\" }\n-    }\n-\n     /// Does lifetime resolution, but does not descend into trait items. This\n     /// should only be used for resolving lifetimes of on trait definitions,\n     /// and is used to avoid cycles. Importantly, `resolve_lifetimes` still visits"}, {"sha": "d5deec820889ac05595d459789de888bf53970de", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1728,7 +1728,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         impl<'tcx> Visitor<'tcx> for FakeReadCauseFinder<'tcx> {\n             fn visit_statement(&mut self, statement: &Statement<'tcx>, _: Location) {\n                 match statement {\n-                    Statement { kind: StatementKind::FakeRead(cause, box place), .. }\n+                    Statement { kind: StatementKind::FakeRead(box (cause, place)), .. }\n                         if *place == self.place =>\n                     {\n                         self.cause = Some(*cause);"}, {"sha": "2a388b8a72bb05b4aa3ff9a7099ccfcae3850e85", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -515,7 +515,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let block = &self.body.basic_blocks()[location.block];\n \n                 let kind = if let Some(&Statement {\n-                    kind: StatementKind::FakeRead(FakeReadCause::ForLet, _),\n+                    kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), _)),\n                     ..\n                 }) = block.statements.get(location.statement_index)\n                 {"}, {"sha": "577d7d53814ee1d362a084d421919f8ce5c5ff06", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -7,8 +7,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItemGroup;\n use rustc_hir::GeneratorKind;\n use rustc_middle::mir::{\n-    AggregateKind, Constant, Field, Local, LocalInfo, LocalKind, Location, Operand, Place,\n-    PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n+    AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n+    Place, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n@@ -795,6 +795,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n+        // StatementKind::FakeRead only contains a def_id if they are introduced as a result\n+        // of pattern matching within a closure.\n+        if let StatementKind::FakeRead(box (cause, ref place)) = stmt.kind {\n+            match cause {\n+                FakeReadCause::ForMatchedPlace(Some(closure_def_id))\n+                | FakeReadCause::ForLet(Some(closure_def_id)) => {\n+                    debug!(\"move_spans: def_id={:?} place={:?}\", closure_def_id, place);\n+                    let places = &[Operand::Move(*place)];\n+                    if let Some((args_span, generator_kind, var_span)) =\n+                        self.closure_span(closure_def_id, moved_place, places)\n+                    {\n+                        return ClosureUse { generator_kind, args_span, var_span };\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         let normal_ret =\n             if moved_place.projection.iter().any(|p| matches!(p, ProjectionElem::Downcast(..))) {\n                 PatUse(stmt.source_info.span)"}, {"sha": "9374741f83749ec8507ebf8842c617e1628c1060", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -63,7 +63,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n \n                 self.mutate_place(location, *lhs, Shallow(None), JustWrite);\n             }\n-            StatementKind::FakeRead(_, _) => {\n+            StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {"}, {"sha": "71db6abde43512abd716ca9817815b0af1026cbd", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -574,7 +574,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n \n                 self.mutate_place(location, (*lhs, span), Shallow(None), JustWrite, flow_state);\n             }\n-            StatementKind::FakeRead(_, box ref place) => {\n+            StatementKind::FakeRead(box (_, ref place)) => {\n                 // Read for match doesn't access any memory and is used to\n                 // assert that a place is safe and live. So we don't have to\n                 // do any checks here."}, {"sha": "538d8921869c3e7267fe0f53ad2c40f12e426cb9", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -293,8 +293,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::FakeRead(_, place) => {\n-                self.create_move_path(**place);\n+            StatementKind::FakeRead(box (_, place)) => {\n+                self.create_move_path(*place);\n             }\n             StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {"}, {"sha": "324d826b375c1976d9a23b3a8e1e1a2e16a42272", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -683,10 +683,10 @@ pub(super) fn filtered_statement_span(\n         // and `_1` is the `Place` for `somenum`.\n         //\n         // If and when the Issue is resolved, remove this special case match pattern:\n-        StatementKind::FakeRead(cause, _) if cause == FakeReadCause::ForGuardBinding => None,\n+        StatementKind::FakeRead(box (cause, _)) if cause == FakeReadCause::ForGuardBinding => None,\n \n         // Retain spans from all other statements\n-        StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }"}, {"sha": "fd4a783d12a003bb6f843f09892c6300eb525c62", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> CFG<'tcx> {\n         cause: FakeReadCause,\n         place: Place<'tcx>,\n     ) {\n-        let kind = StatementKind::FakeRead(cause, box place);\n+        let kind = StatementKind::FakeRead(box (cause, place));\n         let stmt = Statement { source_info, kind };\n         self.push(block, stmt);\n     }"}, {"sha": "822fbd91c947ea49ccbef8daf36b43fbc4e09522", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -179,24 +179,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //     match x { _ => () } // fake read of `x`\n                 // };\n                 // ```\n-                // FIXME(RFC2229): Remove feature gate once diagnostics are improved\n-                if this.tcx.features().capture_disjoint_fields {\n-                    for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n-                        let place_builder =\n-                            unpack!(block = this.as_place_builder(block, thir_place));\n-\n-                        if let Ok(place_builder_resolved) =\n-                            place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                        {\n-                            let mir_place =\n-                                place_builder_resolved.into_place(this.tcx, this.typeck_results);\n-                            this.cfg.push_fake_read(\n-                                block,\n-                                this.source_info(this.tcx.hir().span(*hir_id)),\n-                                *cause,\n-                                mir_place,\n-                            );\n-                        }\n+                for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n+                    let place_builder = unpack!(block = this.as_place_builder(block, thir_place));\n+\n+                    if let Ok(place_builder_resolved) =\n+                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n+                    {\n+                        let mir_place =\n+                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                        this.cfg.push_fake_read(\n+                            block,\n+                            this.source_info(this.tcx.hir().span(*hir_id)),\n+                            *cause,\n+                            mir_place,\n+                        );\n                     }\n                 }\n "}, {"sha": "0e422dc3c6378837608f27cd030bd0982514c0bd", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // uninhabited value. If we get never patterns, those will check that\n         // the place is initialized, and so this read would only be used to\n         // check safety.\n-        let cause_matched_place = FakeReadCause::ForMatchedPlace;\n+        let cause_matched_place = FakeReadCause::ForMatchedPlace(None);\n         let source_info = self.source_info(scrutinee_span);\n \n         if let Ok(scrutinee_builder) =\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet, place);\n+                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet(None), place);\n \n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n@@ -435,7 +435,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let pattern_source_info = self.source_info(irrefutable_pat.span);\n-                let cause_let = FakeReadCause::ForLet;\n+                let cause_let = FakeReadCause::ForLet(None);\n                 self.cfg.push_fake_read(block, pattern_source_info, cause_let, place);\n \n                 let ty_source_info = self.source_info(user_ty_span);"}, {"sha": "d474e99021104e392249f4a09d79477ac0264f57", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -851,6 +851,12 @@ enum BuiltinMacroState {\n     AlreadySeen(Span),\n }\n \n+struct DeriveData {\n+    resolutions: DeriveResolutions,\n+    helper_attrs: Vec<(usize, Ident)>,\n+    has_derive_copy: bool,\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -973,8 +979,9 @@ pub struct Resolver<'a> {\n     output_macro_rules_scopes: FxHashMap<ExpnId, MacroRulesScopeRef<'a>>,\n     /// Helper attributes that are in scope for the given expansion.\n     helper_attrs: FxHashMap<ExpnId, Vec<Ident>>,\n-    /// Resolutions for paths inside the `#[derive(...)]` attribute with the given `ExpnId`.\n-    derive_resolutions: FxHashMap<ExpnId, Vec<(Lrc<SyntaxExtension>, ast::Path)>>,\n+    /// Ready or in-progress results of resolving paths inside the `#[derive(...)]` attribute\n+    /// with the given `ExpnId`.\n+    derive_data: FxHashMap<ExpnId, DeriveData>,\n \n     /// Avoid duplicated errors for \"name already defined\".\n     name_already_seen: FxHashMap<Symbol, Span>,\n@@ -1310,7 +1317,7 @@ impl<'a> Resolver<'a> {\n             invocation_parent_scopes: Default::default(),\n             output_macro_rules_scopes: Default::default(),\n             helper_attrs: Default::default(),\n-            derive_resolutions: Default::default(),\n+            derive_data: Default::default(),\n             local_macro_def_scopes: FxHashMap::default(),\n             name_already_seen: FxHashMap::default(),\n             potentially_unused_imports: Vec::new(),"}, {"sha": "10e27f33c29960776dc92d2f77233b8e5fb7e3d7", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 52, "deletions": 38, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -4,7 +4,7 @@\n use crate::imports::ImportResolver;\n use crate::Namespace::*;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, BuiltinMacroState, Determinacy};\n-use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n+use crate::{CrateLint, DeriveData, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc_ast::{self as ast, Inline, ItemKind, ModKind, NodeId};\n use rustc_ast_lowering::ResolverAstLowering;\n@@ -14,8 +14,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n-use rustc_expand::base::Annotatable;\n-use rustc_expand::base::{Indeterminate, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::base::{Annotatable, DeriveResolutions, Indeterminate, ResolverExpand};\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, Invocation, InvocationKind, SupportsMacroExpansion};\n use rustc_feature::is_builtin_attr_name;\n@@ -359,58 +359,72 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     fn resolve_derives(\n         &mut self,\n         expn_id: ExpnId,\n-        derives: Vec<ast::Path>,\n         force: bool,\n+        derive_paths: &dyn Fn() -> DeriveResolutions,\n     ) -> Result<(), Indeterminate> {\n         // Block expansion of the container until we resolve all derives in it.\n         // This is required for two reasons:\n         // - Derive helper attributes are in scope for the item to which the `#[derive]`\n         //   is applied, so they have to be produced by the container's expansion rather\n         //   than by individual derives.\n         // - Derives in the container need to know whether one of them is a built-in `Copy`.\n-        // FIXME: Try to cache intermediate results to avoid resolving same derives multiple times.\n+        // Temporarily take the data to avoid borrow checker conflicts.\n+        let mut derive_data = mem::take(&mut self.derive_data);\n+        let entry = derive_data.entry(expn_id).or_insert_with(|| DeriveData {\n+            resolutions: derive_paths(),\n+            helper_attrs: Vec::new(),\n+            has_derive_copy: false,\n+        });\n         let parent_scope = self.invocation_parent_scopes[&expn_id];\n-        let mut exts = Vec::new();\n-        let mut helper_attrs = Vec::new();\n-        let mut has_derive_copy = false;\n-        for path in derives {\n-            exts.push((\n-                match self.resolve_macro_path(\n-                    &path,\n-                    Some(MacroKind::Derive),\n-                    &parent_scope,\n-                    true,\n-                    force,\n-                ) {\n-                    Ok((Some(ext), _)) => {\n-                        let span =\n-                            path.segments.last().unwrap().ident.span.normalize_to_macros_2_0();\n-                        helper_attrs\n-                            .extend(ext.helper_attrs.iter().map(|name| Ident::new(*name, span)));\n-                        has_derive_copy |= ext.builtin_name == Some(sym::Copy);\n-                        ext\n-                    }\n-                    Ok(_) | Err(Determinacy::Determined) => self.dummy_ext(MacroKind::Derive),\n-                    Err(Determinacy::Undetermined) => return Err(Indeterminate),\n-                },\n-                path,\n-            ))\n+        for (i, (path, opt_ext)) in entry.resolutions.iter_mut().enumerate() {\n+            if opt_ext.is_none() {\n+                *opt_ext = Some(\n+                    match self.resolve_macro_path(\n+                        &path,\n+                        Some(MacroKind::Derive),\n+                        &parent_scope,\n+                        true,\n+                        force,\n+                    ) {\n+                        Ok((Some(ext), _)) => {\n+                            if !ext.helper_attrs.is_empty() {\n+                                let last_seg = path.segments.last().unwrap();\n+                                let span = last_seg.ident.span.normalize_to_macros_2_0();\n+                                entry.helper_attrs.extend(\n+                                    ext.helper_attrs\n+                                        .iter()\n+                                        .map(|name| (i, Ident::new(*name, span))),\n+                                );\n+                            }\n+                            entry.has_derive_copy |= ext.builtin_name == Some(sym::Copy);\n+                            ext\n+                        }\n+                        Ok(_) | Err(Determinacy::Determined) => self.dummy_ext(MacroKind::Derive),\n+                        Err(Determinacy::Undetermined) => {\n+                            assert!(self.derive_data.is_empty());\n+                            self.derive_data = derive_data;\n+                            return Err(Indeterminate);\n+                        }\n+                    },\n+                );\n+            }\n         }\n-        self.derive_resolutions.insert(expn_id, exts);\n-        self.helper_attrs.insert(expn_id, helper_attrs);\n+        // Sort helpers in a stable way independent from the derive resolution order.\n+        entry.helper_attrs.sort_by_key(|(i, _)| *i);\n+        self.helper_attrs\n+            .insert(expn_id, entry.helper_attrs.iter().map(|(_, ident)| *ident).collect());\n         // Mark this derive as having `Copy` either if it has `Copy` itself or if its parent derive\n         // has `Copy`, to support cases like `#[derive(Clone, Copy)] #[derive(Debug)]`.\n-        if has_derive_copy || self.has_derive_copy(parent_scope.expansion) {\n+        if entry.has_derive_copy || self.has_derive_copy(parent_scope.expansion) {\n             self.containers_deriving_copy.insert(expn_id);\n         }\n+        assert!(self.derive_data.is_empty());\n+        self.derive_data = derive_data;\n         Ok(())\n     }\n \n-    fn take_derive_resolutions(\n-        &mut self,\n-        expn_id: ExpnId,\n-    ) -> Option<Vec<(Lrc<SyntaxExtension>, ast::Path)>> {\n-        self.derive_resolutions.remove(&expn_id)\n+    fn take_derive_resolutions(&mut self, expn_id: ExpnId) -> Option<DeriveResolutions> {\n+        self.derive_data.remove(&expn_id).map(|data| data.resolutions)\n     }\n \n     // The function that implements the resolution logic of `#[cfg_accessible(path)]`."}, {"sha": "ec04bf7d05418785c929923d3c0a1ac03cb5b237", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -456,6 +456,10 @@ impl Externs {\n     pub fn iter(&self) -> BTreeMapIter<'_, String, ExternEntry> {\n         self.0.iter()\n     }\n+\n+    pub fn len(&self) -> usize {\n+        self.0.len()\n+    }\n }\n \n impl ExternEntry {\n@@ -698,6 +702,7 @@ impl Default for Options {\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n+            json_unused_externs: false,\n             pretty: None,\n         }\n     }\n@@ -817,6 +822,9 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n         }\n     }\n     ret.insert((sym::target_arch, Some(Symbol::intern(arch))));\n+    if sess.target.is_like_wasm {\n+        ret.insert((sym::wasm, None));\n+    }\n     ret.insert((sym::target_endian, Some(Symbol::intern(end.as_str()))));\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n@@ -1196,15 +1204,23 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n     }\n }\n \n+/// Possible json config files\n+pub struct JsonConfig {\n+    pub json_rendered: HumanReadableErrorType,\n+    pub json_artifact_notifications: bool,\n+    pub json_unused_externs: bool,\n+}\n+\n /// Parse the `--json` flag.\n ///\n /// The first value returned is how to render JSON diagnostics, and the second\n /// is whether or not artifact notifications are enabled.\n-pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool) {\n+pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n     let mut json_rendered: fn(ColorConfig) -> HumanReadableErrorType =\n         HumanReadableErrorType::Default;\n     let mut json_color = ColorConfig::Never;\n     let mut json_artifact_notifications = false;\n+    let mut json_unused_externs = false;\n     for option in matches.opt_strs(\"json\") {\n         // For now conservatively forbid `--color` with `--json` since `--json`\n         // won't actually be emitting any colors and anything colorized is\n@@ -1221,14 +1237,20 @@ pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool)\n                 \"diagnostic-short\" => json_rendered = HumanReadableErrorType::Short,\n                 \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n                 \"artifacts\" => json_artifact_notifications = true,\n+                \"unused-externs\" => json_unused_externs = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n                     &format!(\"unknown `--json` option `{}`\", s),\n                 ),\n             }\n         }\n     }\n-    (json_rendered(json_color), json_artifact_notifications)\n+\n+    JsonConfig {\n+        json_rendered: json_rendered(json_color),\n+        json_artifact_notifications,\n+        json_unused_externs,\n+    }\n }\n \n /// Parses the `--error-format` flag.\n@@ -1806,7 +1828,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let edition = parse_crate_edition(matches);\n \n-    let (json_rendered, json_artifact_notifications) = parse_json(matches);\n+    let JsonConfig { json_rendered, json_artifact_notifications, json_unused_externs } =\n+        parse_json(matches);\n \n     let error_format = parse_error_format(matches, color, json_rendered);\n \n@@ -1819,6 +1842,14 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let mut debugging_opts = build_debugging_options(matches, error_format);\n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n+    if !debugging_opts.unstable_options && json_unused_externs {\n+        early_error(\n+            error_format,\n+            \"the `-Z unstable-options` flag must also be passed to enable \\\n+            the flag `--json=unused-externs`\",\n+        );\n+    }\n+\n     let output_types = parse_output_types(&debugging_opts, matches, error_format);\n \n     let mut cg = build_codegen_options(matches, error_format);\n@@ -1979,6 +2010,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         remap_path_prefix,\n         edition,\n         json_artifact_notifications,\n+        json_unused_externs,\n         pretty,\n     }\n }\n@@ -2300,6 +2332,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(PathBuf);\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n+    impl_dep_tracking_hash_via_hash!(Option<u32>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<NonZeroUsize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);"}, {"sha": "a184608ed29bfb8d7fa2607addac75dba7dabac3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -147,6 +147,9 @@ top_level_options!(\n         // by the compiler.\n         json_artifact_notifications: bool [TRACKED],\n \n+        // `true` if we're emitting a JSON blob containing the unused externs\n+        json_unused_externs: bool [UNTRACKED],\n+\n         pretty: Option<PpMode> [UNTRACKED],\n     }\n );\n@@ -248,9 +251,9 @@ macro_rules! options {\n         pub const parse_list: &str = \"a space-separated list of strings\";\n         pub const parse_opt_list: &str = parse_list;\n         pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n-        pub const parse_uint: &str = \"a number\";\n-        pub const parse_opt_uint: &str = parse_uint;\n-        pub const parse_threads: &str = parse_uint;\n+        pub const parse_number: &str = \"a number\";\n+        pub const parse_opt_number: &str = parse_number;\n+        pub const parse_threads: &str = parse_number;\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n@@ -414,16 +417,16 @@ macro_rules! options {\n             }\n         }\n \n-        /// Use this for any uint option that has a static default.\n-        fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n+        /// Use this for any numeric option that has a static default.\n+        fn parse_number<T: Copy + FromStr>(slot: &mut T, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n                 None => false\n             }\n         }\n \n-        /// Use this for any uint option that lacks a static default.\n-        fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+        /// Use this for any numeric option that lacks a static default.\n+        fn parse_opt_number<T: Copy + FromStr>(slot: &mut Option<T>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n                 None => false\n@@ -784,13 +787,13 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"this option is deprecated and does nothing\"),\n     code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n-    codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n         \"use Windows Control Flow Guard (default: no)\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n-    debuginfo: usize = (0, parse_uint, [TRACKED],\n+    debuginfo: usize = (0, parse_number, [TRACKED],\n         \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n         2 = full debug info with variable and type information; default: 0)\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n@@ -805,7 +808,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"force use of unwind tables\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n-    inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_threshold: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"set the threshold for inlining a function\"),\n     link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n@@ -993,9 +996,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n     inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable MIR inlining (default: no)\"),\n-    inline_mir_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"a default MIR inlining threshold (default: 50)\"),\n-    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),\n@@ -1031,7 +1034,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n-    mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes for LLVM >= 12, otherwise no)\"),\n@@ -1152,7 +1155,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n-    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    terminal_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current terminal width\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),"}, {"sha": "e4810fe705953d96a5f0548b4af9827bbe3cb487", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1294,6 +1294,7 @@ symbols! {\n         vreg,\n         vreg_low16,\n         warn,\n+        wasm,\n         wasm_import_module,\n         wasm_target_feature,\n         while_let,"}, {"sha": "c050bbc9b9df6cb3b9968a5cad3f8f854dfc4d40", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -198,7 +198,7 @@ fn compute_symbol_name(\n     //\n     // [1]: https://bugs.llvm.org/show_bug.cgi?id=44316\n     if is_foreign\n-        && (tcx.sess.target.arch != \"wasm32\"\n+        && (!tcx.sess.target.is_like_wasm\n             || !tcx.wasm_import_module_map(def_id.krate).contains_key(&def_id))\n     {\n         if let Some(name) = attrs.link_name {"}, {"sha": "395235399ea86899e5be09035cfdef129febfa71", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -20,6 +20,7 @@ mod sparc;\n mod sparc64;\n mod wasm32;\n mod wasm32_bindgen_compat;\n+mod wasm64;\n mod x86;\n mod x86_64;\n mod x86_win64;\n@@ -652,6 +653,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                 _ => wasm32_bindgen_compat::compute_abi_info(self),\n             },\n             \"asmjs\" => wasm32::compute_abi_info(cx, self),\n+            \"wasm64\" => wasm64::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "46d670d1689493e1153ee3acecdab6abf6ac8e92", "filename": "compiler/rustc_target/src/abi/call/wasm64.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,58 @@\n+use crate::abi::call::{ArgAbi, FnAbi, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n+\n+fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgAbi<'a, Ty>) -> bool\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    if val.layout.is_aggregate() {\n+        if let Some(unit) = val.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()) {\n+            let size = val.layout.size;\n+            if unit.size == size {\n+                val.cast_to(Uniform { unit, total: size });\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    ret.extend_integer_width_to(64);\n+    if ret.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, ret) {\n+        ret.make_indirect();\n+    }\n+}\n+\n+fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    arg.extend_integer_width_to(64);\n+    if arg.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, arg) {\n+        arg.make_indirect_byval();\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    if !fn_abi.ret.is_ignore() {\n+        classify_ret(cx, &mut fn_abi.ret);\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg(cx, arg);\n+    }\n+}"}, {"sha": "a7a708fe7dec3f6e706ec5dbb2352519d9aeb0ee", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -68,7 +68,6 @@ fn frame_pointer_r11(\n     _arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n     target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if !frame_pointer_is_r7(has_feature, target) {\n         Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n@@ -81,7 +80,6 @@ fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n     target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if frame_pointer_is_r7(has_feature, target) {\n         Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")"}, {"sha": "e2268a61a42571277939de276759cc94827d1d0b", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -90,7 +90,7 @@ macro_rules! def_regs {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, &mut _has_feature, _target, false)?;)?\n+                            $($filter(_arch, &mut _has_feature, _target)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -114,7 +114,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, &mut _has_feature, _target, true).is_ok() &&)? true {\n+                if $($filter(_arch, &mut _has_feature, _target).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }"}, {"sha": "185d6ac8246c9a1bffc65fa92d78a9f5f41cf0f4", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -52,7 +52,6 @@ fn not_e(\n     _arch: InlineAsmArch,\n     mut has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if has_feature(\"e\") {\n         Err(\"register can't be used with the `e` target feature\")"}, {"sha": "90660dad4c2a1fb2496760e34eeb90faa4f44aa4", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -133,7 +133,6 @@ fn x86_64_only(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Err(\"register is only available on x86_64\"),\n@@ -146,13 +145,9 @@ fn high_byte(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n-        InlineAsmArch::X86_64 if allocating => {\n-            // The error message isn't actually used...\n-            Err(\"high byte registers are not allocated by reg_byte\")\n-        }\n+        InlineAsmArch::X86_64 => Err(\"high byte registers cannot be used as an operand on x86_64\"),\n         _ => Ok(()),\n     }\n }"}, {"sha": "801cdd3ebe924c7ce7772896582f23d36bf11c66", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -79,7 +79,7 @@ mod solaris_base;\n mod thumb_base;\n mod uefi_msvc_base;\n mod vxworks_base;\n-mod wasm32_base;\n+mod wasm_base;\n mod windows_gnu_base;\n mod windows_msvc_base;\n mod windows_uwp_gnu_base;\n@@ -842,6 +842,7 @@ supported_targets! {\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n     (\"wasm32-wasi\", wasm32_wasi),\n+    (\"wasm64-unknown-unknown\", wasm64_unknown_unknown),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),\n@@ -1076,6 +1077,8 @@ pub struct TargetOptions {\n     pub is_like_emscripten: bool,\n     /// Whether the target toolchain is like Fuchsia's.\n     pub is_like_fuchsia: bool,\n+    /// Whether a target toolchain is like WASM.\n+    pub is_like_wasm: bool,\n     /// Version of DWARF to use if not using the default.\n     /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n     pub dwarf_version: Option<u32>,\n@@ -1295,6 +1298,7 @@ impl Default for TargetOptions {\n             is_like_emscripten: false,\n             is_like_msvc: false,\n             is_like_fuchsia: false,\n+            is_like_wasm: false,\n             dwarf_version: None,\n             linker_is_gnu: false,\n             allows_weak_linkage: true,\n@@ -1789,6 +1793,7 @@ impl Target {\n         key!(is_like_msvc, bool);\n         key!(is_like_emscripten, bool);\n         key!(is_like_fuchsia, bool);\n+        key!(is_like_wasm, bool);\n         key!(dwarf_version, Option<u32>);\n         key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n@@ -2027,6 +2032,7 @@ impl ToJson for Target {\n         target_option_val!(is_like_msvc);\n         target_option_val!(is_like_emscripten);\n         target_option_val!(is_like_fuchsia);\n+        target_option_val!(is_like_wasm);\n         target_option_val!(dwarf_version);\n         target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);"}, {"sha": "f4de8bc0a5803ba9596a532a47373ea09d65e4c6", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -50,6 +50,7 @@ impl Target {\n     // and you certainly want \"unknown\" for the OS name.\n     fn can_use_os_unknown(&self) -> bool {\n         self.llvm_target == \"wasm32-unknown-unknown\"\n+            || self.llvm_target == \"wasm64-unknown-unknown\"\n             || (self.env == \"sgx\" && self.vendor == \"fortanix\")\n     }\n }"}, {"sha": "e028dbaa3252018260de58ec15c4ef040f729527", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,8 +1,8 @@\n-use super::wasm32_base;\n+use super::wasm_base;\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut options = wasm32_base::options();\n+    let mut options = wasm_base::options();\n \n     let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n "}, {"sha": "0a88ee426297b1f8da2348395e2934431d55e0f6", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -10,11 +10,11 @@\n //! This target is more or less managed by the Rust and WebAssembly Working\n //! Group nowadays at <https://github.com/rustwasm>.\n \n-use super::wasm32_base;\n+use super::wasm_base;\n use super::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n-    let mut options = wasm32_base::options();\n+    let mut options = wasm_base::options();\n     options.os = \"unknown\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();"}, {"sha": "a6b12d2ee8f65005018662eeb92157b6c6b41567", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -72,11 +72,11 @@\n //! best we can with this target. Don't start relying on too much here unless\n //! you know what you're getting in to!\n \n-use super::wasm32_base;\n+use super::wasm_base;\n use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n-    let mut options = wasm32_base::options();\n+    let mut options = wasm_base::options();\n \n     options.os = \"wasi\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);"}, {"sha": "8bfb229d77f67328766c0d51f081b93cfc0cbf98", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,39 @@\n+//! A \"bare wasm\" target representing a WebAssembly output that makes zero\n+//! assumptions about its environment.\n+//!\n+//! The `wasm64-unknown-unknown` target is intended to encapsulate use cases\n+//! that do not rely on any imported functionality. The binaries generated are\n+//! entirely self-contained by default when using the standard library. Although\n+//! the standard library is available, most of it returns an error immediately\n+//! (e.g. trying to create a TCP stream or something like that).\n+\n+use super::wasm_base;\n+use super::{LinkerFlavor, LldFlavor, Target};\n+\n+pub fn target() -> Target {\n+    let mut options = wasm_base::options();\n+    options.os = \"unknown\".to_string();\n+    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n+    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+\n+    // Make sure clang uses LLD as its linker and is configured appropriately\n+    // otherwise\n+    clang_args.push(\"--target=wasm64-unknown-unknown\".to_string());\n+\n+    // For now this target just never has an entry symbol no matter the output\n+    // type, so unconditionally pass this.\n+    clang_args.push(\"-Wl,--no-entry\".to_string());\n+    options\n+        .pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm))\n+        .unwrap()\n+        .push(\"--no-entry\".to_string());\n+\n+    Target {\n+        llvm_target: \"wasm64-unknown-unknown\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-n32:64-S128\".to_string(),\n+        arch: \"wasm64\".to_string(),\n+        options,\n+    }\n+}"}, {"sha": "c93ad24225a5e4ad94860fc8e5341d35e71cfcd5", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -60,6 +60,8 @@ pub fn options() -> TargetOptions {\n     pre_link_args.insert(LinkerFlavor::Gcc, clang_args);\n \n     TargetOptions {\n+        is_like_wasm: true,\n+\n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but\n         // we don't allow intermediate `dylib` crate types", "previous_filename": "compiler/rustc_target/src/spec/wasm32_base.rs"}, {"sha": "e9e810344776b963d52a0eeb85fbd6ecbcc8c376", "filename": "compiler/rustc_typeck/src/check/expectation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -104,8 +104,8 @@ impl<'a, 'tcx> Expectation<'tcx> {\n     /// for the program to type-check). `only_has_type` will return\n     /// such a constraint, if it exists.\n     pub(super) fn only_has_type(self, fcx: &FnCtxt<'a, 'tcx>) -> Option<Ty<'tcx>> {\n-        match self.resolve(fcx) {\n-            ExpectHasType(ty) => Some(ty),\n+        match self {\n+            ExpectHasType(ty) => Some(fcx.resolve_vars_if_possible(ty)),\n             NoExpectation | ExpectCastableToType(_) | ExpectRvalueLikeUnsized(_) | IsLast(_) => {\n                 None\n             }"}, {"sha": "67714b714c9d02ee9aa8fdc4bf6f617fc376dc1d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\">> type-checking: expr={:?} expected={:?}\", expr, expected);\n+        debug!(\">> type-checking: expected={:?}, expr={:?} \", expected, expr);\n \n         // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n         // without the final expr (e.g. `try { return; }`). We don't want to generate an\n@@ -224,7 +224,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\"check_expr_kind(expr={:?}, expected={:?})\", expr, expected);\n+        debug!(\"check_expr_kind(expected={:?}, expr={:?})\", expected, expr);\n \n         let tcx = self.tcx;\n         match expr.kind {"}, {"sha": "d83b74f4ce9e068bf1f82a250510386d13205d52", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -83,6 +83,8 @@ struct ProbeContext<'a, 'tcx> {\n     unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n \n     is_suggestion: IsSuggestion,\n+\n+    scope_expr_id: hir::HirId,\n }\n \n impl<'a, 'tcx> Deref for ProbeContext<'a, 'tcx> {\n@@ -448,6 +450,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 orig_values,\n                 steps.steps,\n                 is_suggestion,\n+                scope_expr_id,\n             );\n \n             probe_cx.assemble_inherent_candidates();\n@@ -547,6 +550,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         orig_steps_var_values: OriginalQueryValues<'tcx>,\n         steps: Lrc<Vec<CandidateStep<'tcx>>>,\n         is_suggestion: IsSuggestion,\n+        scope_expr_id: hir::HirId,\n     ) -> ProbeContext<'a, 'tcx> {\n         ProbeContext {\n             fcx,\n@@ -564,6 +568,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             private_candidate: None,\n             unsatisfied_predicates: Vec::new(),\n             is_suggestion,\n+            scope_expr_id,\n         }\n     }\n \n@@ -1312,7 +1317,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         self.tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n-            self.fcx.body_id,\n+            self.scope_expr_id,\n             self.span,\n             |lint| {\n                 let def_kind = stable_pick.item.kind.as_def_kind();\n@@ -1594,6 +1599,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.orig_steps_var_values.clone(),\n                 steps,\n                 IsSuggestion(true),\n+                self.scope_expr_id,\n             );\n             pcx.allow_similar_names = true;\n             pcx.assemble_inherent_candidates();"}, {"sha": "02510cb6a44cf87806fa0edc8b1a9b3d8efcd069", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -280,9 +280,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 if needs_to_be_read {\n                     self.borrow_expr(&discr, ty::ImmBorrow);\n                 } else {\n+                    let closure_def_id = match discr_place.place.base {\n+                        PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+                        _ => None,\n+                    };\n+\n                     self.delegate.fake_read(\n                         discr_place.place.clone(),\n-                        FakeReadCause::ForMatchedPlace,\n+                        FakeReadCause::ForMatchedPlace(closure_def_id),\n                         discr_place.hir_id,\n                     );\n \n@@ -578,9 +583,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn walk_arm(&mut self, discr_place: &PlaceWithHirId<'tcx>, arm: &hir::Arm<'_>) {\n+        let closure_def_id = match discr_place.place.base {\n+            PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+            _ => None,\n+        };\n+\n         self.delegate.fake_read(\n             discr_place.place.clone(),\n-            FakeReadCause::ForMatchedPlace,\n+            FakeReadCause::ForMatchedPlace(closure_def_id),\n             discr_place.hir_id,\n         );\n         self.walk_pat(discr_place, &arm.pat);\n@@ -595,9 +605,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// Walks a pat that occurs in isolation (i.e., top-level of fn argument or\n     /// let binding, and *not* a match arm or nested pat.)\n     fn walk_irrefutable_pat(&mut self, discr_place: &PlaceWithHirId<'tcx>, pat: &hir::Pat<'_>) {\n+        let closure_def_id = match discr_place.place.base {\n+            PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+            _ => None,\n+        };\n+\n         self.delegate.fake_read(\n             discr_place.place.clone(),\n-            FakeReadCause::ForLet,\n+            FakeReadCause::ForLet(closure_def_id),\n             discr_place.hir_id,\n         );\n         self.walk_pat(discr_place, pat);"}, {"sha": "b78e2b7b746c42aecb9b67c66fc4c6b8c4ed5e6f", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -373,7 +373,9 @@ changelog-seen = 2\n # Whether to download the stage 1 and 2 compilers from CI.\n # This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n #\n-# FIXME: currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n+# You can set this to \"if-unchanged\" to only download if `compiler/` has not been modified.\n+#\n+# FIXME(#82739): currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n #download-rustc = false\n \n # Number of codegen units to use for each compiler invocation. A value of 0"}, {"sha": "f330a1bb3dcfebd0822d6b485c5937d59a5415cf", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 165, "deletions": 167, "changes": 332, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -128,106 +128,6 @@ impl<K, V> InternalNode<K, V> {\n /// is not a separate type and has no destructor.\n type BoxedNode<K, V> = NonNull<LeafNode<K, V>>;\n \n-/// The root node of an owned tree.\n-///\n-/// Note that this does not have a destructor, and must be cleaned up manually.\n-pub type Root<K, V> = NodeRef<marker::Owned, K, V, marker::LeafOrInternal>;\n-\n-impl<K, V> Root<K, V> {\n-    /// Returns a new owned tree, with its own root node that is initially empty.\n-    pub fn new() -> Self {\n-        NodeRef::new_leaf().forget_type()\n-    }\n-}\n-\n-impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n-    fn new_leaf() -> Self {\n-        Self::from_new_leaf(LeafNode::new())\n-    }\n-\n-    fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {\n-        NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }\n-    }\n-}\n-\n-impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n-    fn new_internal(child: Root<K, V>) -> Self {\n-        let mut new_node = unsafe { InternalNode::new() };\n-        new_node.edges[0].write(child.node);\n-        unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }\n-    }\n-\n-    /// # Safety\n-    /// `height` must not be zero.\n-    unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n-        debug_assert!(height > 0);\n-        let node = NonNull::from(Box::leak(internal)).cast();\n-        let mut this = NodeRef { height, node, _marker: PhantomData };\n-        this.borrow_mut().correct_all_childrens_parent_links();\n-        this\n-    }\n-}\n-\n-impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {\n-    /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe\n-    /// because the return value cannot be used to destroy the root, and there\n-    /// cannot be other references to the tree.\n-    pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Slightly mutably borrows the owned root node.\n-    pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Irreversibly transitions to a reference that permits traversal and offers\n-    /// destructive methods and little else.\n-    pub fn into_dying(self) -> NodeRef<marker::Dying, K, V, Type> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n-impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n-    /// Adds a new internal node with a single edge pointing to the previous root node,\n-    /// make that new node the root node, and return it. This increases the height by 1\n-    /// and is the opposite of `pop_internal_level`.\n-    pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n-        super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());\n-\n-        // `self.borrow_mut()`, except that we just forgot we're internal now:\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Removes the internal root node, using its first child as the new root node.\n-    /// As it is intended only to be called when the root node has only one child,\n-    /// no cleanup is done on any of the keys, values and other children.\n-    /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n-    ///\n-    /// Requires exclusive access to the `Root` object but not to the root node;\n-    /// it will not invalidate other handles or references to the root node.\n-    ///\n-    /// Panics if there is no internal level, i.e., if the root node is a leaf.\n-    pub fn pop_internal_level(&mut self) {\n-        assert!(self.height > 0);\n-\n-        let top = self.node;\n-\n-        // SAFETY: we asserted to be internal.\n-        let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };\n-        // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.\n-        let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };\n-        // SAFETY: the first edge is always initialized.\n-        self.node = unsafe { internal_node.edges[0].assume_init_read() };\n-        self.height -= 1;\n-        self.clear_parent_link();\n-\n-        unsafe {\n-            Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());\n-        }\n-    }\n-}\n-\n // N.B. `NodeRef` is always covariant in `K` and `V`, even when the `BorrowType`\n // is `Mut`. This is technically wrong, but cannot result in any unsafety due to\n // internal use of `NodeRef` because we stay completely generic over `K` and `V`.\n@@ -292,6 +192,11 @@ pub struct NodeRef<BorrowType, K, V, Type> {\n     _marker: PhantomData<(BorrowType, Type)>,\n }\n \n+/// The root node of an owned tree.\n+///\n+/// Note that this does not have a destructor, and must be cleaned up manually.\n+pub type Root<K, V> = NodeRef<marker::Owned, K, V, marker::LeafOrInternal>;\n+\n impl<'a, K: 'a, V: 'a, Type> Copy for NodeRef<marker::Immut<'a>, K, V, Type> {}\n impl<'a, K: 'a, V: 'a, Type> Clone for NodeRef<marker::Immut<'a>, K, V, Type> {\n     fn clone(&self) -> Self {\n@@ -307,6 +212,34 @@ unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send for NodeRef<marker::ValMu\n unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Owned, K, V, Type> {}\n unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Dying, K, V, Type> {}\n \n+impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n+    fn new_leaf() -> Self {\n+        Self::from_new_leaf(LeafNode::new())\n+    }\n+\n+    fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {\n+        NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }\n+    }\n+}\n+\n+impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n+    fn new_internal(child: Root<K, V>) -> Self {\n+        let mut new_node = unsafe { InternalNode::new() };\n+        new_node.edges[0].write(child.node);\n+        unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }\n+    }\n+\n+    /// # Safety\n+    /// `height` must not be zero.\n+    unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n+        debug_assert!(height > 0);\n+        let node = NonNull::from(Box::leak(internal)).cast();\n+        let mut this = NodeRef { height, node, _marker: PhantomData };\n+        this.borrow_mut().correct_all_childrens_parent_links();\n+        this\n+    }\n+}\n+\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n     /// Unpack a node reference that was packed as `NodeRef::parent`.\n     fn from_internal(node: NonNull<InternalNode<K, V>>, height: usize) -> Self {\n@@ -420,6 +353,19 @@ impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type>\n     }\n }\n \n+impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n+    /// Could be a public implementation of PartialEq, but only used in this module.\n+    fn eq(&self, other: &Self) -> bool {\n+        let Self { node, height, _marker } = self;\n+        if node.eq(&other.node) {\n+            debug_assert_eq!(*height, other.height);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     /// Exposes the leaf portion of any leaf or internal node in an immutable tree.\n     fn into_leaf(self) -> &'a LeafNode<K, V> {\n@@ -461,20 +407,6 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n     }\n }\n \n-impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.\n-    unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n-        debug_assert!(self.height == 0);\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Unsafely asserts to the compiler the static information that this node is an `Internal`.\n-    unsafe fn cast_to_internal_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-        debug_assert!(self.height > 0);\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Temporarily takes out another, mutable reference to the same node. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n@@ -577,6 +509,22 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n }\n \n+impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n+    /// # Safety\n+    /// Every item returned by `range` is a valid edge index for the node.\n+    unsafe fn correct_childrens_parent_links<R: Iterator<Item = usize>>(&mut self, range: R) {\n+        for i in range {\n+            debug_assert!(i <= self.len());\n+            unsafe { Handle::new_edge(self.reborrow_mut(), i) }.correct_parent_link();\n+        }\n+    }\n+\n+    fn correct_all_childrens_parent_links(&mut self) {\n+        let len = self.len();\n+        unsafe { self.correct_childrens_parent_links(0..=len) };\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Sets the node's link to its parent edge,\n     /// without invalidating other references to the node.\n@@ -596,6 +544,71 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     }\n }\n \n+impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n+    /// Returns a new owned tree, with its own root node that is initially empty.\n+    pub fn new() -> Self {\n+        NodeRef::new_leaf().forget_type()\n+    }\n+\n+    /// Adds a new internal node with a single edge pointing to the previous root node,\n+    /// make that new node the root node, and return it. This increases the height by 1\n+    /// and is the opposite of `pop_internal_level`.\n+    pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n+        super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());\n+\n+        // `self.borrow_mut()`, except that we just forgot we're internal now:\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Removes the internal root node, using its first child as the new root node.\n+    /// As it is intended only to be called when the root node has only one child,\n+    /// no cleanup is done on any of the keys, values and other children.\n+    /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n+    ///\n+    /// Requires exclusive access to the `Root` object but not to the root node;\n+    /// it will not invalidate other handles or references to the root node.\n+    ///\n+    /// Panics if there is no internal level, i.e., if the root node is a leaf.\n+    pub fn pop_internal_level(&mut self) {\n+        assert!(self.height > 0);\n+\n+        let top = self.node;\n+\n+        // SAFETY: we asserted to be internal.\n+        let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };\n+        // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.\n+        let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };\n+        // SAFETY: the first edge is always initialized.\n+        self.node = unsafe { internal_node.edges[0].assume_init_read() };\n+        self.height -= 1;\n+        self.clear_parent_link();\n+\n+        unsafe {\n+            Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());\n+        }\n+    }\n+}\n+\n+impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {\n+    /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe\n+    /// because the return value cannot be used to destroy the root, and there\n+    /// cannot be other references to the tree.\n+    pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Slightly mutably borrows the owned root node.\n+    pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Irreversibly transitions to a reference that permits traversal and offers\n+    /// destructive methods and little else.\n+    pub fn into_dying(self) -> NodeRef<marker::Dying, K, V, Type> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     /// Adds a key-value pair to the end of the node.\n     pub fn push(&mut self, key: K, val: V) {\n@@ -610,22 +623,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     }\n }\n \n-impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-    /// # Safety\n-    /// Every item returned by `range` is a valid edge index for the node.\n-    unsafe fn correct_childrens_parent_links<R: Iterator<Item = usize>>(&mut self, range: R) {\n-        for i in range {\n-            debug_assert!(i <= self.len());\n-            unsafe { Handle::new_edge(self.reborrow_mut(), i) }.correct_parent_link();\n-        }\n-    }\n-\n-    fn correct_all_childrens_parent_links(&mut self) {\n-        let len = self.len();\n-        unsafe { self.correct_childrens_parent_links(0..=len) };\n-    }\n-}\n-\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     /// Adds a key-value pair, and an edge to go to the right of that pair,\n     /// to the end of the node.\n@@ -645,6 +642,20 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     }\n }\n \n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {\n+    /// Removes any static information asserting that this node is a `Leaf` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n+    /// Removes any static information asserting that this node is an `Internal` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     /// Checks whether a node is an `Internal` node or a `Leaf` node.\n     pub fn force(\n@@ -669,6 +680,20 @@ impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     }\n }\n \n+impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n+    /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.\n+    unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n+        debug_assert!(self.height == 0);\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Unsafely asserts to the compiler the static information that this node is an `Internal`.\n+    unsafe fn cast_to_internal_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n+        debug_assert!(self.height > 0);\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n /// A reference to a specific key-value pair or edge within a node. The `Node` parameter\n /// must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key-value\n /// pair) or `Edge` (signifying a handle on an edge).\n@@ -722,19 +747,6 @@ impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, mar\n     }\n }\n \n-impl<BorrowType, K, V, NodeType> NodeRef<BorrowType, K, V, NodeType> {\n-    /// Could be a public implementation of PartialEq, but only used in this module.\n-    fn eq(&self, other: &Self) -> bool {\n-        let Self { node, height, _marker } = self;\n-        if node.eq(&other.node) {\n-            debug_assert_eq!(*height, other.height);\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n     for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>\n {\n@@ -754,16 +766,6 @@ impl<BorrowType, K, V, NodeType, HandleType>\n     }\n }\n \n-impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {\n-    /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.\n-    pub unsafe fn cast_to_leaf_unchecked(\n-        self,\n-    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {\n-        let node = unsafe { self.node.cast_to_leaf_unchecked() };\n-        Handle { node, idx: self.idx, _marker: PhantomData }\n-    }\n-}\n-\n impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n     /// Temporarily takes out another, mutable handle on the same location. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n@@ -1466,20 +1468,6 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n     }\n }\n \n-impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {\n-    /// Removes any static information asserting that this node is a `Leaf` node.\n-    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n-impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n-    /// Removes any static information asserting that this node is an `Internal` node.\n-    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {\n     pub fn forget_node_type(\n         self,\n@@ -1531,6 +1519,16 @@ impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInte\n     }\n }\n \n+impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {\n+    /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.\n+    pub unsafe fn cast_to_leaf_unchecked(\n+        self,\n+    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {\n+        let node = unsafe { self.node.cast_to_leaf_unchecked() };\n+        Handle { node, idx: self.idx, _marker: PhantomData }\n+    }\n+}\n+\n impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n     /// Move the suffix after `self` from one node to another one. `right` must be empty.\n     /// The first edge of `right` remains unchanged."}, {"sha": "14cb1d3b405c2df1f05b6ad71eb8b603de82e2ad", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -133,7 +133,6 @@\n #![feature(trusted_len)]\n #![feature(unboxed_closures)]\n #![feature(unicode_internals)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsize)]\n #![feature(unsized_fn_params)]\n #![feature(allocator_internals)]\n@@ -142,8 +141,7 @@\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]\n-#![cfg_attr(bootstrap, feature(type_alias_impl_trait))]\n-#![cfg_attr(not(bootstrap), feature(min_type_alias_impl_trait))]\n+#![feature(min_type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]"}, {"sha": "4dcc5d30debf7294d4f92927122a2e7032dc57a3", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1004,9 +1004,9 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n         .map_while(Option::Some)\n         .peekable()\n         .skip(1)\n-        .map(|e| std::num::NonZeroUsize::new(e));\n+        .map(|e| if e != usize::MAX { Ok(std::num::NonZeroUsize::new(e)) } else { Err(()) });\n     assert_in_place_trait(&iter);\n-    let sink = iter.collect::<Vec<_>>();\n+    let sink = iter.collect::<Result<Vec<_>, _>>().unwrap();\n     let sinkptr = sink.as_ptr();\n     assert_eq!(srcptr, sinkptr as *const usize);\n }\n@@ -1078,12 +1078,21 @@ fn test_from_iter_specialization_panic_during_drop_leaks() {\n         }\n     }\n \n+    let mut to_free: *mut Droppable = core::ptr::null_mut();\n+    let mut cap = 0;\n+\n     let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n-        let v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n+        let mut v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n+        to_free = v.as_mut_ptr();\n+        cap = v.capacity();\n         let _ = v.into_iter().take(0).collect::<Vec<_>>();\n     }));\n \n     assert_eq!(unsafe { DROP_COUNTER }, 1);\n+    // clean up the leak to keep miri happy\n+    unsafe {\n+        drop(Vec::from_raw_parts(to_free, 0, cap));\n+    }\n }\n \n #[test]"}, {"sha": "4820588df25cd3bcef05b3602888d0e7f9fc31c3", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1815,7 +1815,7 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_unsafe_cell_new\", since = \"1.32.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value }\n     }\n@@ -1831,7 +1831,7 @@ impl<T> UnsafeCell<T> {\n     ///\n     /// let five = uc.into_inner();\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     pub const fn into_inner(self) -> T {\n@@ -1856,7 +1856,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// let five = uc.get();\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_unsafecell_get\", since = \"1.32.0\")]\n     pub const fn get(&self) -> *mut T {\n@@ -1881,7 +1881,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// assert_eq!(*c.get_mut(), 6);\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[stable(feature = \"unsafe_cell_get_mut\", since = \"1.50.0\")]\n     pub fn get_mut(&mut self) -> &mut T {\n         &mut self.value\n@@ -1914,7 +1914,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// assert_eq!(uc.into_inner(), 5);\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of"}, {"sha": "adb033e6bdf1ba7e1c92a32378797dc3358c79b3", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -981,7 +981,8 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn le(&self, other: &Rhs) -> bool {\n-        matches!(self.partial_cmp(other), Some(Less | Equal))\n+        // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.\n+        !matches!(self.partial_cmp(other), None | Some(Greater))\n     }\n \n     /// This method tests greater than (for `self` and `other`) and is used by the `>` operator."}, {"sha": "0c3303cc2109402c1cfe115a7583bdd390f531fd", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -691,59 +691,19 @@ mod impls {\n     impl<T: ?Sized> Hash for *const T {\n         #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            #[cfg(not(bootstrap))]\n-            {\n-                let (address, metadata) = self.to_raw_parts();\n-                state.write_usize(address as usize);\n-                metadata.hash(state);\n-            }\n-            #[cfg(bootstrap)]\n-            {\n-                if mem::size_of::<Self>() == mem::size_of::<usize>() {\n-                    // Thin pointer\n-                    state.write_usize(*self as *const () as usize);\n-                } else {\n-                    // Fat pointer\n-                    // SAFETY: we are accessing the memory occupied by `self`\n-                    // which is guaranteed to be valid.\n-                    // This assumes a fat pointer can be represented by a `(usize, usize)`,\n-                    // which is safe to do in `std` because it is shipped and kept in sync\n-                    // with the implementation of fat pointers in `rustc`.\n-                    let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n-                    state.write_usize(a);\n-                    state.write_usize(b);\n-                }\n-            }\n+            let (address, metadata) = self.to_raw_parts();\n+            state.write_usize(address as usize);\n+            metadata.hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Hash for *mut T {\n         #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            #[cfg(not(bootstrap))]\n-            {\n-                let (address, metadata) = self.to_raw_parts();\n-                state.write_usize(address as usize);\n-                metadata.hash(state);\n-            }\n-            #[cfg(bootstrap)]\n-            {\n-                if mem::size_of::<Self>() == mem::size_of::<usize>() {\n-                    // Thin pointer\n-                    state.write_usize(*self as *const () as usize);\n-                } else {\n-                    // Fat pointer\n-                    // SAFETY: we are accessing the memory occupied by `self`\n-                    // which is guaranteed to be valid.\n-                    // This assumes a fat pointer can be represented by a `(usize, usize)`,\n-                    // which is safe to do in `std` because it is shipped and kept in sync\n-                    // with the implementation of fat pointers in `rustc`.\n-                    let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n-                    state.write_usize(a);\n-                    state.write_usize(b);\n-                }\n-            }\n+            let (address, metadata) = self.to_raw_parts();\n+            state.write_usize(address as usize);\n+            metadata.hash(state);\n         }\n     }\n }"}, {"sha": "61d8351d59f09bce9a536f80d73a5e5a95de04e0", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -194,3 +194,26 @@ where\n         self.try_fold(init, ok(fold)).unwrap()\n     }\n }\n+\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I, E> SourceIter for ResultShunt<'_, I, E>\n+where\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n+    }\n+}\n+\n+// SAFETY: ResultShunt::next calls I::find, which has to advance `iter` in order to\n+// return `Some(_)`. Since `iter` has type `I: InPlaceIterable` it's guaranteed that\n+// at least one item will be moved out from the underlying source.\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I, T, E> InPlaceIterable for ResultShunt<'_, I, E> where\n+    I: Iterator<Item = Result<T, E>> + InPlaceIterable\n+{\n+}"}, {"sha": "013e98a866091a290afc857f27389de9ec52a367", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -129,7 +129,7 @@\n #![feature(auto_traits)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(prelude_import)]\n-#![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n+#![feature(ptr_metadata)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]\n@@ -167,7 +167,6 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(int_error_matching)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]\n@@ -299,8 +298,7 @@ pub mod primitive;\n     unused_imports,\n     unsafe_op_in_unsafe_fn\n )]\n-#[cfg_attr(bootstrap, allow(non_autolinks))]\n-#[cfg_attr(not(bootstrap), allow(rustdoc::non_autolinks))]\n+#[allow(rustdoc::non_autolinks)]\n // FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n #[allow(clashing_extern_declarations)]"}, {"sha": "5d9b0f80d3a6f3ebcfd9f9b454963dfaaa25072e", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1391,7 +1391,6 @@ pub(crate) mod builtin {\n     }\n \n     /// Attribute macro used to apply derive macros.\n-    #[cfg(not(bootstrap))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     pub macro derive($item:item) {\n@@ -1453,7 +1452,6 @@ pub(crate) mod builtin {\n     }\n \n     /// Expands all `#[cfg]` and `#[cfg_attr]` attributes in the code fragment it's applied to.\n-    #[cfg(not(bootstrap))]\n     #[unstable(\n         feature = \"cfg_eval\",\n         issue = \"82679\","}, {"sha": "64342de6341b0a5c4b560d2d5dd38f605ed221ae", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -190,6 +190,8 @@ use crate::ptr;\n ///     let ptr = uninit.as_mut_ptr();\n ///\n ///     // Initializing the `name` field\n+///     // Using `write` instead of assignment via `=` to not call `drop` on the\n+///     // old, uninitialized value.\n ///     unsafe { addr_of_mut!((*ptr).name).write(\"Bob\".to_string()); }\n ///\n ///     // Initializing the `list` field"}, {"sha": "dcf3ce070ec6578f8b0a220ba78dae0755e1d3f1", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -65,7 +65,7 @@ pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_diagnostic_item = \"deref_target\"]\n-    #[cfg_attr(not(bootstrap), lang = \"deref_target\")]\n+    #[lang = \"deref_target\"]\n     type Target: ?Sized;\n \n     /// Dereferences the value."}, {"sha": "c89fe57cb05cee4e8497d8f98934cc497a1133fd", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -67,7 +67,6 @@ pub use crate::macros::builtin::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::macros::builtin::derive;\n@@ -80,7 +79,6 @@ pub use crate::macros::builtin::derive;\n #[doc(no_inline)]\n pub use crate::macros::builtin::cfg_accessible;\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"cfg_eval\",\n     issue = \"82679\","}, {"sha": "f18387d020d4f0a1b076c3363c08bd26708a2cdb", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -51,7 +51,6 @@ impl<T: ?Sized> *const T {\n     /// Decompose a (possibly wide) pointer into is address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts`].\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n@@ -915,13 +914,6 @@ impl<T> *const [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n-        #[cfg(bootstrap)]\n-        {\n-            // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n-            // Only `std` can make this guarantee.\n-            unsafe { Repr { rust: self }.raw }.len\n-        }\n-        #[cfg(not(bootstrap))]\n         metadata(self)\n     }\n "}, {"sha": "6e207156b55a3085d56edadfc160d72079a870e4", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 57, "deletions": 58, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -90,11 +90,8 @@ pub use crate::intrinsics::copy;\n #[doc(inline)]\n pub use crate::intrinsics::write_bytes;\n \n-#[cfg(not(bootstrap))]\n mod metadata;\n-#[cfg(not(bootstrap))]\n pub(crate) use metadata::PtrRepr;\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n pub use metadata::{from_raw_parts, from_raw_parts_mut, metadata, DynMetadata, Pointee, Thin};\n \n@@ -236,33 +233,6 @@ pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }\n \n-#[cfg(bootstrap)]\n-#[repr(C)]\n-pub(crate) union Repr<T> {\n-    pub(crate) rust: *const [T],\n-    rust_mut: *mut [T],\n-    pub(crate) raw: FatPtr<T>,\n-}\n-\n-#[cfg(bootstrap)]\n-#[repr(C)]\n-pub(crate) struct FatPtr<T> {\n-    data: *const T,\n-    pub(crate) len: usize,\n-}\n-\n-#[cfg(bootstrap)]\n-// Manual impl needed to avoid `T: Clone` bound.\n-impl<T> Clone for FatPtr<T> {\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-// Manual impl needed to avoid `T: Copy` bound.\n-impl<T> Copy for FatPtr<T> {}\n-\n /// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes.\n@@ -287,14 +257,6 @@ impl<T> Copy for FatPtr<T> {}\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n-    #[cfg(bootstrap)]\n-    {\n-        // SAFETY: Accessing the value from the `Repr` union is safe since *const [T]\n-        // and FatPtr have the same memory layouts. Only std can make this\n-        // guarantee.\n-        unsafe { Repr { raw: FatPtr { data, len } }.rust }\n-    }\n-    #[cfg(not(bootstrap))]\n     from_raw_parts(data.cast(), len)\n }\n \n@@ -327,13 +289,6 @@ pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n-    #[cfg(bootstrap)]\n-    {\n-        // SAFETY: Accessing the value from the `Repr` union is safe since *mut [T]\n-        // and FatPtr have the same memory layouts\n-        unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n-    }\n-    #[cfg(not(bootstrap))]\n     from_raw_parts_mut(data.cast(), len)\n }\n \n@@ -473,19 +428,32 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n #[inline]\n #[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n-    // For types smaller than the block optimization below,\n-    // just swap directly to avoid pessimizing codegen.\n-    if mem::size_of::<T>() < 32 {\n-        // SAFETY: the caller must guarantee that `x` and `y` are valid\n-        // for writes, properly aligned, and non-overlapping.\n-        unsafe {\n-            let z = read(x);\n-            copy_nonoverlapping(y, x, 1);\n-            write(y, z);\n+    // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary\n+    // reinterpretation of values as (chunkable) byte arrays, and the loop in the\n+    // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back\n+    // into the (unoptimized) direct swapping implementation, so we disable it.\n+    // FIXME(eddyb) the block optimization also prevents MIR optimizations from\n+    // understanding `mem::replace`, `Option::take`, etc. - a better overall\n+    // solution might be to make `swap_nonoverlapping` into an intrinsic, which\n+    // a backend can choose to implement using the block optimization, or not.\n+    #[cfg(not(target_arch = \"spirv\"))]\n+    {\n+        // Only apply the block optimization in `swap_nonoverlapping_bytes` for types\n+        // at least as large as the block size, to avoid pessimizing codegen.\n+        if mem::size_of::<T>() >= 32 {\n+            // SAFETY: the caller must uphold the safety contract for `swap_nonoverlapping`.\n+            unsafe { swap_nonoverlapping(x, y, 1) };\n+            return;\n         }\n-    } else {\n-        // SAFETY: the caller must uphold the safety contract for `swap_nonoverlapping`.\n-        unsafe { swap_nonoverlapping(x, y, 1) };\n+    }\n+\n+    // Direct swapping, for the cases not going through the block optimization.\n+    // SAFETY: the caller must guarantee that `x` and `y` are valid\n+    // for writes, properly aligned, and non-overlapping.\n+    unsafe {\n+        let z = read(x);\n+        copy_nonoverlapping(y, x, 1);\n+        write(y, z);\n     }\n }\n \n@@ -1524,6 +1492,10 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// as all other references. This macro can create a raw pointer *without* creating\n /// a reference first.\n ///\n+/// Note, however, that the `expr` in `addr_of!(expr)` is still subject to all\n+/// the usual rules. In particular, `addr_of!(*ptr::null())` is Undefined\n+/// Behavior because it dereferences a NULL pointer.\n+///\n /// # Example\n ///\n /// ```\n@@ -1540,6 +1512,10 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// let raw_f2 = ptr::addr_of!(packed.f2);\n /// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n /// ```\n+///\n+/// See [`addr_of_mut`] for how to create a pointer to unininitialized data.\n+/// Doing that with `addr_of` would not make much sense since one could only\n+/// read the data, and that would be Undefined Behavior.\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n@@ -1556,7 +1532,13 @@ pub macro addr_of($place:expr) {\n /// as all other references. This macro can create a raw pointer *without* creating\n /// a reference first.\n ///\n-/// # Example\n+/// Note, however, that the `expr` in `addr_of_mut!(expr)` is still subject to all\n+/// the usual rules. In particular, `addr_of_mut!(*ptr::null_mut())` is Undefined\n+/// Behavior because it dereferences a NULL pointer.\n+///\n+/// # Examples\n+///\n+/// **Creating a pointer to unaligned data:**\n ///\n /// ```\n /// use std::ptr;\n@@ -1573,6 +1555,23 @@ pub macro addr_of($place:expr) {\n /// unsafe { raw_f2.write_unaligned(42); }\n /// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n /// ```\n+///\n+/// **Creating a pointer to uninitialized data:**\n+///\n+/// ```rust\n+/// use std::{ptr, mem::MaybeUninit};\n+///\n+/// struct Demo {\n+///     field: bool,\n+/// }\n+///\n+/// let mut uninit = MaybeUninit::<Demo>::uninit();\n+/// // `&uninit.as_mut().field` would create a reference to an uninitialized `bool`,\n+/// // and thus be Undefined Behavior!\n+/// let f1_ptr = unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\n+/// unsafe { f1_ptr.write(true); }\n+/// let init = unsafe { uninit.assume_init() };\n+/// ```\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]"}, {"sha": "3c6f197828332703482220ead89c1ba34e4f141e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -50,7 +50,6 @@ impl<T: ?Sized> *mut T {\n     /// Decompose a (possibly wide) pointer into is address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts_mut`].\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n@@ -1175,13 +1174,6 @@ impl<T> *mut [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n-        #[cfg(bootstrap)]\n-        {\n-            // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n-            // Only `std` can make this guarantee.\n-            unsafe { Repr { rust_mut: self }.raw }.len\n-        }\n-        #[cfg(not(bootstrap))]\n         metadata(self)\n     }\n "}, {"sha": "e525f61604385f591523b6bdee28882ae976fe48", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -181,7 +181,6 @@ impl<T: ?Sized> NonNull<T> {\n     /// See the documentation of [`std::ptr::from_raw_parts`] for more details.\n     ///\n     /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n@@ -198,7 +197,6 @@ impl<T: ?Sized> NonNull<T> {\n     /// Decompose a (possibly wide) pointer into is address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]"}, {"sha": "ec28cdd1ba0d9cf166ccf869ce70d77b94c6a1c0", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -102,23 +102,14 @@ impl<T> [T] {\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     #[rustc_allow_const_fn_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n-        #[cfg(bootstrap)]\n-        {\n-            // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n-            // Only `std` can make this guarantee.\n-            unsafe { crate::ptr::Repr { rust: self }.raw.len }\n-        }\n-        #[cfg(not(bootstrap))]\n-        {\n-            // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n-            // As of this writing this causes a \"Const-stable functions can only call other\n-            // const-stable functions\" error.\n-\n-            // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n-            // and PtrComponents<T> have the same memory layouts. Only std can make this\n-            // guarantee.\n-            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }\n-        }\n+        // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n+        // As of this writing this causes a \"Const-stable functions can only call other\n+        // const-stable functions\" error.\n+\n+        // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n+        // and PtrComponents<T> have the same memory layouts. Only std can make this\n+        // guarantee.\n+        unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }\n     }\n \n     /// Returns `true` if the slice has a length of 0.\n@@ -2265,8 +2256,7 @@ impl<T> [T] {\n     // in crate `alloc`, and as such doesn't exists yet when building `core`.\n     // links to downstream crate: #74481. Since primitives are only documented in\n     // libstd (#73423), this never leads to broken links in practice.\n-    #[cfg_attr(not(bootstrap), allow(rustdoc::broken_intra_doc_links))]\n-    #[cfg_attr(bootstrap, allow(broken_intra_doc_links))]\n+    #[allow(rustdoc::broken_intra_doc_links)]\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n     #[inline]\n     pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>"}, {"sha": "1d885eb1092da04bd6c6856ce2729a0c8076cfab", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -68,16 +68,15 @@\n #![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n #![feature(peekable_peek_mut)]\n-#![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n+#![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n #![feature(integer_atomics)]\n #![feature(slice_group_by)]\n #![feature(trusted_random_access)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n-#![cfg_attr(not(bootstrap), feature(unsize))]\n+#![feature(unsize)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "11af8090c3a4f26034ee98a22548ef55fa6f6a32", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,8 +1,6 @@\n use core::cell::RefCell;\n-#[cfg(not(bootstrap))]\n use core::ptr;\n use core::ptr::*;\n-#[cfg(not(bootstrap))]\n use std::fmt::{Debug, Display};\n \n #[test]\n@@ -419,7 +417,6 @@ fn offset_from() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn ptr_metadata() {\n     struct Unit;\n     struct Pair<A, B: ?Sized>(A, B);\n@@ -478,7 +475,6 @@ fn ptr_metadata() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn ptr_metadata_bounds() {\n     fn metadata_eq_method_address<T: ?Sized>() -> usize {\n         // The `Metadata` associated type has an `Ord` bound, so this is valid:\n@@ -510,7 +506,6 @@ fn ptr_metadata_bounds() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn dyn_metadata() {\n     #[derive(Debug)]\n     #[repr(align(32))]\n@@ -530,7 +525,6 @@ fn dyn_metadata() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn from_raw_parts() {\n     let mut value = 5_u32;\n     let address = &mut value as *mut _ as *mut ();\n@@ -557,7 +551,6 @@ fn from_raw_parts() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn thin_box() {\n     let foo = ThinBox::<dyn Display>::new(4);\n     assert_eq!(foo.to_string(), \"4\");"}, {"sha": "6baf9f2a464b2ed593b84e6000daa6685b0c40a4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -234,7 +234,7 @@\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n-#![cfg_attr(not(bootstrap), feature(cfg_eval))]\n+#![feature(cfg_eval)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n@@ -282,7 +282,6 @@\n #![feature(intra_doc_pointers)]\n #![feature(iter_zip)]\n #![feature(lang_items)]\n-#![feature(link_args)]\n #![feature(linkage)]\n #![feature(llvm_asm)]\n #![feature(log_syntax)]\n@@ -331,7 +330,6 @@\n #![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsafe_cell_raw_get)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]"}, {"sha": "da2415e361077606abda1e2abface5b1f23651a8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -993,6 +993,7 @@ impl Ord for Ipv4Addr {\n }\n \n impl IntoInner<c::in_addr> for Ipv4Addr {\n+    #[inline]\n     fn into_inner(self) -> c::in_addr {\n         self.inner\n     }\n@@ -1800,11 +1801,13 @@ impl Ord for Ipv6Addr {\n }\n \n impl AsInner<c::in6_addr> for Ipv6Addr {\n+    #[inline]\n     fn as_inner(&self) -> &c::in6_addr {\n         &self.inner\n     }\n }\n impl FromInner<c::in6_addr> for Ipv6Addr {\n+    #[inline]\n     fn from_inner(addr: c::in6_addr) -> Ipv6Addr {\n         Ipv6Addr { inner: addr }\n     }"}, {"sha": "4a3c3ba163598b364d0a9da52a58420653c4c277", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -54,7 +54,6 @@ pub use core::prelude::v1::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(hidden)]\n pub use core::prelude::v1::derive;\n@@ -67,7 +66,6 @@ pub use core::prelude::v1::derive;\n #[doc(hidden)]\n pub use core::prelude::v1::cfg_accessible;\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"cfg_eval\",\n     issue = \"82679\","}, {"sha": "23af00d62930ac2b01fb058013132d0e874360ed", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 90, "deletions": 69, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -383,7 +383,7 @@ def __init__(self):\n         self.nix_deps_dir = None\n         self.rustc_commit = None\n \n-    def download_stage0(self):\n+    def download_toolchain(self, stage0=True, rustc_channel=None):\n         \"\"\"Fetch the build system for Rust, written in Rust\n \n         This method will build a cache directory, then it will fetch the\n@@ -393,43 +393,47 @@ def download_stage0(self):\n         Each downloaded tarball is extracted, after that, the script\n         will move all the content to the right place.\n         \"\"\"\n-        rustc_channel = self.rustc_channel\n+        if rustc_channel is None:\n+            rustc_channel = self.rustc_channel\n         rustfmt_channel = self.rustfmt_channel\n-\n-        if self.rustc().startswith(self.bin_root()) and \\\n-                (not os.path.exists(self.rustc()) or\n-                 self.program_out_of_date(self.rustc_stamp(), self.date + str(self.rustc_commit))):\n-            if os.path.exists(self.bin_root()):\n-                shutil.rmtree(self.bin_root())\n-            download_rustc = self.rustc_commit is not None\n+        bin_root = self.bin_root(stage0)\n+\n+        key = self.date\n+        if not stage0:\n+            key += str(self.rustc_commit)\n+        if self.rustc(stage0).startswith(bin_root) and \\\n+                (not os.path.exists(self.rustc(stage0)) or\n+                 self.program_out_of_date(self.rustc_stamp(stage0), key)):\n+            if os.path.exists(bin_root):\n+                shutil.rmtree(bin_root)\n             tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_component_helper(filename, pattern, tarball_suffix, download_rustc)\n+            self._download_component_helper(filename, pattern, tarball_suffix, stage0)\n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_component_helper(filename, \"rustc\", tarball_suffix, download_rustc)\n+            self._download_component_helper(filename, \"rustc\", tarball_suffix, stage0)\n             filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n             self._download_component_helper(filename, \"cargo\", tarball_suffix)\n-            if self.rustc_commit is not None:\n+            if not stage0:\n                 filename = \"rustc-dev-{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n                 self._download_component_helper(\n-                    filename, \"rustc-dev\", tarball_suffix, download_rustc\n+                    filename, \"rustc-dev\", tarball_suffix, stage0\n                 )\n \n-            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(self.bin_root()))\n-            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(self.bin_root()))\n-            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(self.bin_root()))\n-            lib_dir = \"{}/lib\".format(self.bin_root())\n+            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n+            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n+            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n+            lib_dir = \"{}/lib\".format(bin_root)\n             for lib in os.listdir(lib_dir):\n                 if lib.endswith(\".so\"):\n                     self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n-            with output(self.rustc_stamp()) as rust_stamp:\n-                rust_stamp.write(self.date + str(self.rustc_commit))\n+            with output(self.rustc_stamp(stage0)) as rust_stamp:\n+                rust_stamp.write(key)\n \n-        if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n+        if self.rustfmt() and self.rustfmt().startswith(bin_root) and (\n             not os.path.exists(self.rustfmt())\n             or self.program_out_of_date(self.rustfmt_stamp(), self.rustfmt_channel)\n         ):\n@@ -440,12 +444,13 @@ def download_stage0(self):\n                 self._download_component_helper(\n                     filename, \"rustfmt-preview\", tarball_suffix, key=date\n                 )\n-                self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(self.bin_root()))\n-                self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n+                self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(bin_root))\n+                self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(bin_root))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n                     rustfmt_stamp.write(self.rustfmt_channel)\n \n-        if self.downloading_llvm():\n+        # Avoid downloading LLVM twice (once for stage0 and once for the master rustc)\n+        if self.downloading_llvm() and stage0:\n             # We want the most recent LLVM submodule update to avoid downloading\n             # LLVM more often than necessary.\n             #\n@@ -498,27 +503,26 @@ def downloading_llvm(self):\n             or (opt == \"if-available\" and self.build in supported_platforms)\n \n     def _download_component_helper(\n-        self, filename, pattern, tarball_suffix, download_rustc=False, key=None\n+        self, filename, pattern, tarball_suffix, stage0=True, key=None\n     ):\n         if key is None:\n-            if download_rustc:\n-                key = self.rustc_commit\n-            else:\n+            if stage0:\n                 key = self.date\n+            else:\n+                key = self.rustc_commit\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, key)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        if download_rustc:\n-            url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(self.rustc_commit)\n-        else:\n+        if stage0:\n             url = \"{}/dist/{}\".format(self._download_url, key)\n+        else:\n+            url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(self.rustc_commit)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n-            do_verify = not download_rustc\n-            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=do_verify)\n-        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n+            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=stage0)\n+        unpack(tarball, tarball_suffix, self.bin_root(stage0), match=pattern, verbose=self.verbose)\n \n     def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n         cache_prefix = \"llvm-{}-{}\".format(llvm_sha, llvm_assertions)\n@@ -576,10 +580,10 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n         nix_os_msg = \"info: you seem to be running NixOS. Attempting to patch\"\n         print(nix_os_msg, fname)\n \n-        # Only build `stage0/.nix-deps` once.\n+        # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n         if not nix_deps_dir:\n-            nix_deps_dir = \"{}/.nix-deps\".format(self.bin_root())\n+            nix_deps_dir = \".nix-deps\"\n             if not os.path.exists(nix_deps_dir):\n                 os.makedirs(nix_deps_dir)\n \n@@ -637,11 +641,13 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n             print(\"warning: failed to call patchelf:\", reason)\n             return\n \n-    # Return the stage1 compiler to download, if any.\n-    def maybe_download_rustc(self):\n+    # If `download-rustc` is set, download the most recent commit with CI artifacts\n+    def maybe_download_ci_toolchain(self):\n         # If `download-rustc` is not set, default to rebuilding.\n-        if self.get_toml(\"download-rustc\", section=\"rust\") != \"true\":\n+        download_rustc = self.get_toml(\"download-rustc\", section=\"rust\")\n+        if download_rustc is None or download_rustc == \"false\":\n             return None\n+        assert download_rustc == \"true\" or download_rustc == \"if-unchanged\", download_rustc\n \n         # Handle running from a directory other than the top level\n         rev_parse = [\"git\", \"rev-parse\", \"--show-toplevel\"]\n@@ -656,19 +662,27 @@ def maybe_download_rustc(self):\n         # Warn if there were changes to the compiler since the ancestor commit.\n         status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler])\n         if status != 0:\n+            if download_rustc == \"if-unchanged\":\n+                return None\n             print(\"warning: `download-rustc` is enabled, but there are changes to compiler/\")\n \n-        return commit\n+        if self.verbose:\n+            print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))\n+        self.rustc_commit = commit\n+        # FIXME: support downloading artifacts from the beta channel\n+        self.download_toolchain(False, \"nightly\")\n \n-    def rustc_stamp(self):\n-        \"\"\"Return the path for .rustc-stamp\n+    def rustc_stamp(self, stage0):\n+        \"\"\"Return the path for .rustc-stamp at the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\"\n-        >>> rb.rustc_stamp() == os.path.join(\"build\", \"stage0\", \".rustc-stamp\")\n+        >>> rb.rustc_stamp(True) == os.path.join(\"build\", \"stage0\", \".rustc-stamp\")\n+        True\n+        >>> rb.rustc_stamp(False) == os.path.join(\"build\", \"ci-rustc\", \".rustc-stamp\")\n         True\n         \"\"\"\n-        return os.path.join(self.bin_root(), '.rustc-stamp')\n+        return os.path.join(self.bin_root(stage0), '.rustc-stamp')\n \n     def rustfmt_stamp(self):\n         \"\"\"Return the path for .rustfmt-stamp\n@@ -678,7 +692,7 @@ def rustfmt_stamp(self):\n         >>> rb.rustfmt_stamp() == os.path.join(\"build\", \"stage0\", \".rustfmt-stamp\")\n         True\n         \"\"\"\n-        return os.path.join(self.bin_root(), '.rustfmt-stamp')\n+        return os.path.join(self.bin_root(True), '.rustfmt-stamp')\n \n     def llvm_stamp(self):\n         \"\"\"Return the path for .rustfmt-stamp\n@@ -698,21 +712,27 @@ def program_out_of_date(self, stamp_path, key):\n         with open(stamp_path, 'r') as stamp:\n             return key != stamp.read()\n \n-    def bin_root(self):\n-        \"\"\"Return the binary root directory\n+    def bin_root(self, stage0):\n+        \"\"\"Return the binary root directory for the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\"\n-        >>> rb.bin_root() == os.path.join(\"build\", \"stage0\")\n+        >>> rb.bin_root(True) == os.path.join(\"build\", \"stage0\")\n+        True\n+        >>> rb.bin_root(False) == os.path.join(\"build\", \"ci-rustc\")\n         True\n \n         When the 'build' property is given should be a nested directory:\n \n         >>> rb.build = \"devel\"\n-        >>> rb.bin_root() == os.path.join(\"build\", \"devel\", \"stage0\")\n+        >>> rb.bin_root(True) == os.path.join(\"build\", \"devel\", \"stage0\")\n         True\n         \"\"\"\n-        return os.path.join(self.build_dir, self.build, \"stage0\")\n+        if stage0:\n+            subdir = \"stage0\"\n+        else:\n+            subdir = \"ci-rustc\"\n+        return os.path.join(self.build_dir, self.build, subdir)\n \n     def llvm_root(self):\n         \"\"\"Return the CI LLVM root directory\n@@ -775,33 +795,37 @@ def cargo(self):\n         \"\"\"Return config path for cargo\"\"\"\n         return self.program_config('cargo')\n \n-    def rustc(self):\n+    def rustc(self, stage0):\n         \"\"\"Return config path for rustc\"\"\"\n-        return self.program_config('rustc')\n+        return self.program_config('rustc', stage0)\n \n     def rustfmt(self):\n         \"\"\"Return config path for rustfmt\"\"\"\n         if not self.rustfmt_channel:\n             return None\n         return self.program_config('rustfmt')\n \n-    def program_config(self, program):\n-        \"\"\"Return config path for the given program\n+    def program_config(self, program, stage0=True):\n+        \"\"\"Return config path for the given program at the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.config_toml = 'rustc = \"rustc\"\\\\n'\n         >>> rb.program_config('rustc')\n         'rustc'\n         >>> rb.config_toml = ''\n-        >>> cargo_path = rb.program_config('cargo')\n-        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(),\n+        >>> cargo_path = rb.program_config('cargo', True)\n+        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(True),\n+        ... \"bin\", \"cargo\")\n+        True\n+        >>> cargo_path = rb.program_config('cargo', False)\n+        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(False),\n         ... \"bin\", \"cargo\")\n         True\n         \"\"\"\n         config = self.get_toml(program)\n         if config:\n             return os.path.expanduser(config)\n-        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(\n+        return os.path.join(self.bin_root(stage0), \"bin\", \"{}{}\".format(\n             program, self.exe_suffix()))\n \n     @staticmethod\n@@ -856,14 +880,14 @@ def build_bootstrap(self):\n         if \"CARGO_BUILD_TARGET\" in env:\n             del env[\"CARGO_BUILD_TARGET\"]\n         env[\"CARGO_TARGET_DIR\"] = build_dir\n-        env[\"RUSTC\"] = self.rustc()\n-        env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+        env[\"RUSTC\"] = self.rustc(True)\n+        env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n             if \"LD_LIBRARY_PATH\" in env else \"\"\n-        env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+        env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n             if \"DYLD_LIBRARY_PATH\" in env else \"\"\n-        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n         # preserve existing RUSTFLAGS\n@@ -886,7 +910,7 @@ def build_bootstrap(self):\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\"\n \n-        env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n+        env[\"PATH\"] = os.path.join(self.bin_root(True), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n             raise Exception(\"no cargo executable found at `{}`\".format(\n@@ -1137,14 +1161,9 @@ def bootstrap(help_triggered):\n     build.update_submodules()\n \n     # Fetch/build the bootstrap\n-    build.rustc_commit = build.maybe_download_rustc()\n-    if build.rustc_commit is not None:\n-        if build.verbose:\n-            commit = build.rustc_commit\n-            print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))\n-        # FIXME: support downloading artifacts from the beta channel\n-        build.rustc_channel = \"nightly\"\n-    build.download_stage0()\n+    build.download_toolchain()\n+    # Download the master compiler if `download-rustc` is set\n+    build.maybe_download_ci_toolchain()\n     sys.stdout.flush()\n     build.ensure_vendored()\n     build.build_bootstrap()\n@@ -1160,6 +1179,8 @@ def bootstrap(help_triggered):\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     if toml_path:\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path\n+    if build.rustc_commit is not None:\n+        env[\"BOOTSTRAP_DOWNLOAD_RUSTC\"] = '1'\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "38901a35296e1b084f6ca4665a8c3a1530168c34", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -741,12 +741,7 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n-        // cfg(bootstrap), can be removed on the next beta bump\n-        if compiler.stage == 0 {\n-            cmd.arg(\"-Winvalid_codeblock_attributes\");\n-        } else {\n-            cmd.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n-        }\n+        cmd.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n \n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");\n@@ -1303,12 +1298,7 @@ impl<'a> Builder<'a> {\n             // fixed via better support from Cargo.\n             cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n \n-            // cfg(bootstrap), can be removed on the next beta bump\n-            if compiler.stage == 0 {\n-                rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n-            } else {\n-                rustdocflags.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n-            }\n+            rustdocflags.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n         }\n \n         if mode == Mode::Rustc {"}, {"sha": "8244c7710ab7b6f7f50bb555c3fe2786364b7a0c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -65,7 +65,9 @@ impl Step for Std {\n \n         // These artifacts were already copied (in `impl Step for Sysroot`).\n         // Don't recompile them.\n-        if builder.config.download_rustc {\n+        // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n+        // so its artifacts can't be reused.\n+        if builder.config.download_rustc && compiler.stage != 0 {\n             return;\n         }\n \n@@ -513,7 +515,9 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        if builder.config.download_rustc {\n+        // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n+        // so its artifacts can't be reused.\n+        if builder.config.download_rustc && compiler.stage != 0 {\n             // Copy the existing artifacts instead of rebuilding them.\n             // NOTE: this path is only taken for tools linking to rustc-dev.\n             builder.ensure(Sysroot { compiler });\n@@ -934,14 +938,15 @@ impl Step for Sysroot {\n         t!(fs::create_dir_all(&sysroot));\n \n         // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n-        if builder.config.download_rustc {\n+        if builder.config.download_rustc && compiler.stage != 0 {\n             assert_eq!(\n                 builder.config.build, compiler.host,\n                 \"Cross-compiling is not yet supported with `download-rustc`\",\n             );\n             // Copy the compiler into the correct sysroot.\n-            let stage0_dir = builder.config.out.join(&*builder.config.build.triple).join(\"stage0\");\n-            builder.cp_r(&stage0_dir, &sysroot);\n+            let ci_rustc_dir =\n+                builder.config.out.join(&*builder.config.build.triple).join(\"ci-rustc\");\n+            builder.cp_r(&ci_rustc_dir, &sysroot);\n             return INTERNER.intern_path(sysroot);\n         }\n "}, {"sha": "04afed60a00b68cac54403bd92cbd09e9e02bdf3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 56, "deletions": 47, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -510,7 +510,8 @@ struct Rust {\n     new_symbol_mangling: Option<bool>,\n     profile_generate: Option<String>,\n     profile_use: Option<String>,\n-    download_rustc: Option<bool>,\n+    // ignored; this is set from an env var set by bootstrap.py\n+    download_rustc: Option<StringOrBool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -687,51 +688,6 @@ impl Config {\n         set(&mut config.print_step_timings, build.print_step_timings);\n         set(&mut config.print_step_rusage, build.print_step_rusage);\n \n-        // See https://github.com/rust-lang/compiler-team/issues/326\n-        config.stage = match config.cmd {\n-            Subcommand::Check { .. } => flags.stage.or(build.check_stage).unwrap_or(0),\n-            Subcommand::Doc { .. } => flags.stage.or(build.doc_stage).unwrap_or(0),\n-            Subcommand::Build { .. } => flags.stage.or(build.build_stage).unwrap_or(1),\n-            Subcommand::Test { .. } => flags.stage.or(build.test_stage).unwrap_or(1),\n-            Subcommand::Bench { .. } => flags.stage.or(build.bench_stage).unwrap_or(2),\n-            Subcommand::Dist { .. } => flags.stage.or(build.dist_stage).unwrap_or(2),\n-            Subcommand::Install { .. } => flags.stage.or(build.install_stage).unwrap_or(2),\n-            // These are all bootstrap tools, which don't depend on the compiler.\n-            // The stage we pass shouldn't matter, but use 0 just in case.\n-            Subcommand::Clean { .. }\n-            | Subcommand::Clippy { .. }\n-            | Subcommand::Fix { .. }\n-            | Subcommand::Run { .. }\n-            | Subcommand::Setup { .. }\n-            | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n-        };\n-\n-        // CI should always run stage 2 builds, unless it specifically states otherwise\n-        #[cfg(not(test))]\n-        if flags.stage.is_none() && crate::CiEnv::current() != crate::CiEnv::None {\n-            match config.cmd {\n-                Subcommand::Test { .. }\n-                | Subcommand::Doc { .. }\n-                | Subcommand::Build { .. }\n-                | Subcommand::Bench { .. }\n-                | Subcommand::Dist { .. }\n-                | Subcommand::Install { .. } => {\n-                    assert_eq!(\n-                        config.stage, 2,\n-                        \"x.py should be run with `--stage 2` on CI, but was run with `--stage {}`\",\n-                        config.stage,\n-                    );\n-                }\n-                Subcommand::Clean { .. }\n-                | Subcommand::Check { .. }\n-                | Subcommand::Clippy { .. }\n-                | Subcommand::Fix { .. }\n-                | Subcommand::Run { .. }\n-                | Subcommand::Setup { .. }\n-                | Subcommand::Format { .. } => {}\n-            }\n-        }\n-\n         config.verbose = cmp::max(config.verbose, flags.verbose);\n \n         if let Some(install) = toml.install {\n@@ -897,7 +853,7 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc = rust.download_rustc.unwrap_or(false);\n+            config.download_rustc = env::var(\"BOOTSTRAP_DOWNLOAD_RUSTC\").as_deref() == Ok(\"1\");\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;\n@@ -1005,6 +961,59 @@ impl Config {\n         let default = config.channel == \"dev\";\n         config.ignore_git = ignore_git.unwrap_or(default);\n \n+        let download_rustc = config.download_rustc;\n+        // See https://github.com/rust-lang/compiler-team/issues/326\n+        config.stage = match config.cmd {\n+            Subcommand::Check { .. } => flags.stage.or(build.check_stage).unwrap_or(0),\n+            // `download-rustc` only has a speed-up for stage2 builds. Default to stage2 unless explicitly overridden.\n+            Subcommand::Doc { .. } => {\n+                flags.stage.or(build.doc_stage).unwrap_or(if download_rustc { 2 } else { 0 })\n+            }\n+            Subcommand::Build { .. } => {\n+                flags.stage.or(build.build_stage).unwrap_or(if download_rustc { 2 } else { 1 })\n+            }\n+            Subcommand::Test { .. } => {\n+                flags.stage.or(build.test_stage).unwrap_or(if download_rustc { 2 } else { 1 })\n+            }\n+            Subcommand::Bench { .. } => flags.stage.or(build.bench_stage).unwrap_or(2),\n+            Subcommand::Dist { .. } => flags.stage.or(build.dist_stage).unwrap_or(2),\n+            Subcommand::Install { .. } => flags.stage.or(build.install_stage).unwrap_or(2),\n+            // These are all bootstrap tools, which don't depend on the compiler.\n+            // The stage we pass shouldn't matter, but use 0 just in case.\n+            Subcommand::Clean { .. }\n+            | Subcommand::Clippy { .. }\n+            | Subcommand::Fix { .. }\n+            | Subcommand::Run { .. }\n+            | Subcommand::Setup { .. }\n+            | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n+        };\n+\n+        // CI should always run stage 2 builds, unless it specifically states otherwise\n+        #[cfg(not(test))]\n+        if flags.stage.is_none() && crate::CiEnv::current() != crate::CiEnv::None {\n+            match config.cmd {\n+                Subcommand::Test { .. }\n+                | Subcommand::Doc { .. }\n+                | Subcommand::Build { .. }\n+                | Subcommand::Bench { .. }\n+                | Subcommand::Dist { .. }\n+                | Subcommand::Install { .. } => {\n+                    assert_eq!(\n+                        config.stage, 2,\n+                        \"x.py should be run with `--stage 2` on CI, but was run with `--stage {}`\",\n+                        config.stage,\n+                    );\n+                }\n+                Subcommand::Clean { .. }\n+                | Subcommand::Check { .. }\n+                | Subcommand::Clippy { .. }\n+                | Subcommand::Fix { .. }\n+                | Subcommand::Run { .. }\n+                | Subcommand::Setup { .. }\n+                | Subcommand::Format { .. } => {}\n+            }\n+        }\n+\n         config\n     }\n "}, {"sha": "fc79fc10fb4c5594d3fd57377eb63342466b051e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -461,7 +461,16 @@ impl Step for Std {\n         // create correct links between crates because rustdoc depends on the\n         // existence of the output directories to know if it should be a local\n         // or remote link.\n-        let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n+        //\n+        // There's also a mild hack here where we build the first crate in this\n+        // list, core, twice. This is currently necessary to make sure that\n+        // cargo's cached rustc/rustdoc versions are up to date which means\n+        // cargo won't delete the out_dir we create for the stampfile.\n+        // Essentially any crate could go into the first slot here as it's\n+        // output directory will be deleted by us (as cargo will purge the stamp\n+        // file during the first slot's run), and core is relatively fast to\n+        // build so works OK to fill this 'dummy' slot.\n+        let krates = [\"core\", \"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }"}, {"sha": "f9be35d7c5e0df7619acb4feda3793a239c67f3f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -513,6 +513,19 @@ impl Step for Rustdoc {\n         // rustc compiler it's paired with, so it must be built with the previous stage compiler.\n         let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n \n+        // When using `download-rustc` and a stage0 build_compiler, copying rustc doesn't actually\n+        // build stage0 libstd (because the libstd in sysroot has the wrong ABI). Explicitly build\n+        // it.\n+        builder.ensure(compile::Std { compiler: build_compiler, target: target_compiler.host });\n+        builder.ensure(compile::Rustc { compiler: build_compiler, target: target_compiler.host });\n+        // NOTE: this implies that `download-rustc` is pretty useless when compiling with the stage0\n+        // compiler, since you do just as much work.\n+        if !builder.config.dry_run && builder.config.download_rustc && build_compiler.stage == 0 {\n+            println!(\n+                \"warning: `download-rustc` does nothing when building stage1 tools; consider using `--stage 2` instead\"\n+            );\n+        }\n+\n         // The presence of `target_compiler` ensures that the necessary libraries (codegen backends,\n         // compiler libraries, ...) are built. Rustdoc does not require the presence of any\n         // libraries within sysroot_libdir (i.e., rustlib), though doctests may want it (since"}, {"sha": "f352746d3fbe9bc67ccea9e14706a082d52009c4", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -216,6 +216,7 @@ target | std | host | notes\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n `thumbv4t-none-eabi` | * |  | ARMv4T T32\n+`wasm64-unknown-unknown` | * |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules"}, {"sha": "da36e1580012b7c37703b2ee882c620857f79f69", "filename": "src/doc/unstable-book/src/language-features/link-args.md", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md?ref=72f534aae1c6cca58b97957d6c225885fcdb4d1b", "patch": "@@ -1,32 +0,0 @@\n-# `link_args`\n-\n-The tracking issue for this feature is: [#29596]\n-\n-[#29596]: https://github.com/rust-lang/rust/issues/29596\n-\n-------------------------\n-\n-You can tell `rustc` how to customize linking, and that is via the `link_args`\n-attribute. This attribute is applied to `extern` blocks and specifies raw flags\n-which need to get passed to the linker when producing an artifact. An example\n-usage would be:\n-\n-```rust,no_run\n-#![feature(link_args)]\n-\n-#[link_args = \"-foo -bar -baz\"]\n-extern \"C\" {}\n-# fn main() {}\n-```\n-\n-Note that this feature is currently hidden behind the `feature(link_args)` gate\n-because this is not a sanctioned way of performing linking. Right now `rustc`\n-shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC), so\n-it makes sense to provide extra command line arguments, but this will not\n-always be the case. In the future `rustc` may use LLVM directly to link native\n-libraries, in which case `link_args` will have no meaning. You can achieve the\n-same effect as the `link_args` attribute with the `-C link-args` argument to\n-`rustc`.\n-\n-It is highly recommended to *not* use this attribute, and rather use the more\n-formal `#[link(...)]` attribute on `extern` blocks instead."}, {"sha": "946c354fd9d9cb06849917e3bc9e2a7d16c8e834", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -306,13 +306,19 @@ fn call_foo(arg: i32) {\n             sym foo,\n             // 1st argument in rdi, which is caller-saved\n             inout(\"rdi\") arg => _,\n-            // All caller-saved registers must be marked as clobberred\n+            // All caller-saved registers must be marked as clobbered\n             out(\"rax\") _, out(\"rcx\") _, out(\"rdx\") _, out(\"rsi\") _,\n             out(\"r8\") _, out(\"r9\") _, out(\"r10\") _, out(\"r11\") _,\n             out(\"xmm0\") _, out(\"xmm1\") _, out(\"xmm2\") _, out(\"xmm3\") _,\n             out(\"xmm4\") _, out(\"xmm5\") _, out(\"xmm6\") _, out(\"xmm7\") _,\n             out(\"xmm8\") _, out(\"xmm9\") _, out(\"xmm10\") _, out(\"xmm11\") _,\n             out(\"xmm12\") _, out(\"xmm13\") _, out(\"xmm14\") _, out(\"xmm15\") _,\n+            // Also mark AVX-512 registers as clobbered. This is accepted by the\n+            // compiler even if AVX-512 is not enabled on the current target.\n+            out(\"xmm16\") _, out(\"xmm17\") _, out(\"xmm18\") _, out(\"xmm19\") _,\n+            out(\"xmm20\") _, out(\"xmm21\") _, out(\"xmm22\") _, out(\"xmm13\") _,\n+            out(\"xmm24\") _, out(\"xmm25\") _, out(\"xmm26\") _, out(\"xmm27\") _,\n+            out(\"xmm28\") _, out(\"xmm29\") _, out(\"xmm30\") _, out(\"xmm31\") _,\n         )\n     }\n }\n@@ -495,7 +501,7 @@ Here is the list of currently supported register classes:\n | x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `r[8-15]` (x86-64 only) | `r` |\n | x86 | `reg_abcd` | `ax`, `bx`, `cx`, `dx` | `Q` |\n | x86-32 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh` | `q` |\n-| x86-64 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b`, `ah`\\*, `bh`\\*, `ch`\\*, `dh`\\* | `q` |\n+| x86-64 | `reg_byte`\\* | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b` | `q` |\n | x86 | `xmm_reg` | `xmm[0-7]` (x86) `xmm[0-15]` (x86-64) | `x` |\n | x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n | x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n@@ -526,7 +532,7 @@ Here is the list of currently supported register classes:\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n-> Note #2: On x86-64 the high byte registers (e.g. `ah`) are only available when used as an explicit register. Specifying the `reg_byte` register class for an operand will always allocate a low byte register.\n+> Note #2: On x86-64 the high byte registers (e.g. `ah`) are not available in the `reg_byte` register class.\n >\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n >"}, {"sha": "e93803e2761982af9814437ce756f6057740cc05", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -487,6 +487,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"windows\" => \"Windows\",\n                         _ => \"\",\n                     },\n+                    (sym::wasm, None) => \"WebAssembly\",\n                     (sym::target_arch, Some(arch)) => match &*arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n@@ -498,7 +499,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"powerpc64\" => \"PowerPC-64\",\n                         \"s390x\" => \"s390x\",\n                         \"sparc64\" => \"SPARC64\",\n-                        \"wasm32\" => \"WebAssembly\",\n+                        \"wasm32\" | \"wasm64\" => \"WebAssembly\",\n                         \"x86\" => \"x86\",\n                         \"x86_64\" => \"x86-64\",\n                         _ => \"\","}, {"sha": "9c0ed1480fef3846db5dc08accffab7b1f7f75b5", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -251,19 +251,9 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n \n     Symbol::intern(&match p.kind {\n-        PatKind::Wild => return kw::Underscore,\n+        PatKind::Wild | PatKind::Struct(..) => return kw::Underscore,\n         PatKind::Binding(_, _, ident, _) => return ident.name,\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n-        PatKind::Struct(ref name, ref fields, etc) => format!(\n-            \"{} {{ {}{} }}\",\n-            qpath_to_string(name),\n-            fields\n-                .iter()\n-                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n-                .collect::<Vec<String>>()\n-                .join(\", \"),\n-            if etc { \", ..\" } else { \"\" }\n-        ),\n         PatKind::Or(ref pats) => pats\n             .iter()\n             .map(|p| name_from_pat(&**p).to_string())"}, {"sha": "339eb50ff13a0623153bf57073990124b4fb1741", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -156,6 +156,8 @@ crate struct Options {\n     /// If this option is set to `true`, rustdoc will only run checks and not generate\n     /// documentation.\n     crate run_check: bool,\n+    /// Whether doctests should emit unused externs\n+    crate json_unused_externs: bool,\n }\n \n impl fmt::Debug for Options {\n@@ -355,7 +357,8 @@ impl Options {\n         }\n \n         let color = config::parse_color(&matches);\n-        let (json_rendered, _artifacts) = config::parse_json(&matches);\n+        let config::JsonConfig { json_rendered, json_unused_externs, .. } =\n+            config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n@@ -484,7 +487,9 @@ impl Options {\n                     return Err(1);\n                 }\n                 if theme_file.extension() != Some(OsStr::new(\"css\")) {\n-                    diag.struct_err(&format!(\"invalid argument: \\\"{}\\\"\", theme_s)).emit();\n+                    diag.struct_err(&format!(\"invalid argument: \\\"{}\\\"\", theme_s))\n+                        .help(\"arguments to --theme must have a .css extension\")\n+                        .emit();\n                     return Err(1);\n                 }\n                 let (success, ret) = theme::test_theme_against(&theme_file, &paths, &diag);\n@@ -510,7 +515,6 @@ impl Options {\n         let edition = config::parse_crate_edition(&matches);\n \n         let mut id_map = html::markdown::IdMap::new();\n-        id_map.populate(&html::render::INITIAL_IDS);\n         let external_html = match ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),\n@@ -692,6 +696,7 @@ impl Options {\n             },\n             crate_name,\n             output_format,\n+            json_unused_externs,\n         })\n     }\n "}, {"sha": "3443eae065601167a63dc54a447b840dcbc1d075", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 101, "deletions": 6, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n@@ -23,6 +23,8 @@ use std::panic;\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::sync::{Arc, Mutex};\n \n use crate::clean::Attributes;\n use crate::config::Options;\n@@ -104,8 +106,10 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let mut test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n+    let externs = options.externs.clone();\n+    let json_unused_externs = options.json_unused_externs;\n \n-    let tests = interface::run_compiler(config, |compiler| {\n+    let res = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n             let _lower_to_hir = queries.lower_to_hir()?;\n \n@@ -151,12 +155,15 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             });\n             compiler.session().abort_if_errors();\n \n-            let ret: Result<_, ErrorReported> = Ok(collector.tests);\n+            let unused_extern_reports = collector.unused_extern_reports.clone();\n+            let compiling_test_count = collector.compiling_test_count.load(Ordering::SeqCst);\n+            let ret: Result<_, ErrorReported> =\n+                Ok((collector.tests, unused_extern_reports, compiling_test_count));\n             ret\n         })\n     });\n-    let tests = match tests {\n-        Ok(tests) => tests,\n+    let (tests, unused_extern_reports, compiling_test_count) = match res {\n+        Ok(res) => res,\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n@@ -168,6 +175,44 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Some(testing::Options::new().display_output(display_warnings)),\n     );\n \n+    // Collect and warn about unused externs, but only if we've gotten\n+    // reports for each doctest\n+    if json_unused_externs {\n+        let unused_extern_reports: Vec<_> =\n+            std::mem::take(&mut unused_extern_reports.lock().unwrap());\n+        if unused_extern_reports.len() == compiling_test_count {\n+            let extern_names = externs.iter().map(|(name, _)| name).collect::<FxHashSet<&String>>();\n+            let mut unused_extern_names = unused_extern_reports\n+                .iter()\n+                .map(|uexts| uexts.unused_extern_names.iter().collect::<FxHashSet<&String>>())\n+                .fold(extern_names, |uextsa, uextsb| {\n+                    uextsa.intersection(&uextsb).map(|v| *v).collect::<FxHashSet<&String>>()\n+                })\n+                .iter()\n+                .map(|v| (*v).clone())\n+                .collect::<Vec<String>>();\n+            unused_extern_names.sort();\n+            // Take the most severe lint level\n+            let lint_level = unused_extern_reports\n+                .iter()\n+                .map(|uexts| uexts.lint_level.as_str())\n+                .max_by_key(|v| match *v {\n+                    \"warn\" => 1,\n+                    \"deny\" => 2,\n+                    \"forbid\" => 3,\n+                    // The allow lint level is not expected,\n+                    // as if allow is specified, no message\n+                    // is to be emitted.\n+                    v => unreachable!(\"Invalid lint level '{}'\", v),\n+                })\n+                .unwrap_or(\"warn\")\n+                .to_string();\n+            let uext = UnusedExterns { lint_level, unused_extern_names };\n+            let unused_extern_json = serde_json::to_string(&uext).unwrap();\n+            eprintln!(\"{}\", unused_extern_json);\n+        }\n+    }\n+\n     Ok(())\n }\n \n@@ -235,6 +280,18 @@ impl DirState {\n     }\n }\n \n+// NOTE: Keep this in sync with the equivalent structs in rustc\n+// and cargo.\n+// We could unify this struct the one in rustc but they have different\n+// ownership semantics, so doing so would create wasteful allocations.\n+#[derive(serde::Serialize, serde::Deserialize)]\n+struct UnusedExterns {\n+    /// Lint level of the unused_crate_dependencies lint\n+    lint_level: String,\n+    /// List of unused externs by their names.\n+    unused_extern_names: Vec<String>,\n+}\n+\n fn run_test(\n     test: &str,\n     cratename: &str,\n@@ -253,6 +310,7 @@ fn run_test(\n     outdir: DirState,\n     path: PathBuf,\n     test_id: &str,\n+    report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n         make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n@@ -278,6 +336,12 @@ fn run_test(\n     if as_test_harness {\n         compiler.arg(\"--test\");\n     }\n+    if options.json_unused_externs && !compile_fail {\n+        compiler.arg(\"--error-format=json\");\n+        compiler.arg(\"--json\").arg(\"unused-externs\");\n+        compiler.arg(\"-Z\").arg(\"unstable-options\");\n+        compiler.arg(\"-W\").arg(\"unused_crate_dependencies\");\n+    }\n     for lib_str in &options.lib_strs {\n         compiler.arg(\"-L\").arg(&lib_str);\n     }\n@@ -337,7 +401,26 @@ fn run_test(\n             eprint!(\"{}\", self.0);\n         }\n     }\n-    let out = str::from_utf8(&output.stderr).unwrap();\n+    let mut out_lines = str::from_utf8(&output.stderr)\n+        .unwrap()\n+        .lines()\n+        .filter(|l| {\n+            if let Ok(uext) = serde_json::from_str::<UnusedExterns>(l) {\n+                report_unused_externs(uext);\n+                false\n+            } else {\n+                true\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    // Add a \\n to the end to properly terminate the last line,\n+    // but only if there was output to be printed\n+    if out_lines.len() > 0 {\n+        out_lines.push(\"\");\n+    }\n+\n+    let out = out_lines.join(\"\\n\");\n     let _bomb = Bomb(&out);\n     match (output.status.success(), compile_fail) {\n         (true, true) => {\n@@ -721,6 +804,8 @@ crate struct Collector {\n     source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n     visited_tests: FxHashMap<(String, usize), usize>,\n+    unused_extern_reports: Arc<Mutex<Vec<UnusedExterns>>>,\n+    compiling_test_count: AtomicUsize,\n }\n \n impl Collector {\n@@ -745,6 +830,8 @@ impl Collector {\n             source_map,\n             filename,\n             visited_tests: FxHashMap::default(),\n+            unused_extern_reports: Default::default(),\n+            compiling_test_count: AtomicUsize::new(0),\n         }\n     }\n \n@@ -791,6 +878,10 @@ impl Tester for Collector {\n         let runtool_args = self.options.runtool_args.clone();\n         let target = self.options.target.clone();\n         let target_str = target.to_string();\n+        let unused_externs = self.unused_extern_reports.clone();\n+        if !config.compile_fail {\n+            self.compiling_test_count.fetch_add(1, Ordering::SeqCst);\n+        }\n \n         // FIXME(#44940): if doctests ever support path remapping, then this filename\n         // needs to be the result of `SourceMap::span_to_unmapped_path`.\n@@ -846,6 +937,9 @@ impl Tester for Collector {\n                 test_type: testing::TestType::DocTest,\n             },\n             testfn: testing::DynTestFn(box move || {\n+                let report_unused_externs = |uext| {\n+                    unused_externs.lock().unwrap().push(uext);\n+                };\n                 let option_no_run = options.no_run;\n                 let res = run_test(\n                     &test,\n@@ -865,6 +959,7 @@ impl Tester for Collector {\n                     outdir,\n                     path,\n                     &test_id,\n+                    report_unused_externs,\n                 );\n \n                 if let Err(err) = res {"}, {"sha": "3a4319d5d9aad12df340275652c61430ac847856", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -189,7 +189,9 @@ impl<'a> Classifier<'a> {\n             // leading identifier.\n             TokenKind::Bang if self.in_macro => {\n                 self.in_macro = false;\n-                Class::Macro\n+                sink(Highlight::Token { text, class: None });\n+                sink(Highlight::ExitSpan);\n+                return;\n             }\n \n             // Assume that '&' or '*' is the reference or dereference operator\n@@ -298,7 +300,9 @@ impl<'a> Classifier<'a> {\n             },\n             TokenKind::Ident | TokenKind::RawIdent if lookahead == Some(TokenKind::Bang) => {\n                 self.in_macro = true;\n-                Class::Macro\n+                sink(Highlight::EnterSpan { class: Class::Macro });\n+                sink(Highlight::Token { text, class: None });\n+                return;\n             }\n             TokenKind::Ident => match text {\n                 \"ref\" | \"mut\" => Class::RefKeyWord,"}, {"sha": "1c8dbffe78c22d5be893faab966293ae177716a3", "filename": "src/librustdoc/html/highlight/fixtures/dos_line.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,3 +1,3 @@\n <span class=\"kw\">pub</span> <span class=\"kw\">fn</span> <span class=\"ident\">foo</span>() {\n-<span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">&quot;foo&quot;</span>);\n+<span class=\"macro\">println!</span>(<span class=\"string\">&quot;foo&quot;</span>);\n }"}, {"sha": "4966e0ac6bbd3977ff1719f0e017a307761236b0", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -17,11 +17,11 @@\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"op\">&amp;&amp;</span><span class=\"ident\">foo</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n-    <span class=\"macro\">mac</span><span class=\"macro\">!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;</span><span class=\"kw-2\">mut</span> <span class=\"ident\">bar</span>);\n-    <span class=\"macro\">assert</span><span class=\"macro\">!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n+    <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;</span><span class=\"kw-2\">mut</span> <span class=\"ident\">bar</span>);\n+    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n }\n \n-<span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> <span class=\"ident\">bar</span> {\n+<span class=\"macro\">macro_rules!</span> <span class=\"ident\">bar</span> {\n     (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) <span class=\"op\">=</span><span class=\"op\">&gt;</span> {};\n }\n </code></pre>"}, {"sha": "509f1730557756ee7b1cc92d569eb45a4c1b1639", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1356,6 +1356,9 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"rustdoc-vars\".to_owned(), 1);\n     map.insert(\"sidebar-vars\".to_owned(), 1);\n     map.insert(\"copy-path\".to_owned(), 1);\n+    map.insert(\"help\".to_owned(), 1);\n+    map.insert(\"TOC\".to_owned(), 1);\n+    map.insert(\"render-detail\".to_owned(), 1);\n     // This is the list of IDs used by rustdoc sections.\n     map.insert(\"fields\".to_owned(), 1);\n     map.insert(\"variants\".to_owned(), 1);\n@@ -1365,6 +1368,12 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"trait-implementations\".to_owned(), 1);\n     map.insert(\"synthetic-implementations\".to_owned(), 1);\n     map.insert(\"blanket-implementations\".to_owned(), 1);\n+    map.insert(\"associated-types\".to_owned(), 1);\n+    map.insert(\"associated-const\".to_owned(), 1);\n+    map.insert(\"required-methods\".to_owned(), 1);\n+    map.insert(\"provided-methods\".to_owned(), 1);\n+    map.insert(\"implementors\".to_owned(), 1);\n+    map.insert(\"synthetic-implementors\".to_owned(), 1);\n     map\n }\n \n@@ -1373,12 +1382,6 @@ impl IdMap {\n         IdMap { map: init_id_map() }\n     }\n \n-    crate fn populate<I: IntoIterator<Item = S>, S: AsRef<str> + ToString>(&mut self, ids: I) {\n-        for id in ids {\n-            let _ = self.derive(id);\n-        }\n-    }\n-\n     crate fn derive<S: AsRef<str> + ToString>(&mut self, candidate: S) -> String {\n         let id = match self.map.get_mut(candidate.as_ref()) {\n             None => candidate.to_string(),"}, {"sha": "1a993f360a1660c7e0718238777973e50df28315", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -18,7 +18,7 @@ use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{\n     print_sidebar, settings, AllTypes, NameDoc, SharedContext, StylePath, BASIC_KEYWORDS,\n-    CURRENT_DEPTH, INITIAL_IDS,\n+    CURRENT_DEPTH,\n };\n \n use crate::clean::{self, AttributesExt};\n@@ -423,14 +423,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     }\n \n     fn make_child_renderer(&self) -> Self {\n-        let mut id_map = IdMap::new();\n-        id_map.populate(&INITIAL_IDS);\n-\n         Self {\n             current: self.current.clone(),\n             dst: self.dst.clone(),\n             render_redirect_pages: self.render_redirect_pages,\n-            id_map: RefCell::new(id_map),\n+            id_map: RefCell::new(IdMap::new()),\n             deref_id_map: RefCell::new(FxHashMap::default()),\n             shared: Rc::clone(&self.shared),\n             cache: Rc::clone(&self.cache),"}, {"sha": "bf57e3c37d3fb2edf5fc47f10aef42e0d5aecf63", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -283,24 +283,6 @@ crate struct StylePath {\n \n thread_local!(crate static CURRENT_DEPTH: Cell<usize> = Cell::new(0));\n \n-crate const INITIAL_IDS: [&'static str; 15] = [\n-    \"main\",\n-    \"search\",\n-    \"help\",\n-    \"TOC\",\n-    \"render-detail\",\n-    \"associated-types\",\n-    \"associated-const\",\n-    \"required-methods\",\n-    \"provided-methods\",\n-    \"implementors\",\n-    \"synthetic-implementors\",\n-    \"implementors-list\",\n-    \"synthetic-implementors-list\",\n-    \"methods\",\n-    \"implementations\",\n-];\n-\n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n     if let Some(l) = cx.src_href(item) {\n         write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"goto source code\\\">[src]</a>\", l)\n@@ -1933,13 +1915,6 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n         }\n \n         if v.iter().any(|i| i.inner_impl().trait_.is_some()) {\n-            if let Some(impl_) = v\n-                .iter()\n-                .filter(|i| i.inner_impl().trait_.is_some())\n-                .find(|i| i.inner_impl().trait_.def_id_full(cache) == cx.cache.deref_trait_did)\n-            {\n-                sidebar_deref_methods(cx, out, impl_, v);\n-            }\n             let format_impls = |impls: Vec<&Impl>| {\n                 let mut links = FxHashSet::default();\n \n@@ -2007,6 +1982,14 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 );\n                 write_sidebar_links(out, blanket_format);\n             }\n+\n+            if let Some(impl_) = v\n+                .iter()\n+                .filter(|i| i.inner_impl().trait_.is_some())\n+                .find(|i| i.inner_impl().trait_.def_id_full(cache) == cx.cache.deref_trait_did)\n+            {\n+                sidebar_deref_methods(cx, out, impl_, v);\n+            }\n         }\n     }\n }"}, {"sha": "8fb6d68f3c6bc61df4b50798b1e14dcc39684453", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -26,10 +26,10 @@ crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n         \"FiraSans-Regular.woff\" => static_files::fira_sans::REGULAR,\n         \"FiraSans-Medium.woff\" => static_files::fira_sans::MEDIUM,\n         \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n-        \"SourceSerifPro-Regular.ttf.woff\" => static_files::source_serif_pro::REGULAR,\n-        \"SourceSerifPro-Bold.ttf.woff\" => static_files::source_serif_pro::BOLD,\n-        \"SourceSerifPro-It.ttf.woff\" => static_files::source_serif_pro::ITALIC,\n-        \"SourceSerifPro-LICENSE.md\" => static_files::source_serif_pro::LICENSE,\n+        \"SourceSerif4-Regular.ttf.woff\" => static_files::source_serif_4::REGULAR,\n+        \"SourceSerif4-Bold.ttf.woff\" => static_files::source_serif_4::BOLD,\n+        \"SourceSerif4-It.ttf.woff\" => static_files::source_serif_4::ITALIC,\n+        \"SourceSerif4-LICENSE.md\" => static_files::source_serif_4::LICENSE,\n         \"SourceCodePro-Regular.ttf.woff\" => static_files::source_code_pro::REGULAR,\n         \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n         \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,"}, {"sha": "16d79032fcc63edacc6b5485564fc4e6db3e80b2", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -33,14 +33,14 @@ included, and carry their own copyright notices and license terms:\n     Licensed under the SIL Open Font License, Version 1.1.\n     See SourceCodePro-LICENSE.txt.\n \n-* Source Serif Pro (SourceSerifPro-Regular.ttf.woff,\n-    SourceSerifPro-Bold.ttf.woff, SourceSerifPro-It.ttf.woff):\n+* Source Serif 4 (SourceSerif4-Regular.ttf.woff, SourceSerif4-Bold.ttf.woff,\n+    SourceSerif4-It.ttf.woff):\n \n-    Copyright 2014 Adobe Systems Incorporated (http://www.adobe.com/), with\n-    Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of\n-    Adobe Systems Incorporated in the United States and/or other countries.\n+    Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name\n+    'Source'. All Rights Reserved. Source is a trademark of Adobe in the United\n+    States and/or other countries.\n \n     Licensed under the SIL Open Font License, Version 1.1.\n-    See SourceSerifPro-LICENSE.txt.\n+    See SourceSerif4-LICENSE.md.\n \n This copyright file is intended to be distributed with rustdoc output."}, {"sha": "8ad41888e6e3f9f4439052ae6b14ece2cdfcd7cb", "filename": "src/librustdoc/html/static/SourceSerif4-Bold.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255"}, {"sha": "2a34b5c42a8aaca17a3c6a37a33489ab0cf2193f", "filename": "src/librustdoc/html/static/SourceSerif4-It.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255"}, {"sha": "68ea1892406cbcb50b001b99cd19b49d69a9c585", "filename": "src/librustdoc/html/static/SourceSerif4-LICENSE.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-LICENSE.md", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-LICENSE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-LICENSE.md?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-Copyright 2014-2018 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n+Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n \n This Font Software is licensed under the SIL Open Font License, Version 1.1.\n ", "previous_filename": "src/librustdoc/html/static/SourceSerifPro-LICENSE.md"}, {"sha": "45a5521ab0c77a02ebf55a3f7305faccc02e2894", "filename": "src/librustdoc/html/static/SourceSerif4-Regular.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255"}, {"sha": "ca254318fe9ea9fc0f3313bc5df7ea5109f16921", "filename": "src/librustdoc/html/static/SourceSerifPro-Bold.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff?ref=72f534aae1c6cca58b97957d6c225885fcdb4d1b"}, {"sha": "a287bbe6ed3f871376686682bb455d71a13882b2", "filename": "src/librustdoc/html/static/SourceSerifPro-It.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff?ref=72f534aae1c6cca58b97957d6c225885fcdb4d1b"}, {"sha": "a3d55cfdf2555f47860979797d2e8971520c2fa4", "filename": "src/librustdoc/html/static/SourceSerifPro-Regular.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/72f534aae1c6cca58b97957d6c225885fcdb4d1b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff?ref=72f534aae1c6cca58b97957d6c225885fcdb4d1b"}, {"sha": "80dc6b923f68d8ee0df5d32e99b4dc64ce21e386", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -219,6 +219,15 @@ function hideThemeButtonState() {\n     var titleBeforeSearch = document.title;\n     var searchTitle = null;\n \n+    function removeEmptyStringsFromArray(x) {\n+        for (var i = 0, len = x.length; i < len; ++i) {\n+            if (x[i] === \"\") {\n+                x.splice(i, 1);\n+                i -= 1;\n+            }\n+        }\n+    }\n+\n     function clearInputTimeout() {\n         if (searchTimeout !== null) {\n             clearTimeout(searchTimeout);\n@@ -756,7 +765,7 @@ function hideThemeButtonState() {\n                 results = {}, results_in_args = {}, results_returned = {},\n                 split = valLower.split(\"::\");\n \n-            split = split.filter(function(segment) { return segment !== \"\"; });\n+            removeEmptyStringsFromArray(split);\n \n             function transformResults(results, isType) {\n                 var out = [];\n@@ -1338,17 +1347,11 @@ function hideThemeButtonState() {\n                 var valGenerics = extractGenerics(val);\n \n                 var paths = valLower.split(\"::\");\n-                var j;\n-                for (j = 0, len = paths.length; j < len; ++j) {\n-                    if (paths[j] === \"\") {\n-                        paths.splice(j, 1);\n-                        j -= 1;\n-                    }\n-                }\n+                removeEmptyStringsFromArray(paths);\n                 val = paths[paths.length - 1];\n                 var contains = paths.slice(0, paths.length > 1 ? paths.length - 1 : 1);\n \n-                var lev;\n+                var lev, j;\n                 for (j = 0; j < nSearchWords; ++j) {\n                     ty = searchIndex[j];\n                     if (!ty || (filterCrates !== undefined && ty.crate !== filterCrates)) {"}, {"sha": "585b7459bd717cde44684c2415aef6fa96d257d3", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -18,26 +18,26 @@\n \tfont-display: swap;\n }\n \n-/* See SourceSerifPro-LICENSE.txt for the Source Serif Pro license. */\n+/* See SourceSerif4-LICENSE.md for the Source Serif 4 license. */\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4'), url(\"SourceSerif4-Regular.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif Pro Italic'), url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Italic'), url(\"SourceSerif4-It.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n-\tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Bold'), url(\"SourceSerif4-Bold.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n \n@@ -90,7 +90,7 @@ html {\n /* General structure and fonts */\n \n body {\n-\tfont: 16px/1.4 \"Source Serif Pro\", serif;\n+\tfont: 16px/1.4 \"Source Serif 4\", serif;\n \tmargin: 0;\n \tposition: relative;\n \tpadding: 10px 15px 20px 15px;"}, {"sha": "b3ac865d55ea1c4390c3625bc7b75990afe5a675", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -89,20 +89,19 @@ crate mod fira_sans {\n     crate static LICENSE: &[u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n }\n \n-/// Files related to the Source Serif Pro font.\n-crate mod source_serif_pro {\n-    /// The file `SourceSerifPro-Regular.ttf.woff`, the Regular variant of the Source Serif Pro\n-    /// font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n+/// Files related to the Source Serif 4 font.\n+crate mod source_serif_4 {\n+    /// The file `SourceSerif4-Regular.ttf.woff`, the Regular variant of the Source Serif 4 font.\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceSerif4-Regular.ttf.woff\");\n \n-    /// The file `SourceSerifPro-Bold.ttf.woff`, the Bold variant of the Source Serif Pro font.\n-    crate static BOLD: &[u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n+    /// The file `SourceSerif4-Bold.ttf.woff`, the Bold variant of the Source Serif 4 font.\n+    crate static BOLD: &[u8] = include_bytes!(\"static/SourceSerif4-Bold.ttf.woff\");\n \n-    /// The file `SourceSerifPro-It.ttf.woff`, the Italic variant of the Source Serif Pro font.\n-    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n+    /// The file `SourceSerif4-It.ttf.woff`, the Italic variant of the Source Serif 4 font.\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceSerif4-It.ttf.woff\");\n \n-    /// The file `SourceSerifPro-LICENSE.txt`, the license text for the Source Serif Pro font.\n-    crate static LICENSE: &[u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n+    /// The file `SourceSerif4-LICENSE.txt`, the license text for the Source Serif 4 font.\n+    crate static LICENSE: &[u8] = include_bytes!(\"static/SourceSerif4-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font."}, {"sha": "545fbf2618121f23645026ca6731a00f1cfefc1d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -978,14 +978,18 @@ impl LinkCollector<'_, '_> {\n             Ok(Some((d, path))) => (path.trim(), Some(d)),\n             Ok(None) => (link.trim(), None),\n             Err((err_msg, relative_range)) => {\n-                let disambiguator_range = (no_backticks_range.start + relative_range.start)\n-                    ..(no_backticks_range.start + relative_range.end);\n-                disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                if !should_ignore_link_with_disambiguators(link) {\n+                    // Only report error if we would not have ignored this link.\n+                    // See issue #83859.\n+                    let disambiguator_range = (no_backticks_range.start + relative_range.start)\n+                        ..(no_backticks_range.start + relative_range.end);\n+                    disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                }\n                 return None;\n             }\n         };\n \n-        if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch))) {\n+        if should_ignore_link(path_str) {\n             return None;\n         }\n \n@@ -1515,6 +1519,22 @@ fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n         ..(ori_link.range.start + before_second_backtick_group)\n }\n \n+/// Returns true if we should ignore `link` due to it being unlikely\n+/// that it is an intra-doc link. `link` should still have disambiguators\n+/// if there were any.\n+///\n+/// The difference between this and [`should_ignore_link()`] is that this\n+/// check should only be used on links that still have disambiguators.\n+fn should_ignore_link_with_disambiguators(link: &str) -> bool {\n+    link.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;@()\".contains(ch)))\n+}\n+\n+/// Returns true if we should ignore `path_str` due to it being unlikely\n+/// that it is an intra-doc link.\n+fn should_ignore_link(path_str: &str) -> bool {\n+    path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch)))\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n crate enum Disambiguator {"}, {"sha": "d86f550db9020d8f7477fc1fb8f3cf5bec3c9a9c", "filename": "src/stage0.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -12,14 +12,14 @@\n # stable release's version number. `date` is the date where the release we're\n # bootstrapping off was released.\n \n-date: 2021-02-14\n+date: 2021-03-26\n rustc: beta\n \n # We use a nightly rustfmt to format the source because it solves some\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2021-01-28\n+rustfmt: nightly-2021-03-25\n \n # When making a stable release the process currently looks like:\n #"}, {"sha": "b65b727d2255c1fe20d68bea8a0aea324145c84a", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -748,10 +748,11 @@ check_reg!(eax_f64 f64 \"eax\" \"mov\");\n // CHECK: #NO_APP\n check_reg!(eax_ptr ptr \"eax\" \"mov\");\n \n-// CHECK-LABEL: ah_byte:\n-// CHECK: #APP\n-// CHECK: mov ah, ah\n-// CHECK: #NO_APP\n+// i686-LABEL: ah_byte:\n+// i686: #APP\n+// i686: mov ah, ah\n+// i686: #NO_APP\n+#[cfg(i686)]\n check_reg!(ah_byte i8 \"ah\" \"mov\");\n \n // CHECK-LABEL: xmm0_i32:"}, {"sha": "a3f1fb5e7a25cac05750c5a7f00169387f463eb3", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "ea500c3111a2e877109b43b3215b7bf84295e3ae", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "25cf5dad61403652be06567ab0e587cd480059a3", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "e78226d4083a46c503c6a749fe8e5c9db824b037", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager -Zinline-in-all-cgus -Zmir-opt-level=0\n \n #![deny(dead_code)]"}, {"sha": "379fbcf2613e08d3fc910a262359057aa3a13945", "filename": "src/test/codegen-units/item-collection/non-generic-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,7 @@\n // ignoring this test until MIR codegen has taken over completely\n // ignore-test\n \n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "06f76f7db3660302acd34c89fa1eef87d7e6dd92", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "235569728a2e01f62f09a4832048df3910fef271", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "8249e7cba946b7ac81f2b9c1fa5ba57414b7edfd", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "ae3b2e081ffaea269bc174fe0b5ef4d6ceb064fc", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "8b0448ec470851d9a8f6e41878745158471829c0", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n \n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation"}, {"sha": "c96df6e102ac3391e2773063aae6a6f3b475a626", "filename": "src/test/codegen-units/partitioning/extern-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=eager -Cincremental=tmp/partitioning-tests/extern-generic -Zshare-generics=y"}, {"sha": "b86e325537b8171cc08ae3a2c9abdd02950401f1", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/inlining-from-extern-crate"}, {"sha": "78d69fdb7d814ff9f6fefa6f381c3d920200712f", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // We specify opt-level=0 because `drop_in_place` is `Internal` when optimizing"}, {"sha": "d53f7b622913221c17b65835399616ef29ee86e9", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-inlining-but-not-all"}, {"sha": "1ea804b2f9d82c5beed1800ae4609b0f319bb7d9", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-inlining"}, {"sha": "56d108074e40d0ebacbe046a0df623de190a9e99", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-transitive-inlining"}, {"sha": "e67090303a36387892dae17e809b690bcae1edc0", "filename": "src/test/codegen-units/partitioning/methods-are-with-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,7 @@\n // much sense at the moment.\n // ignore-test\n \n-// ignore-tidy-linelength\n+//\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/methods-are-with-self-type"}, {"sha": "17c1fbb2f739b13fb723e1d97a9f65be8229389c", "filename": "src/test/codegen-units/partitioning/shared-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // no-prefer-dynamic\n // NOTE: We always compile this test with -Copt-level=0 because higher opt-levels\n //       prevent drop-glue from participating in share-generics."}, {"sha": "f6ae46b0551c28fd76cf7fa76d8541e02909ed5f", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n \n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation"}, {"sha": "0f2cf5a761678efec8c1b45140826dd73e689dac", "filename": "src/test/codegen/align-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Falign-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Falign-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes -Z mir-opt-level=0\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "82eec67af0fac24a8d49850cb22741caf92bde8f", "filename": "src/test/codegen/align-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes -Z mir-opt-level=0\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f637cdcd2344057c1c6b62edfee93befc38a2098", "filename": "src/test/codegen/asm-target-clobbers.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,21 @@\n+// only-x86_64\n+// revisions: base avx512\n+// [avx512]compile-flags: -C target-feature=+avx512f\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm)]\n+\n+// CHECK-LABEL: @avx512_clobber\n+// base: call void asm sideeffect inteldialect \"\", \"~{xmm31}\"()\n+// avx512: call float asm sideeffect inteldialect \"\", \"=&{xmm31}\"()\n+#[no_mangle]\n+pub unsafe fn avx512_clobber() {\n+    asm!(\"\", out(\"zmm31\") _, options(nostack, nomem, preserves_flags));\n+}\n+\n+// CHECK-LABEL: @eax_clobber\n+// CHECK: call i32 asm sideeffect inteldialect \"\", \"=&{ax}\"()\n+#[no_mangle]\n+pub unsafe fn eax_clobber() {\n+    asm!(\"\", out(\"eax\") _, options(nostack, nomem, preserves_flags));\n+}"}, {"sha": "2b8c0dfc229a313a8aa9b4f4afc0c1ecab5cf201", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,7 @@\n //  - The generator types and variants are marked artificial\n //  - Captured vars from the source are not marked artificial\n //\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C debuginfo=2 --edition=2018\n // only-msvc\n "}, {"sha": "e9b774b48c3e76aed81185d5f33e18848a673ed0", "filename": "src/test/codegen/async-fn-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,7 @@\n //  - The generator types and variants are marked artificial\n //  - Captured vars from the source are not marked artificial\n //\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C debuginfo=2 --edition=2018\n // ignore-msvc\n "}, {"sha": "e038ed704513d900656259f6f1aa77f8a15f5d15", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n #![feature(c_variadic)]"}, {"sha": "3aab4bea3d042530b51ccca414abe8093ddb3d3e", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "3661be046d0f7bf581df4afd99795df6ce102107", "filename": "src/test/codegen/debug-compile-unit-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fdebug-compile-unit-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fdebug-compile-unit-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-compile-unit-path.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -g --remap-path-prefix={{cwd}}=/cwd/ --remap-path-prefix={{src-base}}=/base/\n-// ignore-tidy-linelength\n+//\n //\n // Ensure that we remap the compile unit directory and that we set it to the compilers current\n // working directory and not something else."}, {"sha": "1e369a2c4e6a7972d8edd43c290f5f8a97df6d31", "filename": "src/test/codegen/enum-debug-clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,7 +1,7 @@\n // This tests that debug info for \"c-like\" enums is properly emitted.\n // This is ignored for the fallback mode on MSVC due to problems with PDB.\n \n-// ignore-tidy-linelength\n+//\n // ignore-msvc\n \n // compile-flags: -g -C no-prepopulate-passes"}, {"sha": "9c72ad9d248a0d3b703148a179bf7e239c3f2212", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,7 +1,7 @@\n // This tests that optimized enum debug info accurately reflects the enum layout.\n // This is ignored for the fallback mode on MSVC due to problems with PDB.\n \n-// ignore-tidy-linelength\n+//\n // ignore-msvc\n \n // compile-flags: -g -C no-prepopulate-passes"}, {"sha": "f936f90960346004627318ef2ac216f9aed3bab4", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -O -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n // min-system-llvm-version: 12.0\n \n #![crate_type = \"lib\"]"}, {"sha": "856b67bf9df938a8a50f1248f69f8905079751ca", "filename": "src/test/codegen/gdb_debug_script_load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fgdb_debug_script_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fgdb_debug_script_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgdb_debug_script_load.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // ignore-windows\n // ignore-macos\n // ignore-wasm"}, {"sha": "4f8a320ee9b17944b274067fb3f5466b190d5f84", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,7 @@\n //  - The generator types and variants are marked artificial\n //  - Captured vars from the source are not marked artificial\n //\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C debuginfo=2\n // only-msvc\n "}, {"sha": "86ac6db702ab9ed4fee9a2cff6f5cdb40e062564", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,7 @@\n //  - The generator types and variants are marked artificial\n //  - Captured vars from the source are not marked artificial\n //\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C debuginfo=2 --edition=2018\n // ignore-msvc\n "}, {"sha": "5b230361f397146cc37013f25e51ecc64abe2eb6", "filename": "src/test/codegen/inline-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Finline-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Finline-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finline-debuginfo.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,6 @@\n #![crate_type=\"rlib\"]\n // compile-flags: -Copt-level=3 -g\n-// ignore-tidy-linelength\n+//\n \n #[no_mangle]\n #[inline(always)]"}, {"sha": "b26076e7a7bfadae4283d5357a1bb569b1803fee", "filename": "src/test/codegen/instrument-mcount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -Z instrument-mcount\n \n #![crate_type = \"lib\"]"}, {"sha": "1a3923f1bb1ab7b51497a471ab7f4c3d83e03d0c", "filename": "src/test/codegen/issue-44056-macos-tls-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // only-macos\n // no-system-llvm\n // compile-flags: -O"}, {"sha": "85c2bbfd040bdb7b7d8993a93c509cb58506af5b", "filename": "src/test/codegen/issue-73338-effecient-cmp.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fissue-73338-effecient-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fissue-73338-effecient-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-73338-effecient-cmp.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,39 @@\n+// This test checks that comparison operation\n+// generated by #[derive(PartialOrd)]\n+// doesn't contain jumps for C enums\n+\n+// compile-flags: -Copt-level=3\n+\n+#![crate_type=\"lib\"]\n+\n+#[repr(u32)]\n+#[derive(Copy, Clone, Eq, PartialEq, PartialOrd)]\n+pub enum Foo {\n+    Zero,\n+    One,\n+    Two,\n+}\n+\n+#[no_mangle]\n+pub fn compare_less(a: Foo, b: Foo)->bool{\n+    // CHECK-NOT: br {{.*}}\n+    a < b\n+}\n+\n+#[no_mangle]\n+pub fn compare_le(a: Foo, b: Foo)->bool{\n+    // CHECK-NOT: br {{.*}}\n+    a <= b\n+}\n+\n+#[no_mangle]\n+pub fn compare_ge(a: Foo, b: Foo)->bool{\n+    // CHECK-NOT: br {{.*}}\n+    a >= b\n+}\n+\n+#[no_mangle]\n+pub fn compare_greater(a: Foo, b: Foo)->bool{\n+    // CHECK-NOT: br {{.*}}\n+    a > b\n+}"}, {"sha": "dfa7803d4f2f1419a9d2e38e1d44aacc94f3ff46", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -O -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "887915955b59410c511626fcd8d8fcd74cea35f9", "filename": "src/test/codegen/remap_path_prefix/auxiliary/remap_path_prefix_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fremap_path_prefix_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fremap_path_prefix_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fremap_path_prefix_aux.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n \n // compile-flags: -g  --remap-path-prefix={{cwd}}=/the/aux-cwd --remap-path-prefix={{src-base}}/remap_path_prefix/auxiliary=/the/aux-src\n "}, {"sha": "59092dbf63764b15e682bde1ae809d4c9c0ce22c", "filename": "src/test/codegen/remap_path_prefix/auxiliary/xcrate-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -g  --remap-path-prefix={{cwd}}=/the/aux-cwd --remap-path-prefix={{src-base}}/remap_path_prefix/auxiliary=/the/aux-src\n \n #![crate_type = \"lib\"]"}, {"sha": "c2d01c7fec2311047c6c3daf43ba76e545fa969b", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows\n-// ignore-tidy-linelength\n+//\n \n // compile-flags: -g  -C no-prepopulate-passes --remap-path-prefix={{cwd}}=/the/cwd --remap-path-prefix={{src-base}}=/the/src\n // aux-build:remap_path_prefix_aux.rs"}, {"sha": "9e904fc82ab4190c9ff96f64b131bc9cc3e3a048", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -O\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "5c3bcc28878ee31c029fb42d1ac3915aee68ef5b", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n // min-system-llvm-version: 12.0\n // ignore-arm"}, {"sha": "429d760b4aa04cf4f627ecc67a11350cb8c3fcff", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n // min-system-llvm-version: 12.0\n // ignore-aarch64"}, {"sha": "21176ac0e7a231774e55d037c19462e80e6ba690", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n // min-system-llvm-version: 12.0\n // only-mips64"}, {"sha": "693f0d99c4fff04c6503386dc0768f7fc7cd29c4", "filename": "src/test/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C no-prepopulate-passes\n // only-riscv64\n // only-linux"}, {"sha": "1555acadfbcca67a969307638a367fd0845b5d1b", "filename": "src/test/codegen/riscv-abi/riscv64-lp64d-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64d-abi.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C no-prepopulate-passes\n // only-riscv64\n // only-linux"}, {"sha": "f08fabed421d5c97cb9e4a67db12915e5655e6f3", "filename": "src/test/codegen/riscv-abi/riscv64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64f-lp64d-abi.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C no-prepopulate-passes\n // only-riscv64\n // only-linux"}, {"sha": "6fb0ceb4025b5e26c1a31b9c141ea72bd75093d9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "4a98d797b526b1fe448c766c3d43690a6ed645c8", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "e2e0fc16dfa94b979defd6bdd3ccb05a3916e341", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "050a0e5b42620a9339fd4d324d227e1925f2fce0", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-scatter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "7d9b0d2a77bc1b6af021a156424c1863fa9aa368", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "17f051a5bce0aaa24bc2a2f7df63729421bb2913", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n+//\n \n #![crate_type = \"lib\"]\n "}, {"sha": "c043eceb5cd12f26499acf27da1efc00facf555a", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -2,7 +2,7 @@\n // \"target-cpu\" attribute in LLVM.\n \n // no-prefer-dynamic\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C no-prepopulate-passes -C panic=abort -C linker-plugin-lto -Cpasses=name-anon-globals\n \n #![crate_type = \"staticlib\"]"}, {"sha": "ed8dc0e93837795039c643f1a40c58b97dad74e9", "filename": "src/test/codegen/tune-cpu-on-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Ftune-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fcodegen%2Ftune-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftune-cpu-on-functions.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -2,7 +2,7 @@\n // \"tune-cpu\" attribute in LLVM.\n \n // no-prefer-dynamic\n-// ignore-tidy-linelength\n+//\n // compile-flags: -C no-prepopulate-passes -C panic=abort -C linker-plugin-lto -Cpasses=name-anon-globals -Z tune-cpu=generic\n \n #![crate_type = \"staticlib\"]"}, {"sha": "f3e465dc652d408028cfa1686c950292d79de14a", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb"}, {"sha": "155088c61fe3133b16a246a7beaddded0cf41b62", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "b417567dcfec6242dfe255c769cc56906a03c3ce", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n // min-lldb-version: 310\n "}, {"sha": "2ed49de58cd23248faac01ca62f67db16a8c705e", "filename": "src/test/debuginfo/c-style-enum-in-composite.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "dce34fc0dcf5e4ed49d90bdf40588cc64bc8b2f3", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // ignore-aarch64\n // ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n // min-lldb-version: 310"}, {"sha": "1532c83dfac3a849c99578b202eca7d945425ab3", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n \n // This fails on lldb 6.0.1 on x86-64 Fedora 28; so mark it macOS-only"}, {"sha": "0d94cd224ec09276d4c4eaf2f6b3054f68a81834", "filename": "src/test/debuginfo/evec-in-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "dea1339517b468738b57f936e269e7230e804d0f", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n // min-lldb-version: 310\n "}, {"sha": "3314f0a4e43c50ba23756c85fc3aef3729904995", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-lldb\n // ignore-android: FIXME(#10381)\n // min-gdb-version: 8.1"}, {"sha": "b65471011fd2af0dce3d609b955e7649f1f73b2c", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n "}, {"sha": "85fe8ac08f3c48241b57ef7bf8f5ef3992a6a7dc", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // compile-flags:-g\n \n // Some versions of the non-rust-enabled LLDB print the wrong generic"}, {"sha": "764330ae27f5dadeb580586c46ce5cbcf159b0f1", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n \n // Require a gdb that can read DW_TAG_variant_part."}, {"sha": "170a610c621c035ddc44ce36c6fad533e2372858", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Some versions of the non-rust-enabled LLDB print the wrong generic\n // parameter type names in this test.\n // rust-lldb"}, {"sha": "60362e54e7dbb08badd4d50148378ada1a21acc1", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb"}, {"sha": "a68e4c0a5565b1de08f8d67efab21e8d50b8d9ab", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,6 @@\n \n // Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n-// ignore-tidy-linelength\n \n // compile-flags:-g\n "}, {"sha": "80f4c2e1150ec50d89b6b895569eb1fcdfb66f85", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n // ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n "}, {"sha": "04d08b9e6a5cd107a17c896d571358b618555ccb", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n \n // min-lldb-version: 310"}, {"sha": "196d85b4181f7b8b0c0b5ee0ba6897f3a0f7b2fa", "filename": "src/test/debuginfo/packed-struct-with-destructor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "7d1893a9431cdcf07356f5b3ba8de1da4c0646f0", "filename": "src/test/debuginfo/packed-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n // ignore-gdb-version: 7.11.90 - 7.12.9\n "}, {"sha": "93597aa7e235fb7cd64a63739f1db909f655e38f", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n // ignore-android: FIXME(#10381)"}, {"sha": "b7bfe44b6ec44bd98a742728b74e0869400dd7ab", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n // Need a fix for LLDB first...\n // ignore-lldb\n-// ignore-tidy-linelength\n \n // FIXME: LLVM generates invalid debug info for variables requiring\n // dynamic stack realignment, which is the case on s390x for vector"}, {"sha": "aa3cf023a718dd1d176dfa236a8a4d9dcefe19e9", "filename": "src/test/debuginfo/simple-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n // ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n "}, {"sha": "41d15af14ede6812a007322d0ca820ac1c6716c8", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n // ignore-gdb-version: 7.11.90 - 7.12.9\n // ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155"}, {"sha": "a9e7797ec700135504f312d233679a97a6cca124", "filename": "src/test/debuginfo/struct-in-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "3d819e3689887f6cdd2bc8a24ccacab9c74c8637", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb"}, {"sha": "4334cd9028b89046b397af8946d3beaa5ea0b251", "filename": "src/test/debuginfo/struct-with-destructor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "759eab8e8a0c212f5e32c61b4ca4d13bf3a376a0", "filename": "src/test/debuginfo/tuple-in-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "b8702f970a3a3200ec7bb88c4cb56645fe990f5f", "filename": "src/test/debuginfo/tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // min-lldb-version: 310\n \n // compile-flags:-g"}, {"sha": "39ead172e651cea906d8479a45d08795472cb19d", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb"}, {"sha": "cc4a4476d160e13d49ffb8a625ead39a35f24c9e", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-lldb\n // ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n "}, {"sha": "e109b1bf2aeaeac90b6e5749282c1f3a98bd7020", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // ignore-windows\n // ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n // min-lldb-version: 310"}, {"sha": "93e70d3792cee969aed769e0c74cc9b59130766f", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -12,7 +12,6 @@\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n-#![feature(link_args)]\n #![crate_type = \"rlib\"]\n \n // Change function name --------------------------------------------------------\n@@ -146,21 +145,6 @@ extern \"C\" {\n     pub fn add_function2();\n }\n \n-// Change link-args ------------------------------------------------------------\n-#[cfg(cfail1)]\n-#[link_args = \"-foo -bar\"]\n-extern \"C\" {\n-    pub fn change_link_args(c: i32);\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n-#[rustc_clean(cfg = \"cfail3\")]\n-#[link_args = \"-foo -bar -baz\"]\n-extern \"C\" {\n-    pub fn change_link_args(c: i32);\n-}\n-\n // Change link-name ------------------------------------------------------------\n #[cfg(cfail1)]\n #[link(name = \"foo\")]"}, {"sha": "9fa478f8a826c73b97626ae2420e2d4035d26b81", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -130,12 +130,12 @@ fn address_of_reborrow() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _1 = &_2;                        // scope 0 at $DIR/address-of.rs:4:13: 4:21\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:5:17: 5:29\n-        FakeRead(ForLet, _3);            // scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n         StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n         _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:7:5: 7:6\n@@ -170,25 +170,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_13);                // scope 2 at $DIR/address-of.rs:11:20: 11:21\n         StorageLive(_15);                // scope 2 at $DIR/address-of.rs:13:9: 13:10\n         _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:13:23: 13:24\n-        FakeRead(ForLet, _15);           // scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address-of.rs:13:9: 13:10\n         AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:13:12: 13:20\n         StorageLive(_16);                // scope 3 at $DIR/address-of.rs:14:9: 14:10\n         _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:14:31: 14:32\n-        FakeRead(ForLet, _16);           // scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address-of.rs:14:9: 14:10\n         AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:14:12: 14:28\n         StorageLive(_17);                // scope 4 at $DIR/address-of.rs:15:9: 15:10\n         StorageLive(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         StorageDead(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        FakeRead(ForLet, _17);           // scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address-of.rs:15:9: 15:10\n         AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:15:12: 15:27\n         StorageLive(_19);                // scope 5 at $DIR/address-of.rs:16:9: 16:10\n         StorageLive(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         StorageDead(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        FakeRead(ForLet, _19);           // scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address-of.rs:16:9: 16:10\n         AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:16:12: 16:24\n         StorageLive(_21);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n         StorageLive(_22);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n@@ -218,25 +218,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_27);                // scope 6 at $DIR/address-of.rs:21:22: 21:23\n         StorageLive(_29);                // scope 6 at $DIR/address-of.rs:23:9: 23:10\n         _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:23:23: 23:24\n-        FakeRead(ForLet, _29);           // scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address-of.rs:23:9: 23:10\n         AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:23:12: 23:20\n         StorageLive(_30);                // scope 7 at $DIR/address-of.rs:24:9: 24:10\n         _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:24:31: 24:32\n-        FakeRead(ForLet, _30);           // scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address-of.rs:24:9: 24:10\n         AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:24:12: 24:28\n         StorageLive(_31);                // scope 8 at $DIR/address-of.rs:25:9: 25:10\n         StorageLive(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         StorageDead(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        FakeRead(ForLet, _31);           // scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address-of.rs:25:9: 25:10\n         AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:25:12: 25:27\n         StorageLive(_33);                // scope 9 at $DIR/address-of.rs:26:9: 26:10\n         StorageLive(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         StorageDead(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        FakeRead(ForLet, _33);           // scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address-of.rs:26:9: 26:10\n         AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:26:12: 26:24\n         StorageLive(_35);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n         StorageLive(_36);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n@@ -266,25 +266,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_41);                // scope 10 at $DIR/address-of.rs:31:20: 31:21\n         StorageLive(_43);                // scope 10 at $DIR/address-of.rs:33:9: 33:10\n         _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:33:21: 33:22\n-        FakeRead(ForLet, _43);           // scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address-of.rs:33:9: 33:10\n         AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:33:12: 33:18\n         StorageLive(_44);                // scope 11 at $DIR/address-of.rs:34:9: 34:10\n         _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:34:29: 34:30\n-        FakeRead(ForLet, _44);           // scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address-of.rs:34:9: 34:10\n         AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:34:12: 34:26\n         StorageLive(_45);                // scope 12 at $DIR/address-of.rs:35:9: 35:10\n         StorageLive(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         StorageDead(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        FakeRead(ForLet, _45);           // scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address-of.rs:35:9: 35:10\n         AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:35:12: 35:25\n         StorageLive(_47);                // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         StorageLive(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         StorageDead(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        FakeRead(ForLet, _47);           // scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:36:12: 36:22\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:3:26: 37:2\n         StorageDead(_47);                // scope 13 at $DIR/address-of.rs:37:1: 37:2"}, {"sha": "195f3e2e65c642cd1eacabcd833dca54630f781a", "filename": "src/test/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -24,19 +24,19 @@ fn borrow_and_cast(_1: i32) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:42:13: 42:15\n         _3 = &_1;                        // scope 0 at $DIR/address-of.rs:42:13: 42:15\n         _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address-of.rs:42:9: 42:10\n         StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:42:29: 42:30\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:43:9: 43:10\n         StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:43:13: 43:19\n         _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:43:13: 43:19\n         _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        FakeRead(ForLet, _4);            // scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address-of.rs:43:9: 43:10\n         StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:43:33: 43:34\n         StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:44:13: 44:19\n         _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:44:13: 44:19\n         _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        FakeRead(ForLet, _6);            // scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:44:31: 44:32\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:41:32: 45:2\n         StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:45:1: 45:2"}, {"sha": "e751b825c050535f5f776972e10f650200ceed69", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -28,15 +28,15 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n         StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n         _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n         _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n         StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n         StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n-        FakeRead(ForLet, _4);            // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n+        FakeRead(ForLet(None), _4);      // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20"}, {"sha": "02221c4cf4a1f5574fa844ea6d927b1673b14e5a", "filename": "src/test/mir-opt/early_otherwise_branch_68867.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n \n // example from #68867"}, {"sha": "2893ee9ac334b1b1d771fabb22642d87012d4e49", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "status": "modified", "additions": 248, "deletions": 248, "changes": 496, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -2,299 +2,299 @@\n + // MIR for `try_sum` after SimplifyBranches-final\n   \n   fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n-      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:5: 19:10\n-      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:20:6: 20:42\n-      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n-      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n-      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n-      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n-      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n-      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n-      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n-      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n-      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n-      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n-      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n-+     let mut _34: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-+     let mut _35: bool;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:17:5: 17:6\n+      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:10\n+      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:6: 19:42\n+      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n+      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n+      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n+      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n+      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n+      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n+      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n+      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:14: 26:28\n+      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n++     let mut _34: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n++     let mut _35: bool;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n       scope 1 {\n--         debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n--         debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         debug one => _15;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-+         debug other => _16;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+-         debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n++         debug one => _15;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n++         debug other => _16;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n       }\n       scope 2 {\n--         debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n--         debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-+         debug one => _20;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-+         debug other => _21;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+-         debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n++         debug one => _20;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n++         debug other => _21;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n       }\n       scope 3 {\n--         debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n--         debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         debug one => _25;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-+         debug other => _26;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+-         debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n++         debug one => _25;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n++         debug other => _26;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n       }\n       scope 4 {\n--         debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n--         debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-+         debug one => _30;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-+         debug other => _31;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+-         debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n++         debug one => _30;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n++         debug other => _31;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n--         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n--         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n--         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-+         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n-          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n--         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n--         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n-          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n--         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+-         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+-         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n++         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+-         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n+-         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n+          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n+-         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n       }\n   \n       bb1: {\n--         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n--         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n+-         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n -     }\n - \n -     bb2: {\n-+         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n-          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n--         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n-          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:27: 27:28\n--         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+-         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n+          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n+          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n+-         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   \n +     bb2: {\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n++         _15 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n++         _16 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++     }\n++ \n+      bb3: {\n+-         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-+         _15 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n++         _20 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         _16 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n++         _21 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+     }\n-+ \n-      bb3: {\n--         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n--         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-+         _20 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-+         _21 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n       }\n   \n       bb4: {\n--         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n--         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n+-         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n++         _25 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n++         _26 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+      }\n+  \n+      bb5: {\n+-         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-+         _25 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n++         _30 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         _26 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n++         _31 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-      }\n-  \n-      bb5: {\n--         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n--         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-+         _30 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-+         _31 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n       }\n   \n       bb6: {\n--         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n--         _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n--         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n--         _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n--         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n--         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n--         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n--         StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n--         _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n--         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n--         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n--         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n--         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n--         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n--         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n-+         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-+         return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n+-         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+-         _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+-         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+-         _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+-         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n+-         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n+-         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n+-         StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n+-         _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n+-         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n+-         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+-         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+-         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n+-         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n+-         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+-         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+-         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n++         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n++         return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   \n       bb7: {\n--         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n--         _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n--         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n--         _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n--         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n--         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n--         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n--         StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n--         _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n--         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n--         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n--         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n--         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n--         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n--         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n--         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n--         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+-         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+-         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+-         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+-         StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+-         _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+-         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+-         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+-         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+-         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+-         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+-         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n -     }\n - \n -     bb8: {\n--         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n--         _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n--         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n--         _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n--         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n--         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n--         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n--         StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n--         _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n--         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n--         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n--         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n--         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n--         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n--         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+-         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+-         _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+-         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+-         _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+-         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n+-         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n+-         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n+-         StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n+-         _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n+-         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n+-         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+-         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+-         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n+-         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n+-         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+-         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+-         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n -     }\n - \n -     bb9: {\n--         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n--         _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n--         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n--         _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n--         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n--         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n--         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n--         StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n--         _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n--         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n--         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n--         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n--         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n--         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n--         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n--         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n--         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+-         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+-         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+-         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+-         StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+-         _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+-         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+-         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+-         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+-         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+-         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+-         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n -     }\n - \n -     bb10: {\n--         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n--         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n--         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n--         return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n-+         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-+         switchInt(_11) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n+-         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n+-         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n+-         return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n++         switchInt(_11) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n       }\n   }\n   "}, {"sha": "9039989e0f288e72fd633dea136de423b77d1615", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 161, "deletions": 161, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -2,215 +2,215 @@\n + // MIR for `try_sum` after EarlyOtherwiseBranch\n   \n   fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n-      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:5: 19:10\n-      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:20:6: 20:42\n-      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n-      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n-      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n-      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n-      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n-      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n-      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n-      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n-      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n-      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n-      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n-+     let mut _34: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-+     let mut _35: bool;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:17:5: 17:6\n+      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:10\n+      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:6: 19:42\n+      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n+      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n+      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n+      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n+      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n+      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n+      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n+      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:14: 26:28\n+      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n++     let mut _34: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n++     let mut _35: bool;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n       scope 1 {\n-          debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+          debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n       }\n       scope 2 {\n-          debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-          debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+          debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n       }\n       scope 3 {\n-          debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+          debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n       }\n       scope 4 {\n-          debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-          debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+          debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n-          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n-          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n-          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n--         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n-+         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n+          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n+-         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n++         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n       }\n   \n       bb1: {\n--         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n--         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n+-         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n -     }\n - \n -     bb2: {\n-+         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n-          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n--         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n-          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:27: 27:28\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+-         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n+          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n+          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   \n -     bb3: {\n--         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n--         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n+-         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n -     }\n - \n -     bb4: {\n--         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n--         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n+-         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n -     }\n - \n -     bb5: {\n--         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n--         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n+-         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n -     }\n - \n -     bb6: {\n +     bb2: {\n-          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-          StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-          _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-          StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-          _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-          _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-          StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-          StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-          StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+          _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+          _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+          StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n+          StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n+          _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n+          StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n+          _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n+          _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n+          StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+          StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n+          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n+          StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n       }\n   \n -     bb7: {\n +     bb3: {\n-          StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-          _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n-          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-          _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-          StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n-          StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n-          _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n-          StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n-          _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n-          _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n-          StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n-          StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n-          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n-          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n-          StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n-          StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n-          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+          StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+          StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+          _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+          StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+          _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+          _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+          StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+          StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+          StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+          StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n       }\n   \n -     bb8: {\n +     bb4: {\n-          StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-          StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-          _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-          StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-          _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-          _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-          StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-          StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-          StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+          StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+          _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+          _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+          StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n+          StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n+          _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n+          StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n+          _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n+          _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n+          StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+          StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n+          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n+          StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+          StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n       }\n   \n -     bb9: {\n +     bb5: {\n-          StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-          _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n-          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-          _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-          StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n-          StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n-          _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n-          StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n-          _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n-          _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n-          StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n-          StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n-          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n-          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n-          StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n-          StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n-          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+          StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+          StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+          _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+          StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+          _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+          _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+          StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+          StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+          StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+          StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n       }\n   \n -     bb10: {\n +     bb6: {\n-          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n-          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n+          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n+          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n +     }\n + \n +     bb7: {\n-+         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-+         switchInt(_11) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n++         switchInt(_11) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n       }\n   }\n   "}, {"sha": "93507879a6f83e286563fb152ae91c6215301369", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -18,7 +18,7 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n         switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:16\n     }\n "}, {"sha": "8355b2d195e148d519123c0625eaddb82d405bbb", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -14,7 +14,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n "}, {"sha": "06fbbda3d9e2298b3c144ddcdd10eba2e6572416", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -24,7 +24,7 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n@@ -51,7 +51,7 @@ fn main() -> () {\n     }\n \n     bb8: {\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21"}, {"sha": "2e6783b7f3c9d9987f5afdf08bc80ff284d476f9", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25"}, {"sha": "2e6783b7f3c9d9987f5afdf08bc80ff284d476f9", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25"}, {"sha": "7def08ece220b09d7babc4741428ada79e1ee3e3", "filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -9,7 +9,7 @@ fn f(_1: Void) -> ! {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n         StorageLive(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n     }\n "}, {"sha": "3c26b20c35e2d79fc4a033ffd5cd382a9e55b7d3", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -29,7 +29,7 @@ fn main() -> () {\n \n     bb1: {\n         StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8"}, {"sha": "99c7ac8d5b708c4e7e076ec359e6f8699fa0dde2", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -41,7 +41,7 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n-        FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        FakeRead(ForLet(None), _6);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n         goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n     }"}, {"sha": "3395cbfbdfb3ac30c4b83c4a57352a0bb7332b38", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -31,7 +31,7 @@\n       }\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+-         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n +         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n       }"}, {"sha": "5af242376c9304066de78725f9c5cfb9acd0d119", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -27,7 +27,7 @@ fn full_tested_match() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n         switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }"}, {"sha": "a4ebf8a02466a5160d5dd27806afba0f3bf4418b", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -26,7 +26,7 @@ fn full_tested_match2() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n         switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }"}, {"sha": "5de52b324f43ffd2813cca70ff7428ade62930af", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -37,7 +37,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }"}, {"sha": "5bb910947ca2523556cea829e733822e11189d7f", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -21,12 +21,12 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         _1 = const 3_i32;                // scope 0 at $DIR/match_test.rs:7:13: 7:14\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         _2 = const true;                 // scope 1 at $DIR/match_test.rs:8:13: 8:17\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:12:5: 17:6\n-        FakeRead(ForMatchedPlace, _1);   // scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 2 at $DIR/match_test.rs:12:11: 12:12\n         _6 = Le(const 0_i32, _1);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n         switchInt(move _6) -> [false: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }"}, {"sha": "39e6cee11b4c9c8a6e9fca6a08e2316f1f2a58d0", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -46,7 +46,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x00000001)): usize), const Const(Value(Scalar(0x00000002)): usize), const Const(Value(Scalar(0x00000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n@@ -57,10 +57,10 @@ fn main() -> () {\n \n     bb1: {\n         _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6"}, {"sha": "6021b6529f911f81110faf21750685aad4452d35", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -46,7 +46,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n@@ -57,10 +57,10 @@ fn main() -> () {\n \n     bb1: {\n         _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6"}, {"sha": "f54c8f8ab4a2e2ba60f1946669d8b1b61a05da42", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -36,7 +36,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n         AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver-ptr-mutability.rs:14:14: 14:23\n         StorageLive(_2);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n         StorageLive(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n@@ -63,7 +63,7 @@ fn main() -> () {\n         _7 = &_8;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:18:35: 18:41\n         _6 = &_7;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n         _5 = &(*_6);                     // scope 1 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n-        FakeRead(ForLet, _5);            // scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n+        FakeRead(ForLet(None), _5);      // scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n         AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver-ptr-mutability.rs:18:18: 18:31\n         StorageDead(_6);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:18:41: 18:42\n         StorageLive(_10);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16"}, {"sha": "4aa388fc67bd0204208e5795f831e03a17d663e8", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -13,7 +13,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n           _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n           switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16"}, {"sha": "841cca7c381f78670161de9738aff47375aaed64", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -5,7 +5,7 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n         switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n "}, {"sha": "841cca7c381f78670161de9738aff47375aaed64", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -5,7 +5,7 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n         switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n "}, {"sha": "e02580135af38f3f9a02d8745b52b024052d91c9", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -39,7 +39,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         _1 = const 0_i32;                // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         StorageLive(_2);                 // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageLive(_3);                 // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         StorageLive(_4);                 // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n@@ -48,14 +48,14 @@ fn main() -> () {\n         _4 = Option::<i32>::Some(move _5); // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageDead(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n         _3 = &_4;                        // scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n-        FakeRead(ForLet, _3);            // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         _2 = const ();                   // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageDead(_4);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_3);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _6 = const 1_i32;                // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n-        FakeRead(ForLet, _6);            // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        FakeRead(ForLet(None), _6);      // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _0 = const ();                   // scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n         StorageDead(_6);                 // scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_ranges.rs:9:1: 9:2"}, {"sha": "7f81d9fc482ff91e17445f060855618925bc9e98", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -48,7 +48,7 @@ fn move_out_by_subslice() -> () {\n \n     bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2"}, {"sha": "62ab494c066285935830d66237b7b9bcba83a4bc", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -48,7 +48,7 @@ fn move_out_from_end() -> () {\n \n     bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2"}, {"sha": "f94e882ccb68de5385d548c3ee8b27e1b07b34ea", "filename": "src/test/run-make-fulldeps/link-args-order/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -6,5 +6,5 @@ RUSTC_FLAGS = -C linker-flavor=ld -C link-arg=a -C link-args=\"b c\" -C link-args=\n RUSTC_FLAGS_PRE = -C linker-flavor=ld -Z pre-link-arg=a -Z pre-link-args=\"b c\" -Z pre-link-args=\"d e\" -Z pre-link-arg=f\n \n all:\n-\t$(RUSTC) $(RUSTC_FLAGS) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"'\n+\t$(RUSTC) $(RUSTC_FLAGS) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"'\n \t$(RUSTC) $(RUSTC_FLAGS_PRE) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"'"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make-fulldeps/link-args-order/empty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1 @@\n-#![feature(link_args)]\n-\n-#[link_args = \"g\"]\n-extern \"C\" {}\n-\n fn main() {}"}, {"sha": "4b20cd5d7453ee6a21262a9d600725d78bde2705", "filename": "src/test/run-make-fulldeps/print-unversioned-files/unversioned-files.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -10,7 +10,7 @@ SourceCodePro-It.ttf.woff\n SourceCodePro-LICENSE.txt\n SourceCodePro-Regular.ttf.woff\n SourceCodePro-Semibold.ttf.woff\n-SourceSerifPro-Bold.ttf.woff\n-SourceSerifPro-It.ttf.woff\n-SourceSerifPro-LICENSE.md\n-SourceSerifPro-Regular.ttf.woff\n+SourceSerif4-Bold.ttf.woff\n+SourceSerif4-It.ttf.woff\n+SourceSerif4-LICENSE.md\n+SourceSerif4-Regular.ttf.woff"}, {"sha": "d89b526d4303fddb93b2c9a08112dbb4c5e742fc", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -14,7 +14,7 @@ invocation-only:\n \t[ -e $(INVOCATION_ONLY)/x/index.html ]\n \t[ -e $(INVOCATION_ONLY)/theme-xxx.css ] # generated from z.css\n \t! [ -e $(INVOCATION_ONLY)/storage-xxx.js ]\n-\t! [ -e $(INVOCATION_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(INVOCATION_ONLY)/SourceSerif4-It.ttf.woff ]\n \n \t# FIXME: this probably shouldn't have a suffix\n \t[ -e $(INVOCATION_ONLY)/y-xxx.css ]\n@@ -24,7 +24,7 @@ invocation-only:\n toolchain-only:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx --extend-css z.css x.rs\n \t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n-\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerif4-It.ttf.woff ]\n \t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n \t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n \t! [ -e $(TOOLCHAIN_ONLY)/theme.css ]\n@@ -35,7 +35,7 @@ toolchain-only:\n all-shared:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx --extend-css z.css x.rs\n \t[ -e $(ALL_SHARED)/storage-xxx.js ]\n-\t[ -e $(ALL_SHARED)/SourceSerifPro-It.ttf.woff ]\n+\t[ -e $(ALL_SHARED)/SourceSerif4-It.ttf.woff ]\n \t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n \t! [ -e $(ALL_SHARED)/settings.html ]\n \t! [ -e $(ALL_SHARED)/x ]"}, {"sha": "5a6465bd064691c9dcda922549b1e6af81f79673", "filename": "src/test/rustdoc-ui/commandline-argfile-missing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n // Check to see if we can get parameters from an @argsfile file\n //\n-// ignore-tidy-linelength\n // normalize-stderr-test: \"os error \\d+\" -> \"os error $$ERR\"\n // normalize-stderr-test: \"commandline-argfile-missing.args:[^(]*\" -> \"commandline-argfile-missing.args: $$FILE_MISSING \"\n // compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-missing.args"}, {"sha": "94b69a99879c073ac12dd0d53fd6359bc5cbdb73", "filename": "src/test/rustdoc-ui/doc-spotlight.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.fixed?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // check-pass\n // run-rustfix\n "}, {"sha": "cc5f159a8093e9c64923cbb89c3cb4614c27ddd5", "filename": "src/test/rustdoc-ui/doc-spotlight.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // check-pass\n // run-rustfix\n "}, {"sha": "e5fa6293f3d8d6bb976b54967fe307f65d14707f", "filename": "src/test/rustdoc-ui/doc-spotlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n warning: unknown `doc` attribute `spotlight`\n-  --> $DIR/doc-spotlight.rs:7:7\n+  --> $DIR/doc-spotlight.rs:6:7\n    |\n LL | #[doc(spotlight)]\n    |       ^^^^^^^^^ help: use `notable_trait` instead"}, {"sha": "417618c74582cda0c897cf8a7658eb6e0f1ef3b0", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,6 @@\n+#![deny(warnings)]\n+\n+//! Email me at <hello@localhost>.\n+//~^ ERROR unknown disambiguator `hello`\n+\n+//! This should *not* warn: <hello@example.com>."}, {"sha": "de215b2163bd4e28d1100720c34876aa08ec4f8f", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,15 @@\n+error: unknown disambiguator `hello`\n+  --> $DIR/email-address-localhost.rs:3:18\n+   |\n+LL | //! Email me at <hello@localhost>.\n+   |                  ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/email-address-localhost.rs:1:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c22ebf02718e65ca3935f604020b376f1bdeeb49", "filename": "src/test/rustdoc-ui/invalid-theme-name.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags:--theme {{src-base}}/invalid-theme-name.rs\n+// error-pattern: invalid argument\n+// error-pattern: must have a .css extension"}, {"sha": "80204442dbec39a4ee757ec659b57456e5f01158", "filename": "src/test/rustdoc-ui/invalid-theme-name.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,4 @@\n+error: invalid argument: \"$DIR/invalid-theme-name.rs\"\n+   |\n+   = help: arguments to --theme must have a .css extension\n+"}, {"sha": "273fc62aa179348667a94babe15e1b7279b2f347", "filename": "src/test/rustdoc/assoc-item-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fassoc-item-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fassoc-item-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-item-cast.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n pub trait Expression {\n     type SqlType;"}, {"sha": "82fa7cf9e6057948a03efcc02b4afe301f5dee23", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_type=\"lib\"]\n \n // @has assoc_types/trait.Index.html"}, {"sha": "4b66b5271c5ba2aeac377be3a27803db475261a5", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // edition:2018\n // @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {"}, {"sha": "fb5c8517f6cac04d9ac47ef5fb8d914d008bad9a", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n \n #![unstable(feature = \"humans\","}, {"sha": "db4be82e6bfd9f7090e6f457d5669843fb517446", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(const_generics)]\n #![crate_name = \"foo\"]\n "}, {"sha": "04fb339533339da5d1011c156f9b193f4ffb97f1", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(const_generics)]\n \n #![crate_name = \"foo\"]"}, {"sha": "ebda5b1940455a2ab5611c7f47d9b6afe3a177f0", "filename": "src/test/rustdoc/const-generics/type-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![crate_name = \"foo\"]\n \n // @has foo/type.CellIndex.html '//pre[@class=\"rust typedef\"]' 'type CellIndex<const D: usize> = [i64; D];'"}, {"sha": "459a30060c6233ac331075a62229c3e5a45be01a", "filename": "src/test/rustdoc/deref-recursive-pathbuf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // #26207: Show all methods reachable via Deref impls, recursing through multiple dereferencing\n // levels and across multiple crates.\n "}, {"sha": "b96b5397ad78b45189bb919ea5cf71600112c5f5", "filename": "src/test/rustdoc/deref-recursive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // #26207: Show all methods reachable via Deref impls, recursing through multiple dereferencing\n // levels if needed.\n "}, {"sha": "47009559e6f7447e1c05321c78726fda2ec0d27d", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n \n // @has 'foo/struct.Bar.html'"}, {"sha": "546af2c121adbc4dc60dbc07de1c6212545f9f44", "filename": "src/test/rustdoc/double-quote-escape.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n pub trait Foo<T> {\n     fn foo() {}"}, {"sha": "cec504ea1517a2c523e818228476ca9a5dcc125b", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n #![feature(doc_cfg)]\n "}, {"sha": "3959aeb6cfb7f8e17b3e482210420d5990458c48", "filename": "src/test/rustdoc/fn-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Ffn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Ffn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffn-type.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "34a7eae31c79062fde794a43e560dc7e72d8375d", "filename": "src/test/rustdoc/for-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "a2adc0e63c9c01560e4e1ba970ae7a3401030d35", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n // aux-build:impl_trait_aux.rs\n // edition:2018\n-// ignore-tidy-linelength\n \n extern crate impl_trait_aux;\n "}, {"sha": "28dc7073a3eccc26be1e0f764b39883c811a76f7", "filename": "src/test/rustdoc/intra-doc/associated-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-defaults.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(intra_doc_link_resolution_failure)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "43a43a79738b3cbbfbe0fcd230d4cd8cf8fb0a65", "filename": "src/test/rustdoc/intra-doc/associated-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(intra_doc_link_resolution_failure)]\n \n /// [`std::collections::BTreeMap::into_iter`]"}, {"sha": "62659ce689a7145ded8ff74124ad93917a37017c", "filename": "src/test/rustdoc/intra-doc/cross-crate/macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmacro.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // aux-build:macro_inner.rs\n // aux-build:proc_macro.rs\n // build-aux-docs"}, {"sha": "68f5cb3a092e4a93ed4c683fdacf913268552c6f", "filename": "src/test/rustdoc/intra-doc/cross-crate/traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Ftraits.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n // aux-build:traits.rs\n // build-aux-docs\n-// ignore-tidy-line-length\n #![deny(broken_intra_doc_links)]\n \n extern crate inner;"}, {"sha": "12c3cee29c3acd93c921438bc50134f6778e91cd", "filename": "src/test/rustdoc/intra-doc/disambiguators-removed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fdisambiguators-removed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fdisambiguators-removed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fdisambiguators-removed.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(intra_doc_link_resolution_failure)]\n // first try backticks\n /// Trait: [`trait@Name`], fn: [`fn@Name`], [`Name`][`macro@Name`]"}, {"sha": "c407eb80da225aed5eb1895a02d5fc33eb387b26", "filename": "src/test/rustdoc/intra-doc/email-address.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,6 @@\n+//! Email me at <hello@example.com>.\n+//! Email me at <hello-world@example.com>.\n+//! Email me at <hello@localhost> (this warns but will still become a link).\n+// @has email_address/index.html '//a[@href=\"mailto:hello@example.com\"]' 'hello@example.com'\n+// @has email_address/index.html '//a[@href=\"mailto:hello-world@example.com\"]' 'hello-world@example.com'\n+// @has email_address/index.html '//a[@href=\"mailto:hello@localhost\"]' 'hello@localhost'"}, {"sha": "ee71537d155319bfe8b3615a9017e0263ed5ea73", "filename": "src/test/rustdoc/intra-doc/non-path-primitives.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![crate_name = \"foo\"]\n #![feature(intra_doc_pointers)]\n #![deny(rustdoc::broken_intra_doc_links)]"}, {"sha": "4099ececfaf7ccff3d4a308dcd8493947a27ade8", "filename": "src/test/rustdoc/intra-doc/prim-assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(broken_intra_doc_links)]\n \n //! [i32::MAX]"}, {"sha": "695a7fbfb534812c257a6d6d1d4e81e98c8b6a2e", "filename": "src/test/rustdoc/intra-doc/prim-methods-external-core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -2,7 +2,6 @@\n // build-aux-docs\n // ignore-cross-compile\n // ignore-windows\n-// ignore-tidy-linelength\n \n #![deny(broken_intra_doc_links)]\n #![feature(no_core, lang_items)]"}, {"sha": "f0b939a468c0339f3ef351c0824d4e6eaf5dc1e5", "filename": "src/test/rustdoc/intra-doc/prim-methods-local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -3,7 +3,6 @@\n #![no_core]\n #![crate_type = \"rlib\"]\n \n-// ignore-tidy-linelength\n \n // @has prim_methods_local/index.html\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'"}, {"sha": "6de15e76d15cfa6ce610d4da5d6586886e4c0c67", "filename": "src/test/rustdoc/intra-doc/prim-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![deny(broken_intra_doc_links)]\n \n-// ignore-tidy-linelength\n \n // @has prim_methods/index.html\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'"}, {"sha": "ab6e3da17f4ed4db0b96801bdbc4c232a24846d1", "filename": "src/test/rustdoc/intra-doc/prim-precedence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(broken_intra_doc_links)]\n \n pub mod char {"}, {"sha": "cf83ead4db72c09172343575f98b2a41492c595b", "filename": "src/test/rustdoc/intra-doc/primitive-non-default-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![deny(broken_intra_doc_links)]\n \n-// ignore-tidy-linelength\n \n // @has primitive_non_default_impl/fn.str_methods.html\n /// [`str::trim`]"}, {"sha": "b2b75127b3122b3161b46ca3c48ee046580c47bc", "filename": "src/test/rustdoc/intra-doc/self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n // @has foo/index.html '//a/@href' '../foo/struct.Foo.html#method.new'\n // @has foo/struct.Foo.html '//a/@href' '../foo/struct.Foo.html#method.new'"}, {"sha": "ef1987a829ad20ed4ac57476c203d44d8b655205", "filename": "src/test/rustdoc/intra-doc/trait-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-impl.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n pub struct MyStruct;\n "}, {"sha": "affd2aaec2d2218de073a00af359bf30d248f8d9", "filename": "src/test/rustdoc/intra-doc/trait-item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(broken_intra_doc_links)]\n \n /// Link to [S::assoc_fn()]"}, {"sha": "db637ece369951770d12063d679713023ecd98ee", "filename": "src/test/rustdoc/intra-doc/true-false.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,7 +1,6 @@\n #![deny(broken_intra_doc_links)]\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n // @has foo/index.html\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'true'"}, {"sha": "19bab394dcf20dc9a991fe9463e979690a08c1c4", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::fmt;\n \n // @has issue_29503/trait.MyTrait.html"}, {"sha": "4aa553f7793396d769862da26af1f132492c3a9c", "filename": "src/test/rustdoc/issue-55364.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fissue-55364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fissue-55364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55364.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // First a module with inner documentation\n \n // @has issue_55364/subone/index.html"}, {"sha": "aebffeff5f05e5a0c8f1c5225741c721d5e50f41", "filename": "src/test/rustdoc/issue-75588.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-75588.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // aux-build:realcore.rs\n // aux-build:real_gimli.rs\n "}, {"sha": "69c89626539319edb39ab24a482171ed24b8ffca", "filename": "src/test/rustdoc/playground-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-arg.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: --playground-url=https://example.com/ -Z unstable-options\n-// ignore-tidy-linelength\n \n #![crate_name = \"foo\"]\n "}, {"sha": "877ea1cfba15a83cfdd6a1b2fc8c09d087547f45", "filename": "src/test/rustdoc/playground.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fplayground.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fplayground.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n \n #![doc(html_playground_url = \"https://www.example.com/\")]"}, {"sha": "dd455e45bfc2a5556352c56849c3cbd6cba3399f", "filename": "src/test/rustdoc/primitive-link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fprimitive-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fprimitive-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-link.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n // @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\"]' 'u32'\n // @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\"]' 'i64'"}, {"sha": "3ecf434c39e45a88ffe719fdb947b6d51560694f", "filename": "src/test/rustdoc/raw-ident-eliminate-r-hashtag.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fraw-ident-eliminate-r-hashtag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fraw-ident-eliminate-r-hashtag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fraw-ident-eliminate-r-hashtag.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_type=\"lib\"]\n \n pub mod internal {"}, {"sha": "5319892c99c23cecef010ad04071b491da374e32", "filename": "src/test/rustdoc/smart-punct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsmart-punct.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n \n //! This is the \"start\" of the 'document'! How'd you know that \"it's\" the start?"}, {"sha": "8012e442213b87bfb2a3bf1437fc778b92554198", "filename": "src/test/rustdoc/src-links-external.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,7 +1,6 @@\n // aux-build:src-links-external.rs\n // build-aux-docs\n // ignore-cross-compile\n-// ignore-tidy-linelength\n \n #![crate_name = \"foo\"]\n "}, {"sha": "3c0369e3d3413e221f775561555dd3e37b9d2c28", "filename": "src/test/rustdoc/struct-arg-pattern.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fstruct-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fstruct-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstruct-arg-pattern.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -0,0 +1,10 @@\n+#![crate_name = \"foo\"]\n+\n+struct BodyId {\n+    hir_id: usize,\n+}\n+\n+// @has 'foo/fn.body_owner.html' '//*[@class=\"rust fn\"]' 'pub fn body_owner(_: BodyId)'\n+pub fn body_owner(BodyId { hir_id }: BodyId) {\n+    // ...\n+}"}, {"sha": "974b863bb160446cd59f7d6ea3f34984d1f70a8a", "filename": "src/test/rustdoc/struct-field.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstruct-field.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n // @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/struct.Foo.html#structfield.bar\"]' 'Foo::bar'\n // @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/union.Bar.html#structfield.foo\"]' 'Bar::foo'"}, {"sha": "2a103509ae1933e9f4cb303e38070cee731d2bc8", "filename": "src/test/rustdoc/trait-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// ignore-tidy-linelength\n \n pub trait Foo {\n     // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//span[@class=\"docblock attributes\"]' '#[must_use]'"}, {"sha": "da302b248760fa18031eb1c1fedf5a4478526d43", "filename": "src/test/ui/asm/bad-reg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -37,6 +37,8 @@ fn main() {\n         //~^ ERROR invalid register `mm0`: MMX registers are not currently supported as operands\n         asm!(\"\", in(\"k0\") foo);\n         //~^ ERROR invalid register `k0`: the k0 AVX mask register cannot be used as an operand\n+        asm!(\"\", in(\"ah\") foo);\n+        //~^ ERROR invalid register `ah`: high byte registers cannot be used as an operand\n \n         // Explicit register conflicts\n         // (except in/lateout which don't conflict)"}, {"sha": "2bfb4854c344220f81ce12a78abe4fe2764cc6ca", "filename": "src/test/ui/asm/bad-reg.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -94,49 +94,55 @@ error: invalid register `k0`: the k0 AVX mask register cannot be used as an oper\n LL |         asm!(\"\", in(\"k0\") foo);\n    |                  ^^^^^^^^^^^^\n \n+error: invalid register `ah`: high byte registers cannot be used as an operand on x86_64\n+  --> $DIR/bad-reg.rs:40:18\n+   |\n+LL |         asm!(\"\", in(\"ah\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n error: register `al` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:44:33\n+  --> $DIR/bad-reg.rs:46:33\n    |\n LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n    |                  -------------  ^^^^^^^^^^^^ register `al`\n    |                  |\n    |                  register `ax`\n \n error: register `ax` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:46:33\n+  --> $DIR/bad-reg.rs:48:33\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n    |                  |\n    |                  register `ax`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:46:18\n+  --> $DIR/bad-reg.rs:48:18\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  ^^^^^^^^^^^^^\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:49:34\n+  --> $DIR/bad-reg.rs:51:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:51:34\n+  --> $DIR/bad-reg.rs:53:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:51:18\n+  --> $DIR/bad-reg.rs:53:18\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  ^^^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "48de593342fa6ca2546c48ec0e39425dd2fd6c48", "filename": "src/test/ui/associated-type-bounds/ambiguous-associated-type2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait Foo {\n     type Item;\n }"}, {"sha": "e72ef0e4b332ea2cea0e4d881ea93dab4f95f0f8", "filename": "src/test/ui/associated-type-bounds/ambiguous-associated-type2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,12 +1,12 @@\n error[E0391]: cycle detected when computing the super traits of `Baz` with associated type name `Item`\n-  --> $DIR/ambiguous-associated-type2.rs:9:1\n+  --> $DIR/ambiguous-associated-type2.rs:7:1\n    |\n LL | trait Baz: Foo + Bar<Self::Item> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires computing the super traits of `Baz` with associated type name `Item`, completing the cycle\n note: cycle used when computing the super traits of `Baz`\n-  --> $DIR/ambiguous-associated-type2.rs:9:1\n+  --> $DIR/ambiguous-associated-type2.rs:7:1\n    |\n LL | trait Baz: Foo + Bar<Self::Item> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bd3cac1f887bf10748b0c458dda40156098e87d8", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:6:32\n+  --> $DIR/duplicate.rs:4:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,559 +8,559 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:8:12\n+  --> $DIR/duplicate.rs:6:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:11:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:36\n+  --> $DIR/duplicate.rs:13:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:39\n+  --> $DIR/duplicate.rs:15:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:17:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:45\n+  --> $DIR/duplicate.rs:19:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:48\n+  --> $DIR/duplicate.rs:21:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:24:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:34\n+  --> $DIR/duplicate.rs:26:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:37\n+  --> $DIR/duplicate.rs:28:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:30:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:43\n+  --> $DIR/duplicate.rs:32:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:46\n+  --> $DIR/duplicate.rs:34:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:37:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:35\n+  --> $DIR/duplicate.rs:39:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:38\n+  --> $DIR/duplicate.rs:41:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:43:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:44\n+  --> $DIR/duplicate.rs:45:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:47\n+  --> $DIR/duplicate.rs:47:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:50:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:32\n+  --> $DIR/duplicate.rs:52:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:35\n+  --> $DIR/duplicate.rs:54:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:56:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:43\n+  --> $DIR/duplicate.rs:58:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:62:46\n+  --> $DIR/duplicate.rs:60:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:66:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:40\n+  --> $DIR/duplicate.rs:68:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:43\n+  --> $DIR/duplicate.rs:70:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:39\n+  --> $DIR/duplicate.rs:73:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:39\n+  --> $DIR/duplicate.rs:75:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:42\n+  --> $DIR/duplicate.rs:77:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:40\n+  --> $DIR/duplicate.rs:79:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:40\n+  --> $DIR/duplicate.rs:81:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:43\n+  --> $DIR/duplicate.rs:83:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n+  --> $DIR/duplicate.rs:86:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:46\n+  --> $DIR/duplicate.rs:88:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:49\n+  --> $DIR/duplicate.rs:90:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:93:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:35\n+  --> $DIR/duplicate.rs:95:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:38\n+  --> $DIR/duplicate.rs:97:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:99:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:44\n+  --> $DIR/duplicate.rs:101:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:47\n+  --> $DIR/duplicate.rs:103:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:106:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:39\n+  --> $DIR/duplicate.rs:110:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:40\n+  --> $DIR/duplicate.rs:112:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:40\n+  --> $DIR/duplicate.rs:114:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:118:43\n+  --> $DIR/duplicate.rs:116:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:121:36\n+  --> $DIR/duplicate.rs:119:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:36\n+  --> $DIR/duplicate.rs:121:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:39\n+  --> $DIR/duplicate.rs:123:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:34\n+  --> $DIR/duplicate.rs:125:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:34\n+  --> $DIR/duplicate.rs:127:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:37\n+  --> $DIR/duplicate.rs:129:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:45\n+  --> $DIR/duplicate.rs:131:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:45\n+  --> $DIR/duplicate.rs:133:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:48\n+  --> $DIR/duplicate.rs:135:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:46\n+  --> $DIR/duplicate.rs:137:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:46\n+  --> $DIR/duplicate.rs:137:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:46\n+  --> $DIR/duplicate.rs:140:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:46\n+  --> $DIR/duplicate.rs:140:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:49\n+  --> $DIR/duplicate.rs:143:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:49\n+  --> $DIR/duplicate.rs:143:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:40\n+  --> $DIR/duplicate.rs:153:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:44\n+  --> $DIR/duplicate.rs:155:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:159:43\n+  --> $DIR/duplicate.rs:157:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:43\n+  --> $DIR/duplicate.rs:146:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:43\n+  --> $DIR/duplicate.rs:148:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:46\n+  --> $DIR/duplicate.rs:150:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here"}, {"sha": "500e527a0188afcfb3911bbaa4d97f27e8ec53f9", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:8:12\n+  --> $DIR/duplicate.rs:6:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,551 +8,551 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:11:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:36\n+  --> $DIR/duplicate.rs:13:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:39\n+  --> $DIR/duplicate.rs:15:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:17:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:45\n+  --> $DIR/duplicate.rs:19:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:48\n+  --> $DIR/duplicate.rs:21:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:24:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:34\n+  --> $DIR/duplicate.rs:26:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:37\n+  --> $DIR/duplicate.rs:28:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:30:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:43\n+  --> $DIR/duplicate.rs:32:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:46\n+  --> $DIR/duplicate.rs:34:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:37:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:35\n+  --> $DIR/duplicate.rs:39:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:38\n+  --> $DIR/duplicate.rs:41:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:43:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:44\n+  --> $DIR/duplicate.rs:45:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:47\n+  --> $DIR/duplicate.rs:47:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:50:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:32\n+  --> $DIR/duplicate.rs:52:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:35\n+  --> $DIR/duplicate.rs:54:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:56:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:43\n+  --> $DIR/duplicate.rs:58:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:62:46\n+  --> $DIR/duplicate.rs:60:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:66:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:40\n+  --> $DIR/duplicate.rs:68:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:43\n+  --> $DIR/duplicate.rs:70:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:39\n+  --> $DIR/duplicate.rs:73:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:39\n+  --> $DIR/duplicate.rs:75:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:42\n+  --> $DIR/duplicate.rs:77:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:40\n+  --> $DIR/duplicate.rs:79:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:40\n+  --> $DIR/duplicate.rs:81:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:43\n+  --> $DIR/duplicate.rs:83:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n+  --> $DIR/duplicate.rs:86:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:46\n+  --> $DIR/duplicate.rs:88:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:49\n+  --> $DIR/duplicate.rs:90:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:93:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:35\n+  --> $DIR/duplicate.rs:95:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:38\n+  --> $DIR/duplicate.rs:97:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:99:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:44\n+  --> $DIR/duplicate.rs:101:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:47\n+  --> $DIR/duplicate.rs:103:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:106:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:39\n+  --> $DIR/duplicate.rs:110:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:40\n+  --> $DIR/duplicate.rs:112:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:40\n+  --> $DIR/duplicate.rs:114:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:118:43\n+  --> $DIR/duplicate.rs:116:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:121:36\n+  --> $DIR/duplicate.rs:119:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:36\n+  --> $DIR/duplicate.rs:121:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:39\n+  --> $DIR/duplicate.rs:123:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:34\n+  --> $DIR/duplicate.rs:125:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:34\n+  --> $DIR/duplicate.rs:127:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:37\n+  --> $DIR/duplicate.rs:129:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:45\n+  --> $DIR/duplicate.rs:131:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:45\n+  --> $DIR/duplicate.rs:133:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:48\n+  --> $DIR/duplicate.rs:135:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:46\n+  --> $DIR/duplicate.rs:137:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:46\n+  --> $DIR/duplicate.rs:137:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:46\n+  --> $DIR/duplicate.rs:140:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:46\n+  --> $DIR/duplicate.rs:140:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:49\n+  --> $DIR/duplicate.rs:143:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:49\n+  --> $DIR/duplicate.rs:143:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:40\n+  --> $DIR/duplicate.rs:153:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:44\n+  --> $DIR/duplicate.rs:155:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:159:43\n+  --> $DIR/duplicate.rs:157:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:43\n+  --> $DIR/duplicate.rs:146:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:43\n+  --> $DIR/duplicate.rs:148:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:46\n+  --> $DIR/duplicate.rs:150:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here"}, {"sha": "c3319a7050d5d0d20f3d01ae712c71315900bfd7", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(associated_type_bounds)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]"}, {"sha": "43429ba2329f9af49d71acace07658fb5471ccf0", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // edition:2018\n \n // This test checks that `Self` is prohibited as a return type. See #61949 for context."}, {"sha": "52b726e186e3adec4a9431ebdcdc1fd916b95065", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b08b4848c3653818b47fa8cc0a613455c8b4d255/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=b08b4848c3653818b47fa8cc0a613455c8b4d255", "patch": "@@ -1,5 +1,5 @@\n error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-61949-self-return-type.rs:11:40\n+  --> $DIR/issue-61949-self-return-type.rs:10:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n    |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`"}]}