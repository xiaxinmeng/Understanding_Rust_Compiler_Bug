{"sha": "9cbae7dfe568608e49dc4575ca6c122b7510d233", "node_id": "C_kwDOAAsO6NoAKDljYmFlN2RmZTU2ODYwOGU0OWRjNDU3NWNhNmMxMjJiNzUxMGQyMzM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-09-22T00:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-22T00:03:54Z"}, "message": "Rollup merge of #102054 - GuillaumeGomez:sidebar-all-page, r=notriddle\n\nUnify \"all items\" page's sidebar with other pages\n\nCurrently, the \"all types\" page's sidebar doesn't list the different categories of type available. This PR fixes it.\n\nBefore:\n\n![Screenshot from 2022-09-20 17-11-15](https://user-images.githubusercontent.com/3050060/191296348-95d8771d-a887-432e-96bd-d5284d87d743.png)\n\nAfter:\n\n![Screenshot from 2022-09-20 17-11-09](https://user-images.githubusercontent.com/3050060/191296344-8e7318a3-eb51-4037-ae94-7ae2115363ce.png)\n\nr? `@notriddle`", "tree": {"sha": "9780eea24d7d6a6fd09351c498b2cbe26db7d7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9780eea24d7d6a6fd09351c498b2cbe26db7d7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cbae7dfe568608e49dc4575ca6c122b7510d233", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjK6ZqCRBK7hj4Ov3rIwAAq14IAJNX2MYEWnNWBVd5JMi7QYlv\n9AvXNQGKF+u+b6gfK8df8pVbd9L5wy9r3qg3L9vOL8OaCDQEZft2vhZEck5hnkKQ\nOYcXgrYEu/zZzATxjbsWnRCNaUckW0jPtEmZ7NfyQ2/7wSt9Oq5+10nMAv242NGy\n9iZO7lelkWxC1ESTQND/kVonT2gZKBtr6VqNGAvhbUE32TjIQJdnvD/MtA/+Voxe\nrRzKWVhHlni+eCff76QTqXpqmPP4nueoqmh0+w1dPVsC3RuPOOM8H3oNQQ4Tt+FF\nO5MSBrly1z5gmirVcgkwrbtMN9JSKv6cGFd8phSAi8LiIOnJgskAXIezB8OBRA8=\n=mBkT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9780eea24d7d6a6fd09351c498b2cbe26db7d7de\nparent d8dc60ac8a666e8995de61b690585b292ea103a7\nparent 27a420f251d8efe5674176cda77032a859eddfb5\nauthor Yuki Okushi <jtitor@2k36.org> 1663805034 +0900\ncommitter GitHub <noreply@github.com> 1663805034 +0900\n\nRollup merge of #102054 - GuillaumeGomez:sidebar-all-page, r=notriddle\n\nUnify \"all items\" page's sidebar with other pages\n\nCurrently, the \"all types\" page's sidebar doesn't list the different categories of type available. This PR fixes it.\n\nBefore:\n\n![Screenshot from 2022-09-20 17-11-15](https://user-images.githubusercontent.com/3050060/191296348-95d8771d-a887-432e-96bd-d5284d87d743.png)\n\nAfter:\n\n![Screenshot from 2022-09-20 17-11-09](https://user-images.githubusercontent.com/3050060/191296344-8e7318a3-eb51-4037-ae94-7ae2115363ce.png)\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbae7dfe568608e49dc4575ca6c122b7510d233", "html_url": "https://github.com/rust-lang/rust/commit/9cbae7dfe568608e49dc4575ca6c122b7510d233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cbae7dfe568608e49dc4575ca6c122b7510d233/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8dc60ac8a666e8995de61b690585b292ea103a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8dc60ac8a666e8995de61b690585b292ea103a7", "html_url": "https://github.com/rust-lang/rust/commit/d8dc60ac8a666e8995de61b690585b292ea103a7"}, {"sha": "27a420f251d8efe5674176cda77032a859eddfb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a420f251d8efe5674176cda77032a859eddfb5", "html_url": "https://github.com/rust-lang/rust/commit/27a420f251d8efe5674176cda77032a859eddfb5"}], "stats": {"total": 183, "additions": 139, "deletions": 44}, "files": [{"sha": "22a6fcd316aa0535f922f162c155252835902b71", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cbae7dfe568608e49dc4575ca6c122b7510d233/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cbae7dfe568608e49dc4575ca6c122b7510d233/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=9cbae7dfe568608e49dc4575ca6c122b7510d233", "patch": "@@ -17,8 +17,8 @@ use super::print_item::{full_path, item_path, print_item};\n use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, scrape_examples_help, AllTypes, LinkFromSrc, NameDoc,\n-    StylePath, BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, scrape_examples_help, sidebar_module_like, AllTypes,\n+    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -597,16 +597,24 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &shared.resource_suffix,\n         };\n-        let sidebar = if shared.cache.crate_version.is_some() {\n-            format!(\"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n-        } else {\n-            String::new()\n-        };\n         let all = shared.all.replace(AllTypes::new());\n+        let mut sidebar = Buffer::html();\n+        if shared.cache.crate_version.is_some() {\n+            write!(sidebar, \"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n+        };\n+\n+        let mut items = Buffer::html();\n+        sidebar_module_like(&mut items, all.item_sections());\n+        if !items.is_empty() {\n+            sidebar.push_str(\"<div class=\\\"sidebar-elems\\\">\");\n+            sidebar.push_buffer(items);\n+            sidebar.push_str(\"</div>\");\n+        }\n+\n         let v = layout::render(\n             &shared.layout,\n             &page,\n-            sidebar,\n+            sidebar.into_inner(),\n             |buf: &mut Buffer| all.print(buf),\n             &shared.style_files,\n         );"}, {"sha": "7e5e4df43d2918972013d4a2d35346b42053861c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 88, "deletions": 36, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/9cbae7dfe568608e49dc4575ca6c122b7510d233/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cbae7dfe568608e49dc4575ca6c122b7510d233/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9cbae7dfe568608e49dc4575ca6c122b7510d233", "patch": "@@ -290,19 +290,66 @@ impl AllTypes {\n             };\n         }\n     }\n-}\n \n-impl AllTypes {\n+    fn item_sections(&self) -> FxHashSet<ItemSection> {\n+        let mut sections = FxHashSet::default();\n+\n+        if !self.structs.is_empty() {\n+            sections.insert(ItemSection::Structs);\n+        }\n+        if !self.enums.is_empty() {\n+            sections.insert(ItemSection::Enums);\n+        }\n+        if !self.unions.is_empty() {\n+            sections.insert(ItemSection::Unions);\n+        }\n+        if !self.primitives.is_empty() {\n+            sections.insert(ItemSection::PrimitiveTypes);\n+        }\n+        if !self.traits.is_empty() {\n+            sections.insert(ItemSection::Traits);\n+        }\n+        if !self.macros.is_empty() {\n+            sections.insert(ItemSection::Macros);\n+        }\n+        if !self.functions.is_empty() {\n+            sections.insert(ItemSection::Functions);\n+        }\n+        if !self.typedefs.is_empty() {\n+            sections.insert(ItemSection::TypeDefinitions);\n+        }\n+        if !self.opaque_tys.is_empty() {\n+            sections.insert(ItemSection::OpaqueTypes);\n+        }\n+        if !self.statics.is_empty() {\n+            sections.insert(ItemSection::Statics);\n+        }\n+        if !self.constants.is_empty() {\n+            sections.insert(ItemSection::Constants);\n+        }\n+        if !self.attributes.is_empty() {\n+            sections.insert(ItemSection::AttributeMacros);\n+        }\n+        if !self.derives.is_empty() {\n+            sections.insert(ItemSection::DeriveMacros);\n+        }\n+        if !self.trait_aliases.is_empty() {\n+            sections.insert(ItemSection::TraitAliases);\n+        }\n+\n+        sections\n+    }\n+\n     fn print(self, f: &mut Buffer) {\n-        fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str) {\n+        fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, kind: ItemSection) {\n             if !e.is_empty() {\n                 let mut e: Vec<&ItemEntry> = e.iter().collect();\n                 e.sort();\n                 write!(\n                     f,\n-                    \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"all-items\\\">\",\n-                    title.replace(' ', \"-\"), // IDs cannot contain whitespaces.\n-                    title\n+                    \"<h3 id=\\\"{id}\\\">{title}</h3><ul class=\\\"all-items\\\">\",\n+                    id = kind.id(),\n+                    title = kind.name(),\n                 );\n \n                 for s in e.iter() {\n@@ -320,20 +367,20 @@ impl AllTypes {\n         );\n         // Note: print_entries does not escape the title, because we know the current set of titles\n         // doesn't require escaping.\n-        print_entries(f, &self.structs, \"Structs\");\n-        print_entries(f, &self.enums, \"Enums\");\n-        print_entries(f, &self.unions, \"Unions\");\n-        print_entries(f, &self.primitives, \"Primitives\");\n-        print_entries(f, &self.traits, \"Traits\");\n-        print_entries(f, &self.macros, \"Macros\");\n-        print_entries(f, &self.attributes, \"Attribute Macros\");\n-        print_entries(f, &self.derives, \"Derive Macros\");\n-        print_entries(f, &self.functions, \"Functions\");\n-        print_entries(f, &self.typedefs, \"Typedefs\");\n-        print_entries(f, &self.trait_aliases, \"Trait Aliases\");\n-        print_entries(f, &self.opaque_tys, \"Opaque Types\");\n-        print_entries(f, &self.statics, \"Statics\");\n-        print_entries(f, &self.constants, \"Constants\");\n+        print_entries(f, &self.structs, ItemSection::Structs);\n+        print_entries(f, &self.enums, ItemSection::Enums);\n+        print_entries(f, &self.unions, ItemSection::Unions);\n+        print_entries(f, &self.primitives, ItemSection::PrimitiveTypes);\n+        print_entries(f, &self.traits, ItemSection::Traits);\n+        print_entries(f, &self.macros, ItemSection::Macros);\n+        print_entries(f, &self.attributes, ItemSection::AttributeMacros);\n+        print_entries(f, &self.derives, ItemSection::DeriveMacros);\n+        print_entries(f, &self.functions, ItemSection::Functions);\n+        print_entries(f, &self.typedefs, ItemSection::TypeDefinitions);\n+        print_entries(f, &self.trait_aliases, ItemSection::TraitAliases);\n+        print_entries(f, &self.opaque_tys, ItemSection::OpaqueTypes);\n+        print_entries(f, &self.statics, ItemSection::Statics);\n+        print_entries(f, &self.constants, ItemSection::Constants);\n     }\n }\n \n@@ -2468,7 +2515,7 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-enum ItemSection {\n+pub(crate) enum ItemSection {\n     Reexports,\n     PrimitiveTypes,\n     Modules,\n@@ -2620,25 +2667,11 @@ fn item_ty_to_section(ty: ItemType) -> ItemSection {\n     }\n }\n \n-fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+pub(crate) fn sidebar_module_like(buf: &mut Buffer, item_sections_in_use: FxHashSet<ItemSection>) {\n     use std::fmt::Write as _;\n \n     let mut sidebar = String::new();\n \n-    let item_sections_in_use: FxHashSet<_> = items\n-        .iter()\n-        .filter(|it| {\n-            !it.is_stripped()\n-                && it\n-                    .name\n-                    .or_else(|| {\n-                        if let clean::ImportItem(ref i) = *it.kind &&\n-                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n-                    })\n-                    .is_some()\n-        })\n-        .map(|it| item_ty_to_section(it.type_()))\n-        .collect();\n     for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n         let _ = write!(sidebar, \"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name());\n     }\n@@ -2656,6 +2689,25 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n }\n \n+fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+    let item_sections_in_use: FxHashSet<_> = items\n+        .iter()\n+        .filter(|it| {\n+            !it.is_stripped()\n+                && it\n+                    .name\n+                    .or_else(|| {\n+                        if let clean::ImportItem(ref i) = *it.kind &&\n+                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n+                    })\n+                    .is_some()\n+        })\n+        .map(|it| item_ty_to_section(it.type_()))\n+        .collect();\n+\n+    sidebar_module_like(buf, item_sections_in_use);\n+}\n+\n fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     let mut sidebar = Buffer::new();\n     sidebar_assoc_items(cx, &mut sidebar, it);"}, {"sha": "e74b981de6444fd8746bae6a3d93909b141850ef", "filename": "src/test/rustdoc/sidebar-all-page.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9cbae7dfe568608e49dc4575ca6c122b7510d233/src%2Ftest%2Frustdoc%2Fsidebar-all-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cbae7dfe568608e49dc4575ca6c122b7510d233/src%2Ftest%2Frustdoc%2Fsidebar-all-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-all-page.rs?ref=9cbae7dfe568608e49dc4575ca6c122b7510d233", "patch": "@@ -0,0 +1,35 @@\n+#![crate_name = \"foo\"]\n+\n+#![feature(rustdoc_internals)]\n+\n+// @has 'foo/all.html'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Structs'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Enums'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Unions'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Functions'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Traits'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Macros'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Type Definitions'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Constants'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Statics'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Primitive Types'\n+\n+pub struct Foo;\n+pub enum Enum {\n+    A,\n+}\n+pub union Bar {\n+    a: u8,\n+    b: u16,\n+}\n+pub fn foo() {}\n+pub trait Trait {}\n+#[macro_export]\n+macro_rules! foo {\n+    () => {}\n+}\n+pub type Type = u8;\n+pub const FOO: u8 = 0;\n+pub static BAR: u8 = 0;\n+#[doc(primitive = \"u8\")]\n+mod u8 {}"}]}