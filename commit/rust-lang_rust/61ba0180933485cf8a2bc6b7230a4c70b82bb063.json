{"sha": "61ba0180933485cf8a2bc6b7230a4c70b82bb063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYmEwMTgwOTMzNDg1Y2Y4YTJiYzZiNzIzMGE0YzcwYjgyYmIwNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-16T10:59:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-16T10:59:40Z"}, "message": "Auto merge of #51562 - SimonSapin:transparent, r=cramertj\n\nStabilize #[repr(transparent)]\n\nTracking issue FCP: https://github.com/rust-lang/rust/issues/43036#issuecomment-394094318\nReference PR: https://github.com/rust-lang-nursery/reference/pull/353", "tree": {"sha": "5aff6e18e3b8252bbc742272ad633866b779c912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aff6e18e3b8252bbc742272ad633866b779c912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61ba0180933485cf8a2bc6b7230a4c70b82bb063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61ba0180933485cf8a2bc6b7230a4c70b82bb063", "html_url": "https://github.com/rust-lang/rust/commit/61ba0180933485cf8a2bc6b7230a4c70b82bb063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61ba0180933485cf8a2bc6b7230a4c70b82bb063/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a385095f9a6d4d068102b6c72fbdc86ac2667e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/a385095f9a6d4d068102b6c72fbdc86ac2667e51", "html_url": "https://github.com/rust-lang/rust/commit/a385095f9a6d4d068102b6c72fbdc86ac2667e51"}, {"sha": "e2aef92c19a95d6a0b8e75b473023f77de6150f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2aef92c19a95d6a0b8e75b473023f77de6150f0", "html_url": "https://github.com/rust-lang/rust/commit/e2aef92c19a95d6a0b8e75b473023f77de6150f0"}], "stats": {"total": 246, "additions": 9, "deletions": 237}, "files": [{"sha": "62202dc96fd4620e2ce53da7df0dfc40de26978a", "filename": "src/doc/unstable-book/src/language-features/repr-transparent.md", "status": "removed", "additions": 0, "deletions": 176, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/a385095f9a6d4d068102b6c72fbdc86ac2667e51/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-transparent.md", "raw_url": "https://github.com/rust-lang/rust/raw/a385095f9a6d4d068102b6c72fbdc86ac2667e51/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-transparent.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-transparent.md?ref=a385095f9a6d4d068102b6c72fbdc86ac2667e51", "patch": "@@ -1,176 +0,0 @@\n-# `repr_transparent`\n-\n-The tracking issue for this feature is: [#43036]\n-\n-[#43036]: https://github.com/rust-lang/rust/issues/43036\n-\n-------------------------\n-\n-This feature enables the `repr(transparent)` attribute on structs, which enables\n-the use of newtypes without the usual ABI implications of wrapping the value in\n-a struct.\n-\n-## Background\n-\n-It's sometimes useful to add additional type safety by introducing *newtypes*.\n-For example, code that handles numeric quantities in different units such as\n-millimeters, centimeters, grams, kilograms, etc. may want to use the type system\n-to rule out mistakes such as adding millimeters to grams:\n-\n-```rust\n-use std::ops::Add;\n-\n-struct Millimeters(f64);\n-struct Grams(f64);\n-\n-impl Add<Millimeters> for Millimeters {\n-    type Output = Millimeters;\n-\n-    fn add(self, other: Millimeters) -> Millimeters {\n-        Millimeters(self.0 + other.0)\n-    }\n-}\n-\n-// Likewise: impl Add<Grams> for Grams {}\n-```\n-\n-Other uses of newtypes include using `PhantomData` to add lifetimes to raw\n-pointers or to implement the \"phantom types\" pattern. See the [PhantomData]\n-documentation and [the Nomicon][nomicon-phantom] for more details.\n-\n-The added type safety is especially useful when interacting with C or other\n-languages. However, in those cases we need to ensure the newtypes we add do not\n-introduce incompatibilities with the C ABI.\n-\n-## Newtypes in FFI\n-\n-Luckily, `repr(C)` newtypes are laid out just like the type they wrap on all\n-platforms which Rust currently supports, and likely on many more. For example,\n-consider this C declaration:\n-\n-```C\n-struct Object {\n-    double weight; //< in grams\n-    double height; //< in millimeters\n-    // ...\n-}\n-\n-void frobnicate(struct Object *);\n-```\n-\n-While using this C code from Rust, we could add `repr(C)` to the `Grams` and\n-`Millimeters` newtypes introduced above and use them to add some type safety\n-while staying compatible with the memory layout of `Object`:\n-\n-```rust,no_run\n-#[repr(C)]\n-struct Grams(f64);\n-\n-#[repr(C)]\n-struct Millimeters(f64);\n-\n-#[repr(C)]\n-struct Object {\n-    weight: Grams,\n-    height: Millimeters,\n-    // ...\n-}\n-\n-extern {\n-    fn frobnicate(_: *mut Object);\n-}\n-```\n-\n-This works even when adding some `PhantomData` fields, because they are\n-zero-sized and therefore don't have to affect the memory layout.\n-\n-However, there's more to the ABI than just memory layout: there's also the\n-question of how function call arguments and return values are passed. Many\n-common ABI treat a struct containing a single field differently from that field\n-itself, at least when the field is a scalar (e.g., integer or float or pointer).\n-\n-To continue the above example, suppose the C library also exposes a function\n-like this:\n-\n-```C\n-double calculate_weight(double height);\n-```\n-\n-Using our newtypes on the Rust side like this will cause an ABI mismatch on many\n-platforms:\n-\n-```rust,ignore\n-extern {\n-    fn calculate_weight(height: Millimeters) -> Grams;\n-}\n-```\n-\n-For example, on x86_64 Linux, Rust will pass the argument in an integer\n-register, while the C function expects the argument to be in a floating-point\n-register. Likewise, the C function will return the result in a floating-point\n-register while Rust will expect it in an integer register.\n-\n-Note that this problem is not specific to floats: To give another example,\n-32-bit x86 linux will pass and return `struct Foo(i32);` on the stack while\n-`i32` is placed in registers.\n-\n-## Enter `repr(transparent)`\n-\n-So while `repr(C)` happens to do the right thing with respect to memory layout,\n-it's not quite the right tool for newtypes in FFI. Instead of declaring a C\n-struct, we need to communicate to the Rust compiler that our newtype is just for\n-type safety on the Rust side. This is what `repr(transparent)` does.\n-\n-The attribute can be applied to a newtype-like structs that contains a single\n-field. It indicates that the newtype should be represented exactly like that\n-field's type, i.e., the newtype should be ignored for ABI purpopses: not only is\n-it laid out the same in memory, it is also passed identically in function calls.\n-\n-In the above example, the ABI mismatches can be prevented by making the newtypes\n-`Grams` and `Millimeters` transparent like this:\n-\n-```rust\n-#![feature(repr_transparent)]\n-\n-#[repr(transparent)]\n-struct Grams(f64);\n-\n-#[repr(transparent)]\n-struct Millimeters(f64);\n-```\n-\n-In addition to that single field, any number of zero-sized fields are permitted,\n-including but not limited to `PhantomData`:\n-\n-```rust\n-#![feature(repr_transparent)]\n-\n-use std::marker::PhantomData;\n-\n-struct Foo { /* ... */ }\n-\n-#[repr(transparent)]\n-struct FooPtrWithLifetime<'a>(*const Foo, PhantomData<&'a Foo>);\n-\n-#[repr(transparent)]\n-struct NumberWithUnit<T, U>(T, PhantomData<U>);\n-\n-struct CustomZst;\n-\n-#[repr(transparent)]\n-struct PtrWithCustomZst<'a> {\n-    ptr: FooPtrWithLifetime<'a>,\n-    some_marker: CustomZst,\n-}\n-```\n-\n-Transparent structs can be nested: `PtrWithCustomZst` is also represented\n-exactly like `*const Foo`.\n-\n-Because `repr(transparent)` delegates all representation concerns to another\n-type, it is incompatible with all other `repr(..)` attributes. It also cannot be\n-applied to enums, unions, empty structs, structs whose fields are all\n-zero-sized, or structs with *multiple* non-zero-sized fields.\n-\n-[PhantomData]: https://doc.rust-lang.org/std/marker/struct.PhantomData.html\n-[nomicon-phantom]: https://doc.rust-lang.org/nomicon/phantom-data.html"}, {"sha": "e25742a4a61eb5f709c4d56bfabe7ccaa3cf7366", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -105,7 +105,7 @@\n #![feature(pin)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n-#![feature(repr_transparent)]\n+#![cfg_attr(stage0, feature(repr_transparent))]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n #![feature(staged_api)]"}, {"sha": "40caee855410e40596084fa224a052104910186f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -100,7 +100,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n-#![feature(repr_transparent)]\n+#![cfg_attr(stage0, feature(repr_transparent))]\n #![feature(rustc_attrs)]\n #![feature(rustc_const_unstable)]\n #![feature(simd_ffi)]"}, {"sha": "1435957a5c1426f726beba2be389c6499a361010", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -1958,8 +1958,6 @@ representation hints.\n Erroneous code example:\n \n ```compile_fail,E0692\n-#![feature(repr_transparent)]\n-\n #[repr(transparent, C)] // error: incompatible representation hints\n struct Grams(f32);\n ```\n@@ -1969,17 +1967,13 @@ another type, so adding more representation hints is contradictory. Remove\n either the `transparent` hint or the other hints, like this:\n \n ```\n-#![feature(repr_transparent)]\n-\n #[repr(transparent)]\n struct Grams(f32);\n ```\n \n Alternatively, move the other attributes to the contained type:\n \n ```\n-#![feature(repr_transparent)]\n-\n #[repr(C)]\n struct Foo {\n     x: i32,\n@@ -1994,8 +1988,6 @@ Note that introducing another `struct` just to have a place for the other\n attributes may have unintended side effects on the representation:\n \n ```\n-#![feature(repr_transparent)]\n-\n #[repr(transparent)]\n struct Grams(f32);\n "}, {"sha": "da54eeabdb97be3727f73dc4df57c24731b5c5b8", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -4581,8 +4581,6 @@ on fields that were not guaranteed to be zero-sized.\n Erroneous code example:\n \n ```compile_fail,E0690\n-#![feature(repr_transparent)]\n-\n #[repr(transparent)]\n struct LengthWithUnit<U> { // error: transparent struct needs exactly one\n     value: f32,            //        non-zero-sized field, but has 2\n@@ -4602,8 +4600,6 @@ To combine `repr(transparent)` with type parameters, `PhantomData` may be\n useful:\n \n ```\n-#![feature(repr_transparent)]\n-\n use std::marker::PhantomData;\n \n #[repr(transparent)]\n@@ -4621,7 +4617,7 @@ field that requires non-trivial alignment.\n Erroneous code example:\n \n ```compile_fail,E0691\n-#![feature(repr_transparent, repr_align, attr_literals)]\n+#![feature(repr_align, attr_literals)]\n \n #[repr(align(32))]\n struct ForceAlign32;\n@@ -4640,8 +4636,6 @@ requirement.\n Consider removing the over-aligned zero-sized field:\n \n ```\n-#![feature(repr_transparent)]\n-\n #[repr(transparent)]\n struct Wrapper(f32);\n ```\n@@ -4650,7 +4644,7 @@ Alternatively, `PhantomData<T>` has alignment 1 for all `T`, so you can use it\n if you need to keep the field for some reason:\n \n ```\n-#![feature(repr_transparent, repr_align, attr_literals)]\n+#![feature(repr_align, attr_literals)]\n \n use std::marker::PhantomData;\n "}, {"sha": "9f370672cb2399031aa8e455ad98245a0840eb54", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -399,9 +399,6 @@ declare_features! (\n     // `extern` in paths\n     (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n-    // Allows `#[repr(transparent)]` attribute on newtype structs\n-    (active, repr_transparent, \"1.25.0\", Some(43036), None),\n-\n     // Use `?` as the Kleene \"at most one\" operator\n     (active, macro_at_most_once_rep, \"1.25.0\", Some(48075), None),\n \n@@ -615,6 +612,8 @@ declare_features! (\n     (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n     // The #[global_allocator] attribute\n     (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n+    // Allows `#[repr(transparent)]` attribute on newtype structs\n+    (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1595,11 +1594,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                             gate_feature_post!(&self, repr_simd, attr.span,\n                                                \"SIMD types are experimental and possibly buggy\");\n                         }\n-                        if item.check_name(\"transparent\") {\n-                            gate_feature_post!(&self, repr_transparent, attr.span,\n-                                               \"the `#[repr(transparent)]` attribute \\\n-                                               is experimental\");\n-                        }\n                         if let Some((name, _)) = item.name_value_literal() {\n                             if name == \"packed\" {\n                                 gate_feature_post!(&self, repr_packed, attr.span,"}, {"sha": "a1185cc1e2e73a5a8b5fe853c0066ca0f70f4dd6", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -18,7 +18,6 @@\n // See repr-transparent.rs\n \n #![crate_type=\"lib\"]\n-#![feature(repr_transparent)]\n \n \n #[repr(C)]"}, {"sha": "bc000bd316591d52bf4317ce7f834bdbf7c83b96", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -22,7 +22,6 @@\n // See repr-transparent.rs\n \n #![crate_type=\"lib\"]\n-#![feature(repr_transparent)]\n \n \n #[repr(C)]"}, {"sha": "a292f1d70f3a9d23b9c8af3e446339f58b4cf22f", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -14,7 +14,6 @@\n // See repr-transparent.rs\n \n #![crate_type=\"lib\"]\n-#![feature(repr_transparent)]\n \n \n #[repr(C)]"}, {"sha": "2e4665e22e3462065e7e9eb55e8962dab1053dbc", "filename": "src/test/codegen/repr-transparent-sysv64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -13,7 +13,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type=\"lib\"]\n-#![feature(repr_transparent)]\n \n #[repr(C)]\n pub struct Rgb8 { r: u8, g: u8, b: u8 }"}, {"sha": "64a62fd7e88a4cb2225054303e4aa36bf4310481", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type=\"lib\"]\n-#![feature(repr_transparent, repr_simd)]\n+#![feature(repr_simd)]\n \n use std::marker::PhantomData;\n "}, {"sha": "685d62dc3a9c836ca9ff97b3d997def2715dc910", "filename": "src/test/compile-fail/repr-transparent-other-items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcompile-fail%2Frepr-transparent-other-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcompile-fail%2Frepr-transparent-other-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-transparent-other-items.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_transparent)]\n-\n // See also repr-transparent.rs\n \n #[repr(transparent)] //~ ERROR unsupported representation for zero-variant enum"}, {"sha": "a391c0ae1f82ef5c29deaf083ca82c0a00a517a1", "filename": "src/test/compile-fail/repr-transparent-other-reprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcompile-fail%2Frepr-transparent-other-reprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcompile-fail%2Frepr-transparent-other-reprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-transparent-other-reprs.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_transparent, repr_align, attr_literals)]\n+#![feature(repr_align, attr_literals)]\n \n // See also repr-transparent.rs\n "}, {"sha": "4d8ec4cdb407c6ff1b17ce82901f47624563b2f1", "filename": "src/test/compile-fail/repr-transparent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcompile-fail%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fcompile-fail%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-transparent.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -14,7 +14,6 @@\n // - repr-transparent-other-items.rs\n \n #![feature(repr_align, attr_literals)]\n-#![feature(repr_transparent)]\n \n use std::marker::PhantomData;\n "}, {"sha": "deadf2e535d05a84cbc637421b595d72a731e4fc", "filename": "src/test/ui/feature-gate-repr_transparent.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a385095f9a6d4d068102b6c72fbdc86ac2667e51/src%2Ftest%2Fui%2Ffeature-gate-repr_transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a385095f9a6d4d068102b6c72fbdc86ac2667e51/src%2Ftest%2Fui%2Ffeature-gate-repr_transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_transparent.rs?ref=a385095f9a6d4d068102b6c72fbdc86ac2667e51", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[repr(transparent)] //~ error: the `#[repr(transparent)]` attribute is experimental\n-struct Foo(u64);\n-\n-fn main() {}"}, {"sha": "a4ffaa266906daf4e67262d44f053e9a3431c5e9", "filename": "src/test/ui/feature-gate-repr_transparent.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a385095f9a6d4d068102b6c72fbdc86ac2667e51/src%2Ftest%2Fui%2Ffeature-gate-repr_transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a385095f9a6d4d068102b6c72fbdc86ac2667e51/src%2Ftest%2Fui%2Ffeature-gate-repr_transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_transparent.stderr?ref=a385095f9a6d4d068102b6c72fbdc86ac2667e51", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: the `#[repr(transparent)]` attribute is experimental (see issue #43036)\n-  --> $DIR/feature-gate-repr_transparent.rs:11:1\n-   |\n-LL | #[repr(transparent)] //~ error: the `#[repr(transparent)]` attribute is experimental\n-   | ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(repr_transparent)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4b20001457f78216b5a1feeb7f29d17feddb718b", "filename": "src/test/ui/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fui%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ba0180933485cf8a2bc6b7230a4c70b82bb063/src%2Ftest%2Fui%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.rs?ref=61ba0180933485cf8a2bc6b7230a4c70b82bb063", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(improper_ctypes)]\n-#![feature(libc, repr_transparent)]\n+#![feature(libc)]\n \n extern crate libc;\n "}]}