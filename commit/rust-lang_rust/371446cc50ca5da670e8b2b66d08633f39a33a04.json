{"sha": "371446cc50ca5da670e8b2b66d08633f39a33a04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTQ0NmNjNTBjYTVkYTY3MGU4YjJiNjZkMDg2MzNmMzlhMzNhMDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T04:06:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:20Z"}, "message": "Remove `bindings_after_at` from `INCOMPLETE_FEATURES`.", "tree": {"sha": "13cf1c49e6a4abe3a9f42fade04f0090d2f4df21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13cf1c49e6a4abe3a9f42fade04f0090d2f4df21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371446cc50ca5da670e8b2b66d08633f39a33a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371446cc50ca5da670e8b2b66d08633f39a33a04", "html_url": "https://github.com/rust-lang/rust/commit/371446cc50ca5da670e8b2b66d08633f39a33a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371446cc50ca5da670e8b2b66d08633f39a33a04/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6", "html_url": "https://github.com/rust-lang/rust/commit/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6"}], "stats": {"total": 449, "additions": 153, "deletions": 296}, "files": [{"sha": "36664af8782f4eb9b6fb29e8057f67c3c9babfd7", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -558,5 +558,4 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::or_patterns,\n     sym::let_chains,\n     sym::raw_dylib,\n-    sym::bindings_after_at,\n ];"}, {"sha": "022ac5fc113ddbf6a631ed1529ea1b4543a53924", "filename": "src/test/ui/error-codes/E0007.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,5 +1,4 @@\n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n fn main() {\n     let x = Some(\"s\".to_string());"}, {"sha": "31af9171725bb5983a6190709d67e1924d7f4d68", "filename": "src/test/ui/error-codes/E0007.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,19 +1,11 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/E0007.rs:1:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/E0007.rs:7:9\n+  --> $DIR/E0007.rs:6:9\n    |\n LL |         op_string @ Some(s) => {},\n    |         ^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/E0007.rs:7:26\n+  --> $DIR/E0007.rs:6:26\n    |\n LL |     let x = Some(\"s\".to_string());\n    |         - move occurs because `x` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait"}, {"sha": "75d7af58e706db60c96578aa07edd27cb9a09dd4", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -3,7 +3,6 @@\n // where one side is by-ref and the other is by-move.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n struct X { x: () }\n "}, {"sha": "22d62ff4f003f1bdbf311413b208151dc3f00387", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,13 +1,5 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:5:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:13:23\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:23\n    |\n LL |         Some(ref _y @ _z) => { },\n    |              ---------^^\n@@ -16,13 +8,13 @@ LL |         Some(ref _y @ _z) => { },\n    |              by-ref pattern here\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:19:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:18:14\n    |\n LL |         Some(_z @ ref _y) => { },\n    |              ^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:27\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:25:27\n    |\n LL |         Some(ref mut _y @ _z) => { },\n    |              -------------^^\n@@ -31,13 +23,13 @@ LL |         Some(ref mut _y @ _z) => { },\n    |              by-ref pattern here\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:32:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:31:14\n    |\n LL |         Some(_z @ ref mut _y) => { },\n    |              ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:19:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:18:19\n    |\n LL |         Some(_z @ ref _y) => { },\n    |              -----^^^^^^\n@@ -48,7 +40,7 @@ LL |         Some(_z @ ref _y) => { },\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:32:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:31:19\n    |\n LL |         Some(_z @ ref mut _y) => { },\n    |              -----^^^^^^^^^^"}, {"sha": "86fb04e2edf5bb4d19a07ad90f6be2cf47b3b225", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,7 +1,6 @@\n // See issue #12534.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n fn main() {}\n "}, {"sha": "b039708fd3e0a4c85be7c583ef15feff261bbf30", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,19 +1,11 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:3:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:10:6\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:6\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      ^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:10:12\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:12\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      ------^-"}, {"sha": "1d9f341c5146ae1e1cf3ca4c94ed4bb6c5ac8b6b", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,7 +1,6 @@\n // Test that moving on both sides of an `@` pattern is not allowed.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "f3f8fd655ce0cad831414c69a7f4b5276162c0fb", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,61 +1,53 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-move-and-move.rs:3:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:13:9\n+  --> $DIR/borrowck-move-and-move.rs:12:9\n    |\n LL |     let a @ b = U;\n    |         ^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:17:9\n+  --> $DIR/borrowck-move-and-move.rs:16:9\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:21:9\n+  --> $DIR/borrowck-move-and-move.rs:20:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:26:9\n+  --> $DIR/borrowck-move-and-move.rs:25:9\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:26:21\n+  --> $DIR/borrowck-move-and-move.rs:25:21\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:38:9\n+  --> $DIR/borrowck-move-and-move.rs:37:9\n    |\n LL |         xs @ [a, .., b] => {}\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:44:9\n+  --> $DIR/borrowck-move-and-move.rs:43:9\n    |\n LL |         xs @ [_, ys @ .., _] => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:33:12\n+  --> $DIR/borrowck-move-and-move.rs:32:12\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:13:13\n+  --> $DIR/borrowck-move-and-move.rs:12:13\n    |\n LL |     let a @ b = U;\n    |         ----^   - move occurs because value has type `main::U`, which does not implement the `Copy` trait\n@@ -64,7 +56,7 @@ LL |     let a @ b = U;\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:17:17\n+  --> $DIR/borrowck-move-and-move.rs:16:17\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         --------^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -73,7 +65,7 @@ LL |     let a @ (b, c) = (U, U);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:21:17\n+  --> $DIR/borrowck-move-and-move.rs:20:17\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         --------^-   ---------- move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -82,7 +74,7 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:26:16\n+  --> $DIR/borrowck-move-and-move.rs:25:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -93,7 +85,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:26:29\n+  --> $DIR/borrowck-move-and-move.rs:25:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -104,7 +96,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:38:22\n+  --> $DIR/borrowck-move-and-move.rs:37:22\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n@@ -115,7 +107,7 @@ LL |         xs @ [a, .., b] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:44:18\n+  --> $DIR/borrowck-move-and-move.rs:43:18\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n@@ -126,7 +118,7 @@ LL |         xs @ [_, ys @ .., _] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:33:16\n+  --> $DIR/borrowck-move-and-move.rs:32:16\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ----^"}, {"sha": "afac8d990b4744f8178d2de4a1a2200d02b88bb7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -3,7 +3,6 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(box_patterns)]\n #![feature(slice_patterns)]\n "}, {"sha": "e981b3428a72b7d3025a7ece3838714abec1a50a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.stderr?ref=8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-at-and-box-pass.rs:5:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "fce31409e16c434cc508e5b841a0d9e53d973cce", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,7 +1,6 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(box_patterns)]\n #![feature(slice_patterns)]\n "}, {"sha": "5772fadd1e7418687116fc16f40a23352822630c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,31 +1,23 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-at-and-box.rs:3:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:18:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:17:9\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:22:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:21:9\n    |\n LL |     let a @ box b = Box::new(C);\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:34:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:33:25\n    |\n LL |     match Box::new(C) { a @ box b => {} }\n    |                         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:38:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:37:21\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ------------^\n@@ -34,7 +26,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         by-ref pattern here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:40:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -43,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:41:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -52,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:44:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -61,7 +53,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:47:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:46:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -70,7 +62,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:53:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:52:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -79,7 +71,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:67:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:66:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n@@ -88,15 +80,15 @@ LL |         ref mut a @ box ref b => {\n    |         mutable borrow occurs here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:76:38\n+  --> $DIR/borrowck-pat-at-and-box.rs:75:38\n    |\n LL |         box [Ok(a), ref xs @ .., Err(b)] => {}\n    |                     -----------      ^ by-move pattern here\n    |                     |\n    |                     by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:82:46\n+  --> $DIR/borrowck-pat-at-and-box.rs:81:46\n    |\n LL |         [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n    |                 -----   -----------          ^           --------- by-ref pattern here\n@@ -106,19 +98,19 @@ LL |         [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n    |                 by-ref pattern here\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:26:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:25:11\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:30:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:29:11\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:59:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:58:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -127,7 +119,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow occurs here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:18:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:17:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n@@ -136,7 +128,7 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:22:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:21:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n@@ -145,7 +137,7 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:34:33\n+  --> $DIR/borrowck-pat-at-and-box.rs:33:33\n    |\n LL |     match Box::new(C) { a @ box b => {} }\n    |           -----------   --------^\n@@ -155,7 +147,7 @@ LL |     match Box::new(C) { a @ box b => {} }\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:47:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:46:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -167,7 +159,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:53:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:52:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -179,7 +171,7 @@ LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:67:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:66:25\n    |\n LL |         ref mut a @ box ref b => {\n    |         ----------------^^^^^\n@@ -191,7 +183,7 @@ LL |             *a = Box::new(NC);\n    |             -- mutable borrow later used here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:26:20\n+  --> $DIR/borrowck-pat-at-and-box.rs:25:20\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ---------^\n@@ -201,7 +193,7 @@ LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:30:19\n+  --> $DIR/borrowck-pat-at-and-box.rs:29:19\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           --------^\n@@ -211,7 +203,7 @@ LL |     fn f2(a @ box b: Box<C>) {}\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:59:27\n+  --> $DIR/borrowck-pat-at-and-box.rs:58:27\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ----------------^^^^^"}, {"sha": "be19e5f2a85cabad53abed7a6b2af4b0dfe4c05d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(slice_patterns)]\n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "e5bbc112bb138764e833b336dc60ff3a4139b992", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.stderr?ref=8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-by-copy-bindings-in-at.rs:6:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "abe5ed81b71a240b8088ad1e44d03d8f51ec9a4d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,5 +1,4 @@\n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n fn main() {\n     match Some(\"hi\".to_string()) {"}, {"sha": "1f70a6c437e92e61aa2357490ebf85e9e39328ba", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,13 +1,5 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:1:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:6:34\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:5:34\n    |\n LL |         ref op_string_ref @ Some(s) => {},\n    |         -------------------------^-"}, {"sha": "edf9fb31458909b6d228d56a79980aa9a439fb7f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -4,7 +4,6 @@\n // of an `@` pattern according to NLL borrowck.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "7a500df77cd899f561338d03a99256cece72bfaf", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.stderr?ref=8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-ref-both-sides.rs:6:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "88eda9afec7eb853bc9f9e1301e63b8a56b3b145", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,5 +1,4 @@\n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(slice_patterns)]\n \n enum Option<T> {"}, {"sha": "b068a6125b670fded33ac94cb5520095c7d5d0d9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 43, "deletions": 51, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,13 +1,5 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:1:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: cannot borrow `z` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:12:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n@@ -16,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:32:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -26,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow occurs here\n \n error: cannot borrow `b` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:32:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -35,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:36:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -44,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:38:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -53,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:40:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -63,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -73,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -82,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -91,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:56:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -100,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:60:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -109,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:66:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -118,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:66:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -127,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -136,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -145,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:86:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -154,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:86:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -163,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:93:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -172,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:93:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -181,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -190,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -199,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -208,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -217,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:114:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -227,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -237,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:126:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -247,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:132:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -257,7 +249,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n@@ -266,7 +258,7 @@ LL |     fn f1(ref a @ ref mut b: U) {}\n    |           immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n@@ -275,7 +267,7 @@ LL |     fn f2(ref mut a @ ref b: U) {}\n    |           mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n@@ -284,7 +276,7 @@ LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           immutable borrow occurs here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:12:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -296,7 +288,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:21\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:21\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ------------^^^^^\n@@ -308,7 +300,7 @@ LL |     *a = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:17\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:17\n    |\n LL |     let ref a @ ref mut b = u();\n    |         --------^^^^^^^^^\n@@ -320,7 +312,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -332,7 +324,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -344,39 +336,39 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:86:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:93:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -388,7 +380,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -400,7 +392,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:126:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -412,7 +404,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:126:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-"}, {"sha": "6b8b7545e687db53fca858ba389a269c188b7d29", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,7 +1,6 @@\n // Test that `ref mut x @ ref mut y` and varieties of that are not allowed.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "1b5e6c7411703f8c5b60bcee2f3b66805396c50d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,13 +1,5 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:3:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:26:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -16,7 +8,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:30:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -25,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:32:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -34,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -43,7 +35,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:40:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -52,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:44:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:43:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -74,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:54:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -96,31 +88,31 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:64:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:63:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:68:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:75:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:80:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:79:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -129,7 +121,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:80:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:79:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -138,7 +130,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:86:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:85:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -147,7 +139,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:86:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:85:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -156,7 +148,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -165,7 +157,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -174,7 +166,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -183,7 +175,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -192,7 +184,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -201,7 +193,7 @@ LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:14:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -210,7 +202,7 @@ LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:17:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n@@ -228,7 +220,7 @@ LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:26:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -240,7 +232,7 @@ LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -252,7 +244,7 @@ LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:64:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:63:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -261,7 +253,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:68:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:67:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n@@ -270,7 +262,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n@@ -279,7 +271,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:75:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n@@ -288,7 +280,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -300,7 +292,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -312,7 +304,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -324,7 +316,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-"}, {"sha": "db5aabc7a145309da7fd2099fd70c6561faeef0d", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,7 +1,6 @@\n // Test that mixing `Copy` and non-`Copy` types in `@` patterns is forbidden.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "cfc35d6c32a7274d77b191028da22f47dfb50915", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,31 +1,23 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/copy-and-move-mixed.rs:3:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/copy-and-move-mixed.rs:12:9\n+  --> $DIR/copy-and-move-mixed.rs:11:9\n    |\n LL |     let a @ NC(b, c) = NC(C, C);\n    |         ^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/copy-and-move-mixed.rs:16:9\n+  --> $DIR/copy-and-move-mixed.rs:15:9\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/copy-and-move-mixed.rs:16:19\n+  --> $DIR/copy-and-move-mixed.rs:15:19\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |                   ^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:12:19\n+  --> $DIR/copy-and-move-mixed.rs:11:19\n    |\n LL |     let a @ NC(b, c) = NC(C, C);\n    |         ----------^-   -------- move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n@@ -34,7 +26,7 @@ LL |     let a @ NC(b, c) = NC(C, C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:16:19\n+  --> $DIR/copy-and-move-mixed.rs:15:19\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         ----------^^^^^^^^^^^^-   --------------- move occurs because value has type `NC<C, NC<C, C>>`, which does not implement the `Copy` trait\n@@ -43,7 +35,7 @@ LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:16:29\n+  --> $DIR/copy-and-move-mixed.rs:15:29\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |                   ----------^-"}, {"sha": "1127d114145cd2d8b7dc0a6382d8e30e3885adfc", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -8,7 +8,6 @@\n // this would create problems for the generalization aforementioned.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n fn main() {\n     struct NotCopy;"}, {"sha": "b6709a8a40e2317b443aea2efd1353ce5cd5b1a5", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,13 +1,5 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:10:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:28:17\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:27:17\n    |\n LL |     let ref a @ b = NotCopy;\n    |         --------^\n@@ -16,7 +8,7 @@ LL |     let ref a @ b = NotCopy;\n    |         by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:29:21\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:28:21\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ------------^\n@@ -25,7 +17,7 @@ LL |     let ref mut a @ b = NotCopy;\n    |         by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:31:20\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:30:20\n    |\n LL |         Ok(ref a @ b) | Err(ref a @ b) => {}\n    |            --------^        --------^\n@@ -36,7 +28,7 @@ LL |         Ok(ref a @ b) | Err(ref a @ b) => {}\n    |            by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:35:17\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:34:17\n    |\n LL |         ref a @ b => {}\n    |         --------^"}, {"sha": "6296652c112124e99980f1c5bb623ef95af68508", "filename": "src/test/ui/pattern/bindings-after-at/nested-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n \n struct A { a: u8, b: u8 }\n "}, {"sha": "1864a8e2af7331f66a7864a8f0a5f93c3c8d2fb6", "filename": "src/test/ui/pattern/bindings-after-at/nested-patterns.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.stderr?ref=8846a6b6bb2dc9d776335fda01f68c9c1c7b94e6", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/nested-patterns.rs:3:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "dbec2f135fbbe2967560750b2fabb5c10d131460", "filename": "src/test/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -2,7 +2,6 @@\n // not in the top position of a ascribing a let binding or function parameter.\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete\n \n // This has no effect.\n // We include it to demonstrate that this is the case:"}, {"sha": "1e957ed06892c01bdc4cfd54fcaffef856a50947", "filename": "src/test/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,34 +1,26 @@\n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `@`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:20:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:19:15\n    |\n LL |     let a: u8 @ b = 0;\n    |               ^ expected one of 7 possible tokens\n \n error: expected one of `)`, `,`, `@`, or `|`, found `:`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:26:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:25:15\n    |\n LL |     let a @ (b: u8);\n    |               ^ expected one of `)`, `,`, `@`, or `|`\n \n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `)`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:26:19\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:25:19\n    |\n LL |     let a @ (b: u8);\n    |                   ^ expected one of 7 possible tokens\n \n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `@`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:33:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:32:15\n    |\n LL |     let a: T1 @ Outer(b: T2);\n    |               ^ expected one of 7 possible tokens\n \n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:4:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: aborting due to 4 previous errors\n "}, {"sha": "89ea2d5181945dbe7d1545d886e515b75c3e65b3", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -2,7 +2,6 @@\n // The code that is tested here lives in resolve (see `resolve_pattern_inner`).\n \n #![feature(bindings_after_at)]\n-//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(or_patterns)]\n //~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n "}, {"sha": "c568d2a3aa2b810139673bfb75ea4ce2655bd01d", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371446cc50ca5da670e8b2b66d08633f39a33a04/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr?ref=371446cc50ca5da670e8b2b66d08633f39a33a04", "patch": "@@ -1,76 +1,70 @@\n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:10:14\n+  --> $DIR/pat-at-same-name-both.rs:9:14\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |              ^ used as parameter more than once\n \n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:10:18\n+  --> $DIR/pat-at-same-name-both.rs:9:18\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |                  ^ used as parameter more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:15:20\n+  --> $DIR/pat-at-same-name-both.rs:14:20\n    |\n LL |         Ok(a @ b @ a)\n    |                    ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:17:23\n+  --> $DIR/pat-at-same-name-both.rs:16:23\n    |\n LL |         | Err(a @ b @ a)\n    |                       ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:22:13\n+  --> $DIR/pat-at-same-name-both.rs:21:13\n    |\n LL |     let a @ a @ a = ();\n    |             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:22:17\n+  --> $DIR/pat-at-same-name-both.rs:21:17\n    |\n LL |     let a @ a @ a = ();\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:25:21\n+  --> $DIR/pat-at-same-name-both.rs:24:21\n    |\n LL |     let ref a @ ref a = ();\n    |                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:27:29\n+  --> $DIR/pat-at-same-name-both.rs:26:29\n    |\n LL |     let ref mut a @ ref mut a = ();\n    |                             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:30:17\n+  --> $DIR/pat-at-same-name-both.rs:29:17\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:30:26\n+  --> $DIR/pat-at-same-name-both.rs:29:26\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                          ^ used in a pattern more than once\n \n-warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n-  --> $DIR/pat-at-same-name-both.rs:4:12\n-   |\n-LL | #![feature(bindings_after_at)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n-  --> $DIR/pat-at-same-name-both.rs:6:12\n+  --> $DIR/pat-at-same-name-both.rs:5:12\n    |\n LL | #![feature(or_patterns)]\n    |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to 10 previous errors\n "}]}