{"sha": "c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "node_id": "C_kwDOAAsO6NoAKGMwZTU4YzM0MjA5MmI0MGRjYjFkNjM5MWUzODdiNTZmMGVkZDJlZjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T22:40:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-25T19:46:36Z"}, "message": "Add ErrorGuaranteed to HIR ExprKind::Err", "tree": {"sha": "a707017b98cc56a8c4f1358a466ee32491035cb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a707017b98cc56a8c4f1358a466ee32491035cb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "html_url": "https://github.com/rust-lang/rust/commit/c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "html_url": "https://github.com/rust-lang/rust/commit/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "d4fafe38638a42139f6e41b9c674da24d1f1da97", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -88,8 +88,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n                             return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n                         } else {\n-                            self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n-                            hir::ExprKind::Err\n+                            let guar = self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n+                            hir::ExprKind::Err(guar)\n                         }\n                     } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n@@ -266,8 +266,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr_range(e.span, e1.as_deref(), e2.as_deref(), *lims)\n                 }\n                 ExprKind::Underscore => {\n-                    self.tcx.sess.emit_err(UnderscoreExprLhsAssign { span: e.span });\n-                    hir::ExprKind::Err\n+                    let guar = self.tcx.sess.emit_err(UnderscoreExprLhsAssign { span: e.span });\n+                    hir::ExprKind::Err(guar)\n                 }\n                 ExprKind::Path(qself, path) => {\n                     let qpath = self.lower_qpath(\n@@ -299,8 +299,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let rest = match &se.rest {\n                         StructRest::Base(e) => Some(self.lower_expr(e)),\n                         StructRest::Rest(sp) => {\n-                            self.tcx.sess.emit_err(BaseExpressionDoubleDot { span: *sp });\n-                            Some(&*self.arena.alloc(self.expr_err(*sp)))\n+                            let guar =\n+                                self.tcx.sess.emit_err(BaseExpressionDoubleDot { span: *sp });\n+                            Some(&*self.arena.alloc(self.expr_err(*sp, guar)))\n                         }\n                         StructRest::None => None,\n                     };\n@@ -318,7 +319,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     )\n                 }\n                 ExprKind::Yield(opt_expr) => self.lower_expr_yield(e.span, opt_expr.as_deref()),\n-                ExprKind::Err => hir::ExprKind::Err,\n+                ExprKind::Err => hir::ExprKind::Err(\n+                    self.tcx.sess.delay_span_bug(e.span, \"lowered ExprKind::Err\"),\n+                ),\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n \n                 ExprKind::Paren(_) | ExprKind::ForLoop(..) => unreachable!(\"already handled\"),\n@@ -761,7 +764,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.expr_ident_mut(span, task_context_ident, task_context_hid)\n             } else {\n                 // Use of `await` outside of an async context, we cannot use `task_context` here.\n-                self.expr_err(span)\n+                self.expr_err(span, self.tcx.sess.delay_span_bug(span, \"no task_context hir id\"))\n             };\n             let new_unchecked = self.expr_call_lang_item_fn_mut(\n                 span,"}, {"sha": "4095e225a8019ea846a88b67e70cc470863c1f5c", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -102,7 +102,12 @@ fn make_count<'hir>(\n                 let value = ctx.arena.alloc_from_iter([ctx.expr_usize(sp, i)]);\n                 ctx.expr_call_mut(sp, count_param, value)\n             } else {\n-                ctx.expr(sp, hir::ExprKind::Err)\n+                ctx.expr(\n+                    sp,\n+                    hir::ExprKind::Err(\n+                        ctx.tcx.sess.delay_span_bug(sp, \"lowered bad format_args count\"),\n+                    ),\n+                )\n             }\n         }\n         None => ctx.expr_lang_item_type_relative(sp, hir::LangItem::FormatCount, sym::Implied),\n@@ -135,7 +140,10 @@ fn make_format_spec<'hir>(\n                 argmap.insert_full((arg_index, ArgumentType::Format(placeholder.format_trait)));\n             ctx.expr_usize(sp, i)\n         }\n-        Err(_) => ctx.expr(sp, hir::ExprKind::Err),\n+        Err(_) => ctx.expr(\n+            sp,\n+            hir::ExprKind::Err(ctx.tcx.sess.delay_span_bug(sp, \"lowered bad format_args count\")),\n+        ),\n     };\n     let &FormatOptions {\n         ref width,\n@@ -294,7 +302,12 @@ fn expand_format_args<'hir>(\n                 ));\n                 make_argument(ctx, sp, arg, ty)\n             } else {\n-                ctx.expr(macsp, hir::ExprKind::Err)\n+                ctx.expr(\n+                    macsp,\n+                    hir::ExprKind::Err(\n+                        ctx.tcx.sess.delay_span_bug(macsp, format!(\"no arg at {arg_index}\")),\n+                    ),\n+                )\n             }\n         }));\n         let elements: Vec<_> = arguments"}, {"sha": "7325bce6055923cf73af599e43a6eb7ba651136d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -7,6 +7,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::AssocCtxt;\n use rustc_ast::*;\n use rustc_data_structures::sorted_map::SortedMap;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -796,8 +797,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     /// Construct `ExprKind::Err` for the given `span`.\n-    pub(crate) fn expr_err(&mut self, span: Span) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::Err)\n+    pub(crate) fn expr_err(&mut self, span: Span, guar: ErrorGuaranteed) -> hir::Expr<'hir> {\n+        self.expr(span, hir::ExprKind::Err(guar))\n     }\n \n     fn lower_impl_item(&mut self, i: &AssocItem) -> &'hir hir::ImplItem<'hir> {\n@@ -975,7 +976,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_block_expr_opt(&mut self, span: Span, block: Option<&Block>) -> hir::Expr<'hir> {\n         match block {\n             Some(block) => self.lower_block_expr(block),\n-            None => self.expr_err(span),\n+            None => self.expr_err(span, self.tcx.sess.delay_span_bug(span, \"no block\")),\n         }\n     }\n \n@@ -985,7 +986,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 &[],\n                 match expr {\n                     Some(expr) => this.lower_expr_mut(expr),\n-                    None => this.expr_err(span),\n+                    None => this.expr_err(span, this.tcx.sess.delay_span_bug(span, \"no block\")),\n                 },\n             )\n         })"}, {"sha": "2509b70563956758860d1f855675d71d5e2c68f7", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -330,8 +330,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ExprKind::Path(..) if allow_paths => {}\n             ExprKind::Unary(UnOp::Neg, inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n             _ => {\n-                self.tcx.sess.emit_err(ArbitraryExpressionInPattern { span: expr.span });\n-                return self.arena.alloc(self.expr_err(expr.span));\n+                let guar = self.tcx.sess.emit_err(ArbitraryExpressionInPattern { span: expr.span });\n+                return self.arena.alloc(self.expr_err(expr.span, guar));\n             }\n         }\n         self.lower_expr(expr)"}, {"sha": "72e9f7c13437e3366e0ecfd8bc16fd3251ac974b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -1688,7 +1688,7 @@ impl Expr<'_> {\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n-            ExprKind::Err => ExprPrecedence::Err,\n+            ExprKind::Err(_) => ExprPrecedence::Err,\n         }\n     }\n \n@@ -1754,7 +1754,7 @@ impl Expr<'_> {\n             | ExprKind::Yield(..)\n             | ExprKind::Cast(..)\n             | ExprKind::DropTemps(..)\n-            | ExprKind::Err => false,\n+            | ExprKind::Err(_) => false,\n         }\n     }\n \n@@ -1840,7 +1840,7 @@ impl Expr<'_> {\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n             | ExprKind::DropTemps(..)\n-            | ExprKind::Err => true,\n+            | ExprKind::Err(_) => true,\n         }\n     }\n \n@@ -2013,7 +2013,7 @@ pub enum ExprKind<'hir> {\n     Yield(&'hir Expr<'hir>, YieldSource),\n \n     /// A placeholder for an expression that wasn't syntactically well formed in some way.\n-    Err,\n+    Err(rustc_span::ErrorGuaranteed),\n }\n \n /// Represents an optionally `Self`-qualified value/type path or associated extension."}, {"sha": "cc0f64017e426d7c78111475e0d7bab4711ecd13", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -790,7 +790,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);\n         }\n-        ExprKind::Lit(_) | ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::Err(_) => {}\n     }\n }\n "}, {"sha": "c021fca71339038652d8047d74df664f864285c4", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -1559,7 +1559,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"yield\");\n                 self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n             }\n-            hir::ExprKind::Err => {\n+            hir::ExprKind::Err(_) => {\n                 self.popen();\n                 self.word(\"/*ERROR*/\");\n                 self.pclose();"}, {"sha": "7fc4ccb04ee0bd1b49991451f4aecd164a2ba880", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Field(base, field) => self.check_field(expr, &base, field, expected),\n             ExprKind::Index(base, idx) => self.check_expr_index(base, idx, expr),\n             ExprKind::Yield(value, ref src) => self.check_expr_yield(value, expr, src),\n-            hir::ExprKind::Err => tcx.ty_error_misc(),\n+            hir::ExprKind::Err(guar) => tcx.ty_error(guar),\n         }\n     }\n "}, {"sha": "b9a058d6bba2c8732779a6a214c04f06497c4392", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -301,7 +301,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             hir::ExprKind::Continue(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)\n-            | hir::ExprKind::Err => {}\n+            | hir::ExprKind::Err(_) => {}\n \n             hir::ExprKind::Loop(blk, ..) => {\n                 self.walk_block(blk);"}, {"sha": "7c0402b1c7fb86c8c16aca1bfd5931d59f3610a2", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Struct(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Yield(..)\n-            | ExprKind::Err => (),\n+            | ExprKind::Err(_) => (),\n         }\n     }\n \n@@ -483,7 +483,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Closure { .. }\n             | ExprKind::ConstBlock(..)\n             | ExprKind::DropTemps(..)\n-            | ExprKind::Err\n+            | ExprKind::Err(_)\n             | ExprKind::Field(..)\n             | ExprKind::Index(..)\n             | ExprKind::InlineAsm(..)"}, {"sha": "bcfc61bffb2c66038c2b4964d1fd16b67724e542", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::Box(..)\n-            | hir::ExprKind::Err => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n+            | hir::ExprKind::Err(_) => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }\n     }\n "}, {"sha": "ae203233bd568e6b7e136b19f7916fdb50f2b15f", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -758,7 +758,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },\n \n             hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },\n-            hir::ExprKind::Err => unreachable!(),\n+            hir::ExprKind::Err(_) => unreachable!(),\n         };\n \n         Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }"}, {"sha": "df5c8f53ec1c5ae1566d2f90a11a7a9011853346", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -475,7 +475,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Type(..)\n-            | hir::ExprKind::Err\n+            | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n             | hir::ExprKind::Path(hir::QPath::LangItem(..)) => {\n                 intravisit::walk_expr(self, expr);\n@@ -1129,7 +1129,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)\n-            | hir::ExprKind::Err\n+            | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n             | hir::ExprKind::Path(hir::QPath::LangItem(..)) => succ,\n \n@@ -1427,7 +1427,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Yield(..)\n         | hir::ExprKind::Box(..)\n         | hir::ExprKind::Type(..)\n-        | hir::ExprKind::Err => {}\n+        | hir::ExprKind::Err(_) => {}\n     }\n }\n "}, {"sha": "c5b5cf7f5a963ffa70ede4bd6f5064a1348f98ce", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e58c342092b40dcb1d6391e387b56f0edd2ef5/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=c0e58c342092b40dcb1d6391e387b56f0edd2ef5", "patch": "@@ -219,7 +219,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 hir::intravisit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Err => {\n+            ExprKind::Err(_) => {\n                 self.items.push((ItemKind::Err, span));\n             }\n         }"}]}