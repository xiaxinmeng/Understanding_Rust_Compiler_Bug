{"sha": "2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjJiMjY4MWZkOWRkNGM5MWYyN2M0YjA2MWQ5YTJkYzE1Y2VkMDI=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-12T00:18:46Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-12T00:18:46Z"}, "message": "validate stability against deprecation version", "tree": {"sha": "ba6ab87d393257fe03210b12620fff499183af0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6ab87d393257fe03210b12620fff499183af0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "html_url": "https://github.com/rust-lang/rust/commit/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5779fff5436c13369d655b76b7d81aed534776dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5779fff5436c13369d655b76b7d81aed534776dc", "html_url": "https://github.com/rust-lang/rust/commit/5779fff5436c13369d655b76b7d81aed534776dc"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "26efa5b4389854766959de8a89bf4178cebe98de", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "patch": "@@ -31,6 +31,7 @@ use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n use util::ppaux::Repr;\n \n use std::mem::replace;\n+use std::cmp::Ordering;\n \n /// A stability index, giving the stability level for items and methods.\n pub struct Index<'tcx> {\n@@ -73,6 +74,44 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                     }\n \n                     let stab = self.tcx.intern_stability(stab);\n+\n+                    // Check if deprecated_since < stable_since. If it is,\n+                    // this is *almost surely* an accident.\n+                    let deprecated_predates_stable = match (stab.deprecated_since.as_ref(),\n+                                                            stab.since.as_ref()) {\n+                        (Some(dep_since), Some(stab_since)) => {\n+                            // explicit version of iter::order::lt to handle parse errors properly\n+                            let mut is_less = false;\n+                            for (dep_v, stab_v) in dep_since.split(\".\").zip(stab_since.split(\".\")) {\n+                                match (dep_v.parse::<u64>(), stab_v.parse::<u64>()) {\n+                                    (Ok(dep_v), Ok(stab_v)) => match dep_v.cmp(&stab_v) {\n+                                        Ordering::Less => {\n+                                            is_less = true;\n+                                            break;\n+                                        }\n+                                        Ordering::Equal => { continue; }\n+                                        Ordering::Greater => { break; }\n+                                    },\n+                                    _ => {\n+                                        self.tcx.sess.span_err(item_sp,\n+                                            \"Invalid stability or deprecation version found\");\n+                                        // act like it isn't less because the question is now\n+                                        // nonsensical, and this makes us not do anything else\n+                                        // interesting.\n+                                        break;\n+                                    }\n+                                }\n+                            }\n+                            is_less\n+                        },\n+                        _ => false,\n+                    };\n+\n+                    if deprecated_predates_stable {\n+                        self.tcx.sess.span_err(item_sp,\n+                            \"An API can't be stabilized after it is deprecated\");\n+                    }\n+\n                     self.index.map.insert(local_def(id), Some(stab));\n \n                     // Don't inherit #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "44f84ec7594404376efb67c8b951ae94b5859f2e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "patch": "@@ -397,7 +397,7 @@ fn find_stability_generic<'a,\n                              -> (Option<Stability>, Vec<&'a AM>) {\n \n     let mut stab: Option<Stability> = None;\n-    let mut deprecated: Option<(InternedString, Option<InternedString>)> = None;\n+    let mut deprecated: Option<(Option<InternedString>, Option<InternedString>)> = None;\n     let mut used_attrs: Vec<&'a AM> = vec![];\n \n     'outer: for attr in attrs {\n@@ -484,7 +484,7 @@ fn find_stability_generic<'a,\n                 diagnostic.span_err(item_sp, \"multiple deprecated attributes\");\n             }\n \n-            deprecated = Some((since.unwrap_or(intern_and_get_ident(\"bogus\")), reason));\n+            deprecated = Some((since, reason));\n         }\n     }\n \n@@ -493,7 +493,7 @@ fn find_stability_generic<'a,\n         match stab {\n             Some(ref mut s) => {\n                 let (since, reason) = deprecated.unwrap();\n-                s.deprecated_since = Some(since);\n+                s.deprecated_since = since;\n                 s.reason = reason;\n             }\n             None => {"}, {"sha": "f0597d57b797363b039a0020bc60a645c113f2c7", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2962b2681fd9dd4c91f27c4b061d9a2dc15ced02/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=2962b2681fd9dd4c91f27c4b061d9a2dc15ced02", "patch": "@@ -88,6 +88,7 @@ fn multiple3() { } //~ ERROR multiple stability levels\n #[deprecated(since = \"b\")]\n #[deprecated(since = \"b\")]\n fn multiple4() { } //~ ERROR multiple deprecated attributes\n+//~^ ERROR Invalid stability or deprecation version found\n \n #[deprecated(since = \"a\")]\n fn deprecated_without_unstable_or_stable() { } //~ ERROR deprecated attribute must be paired"}]}