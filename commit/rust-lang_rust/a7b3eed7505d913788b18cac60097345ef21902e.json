{"sha": "a7b3eed7505d913788b18cac60097345ef21902e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjNlZWQ3NTA1ZDkxMzc4OGIxOGNhYzYwMDk3MzQ1ZWYyMTkwMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-15T06:25:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-15T06:25:38Z"}, "message": "Auto merge of #28395 - ebfull:fix-associated-item-resolution, r=arielb1\n\nFixes #28344", "tree": {"sha": "27087216552b603fa70378bb4ddaa3458632e5f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27087216552b603fa70378bb4ddaa3458632e5f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b3eed7505d913788b18cac60097345ef21902e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b3eed7505d913788b18cac60097345ef21902e", "html_url": "https://github.com/rust-lang/rust/commit/a7b3eed7505d913788b18cac60097345ef21902e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b3eed7505d913788b18cac60097345ef21902e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e6d315386cebdd6679055d9350c258f2a51689", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e6d315386cebdd6679055d9350c258f2a51689", "html_url": "https://github.com/rust-lang/rust/commit/f3e6d315386cebdd6679055d9350c258f2a51689"}, {"sha": "4fec679399ddaf67d15adddad2677731f94dfa36", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fec679399ddaf67d15adddad2677731f94dfa36", "html_url": "https://github.com/rust-lang/rust/commit/4fec679399ddaf67d15adddad2677731f94dfa36"}], "stats": {"total": 106, "additions": 94, "deletions": 12}, "files": [{"sha": "971ca329e6b5afc47cf98c1fd40e5e6b6d670754", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a7b3eed7505d913788b18cac60097345ef21902e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b3eed7505d913788b18cac60097345ef21902e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a7b3eed7505d913788b18cac60097345ef21902e", "patch": "@@ -407,18 +407,13 @@ fn create_substs_for_ast_path<'tcx>(\n                                                .take_while(|x| x.default.is_none())\n                                                .count();\n \n-    // Fill with `ty_infer` if no params were specified, as long as\n-    // they were optional (e.g. paths inside expressions).\n-    let mut type_substs = if param_mode == PathParamMode::Optional &&\n-                             types_provided.is_empty() {\n-        let mut substs = region_substs.clone();\n-        ty_param_defs\n-            .iter()\n-            .map(|p| this.ty_infer(Some(p.clone()), Some(&mut substs), Some(TypeSpace), span))\n-            .collect()\n-    } else {\n-        types_provided\n-    };\n+    let mut type_substs = get_type_substs_for_defs(this,\n+                                                   span,\n+                                                   types_provided,\n+                                                   param_mode,\n+                                                   ty_param_defs,\n+                                                   region_substs.clone(),\n+                                                   self_ty);\n \n     let supplied_ty_param_count = type_substs.len();\n     check_type_argument_count(this.tcx(), span, supplied_ty_param_count,\n@@ -482,6 +477,42 @@ fn create_substs_for_ast_path<'tcx>(\n     substs\n }\n \n+/// Returns types_provided if it is not empty, otherwise populating the\n+/// type parameters with inference variables as appropriate.\n+fn get_type_substs_for_defs<'tcx>(this: &AstConv<'tcx>,\n+                                  span: Span,\n+                                  types_provided: Vec<Ty<'tcx>>,\n+                                  param_mode: PathParamMode,\n+                                  ty_param_defs: &[ty::TypeParameterDef<'tcx>],\n+                                  mut substs: Substs<'tcx>,\n+                                  self_ty: Option<Ty<'tcx>>)\n+                                  -> Vec<Ty<'tcx>>\n+{\n+    fn default_type_parameter<'tcx>(p: &ty::TypeParameterDef<'tcx>, self_ty: Option<Ty<'tcx>>)\n+                                    -> Option<ty::TypeParameterDef<'tcx>>\n+    {\n+        if let Some(ref default) = p.default {\n+            if self_ty.is_none() && default.has_self_ty() {\n+                // There is no suitable inference default for a type parameter\n+                // that references self with no self-type provided.\n+                return None;\n+            }\n+        }\n+\n+        Some(p.clone())\n+    }\n+\n+    if param_mode == PathParamMode::Optional && types_provided.is_empty() {\n+        ty_param_defs\n+            .iter()\n+            .map(|p| this.ty_infer(default_type_parameter(p, self_ty), Some(&mut substs),\n+                                   Some(TypeSpace), span))\n+            .collect()\n+    } else {\n+        types_provided\n+    }\n+}\n+\n struct ConvertedBinding<'tcx> {\n     item_name: ast::Name,\n     ty: Ty<'tcx>,"}, {"sha": "751a42826d2717affdf6a51b3e8f81009c04ca04", "filename": "src/test/compile-fail/issue-28344.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a7b3eed7505d913788b18cac60097345ef21902e/src%2Ftest%2Fcompile-fail%2Fissue-28344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b3eed7505d913788b18cac60097345ef21902e/src%2Ftest%2Fcompile-fail%2Fissue-28344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28344.rs?ref=a7b3eed7505d913788b18cac60097345ef21902e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::BitXor;\n+\n+fn main() {\n+    let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n+    //~^ ERROR must be specified\n+    //~| no associated item named\n+\n+    let g = BitXor::bitor;\n+    //~^ ERROR must be specified\n+    //~| no associated item named\n+}\n\\ No newline at end of file"}, {"sha": "2c2f113a7790c48d9a885794cb01bba763a5e834", "filename": "src/test/compile-fail/unspecified-self-in-trait-ref.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a7b3eed7505d913788b18cac60097345ef21902e/src%2Ftest%2Fcompile-fail%2Funspecified-self-in-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b3eed7505d913788b18cac60097345ef21902e/src%2Ftest%2Fcompile-fail%2Funspecified-self-in-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funspecified-self-in-trait-ref.rs?ref=a7b3eed7505d913788b18cac60097345ef21902e", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo<A=Self> {\n+    fn foo();\n+}\n+\n+pub trait Bar<X=usize, A=Self> {\n+    fn foo();\n+}\n+\n+fn main() {\n+    let a = Foo::lol();\n+    //~^ ERROR no associated item named\n+    let b = Foo::<_>::lol();\n+    //~^ ERROR no associated item named\n+    let c = Bar::lol();\n+    //~^ ERROR no associated item named\n+    let d = Bar::<usize, _>::lol();\n+    //~^ ERROR no associated item named\n+    let e = Bar::<usize>::lol();\n+    //~^ ERROR must be explicitly specified\n+}"}]}