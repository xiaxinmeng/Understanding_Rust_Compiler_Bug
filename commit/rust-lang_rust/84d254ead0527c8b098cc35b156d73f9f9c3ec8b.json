{"sha": "84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "node_id": "C_kwDOAAsO6NoAKDg0ZDI1NGVhZDA1MjdjOGIwOThjYzM1YjE1NmQ3M2Y5ZjljM2VjOGI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-12T00:59:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T16:34:16Z"}, "message": "Better names?", "tree": {"sha": "e5b07d88d6995ed120b4a418144f56e822353a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b07d88d6995ed120b4a418144f56e822353a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "html_url": "https://github.com/rust-lang/rust/commit/84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868aa42f4b1310f945749a43bdf21a0240285d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/868aa42f4b1310f945749a43bdf21a0240285d93", "html_url": "https://github.com/rust-lang/rust/commit/868aa42f4b1310f945749a43bdf21a0240285d93"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "07a33bcbb509bf847ed6789911ff55581ad59985", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -102,8 +102,8 @@ impl<'tcx> InherentCollect<'tcx> {\n             if let Some(simp) = simplify_type(\n                 self.tcx,\n                 self_ty,\n-                TreatParams::AsInfer,\n-                TreatProjections::DefaultCandidate,\n+                TreatParams::AsCandidateKey,\n+                TreatProjections::AsCandidateKey,\n             ) {\n                 self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n             } else {\n@@ -164,9 +164,12 @@ impl<'tcx> InherentCollect<'tcx> {\n             }\n         }\n \n-        if let Some(simp) =\n-            simplify_type(self.tcx, ty, TreatParams::AsInfer, TreatProjections::DefaultCandidate)\n-        {\n+        if let Some(simp) = simplify_type(\n+            self.tcx,\n+            ty,\n+            TreatParams::AsCandidateKey,\n+            TreatProjections::AsCandidateKey,\n+        ) {\n             self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n         } else {\n             bug!(\"unexpected primitive type: {:?}\", ty);"}, {"sha": "562dd2caae3410f900ffae36a6ed39fbf10c92c2", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -700,7 +700,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     fn assemble_inherent_candidates_for_incoherent_ty(&mut self, self_ty: Ty<'tcx>) {\n-        let Some(simp) = simplify_type(self.tcx, self_ty, TreatParams::AsInfer, TreatProjections::DefaultCandidate) else {\n+        let Some(simp) = simplify_type(self.tcx, self_ty, TreatParams::AsCandidateKey, TreatProjections::AsCandidateKey) else {\n             bug!(\"unexpected incoherent type: {:?}\", self_ty)\n         };\n         for &impl_def_id in self.tcx.incoherent_impls(simp) {"}, {"sha": "7055d9257ec90902c55124077e48874d5dfa4c7a", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -1258,7 +1258,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let target_ty = self\n                 .autoderef(sugg_span, rcvr_ty)\n                 .find(|(rcvr_ty, _)| {\n-                    DeepRejectCtxt { treat_obligation_params: TreatParams::AsInfer }\n+                    DeepRejectCtxt { treat_obligation_params: TreatParams::AsCandidateKey }\n                         .types_may_unify(*rcvr_ty, impl_ty)\n                 })\n                 .map_or(impl_ty, |(ty, _)| ty)\n@@ -1517,7 +1517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .into_iter()\n             .any(|info| self.associated_value(info.def_id, item_name).is_some());\n         let found_assoc = |ty: Ty<'tcx>| {\n-            simplify_type(tcx, ty, TreatParams::AsInfer, TreatProjections::DefaultCandidate)\n+            simplify_type(tcx, ty, TreatParams::AsCandidateKey, TreatProjections::AsCandidateKey)\n                 .and_then(|simp| {\n                     tcx.incoherent_impls(simp)\n                         .iter()\n@@ -2649,8 +2649,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else if let Some(simp_rcvr_ty) = simplify_type(\n                 self.tcx,\n                 rcvr_ty,\n-                TreatParams::AsPlaceholder,\n-                TreatProjections::DefaultLookup,\n+                TreatParams::ForLookup,\n+                TreatProjections::ForLookup,\n             ) {\n                 let mut potential_candidates = Vec::new();\n                 let mut explicitly_negative = Vec::new();\n@@ -2667,8 +2667,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let imp_simp = simplify_type(\n                                 self.tcx,\n                                 imp.self_ty(),\n-                                TreatParams::AsPlaceholder,\n-                                TreatProjections::DefaultLookup,\n+                                TreatParams::ForLookup,\n+                                TreatProjections::ForLookup,\n                             );\n                             imp_simp.map_or(false, |s| s == simp_rcvr_ty)\n                         })"}, {"sha": "bbab8a62a2bce98fa4a9cc083c49a64e4e935daa", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -1858,8 +1858,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     let simplified_self_ty = fast_reject::simplify_type(\n                         self.tcx,\n                         trait_ref.self_ty(),\n-                        TreatParams::AsInfer,\n-                        TreatProjections::DefaultCandidate,\n+                        TreatParams::AsCandidateKey,\n+                        TreatProjections::AsCandidateKey,\n                     );\n \n                     fx_hash_map"}, {"sha": "ee505742be9a039e4a7c125cc30542337e66120e", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -51,9 +51,12 @@ pub enum SimplifiedType {\n /// generic parameters as if they were inference variables in that case.\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n pub enum TreatParams {\n-    /// Treat parameters as placeholders in the given environment.\n-    AsPlaceholder,\n-    AsInfer,\n+    /// Treat parameters as infer vars. This is the correct mode for caching\n+    /// an impl's type for lookup.\n+    AsCandidateKey,\n+    /// Treat parameters as placeholders in the given environment. This is the\n+    /// correct mode for *lookup*, as during candidate selection.\n+    ForLookup,\n }\n \n /// During fast-rejection, we have the choice of treating projection types\n@@ -67,13 +70,13 @@ pub enum TreatProjections {\n     /// We must assume that the `impl<T> Trait<T> for <T as Id>::This`\n     /// can apply to all self types so we don't return a simplified type\n     /// for `<T as Id>::This`.\n-    DefaultCandidate,\n+    AsCandidateKey,\n     /// In the old solver we don't try to normalize projections\n     /// when looking up impls and only access them by using the\n     /// current self type. This means that if the self type is\n     /// a projection which could later be normalized, we must not\n     /// treat it as rigid.\n-    DefaultLookup,\n+    ForLookup,\n     /// We can treat projections in the self type as opaque as\n     /// we separately look up impls for the normalized self type.\n     NextSolverLookup,\n@@ -133,13 +136,13 @@ pub fn simplify_type<'tcx>(\n         ty::FnPtr(f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),\n         ty::Placeholder(..) => Some(PlaceholderSimplifiedType),\n         ty::Param(_) => match treat_params {\n-            TreatParams::AsPlaceholder => Some(PlaceholderSimplifiedType),\n-            TreatParams::AsInfer => None,\n+            TreatParams::ForLookup => Some(PlaceholderSimplifiedType),\n+            TreatParams::AsCandidateKey => None,\n         },\n         ty::Alias(..) => match treat_projections {\n-            TreatProjections::DefaultLookup if !ty.needs_infer() => Some(PlaceholderSimplifiedType),\n+            TreatProjections::ForLookup if !ty.needs_infer() => Some(PlaceholderSimplifiedType),\n             TreatProjections::NextSolverLookup => Some(PlaceholderSimplifiedType),\n-            TreatProjections::DefaultCandidate | TreatProjections::DefaultLookup => None,\n+            TreatProjections::AsCandidateKey | TreatProjections::ForLookup => None,\n         },\n         ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),\n         ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,\n@@ -307,8 +310,8 @@ impl DeepRejectCtxt {\n             // Depending on the value of `treat_obligation_params`, we either\n             // treat generic parameters like placeholders or like inference variables.\n             ty::Param(_) => match self.treat_obligation_params {\n-                TreatParams::AsPlaceholder => false,\n-                TreatParams::AsInfer => true,\n+                TreatParams::ForLookup => false,\n+                TreatParams::AsCandidateKey => true,\n             },\n \n             ty::Infer(_) => true,\n@@ -345,8 +348,8 @@ impl DeepRejectCtxt {\n         let k = impl_ct.kind();\n         match obligation_ct.kind() {\n             ty::ConstKind::Param(_) => match self.treat_obligation_params {\n-                TreatParams::AsPlaceholder => false,\n-                TreatParams::AsInfer => true,\n+                TreatParams::ForLookup => false,\n+                TreatParams::AsCandidateKey => true,\n             },\n \n             // As we don't necessarily eagerly evaluate constants,"}, {"sha": "bf2b121f704afcbcb55dd44ca800ab424ea9f84d", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -127,7 +127,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.for_each_relevant_impl_treating_projections(\n             trait_def_id,\n             self_ty,\n-            TreatProjections::DefaultLookup,\n+            TreatProjections::ForLookup,\n             f,\n         )\n     }\n@@ -156,8 +156,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(simp) = fast_reject::simplify_type(\n             self,\n             self_ty,\n-            TreatParams::AsInfer,\n-            TreatProjections::DefaultCandidate,\n+            TreatParams::AsCandidateKey,\n+            TreatProjections::AsCandidateKey,\n         ) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n@@ -196,7 +196,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // `T: Clone` this is incredibly useful as we would otherwise look at all the impls\n         // of `Clone` for `Option<T>`, `Vec<T>`, `ConcreteType` and so on.\n         if let Some(simp) =\n-            fast_reject::simplify_type(self, self_ty, TreatParams::AsPlaceholder, treat_projections)\n+            fast_reject::simplify_type(self, self_ty, TreatParams::ForLookup, treat_projections)\n         {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n@@ -261,8 +261,8 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n         if let Some(simplified_self_ty) = fast_reject::simplify_type(\n             tcx,\n             impl_self_ty,\n-            TreatParams::AsInfer,\n-            TreatProjections::DefaultCandidate,\n+            TreatParams::AsCandidateKey,\n+            TreatProjections::AsCandidateKey,\n         ) {\n             impls.non_blanket_impls.entry(simplified_self_ty).or_default().push(impl_def_id);\n         } else {"}, {"sha": "b0f6127baa5d42073b3d6b6ed49243bc23eabaed", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -368,7 +368,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             drop_trait,\n             ty,\n             // FIXME: This could also be some other mode, like \"unexpected\"\n-            TreatProjections::DefaultLookup,\n+            TreatProjections::ForLookup,\n             |impl_did| {\n                 if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n                     if validate(self, impl_did).is_ok() {"}, {"sha": "c8d371dd0846b8c2c0dcc27146a5e22ec8d14165", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -2215,7 +2215,7 @@ impl CheckAttrVisitor<'_> {\n             // `fn(TokenStream) -> TokenStream` after some substitution of generic arguments.\n             //\n             // Properly checking this means pulling in additional `rustc` crates, so we don't.\n-            let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsInfer };\n+            let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsCandidateKey };\n \n             if sig.abi != Abi::Rust {\n                 tcx.sess.emit_err(errors::ProcMacroInvalidAbi {"}, {"sha": "dbb8e722c8f6ff29aa7c5a5d6d8658e5e75237ba", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n \n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n+        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n         if iter::zip(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n         {"}, {"sha": "7878539817cfb928fc8a6a0d4237cb7fa3b8113f", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         let tcx = ecx.tcx();\n \n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n+        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n         if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n         {"}, {"sha": "96a4b76af550fd5c9eb26d0782114f4514dee93c", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -75,7 +75,7 @@ pub fn overlapping_impls(\n     // Before doing expensive operations like entering an inference context, do\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify.\n-    let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsInfer };\n+    let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsCandidateKey };\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n     let may_overlap = match (impl1_ref, impl2_ref) {"}, {"sha": "41ffaeeac1c11ffa67b4f7c97c1d3d594191abb9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -1803,7 +1803,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         self.tcx.find_map_relevant_impl(\n                             id,\n                             proj.projection_ty.self_ty(),\n-                            TreatProjections::DefaultLookup,\n+                            TreatProjections::ForLookup,\n                             |did| {\n                                 self.tcx\n                                     .associated_items(did)\n@@ -2185,7 +2185,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             self.tcx.find_map_relevant_impl(\n                 trait_def_id,\n                 trait_ref.skip_binder().self_ty(),\n-                TreatProjections::DefaultLookup,\n+                TreatProjections::ForLookup,\n                 Some,\n             )\n         };"}, {"sha": "3182af989f05a565592755863faa044c939e11db", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -784,7 +784,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let relevant_impl = self.tcx().find_map_relevant_impl(\n                     self.tcx().require_lang_item(LangItem::Drop, None),\n                     obligation.predicate.skip_binder().trait_ref.self_ty(),\n-                    TreatProjections::DefaultLookup,\n+                    TreatProjections::ForLookup,\n                     Some,\n                 );\n "}, {"sha": "38cdaddc1e707c286693e3cd5c6e6d947fde9114", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -2558,7 +2558,7 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         // We can avoid creating type variables and doing the full\n         // substitution if we find that any of the input types, when\n         // simplified, do not match.\n-        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n+        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n         iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs)\n             .any(|(obl, imp)| !drcx.generic_args_may_unify(obl, imp))\n     }"}, {"sha": "cd665d9471db23a393370c81e5b9193758f85f86", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -52,8 +52,8 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n         if let Some(st) = fast_reject::simplify_type(\n             tcx,\n             trait_ref.self_ty(),\n-            TreatParams::AsInfer,\n-            fast_reject::TreatProjections::DefaultCandidate,\n+            TreatParams::AsCandidateKey,\n+            TreatProjections::AsCandidateKey,\n         ) {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             self.non_blanket_impls.entry(st).or_default().push(impl_def_id)\n@@ -72,8 +72,8 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n         if let Some(st) = fast_reject::simplify_type(\n             tcx,\n             trait_ref.self_ty(),\n-            TreatParams::AsInfer,\n-            TreatProjections::DefaultCandidate,\n+            TreatParams::AsCandidateKey,\n+            TreatProjections::AsCandidateKey,\n         ) {\n             debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             vec = self.non_blanket_impls.get_mut(&st).unwrap();\n@@ -313,8 +313,8 @@ impl<'tcx> GraphExt<'tcx> for Graph {\n         let simplified = fast_reject::simplify_type(\n             tcx,\n             trait_ref.self_ty(),\n-            TreatParams::AsInfer,\n-            TreatProjections::DefaultCandidate,\n+            TreatParams::AsCandidateKey,\n+            TreatProjections::AsCandidateKey,\n         );\n \n         // Descend the specialization tree, where `parent` is the current parent node."}, {"sha": "358f6ad566c25e669f29a85043de493ed389eeee", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d254ead0527c8b098cc35b156d73f9f9c3ec8b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=84d254ead0527c8b098cc35b156d73f9f9c3ec8b", "patch": "@@ -735,7 +735,7 @@ fn trait_impls_for<'a>(\n         trace!(\"considering explicit impl for trait {:?}\", trait_);\n \n         // Look at each trait implementation to see if it's an impl for `did`\n-        tcx.find_map_relevant_impl(trait_, ty, TreatProjections::DefaultLookup, |impl_| {\n+        tcx.find_map_relevant_impl(trait_, ty, TreatProjections::ForLookup, |impl_| {\n             let trait_ref = tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n             let impl_type = trait_ref.skip_binder().self_ty();"}]}