{"sha": "f236b850c0dc4c1b925e33d1173f359605801307", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzZiODUwYzBkYzRjMWI5MjVlMzNkMTE3M2YzNTk2MDU4MDEzMDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T20:35:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T20:35:01Z"}, "message": "remove some unused mut decls", "tree": {"sha": "e1fc3fb756062335f9d18a12cb7f80527c88412c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1fc3fb756062335f9d18a12cb7f80527c88412c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f236b850c0dc4c1b925e33d1173f359605801307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f236b850c0dc4c1b925e33d1173f359605801307", "html_url": "https://github.com/rust-lang/rust/commit/f236b850c0dc4c1b925e33d1173f359605801307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f236b850c0dc4c1b925e33d1173f359605801307/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "html_url": "https://github.com/rust-lang/rust/commit/dc21daeeb88c20b6431e70fe4ef5cc416af8410d"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "96fed51309ee312d9704e06eeeb3ea68ddf4fc42", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -385,7 +385,7 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Quot<T,T>+Mul<T,T>>(\n }\n \n #[cfg(test)]\n-fn test_num<T:Num + NumCast>(ten: T, two: T) {\n+pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12));\n     assert_eq!(ten.sub(&two),  cast(8));\n     assert_eq!(ten.mul(&two),  cast(20));"}, {"sha": "ff46abaf7128c181758349ed4208f7e3dad34a59", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -5267,7 +5267,7 @@ pub impl Resolver {\n \n         debug!(\"Import resolutions:\");\n         for module_.import_resolutions.each |name, import_resolution| {\n-            let mut value_repr;\n+            let value_repr;\n             match import_resolution.target_for_namespace(ValueNS) {\n                 None => { value_repr = ~\"\"; }\n                 Some(_) => {\n@@ -5276,7 +5276,7 @@ pub impl Resolver {\n                 }\n             }\n \n-            let mut type_repr;\n+            let type_repr;\n             match import_resolution.target_for_namespace(TypeNS) {\n                 None => { type_repr = ~\"\"; }\n                 Some(_) => {"}, {"sha": "1785feda7790cce39b7b8e4a4336764d3245ac13", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -2366,7 +2366,7 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n         // Call main.\n         let lloutputarg = C_null(T_ptr(T_i8()));\n         let llenvarg = unsafe { llvm::LLVMGetParam(llfdecl, 1 as c_uint) };\n-        let mut args = ~[lloutputarg, llenvarg];\n+        let args = ~[lloutputarg, llenvarg];\n         let llresult = Call(bcx, main_llfn, args);\n         Store(bcx, llresult, fcx.llretptr.get());\n "}, {"sha": "c4c6133b405c0b85d5b4e3b5fc5bc9ce95d82fb2", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -722,7 +722,7 @@ pub fn trans_arg_expr(bcx: block,\n             }\n         }\n     };\n-    let mut arg_datum = arg_datumblock.datum;\n+    let arg_datum = arg_datumblock.datum;\n     let bcx = arg_datumblock.bcx;\n \n     debug!(\"   arg datum: %s\", arg_datum.to_str(bcx.ccx()));"}, {"sha": "fa6f7802e7d50b7ee8ed45b1a94f60a741011422", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -563,7 +563,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n \n fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                                dest: Dest) -> block {\n-    let mut bcx = bcx;\n     let _icx = bcx.insn_ctxt(\"trans_rvalue_dps_unadjusted\");\n     let tcx = bcx.tcx();\n \n@@ -1408,7 +1407,6 @@ fn trans_eager_binop(bcx: block,\n                      lhs_datum: &Datum,\n                      rhs_datum: &Datum)\n                   -> DatumBlock {\n-    let mut bcx = bcx;\n     let _icx = bcx.insn_ctxt(\"trans_eager_binop\");\n \n     let lhs = lhs_datum.to_appropriate_llval(bcx);"}, {"sha": "9f9132fa9466567aba15f3185e4fcca5ae2ee0d1", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -120,15 +120,15 @@ pub fn lookup(\n         expr: @ast::expr,                   // The expression `a.b(...)`.\n         self_expr: @ast::expr,              // The expression `a`.\n         callee_id: node_id,                 /* Where to store `a.b`'s type,\n-                                             * also the scope of the call */ \n+                                             * also the scope of the call */\n         m_name: ast::ident,                 // The ident `b`.\n         self_ty: ty::t,                     // The type of `a`.\n         supplied_tps: &[ty::t],             // The list of types X, Y, ... .\n         deref_args: check::DerefArgs,       // Whether we autopointer first.\n         check_traits: CheckTraitsFlag,      // Whether we check traits only.\n         autoderef_receiver: AutoderefReceiverFlag)\n      -> Option<method_map_entry> {\n-    let mut impl_dups = @mut HashSet::new();\n+    let impl_dups = @mut HashSet::new();\n     let lcx = LookupContext {\n         fcx: fcx,\n         expr: expr,"}, {"sha": "70282fdc57cfe9c499698455b834dd6556735a6a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -1684,7 +1684,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         };\n \n         // construct the function type\n-        let mut fn_ty = astconv::ty_of_closure(fcx,\n+        let fn_ty = astconv::ty_of_closure(fcx,\n                                                fcx,\n                                                sigil,\n                                                purity,\n@@ -1695,7 +1695,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                                &opt_vec::Empty,\n                                                expr.span);\n \n-        let mut fty_sig;\n+        let fty_sig;\n         let fty = if error_happened {\n             fty_sig = FnSig {\n                 bound_lifetime_names: opt_vec::Empty,"}, {"sha": "fd19738b32110760bfead66f402523bdb0966e23", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -871,7 +871,7 @@ pub mod guarantor {\n         let tcx = rcx.tcx();\n         debug!(\"guarantor::for_by_ref(expr=%s, callee_scope=%?)\",\n                expr.repr(tcx), callee_scope);\n-        let mut expr_cat = categorize(rcx, expr);\n+        let expr_cat = categorize(rcx, expr);\n         debug!(\"guarantor::for_by_ref(expr=%?, callee_scope=%?) category=%?\",\n                expr.id, callee_scope, expr_cat);\n         let minimum_lifetime = ty::re_scope(callee_scope);"}, {"sha": "121ec9c79216fae431cd8563af06c598c501f5fb", "filename": "src/test/run-fail/borrowck-wg-fail-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -7,5 +7,6 @@ struct S {\n fn main() {\n     let x = @mut S { x: 3 };\n     let y: &S = x;\n-    x.x = 5;\n+    let z = x;\n+    z.x = 5;\n }"}, {"sha": "2b95cf3fe5fa996df7c846275214389102c29742", "filename": "src/test/run-fail/borrowck-wg-fail-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -3,6 +3,7 @@\n fn main() {\n     let x = @mut 3;\n     let y: &mut int = x;\n-    *x = 5;\n+    let z = x;\n+    *z = 5;\n }\n "}, {"sha": "fd2d36b895adaa19f9e354ebe7c721a358b741f3", "filename": "src/test/run-fail/borrowck-wg-fail.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f236b850c0dc4c1b925e33d1173f359605801307/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f236b850c0dc4c1b925e33d1173f359605801307/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail.rs?ref=f236b850c0dc4c1b925e33d1173f359605801307", "patch": "@@ -1,9 +1,7 @@\n // error-pattern:borrowed\n \n-fn f(x: &int, y: @mut int) {\n-    unsafe {\n-        *y = 2;\n-    }\n+fn f(_x: &int, y: @mut int) {\n+    *y = 2;\n }\n \n fn main() {"}]}