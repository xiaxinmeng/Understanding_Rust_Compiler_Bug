{"sha": "4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTQ5NzA3NjdhZThmYzJlM2I2ZDBjMjgwMzEyYmIwZjRlZmVlZDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-21T23:21:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-11T19:12:32Z"}, "message": "bootstrap: Add build scripts for crates\n\nThis commits adds build scripts to the necessary Rust crates for all the native\ndependencies. This is currently a duplication of the support found in mk/rt.mk\nand is my best effort at representing the logic twice, but there may be some\nunfortunate-and-inevitable divergence.\n\nAs a summary:\n\n* alloc_jemalloc - build script to compile jemallocal\n* flate - build script to compile miniz.c\n* rustc_llvm - build script to run llvm-config and learn about how to link it.\n  Note that this crucially (and will not ever) compile LLVM as that would take\n  far too long.\n* rustdoc - build script to compile hoedown\n* std - script to determine lots of libraries/linkages as well as compile\n  libbacktrace", "tree": {"sha": "1c6ad1e61abbdd59f0bd27a4fd849801b5b296b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c6ad1e61abbdd59f0bd27a4fd849801b5b296b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "html_url": "https://github.com/rust-lang/rust/commit/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2581b141473f8333728c8dc330a31dc2373dc0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2581b141473f8333728c8dc330a31dc2373dc0e6", "html_url": "https://github.com/rust-lang/rust/commit/2581b141473f8333728c8dc330a31dc2373dc0e6"}], "stats": {"total": 387, "additions": 387, "deletions": 0}, "files": [{"sha": "18f0527425a15c115e75f2a6e144020f640fe70e", "filename": "src/liballoc_jemalloc/build.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate gcc;\n+\n+use std::env;\n+use std::path::PathBuf;\n+use std::process::Command;\n+use build_helper::run;\n+\n+fn main() {\n+    let target = env::var(\"TARGET\").unwrap();\n+    let host = env::var(\"HOST\").unwrap();\n+    let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n+    let src_dir = env::current_dir().unwrap();\n+\n+    if let Some(jemalloc) = env::var_os(\"JEMALLOC_OVERRIDE\") {\n+        let jemalloc = PathBuf::from(jemalloc);\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 jemalloc.parent().unwrap().display());\n+        let stem = jemalloc.file_stem().unwrap().to_str().unwrap();\n+        let name = jemalloc.file_name().unwrap().to_str().unwrap();\n+        let kind = if name.ends_with(\".a\") {\"static\"} else {\"dylib\"};\n+        println!(\"cargo:rustc-link-lib={}={}\", kind, &stem[3..]);\n+        return\n+    }\n+\n+    let compiler = gcc::Config::new().get_compiler();\n+    let ar = build_helper::cc2ar(compiler.path(), &target);\n+    let cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n+                         .collect::<Vec<_>>().join(\" \");\n+\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(src_dir.join(\"../jemalloc/configure\").to_str().unwrap()\n+                   .replace(\"C:\\\\\", \"/c/\")\n+                   .replace(\"\\\\\", \"/\"))\n+       .current_dir(&build_dir)\n+       .env(\"CC\", compiler.path())\n+       .env(\"EXTRA_CFLAGS\", cflags)\n+       .env(\"AR\", &ar)\n+       .env(\"RANLIB\", format!(\"{} s\", ar.display()));\n+\n+    if target.contains(\"windows-gnu\") {\n+        // A bit of history here, this used to be --enable-lazy-lock added in\n+        // #14006 which was filed with jemalloc in jemalloc/jemalloc#83 which\n+        // was also reported to MinGW:\n+        //\n+        //  http://sourceforge.net/p/mingw-w64/bugs/395/\n+        //\n+        // When updating jemalloc to 4.0, however, it was found that binaries\n+        // would exit with the status code STATUS_RESOURCE_NOT_OWNED indicating\n+        // that a thread was unlocking a mutex it never locked. Disabling this\n+        // \"lazy lock\" option seems to fix the issue, but it was enabled by\n+        // default for MinGW targets in 13473c7 for jemalloc.\n+        //\n+        // As a result of all that, force disabling lazy lock on Windows, and\n+        // after reading some code it at least *appears* that the initialization\n+        // of mutexes is otherwise ok in jemalloc, so shouldn't cause problems\n+        // hopefully...\n+        //\n+        // tl;dr: make windows behave like other platforms by disabling lazy\n+        //        locking, but requires passing an option due to a historical\n+        //        default with jemalloc.\n+        cmd.arg(\"--disable-lazy-lock\");\n+    } else if target.contains(\"ios\") || target.contains(\"android\") {\n+        cmd.arg(\"--disable-tls\");\n+    }\n+\n+    if cfg!(feature = \"debug-jemalloc\") {\n+        cmd.arg(\"--enable-debug\");\n+    }\n+\n+    // Turn off broken quarantine (see jemalloc/jemalloc#161)\n+    cmd.arg(\"--disable-fill\");\n+    cmd.arg(\"--with-jemalloc-prefix=je_\");\n+    cmd.arg(format!(\"--host={}\", build_helper::gnu_target(&target)));\n+    cmd.arg(format!(\"--build={}\", build_helper::gnu_target(&host)));\n+\n+    run(&mut cmd);\n+    run(Command::new(\"make\")\n+                .current_dir(&build_dir)\n+                .arg(\"build_lib_static\")\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").unwrap()));\n+\n+    if target.contains(\"windows\") {\n+        println!(\"cargo:rustc-link-lib=static=jemalloc\");\n+    } else {\n+        println!(\"cargo:rustc-link-lib=static=jemalloc_pic\");\n+    }\n+    println!(\"cargo:rustc-link-search=native={}/lib\", build_dir.display());\n+    if target.contains(\"android\") {\n+        println!(\"cargo:rustc-link-lib=gcc\");\n+    } else if !target.contains(\"windows\") {\n+        println!(\"cargo:rustc-link-lib=pthread\");\n+    }\n+}"}, {"sha": "12016980a2c656be8c5ace4d6ea27285865ca26a", "filename": "src/libflate/build.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibflate%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibflate%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Fbuild.rs?ref=4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+\n+fn main() {\n+    gcc::Config::new()\n+        .file(\"../rt/miniz.c\")\n+        .compile(\"libminiz.a\");\n+}"}, {"sha": "4f2fee6943f388910a2b2cad79cd18abed29066a", "filename": "src/librustc_llvm/build.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "patch": "@@ -0,0 +1,130 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+extern crate build_helper;\n+\n+use std::process::Command;\n+use std::env;\n+use std::path::PathBuf;\n+\n+use build_helper::output;\n+\n+fn main() {\n+    let target = env::var(\"TARGET\").unwrap();\n+    let llvm_config = env::var_os(\"LLVM_CONFIG\").map(PathBuf::from)\n+                           .unwrap_or_else(|| {\n+        match env::var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n+            Some(dir) => {\n+                let to_test = dir.parent().unwrap().parent().unwrap()\n+                                 .join(&target).join(\"llvm/bin/llvm-config\");\n+                if Command::new(&to_test).output().is_ok() {\n+                    return to_test\n+                }\n+            }\n+            None => {}\n+        }\n+        PathBuf::from(\"llvm-config\")\n+    });\n+\n+    println!(\"cargo:rerun-if-changed={}\", llvm_config.display());\n+\n+    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\",\n+                               \"pnacl\"];\n+\n+    // FIXME: surely we don't need all these components, right? Stuff like mcjit\n+    //        or interpreter the compiler itself never uses.\n+    let required_components = &[\"ipo\", \"bitreader\", \"bitwriter\", \"linker\",\n+                                \"asmparser\", \"mcjit\", \"interpreter\",\n+                                \"instrumentation\"];\n+\n+    let components = output(Command::new(&llvm_config).arg(\"--components\"));\n+    let mut components = components.split_whitespace().collect::<Vec<_>>();\n+    components.retain(|c| {\n+        optional_components.contains(c) || required_components.contains(c)\n+    });\n+\n+    for component in required_components {\n+        if !components.contains(component) {\n+            panic!(\"require llvm component {} but wasn't found\", component);\n+        }\n+    }\n+\n+    for component in components.iter() {\n+        println!(\"cargo:rustc-cfg=llvm_component=\\\"{}\\\"\", component);\n+    }\n+\n+    // Link in our own LLVM shims, compiled with the same flags as LLVM\n+    let mut cmd = Command::new(&llvm_config);\n+    cmd.arg(\"--cxxflags\");\n+    let cxxflags = output(&mut cmd);\n+    let mut cfg = gcc::Config::new();\n+    for flag in cxxflags.split_whitespace() {\n+        cfg.flag(flag);\n+    }\n+    cfg.file(\"../rustllvm/ExecutionEngineWrapper.cpp\")\n+       .file(\"../rustllvm/PassWrapper.cpp\")\n+       .file(\"../rustllvm/RustWrapper.cpp\")\n+       .file(\"../rustllvm/ArchiveWrapper.cpp\")\n+       .cpp(true)\n+       .cpp_link_stdlib(None) // we handle this below\n+       .compile(\"librustllvm.a\");\n+\n+    // Link in all LLVM libraries\n+    let mut cmd = Command::new(&llvm_config);\n+    cmd.arg(\"--libs\").arg(\"--system-libs\").args(&components[..]);\n+    for lib in output(&mut cmd).split_whitespace() {\n+        let name = if lib.starts_with(\"-l\") {\n+            &lib[2..]\n+        } else if lib.starts_with(\"-\") {\n+            &lib[1..]\n+        } else {\n+            continue\n+        };\n+\n+        // Don't need or want this library, but LLVM's CMake build system\n+        // doesn't provide a way to disable it, so filter it here even though we\n+        // may or may not have built it. We don't reference anything from this\n+        // library and it otherwise may just pull in extra dependencies on\n+        // libedit which we don't want\n+        if name == \"LLVMLineEditor\" {\n+            continue\n+        }\n+\n+        let kind = if name.starts_with(\"LLVM\") {\"static\"} else {\"dylib\"};\n+        println!(\"cargo:rustc-link-lib={}={}\", kind, name);\n+    }\n+\n+    // LLVM ldflags\n+    let mut cmd = Command::new(&llvm_config);\n+    cmd.arg(\"--ldflags\");\n+    for lib in output(&mut cmd).split_whitespace() {\n+        if lib.starts_with(\"-l\") {\n+            println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n+        } else if lib.starts_with(\"-L\") {\n+            println!(\"cargo:rustc-link-search=native={}\", &lib[2..]);\n+        }\n+    }\n+\n+    // C++ runtime library\n+    if !target.contains(\"msvc\") {\n+        if let Some(s) = env::var_os(\"LLVM_STATIC_STDCPP\") {\n+            assert!(!cxxflags.contains(\"stdlib=libc++\"));\n+            let path = PathBuf::from(s);\n+            println!(\"cargo:rustc-link-search=native={}\",\n+                     path.parent().unwrap().display());\n+            println!(\"cargo:rustc-link-lib=static=stdc++\");\n+        } else if cxxflags.contains(\"stdlib=libc++\") {\n+            println!(\"cargo:rustc-link-lib=c++\");\n+        } else {\n+            println!(\"cargo:rustc-link-lib=stdc++\");\n+        }\n+    }\n+}"}, {"sha": "fcb7af11dce2f061d2abbfd0bcc1e0af72ee6ad0", "filename": "src/librustdoc/build.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+\n+fn main() {\n+    let mut cfg = gcc::Config::new();\n+    cfg.file(\"../rt/hoedown/src/autolink.c\")\n+       .file(\"../rt/hoedown/src/buffer.c\")\n+       .file(\"../rt/hoedown/src/document.c\")\n+       .file(\"../rt/hoedown/src/escape.c\")\n+       .file(\"../rt/hoedown/src/html.c\")\n+       .file(\"../rt/hoedown/src/html_blocks.c\")\n+       .file(\"../rt/hoedown/src/html_smartypants.c\")\n+       .file(\"../rt/hoedown/src/stack.c\")\n+       .file(\"../rt/hoedown/src/version.c\")\n+       .include(\"../rt/hoedown/src\")\n+       .compile(\"libhoedown.a\");\n+}"}, {"sha": "8561d53a0d3611c78b611fdde6f402aa89ed1f29", "filename": "src/libstd/build.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+extern crate build_helper;\n+\n+use std::env;\n+use std::fs;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+use build_helper::run;\n+\n+fn main() {\n+    let target = env::var(\"TARGET\").unwrap();\n+    let host = env::var(\"HOST\").unwrap();\n+    if !target.contains(\"apple\") && !target.contains(\"msvc\") {\n+        build_libbacktrace(&host, &target);\n+    }\n+\n+    if target.contains(\"unknown-linux\") {\n+        if target.contains(\"musl\") {\n+            println!(\"cargo:rustc-link-lib=static=unwind\");\n+        } else {\n+            println!(\"cargo:rustc-link-lib=dl\");\n+            println!(\"cargo:rustc-link-lib=rt\");\n+            println!(\"cargo:rustc-link-lib=pthread\");\n+            println!(\"cargo:rustc-link-lib=gcc_s\");\n+        }\n+    } else if target.contains(\"android\") {\n+        println!(\"cargo:rustc-link-lib=dl\");\n+        println!(\"cargo:rustc-link-lib=log\");\n+        println!(\"cargo:rustc-link-lib=gcc\");\n+    } else if target.contains(\"freebsd\") {\n+        println!(\"cargo:rustc-link-lib=execinfo\");\n+        println!(\"cargo:rustc-link-lib=pthread\");\n+        println!(\"cargo:rustc-link-lib=gcc_s\");\n+    } else if target.contains(\"dragonfly\") || target.contains(\"bitrig\") ||\n+              target.contains(\"netbsd\") || target.contains(\"openbsd\") {\n+        println!(\"cargo:rustc-link-lib=pthread\");\n+\n+        if target.contains(\"rumprun\") {\n+            println!(\"cargo:rustc-link-lib=unwind\");\n+        } else if target.contains(\"netbsd\") || target.contains(\"openbsd\") {\n+            println!(\"cargo:rustc-link-lib=gcc\");\n+        } else if target.contains(\"bitrig\") {\n+            println!(\"cargo:rustc-link-lib=c++abi\");\n+        } else if target.contains(\"dragonfly\") {\n+            println!(\"cargo:rustc-link-lib=gcc_pic\");\n+        }\n+    } else if target.contains(\"apple-darwin\") {\n+        println!(\"cargo:rustc-link-lib=System\");\n+    } else if target.contains(\"apple-ios\") {\n+        println!(\"cargo:rustc-link-lib=System\");\n+        println!(\"cargo:rustc-link-lib=objc\");\n+        println!(\"cargo:rustc-link-lib=framework=Security\");\n+        println!(\"cargo:rustc-link-lib=framework=Foundation\");\n+    } else if target.contains(\"windows\") {\n+        if target.contains(\"windows-gnu\") {\n+            println!(\"cargo:rustc-link-lib=gcc_eh\");\n+        }\n+        println!(\"cargo:rustc-link-lib=advapi32\");\n+        println!(\"cargo:rustc-link-lib=ws2_32\");\n+        println!(\"cargo:rustc-link-lib=userenv\");\n+        println!(\"cargo:rustc-link-lib=shell32\");\n+    }\n+}\n+\n+fn build_libbacktrace(host: &str, target: &str) {\n+    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n+    let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n+\n+    println!(\"cargo:rustc-link-lib=static=backtrace\");\n+    println!(\"cargo:rustc-link-search=native={}/.libs\", build_dir.display());\n+\n+    if fs::metadata(&build_dir.join(\".libs/libbacktrace.a\")).is_ok() {\n+        return\n+    }\n+\n+    let compiler = gcc::Config::new().get_compiler();\n+    let ar = build_helper::cc2ar(compiler.path(), target);\n+    let cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n+                         .collect::<Vec<_>>().join(\" \");\n+    run(Command::new(\"sh\")\n+                .current_dir(&build_dir)\n+                .arg(src_dir.join(\"configure\").to_str().unwrap()\n+                            .replace(\"C:\\\\\", \"/c/\")\n+                            .replace(\"\\\\\", \"/\"))\n+                .arg(\"--with-pic\")\n+                .arg(\"--disable-multilib\")\n+                .arg(\"--disable-shared\")\n+                .arg(\"--disable-host-shared\")\n+                .arg(format!(\"--host={}\", build_helper::gnu_target(target)))\n+                .arg(format!(\"--build={}\", build_helper::gnu_target(host)))\n+                .env(\"CC\", compiler.path())\n+                .env(\"AR\", &ar)\n+                .env(\"RANLIB\", format!(\"{} s\", ar.display()))\n+                .env(\"CFLAGS\", cflags));\n+    run(Command::new(\"make\")\n+                .current_dir(&build_dir)\n+                .arg(format!(\"INCDIR={}\", src_dir.display()))\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").unwrap()));\n+}"}]}