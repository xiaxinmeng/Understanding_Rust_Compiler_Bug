{"sha": "4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13", "node_id": "C_kwDOAAsO6NoAKDRiZDMyYWMzMWQ2ZWNjMjEyZGExOTFkYzJjYzA0N2ZiMGExZThlMTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T11:31:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T11:31:58Z"}, "message": "Rollup merge of #108879 - compiler-errors:constrained-root-var, r=lcnr\n\nUnconstrained terms should account for infer vars being equated\n\nFollow-up from the canonicalization PR, wanted to break this one out so I can approve the other PR.\n\nr? `@lcnr`", "tree": {"sha": "8c092f71c3cdb1d4ba382bf37e002ed6c2a70ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c092f71c3cdb1d4ba382bf37e002ed6c2a70ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkCxUuCRBK7hj4Ov3rIwAARPUIAAXOprzY2ghbtcswm/oqQyVS\nTQJiFVJTgRI39+oGrF799Eh5GdNv0jiVadcZ1GCGulpG4s2lJunoCBt3yTBFHssK\nD7R9ftrm9b732Rw5KTZJX5xmQ/kSV2CDrAIvY/umFl6cd/g5jppiUsSkeoSb4Iqg\n/aRXg/gemGRmdYxfOGxDIotZSaZUl2bPpcRrvbYSbt4ZMjljG6Q9DTLd51pU44gE\n1rDxtadIU6YHo1DpaSJGVC4zAuAEVwdiYtADcc4hNZAwGrK/3kKIdzHejbMNOapP\ndIDdOVkDfvl49txNd6iKRfXXxLG1j9O16IAmTlnh0TTY60vx6YqElLJzxwZqWog=\n=hyoh\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c092f71c3cdb1d4ba382bf37e002ed6c2a70ea8\nparent 104f4300cfddbd956e32820ef202a732f06ec848\nparent a8f905cdd9dda7b87d78faca5270da4552cf488e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678447918 +0100\ncommitter GitHub <noreply@github.com> 1678447918 +0100\n\nRollup merge of #108879 - compiler-errors:constrained-root-var, r=lcnr\n\nUnconstrained terms should account for infer vars being equated\n\nFollow-up from the canonicalization PR, wanted to break this one out so I can approve the other PR.\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13", "html_url": "https://github.com/rust-lang/rust/commit/4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104f4300cfddbd956e32820ef202a732f06ec848", "url": "https://api.github.com/repos/rust-lang/rust/commits/104f4300cfddbd956e32820ef202a732f06ec848", "html_url": "https://github.com/rust-lang/rust/commit/104f4300cfddbd956e32820ef202a732f06ec848"}, {"sha": "a8f905cdd9dda7b87d78faca5270da4552cf488e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f905cdd9dda7b87d78faca5270da4552cf488e", "html_url": "https://github.com/rust-lang/rust/commit/a8f905cdd9dda7b87d78faca5270da4552cf488e"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "ca438a103cf342b4655d573c43b7799b0fdc8aa6", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=4bd32ac31d6ecc212da191dc2cc047fb0a1e8e13", "patch": "@@ -93,37 +93,42 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         };\n \n         // Guard against `<T as Trait<?0>>::Assoc = ?0>`.\n-        struct ContainsTerm<'tcx> {\n+        struct ContainsTerm<'a, 'tcx> {\n             term: ty::Term<'tcx>,\n+            infcx: &'a InferCtxt<'tcx>,\n         }\n-        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'_, 'tcx> {\n             type BreakTy = ();\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if t.needs_infer() {\n-                    if ty::Term::from(t) == self.term {\n-                        ControlFlow::Break(())\n-                    } else {\n-                        t.super_visit_with(self)\n-                    }\n+                if let Some(vid) = t.ty_vid()\n+                    && let ty::TermKind::Ty(term) = self.term.unpack()\n+                    && let Some(term_vid) = term.ty_vid()\n+                    && self.infcx.root_var(vid) == self.infcx.root_var(term_vid)\n+                {\n+                    ControlFlow::Break(())\n+                } else if t.has_non_region_infer() {\n+                    t.super_visit_with(self)\n                 } else {\n                     ControlFlow::Continue(())\n                 }\n             }\n \n             fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if c.needs_infer() {\n-                    if ty::Term::from(c) == self.term {\n-                        ControlFlow::Break(())\n-                    } else {\n-                        c.super_visit_with(self)\n-                    }\n+                if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = c.kind()\n+                    && let ty::TermKind::Const(term) = self.term.unpack()\n+                    && let ty::ConstKind::Infer(ty::InferConst::Var(term_vid)) = term.kind()\n+                    && self.infcx.root_const_var(vid) == self.infcx.root_const_var(term_vid)\n+                {\n+                    ControlFlow::Break(())\n+                } else if c.has_non_region_infer() {\n+                    c.super_visit_with(self)\n                 } else {\n                     ControlFlow::Continue(())\n                 }\n             }\n         }\n \n-        let mut visitor = ContainsTerm { term: goal.predicate.term };\n+        let mut visitor = ContainsTerm { infcx: self.infcx, term: goal.predicate.term };\n \n         term_is_infer\n             && goal.predicate.projection_ty.visit_with(&mut visitor).is_continue()"}]}