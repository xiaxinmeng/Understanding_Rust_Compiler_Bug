{"sha": "c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "node_id": "C_kwDOAAsO6NoAKGM1MzUxYWQ0ZGNkOWYzZDczMjQxYjJhY2JmYzZiNDYzMWRhODQ1YzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T06:34:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T06:34:13Z"}, "message": "Auto merge of #105348 - JohnTitor:rollup-q9bichr, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #104967 (Fix UI issues with Rustdoc scrape-examples feature.)\n - #105207 (interpret: clobber return place when calling function)\n - #105246 (Fix --pass in compiletest)\n - #105256 (Add small comment explaining what `method-margins.goml` test is about)\n - #105289 (Fix dupe word typos)\n - #105309 (rustdoc: remove no-op mobile CSS `.sidebar { margin: 0; padding: 0 }`)\n - #105313 (Update books)\n - #105315 (Normalize inherent associated types after substitution)\n - #105324 (Point at GAT `where` clause when an obligation is unsatisfied)\n - #105338 (Tweak \"the following other types implement trait\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d6b8fd62a144451f67bdc13002af6466cdd8e1e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b8fd62a144451f67bdc13002af6466cdd8e1e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "html_url": "https://github.com/rust-lang/rust/commit/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "html_url": "https://github.com/rust-lang/rust/commit/ed61c139c2bc778ebb91f5dd6a5393aa20467f78"}, {"sha": "1310d9bd2b9283fa311b8706b2bca59a4dff63d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1310d9bd2b9283fa311b8706b2bca59a4dff63d5", "html_url": "https://github.com/rust-lang/rust/commit/1310d9bd2b9283fa311b8706b2bca59a4dff63d5"}], "stats": {"total": 711, "additions": 285, "deletions": 426}, "files": [{"sha": "3dfded2d930a052c305859ed257536285303eda8", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -240,7 +240,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n                     let align = ImmTy::from_uint(target_align, args[1].layout).into();\n                     let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty())?;\n \n-                    // We replace the entire entire function call with a \"tail call\".\n+                    // We replace the entire function call with a \"tail call\".\n                     // Note that this happens before the frame of the original function\n                     // is pushed on the stack.\n                     self.eval_fn_call("}, {"sha": "e17d3e516a64fb72ae438726e275956340bb2e24", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -676,6 +676,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         return_to_block: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n         trace!(\"body: {:#?}\", body);\n+        // Clobber previous return place contents, nobody is supposed to be able to see them any more\n+        // This also checks dereferenceable, but not align. We rely on all constructed places being\n+        // sufficiently aligned (in particular we rely on `deref_operand` checking alignment).\n+        self.write_uninit(return_place)?;\n         // first push a stack frame so we have access to the local substs\n         let pre_frame = Frame {\n             body,"}, {"sha": "66906b331da2ece663b3b06fb9883a144b5d474a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1930,6 +1930,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     adt_substs,\n                 );\n                 let ty = tcx.bound_type_of(assoc_ty_did).subst(tcx, item_substs);\n+                let ty = self.normalize_ty(span, ty);\n                 return Ok((ty, DefKind::AssocTy, assoc_ty_did));\n             }\n         }"}, {"sha": "7df0114226418c890378eea776e08cc4b6b82973", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -406,7 +406,7 @@ impl<V: Clone> Clone for StateData<V> {\n /// The dataflow state for an instance of [`ValueAnalysis`].\n ///\n /// Every instance specifies a lattice that represents the possible values of a single tracked\n-/// place. If we call this lattice `V` and set set of tracked places `P`, then a [`State`] is an\n+/// place. If we call this lattice `V` and set of tracked places `P`, then a [`State`] is an\n /// element of `{unreachable} \u222a (P -> V)`. This again forms a lattice, where the bottom element is\n /// `unreachable` and the top element is the mapping `p \u21a6 \u22a4`. Note that the mapping `p \u21a6 \u22a5` is not\n /// the bottom element (because joining an unreachable and any other reachable state yields a"}, {"sha": "cf3e5946053fe514f5b9195784e93e37d63e053f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1927,7 +1927,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 // We have a single lifetime => success.\n                                 elision_lifetime = Elision::Param(res)\n                             } else {\n-                                // We have have multiple lifetimes => error.\n+                                // We have multiple lifetimes => error.\n                                 elision_lifetime = Elision::Err;\n                             }\n                         }"}, {"sha": "12cc72d30c87e09860f7a5a1454b4be6574b9b22", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1810,7 +1810,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>> {\n-        self.tcx\n+        let mut candidates: Vec<_> = self\n+            .tcx\n             .all_impls(trait_pred.def_id())\n             .filter_map(|def_id| {\n                 if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative\n@@ -1826,7 +1827,14 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.fuzzy_match_tys(trait_pred.skip_binder().self_ty(), imp.self_ty(), false)\n                     .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n             })\n-            .collect()\n+            .collect();\n+        if candidates.iter().any(|c| matches!(c.similarity, CandidateSimilarity::Exact { .. })) {\n+            // If any of the candidates is a perfect match, we don't want to show all of them.\n+            // This is particularly relevant for the case of numeric types (as they all have the\n+            // same cathegory).\n+            candidates.retain(|c| matches!(c.similarity, CandidateSimilarity::Exact { .. }));\n+        }\n+        candidates\n     }\n \n     fn report_similar_impl_candidates("}, {"sha": "71f6eae45aa542963bd3a64d7a5e2c9821df3d2d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -2321,11 +2321,10 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n     nested: &mut Vec<PredicateObligation<'tcx>>,\n ) {\n     let tcx = selcx.tcx();\n-    for predicate in tcx\n+    let own = tcx\n         .predicates_of(obligation.predicate.item_def_id)\n-        .instantiate_own(tcx, obligation.predicate.substs)\n-        .predicates\n-    {\n+        .instantiate_own(tcx, obligation.predicate.substs);\n+    for (predicate, span) in std::iter::zip(own.predicates, own.spans) {\n         let normalized = normalize_with_depth_to(\n             selcx,\n             obligation.param_env,\n@@ -2334,9 +2333,30 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n             predicate,\n             nested,\n         );\n+\n+        let nested_cause = if matches!(\n+            obligation.cause.code(),\n+            super::CompareImplItemObligation { .. }\n+                | super::CheckAssociatedTypeBounds { .. }\n+                | super::AscribeUserTypeProvePredicate(..)\n+        ) {\n+            obligation.cause.clone()\n+        } else if span.is_dummy() {\n+            ObligationCause::new(\n+                obligation.cause.span,\n+                obligation.cause.body_id,\n+                super::ItemObligation(obligation.predicate.item_def_id),\n+            )\n+        } else {\n+            ObligationCause::new(\n+                obligation.cause.span,\n+                obligation.cause.body_id,\n+                super::BindingObligation(obligation.predicate.item_def_id, span),\n+            )\n+        };\n         nested.push(Obligation::with_depth(\n             tcx,\n-            obligation.cause.clone(),\n+            nested_cause,\n             obligation.recursion_depth + 1,\n             obligation.param_env,\n             normalized,"}, {"sha": "fd8d25ce1a55e3b2280652cbf9bf2ac593edf4fd", "filename": "library/core/src/iter/sources/repeat_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -20,7 +20,7 @@ use crate::mem::ManuallyDrop;\n /// #![feature(iter_repeat_n)]\n /// use std::iter;\n ///\n-/// // four of the the number four:\n+/// // four of the number four:\n /// let mut four_fours = iter::repeat_n(4, 4);\n ///\n /// assert_eq!(Some(4), four_fours.next());"}, {"sha": "19da6d2fbecbc678960fcd282219f63cc5c2264a", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1894,7 +1894,7 @@ unsafe fn small_slice_eq(x: &[u8], y: &[u8]) -> bool {\n     // Thus, derefencing both `px` and `py` in the loop below is safe.\n     //\n     // Moreover, we set `pxend` and `pyend` to be 4 bytes before the actual\n-    // end of of `px` and `py`. Thus, the final dereference outside of the\n+    // end of `px` and `py`. Thus, the final dereference outside of the\n     // loop is guaranteed to be valid. (The final comparison will overlap with\n     // the last comparison done in the loop for lengths that aren't multiples\n     // of four.)"}, {"sha": "f71edc6c525a2aeb61abe424c19588741786326b", "filename": "library/std/src/sync/mpmc/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -225,7 +225,7 @@ impl<T> Channel<T> {\n             let slot = unsafe { self.buffer.get_unchecked(index) };\n             let stamp = slot.stamp.load(Ordering::Acquire);\n \n-            // If the the stamp is ahead of the head by 1, we may attempt to pop.\n+            // If the stamp is ahead of the head by 1, we may attempt to pop.\n             if head + 1 == stamp {\n                 let new = if index + 1 < self.cap {\n                     // Same lap, incremented index."}, {"sha": "ada69aa8269f6cb1ea4779486c5e07d90e8c30a6", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -46,7 +46,7 @@ impl ScopeData {\n         // We check for 'overflow' with usize::MAX / 2, to make sure there's no\n         // chance it overflows to 0, which would result in unsoundness.\n         if self.num_running_threads.fetch_add(1, Ordering::Relaxed) > usize::MAX / 2 {\n-            // This can only reasonably happen by mem::forget()'ing many many ScopedJoinHandles.\n+            // This can only reasonably happen by mem::forget()'ing a lot of ScopedJoinHandles.\n             self.decrement_num_running_threads(false);\n             panic!(\"too many running threads in thread scope\");\n         }"}, {"sha": "a60f4316ec923a5ac2ed6a2eba6960edb832d855", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1 +1 @@\n-Subproject commit 3f64052c048c6def93b94a2b514ee88bba918744\n+Subproject commit a60f4316ec923a5ac2ed6a2eba6960edb832d855"}, {"sha": "19f798d448835a4888e3b3eae7fe69f1d61d8681", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1 +1 @@\n-Subproject commit c533348edd69f11a8f4225d633a05d7093fddbf3\n+Subproject commit 19f798d448835a4888e3b3eae7fe69f1d61d8681"}, {"sha": "ae406aa5287a9e025abb72343aaceec98458c117", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1 +1 @@\n-Subproject commit 05532356e7a4dbea2330aabb77611f5179493bb8\n+Subproject commit ae406aa5287a9e025abb72343aaceec98458c117"}, {"sha": "3ae62681ff236d5528ef7c8c28ba7c6b2ecc6731", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1 +1 @@\n-Subproject commit 9f0cc13ffcd27c1fbe1ab766a9491e15ddcf4d19\n+Subproject commit 3ae62681ff236d5528ef7c8c28ba7c6b2ecc6731"}, {"sha": "a9869b4a3c4cac3bc6099b41f088679e268400b8", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1 +1 @@\n-Subproject commit 2b15c0abf2bada6e00553814336bc3e2d8399097\n+Subproject commit a9869b4a3c4cac3bc6099b41f088679e268400b8"}, {"sha": "e269950a57fa6fcda356426545fb5aa3691a7ced", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1 +1 @@\n-Subproject commit d0dc6c97a6486f68bac782fff135086eae6d77ec\n+Subproject commit e269950a57fa6fcda356426545fb5aa3691a7ced"}, {"sha": "528e99d2ce0fd06fadfded06b2e9e8ace86887bd", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1660,8 +1660,6 @@ in storage.js\n \t\t/* Hide the sidebar offscreen while not in use. Doing this instead of display: none means\n \t\t   the sidebar stays visible for screen readers, which is useful for navigation. */\n \t\tleft: -1000px;\n-\t\tmargin: 0;\n-\t\tpadding: 0;\n \t\tz-index: 11;\n \t\t/* Reduce height slightly to account for mobile topbar. */\n \t\theight: calc(100vh - 45px);\n@@ -1978,7 +1976,9 @@ in storage.js\n }\n \n .scraped-example .code-wrapper .example-wrap {\n-\tflex: 1;\n+\tdisplay: grid;\n+\tgrid-template-columns: max-content auto;\n+\twidth: 100%;\n \toverflow-x: auto;\n \toverflow-y: hidden;\n \tmargin-bottom: 0;"}, {"sha": "e328e656edda4caa59625cdca9b5c0b9d53b143f", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -57,7 +57,7 @@\n                     });\n                 });\n \n-            example.querySelector(\"next\")\n+            example.querySelector(\".next\")\n                 .addEventListener(\"click\", () => {\n                     onChangeLoc(() => {\n                         locIndex = (locIndex + 1) % locs.length;"}, {"sha": "b48b82307ebc3c672a87b2af3765250ea6081748", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -130,4 +130,4 @@ static_files! {\n     nanum_barun_gothic_license => \"static/fonts/NanumBarunGothic-LICENSE.txt\",\n }\n \n-pub(crate) static SCRAPE_EXAMPLES_HELP_MD: &str = include_str!(\"static/js/scrape-examples.js\");\n+pub(crate) static SCRAPE_EXAMPLES_HELP_MD: &str = include_str!(\"static/scrape-examples-help.md\");"}, {"sha": "ed36bcdec17d2261f9ad058f6b3a1724006fa910", "filename": "src/test/rustdoc-gui/method-margins.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Frustdoc-gui%2Fmethod-margins.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Frustdoc-gui%2Fmethod-margins.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmethod-margins.goml?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1,3 +1,4 @@\n+// This test ensures that the margins on methods are coherent inside an impl block.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait_members/struct.HasTrait.html#impl-TraitMembers-for-HasTrait\"\n \n assert-count: (\"#trait-implementations-list > .rustdoc-toggle\", 1)"}, {"sha": "a222139f1dc44751b44ff9fbf7b9a44e210ad96f", "filename": "src/test/rustdoc-gui/scrape-examples-button-focus.goml", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -1,4 +1,17 @@\n goto: \"file://\" + |DOC_PATH| + \"/scrape_examples/fn.test.html\"\n+\n+store-property: (initialScrollTop, \".scraped-example-list > .scraped-example pre\", \"scrollTop\")\n+focus: \".scraped-example-list > .scraped-example .next\"\n+press-key: \"Enter\"\n+assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n+\t\"scrollTop\": |initialScrollTop|\n+})\n+focus: \".scraped-example-list > .scraped-example .prev\"\n+press-key: \"Enter\"\n+assert-property: (\".scraped-example-list > .scraped-example pre\", {\n+\t\"scrollTop\": |initialScrollTop|\n+})\n+\n store-property: (smallOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n \t\"scrollHeight\": |smallOffsetHeight|"}, {"sha": "b3f682fe4973cd2ce83decbfe9c2b60d4812cb15", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -22,4 +22,5 @@ fn main() {\n         println!(\"hello world!\");\n         println!(\"hello world!\");\n     }\n+    scrape_examples::test();\n }"}, {"sha": "50763ecddf99c34dc1a9447e7106675f5686945e", "filename": "src/test/ui/associated-inherent-types/normalize-projection-0.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fnormalize-projection-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fnormalize-projection-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fnormalize-projection-0.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct S<T>(T);\n+\n+impl<T: O> S<T> {\n+    type P = <T as O>::P;\n+}\n+\n+trait O {\n+    type P;\n+}\n+\n+impl O for i32 {\n+    type P = String;\n+}\n+\n+fn main() {\n+    let _: S<i32>::P = String::new();\n+}"}, {"sha": "2f7b2551a03eced2c807406d1c922748196f513b", "filename": "src/test/ui/associated-inherent-types/normalize-projection-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fnormalize-projection-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fnormalize-projection-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fnormalize-projection-1.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl S {\n+    type P<T: O> = <T as O>::P;\n+}\n+\n+trait O {\n+    type P;\n+}\n+\n+impl O for i32 {\n+    type P = String;\n+}\n+\n+fn main() {\n+    let _: S::P<i32> = String::new();\n+}"}, {"sha": "c986bc3fd1e3e15003216d93ffe183e8eb38f271", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -6,15 +6,10 @@ LL |     x * y\n    |\n    = help: the trait `Mul<f32>` is not implemented for `i32`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n-             <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n              <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&i32 as Mul<&i32>>\n+             <i32 as Mul<&i32>>\n+             <i32 as Mul>\n \n error: aborting due to previous error\n "}, {"sha": "a46bd53520b539ff8dfb6558d770d58045533b81", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -18,9 +18,7 @@ LL |\n LL |     1_u32\n    |     ----- return type was inferred to be `u32` here\n    |\n-   = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2>>\n-             <u64 as Traitor<1, 2>>\n+   = help: the trait `Traitor<N, 2>` is implemented for `u32`\n \n error[E0277]: the trait bound `u64: Traitor` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:21:13\n@@ -31,9 +29,7 @@ LL |\n LL |     1_u64\n    |     ----- return type was inferred to be `u64` here\n    |\n-   = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2>>\n-             <u64 as Traitor<1, 2>>\n+   = help: the trait `Traitor<1, 2>` is implemented for `u64`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f199170018f20b322a6971a8b21205052e6c5425", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -12,15 +12,10 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n    |\n    = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n              <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i8 as Add<&i8>>\n+             <i8 as Add<&i8>>\n+             <i8 as Add>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f8e402317aa8d5bcb095bdbac13f453336137d5", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -12,15 +12,10 @@ LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |\n    = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n              <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i8 as Add<&i8>>\n+             <i8 as Add<&i8>>\n+             <i8 as Add>\n \n error[E0604]: only `u8` can be cast as `char`, not `i8`\n   --> $DIR/const-eval-overflow-4b.rs:22:13"}, {"sha": "7229b9ac986ac73df2909af829ff3fb6d0d5730e", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -12,10 +12,6 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n-             <u8 as Foo<bool>>\n-             <u8 as Foo<u16>>\n-             <u8 as Foo<u32>>\n-             <u8 as Foo<u64>>\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -26,11 +22,6 @@ LL |     Foo::<i32>::bar(&1u8);\n    |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Foo<B>`:\n-             <i8 as Foo<bool>>\n-             <i8 as Foo<u16>>\n-             <i8 as Foo<u32>>\n-             <i8 as Foo<u64>>\n-             <i8 as Foo<u8>>\n              <u8 as Foo<bool>>\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>"}, {"sha": "3699f7296f5d0ac08e5b129ccd716aa4b93d7d6e", "filename": "src/test/ui/generic-associated-types/own-bound-span.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -0,0 +1,17 @@\n+struct S;\n+\n+trait D {\n+    type P<T: Copy>;\n+    //~^ NOTE required by this bound in `D::P`\n+    //~| NOTE required by a bound in `D::P`\n+}\n+\n+impl D for S {\n+    type P<T: Copy> = ();\n+}\n+\n+fn main() {\n+    let _: <S as D>::P<String>;\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied\n+    //~| NOTE the trait `Copy` is not implemented for `String`\n+}"}, {"sha": "8ab8ea623b2c93d674d096da4b55fe3f19c923c5", "filename": "src/test/ui/generic-associated-types/own-bound-span.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/own-bound-span.rs:14:12\n+   |\n+LL |     let _: <S as D>::P<String>;\n+   |            ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by a bound in `D::P`\n+  --> $DIR/own-bound-span.rs:4:15\n+   |\n+LL |     type P<T: Copy>;\n+   |               ^^^^ required by this bound in `D::P`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "69f4cbbbf429496a67df930d0bdd32a1a27e07f5", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -30,15 +30,10 @@ LL |         n + sum_to(n - 1)\n    |\n    = help: the trait `Add<impl Foo>` is not implemented for `u32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a u32 as Add<u32>>\n+             <&u32 as Add<&u32>>\n+             <u32 as Add<&u32>>\n+             <u32 as Add>\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "1f51b6e29050cef2fa19e3c9659ae5442cd49bcd", "filename": "src/test/ui/issues/issue-24352.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -6,15 +6,10 @@ LL |     1.0f64 - 1\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     1.0f64 - 1.0"}, {"sha": "9af89159a8cfcec0f98cf91bcbbff4f358b7e34d", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -4,16 +4,7 @@ error[E0277]: the trait bound `&'static mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n-   = help: the following other types implement trait `Copy`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -26,16 +17,7 @@ error[E0277]: the trait bound `&'a mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n-   = help: the following other types implement trait `Copy`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "ce41942467cea1a9fb34bcfe201485e2cbd3bd34", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -42,12 +42,11 @@ LL |     if x == y {}\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<&'a str>>\n-             <String as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<str>>\n-             <String as PartialEq>\n              <str as PartialEq<Cow<'a, str>>>\n-           and 4 others\n+             <str as PartialEq<OsStr>>\n+             <str as PartialEq<OsString>>\n+             <str as PartialEq<String>>\n+             <str as PartialEq>\n \n error[E0308]: mismatched types\n   --> $DIR/lex-bad-char-literals-6.rs:15:20\n@@ -68,12 +67,11 @@ LL |     if x == z {}\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<&'a str>>\n-             <String as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<str>>\n-             <String as PartialEq>\n              <str as PartialEq<Cow<'a, str>>>\n-           and 4 others\n+             <str as PartialEq<OsStr>>\n+             <str as PartialEq<OsString>>\n+             <str as PartialEq<String>>\n+             <str as PartialEq>\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3585587ed4c02d6df35458b1aca982bf62b51970", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -24,15 +24,10 @@ LL |     2 as usize - Some(1);\n    |\n    = help: the trait `Sub<Option<{integer}>>` is not implemented for `usize`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n-             <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&'a usize as Sub<usize>>\n+             <&usize as Sub<&usize>>\n+             <usize as Sub<&usize>>\n+             <usize as Sub>\n \n error[E0277]: cannot multiply `{integer}` by `()`\n   --> $DIR/binops.rs:4:7"}, {"sha": "2d22da0b420e0b171ebf5af60d1dd56660cf2d47", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -6,15 +6,10 @@ LL |     2_usize + (loop {});\n    |\n    = help: the trait `Add<()>` is not implemented for `usize`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a usize as Add<usize>>\n+             <&usize as Add<&usize>>\n+             <usize as Add<&usize>>\n+             <usize as Add>\n \n error: aborting due to previous error\n "}, {"sha": "8f0eef237cfe216601efbfadc2be0f0c770e32b7", "filename": "src/test/ui/numbers-arithmetic/not-suggest-float-literal.stderr", "status": "modified", "additions": 41, "deletions": 100, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -6,15 +6,10 @@ LL |     x + 100.0\n    |\n    = help: the trait `Add<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a u8 as Add<u8>>\n+             <&u8 as Add<&u8>>\n+             <u8 as Add<&u8>>\n+             <u8 as Add>\n \n error[E0277]: cannot add `&str` to `f64`\n   --> $DIR/not-suggest-float-literal.rs:6:7\n@@ -24,15 +19,10 @@ LL |     x + \"foo\"\n    |\n    = help: the trait `Add<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n \n error[E0277]: cannot add `{integer}` to `f64`\n   --> $DIR/not-suggest-float-literal.rs:11:7\n@@ -42,15 +32,10 @@ LL |     x + y\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n \n error[E0277]: cannot subtract `{float}` from `u8`\n   --> $DIR/not-suggest-float-literal.rs:15:7\n@@ -60,15 +45,10 @@ LL |     x - 100.0\n    |\n    = help: the trait `Sub<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n-             <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&'a u8 as Sub<u8>>\n+             <&u8 as Sub<&u8>>\n+             <u8 as Sub<&u8>>\n+             <u8 as Sub>\n \n error[E0277]: cannot subtract `&str` from `f64`\n   --> $DIR/not-suggest-float-literal.rs:19:7\n@@ -78,15 +58,10 @@ LL |     x - \"foo\"\n    |\n    = help: the trait `Sub<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n \n error[E0277]: cannot subtract `{integer}` from `f64`\n   --> $DIR/not-suggest-float-literal.rs:24:7\n@@ -96,15 +71,10 @@ LL |     x - y\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n \n error[E0277]: cannot multiply `u8` by `{float}`\n   --> $DIR/not-suggest-float-literal.rs:28:7\n@@ -114,15 +84,10 @@ LL |     x * 100.0\n    |\n    = help: the trait `Mul<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n-             <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&'a u8 as Mul<u8>>\n+             <&u8 as Mul<&u8>>\n+             <u8 as Mul<&u8>>\n+             <u8 as Mul>\n \n error[E0277]: cannot multiply `f64` by `&str`\n   --> $DIR/not-suggest-float-literal.rs:32:7\n@@ -132,15 +97,10 @@ LL |     x * \"foo\"\n    |\n    = help: the trait `Mul<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n \n error[E0277]: cannot multiply `f64` by `{integer}`\n   --> $DIR/not-suggest-float-literal.rs:37:7\n@@ -150,15 +110,10 @@ LL |     x * y\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n \n error[E0277]: cannot divide `u8` by `{float}`\n   --> $DIR/not-suggest-float-literal.rs:41:7\n@@ -168,15 +123,11 @@ LL |     x / 100.0\n    |\n    = help: the trait `Div<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n-             <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&'a u8 as Div<u8>>\n+             <&u8 as Div<&u8>>\n+             <u8 as Div<&u8>>\n+             <u8 as Div<NonZeroU8>>\n+             <u8 as Div>\n \n error[E0277]: cannot divide `f64` by `&str`\n   --> $DIR/not-suggest-float-literal.rs:45:7\n@@ -186,15 +137,10 @@ LL |     x / \"foo\"\n    |\n    = help: the trait `Div<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n \n error[E0277]: cannot divide `f64` by `{integer}`\n   --> $DIR/not-suggest-float-literal.rs:50:7\n@@ -204,15 +150,10 @@ LL |     x / y\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n \n error: aborting due to 12 previous errors\n "}, {"sha": "03779d356371aacb52800360d926570ee4b8ea51", "filename": "src/test/ui/numbers-arithmetic/suggest-float-literal.stderr", "status": "modified", "additions": 24, "deletions": 64, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -7,14 +7,9 @@ LL |     x + 100\n    = help: the trait `Add<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f32 as Add<&f32>>\n+             <f32 as Add<&f32>>\n+             <f32 as Add>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x + 100.0\n@@ -28,15 +23,10 @@ LL |     x + 100\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x + 100.0\n@@ -51,14 +41,9 @@ LL |     x - 100\n    = help: the trait `Sub<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n-             <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f32 as Sub<&f32>>\n+             <f32 as Sub<&f32>>\n+             <f32 as Sub>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x - 100.0\n@@ -72,15 +57,10 @@ LL |     x - 100\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x - 100.0\n@@ -95,14 +75,9 @@ LL |     x * 100\n    = help: the trait `Mul<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n-             <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f32 as Mul<&f32>>\n+             <f32 as Mul<&f32>>\n+             <f32 as Mul>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x * 100.0\n@@ -116,15 +91,10 @@ LL |     x * 100\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x * 100.0\n@@ -139,14 +109,9 @@ LL |     x / 100\n    = help: the trait `Div<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n-             <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f32 as Div<&f32>>\n+             <f32 as Div<&f32>>\n+             <f32 as Div>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x / 100.0\n@@ -160,15 +125,10 @@ LL |     x / 100\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x / 100.0"}, {"sha": "f05b0cd65381b5bd399262e3d025f444ac506f12", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-GAT.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -3,10 +3,10 @@ error[E0311]: the parameter type `Self` may not live long enough\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/object-safety-supertrait-mentions-GAT.rs:9:39\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:6:15\n    |\n-LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n-   |                                       ^^^^^^^^^^^\n+LL |         Self: 'a;\n+   |               ^^\n \n error: associated item referring to unboxed trait object for its own trait\n   --> $DIR/object-safety-supertrait-mentions-GAT.rs:10:20"}, {"sha": "a8deb8a7550bc5e5ea8e7ec586386ec431061595", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-requires-both-partialeq-and-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -5,7 +5,7 @@ struct Foo {\n \n impl PartialEq for Foo {\n     fn eq(&self, _: &Foo) -> bool {\n-        false // ha ha sucker!\n+        false // ha ha!\n     }\n }\n "}, {"sha": "b44df962a9ba76400fcbb5445d00d00e59197341", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -6,15 +6,10 @@ LL |     foo(1 as u32 +\n    |\n    = help: the trait `Add<()>` is not implemented for `u32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a u32 as Add<u32>>\n+             <&u32 as Add<&u32>>\n+             <u32 as Add<&u32>>\n+             <u32 as Add>\n \n error: aborting due to previous error\n "}, {"sha": "08f7bbbf0eafe7fb4309cc0f4ba7c4e24dab3321", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -7,10 +7,7 @@ LL | struct Foo<'a, T> {\n LL |     bar: &'a mut T\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&mut T`\n    |\n-   = help: the following other types implement trait `Clone`:\n-             &T\n-             *const T\n-             *mut T\n+   = help: the trait `Clone` is implemented for `&T`\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a49630adb9538b83d0ad7755fe577768b6cb674f", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -8,15 +8,8 @@ LL |     Ok(Err(123_i32)?)\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n-             <f32 as From<i16>>\n-             <f32 as From<i8>>\n-             <f32 as From<u16>>\n-             <f32 as From<u8>>\n-             <f64 as From<f32>>\n-             <f64 as From<i16>>\n-             <f64 as From<i32>>\n-             <f64 as From<i8>>\n-           and 68 others\n+             <u8 as From<NonZeroU8>>\n+             <u8 as From<bool>>\n    = note: required for `Result<u64, u8>` to implement `FromResidual<Result<Infallible, i32>>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`"}, {"sha": "c2cf70687fd20bfca203f12e14e50fef82f11d56", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -7,16 +7,7 @@ LL |     42_i32\n    |     ------ return type was inferred to be `i32` here\n    |\n    = help: the trait `PartialEq<Foo>` is not implemented for `i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error: aborting due to previous error\n "}, {"sha": "98c762e3d38207e29ed442005cff266dfe9a09c9", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -7,16 +7,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Bar<'b, 'static>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `Foo<'static, 'b>`\n   --> $DIR/self-referential-4.rs:11:31\n@@ -27,16 +18,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Foo<'static, 'b>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `Moo<'static, 'a>`\n   --> $DIR/self-referential-4.rs:17:31\n@@ -47,16 +29,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Moo<'static, 'a>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "aff489d70e389f60e85f6e03583c92e3cd9d80f4", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -8,16 +8,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `(i32, &i32)`\n   --> $DIR/self-referential.rs:12:31\n@@ -29,16 +20,7 @@ LL |     (42, i)\n    |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n    = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n   --> $DIR/self-referential.rs:19:31\n@@ -50,16 +32,7 @@ LL |     (42, i)\n    |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n    = help: the trait `PartialEq<(i32, Moo<'b, 'a>::{opaque#0})>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9ba63ffe9c93f4de1b45f28f6dde3d0937926d27", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -66,15 +66,10 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "6976be71135c2dfe92f08724249dfc56c9493f11", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -21,15 +21,10 @@ LL |     a = c + b * 5;\n    |\n    = help: the trait `Add<u16>` is not implemented for `usize`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a usize as Add<usize>>\n+             <&usize as Add<&usize>>\n+             <usize as Add<&usize>>\n+             <usize as Add>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ed56e1cf957f5c719c0b3ea01f37448ae2b2a354", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -8,15 +8,10 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:7:28\n@@ -62,15 +57,10 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64d97e9144230fcf8cb665f35677f021c3f77a66", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "patch": "@@ -260,9 +260,9 @@ impl TestProps {\n         props.load_from(testfile, cfg, config);\n \n         match (props.pass_mode, props.fail_mode) {\n-            (None, None) => props.fail_mode = Some(FailMode::Check),\n-            (Some(_), None) | (None, Some(_)) => {}\n+            (None, None) if config.mode == Mode::Ui => props.fail_mode = Some(FailMode::Check),\n             (Some(_), Some(_)) => panic!(\"cannot use a *-fail and *-pass mode together\"),\n+            _ => {}\n         }\n \n         props\n@@ -522,8 +522,8 @@ impl TestProps {\n     }\n \n     pub fn pass_mode(&self, config: &Config) -> Option<PassMode> {\n-        if !self.ignore_pass && self.fail_mode.is_none() && config.mode == Mode::Ui {\n-            if let (mode @ Some(_), Some(_)) = (config.force_pass_mode, self.pass_mode) {\n+        if !self.ignore_pass && self.fail_mode.is_none() {\n+            if let mode @ Some(_) = config.force_pass_mode {\n                 return mode;\n             }\n         }"}]}