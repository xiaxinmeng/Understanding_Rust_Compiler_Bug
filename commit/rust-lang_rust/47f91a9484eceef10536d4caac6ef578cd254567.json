{"sha": "47f91a9484eceef10536d4caac6ef578cd254567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjkxYTk0ODRlY2VlZjEwNTM2ZDRjYWFjNmVmNTc4Y2QyNTQ1Njc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T03:49:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T06:04:31Z"}, "message": "Register new snapshots", "tree": {"sha": "f966ba8492d954fbff298bc8f9f6be9cda3a2449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f966ba8492d954fbff298bc8f9f6be9cda3a2449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f91a9484eceef10536d4caac6ef578cd254567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f91a9484eceef10536d4caac6ef578cd254567", "html_url": "https://github.com/rust-lang/rust/commit/47f91a9484eceef10536d4caac6ef578cd254567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f91a9484eceef10536d4caac6ef578cd254567/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665ea963d3c29ef7670662707f2f2307f000efa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/665ea963d3c29ef7670662707f2f2307f000efa3", "html_url": "https://github.com/rust-lang/rust/commit/665ea963d3c29ef7670662707f2f2307f000efa3"}], "stats": {"total": 572, "additions": 25, "deletions": 547}, "files": [{"sha": "b3c2638f3ae282a190c5318fe147c1873f7ea844", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -126,11 +126,3 @@ pub fn oom() -> ! {\n //                optimize it out).\n #[doc(hidden)]\n pub fn fixme_14344_be_sure_to_link_to_collections() {}\n-\n-// NOTE: remove after next snapshot\n-#[cfg(all(stage0, not(test)))]\n-#[doc(hidden)]\n-mod std {\n-    pub use core::fmt;\n-    pub use core::option;\n-}"}, {"sha": "f361c36ec8fa73bafb333c6a1a5284d851164ea9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -776,9 +776,7 @@ impl<T> RcBoxPtr<T> for Rc<T> {\n             // the contract anyway.\n             // This allows the null check to be elided in the destructor if we\n             // manipulated the reference count in the same function.\n-            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n-                assume(!self._ptr.is_null());\n-            }\n+            assume(!self._ptr.is_null());\n             &(**self._ptr)\n         }\n     }\n@@ -792,9 +790,7 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n             // the contract anyway.\n             // This allows the null check to be elided in the destructor if we\n             // manipulated the reference count in the same function.\n-            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n-                assume(!self._ptr.is_null());\n-            }\n+            assume(!self._ptr.is_null());\n             &(**self._ptr)\n         }\n     }"}, {"sha": "6196d94b5a6bd9be2d9892530686dc557b779069", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -655,17 +655,6 @@ impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T: Ord> IntoIterator for BinaryHeap<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     type Item = T;\n@@ -676,17 +665,6 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n     type Item = &'a T;"}, {"sha": "0b762788b208aca548cd565912652c2457a8c2bf", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -1070,17 +1070,6 @@ impl<'a> RandomAccessIterator for Iter<'a> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a> IntoIterator for &'a Bitv {\n-    type IntoIter = Iter<'a>;\n-\n-    fn into_iter(self) -> Iter<'a> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> IntoIterator for &'a Bitv {\n     type Item = bool;\n@@ -1895,17 +1884,6 @@ impl<'a> Iterator for SymmetricDifference<'a> {\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.0.size_hint() }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a> IntoIterator for &'a BitvSet {\n-    type IntoIter = SetIter<'a>;\n-\n-    fn into_iter(self) -> SetIter<'a> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> IntoIterator for &'a BitvSet {\n     type Item = usize;"}, {"sha": "747211e923859df6d1fbab7b13bfb3716f56afa9", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -462,17 +462,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<K, V> IntoIterator for BTreeMap<K, V> {\n-    type IntoIter = IntoIter<K, V>;\n-\n-    fn into_iter(self) -> IntoIter<K, V> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type Item = (K, V);\n@@ -483,17 +472,6 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n-    type IntoIter = Iter<'a, K, V>;\n-\n-    fn into_iter(self) -> Iter<'a, K, V> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n     type Item = (&'a K, &'a V);\n@@ -504,17 +482,6 @@ impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n-    type IntoIter = IterMut<'a, K, V>;\n-\n-    fn into_iter(mut self) -> IterMut<'a, K, V> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n     type Item = (&'a K, &'a mut V);"}, {"sha": "7ef887b70cc6ca4ec0736f56de47ba4330de0922", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -480,17 +480,6 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IntoIterator for BTreeSet<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> IntoIterator for BTreeSet<T> {\n     type Item = T;\n@@ -501,17 +490,6 @@ impl<T> IntoIterator for BTreeSet<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n     type Item = &'a T;"}, {"sha": "eb1bf93c0aafc56da88302b57292040a0e3b430a", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -837,17 +837,6 @@ impl<A> FromIterator<A> for DList<A> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IntoIterator for DList<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> IntoIterator for DList<T> {\n     type Item = T;\n@@ -858,17 +847,6 @@ impl<T> IntoIterator for DList<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a DList<T> {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a DList<T> {\n     type Item = &'a T;\n@@ -879,17 +857,6 @@ impl<'a, T> IntoIterator for &'a DList<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a mut DList<T> {\n-    type IntoIter = IterMut<'a, T>;\n-\n-    fn into_iter(mut self) -> IterMut<'a, T> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a mut DList<T> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;"}, {"sha": "d5403ca5d9b195b0e867ad76c2dd945c850b3415", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -257,17 +257,6 @@ impl<E:CLike> FromIterator<E> for EnumSet<E> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n-    type IntoIter = Iter<E>;\n-\n-    fn into_iter(self) -> Iter<E> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n     type Item = E;"}, {"sha": "cacbf3bce80f018e80016abe6d3396a407ecd402", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -111,15 +111,6 @@ pub fn fixme_14344_be_sure_to_link_to_collections() {}\n \n #[cfg(not(test))]\n mod std {\n-    // NOTE: remove after next snapshot\n-    #[cfg(stage0)] pub use core::clone;    // derive(Clone)\n-    #[cfg(stage0)] pub use core::cmp;      // derive(Eq, Ord, etc.)\n-    #[cfg(stage0)] pub use core::marker;   // derive(Copy)\n-    #[cfg(stage0)] pub use core::hash;     // derive(Hash)\n-    #[cfg(stage0)] pub use core::iter;\n-    #[cfg(stage0)] pub use core::fmt;      // necessary for panic!()\n-    #[cfg(stage0)] pub use core::option;   // necessary for panic!()\n-\n     pub use core::ops;      // RangeFull\n }\n "}, {"sha": "6dcdb21f8000b0f855b58445166cc24343787727", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -1704,17 +1704,6 @@ impl<A> FromIterator<A> for RingBuf<A> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IntoIterator for RingBuf<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> IntoIterator for RingBuf<T> {\n     type Item = T;\n@@ -1725,17 +1714,6 @@ impl<T> IntoIterator for RingBuf<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a RingBuf<T> {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a RingBuf<T> {\n     type Item = &'a T;\n@@ -1746,17 +1724,6 @@ impl<'a, T> IntoIterator for &'a RingBuf<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n-    type IntoIter = IterMut<'a, T>;\n-\n-    fn into_iter(mut self) -> IterMut<'a, T> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n     type Item = &'a mut T;"}, {"sha": "bde733644b5b58e4cce2a263fa5813befb555b29", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -1447,17 +1447,6 @@ impl<T> FromIterator<T> for Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IntoIterator for Vec<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> IntoIterator for Vec<T> {\n     type Item = T;\n@@ -1468,17 +1457,6 @@ impl<T> IntoIterator for Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a Vec<T> {\n-    type IntoIter = slice::Iter<'a, T>;\n-\n-    fn into_iter(self) -> slice::Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a Vec<T> {\n     type Item = &'a T;\n@@ -1489,17 +1467,6 @@ impl<'a, T> IntoIterator for &'a Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a mut Vec<T> {\n-    type IntoIter = slice::IterMut<'a, T>;\n-\n-    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a mut Vec<T> {\n     type Item = &'a mut T;"}, {"sha": "82ccfd0614fd5e14c94f1e47a9d11efcc70410a7", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -668,17 +668,6 @@ impl<V> FromIterator<(usize, V)> for VecMap<V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IntoIterator for VecMap<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> IntoIterator for VecMap<T> {\n     type Item = (usize, T);\n@@ -689,17 +678,6 @@ impl<T> IntoIterator for VecMap<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a VecMap<T> {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a VecMap<T> {\n     type Item = (usize, &'a T);\n@@ -710,17 +688,6 @@ impl<'a, T> IntoIterator for &'a VecMap<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n-    type IntoIter = IterMut<'a, T>;\n-\n-    fn into_iter(mut self) -> IterMut<'a, T> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n     type Item = (usize, &'a mut T);"}, {"sha": "838ca4e478b72223c20583ac4089e99a66469a04", "filename": "src/libcore/array.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -48,17 +48,6 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            // NOTE(stage0): remove impl after a snapshot\n-            #[cfg(stage0)]\n-            impl<'a, T> IntoIterator for &'a [T; $N] {\n-                type IntoIter = Iter<'a, T>;\n-\n-                fn into_iter(self) -> Iter<'a, T> {\n-                    self.iter()\n-                }\n-            }\n-\n-            #[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<'a, T> IntoIterator for &'a [T; $N] {\n                 type Item = &'a T;\n@@ -69,17 +58,6 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            // NOTE(stage0): remove impl after a snapshot\n-            #[cfg(stage0)]\n-            impl<'a, T> IntoIterator for &'a mut [T; $N] {\n-                type IntoIter = IterMut<'a, T>;\n-\n-                fn into_iter(self) -> IterMut<'a, T> {\n-                    self.iter_mut()\n-                }\n-            }\n-\n-            #[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<'a, T> IntoIterator for &'a mut [T; $N] {\n                 type Item = &'a mut T;"}, {"sha": "eb138e6142b80e36e5c4217225ed301dcfcea2d1", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -649,8 +649,7 @@ impl<'b, T> DerefMut for RefMut<'b, T> {\n ///\n /// **NOTE:** `UnsafeCell<T>`'s fields are public to allow static initializers. It is not\n /// recommended to access its fields directly, `get` should be used instead.\n-#[cfg_attr(stage0, lang=\"unsafe\")]  // NOTE: remove after next snapshot\n-#[cfg_attr(not(stage0), lang=\"unsafe_cell\")]\n+#[lang=\"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct UnsafeCell<T> {\n     /// Wrapped value"}, {"sha": "fffba1561a38038d75b3df26db4cbf3bec63d646", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -118,18 +118,6 @@ pub trait FromIterator<A> {\n     fn from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n }\n \n-// NOTE(stage0): remove trait after a snapshot\n-#[cfg(stage0)]\n-/// Conversion into an `Iterator`\n-pub trait IntoIterator {\n-    type IntoIter: Iterator;\n-\n-    /// Consumes `Self` and returns an iterator over it\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn into_iter(self) -> Self::IntoIter;\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n /// Conversion into an `Iterator`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IntoIterator {\n@@ -144,17 +132,6 @@ pub trait IntoIterator {\n     fn into_iter(self) -> Self::IntoIter;\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<I> IntoIterator for I where I: Iterator {\n-    type IntoIter = I;\n-\n-    fn into_iter(self) -> I {\n-        self\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator> IntoIterator for I {\n     type Item = I::Item;"}, {"sha": "f0c60ffe4bf66f8bb0794d105ac56b83230c14d5", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -154,25 +154,16 @@ mod array;\n mod core {\n     pub use panicking;\n     pub use fmt;\n-    #[cfg(not(stage0))] pub use clone;\n-    #[cfg(not(stage0))] pub use cmp;\n-    #[cfg(not(stage0))] pub use hash;\n-    #[cfg(not(stage0))] pub use marker;\n-    #[cfg(not(stage0))] pub use option;\n-    #[cfg(not(stage0))] pub use iter;\n+    pub use clone;\n+    pub use cmp;\n+    pub use hash;\n+    pub use marker;\n+    pub use option;\n+    pub use iter;\n }\n \n #[doc(hidden)]\n mod std {\n-    // NOTE: remove after next snapshot\n-    #[cfg(stage0)] pub use clone;\n-    #[cfg(stage0)] pub use cmp;\n-    #[cfg(stage0)] pub use hash;\n-    #[cfg(stage0)] pub use marker;\n-    #[cfg(stage0)] pub use option;\n-    #[cfg(stage0)] pub use fmt;\n-    #[cfg(stage0)] pub use iter;\n-\n     // range syntax\n     pub use ops;\n }"}, {"sha": "56e1c5dedc1cebbc06c21b043629542de6dc4bea", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -32,7 +32,7 @@ use clone::Clone;\n            reason = \"will be overhauled with new lifetime rules; see RFC 458\")]\n #[lang=\"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n-#[cfg(stage0)] // SNAP ac134f7 remove after stage0\n+#[cfg(stage0)]\n pub unsafe trait Send: 'static {\n     // empty.\n }\n@@ -435,7 +435,7 @@ pub struct NoCopy;\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Managed;\n \n-#[cfg(not(stage0))] // SNAP ac134f7 remove this attribute after the next snapshot\n+#[cfg(not(stage0))]\n mod impls {\n     use super::{Send, Sync, Sized};\n "}, {"sha": "bbfe7e58ef4ac4f703b0294c5e6cbab7d1da8b29", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -626,17 +626,6 @@ impl<'a, T> Default for &'a [T] {\n // Iterators\n //\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a [T] {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a [T] {\n     type Item = &'a T;\n@@ -647,17 +636,6 @@ impl<'a, T> IntoIterator for &'a [T] {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> IntoIterator for &'a mut [T] {\n-    type IntoIter = IterMut<'a, T>;\n-\n-    fn into_iter(self) -> IterMut<'a, T> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a mut [T] {\n     type Item = &'a mut T;"}, {"sha": "d9f420bdd3395c519fda72a2de1dcb49bfe0ed27", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -5733,10 +5733,3 @@ pub mod funcs {\n pub fn issue_14344_workaround() {} // FIXME #14344 force linkage to happen correctly\n \n #[test] fn work_on_windows() { } // FIXME #10872 needed for a happy windows\n-\n-// NOTE: remove after next snapshot\n-#[doc(hidden)]\n-#[cfg(all(stage0, not(test)))]\n-mod std {\n-    pub use core::marker;\n-}"}, {"sha": "915c70bbf8ce1d90a6818dc8367ed95c00da4588", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -497,17 +497,6 @@ pub struct Open01<F>(pub F);\n /// ```\n pub struct Closed01<F>(pub F);\n \n-// NOTE: remove after next snapshot\n-#[cfg(all(stage0, not(test)))]\n-mod std {\n-    pub use core::{option, fmt}; // panic!()\n-    pub use core::clone; // derive Clone\n-    pub use core::marker;\n-    // for-loops\n-    pub use core::iter;\n-    pub use core::ops; // slicing syntax\n-}\n-\n #[cfg(test)]\n mod test {\n     use std::rand;"}, {"sha": "9bf35bd4284722c62a4f39880f5fbd70d543a042", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -530,17 +530,6 @@ impl<'a,T> Iterator for EnumeratedItems<'a,T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IntoIterator for VecPerParamSpace<T> {\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_vec().into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> IntoIterator for VecPerParamSpace<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n@@ -550,17 +539,6 @@ impl<T> IntoIterator for VecPerParamSpace<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> {\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.as_slice().into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> {\n     type Item = &'a T;\n     type IntoIter = Iter<'a, T>;"}, {"sha": "8618bde95fe6fe3e0fdd498b427d14f9c9f6d024", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -73,8 +73,6 @@ use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::fmt;\n use std::hash::{Hash, Writer, SipHasher, Hasher};\n-#[cfg(stage0)]\n-use std::marker;\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n@@ -944,26 +942,6 @@ pub struct TyS<'tcx> {\n \n     // the maximal depth of any bound regions appearing in this type.\n     region_depth: u32,\n-\n-    // force the lifetime to be invariant to work-around\n-    // region-inference issues with a covariant lifetime.\n-    #[cfg(stage0)]\n-    marker: ShowInvariantLifetime<'tcx>,\n-}\n-\n-#[cfg(stage0)]\n-struct ShowInvariantLifetime<'a>(marker::InvariantLifetime<'a>);\n-#[cfg(stage0)]\n-impl<'a> ShowInvariantLifetime<'a> {\n-    fn new() -> ShowInvariantLifetime<'a> {\n-        ShowInvariantLifetime(marker::InvariantLifetime)\n-    }\n-}\n-#[cfg(stage0)]\n-impl<'a> fmt::Debug for ShowInvariantLifetime<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"InvariantLifetime\")\n-    }\n }\n \n impl fmt::Debug for TypeFlags {\n@@ -972,14 +950,6 @@ impl fmt::Debug for TypeFlags {\n     }\n }\n \n-#[cfg(stage0)]\n-impl<'tcx> PartialEq for TyS<'tcx> {\n-    fn eq<'a,'b>(&'a self, other: &'b TyS<'tcx>) -> bool {\n-        let other: &'a TyS<'tcx> = unsafe { mem::transmute(other) };\n-        (self as *const _) == (other as *const _)\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<'tcx> PartialEq for TyS<'tcx> {\n     fn eq(&self, other: &TyS<'tcx>) -> bool {\n         // (self as *const _) == (other as *const _)\n@@ -2562,12 +2532,6 @@ fn intern_ty<'tcx>(type_arena: &'tcx TypedArena<TyS<'tcx>>,\n     let flags = FlagComputation::for_sty(&st);\n \n     let ty = match () {\n-        #[cfg(stage0)]\n-        () => type_arena.alloc(TyS { sty: st,\n-                                     flags: flags.flags,\n-                                     region_depth: flags.depth,\n-                                     marker: ShowInvariantLifetime::new(), }),\n-        #[cfg(not(stage0))]\n         () => type_arena.alloc(TyS { sty: st,\n                                      flags: flags.flags,\n                                      region_depth: flags.depth, }),"}, {"sha": "1b9f8b9901723af27cffd7df2a72aed7c93794d9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -1372,21 +1372,6 @@ enum VacantEntryState<K, V, M> {\n     NoElem(EmptyBucket<K, V, M>),\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, K, V, S, H> IntoIterator for &'a HashMap<K, V, S>\n-    where K: Eq + Hash<H>,\n-          S: HashState<Hasher=H>,\n-          H: hash::Hasher<Output=u64>\n-{\n-    type IntoIter = Iter<'a, K, V>;\n-\n-    fn into_iter(self) -> Iter<'a, K, V> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V, S, H> IntoIterator for &'a HashMap<K, V, S>\n     where K: Eq + Hash<H>,\n@@ -1401,21 +1386,6 @@ impl<'a, K, V, S, H> IntoIterator for &'a HashMap<K, V, S>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, K, V, S, H> IntoIterator for &'a mut HashMap<K, V, S>\n-    where K: Eq + Hash<H>,\n-          S: HashState<Hasher=H>,\n-          H: hash::Hasher<Output=u64>\n-{\n-    type IntoIter = IterMut<'a, K, V>;\n-\n-    fn into_iter(mut self) -> IterMut<'a, K, V> {\n-        self.iter_mut()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V, S, H> IntoIterator for &'a mut HashMap<K, V, S>\n     where K: Eq + Hash<H>,\n@@ -1430,21 +1400,6 @@ impl<'a, K, V, S, H> IntoIterator for &'a mut HashMap<K, V, S>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<K, V, S, H> IntoIterator for HashMap<K, V, S>\n-    where K: Eq + Hash<H>,\n-          S: HashState<Hasher=H>,\n-          H: hash::Hasher<Output=u64>\n-{\n-    type IntoIter = IntoIter<K, V>;\n-\n-    fn into_iter(self) -> IntoIter<K, V> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S, H> IntoIterator for HashMap<K, V, S>\n     where K: Eq + Hash<H>,"}, {"sha": "5fbbcb3b347afefdeba9ac386a0d62e16c5b6a0b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -835,21 +835,6 @@ pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T, S, H> IntoIterator for &'a HashSet<T, S>\n-    where T: Eq + Hash<H>,\n-          S: HashState<Hasher=H>,\n-          H: hash::Hasher<Output=u64>\n-{\n-    type IntoIter = Iter<'a, T>;\n-\n-    fn into_iter(self) -> Iter<'a, T> {\n-        self.iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S, H> IntoIterator for &'a HashSet<T, S>\n     where T: Eq + Hash<H>,\n@@ -864,21 +849,6 @@ impl<'a, T, S, H> IntoIterator for &'a HashSet<T, S>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T, S, H> IntoIterator for HashSet<T, S>\n-    where T: Eq + Hash<H>,\n-          S: HashState<Hasher=H>,\n-          H: hash::Hasher<Output=u64>\n-{\n-    type IntoIter = IntoIter<T>;\n-\n-    fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S, H> IntoIterator for HashSet<T, S>\n     where T: Eq + Hash<H>,"}, {"sha": "7c9a8a7b4b5ad2a8bef03bb3337ae19d7c3346c4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -292,13 +292,6 @@ mod tuple;\n // can be resolved within libstd.\n #[doc(hidden)]\n mod std {\n-    // NOTE: remove after next snapshot\n-    // mods used for deriving\n-    #[cfg(stage0)] pub use clone;\n-    #[cfg(stage0)] pub use cmp;\n-    #[cfg(stage0)] pub use hash;\n-    #[cfg(stage0)] pub use default;\n-\n     pub use sync; // used for select!()\n     pub use error; // used for try!()\n     pub use fmt; // used for any formatting strings\n@@ -319,7 +312,4 @@ mod std {\n     pub use slice;\n \n     pub use boxed; // used for vec![]\n-    // for-loops\n-    // NOTE: remove after next snapshot\n-    #[cfg(stage0)] pub use iter;\n }"}, {"sha": "00bb7f86b170cf47b536ed5bdfac11b0405dd590", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -60,23 +60,6 @@ macro_rules! panic {\n     });\n }\n \n-/// Use the syntax described in `std::fmt` to create a value of type `String`.\n-/// See `std::fmt` for more information.\n-///\n-/// # Example\n-///\n-/// ```\n-/// format!(\"test\");\n-/// format!(\"hello {}\", \"world!\");\n-/// format!(\"x = {}, y = {y}\", 10, y = 30);\n-/// ```\n-#[cfg(stage0)] // NOTE: remove after snapshot\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-macro_rules! format {\n-    ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n-}\n-\n /// Equivalent to the `println!` macro except that a newline is not printed at\n /// the end of the message.\n #[macro_export]"}, {"sha": "fe39954f0d446fd5ae3b45d8971b097a8ecae6a6", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -17,7 +17,7 @@ use core::marker::Send;\n use core::ops::FnOnce;\n \n pub struct Thunk<'a, A=(),R=()> {\n-    #[cfg(stage0)] // // SNAP ac134f7 remove after stage0\n+    #[cfg(stage0)]\n     invoke: Box<Invoke<A,R>+Send>,\n     #[cfg(not(stage0))]\n     invoke: Box<Invoke<A,R>+Send + 'a>,"}, {"sha": "791886be1ce5b6a6de76889ca83bc7d7f53a3f7e", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -77,16 +77,3 @@ pub mod str {\n     pub use u_str::{utf8_char_width, is_utf16, Utf16Items, Utf16Item};\n     pub use u_str::{utf16_items, Utf16Encoder};\n }\n-\n-// NOTE: remove after next snapshot\n-// this lets us use #[derive(..)]\n-#[cfg(stage0)]\n-mod std {\n-    pub use core::clone;\n-    pub use core::cmp;\n-    pub use core::fmt;\n-    pub use core::marker;\n-    // for-loops\n-    pub use core::iter;\n-    pub use core::option;\n-}"}, {"sha": "4759c44259d5289d7a71a29b47a6ff1387882c2f", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -1,3 +1,12 @@\n+S 2015-02-17 f1bb6c2\n+  freebsd-x86_64 59f3a2c6350c170804fb65838e1b504eeab89105\n+  linux-i386 191ed5ec4f17e32d36abeade55a1c6085e51245c\n+  linux-x86_64 acec86045632f4f3f085c072ba696f889906dffe\n+  macos-i386 9d9e622584bfa318f32bcb5b9ce6a365febff595\n+  macos-x86_64 e96c1e9860b186507cc75c186d1b96d44df12292\n+  winnt-i386 3f43e0e71311636f9143ad6f2ee7a514e9fa3f8e\n+  winnt-x86_64 26ef3d9098ea346e5ff8945d5b224bb10c24341d\n+\n S 2015-02-04 ac134f7\n   freebsd-x86_64 483e37a02a7ebc12a872e3146145e342ba4a5c04\n   linux-i386 8af64e5df839cc945399484380a8b2ebe05a6751"}, {"sha": "3f226a1985e78e5d3ceccb37437d4b96067b9506", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f91a9484eceef10536d4caac6ef578cd254567/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f91a9484eceef10536d4caac6ef578cd254567/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=47f91a9484eceef10536d4caac6ef578cd254567", "patch": "@@ -11,7 +11,7 @@\n extern crate libc;\n \n use std::mem;\n-use std::thread::Thread;\n+use std::thread;\n \n #[link(name = \"rust_test_helpers\")]\n extern {\n@@ -21,9 +21,9 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        Thread::scoped(move|| {\n-            let i = &100;\n-            rust_dbg_call(callback, mem::transmute(i));\n+        thread::spawn(move|| {\n+            let i = 100;\n+            rust_dbg_call(callback, mem::transmute(&i));\n         }).join();\n     }\n }"}]}