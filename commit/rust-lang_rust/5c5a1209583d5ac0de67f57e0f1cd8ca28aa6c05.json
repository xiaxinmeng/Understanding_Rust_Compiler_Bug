{"sha": "5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWExMjA5NTgzZDVhYzBkZTY3ZjU3ZTBmMWNkOGNhMjhhYTZjMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-19T01:16:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-19T01:16:07Z"}, "message": "Auto merge of #65821 - SimonSapin:in-place, r=Amanieu\n\nUse `drop_in_place` in `array::IntoIter::drop`\n\nThis skips the loop when the element type is known not to have drop glue, even in debug mode.", "tree": {"sha": "177482dfe56b45a2259906c60b7366edb1ab6257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177482dfe56b45a2259906c60b7366edb1ab6257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "html_url": "https://github.com/rust-lang/rust/commit/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ccee30773050f6bf50fd6ceb9ac61e6d58aa4d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ccee30773050f6bf50fd6ceb9ac61e6d58aa4d8", "html_url": "https://github.com/rust-lang/rust/commit/0ccee30773050f6bf50fd6ceb9ac61e6d58aa4d8"}, {"sha": "74b571402f980f70a4d87ec3c778af568e4fa329", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b571402f980f70a4d87ec3c778af568e4fa329", "html_url": "https://github.com/rust-lang/rust/commit/74b571402f980f70a4d87ec3c778af568e4fa329"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "aab9463e3aade248452fb74a883dd77e92ab28a4", "filename": "src/libcore/array/iter.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05/src%2Flibcore%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05/src%2Flibcore%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fiter.rs?ref=5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "patch": "@@ -92,6 +92,18 @@ where\n             mem::transmute::<&[MaybeUninit<T>], &[T]>(slice)\n         }\n     }\n+\n+    /// Returns a mutable slice of all elements that have not been yielded yet.\n+    fn as_mut_slice(&mut self) -> &mut [T] {\n+        // This transmute is safe, same as in `as_slice` above.\n+        let slice = &mut self.data[self.alive.clone()];\n+        // SAFETY: This transmute is safe. As mentioned in `new`, `MaybeUninit` retains\n+        // the size and alignment of `T`. Furthermore, we know that all\n+        // elements within `alive` are properly initialized.\n+        unsafe {\n+            mem::transmute::<&mut [MaybeUninit<T>], &mut [T]>(slice)\n+        }\n+    }\n }\n \n \n@@ -184,10 +196,12 @@ where\n     [T; N]: LengthAtMost32,\n {\n     fn drop(&mut self) {\n-        // We simply drop each element via `for_each`. This should not incur\n-        // any significant runtime overhead and avoids adding another `unsafe`\n-        // block.\n-        self.by_ref().for_each(drop);\n+        // SAFETY: This is safe: `as_mut_slice` returns exactly the sub-slice\n+        // of elements that have not been moved out yet and that remain\n+        // to be dropped.\n+        unsafe {\n+            ptr::drop_in_place(self.as_mut_slice())\n+        }\n     }\n }\n "}]}