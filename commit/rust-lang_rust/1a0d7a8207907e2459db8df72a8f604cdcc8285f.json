{"sha": "1a0d7a8207907e2459db8df72a8f604cdcc8285f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMGQ3YTgyMDc5MDdlMjQ1OWRiOGRmNzJhOGY2MDRjZGNjODI4NWY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-04-12T18:12:53Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-04-13T21:07:12Z"}, "message": "add -C parameter to rustdoc", "tree": {"sha": "e874290831de59268099567481b89ff42bddbf0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e874290831de59268099567481b89ff42bddbf0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a0d7a8207907e2459db8df72a8f604cdcc8285f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0d7a8207907e2459db8df72a8f604cdcc8285f", "html_url": "https://github.com/rust-lang/rust/commit/1a0d7a8207907e2459db8df72a8f604cdcc8285f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a0d7a8207907e2459db8df72a8f604cdcc8285f/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3366032ab70f72763bdf45c7f1257aa20b4229ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3366032ab70f72763bdf45c7f1257aa20b4229ca", "html_url": "https://github.com/rust-lang/rust/commit/3366032ab70f72763bdf45c7f1257aa20b4229ca"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "781379d2d8c3e161fee2ad0c0581fed0b27b1c65", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1a0d7a8207907e2459db8df72a8f604cdcc8285f", "patch": "@@ -42,7 +42,7 @@ use clean;\n use clean::Clean;\n use html::render::RenderInfo;\n \n-pub use rustc::session::config::Input;\n+pub use rustc::session::config::{Input, CodegenOptions};\n pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n@@ -125,7 +125,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 allow_warnings: bool,\n                 crate_name: Option<String>,\n                 force_unstable_if_unmarked: bool,\n-                edition: Edition) -> (clean::Crate, RenderInfo)\n+                edition: Edition,\n+                cg: CodegenOptions) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -143,6 +144,7 @@ pub fn run_core(search_paths: SearchPaths,\n         crate_types: vec![config::CrateTypeRlib],\n         lint_opts: if !allow_warnings { vec![(warning_lint, lint::Allow)] } else { vec![] },\n         lint_cap: Some(lint::Allow),\n+        cg,\n         externs,\n         target_triple: triple.unwrap_or(host_triple),\n         // Ensure that rustdoc works even if rustc is feature-staged"}, {"sha": "4ba57379e1616fb60e17d148c6288e7fc6d01ded", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1a0d7a8207907e2459db8df72a8f604cdcc8285f", "patch": "@@ -63,7 +63,8 @@ use std::sync::mpsc::channel;\n use syntax::edition::Edition;\n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n+use rustc::session::config::{ErrorOutputType, RustcOptGroup, Externs, CodegenOptions};\n+use rustc::session::config::{nightly_options, build_codegen_options};\n use rustc_back::target::TargetTriple;\n \n #[macro_use]\n@@ -157,6 +158,9 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         stable(\"plugin-path\", |o| {\n             o.optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")\n         }),\n+        stable(\"C\", |o| {\n+            o.optmulti(\"C\", \"codegen\", \"pass a codegen option to rustc\", \"OPT[=VALUE]\")\n+        }),\n         stable(\"passes\", |o| {\n             o.optmulti(\"\", \"passes\",\n                        \"list of passes to also run, you might want \\\n@@ -443,14 +447,16 @@ pub fn main_args(args: &[String]) -> isize {\n         }\n     };\n \n+    let cg = build_codegen_options(&matches, ErrorOutputType::default());\n+\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n-                                  display_warnings, linker, edition)\n+                                  display_warnings, linker, edition, cg)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n-                             maybe_sysroot, display_warnings, linker, edition)\n+                             maybe_sysroot, display_warnings, linker, edition, cg)\n         }\n         (false, true) => return markdown::render(Path::new(input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -460,7 +466,7 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, edition, &matches, move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -502,14 +508,15 @@ fn print_error<T>(error_message: T) where T: Display {\n fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n                        edition: Edition,\n+                       cg: CodegenOptions,\n                        matches: &getopts::Matches,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, edition, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, edition, matches, f))\n+        None => Ok(rust_input(input, externs, edition, cg, matches, f))\n     }\n }\n \n@@ -538,6 +545,7 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n fn rust_input<R, F>(cratefile: PathBuf,\n                     externs: Externs,\n                     edition: Edition,\n+                    cg: CodegenOptions,\n                     matches: &getopts::Matches,\n                     f: F) -> R\n where R: 'static + Send,\n@@ -591,7 +599,7 @@ where R: 'static + Send,\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked, edition);\n+                           force_unstable_if_unmarked, edition, cg);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "8ada5ce1a4df9e83f74b068c903f2287038c083b", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=1a0d7a8207907e2459db8df72a8f604cdcc8285f", "patch": "@@ -16,7 +16,7 @@ use std::path::{PathBuf, Path};\n use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::Externs;\n+use rustc::session::config::{Externs, CodegenOptions};\n use syntax::codemap::DUMMY_SP;\n use syntax::edition::Edition;\n \n@@ -140,7 +140,8 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            display_warnings: bool, linker: Option<PathBuf>, edition: Edition) -> isize {\n+            display_warnings: bool, linker: Option<PathBuf>, edition: Edition,\n+            cg: CodegenOptions) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -150,7 +151,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     opts.display_warnings = display_warnings;\n-    let mut collector = Collector::new(input.to_owned(), cfgs, libs, externs,\n+    let mut collector = Collector::new(input.to_owned(), cfgs, libs, cg, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n                                        linker, edition);"}, {"sha": "600e9eaa05f1450acbd3f5604241450fce828f0a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1a0d7a8207907e2459db8df72a8f604cdcc8285f", "patch": "@@ -24,7 +24,7 @@ use rustc_lint;\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n-use rustc::session::config::{OutputType, OutputTypes, Externs};\n+use rustc::session::config::{OutputType, OutputTypes, Externs, CodegenOptions};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use tempdir::TempDir;\n@@ -64,7 +64,8 @@ pub fn run(input_path: &Path,\n            maybe_sysroot: Option<PathBuf>,\n            display_warnings: bool,\n            linker: Option<PathBuf>,\n-           edition: Edition)\n+           edition: Edition,\n+           cg: CodegenOptions)\n            -> isize {\n     let input = config::Input::File(input_path.to_owned());\n \n@@ -73,6 +74,7 @@ pub fn run(input_path: &Path,\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs.clone(),\n         crate_types: vec![config::CrateTypeDylib],\n+        cg: cg.clone(),\n         externs: externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n         lint_cap: Some(::rustc::lint::Level::Allow),\n@@ -125,6 +127,7 @@ pub fn run(input_path: &Path,\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n+                                       cg,\n                                        externs,\n                                        false,\n                                        opts,\n@@ -190,7 +193,7 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n \n fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             cfgs: Vec<String>, libs: SearchPaths,\n-            externs: Externs,\n+            cg: CodegenOptions, externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n             maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n@@ -215,7 +218,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         cg: config::CodegenOptions {\n             prefer_dynamic: true,\n             linker,\n-            .. config::basic_codegen_options()\n+            ..cg\n         },\n         test: as_test_harness,\n         unstable_features: UnstableFeatures::from_environment(),\n@@ -478,6 +481,7 @@ pub struct Collector {\n \n     cfgs: Vec<String>,\n     libs: SearchPaths,\n+    cg: CodegenOptions,\n     externs: Externs,\n     use_headers: bool,\n     cratename: String,\n@@ -491,15 +495,16 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n-               use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n-               codemap: Option<Lrc<CodeMap>>, filename: Option<PathBuf>,\n-               linker: Option<PathBuf>, edition: Edition) -> Collector {\n+    pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, cg: CodegenOptions,\n+               externs: Externs, use_headers: bool, opts: TestOptions,\n+               maybe_sysroot: Option<PathBuf>, codemap: Option<Lrc<CodeMap>>,\n+               filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n             cfgs,\n             libs,\n+            cg,\n             externs,\n             use_headers,\n             cratename,\n@@ -524,6 +529,7 @@ impl Collector {\n         let name = self.generate_name(line, &filename);\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n+        let cg = self.cg.clone();\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n         let opts = self.opts.clone();\n@@ -552,6 +558,7 @@ impl Collector {\n                                  line,\n                                  cfgs,\n                                  libs,\n+                                 cg,\n                                  externs,\n                                  should_panic,\n                                  no_run,"}, {"sha": "08f1f06baa31991eca378dddfca10c0426a0180a", "filename": "src/test/rustdoc/force-target-feature.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Ftest%2Frustdoc%2Fforce-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0d7a8207907e2459db8df72a8f604cdcc8285f/src%2Ftest%2Frustdoc%2Fforce-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforce-target-feature.rs?ref=1a0d7a8207907e2459db8df72a8f604cdcc8285f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+// compile-flags:--test -C target-feature=+avx\n+// should-fail\n+\n+/// (written on a spider's web) Some Struct\n+///\n+/// ```\n+/// panic!(\"oh no\");\n+/// ```\n+#[doc(cfg(target_feature = \"avx\"))]\n+pub struct SomeStruct;"}]}