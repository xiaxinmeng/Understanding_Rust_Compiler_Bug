{"sha": "02e907b648b0abb8dc2b8fa1902294774d4ad862", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTkwN2I2NDhiMGFiYjhkYzJiOGZhMTkwMjI5NDc3NGQ0YWQ4NjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-29T07:54:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-30T08:48:10Z"}, "message": "Remove oldcomm from the test suite", "tree": {"sha": "c092a60fa987a9011948fda95efcf6b0739b609c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c092a60fa987a9011948fda95efcf6b0739b609c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e907b648b0abb8dc2b8fa1902294774d4ad862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e907b648b0abb8dc2b8fa1902294774d4ad862", "html_url": "https://github.com/rust-lang/rust/commit/02e907b648b0abb8dc2b8fa1902294774d4ad862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e907b648b0abb8dc2b8fa1902294774d4ad862/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "html_url": "https://github.com/rust-lang/rust/commit/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a"}], "stats": {"total": 1985, "additions": 207, "deletions": 1778}, "files": [{"sha": "fd319aacd05f8d6d23fbd98bf12ddfd283286534", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::oldcomm::*;\n+use core::pipes::*;\n \n pub fn foo<T: Owned Copy>(x: T) -> Port<T> {\n-    let p = Port();\n-    let c = Chan(&p);\n-    do task::spawn() |copy c, copy x| {\n+    let (p, c) = stream();\n+    do task::spawn() |copy x| {\n         c.send(x);\n     }\n     p"}, {"sha": "6fd39368baecd6fd3c9d897f83b5ddf1478dd5ec", "filename": "src/test/auxiliary/test_comm.rs", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,127 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n-  Minimized version of core::oldcomm for testing. \n-\n-  Could probably be more minimal.\n- */\n-\n-use core::libc::size_t;\n-\n-\n-/**\n- * A oldcommunication endpoint that can receive messages\n- *\n- * Each port has a unique per-task identity and may not be replicated or\n- * transmitted. If a port value is copied, both copies refer to the same\n- * port.  Ports may be associated with multiple `chan`s.\n- */\n-pub enum port<T> {\n-    port_t(@port_ptr<T>)\n-}\n-\n-/// Constructs a port\n-pub fn port<T: Owned>() -> port<T> {\n-    unsafe {\n-        port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n-    }\n-}\n-\n-struct port_ptr<T> {\n-   po: *rust_port,\n-}\n-\n-impl<T:Owned> port_ptr<T> : Drop {\n-    fn finalize(&self) {\n-        unsafe {\n-            debug!(\"in the port_ptr destructor\");\n-               do task::unkillable {\n-                let yield = 0u;\n-                let yieldp = ptr::addr_of(&yield);\n-                rustrt::rust_port_begin_detach(self.po, yieldp);\n-                if yield != 0u {\n-                    task::yield();\n-                }\n-                rustrt::rust_port_end_detach(self.po);\n-\n-                while rustrt::rust_port_size(self.po) > 0u as size_t {\n-                    recv_::<T>(self.po);\n-                }\n-                rustrt::del_port(self.po);\n-            }\n-        }\n-    }\n-}\n-\n-fn port_ptr<T: Owned>(po: *rust_port) -> port_ptr<T> {\n-    debug!(\"in the port_ptr constructor\");\n-    port_ptr {\n-        po: po\n-    }\n-}\n-\n-/**\n- * Receive from a port.  If no data is available on the port then the\n- * task will block until data becomes available.\n- */\n-pub fn recv<T: Owned>(p: port<T>) -> T { recv_((**p).po) }\n-\n-\n-/// Receive on a raw port pointer\n-pub fn recv_<T: Owned>(p: *rust_port) -> T {\n-    unsafe {\n-        let yield = 0;\n-        let yieldp = ptr::addr_of(&yield);\n-        let mut res;\n-        res = rusti::init::<T>();\n-        rustrt::port_recv(ptr::addr_of(&res) as *uint, p, yieldp);\n-\n-        if yield != 0 {\n-            // Data isn't available yet, so res has not been initialized.\n-            task::yield();\n-        } else {\n-            // In the absense of compiler-generated preemption points\n-            // this is a good place to yield\n-            task::yield();\n-        }\n-        move res\n-    }\n-}\n-\n-\n-/* Implementation details */\n-\n-\n-enum rust_port {}\n-\n-type port_id = int;\n-\n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    #[legacy_exports];\n-\n-    fn new_port(unit_sz: libc::size_t) -> *rust_port;\n-    fn del_port(po: *rust_port);\n-    fn rust_port_begin_detach(po: *rust_port,\n-                              yield: *libc::uintptr_t);\n-    fn rust_port_end_detach(po: *rust_port);\n-    fn rust_port_size(po: *rust_port) -> libc::size_t;\n-    fn port_recv(dptr: *uint, po: *rust_port,\n-                 yield: *libc::uintptr_t);\n-}\n-\n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    #[legacy_exports];\n-    fn init<T>() -> T;\n-}\n-\n-"}, {"sha": "5ae2996f39ed55def25e2bad95c6db08d8736c9d", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -26,7 +26,6 @@ use std::deque;\n use std::deque::Deque;\n use std::par;\n use core::io::WriterUtil;\n-use core::oldcomm::*;\n use core::int::abs;\n \n type node_id = i64;"}, {"sha": "43b20ed2db41bbd5b59d13fb334807250e173c82", "filename": "src/test/bench/msgsend-ring.rs", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,88 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This test creates a bunch of tasks that simultaneously send to each\n-// other in a ring. The messages should all be basically\n-// independent. It's designed to hammer the global kernel lock, so\n-// that things will look really good once we get that lock out of the\n-// message path.\n-\n-use core::oldcomm::*;\n-use core::oldcomm;\n-\n-extern mod std;\n-use std::time;\n-use std::future;\n-\n-fn thread_ring(i: uint,\n-               count: uint,\n-               num_chan: oldcomm::Chan<uint>,\n-               num_port: oldcomm::Port<uint>) {\n-    // Send/Receive lots of messages.\n-    for uint::range(0u, count) |j| {\n-        num_chan.send(i * j);\n-        num_port.recv();\n-    };\n-}\n-\n-fn main() {\n-    let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100\", ~\"10000\"]\n-    } else if args.len() <= 1u {\n-        ~[~\"\", ~\"100\", ~\"1000\"]\n-    } else {\n-        args\n-    };        \n-\n-    let num_tasks = uint::from_str(args[1]).get();\n-    let msg_per_task = uint::from_str(args[2]).get();\n-\n-    let num_port = Port();\n-    let mut num_chan = Chan(&num_port);\n-\n-    let start = time::precise_time_s();\n-\n-    // create the ring\n-    let mut futures = ~[];\n-\n-    for uint::range(1u, num_tasks) |i| {\n-        let get_chan = Port();\n-        let get_chan_chan = Chan(&get_chan);\n-\n-        let new_future = do future::spawn\n-            |copy num_chan, move get_chan_chan| {\n-            let p = Port();\n-            get_chan_chan.send(Chan(&p));\n-            thread_ring(i, msg_per_task, num_chan,  p)\n-        };\n-        futures.push(move new_future);\n-        \n-        num_chan = get_chan.recv();\n-    };\n-\n-    // do our iteration\n-    thread_ring(0u, msg_per_task, num_chan, num_port);\n-\n-    // synchronize\n-    for futures.each |f| { f.get() };\n-\n-    let stop = time::precise_time_s();\n-\n-    // all done, report stats.\n-    let num_msgs = num_tasks * msg_per_task;\n-    let elapsed = (stop - start);\n-    let rate = (num_msgs as float) / elapsed;\n-\n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n-}"}, {"sha": "740a2754e24420d7ef485ec7c2dfd6e7e55b5081", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -14,6 +14,8 @@ extern mod std;\n use std::map;\n use std::map::HashMap;\n use std::sort;\n+use std::cell::Cell;\n+use core::pipes::*;\n \n fn print_complements() {\n     let all = ~[Blue, Red, Yellow];\n@@ -98,18 +100,18 @@ fn transform(aa: color, bb: color) -> color {\n fn creature(\n     name: uint,\n     color: color,\n-    from_rendezvous: oldcomm::Port<Option<CreatureInfo>>,\n-    to_rendezvous: oldcomm::Chan<CreatureInfo>,\n-    to_rendezvous_log: oldcomm::Chan<~str>\n+    from_rendezvous: Port<Option<CreatureInfo>>,\n+    to_rendezvous: SharedChan<CreatureInfo>,\n+    to_rendezvous_log: SharedChan<~str>\n ) {\n     let mut color = color;\n     let mut creatures_met = 0;\n     let mut evil_clones_met = 0;\n \n     loop {\n         // ask for a pairing\n-        oldcomm::send(to_rendezvous, CreatureInfo {name: name, color: color});\n-        let resp = oldcomm::recv(from_rendezvous);\n+        to_rendezvous.send(CreatureInfo {name: name, color: color});\n+        let resp = from_rendezvous.recv();\n \n         // log and change, or print and quit\n         match resp {\n@@ -126,7 +128,7 @@ fn creature(\n                 // log creatures met and evil clones of self\n                 let report = fmt!(\"%u\", creatures_met) + ~\" \" +\n                              show_number(evil_clones_met);\n-                oldcomm::send(to_rendezvous_log, report);\n+                to_rendezvous_log.send(report);\n                 break;\n             }\n         }\n@@ -135,61 +137,54 @@ fn creature(\n \n fn rendezvous(nn: uint, set: ~[color]) {\n \n-    pub fn spawn_listener<A: Owned>(+f: fn~(oldcomm::Port<A>)) -> oldcomm::Chan<A> {\n-        let setup_po = oldcomm::Port();\n-        let setup_ch = oldcomm::Chan(&setup_po);\n-        do task::spawn |move f| {\n-            let po = oldcomm::Port();\n-            let ch = oldcomm::Chan(&po);\n-            oldcomm::send(setup_ch, ch);\n-            f(move po);\n-        }\n-        oldcomm::recv(setup_po)\n-    }\n-\n     // these ports will allow us to hear from the creatures\n-    let from_creatures:     oldcomm::Port<CreatureInfo> = oldcomm::Port();\n-    let from_creatures_log: oldcomm::Port<~str> = oldcomm::Port();\n+    let (from_creatures, to_rendezvous) = stream::<CreatureInfo>();\n+    let to_rendezvous = SharedChan(to_rendezvous);\n+    let (from_creatures_log, to_rendezvous_log) = stream::<~str>();\n+    let to_rendezvous_log = SharedChan(to_rendezvous_log);\n \n     // these channels will be passed to the creatures so they can talk to us\n-    let to_rendezvous     = oldcomm::Chan(&from_creatures);\n-    let to_rendezvous_log = oldcomm::Chan(&from_creatures_log);\n \n     // these channels will allow us to talk to each creature by 'name'/index\n-    let to_creature: ~[oldcomm::Chan<Option<CreatureInfo>>] =\n+    let to_creature: ~[Chan<Option<CreatureInfo>>] =\n         vec::mapi(set, |ii, col| {\n             // create each creature as a listener with a port, and\n             // give us a channel to talk to each\n             let ii = ii;\n             let col = *col;\n-            do spawn_listener |from_rendezvous, move ii, move col| {\n-                creature(ii, col, from_rendezvous, to_rendezvous,\n-                         to_rendezvous_log);\n+            let to_rendezvous = to_rendezvous.clone();\n+            let to_rendezvous_log = to_rendezvous_log.clone();\n+            let (from_rendezvous, to_creature) = stream();\n+            let from_rendezvous = Cell(from_rendezvous);\n+            do task::spawn |move ii, move col| {\n+                creature(ii, col, from_rendezvous.take(), to_rendezvous.clone(),\n+                         to_rendezvous_log.clone());\n             }\n+            to_creature\n         });\n \n     let mut creatures_met = 0;\n \n     // set up meetings...\n     for nn.times {\n-        let fst_creature: CreatureInfo = oldcomm::recv(from_creatures);\n-        let snd_creature: CreatureInfo = oldcomm::recv(from_creatures);\n+        let fst_creature: CreatureInfo = from_creatures.recv();\n+        let snd_creature: CreatureInfo = from_creatures.recv();\n \n         creatures_met += 2;\n \n-        oldcomm::send(to_creature[fst_creature.name], Some(snd_creature));\n-        oldcomm::send(to_creature[snd_creature.name], Some(fst_creature));\n+        to_creature[fst_creature.name].send(Some(snd_creature));\n+        to_creature[snd_creature.name].send(Some(fst_creature));\n     }\n \n     // tell each creature to stop\n     for vec::eachi(to_creature) |_ii, to_one| {\n-        oldcomm::send(*to_one, None);\n+        to_one.send(None);\n     }\n \n     // save each creature's meeting stats\n     let mut report = ~[];\n     for vec::each(to_creature) |_to_one| {\n-        report.push(oldcomm::recv(from_creatures_log));\n+        report.push(from_creatures_log.recv());\n     }\n \n     // print each color in the set"}, {"sha": "fab0af479cc92bfca32e970bf317d771db6a6d39", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -129,7 +129,6 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n         _ => { ~\"\" }\n    };\n \n-   //oldcomm::send(to_parent, fmt!(\"yay{%u}\", sz));\n     to_parent.send(move buffer);\n }\n "}, {"sha": "c146b6ac37119c8cbe93fa84a8539407b5aef5ba", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -14,7 +14,7 @@\n   A parallel version of fibonacci numbers.\n \n   This version is meant mostly as a way of stressing and benchmarking\n-  the task system. It supports a lot of oldcommand-line arguments to\n+  the task system. It supports a lot of old command-line arguments to\n   control how it runs.\n \n */"}, {"sha": "d2dd0eaf7458c11d064b9b8447a360b2692208aa", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -19,21 +19,26 @@\n \n // Creates in the background 'num_tasks' tasks, all blocked forever.\n // Doesn't return until all such tasks are ready, but doesn't block forever itself.\n+\n+use core::pipes::*;\n+\n fn grandchild_group(num_tasks: uint) {\n-    let po = oldcomm::Port();\n-    let ch = oldcomm::Chan(&po);\n+    let (po, ch) = stream();\n+    let ch = SharedChan(ch);\n \n     for num_tasks.times {\n+        let ch = ch.clone();\n         do task::spawn { // linked\n-            oldcomm::send(ch, ());\n-            oldcomm::recv(oldcomm::Port::<()>()); // block forever\n+            ch.send(());\n+            let (p, _c) = stream::<()>();\n+            p.recv(); // block forever\n         }\n     }\n     error!(\"Grandchild group getting started\");\n     for num_tasks.times {\n         // Make sure all above children are fully spawned; i.e., enlisted in\n         // their ancestor groups.\n-        oldcomm::recv(po);\n+        po.recv();\n     }\n     error!(\"Grandchild group ready to go.\");\n     // Master grandchild task exits early."}, {"sha": "c5092ecaecc0022a4c8424e73d015f0a0a1521bb", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 29, "deletions": 53, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -10,79 +10,55 @@\n \n // Test for concurrent tasks\n \n-enum msg {\n-    ready(oldcomm::Chan<msg>),\n-    start,\n-    done(int),\n-}\n+use core::pipes::*;\n \n-fn calc(children: uint, parent_ch: oldcomm::Chan<msg>) {\n-    let port = oldcomm::Port();\n-    let chan = oldcomm::Chan(&port);\n-    let mut child_chs = ~[];\n-    let mut sum = 0;\n+fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n \n-    for iter::repeat (children) {\n+    let wait_ports: ~[Port<Chan<Chan<int>>>] = do vec::from_fn(children) |_| {\n+        let (wait_port, wait_chan) = stream::<Chan<Chan<int>>>();\n         do task::spawn {\n-            calc(0u, chan);\n-        };\n-    }\n-\n-    for iter::repeat (children) {\n-        match oldcomm::recv(port) {\n-          ready(child_ch) => {\n-            child_chs.push(child_ch);\n-          }\n-          _ => fail ~\"task-perf-one-million failed (port not ready)\"\n+            calc(children / 2, &wait_chan);\n         }\n-    }\n+        wait_port\n+    };\n \n-    oldcomm::send(parent_ch, ready(chan));\n+    let child_start_chans: ~[Chan<Chan<int>>] = vec::map_consume(wait_ports, |port| port.recv());\n \n-    match oldcomm::recv(port) {\n-        start => {\n-            for vec::each(child_chs) |child_ch| {\n-                oldcomm::send(*child_ch, start);\n-            }\n-        }\n-        _ => fail ~\"task-perf-one-million failed (port not in start state)\"\n-    }\n+    let (start_port, start_chan) = stream::<Chan<int>>();\n+    parent_wait_chan.send(start_chan);\n+    let parent_result_chan: Chan<int> = start_port.recv();\n \n-    for iter::repeat (children) {\n-        match oldcomm::recv(port) {\n-          done(child_sum) => { sum += child_sum; }\n-          _ => fail ~\"task-perf-one-million failed (port not done)\"\n-        }\n-    }\n+    let child_sum_ports: ~[Port<int>] = do vec::map_consume(child_start_chans) |child_start_chan| {\n+        let (child_sum_port, child_sum_chan) = stream::<int>();\n+        child_start_chan.send(child_sum_chan);\n+        child_sum_port\n+    };\n+\n+    let mut sum = 0;\n+    vec::consume(child_sum_ports, |_, sum_port| sum += sum_port.recv() );\n \n-    oldcomm::send(parent_ch, done(sum + 1));\n+    parent_result_chan.send(sum + 1);\n }\n \n fn main() {\n     let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100000\"]\n+        ~[~\"\", ~\"30\"]\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"100\"]\n+        ~[~\"\", ~\"10\"]\n     } else {\n         args\n     };\n \n     let children = uint::from_str(args[1]).get();\n-    let port = oldcomm::Port();\n-    let chan = oldcomm::Chan(&port);\n+    let (wait_port, wait_chan) = stream();\n     do task::spawn {\n-        calc(children, chan);\n-    };\n-    match oldcomm::recv(port) {\n-      ready(chan) => {\n-        oldcomm::send(chan, start);\n-      }\n-      _ => fail ~\"task-perf-one-million failed (port not ready)\"\n-    }\n-    let sum = match oldcomm::recv(port) {\n-      done(sum) => { sum }\n-      _ => fail ~\"task-perf-one-million failed (port not done)\"\n+        calc(children, &wait_chan);\n     };\n+\n+    let start_chan = wait_port.recv();\n+    let (sum_port, sum_chan) = stream::<int>();\n+    start_chan.send(sum_chan);\n+    let sum = sum_port.recv();\n     error!(\"How many tasks? %d tasks.\", sum);\n }"}, {"sha": "17444018356eeb675b76002296a20e8a52b513da", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "removed", "additions": 0, "deletions": 384, "changes": 384, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,384 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-   A parallel word-frequency counting program.\n-\n-   This is meant primarily to demonstrate Rust's MapReduce framework.\n-\n-   It takes a list of files on the oldcommand line and outputs a list of\n-   words along with how many times each word is used.\n-\n-*/\n-\n-// xfail-pretty\n-\n-#[allow(structural_records)]; // Pipes\n-\n-extern mod std;\n-\n-use core::option;\n-use std::map;\n-use std::map::HashMap;\n-use core::hash::Hash;\n-use core::io::{ReaderUtil, WriterUtil};\n-\n-use std::time;\n-\n-use core::oldcomm::Chan;\n-use core::oldcomm::Port;\n-use core::oldcomm::recv;\n-use core::oldcomm::send;\n-use core::cmp::Eq;\n-use core::to_bytes::IterBytes;\n-\n-macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n-)\n-\n-trait word_reader {\n-    fn read_word() -> Option<~str>;\n-}\n-\n-// These used to be in task, but they disappeared.\n-pub type joinable_task = Port<()>;\n-pub fn spawn_joinable(+f: fn~()) -> joinable_task {\n-    let p = Port();\n-    let c = Chan(&p);\n-    do task::spawn() |move f| {\n-        f();\n-        c.send(());\n-    }\n-    p\n-}\n-\n-pub fn join(t: joinable_task) {\n-    t.recv()\n-}\n-\n-impl io::Reader: word_reader {\n-    fn read_word() -> Option<~str> { read_word(self) }\n-}\n-\n-fn file_word_reader(filename: ~str) -> word_reader {\n-    match io::file_reader(&Path(filename)) {\n-      result::Ok(f) => { f as word_reader }\n-      result::Err(e) => { fail fmt!(\"%?\", e) }\n-    }\n-}\n-\n-fn map(f: fn~() -> word_reader, emit: map_reduce::putter<~str, int>) {\n-    let f = f();\n-    loop {\n-        match f.read_word() {\n-          Some(w) => { emit(&w, 1); }\n-          None => { break; }\n-        }\n-    }\n-}\n-\n-fn reduce(word: &~str, get: map_reduce::getter<int>) {\n-    let mut count = 0;\n-\n-    loop { match get() { Some(_) => { count += 1; } None => { break; } } }\n-\n-    io::println(fmt!(\"%s\\t%?\", *word, count));\n-}\n-\n-pub struct box<T> {\n-    mut contents: Option<T>,\n-}\n-\n-pub impl<T> box<T> {\n-    fn swap(f: fn(+v: T) -> T) {\n-        let mut tmp = None;\n-        self.contents <-> tmp;\n-        self.contents = Some(f(option::unwrap(move tmp)));\n-    }\n-\n-    fn unwrap() -> T {\n-        let mut tmp = None;\n-        self.contents <-> tmp;\n-        option::unwrap(move tmp)\n-    }\n-}\n-\n-pub fn box<T>(+x: T) -> box<T> {\n-    box {\n-        contents: Some(move x)\n-    }\n-}\n-\n-mod map_reduce {\n-    use core::oldcomm::*;\n-\n-    use std::map::HashMap;\n-    use std::map;\n-\n-    pub type putter<K, V> = fn(&K, V);\n-\n-    pub type mapper<K1, K2, V> = fn~(K1, putter<K2, V>);\n-\n-    pub type getter<V> = fn() -> Option<V>;\n-\n-    pub type reducer<K, V> = fn~(&K, getter<V>);\n-\n-    enum ctrl_proto<K, V> {\n-        find_reducer(K, Chan<Chan<::map_reduce::reduce_proto<V>>>),\n-        mapper_done\n-    }\n-\n-\n-    proto! ctrl_proto (\n-        open: send<K: Copy Owned, V: Copy Owned> {\n-            find_reducer(K) -> reducer_response<K, V>,\n-            mapper_done -> !\n-        }\n-\n-        reducer_response: recv<K: Copy Owned, V: Copy Owned> {\n-            reducer(::core::oldcomm::Chan<::map_reduce::reduce_proto<V>>)\n-                -> open<K, V>\n-        }\n-    )\n-\n-    pub enum reduce_proto<V> {\n-        emit_val(V),\n-        done,\n-        addref,\n-        release\n-    }\n-\n-    fn start_mappers<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned,\n-                     V: Copy Owned>(\n-        map: &mapper<K1, K2, V>,\n-        ctrls: &mut ~[ctrl_proto::server::open<K2, V>],\n-        inputs: &~[K1])\n-        -> ~[::joinable_task]\n-    {\n-        let mut tasks = ~[];\n-        for inputs.each |i| {\n-            let (ctrl, ctrl_server) = ctrl_proto::init();\n-            let ctrl = ::box(move ctrl);\n-            let i = copy *i;\n-            let m = copy *map;\n-            tasks.push(::spawn_joinable(|move ctrl, move i| map_task(copy m, &ctrl, i)));\n-            ctrls.push(move ctrl_server);\n-        }\n-        move tasks\n-    }\n-\n-    fn map_task<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned, V: Copy Owned>(\n-        map: mapper<K1, K2, V>,\n-        ctrl: &::box<ctrl_proto::client::open<K2, V>>,\n-        input: K1)\n-    {\n-        // log(error, \"map_task \" + input);\n-        let intermediates: HashMap<K2, Chan<::map_reduce::reduce_proto<V>>>\n-            = map::HashMap();\n-\n-        do map(input) |key: &K2, val| {\n-            let mut c = None;\n-            let found: Option<Chan<::map_reduce::reduce_proto<V>>>\n-                = intermediates.find(*key);\n-            match found {\n-              Some(_c) => { c = Some(_c); }\n-              None => {\n-                do ctrl.swap |ctrl| {\n-                    let ctrl = ctrl_proto::client::find_reducer(move ctrl, *key);\n-                    match pipes::recv(move ctrl) {\n-                      ctrl_proto::reducer(c_, ctrl) => {\n-                        c = Some(c_);\n-                        move_out!(ctrl)\n-                      }\n-                    }\n-                }\n-                intermediates.insert(*key, c.get());\n-                send(c.get(), addref);\n-              }\n-            }\n-            send(c.get(), emit_val(val));\n-        }\n-\n-        fn finish<K: Copy Owned, V: Copy Owned>(\n-            _k: K, v: Chan<::map_reduce::reduce_proto<V>>)\n-        {\n-            send(v, release);\n-        }\n-        for intermediates.each_value |v| { send(v, release) }\n-        ctrl_proto::client::mapper_done(ctrl.unwrap());\n-    }\n-\n-    fn reduce_task<K: Copy Owned, V: Copy Owned>(\n-        reduce: ~reducer<K, V>, \n-        key: K,\n-        out: Chan<Chan<::map_reduce::reduce_proto<V>>>)\n-    {\n-        let p = Port();\n-\n-        send(out, Chan(&p));\n-\n-        let mut ref_count = 0;\n-        let mut is_done = false;\n-\n-        fn get<V: Copy Owned>(p: Port<::map_reduce::reduce_proto<V>>,\n-                             ref_count: &mut int, is_done: &mut bool)\n-           -> Option<V> {\n-            while !*is_done || *ref_count > 0 {\n-                match recv(p) {\n-                  emit_val(v) => {\n-                    // error!(\"received %d\", v);\n-                    return Some(v);\n-                  }\n-                  done => {\n-                    // error!(\"all done\");\n-                    *is_done = true;\n-                  }\n-                  addref => { *ref_count += 1; }\n-                  release => { *ref_count -= 1; }\n-                }\n-            }\n-            return None;\n-        }\n-\n-        (*reduce)(&key, || get(p, &mut ref_count, &mut is_done) );\n-    }\n-\n-    pub fn map_reduce<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned, V: Copy Owned>(\n-        map: mapper<K1, K2, V>,\n-        reduce: reducer<K2, V>,\n-        inputs: ~[K1])\n-    {\n-        let mut ctrl = ~[];\n-\n-        // This task becomes the master control task. It task::_spawns\n-        // to do the rest.\n-\n-        let reducers = map::HashMap();\n-        let mut tasks = start_mappers(&map, &mut ctrl, &inputs);\n-        let mut num_mappers = vec::len(inputs) as int;\n-\n-        while num_mappers > 0 {\n-            let (_ready, message, ctrls) = pipes::select(move ctrl);\n-            match option::unwrap(move message) {\n-              ctrl_proto::mapper_done => {\n-                // error!(\"received mapper terminated.\");\n-                num_mappers -= 1;\n-                ctrl = move ctrls;\n-              }\n-              ctrl_proto::find_reducer(k, cc) => {\n-                let c;\n-                // log(error, \"finding reducer for \" + k);\n-                match reducers.find(k) {\n-                  Some(_c) => {\n-                    // log(error,\n-                    // \"reusing existing reducer for \" + k);\n-                    c = _c;\n-                  }\n-                  None => {\n-                    // log(error, \"creating new reducer for \" + k);\n-                    let p = Port();\n-                    let ch = Chan(&p);\n-                    let r = copy reduce, kk = k;\n-                    tasks.push(::spawn_joinable(|move r|\n-                        reduce_task(~copy r, kk, ch)\n-                    ));\n-                    c = recv(p);\n-                    reducers.insert(k, c);\n-                  }\n-                }\n-                ctrl = vec::append_one(\n-                    move ctrls,\n-                    ctrl_proto::server::reducer(move_out!(cc), c));\n-              }\n-            }\n-        }\n-\n-        for reducers.each_value |v| { send(v, done) }\n-\n-        for tasks.each |t| { ::join(*t); }\n-    }\n-}\n-\n-fn main() {\n-    let argv = os::args();\n-    if vec::len(argv) < 2u && !os::getenv(~\"RUST_BENCH\").is_some() {\n-        let out = io::stdout();\n-\n-        out.write_line(fmt!(\"Usage: %s <filename> ...\", argv[0]));\n-\n-        return;\n-    }\n-\n-    let readers: ~[fn~() -> word_reader]  = if argv.len() >= 2 {\n-        vec::view(argv, 1u, argv.len()).map(|f| {\n-            let f = copy *f;\n-            fn~() -> word_reader { file_word_reader(copy f) }\n-        })\n-    }\n-    else {\n-        let num_readers = 50;\n-        let words_per_reader = 600;\n-        vec::from_fn(\n-            num_readers,\n-            |_i| fn~() -> word_reader {\n-                random_word_reader(words_per_reader) as word_reader\n-            })\n-    };\n-\n-    let start = time::precise_time_ns();\n-\n-    map_reduce::map_reduce(map, reduce, readers);\n-    let stop = time::precise_time_ns();\n-\n-    let elapsed = (stop - start) / 1000000u64;\n-\n-    log(error, ~\"MapReduce completed in \"\n-             + u64::str(elapsed) + ~\"ms\");\n-}\n-\n-fn read_word(r: io::Reader) -> Option<~str> {\n-    let mut w = ~\"\";\n-\n-    while !r.eof() {\n-        let c = r.read_char();\n-\n-        if is_word_char(c) {\n-            w += str::from_char(c);\n-        } else { if w != ~\"\" { return Some(w); } }\n-    }\n-    return None;\n-}\n-\n-fn is_word_char(c: char) -> bool {\n-    char::is_alphabetic(c) || char::is_digit(c) || c == '_'\n-}\n-\n-struct random_word_reader {\n-    mut remaining: uint,\n-    rng: rand::Rng,\n-}\n-\n-impl random_word_reader: word_reader {\n-    fn read_word() -> Option<~str> {\n-        if self.remaining > 0 {\n-            self.remaining -= 1;\n-            let len = self.rng.gen_uint_range(1, 4);\n-            Some(self.rng.gen_str(len))\n-        }\n-        else { None }\n-    }\n-}\n-\n-fn random_word_reader(count: uint) -> random_word_reader {\n-    random_word_reader {\n-        remaining: count,\n-        rng: rand::Rng()\n-    }\n-}"}, {"sha": "b374a03eaba268fe26225823bf02e872e3de5a62", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -12,7 +12,6 @@\n \n extern mod std;\n use std::arc;\n-use core::oldcomm::*;\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"}, {"sha": "1de8362e23a2d2a4aebbab48c9d9121feef4c17d", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -10,7 +10,6 @@\n \n extern mod std;\n use std::arc;\n-use core::oldcomm::*;\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"}, {"sha": "080f7fe3c6ea5d5547d0776ed84c7057428672d7", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,22 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Port<T>(@T);\n+\n fn main() {\n     struct foo {\n-      _x: oldcomm::Port<()>,\n+      _x: Port<()>,\n     }\n \n     impl foo : Drop {\n         fn finalize(&self) {}\n     }\n \n-    fn foo(x: oldcomm::Port<()>) -> foo {\n+    fn foo(x: Port<()>) -> foo {\n         foo {\n             _x: x\n         }\n     }\n    \n-    let x = ~mut Some(foo(oldcomm::Port()));\n+    let x = ~mut Some(foo(Port(@())));\n \n     do task::spawn |move x| { //~ ERROR not a sendable value\n         let mut y = None;"}, {"sha": "b5bb05d5c6950e03185951f32e4ec58bf65746a7", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -25,7 +25,6 @@ fn foo(i:int, j: @~str) -> foo {\n \n fn main() {\n   let cat = ~\"kitty\";\n-  let po = oldcomm::Port();         //~ ERROR missing `owned`\n-  let ch = oldcomm::Chan(&po);       //~ ERROR missing `owned`\n-  oldcomm::send(ch, foo(42, @(move cat))); //~ ERROR missing `owned`\n+    let (_, ch) = pipes::stream(); //~ ERROR missing `owned`\n+  ch.send(foo(42, @(move cat))); //~ ERROR missing `owned`\n }"}, {"sha": "d592fb80f7682786cb2bf7eccc02e305b500eef8", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -12,13 +12,11 @@\n \n // error-pattern:1 == 2\n extern mod std;\n-use oldcomm::Port;\n-use oldcomm::recv;\n \n fn child() { assert (1 == 2); }\n \n fn main() {\n-    let p = Port::<int>();\n+    let (p, _c) = pipes::stream::<int>();\n     task::spawn(|| child() );\n-    let x = recv(p);\n+    let x = p.recv();\n }"}, {"sha": "dc571af636eacd9b3634cf66c3f7cfa7d642bc2e", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -11,15 +11,11 @@\n \n \n // error-pattern:fail\n-extern mod std;\n-use oldcomm::Chan;\n-use oldcomm::Port;\n-use oldcomm::recv;\n \n fn child() { fail; }\n \n fn main() {\n-    let p = Port::<int>();\n+    let (p, _c) = pipes::stream::<()>();\n     task::spawn(|| child() );\n     task::yield();\n }"}, {"sha": "b9f785a795838a98fb1fc7730498e3a803f485ff", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -11,20 +11,17 @@\n \n \n // error-pattern:fail\n-extern mod std;\n-use oldcomm::Port;\n-use oldcomm::recv;\n \n fn grandchild() { fail ~\"grandchild dies\"; }\n \n fn child() {\n-    let p = Port::<int>();\n+    let (p, _c) = pipes::stream::<int>();\n     task::spawn(|| grandchild() );\n-    let x = recv(p);\n+    let x = p.recv();\n }\n \n fn main() {\n-    let p = Port::<int>();\n+    let (p, _c) = pipes::stream::<int>();\n     task::spawn(|| child() );\n-    let x = recv(p);\n+    let x = p.recv();\n }"}, {"sha": "23ddc7573197f350ed809c27eb30cff959b6416c", "filename": "src/test/run-fail/linked-failure4.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure4.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -10,24 +10,20 @@\n // except according to those terms.\n \n // error-pattern:1 == 2\n-extern mod std;\n-use oldcomm::Chan;\n-use oldcomm::Port;\n-use oldcomm::recv;\n \n fn child() { assert (1 == 2); }\n \n fn parent() {\n-    let p = Port::<int>();\n+    let (p, _c) = pipes::stream::<int>();\n     task::spawn(|| child() );\n-    let x = recv(p);\n+    let x = p.recv();\n }\n \n // This task is not linked to the failure chain, but since the other\n // tasks are going to fail the kernel, this one will fail too\n fn sleeper() {\n-    let p = Port::<int>();\n-    let x = recv(p);\n+    let (p, _c) = pipes::stream::<int>();\n+    let x = p.recv();\n }\n \n fn main() {"}, {"sha": "bd1541302a40f5369cd262b996e05215fdb531ea", "filename": "src/test/run-fail/port-type.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:meep\n-extern mod std;\n-use oldcomm::Chan;\n-use oldcomm::Port;\n-use oldcomm::send;\n-use oldcomm::recv;\n-\n-fn echo<T: Owned>(c: Chan<T>, oc: Chan<Chan<T>>) {\n-    // Tests that the type argument in port gets\n-    // visited\n-    let p = Port::<T>();\n-    send(oc, Chan(&p));\n-\n-    let x = recv(p);\n-    send(c, move x);\n-}\n-\n-fn main() { fail ~\"meep\"; }"}, {"sha": "9c8ec249255404f42607b651ba3d860815d4c509", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -10,18 +10,16 @@\n \n // error-pattern:goodfail\n \n-extern mod std;\n-\n fn goodfail() {\n     task::yield();\n     fail ~\"goodfail\";\n }\n \n fn main() {\n     task::spawn(|| goodfail() );\n-    let po = oldcomm::Port();\n+    let (po, _c) = pipes::stream();\n     // We shouldn't be able to get past this recv since there's no\n     // message available\n-    let i: int = oldcomm::recv(po);\n+    let i: int = po.recv();\n     fail ~\"badfail\";\n }"}, {"sha": "8f31520557379d682f5b598e6ccf494cd9bcbb6a", "filename": "src/test/run-pass/acyclic-unwind.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-// -*- rust -*-\n-\n-extern mod std;\n-\n-fn f(c: oldcomm::_chan<int>) {\n-    type t = {_0: int, _1: int, _2: int};\n-\n-    // Allocate a box.\n-    let x: @t = @{_0: 1, _1: 2, _2: 3};\n-\n-    // Signal parent that we've allocated a box.\n-    oldcomm::send(c, 1);\n-\n-\n-    loop {\n-        // spin waiting for the parent to kill us.\n-        debug!(\"child waiting to die...\");\n-\n-        // while waiting to die, the messages we are\n-        // sending to the channel are never received\n-        // by the parent, therefore this test cases drops\n-        // messages on the floor\n-        oldcomm::send(c, 1);\n-    }\n-}\n-\n-fn main() {\n-    let p = oldcomm::mk_port();\n-    task::_spawn(bind f(p.mk_chan()));\n-    let i: int;\n-\n-    // synchronize on event from child.\n-    i = p.recv();\n-\n-    debug!(\"parent exiting, killing child\");\n-}"}, {"sha": "28ae13896f0c397c454874252a5a14c5c745c1a7", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -15,7 +15,7 @@\n extern mod std;\n \n // These tests used to be separate files, but I wanted to refactor all\n-// the oldcommon code.\n+// the common code.\n \n use cmp::Eq;\n use std::ebml;"}, {"sha": "87fd1443db9e3c1de236132f49105268ec2100fb", "filename": "src/test/run-pass/basic-1.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,34 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-fn a(c: ::core::oldcomm::Chan<int>) { ::core::oldcomm::send(c, 10); }\n-\n-fn main() {\n-    let p = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    task::spawn(|| a(ch) );\n-    task::spawn(|| a(ch) );\n-    let mut n: int = 0;\n-    n = ::core::oldcomm::recv(p);\n-    n = ::core::oldcomm::recv(p);\n-    //    debug!(\"Finished.\");\n-}\n-\n-fn b(c: ::core::oldcomm::Chan<int>) {\n-    //    debug!(\"task b0\");\n-    //    debug!(\"task b1\");\n-    //    debug!(\"task b2\");\n-    //    debug!(\"task b3\");\n-    //    debug!(\"task b4\");\n-    //    debug!(\"task b5\");\n-    ::core::oldcomm::send(c, 10);\n-}"}, {"sha": "0e542e157cf934ecdd1905a6799e368ecbf2a06c", "filename": "src/test/run-pass/basic-2.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,37 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-fn a(c: ::core::oldcomm::Chan<int>) {\n-    debug!(\"task a0\");\n-    debug!(\"task a1\");\n-    ::core::oldcomm::send(c, 10);\n-}\n-\n-fn main() {\n-    let p = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    task::spawn(|| a(ch) );\n-    task::spawn(|| b(ch) );\n-    let mut n: int = 0;\n-    n = ::core::oldcomm::recv(p);\n-    n = ::core::oldcomm::recv(p);\n-    debug!(\"Finished.\");\n-}\n-\n-fn b(c: ::core::oldcomm::Chan<int>) {\n-    debug!(\"task b0\");\n-    debug!(\"task b1\");\n-    debug!(\"task b2\");\n-    debug!(\"task b2\");\n-    debug!(\"task b3\");\n-    ::core::oldcomm::send(c, 10);\n-}"}, {"sha": "ac029b63eef4075d344c886dc796aafa7ccd54f9", "filename": "src/test/run-pass/basic.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,58 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-fn a(c: ::core::oldcomm::Chan<int>) {\n-    if true {\n-        debug!(\"task a\");\n-        debug!(\"task a\");\n-        debug!(\"task a\");\n-        debug!(\"task a\");\n-        debug!(\"task a\");\n-    }\n-    ::core::oldcomm::send(c, 10);\n-}\n-\n-fn k(x: int) -> int { return 15; }\n-\n-fn g(x: int, y: ~str) -> int {\n-    log(debug, x);\n-    log(debug, y);\n-    let z: int = k(1);\n-    return z;\n-}\n-\n-fn main() {\n-    let mut n: int = 2 + 3 * 7;\n-    let s: ~str = ~\"hello there\";\n-    let p = oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    task::spawn(|| a(ch) );\n-    task::spawn(|| b(ch) );\n-    let mut x: int = 10;\n-    x = g(n, s);\n-    log(debug, x);\n-    n = ::core::oldcomm::recv(p);\n-    n = ::core::oldcomm::recv(p);\n-    debug!(\"children finished, root finishing\");\n-}\n-\n-fn b(c: ::core::oldcomm::Chan<int>) {\n-    if true {\n-        debug!(\"task b\");\n-        debug!(\"task b\");\n-        debug!(\"task b\");\n-        debug!(\"task b\");\n-        debug!(\"task b\");\n-        debug!(\"task b\");\n-    }\n-    ::core::oldcomm::send(c, 10);\n-}"}, {"sha": "6d57084f85af253d9fe65c6a641ad0f90b6cfc7f", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -24,10 +24,11 @@\n // course preferable, as the value itself is\n // irrelevant).\n \n-fn foo(&&x: ()) -> ::core::oldcomm::Port<()> {\n-    let p = ::core::oldcomm::Port();\n-    let c = ::core::oldcomm::Chan(&p);\n-    do task::spawn() |copy c, copy x| {\n+use core::pipes::*;\n+\n+fn foo(&&x: ()) -> Port<()> {\n+    let (p, c) = stream::<()>();\n+    do task::spawn() |copy x| {\n         c.send(x);\n     }\n     p"}, {"sha": "6a04dbee8dcaa45e04d4b0dd0be58615c284a140", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -18,8 +18,6 @@\n \n extern mod cci_capture_clause;\n \n-use core::oldcomm::recv;\n-\n fn main() {\n     cci_capture_clause::foo(()).recv()\n }"}, {"sha": "43825b03c296d8c9e139597a6a09f62a091d9557", "filename": "src/test/run-pass/chan-leak.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Issue #763\n-\n-enum request { quit, close(::core::oldcomm::Chan<bool>), }\n-\n-type ctx = ::core::oldcomm::Chan<request>;\n-\n-fn request_task(c: ::core::oldcomm::Chan<ctx>) {\n-    let p = ::core::oldcomm::Port();\n-    ::core::oldcomm::send(c, ::core::oldcomm::Chan(&p));\n-    let mut req: request;\n-    req = ::core::oldcomm::recv(p);\n-    // Need to drop req before receiving it again\n-    req = ::core::oldcomm::recv(p);\n-}\n-\n-fn new_cx() -> ctx {\n-    let p = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    let t = task::spawn(|| request_task(ch) );\n-    let mut cx: ctx;\n-    cx = ::core::oldcomm::recv(p);\n-    return cx;\n-}\n-\n-fn main() {\n-    let cx = new_cx();\n-\n-    let p = ::core::oldcomm::Port::<bool>();\n-    ::core::oldcomm::send(cx, close(::core::oldcomm::Chan(&p)));\n-    ::core::oldcomm::send(cx, quit);\n-}"}, {"sha": "4197a63107ccd8c2f4aad5e36a59f1fc21e922a5", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -9,19 +9,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::pipes::*;\n \n fn main() {\n-    let p = oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    let t = task::spawn(|| child(ch) );\n-    let y = ::core::oldcomm::recv(p);\n+    let (p, ch) = stream();\n+    let t = task::spawn(|| child(&ch) );\n+    let y = p.recv();\n     error!(\"received\");\n     log(error, y);\n     assert (y == 10);\n }\n \n-fn child(c: ::core::oldcomm::Chan<int>) {\n+fn child(c: &Chan<int>) {\n     error!(\"sending\");\n-    ::core::oldcomm::send(c, 10);\n+    c.send(10);\n     error!(\"value sent\");\n }"}, {"sha": "a3679f71a6b1bb7a3096daa1b234e7336bc48a28", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,22 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-fn main() {\n-    let po = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&po);\n-    ::core::oldcomm::send(ch, 10);\n-    let i = ::core::oldcomm::recv(po);\n-    assert (i == 10);\n-    ::core::oldcomm::send(ch, 11);\n-    let j = ::core::oldcomm::recv(po);\n-    assert (j == 11);\n-}"}, {"sha": "2f4d69ee8560bdc2e5e117d5ca5c0896b606077c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -20,60 +20,57 @@ extern mod std;\n \n use std::map;\n use std::map::HashMap;\n-use core::oldcomm::Chan;\n-use core::oldcomm::Port;\n-use core::oldcomm::send;\n-use core::oldcomm::recv;\n+use core::pipes::*;\n \n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n     use std::map;\n     use std::map::HashMap;\n-    use core::oldcomm::Chan;\n-    use core::oldcomm::Port;\n-    use core::oldcomm::send;\n-    use core::oldcomm::recv;\n+    use core::pipes::*;\n \n     pub type putter = fn@(~str, ~str);\n \n     pub type mapper = extern fn(~str, putter);\n \n     enum ctrl_proto { find_reducer(~[u8], Chan<int>), mapper_done, }\n \n-    fn start_mappers(ctrl: Chan<ctrl_proto>, inputs: ~[~str]) {\n+    fn start_mappers(ctrl: SharedChan<ctrl_proto>, inputs: ~[~str]) {\n         for inputs.each |i| {\n+            let ctrl = ctrl.clone();\n             let i = copy *i;\n-            task::spawn(|move i| map_task(ctrl, copy i) );\n+            task::spawn(|move i| map_task(ctrl.clone(), copy i) );\n         }\n     }\n \n-    fn map_task(ctrl: Chan<ctrl_proto>, input: ~str) {\n+    fn map_task(ctrl: SharedChan<ctrl_proto>, input: ~str) {\n         let intermediates = map::HashMap();\n \n-        fn emit(im: map::HashMap<~str, int>, ctrl: Chan<ctrl_proto>, key: ~str,\n+        fn emit(im: map::HashMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n                 val: ~str) {\n             let mut c;\n             match im.find(copy key) {\n               Some(_c) => { c = _c }\n               None => {\n-                let p = Port();\n+                  let (pp, cc) = stream();\n                 error!(\"sending find_reducer\");\n-                send(ctrl, find_reducer(str::to_bytes(key), Chan(&p)));\n+                ctrl.send(find_reducer(str::to_bytes(key), cc));\n                 error!(\"receiving\");\n-                c = recv(p);\n+                c = pp.recv();\n                 log(error, c);\n                 im.insert(key, c);\n               }\n             }\n         }\n \n-        ::map(input, |a,b| emit(intermediates, ctrl, a, b) );\n-        send(ctrl, mapper_done);\n+        let ctrl_clone = ctrl.clone();\n+        ::map(input, |a,b| emit(intermediates, ctrl.clone(), a, b) );\n+        ctrl_clone.send(mapper_done);\n     }\n \n     pub fn map_reduce(inputs: ~[~str]) {\n-        let ctrl = Port();\n+        let (ctrl_port, ctrl_chan) = stream();\n+        let ctrl_chan = SharedChan(ctrl_chan);\n \n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n@@ -82,20 +79,20 @@ mod map_reduce {\n \n         reducers = map::HashMap();\n \n-        start_mappers(Chan(&ctrl), copy inputs);\n+        start_mappers(ctrl_chan, copy inputs);\n \n         let mut num_mappers = vec::len(inputs) as int;\n \n         while num_mappers > 0 {\n-            match recv(ctrl) {\n+            match ctrl_port.recv() {\n               mapper_done => { num_mappers -= 1; }\n               find_reducer(k, cc) => {\n                 let mut c;\n                 match reducers.find(str::from_bytes(k)) {\n                   Some(_c) => { c = _c; }\n                   None => { c = 0; }\n                 }\n-                send(cc, c);\n+                cc.send(c);\n               }\n             }\n         }"}, {"sha": "52f202a2deb48497125a9c6c5aebde401f16678b", "filename": "src/test/run-pass/issue-507.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-/*\n-   This is a test case for Issue 507.\n-\n-   https://github.com/graydon/rust/issues/507\n-*/\n-\n-fn grandchild(c: ::core::oldcomm::Chan<int>) { ::core::oldcomm::send(c, 42); }\n-\n-fn child(c: ::core::oldcomm::Chan<int>) {\n-    task::spawn(|| grandchild(c) )\n-}\n-\n-fn main() {\n-    let p = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-\n-    task::spawn(|| child(ch) );\n-\n-    let x: int = ::core::oldcomm::recv(p);\n-\n-    log(debug, x);\n-\n-    assert (x == 42);\n-}"}, {"sha": "53827bb63fa3cfaeac61d354109cfb658fa77e48", "filename": "src/test/run-pass/issue-687.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum msg { closed, received(~[u8]), }\n-\n-fn producer(c: ::core::oldcomm::Chan<~[u8]>) {\n-    ::core::oldcomm::send(c, ~[1u8, 2u8, 3u8, 4u8]);\n-    let empty: ~[u8] = ~[];\n-    ::core::oldcomm::send(c, empty);\n-}\n-\n-fn packager(cb: ::core::oldcomm::Chan<::core::oldcomm::Chan<~[u8]>>, msg: ::core::oldcomm::Chan<msg>) {\n-    let p: ::core::oldcomm::Port<~[u8]> = ::core::oldcomm::Port();\n-    ::core::oldcomm::send(cb, ::core::oldcomm::Chan(&p));\n-    loop {\n-        debug!(\"waiting for bytes\");\n-        let data = ::core::oldcomm::recv(p);\n-        debug!(\"got bytes\");\n-        if vec::len(data) == 0u {\n-            debug!(\"got empty bytes, quitting\");\n-            break;\n-        }\n-        debug!(\"sending non-empty buffer of length\");\n-        log(debug, vec::len(data));\n-        ::core::oldcomm::send(msg, received(data));\n-        debug!(\"sent non-empty buffer\");\n-    }\n-    debug!(\"sending closed message\");\n-    ::core::oldcomm::send(msg, closed);\n-    debug!(\"sent closed message\");\n-}\n-\n-fn main() {\n-    let p: ::core::oldcomm::Port<msg> = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    let recv_reader: ::core::oldcomm::Port<::core::oldcomm::Chan<~[u8]>> = ::core::oldcomm::Port();\n-    let recv_reader_chan = ::core::oldcomm::Chan(&recv_reader);\n-    let pack = task::spawn(|| packager(recv_reader_chan, ch) );\n-\n-    let source_chan: ::core::oldcomm::Chan<~[u8]> = ::core::oldcomm::recv(recv_reader);\n-    let prod = task::spawn(|| producer(source_chan) );\n-\n-    loop {\n-        let msg = ::core::oldcomm::recv(p);\n-        match msg {\n-          closed => { debug!(\"Got close message\"); break; }\n-          received(data) => {\n-            debug!(\"Got data. Length is:\");\n-            log(debug, vec::len::<u8>(data));\n-          }\n-        }\n-    }\n-}"}, {"sha": "75404c01fc53aa2a605c88f810524c95f0e6cfc1", "filename": "src/test/run-pass/issue-783.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn a() {\n-    fn doit() {\n-        fn b(c: ::core::oldcomm::Chan<::core::oldcomm::Chan<int>>) {\n-            let p = ::core::oldcomm::Port();\n-            ::core::oldcomm::send(c, ::core::oldcomm::Chan(&p));\n-        }\n-        let p = ::core::oldcomm::Port();\n-        let ch = ::core::oldcomm::Chan(&p);\n-        task::spawn(|| b(ch) );\n-        ::core::oldcomm::recv(p);\n-    }\n-    let mut i = 0;\n-    while i < 100 {\n-        doit();\n-        i += 1;\n-    }\n-}\n-\n-fn main() {\n-    for iter::repeat(100u) {\n-        task::spawn(|| a() );\n-    }\n-}"}, {"sha": "b890160ea172e1880319512e5f68d2ebd5fb8fc3", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -1,13 +1,14 @@\n-fn producer(c: ::core::oldcomm::Chan<~[u8]>) {\n-    ::core::oldcomm::send(c,\n+use core::pipes::*;\n+\n+fn producer(c: &Chan<~[u8]>) {\n+    c.send(\n          ~[1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n           13u8]);\n }\n \n fn main() {\n-    let p: ::core::oldcomm::Port<~[u8]> = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    let prod = task::spawn(|| producer(ch) );\n+    let (p, ch) = stream::<~[u8]>();\n+    let prod = task::spawn(|| producer(&ch) );\n \n-    let data: ~[u8] = ::core::oldcomm::recv(p);\n+    let data: ~[u8] = p.recv();\n }"}, {"sha": "4e5ce6cd0915fa7ef6b2939bd91630fc648f03f1", "filename": "src/test/run-pass/lazychan.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,30 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let p = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&p);\n-    let mut y: int;\n-\n-    task::spawn(|| child(ch) );\n-    y = ::core::oldcomm::recv(p);\n-    debug!(\"received 1\");\n-    log(debug, y);\n-    assert (y == 10);\n-\n-    task::spawn(|| child(ch) );\n-    y = ::core::oldcomm::recv(p);\n-    debug!(\"received 2\");\n-    log(debug, y);\n-    assert (y == 10);\n-}\n-\n-fn child(c: ::core::oldcomm::Chan<int>) { ::core::oldcomm::send(c, 10); }"}, {"sha": "44498d96157579ad1171708ff79d4a2242a742fd", "filename": "src/test/run-pass/leaky_comm.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fleaky_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fleaky_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleaky_comm.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-// aux-build:test_comm.rs\n-\n-extern mod test_comm;\n-\n-fn main() {\n-  let p = test_comm::port();\n-  \n-  match None::<int> {\n-      None => {}\n-      Some(_) => {\n-  if 0 == test_comm::recv(p) {\n-      error!(\"floop\");\n-  }\n-  else {\n-      error!(\"bloop\");\n-  }\n-      }}\n-}"}, {"sha": "23153b79cd94bc35489b32686121211fb577a9db", "filename": "src/test/run-pass/many.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,35 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern mod std;\n-\n-fn sub(parent: oldcomm::Chan<int>, id: int) {\n-    if id == 0 {\n-        oldcomm::send(parent, 0);\n-    } else {\n-        let p = oldcomm::Port();\n-        let ch = oldcomm::Chan(&p);\n-        let child = task::spawn(|| sub(ch, id - 1) );\n-        let y = oldcomm::recv(p);\n-        oldcomm::send(parent, y + 1);\n-    }\n-}\n-\n-fn main() {\n-    let p = oldcomm::Port();\n-    let ch = oldcomm::Chan(&p);\n-    let child = task::spawn(|| sub(ch, 200) );\n-    let y = oldcomm::recv(p);\n-    debug!(\"transmission complete\");\n-    log(debug, y);\n-    assert (y == 200);\n-}"}, {"sha": "2b43fca58b72657c74b3f0025b2ddd269d7301ff", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,112 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// Regression tests for circular_buffer when using a unit\n-// that has a size that is not a power of two\n-\n-// A 12-byte unit to ::core::oldcomm::send over the channel\n-struct Record {val1: u32, val2: u32, val3: u32}\n-\n-\n-// Assuming that the default buffer size needs to hold 8 units,\n-// then the minimum buffer size needs to be 96. That's not a\n-// power of two so needs to be rounded up. Don't trigger any\n-// assertions.\n-fn test_init() {\n-    let myport = ::core::oldcomm::Port();\n-    let mychan = ::core::oldcomm::Chan(&myport);\n-    let val: Record = Record {val1: 0u32, val2: 0u32, val3: 0u32};\n-    ::core::oldcomm::send(mychan, val);\n-}\n-\n-\n-// Dump lots of items into the channel so it has to grow.\n-// Don't trigger any assertions.\n-fn test_grow() {\n-    let myport = ::core::oldcomm::Port();\n-    let mychan = ::core::oldcomm::Chan(&myport);\n-    for uint::range(0u, 100u) |i| {\n-        let val: Record = Record {val1: 0u32, val2: 0u32, val3: 0u32};\n-        ::core::oldcomm::send(mychan, val);\n-    }\n-}\n-\n-\n-// Don't allow the buffer to shrink below it's original size\n-fn test_shrink1() {\n-    let myport = ::core::oldcomm::Port();\n-    let mychan = ::core::oldcomm::Chan(&myport);\n-    ::core::oldcomm::send(mychan, 0i8);\n-    let x = ::core::oldcomm::recv(myport);\n-}\n-\n-fn test_shrink2() {\n-    let myport = ::core::oldcomm::Port();\n-    let mychan = ::core::oldcomm::Chan(&myport);\n-    for uint::range(0u, 100u) |_i| {\n-        let val: Record = Record {val1: 0u32, val2: 0u32, val3: 0u32};\n-        ::core::oldcomm::send(mychan, val);\n-    }\n-    for uint::range(0u, 100u) |_i| { let x = ::core::oldcomm::recv(myport); }\n-}\n-\n-\n-// Test rotating the buffer when the unit size is not a power of two\n-fn test_rotate() {\n-    let myport = ::core::oldcomm::Port();\n-    let mychan = ::core::oldcomm::Chan(&myport);\n-    for uint::range(0u, 100u) |i| {\n-        let val = Record {val1: i as u32, val2: i as u32, val3: i as u32};\n-        ::core::oldcomm::send(mychan, val);\n-        let x = ::core::oldcomm::recv(myport);\n-        assert (x.val1 == i as u32);\n-        assert (x.val2 == i as u32);\n-        assert (x.val3 == i as u32);\n-    }\n-}\n-\n-\n-// Test rotating and growing the buffer when\n-// the unit size is not a power of two\n-fn test_rotate_grow() {\n-    let myport = ::core::oldcomm::Port::<Record>();\n-    let mychan = ::core::oldcomm::Chan(&myport);\n-    for uint::range(0u, 10u) |j| {\n-        for uint::range(0u, 10u) |i| {\n-            let val: Record =\n-                Record {val1: i as u32, val2: i as u32, val3: i as u32};\n-            ::core::oldcomm::send(mychan, val);\n-        }\n-        for uint::range(0u, 10u) |i| {\n-            let x = ::core::oldcomm::recv(myport);\n-            assert (x.val1 == i as u32);\n-            assert (x.val2 == i as u32);\n-            assert (x.val3 == i as u32);\n-        }\n-    }\n-}\n-\n-fn main() {\n-    test_init();\n-    test_grow();\n-    test_shrink1();\n-    test_shrink2();\n-    test_rotate();\n-    test_rotate_grow();\n-}\n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:"}, {"sha": "95fbf4c9ef018d8fcfc5903aaa3eb3349d35712a", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -10,6 +10,8 @@\n \n // Tests of the runtime's scheduler interface\n \n+use core::pipes::*;\n+\n type sched_id = int;\n type task_id = *libc::c_void;\n \n@@ -26,8 +28,7 @@ extern mod rustrt {\n \n fn main() {\n     unsafe {\n-        let po = oldcomm::Port();\n-        let ch = oldcomm::Chan(&po);\n+        let (po, ch) = stream();\n         let parent_sched_id = rustrt::rust_get_sched_id();\n         error!(\"parent %?\", parent_sched_id);\n         let num_threads = 1u;\n@@ -41,12 +42,12 @@ fn main() {\n                 error!(\"child_sched_id %?\", child_sched_id);\n                 assert child_sched_id != parent_sched_id;\n                 assert child_sched_id == new_sched_id;\n-                oldcomm::send(ch, ());\n+                ch.send(());\n             }\n         };\n         let fptr = cast::reinterpret_cast(&ptr::addr_of(&f));\n         rustrt::start_task(new_task_id, fptr);\n         cast::forget(move f);\n-        oldcomm::recv(po);\n+        po.recv();\n     }\n }"}, {"sha": "28877f7eb949d9443065fbd34682ba2353d505a8", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -17,13 +17,15 @@ fn die() {\n \n fn iloop() {\n     task::spawn(|| die() );\n-    let p = oldcomm::Port::<()>();\n-    let c = oldcomm::Chan(&p);\n+    let (p, c) = core::pipes::stream::<()>();\n     loop {\n         // Sending and receiving here because these actions yield,\n-        // at which point our child can kill us\n-        oldcomm::send(c, ());\n-        oldcomm::recv(p);\n+        // at which point our child can kill us.\n+        c.send(());\n+        p.recv();\n+        // The above comment no longer makes sense but I'm\n+        // reluctant to remove a linked failure test case.\n+        task::yield();\n     }\n }\n "}, {"sha": "be0546c6883c42c6f8837a18f5fd647411bcfc34", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::pipes::*;\n+\n struct test {\n   f: int,\n }\n@@ -23,14 +25,13 @@ fn test(f: int) -> test {\n }\n \n fn main() {\n-    let p = ::core::oldcomm::Port();\n-    let c = ::core::oldcomm::Chan(&p);\n+    let (p, c) = stream();\n \n     do task::spawn() {\n-        let p = ::core::oldcomm::Port();\n-        c.send(::core::oldcomm::Chan(&p));\n+        let (pp, cc) = stream();\n+        c.send(cc);\n \n-        let _r = p.recv();\n+        let _r = pp.recv();\n     }\n \n     p.recv().send(test(42));"}, {"sha": "a4dbb673ca87c7fb99477b07acafc82950cf82ce", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::pipes::*;\n+\n // tests that ctrl's type gets inferred properly\n type command<K, V> = {key: K, val: V};\n \n-fn cache_server<K: Owned, V: Owned>(c: oldcomm::Chan<oldcomm::Chan<command<K, V>>>) {\n-    let ctrl = oldcomm::Port();\n-    oldcomm::send(c, oldcomm::Chan(&ctrl));\n+fn cache_server<K: Owned, V: Owned>(c: Chan<Chan<command<K, V>>>) {\n+    let (ctrl_port, ctrl_chan) = core::pipes::stream();\n+    c.send(ctrl_chan);\n }\n fn main() { }"}, {"sha": "0a1afc68a5b19abec69d327d8f3b4caf53f340af", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -23,7 +23,6 @@ fn foo(i:int, j: char) -> foo {\n }\n \n fn main() {\n-  let po = oldcomm::Port::<foo>();\n-  let ch = oldcomm::Chan(&po);\n-  oldcomm::send(ch, foo(42, 'c'));\n+    let (_po, ch) = pipes::stream();\n+    ch.send(foo(42, 'c'));\n }\n\\ No newline at end of file"}, {"sha": "8cc1d77a3d3c9b5939bf4635465d88b110e86787", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -11,11 +11,6 @@\n // xfail-fast\n #[legacy_modes];\n \n-extern mod std;\n-\n-use oldcomm::Chan;\n-use oldcomm::send;\n-\n fn main() { test05(); }\n \n struct Pair<A,B> { a: A, b: B }"}, {"sha": "f722a91d1969587cbab3bd16fb1dad60232a7609", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -14,17 +14,15 @@\n   Arnold.\n  */\n \n-extern mod std;\n+use core::pipes::*;\n \n+type ctx = Chan<int>;\n \n-type ctx = oldcomm::Chan<int>;\n-\n-fn iotask(cx: ctx, ip: ~str) {\n+fn iotask(cx: &ctx, ip: ~str) {\n     assert (ip == ~\"localhost\");\n }\n \n fn main() {\n-    let p = oldcomm::Port::<int>();\n-    let ch = oldcomm::Chan(&p);\n-    task::spawn(|| iotask(ch, ~\"localhost\") );\n+    let (p, ch) = stream::<int>();\n+    task::spawn(|| iotask(&ch, ~\"localhost\") );\n }"}, {"sha": "f2c0c807e82ff2a4d62ef2f129e969639f33f343", "filename": "src/test/run-pass/task-comm-chan-cleanup.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern mod std;\n-\n-fn main() {\n-    let p = oldcomm::Port();\n-    let c = oldcomm::Chan(&p);\n-    oldcomm::send(c, ~\"coffee\");\n-}\n\\ No newline at end of file"}, {"sha": "f2c0c807e82ff2a4d62ef2f129e969639f33f343", "filename": "src/test/run-pass/task-comm-chan-cleanup2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern mod std;\n-\n-fn main() {\n-    let p = oldcomm::Port();\n-    let c = oldcomm::Chan(&p);\n-    oldcomm::send(c, ~\"coffee\");\n-}\n\\ No newline at end of file"}, {"sha": "23b87fb7352026296aa8fedd77566c403f7cbf72", "filename": "src/test/run-pass/task-comm-chan-cleanup3.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern mod std;\n-\n-fn main() {\n-    let c = {\n-        let p = oldcomm::Port();\n-        oldcomm::Chan(&p)\n-    };\n-    oldcomm::send(c, ~\"coffee\");\n-}\n\\ No newline at end of file"}, {"sha": "2afdcc6326807bade7a71b71a03e3c80ce9f37bd", "filename": "src/test/run-pass/task-comm-chan-cleanup4.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern mod std;\n-\n-// We're trying to trigger a race between send and port destruction that\n-// results in the string not being freed\n-\n-fn starship(&&ch: oldcomm::Chan<~str>) {\n-    for int::range(0, 10) |_i| {\n-        oldcomm::send(ch, ~\"pew pew\");\n-    }\n-}\n-\n-fn starbase() {\n-    for int::range(0, 10) |_i| {\n-        let p = oldcomm::Port();\n-        let c = oldcomm::Chan(&p);\n-        task::spawn(|| starship(c) );\n-        task::yield();\n-    }\n-}\n-\n-fn main() {\n-    for int::range(0, 10) |_i| {\n-        task::spawn(|| starbase() );\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "ae2ee7880bda019c2c0669513f9bfea3b95f0fcb", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -16,9 +16,8 @@ extern mod std;\n // any size, but rustc currently can because they do have size. Whether\n // or not this is desirable I don't know, but here's a regression test.\n fn main() {\n-    let po = oldcomm::Port();\n-    let ch = oldcomm::Chan(&po);\n-    oldcomm::send(ch, ());\n-    let n: () = oldcomm::recv(po);\n+    let (po, ch) = pipes::stream();\n+    ch.send(());\n+    let n: () = po.recv();\n     assert (n == ());\n }"}, {"sha": "311da9762b3c796947506cf3dc06def0b0ee2d21", "filename": "src/test/run-pass/task-comm.rs", "status": "removed", "additions": 0, "deletions": 150, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,150 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    test00();\n-    // test01();\n-    test02();\n-    test04();\n-    test05();\n-    test06();\n-}\n-\n-fn test00_start(ch: ::core::oldcomm::Chan<int>, message: int, count: int) {\n-    debug!(\"Starting test00_start\");\n-    let mut i: int = 0;\n-    while i < count {\n-        debug!(\"Sending Message\");\n-        ::core::oldcomm::send(ch, message + 0);\n-        i = i + 1;\n-    }\n-    debug!(\"Ending test00_start\");\n-}\n-\n-fn test00() {\n-    let number_of_tasks: int = 1;\n-    let number_of_messages: int = 4;\n-    debug!(\"Creating tasks\");\n-\n-    let po = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&po);\n-\n-    let mut i: int = 0;\n-\n-    let mut results = ~[];\n-    while i < number_of_tasks {\n-        i = i + 1;\n-        do task::task().future_result(|+r| {\n-            results.push(move r);\n-        }).spawn |copy i| {\n-            test00_start(ch, i, number_of_messages);\n-        }\n-    }\n-    let mut sum: int = 0;\n-    for results.each |r| {\n-        i = 0;\n-        while i < number_of_messages { sum += ::core::oldcomm::recv(po); i = i + 1; }\n-    }\n-\n-    for results.each |r| { r.recv(); }\n-\n-    debug!(\"Completed: Final number is: \");\n-    assert (sum ==\n-                number_of_messages *\n-                    (number_of_tasks * number_of_tasks + number_of_tasks) /\n-                    2);\n-}\n-\n-fn test01() {\n-    let p = ::core::oldcomm::Port();\n-    debug!(\"Reading from a port that is never written to.\");\n-    let value: int = ::core::oldcomm::recv(p);\n-    log(debug, value);\n-}\n-\n-fn test02() {\n-    let p = ::core::oldcomm::Port();\n-    let c = ::core::oldcomm::Chan(&p);\n-    debug!(\"Writing to a local task channel.\");\n-    ::core::oldcomm::send(c, 42);\n-    debug!(\"Reading from a local task port.\");\n-    let value: int = ::core::oldcomm::recv(p);\n-    log(debug, value);\n-}\n-\n-fn test04_start() {\n-    debug!(\"Started task\");\n-    let mut i: int = 1024 * 1024;\n-    while i > 0 { i = i - 1; }\n-    debug!(\"Finished task\");\n-}\n-\n-fn test04() {\n-    debug!(\"Spawning lots of tasks.\");\n-    let mut i: int = 4;\n-    while i > 0 { i = i - 1; task::spawn(|| test04_start() ); }\n-    debug!(\"Finishing up.\");\n-}\n-\n-fn test05_start(ch: ::core::oldcomm::Chan<int>) {\n-    ::core::oldcomm::send(ch, 10);\n-    ::core::oldcomm::send(ch, 20);\n-    ::core::oldcomm::send(ch, 30);\n-    ::core::oldcomm::send(ch, 30);\n-    ::core::oldcomm::send(ch, 30);\n-}\n-\n-fn test05() {\n-    let po = ::core::oldcomm::Port();\n-    let ch = ::core::oldcomm::Chan(&po);\n-    task::spawn(|| test05_start(ch) );\n-    let mut value: int;\n-    value = ::core::oldcomm::recv(po);\n-    value = ::core::oldcomm::recv(po);\n-    value = ::core::oldcomm::recv(po);\n-    log(debug, value);\n-}\n-\n-fn test06_start(&&task_number: int) {\n-    debug!(\"Started task.\");\n-    let mut i: int = 0;\n-    while i < 1000000 { i = i + 1; }\n-    debug!(\"Finished task.\");\n-}\n-\n-fn test06() {\n-    let number_of_tasks: int = 4;\n-    debug!(\"Creating tasks\");\n-\n-    let mut i: int = 0;\n-\n-    let mut results = ~[];\n-    while i < number_of_tasks {\n-        i = i + 1;\n-        do task::task().future_result(|+r| {\n-            results.push(move r);\n-        }).spawn |copy i| {\n-            test06_start(i);\n-        };\n-    }\n-\n-\n-    for results.each |r| { r.recv(); }\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "fd45910ee88faca6e2d3fa5899195f71d2c1deb4", "filename": "src/test/run-pass/task-compare.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=28ed9dc09e91c9e57095e75d22d59eab0fdd6d1a", "patch": "@@ -1,94 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-/**\n-   A test case for issue #577, which also exposes #588\n-*/\n-\n-extern mod std;\n-\n-fn child() { }\n-\n-struct notify {\n-    ch: oldcomm::Chan<bool>, v: @mut bool,\n-}\n-\n-impl notify : Drop {\n-    fn finalize(&self) {\n-        error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n-               task::get_task(),\n-               ptr::addr_of(&(*(self.v))) as uint,\n-               task::failing(),\n-               *(self.v));\n-        let b = *(self.v);\n-        oldcomm::send(self.ch, b);\n-    }\n-}\n-\n-fn notify(ch: oldcomm::Chan<bool>, v: @mut bool) -> notify {\n-    notify {\n-        ch: ch,\n-        v: v\n-    }\n-}\n-\n-fn joinable(+f: fn~()) -> oldcomm::Port<bool> {\n-    fn wrapper(+c: oldcomm::Chan<bool>, +f: fn()) {\n-        let b = @mut false;\n-        error!(\"wrapper: task=%? allocated v=%x\",\n-               task::get_task(),\n-               ptr::addr_of(&(*b)) as uint);\n-        let _r = notify(c, b);\n-        f();\n-        *b = true;\n-    }\n-    let p = oldcomm::Port();\n-    let c = oldcomm::Chan(&p);\n-    do task::spawn_unlinked { wrapper(c, copy f) };\n-    p\n-}\n-\n-fn join(port: oldcomm::Port<bool>) -> bool {\n-    oldcomm::recv(port)\n-}\n-\n-fn main() {\n-    // tasks\n-    let t1;\n-    let t2;\n-\n-    let c1 = child, c2 = child;\n-    t1 = joinable(c1);\n-    t2 = joinable(c2);\n-\n-    assert (t1 == t1);\n-    assert (t1 != t2);\n-\n-    // ports\n-    let p1;\n-    let p2;\n-\n-    p1 = oldcomm::Port::<int>();\n-    p2 = oldcomm::Port::<int>();\n-\n-    assert (p1 == p1);\n-    assert (p1 != p2);\n-\n-    // channels\n-    let c1 = oldcomm::Chan(p1);\n-    let c2 = oldcomm::Chan(p2);\n-\n-    assert (c1 == c1);\n-    assert (c1 != c2);\n-\n-    join(t1);\n-    join(t2);\n-}"}, {"sha": "ca4e8916cc0c8b63b60dea6c8cdc9ba481d18adb", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -13,8 +13,10 @@\n // A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n+use core::pipes::*;\n+\n struct notify {\n-    ch: oldcomm::Chan<bool>, v: @mut bool,\n+    ch: Chan<bool>, v: @mut bool,\n }\n \n impl notify : Drop {\n@@ -25,19 +27,19 @@ impl notify : Drop {\n                task::failing(),\n                *(self.v));\n         let b = *(self.v);\n-        oldcomm::send(self.ch, b);\n+        self.ch.send(b);\n     }\n }\n \n-fn notify(ch: oldcomm::Chan<bool>, v: @mut bool) -> notify {\n+fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n     notify {\n         ch: ch,\n         v: v\n     }\n }\n \n-fn joinable(+f: fn~()) -> oldcomm::Port<bool> {\n-    fn wrapper(+c: oldcomm::Chan<bool>, +f: fn()) {\n+fn joinable(f: fn~()) -> Port<bool> {\n+    fn wrapper(c: Chan<bool>, f: fn()) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\",\n                task::get_task(),\n@@ -46,14 +48,19 @@ fn joinable(+f: fn~()) -> oldcomm::Port<bool> {\n         f();\n         *b = true;\n     }\n-    let p = oldcomm::Port();\n-    let c = oldcomm::Chan(&p);\n-    do task::spawn_unlinked { wrapper(c, f) };\n+    let (p, c) = stream();\n+    let c = ~mut Some(c);\n+    do task::spawn_unlinked {\n+        let mut cc = None;\n+        *c <-> cc;\n+        let ccc = option::unwrap(cc);\n+        wrapper(ccc, f)\n+    }\n     p\n }\n \n-fn join(port: oldcomm::Port<bool>) -> bool {\n-    oldcomm::recv(port)\n+fn join(port: Port<bool>) -> bool {\n+    port.recv()\n }\n \n fn supervised() {"}, {"sha": "ef54d3c8ddb3d69bbc2208672c584862de486346", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,29 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::pipes::*;\n+\n fn main() {\n-    let p = oldcomm::Port::<uint>();\n-    let ch = oldcomm::Chan(&p);\n+    let (p, ch) = stream::<uint>();\n \n     let x = ~1;\n     let x_in_parent = ptr::addr_of(&(*x)) as uint;\n \n     let y = ~2;\n     let y_in_parent = ptr::addr_of(&(*y)) as uint;\n \n-    task::spawn(fn~(copy ch, copy y, move x) {\n+    task::spawn(fn~(copy y, move x) {\n         let x_in_child = ptr::addr_of(&(*x)) as uint;\n-        oldcomm::send(ch, x_in_child);\n+        ch.send(x_in_child);\n \n         let y_in_child = ptr::addr_of(&(*y)) as uint;\n-        oldcomm::send(ch, y_in_child);\n+        ch.send(y_in_child);\n     });\n     // Ensure last-use analysis doesn't move y to child.\n     let _q = y;\n \n-    let x_in_child = oldcomm::recv(p);\n+    let x_in_child = p.recv();\n     assert x_in_parent == x_in_child;\n \n-    let y_in_child = oldcomm::recv(p);\n+    let y_in_child = p.recv();\n     assert y_in_parent != y_in_child;\n }"}, {"sha": "fbf4e0bd757b21256ade919eba3bae861b98c97b", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,25 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+use core::pipes::*;\n \n-fn child(c: oldcomm::Chan<~uint>, i: uint) {\n-    oldcomm::send(c, ~i);\n+fn child(c: &SharedChan<~uint>, i: uint) {\n+    c.send(~i);\n }\n \n fn main() {\n-    let p = oldcomm::Port();\n-    let ch = oldcomm::Chan(&p);\n+    let (p, ch) = stream();\n+    let ch = SharedChan(ch);\n     let n = 100u;\n     let mut expected = 0u;\n     for uint::range(0u, n) |i| {\n-        task::spawn(|| child(ch, i) );\n+        let ch = ch.clone();\n+        task::spawn(|| child(&ch, i) );\n         expected += i;\n     }\n \n     let mut actual = 0u;\n     for uint::range(0u, n) |_i| {\n-        let j = oldcomm::recv(p);\n+        let j = p.recv();\n         actual += *j;\n     }\n "}, {"sha": "17827bb39caa1b68de3b44a8bfe567216409b12b", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+use core::pipes::*;\n \n fn main() {\n-    let p = oldcomm::Port();\n-    let c = oldcomm::Chan(&p);\n-    oldcomm::send(c, ~100);\n-    let v = oldcomm::recv(p);\n+    let (p, c) = stream();\n+    c.send(~100);\n+    let v = p.recv();\n     assert v == ~100;\n }\n\\ No newline at end of file"}, {"sha": "c591c3d10865039c0bb7316b276da506a01bdb32", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e907b648b0abb8dc2b8fa1902294774d4ad862/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=02e907b648b0abb8dc2b8fa1902294774d4ad862", "patch": "@@ -11,34 +11,36 @@\n // xfail-win32\n extern mod std;\n \n+use core::pipes::*;\n+\n struct complainer {\n-  c: oldcomm::Chan<bool>,\n+  c: SharedChan<bool>,\n }\n \n impl complainer : Drop {\n     fn finalize(&self) {\n         error!(\"About to send!\");\n-        oldcomm::send(self.c, true);\n+        self.c.send(true);\n         error!(\"Sent!\");\n     }\n }\n \n-fn complainer(c: oldcomm::Chan<bool>) -> complainer {\n+fn complainer(c: SharedChan<bool>) -> complainer {\n     error!(\"Hello!\");\n     complainer {\n         c: c\n     }\n }\n \n-fn f(c: oldcomm::Chan<bool>) {\n+fn f(c: SharedChan<bool>) {\n     let _c = move complainer(c);\n     fail;\n }\n \n fn main() {\n-    let p = oldcomm::Port();\n-    let c = oldcomm::Chan(&p);\n-    task::spawn_unlinked(|| f(c) );\n+    let (p, c) = stream();\n+    let c = SharedChan(c);\n+    task::spawn_unlinked(|| f(c.clone()) );\n     error!(\"hiiiiiiiii\");\n-    assert oldcomm::recv(p);\n+    assert p.recv();\n }"}]}