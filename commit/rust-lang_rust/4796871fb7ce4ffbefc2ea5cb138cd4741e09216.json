{"sha": "4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTY4NzFmYjdjZTRmZmJlZmMyZWE1Y2IxMzhjZDQ3NDFlMDkyMTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-13T14:45:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-17T17:37:22Z"}, "message": "Revert \"musl: don't use the included startfiles with -crt-static\"\n\nThis reverts commit a5a875d17b34b61326d803eb2edea526d3bd6914.", "tree": {"sha": "48e36e4e2926fb4c711a462a69c45e3a4a92ac33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e36e4e2926fb4c711a462a69c45e3a4a92ac33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "html_url": "https://github.com/rust-lang/rust/commit/4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac82b4946ac1df0166ea66a7befe5d1450b07c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac82b4946ac1df0166ea66a7befe5d1450b07c9", "html_url": "https://github.com/rust-lang/rust/commit/4ac82b4946ac1df0166ea66a7befe5d1450b07c9"}], "stats": {"total": 46, "additions": 9, "deletions": 37}, "files": [{"sha": "735c4d2f76fc1273250f2f32ac16d4ca1ad0b02f", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "patch": "@@ -625,11 +625,6 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n-    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n-        if sess.crt_static() {\n-            cmd.args(args);\n-        }\n-    }\n     if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n         cmd.args(args);\n     }\n@@ -644,12 +639,6 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n-    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n-        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n-            cmd.arg(root.join(obj));\n-        }\n-    }\n-\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -671,11 +660,6 @@ fn link_natively(sess: &Session,\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n-    if sess.crt_static() {\n-        for obj in &sess.target.target.options.post_link_objects_crt {\n-            cmd.arg(root.join(obj));\n-        }\n-    }\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}, {"sha": "293f23eab388317c4b5a5d0bdbd8f50ca3d2426a", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "patch": "@@ -15,8 +15,7 @@ pub fn opts() -> TargetOptions {\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args_crt.insert(LinkerFlavor::Gcc, Vec::new());\n-    base.pre_link_args_crt.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -56,9 +55,9 @@ pub fn opts() -> TargetOptions {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n-    base.post_link_objects_crt.push(\"crtn.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n+    base.post_link_objects.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "0f870b5b9570cd4788d2798c394f52b27db9f604", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4796871fb7ce4ffbefc2ea5cb138cd4741e09216/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=4796871fb7ce4ffbefc2ea5cb138cd4741e09216", "patch": "@@ -422,22 +422,20 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// Linker arguments that are passed *before* any user-defined libraries.\n-    pub pre_link_args: LinkArgs, // ... unconditionally\n-    pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n+    /// Linker arguments that are unconditionally passed *before* any\n+    /// user-defined libraries.\n+    pub pre_link_args: LinkArgs,\n     /// Objects to link before all others, always found within the\n     /// sysroot folder.\n-    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n-    pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n     /// Objects to link after all others, always found within the\n     /// sysroot folder.\n-    pub post_link_objects: Vec<String>, // ... unconditionally\n-    pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n+    pub post_link_objects: Vec<String>,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -637,7 +635,6 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n-            pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n@@ -671,10 +668,8 @@ impl Default for TargetOptions {\n             position_independent_executables: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n-            pre_link_objects_exe_crt: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n-            post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -893,13 +888,10 @@ impl Target {\n         key!(is_builtin, bool);\n         key!(linker, optional);\n         key!(pre_link_args, link_args);\n-        key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n-        key!(pre_link_objects_exe_crt, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n-        key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1101,13 +1093,10 @@ impl ToJson for Target {\n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(link_args - pre_link_args);\n-        target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n-        target_option_val!(pre_link_objects_exe_crt);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n-        target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}]}