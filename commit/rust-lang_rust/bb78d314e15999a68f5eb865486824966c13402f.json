{"sha": "bb78d314e15999a68f5eb865486824966c13402f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNzhkMzE0ZTE1OTk5YTY4ZjVlYjg2NTQ4NjgyNDk2NmMxMzQwMmY=", "commit": {"author": {"name": "Hasan Ali", "email": "git@hasali.co.uk", "date": "2020-05-16T19:40:58Z"}, "committer": {"name": "Hasan Ali", "email": "git@hasali.co.uk", "date": "2020-05-16T19:40:58Z"}, "message": "Add doc comment for resolve_hir_path_qualifier", "tree": {"sha": "09bb5b0c82f08a74d3e0dbd447aef9008bf77bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09bb5b0c82f08a74d3e0dbd447aef9008bf77bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb78d314e15999a68f5eb865486824966c13402f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb78d314e15999a68f5eb865486824966c13402f", "html_url": "https://github.com/rust-lang/rust/commit/bb78d314e15999a68f5eb865486824966c13402f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb78d314e15999a68f5eb865486824966c13402f/comments", "author": {"login": "hasali19", "id": 10169241, "node_id": "MDQ6VXNlcjEwMTY5MjQx", "avatar_url": "https://avatars.githubusercontent.com/u/10169241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hasali19", "html_url": "https://github.com/hasali19", "followers_url": "https://api.github.com/users/hasali19/followers", "following_url": "https://api.github.com/users/hasali19/following{/other_user}", "gists_url": "https://api.github.com/users/hasali19/gists{/gist_id}", "starred_url": "https://api.github.com/users/hasali19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hasali19/subscriptions", "organizations_url": "https://api.github.com/users/hasali19/orgs", "repos_url": "https://api.github.com/users/hasali19/repos", "events_url": "https://api.github.com/users/hasali19/events{/privacy}", "received_events_url": "https://api.github.com/users/hasali19/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hasali19", "id": 10169241, "node_id": "MDQ6VXNlcjEwMTY5MjQx", "avatar_url": "https://avatars.githubusercontent.com/u/10169241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hasali19", "html_url": "https://github.com/hasali19", "followers_url": "https://api.github.com/users/hasali19/followers", "following_url": "https://api.github.com/users/hasali19/following{/other_user}", "gists_url": "https://api.github.com/users/hasali19/gists{/gist_id}", "starred_url": "https://api.github.com/users/hasali19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hasali19/subscriptions", "organizations_url": "https://api.github.com/users/hasali19/orgs", "repos_url": "https://api.github.com/users/hasali19/repos", "events_url": "https://api.github.com/users/hasali19/events{/privacy}", "received_events_url": "https://api.github.com/users/hasali19/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001a86dc03104b75df732d69257d22526cf422b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/001a86dc03104b75df732d69257d22526cf422b7", "html_url": "https://github.com/rust-lang/rust/commit/001a86dc03104b75df732d69257d22526cf422b7"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "7c1f79f279b655a83c39524f22bf14c58375b3bb", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb78d314e15999a68f5eb865486824966c13402f/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb78d314e15999a68f5eb865486824966c13402f/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=bb78d314e15999a68f5eb865486824966c13402f", "patch": "@@ -452,6 +452,19 @@ impl<'a, DB: HirDatabase> SemanticsScope<'a, DB> {\n         resolve_hir_path(self.db, &self.resolver, path)\n     }\n \n+    /// Resolves a path where we know it is a qualifier of another path.\n+    ///\n+    /// For example, if we have:\n+    /// ```\n+    /// mod my {\n+    ///     pub mod foo {\n+    ///         struct Bar;\n+    ///     }\n+    ///\n+    ///     pub fn foo() {}\n+    /// }\n+    /// ```\n+    /// then we know that `foo` in `my::foo::Bar` refers to the module, not the function.\n     pub fn resolve_hir_path_qualifier(&self, path: &Path) -> Option<PathResolution> {\n         resolve_hir_path_qualifier(self.db, &self.resolver, path)\n     }"}]}