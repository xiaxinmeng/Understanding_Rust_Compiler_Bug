{"sha": "13c8e763d4d69732419fa1d23bdbf310be4b597f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYzhlNzYzZDRkNjk3MzI0MTlmYTFkMjNiZGJmMzEwYmU0YjU5N2Y=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-29T03:21:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-29T03:21:51Z"}, "message": "Rollup merge of #36787 - jseyfried:fix_test_harness_reexport_errors, r=nrc\n\nAvoid re-export errors in the generated test harness\n\nFixes #36768.\nr? @nrc", "tree": {"sha": "30d9a57e59399c6dfb0456d08decbd70adb2e1b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d9a57e59399c6dfb0456d08decbd70adb2e1b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13c8e763d4d69732419fa1d23bdbf310be4b597f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13c8e763d4d69732419fa1d23bdbf310be4b597f", "html_url": "https://github.com/rust-lang/rust/commit/13c8e763d4d69732419fa1d23bdbf310be4b597f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13c8e763d4d69732419fa1d23bdbf310be4b597f/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "html_url": "https://github.com/rust-lang/rust/commit/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b"}, {"sha": "28393be8df89dec9f78ec8bcbd73e399c6021098", "url": "https://api.github.com/repos/rust-lang/rust/commits/28393be8df89dec9f78ec8bcbd73e399c6021098", "html_url": "https://github.com/rust-lang/rust/commit/28393be8df89dec9f78ec8bcbd73e399c6021098"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "1fc9c45de930647b9021aa88e75f6e6749819451", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13c8e763d4d69732419fa1d23bdbf310be4b597f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c8e763d4d69732419fa1d23bdbf310be4b597f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=13c8e763d4d69732419fa1d23bdbf310be4b597f", "patch": "@@ -683,9 +683,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         match (value_result, type_result) {\n-            // With `#![feature(item_like_imports)]`, all namespaces\n-            // must be re-exported with extra visibility for an error to occur.\n-            (Ok(value_binding), Ok(type_binding)) if self.new_import_semantics => {\n+            // All namespaces must be re-exported with extra visibility for an error to occur.\n+            (Ok(value_binding), Ok(type_binding)) => {\n                 let vis = directive.vis.get();\n                 if !value_binding.pseudo_vis().is_at_least(vis, self) &&\n                    !type_binding.pseudo_vis().is_at_least(vis, self) {"}, {"sha": "6ccf9848c6df901e9844351bb4d06bb110b2cc92", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13c8e763d4d69732419fa1d23bdbf310be4b597f/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c8e763d4d69732419fa1d23bdbf310be4b597f/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=13c8e763d4d69732419fa1d23bdbf310be4b597f", "patch": "@@ -19,7 +19,7 @@ use std::iter;\n use std::slice;\n use std::mem;\n use std::vec;\n-use attr;\n+use attr::{self, HasAttrs};\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n use std::rc::Rc;\n \n@@ -226,12 +226,20 @@ fn mk_reexport_mod(cx: &mut TestCtxt, parent: ast::NodeId, tests: Vec<ast::Ident\n                    tested_submods: Vec<(ast::Ident, ast::Ident)>) -> (P<ast::Item>, ast::Ident) {\n     let super_ = token::str_to_ident(\"super\");\n \n+    // Generate imports with `#[allow(private_in_public)]` to work around issue #36768.\n+    let allow_private_in_public = cx.ext_cx.attribute(DUMMY_SP, cx.ext_cx.meta_list(\n+        DUMMY_SP,\n+        InternedString::new(\"allow\"),\n+        vec![cx.ext_cx.meta_list_item_word(DUMMY_SP, InternedString::new(\"private_in_public\"))],\n+    ));\n     let items = tests.into_iter().map(|r| {\n         cx.ext_cx.item_use_simple(DUMMY_SP, ast::Visibility::Public,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n+            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n         cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Visibility::Public, r, path)\n+            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     })).collect();\n \n     let reexport_mod = ast::Mod {"}, {"sha": "bb4d12919a1c2ae1542c554d29101c86f468276e", "filename": "src/test/run-pass/issue-36768.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13c8e763d4d69732419fa1d23bdbf310be4b597f/src%2Ftest%2Frun-pass%2Fissue-36768.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c8e763d4d69732419fa1d23bdbf310be4b597f/src%2Ftest%2Frun-pass%2Fissue-36768.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36768.rs?ref=13c8e763d4d69732419fa1d23bdbf310be4b597f", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+#![deny(private_in_public)]\n+\n+#[test] fn foo() {}\n+mod foo {}\n+\n+#[test] fn core() {}\n+extern crate core;"}]}