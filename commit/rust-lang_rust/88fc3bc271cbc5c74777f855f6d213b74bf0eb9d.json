{"sha": "88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmMzYmMyNzFjYmM1Yzc0Nzc3Zjg1NWY2ZDIxM2I3NGJmMGViOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-08T11:34:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-08T11:34:23Z"}, "message": "Auto merge of #46556 - michaelwoerister:enable-query-caching, r=nmatsakis\n\nincr.comp.: Enable query result caching for many more queries\n\nNewly cached queries are:\n* const_is_rvalue_promotable_to_static\n* trans_fulfill_obligation\n* optimized_mir\n* unsafety_check_result\n* borrowck\n* mir_borrowck\n* mir_const_qualif\n* contains_extern_indicator\n* def_symbol_name\n* symbol_name\n\nThis also includes the stricter `Span` hashing first mentioned in #46490, which will lead to more false positives in release builds but overall is more correct -- and necessary for caching MIR. Hopefully we will soon be able to reduce the rate of false positives again by factoring `Span` out of MIR.\n\nr? @nikomatsakis", "tree": {"sha": "1b1d14880a21fd82095c09250372f6ee59e711aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b1d14880a21fd82095c09250372f6ee59e711aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "html_url": "https://github.com/rust-lang/rust/commit/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a05eed54dc737249a07bc50282d9db831d03b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a05eed54dc737249a07bc50282d9db831d03b9", "html_url": "https://github.com/rust-lang/rust/commit/58a05eed54dc737249a07bc50282d9db831d03b9"}, {"sha": "539e1717728f7a5ed0b5ed9bad4ab7260117e600", "url": "https://api.github.com/repos/rust-lang/rust/commits/539e1717728f7a5ed0b5ed9bad4ab7260117e600", "html_url": "https://github.com/rust-lang/rust/commit/539e1717728f7a5ed0b5ed9bad4ab7260117e600"}], "stats": {"total": 1255, "additions": 260, "deletions": 995}, "files": [{"sha": "0ef42177c14a80038ea9fd764519cce4d792fee6", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 62, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -14,7 +14,6 @@ use hir::map::DefPathHash;\n use hir::map::definitions::Definitions;\n use ich::{self, CachingCodemapView};\n use middle::cstore::CrateStore;\n-use session::config::DebugInfoLevel::NoDebugInfo;\n use ty::{TyCtxt, fast_reject};\n use session::Session;\n \n@@ -24,7 +23,7 @@ use std::cell::RefCell;\n use std::collections::HashMap;\n \n use syntax::ast;\n-use syntax::attr;\n+\n use syntax::codemap::CodeMap;\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::symbol::Symbol;\n@@ -51,7 +50,6 @@ pub struct StableHashingContext<'gcx> {\n     body_resolver: BodyResolver<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n-    overflow_checks_enabled: bool,\n     node_id_hashing_mode: NodeIdHashingMode,\n \n     // Very often, we are hashing something that does not need the\n@@ -89,8 +87,7 @@ impl<'gcx> StableHashingContext<'gcx> {\n                definitions: &'gcx Definitions,\n                cstore: &'gcx CrateStore)\n                -> Self {\n-        let hash_spans_initial = sess.opts.debuginfo != NoDebugInfo;\n-        let check_overflow_initial = sess.overflow_checks();\n+        let hash_spans_initial = !sess.opts.debugging_opts.incremental_ignore_spans;\n \n         debug_assert!(ich::IGNORED_ATTRIBUTES.len() > 0);\n         IGNORED_ATTR_NAMES.with(|names| {\n@@ -110,7 +107,6 @@ impl<'gcx> StableHashingContext<'gcx> {\n             raw_codemap: sess.codemap(),\n             hash_spans: hash_spans_initial,\n             hash_bodies: true,\n-            overflow_checks_enabled: check_overflow_initial,\n             node_id_hashing_mode: NodeIdHashingMode::HashDefPath,\n         }\n     }\n@@ -120,11 +116,6 @@ impl<'gcx> StableHashingContext<'gcx> {\n         self.sess\n     }\n \n-    pub fn force_span_hashing(mut self) -> Self {\n-        self.hash_spans = true;\n-        self\n-    }\n-\n     #[inline]\n     pub fn while_hashing_hir_bodies<F: FnOnce(&mut Self)>(&mut self,\n                                                           hash_bodies: bool,\n@@ -174,11 +165,6 @@ impl<'gcx> StableHashingContext<'gcx> {\n         self.definitions.node_to_hir_id(node_id)\n     }\n \n-    #[inline]\n-    pub fn hash_spans(&self) -> bool {\n-        self.hash_spans\n-    }\n-\n     #[inline]\n     pub fn hash_bodies(&self) -> bool {\n         self.hash_bodies\n@@ -204,58 +190,13 @@ impl<'gcx> StableHashingContext<'gcx> {\n         })\n     }\n \n-    pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self,\n-                                                    item_attrs: &[ast::Attribute],\n-                                                    is_const: bool,\n-                                                    f: F) {\n-        let prev_overflow_checks = self.overflow_checks_enabled;\n-        if is_const || attr::contains_name(item_attrs, \"rustc_inherit_overflow_checks\") {\n-            self.overflow_checks_enabled = true;\n-        }\n+    pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n         let prev_hash_node_ids = self.node_id_hashing_mode;\n         self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n \n         f(self);\n \n         self.node_id_hashing_mode = prev_hash_node_ids;\n-        self.overflow_checks_enabled = prev_overflow_checks;\n-    }\n-\n-    #[inline]\n-    pub fn binop_can_panic_at_runtime(&self, binop: hir::BinOp_) -> bool\n-    {\n-        match binop {\n-            hir::BiAdd |\n-            hir::BiSub |\n-            hir::BiShl |\n-            hir::BiShr |\n-            hir::BiMul => self.overflow_checks_enabled,\n-\n-            hir::BiDiv |\n-            hir::BiRem => true,\n-\n-            hir::BiAnd |\n-            hir::BiOr |\n-            hir::BiBitXor |\n-            hir::BiBitAnd |\n-            hir::BiBitOr |\n-            hir::BiEq |\n-            hir::BiLt |\n-            hir::BiLe |\n-            hir::BiNe |\n-            hir::BiGe |\n-            hir::BiGt => false\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn unop_can_panic_at_runtime(&self, unop: hir::UnOp) -> bool\n-    {\n-        match unop {\n-            hir::UnDeref |\n-            hir::UnNot => false,\n-            hir::UnNeg => self.overflow_checks_enabled,\n-        }\n     }\n }\n "}, {"sha": "1533e37d7f759d8f4631b398579dbcaf2dd43473", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 100, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -529,63 +529,9 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Expr {\n                 ref attrs\n             } = *self;\n \n-            let spans_always_on = match *node {\n-                hir::ExprBox(..)        |\n-                hir::ExprArray(..)      |\n-                hir::ExprCall(..)       |\n-                hir::ExprLit(..)        |\n-                hir::ExprCast(..)       |\n-                hir::ExprType(..)       |\n-                hir::ExprIf(..)         |\n-                hir::ExprWhile(..)      |\n-                hir::ExprLoop(..)       |\n-                hir::ExprMatch(..)      |\n-                hir::ExprClosure(..)    |\n-                hir::ExprBlock(..)      |\n-                hir::ExprAssign(..)     |\n-                hir::ExprTupField(..)   |\n-                hir::ExprAddrOf(..)     |\n-                hir::ExprBreak(..)      |\n-                hir::ExprAgain(..)      |\n-                hir::ExprRet(..)        |\n-                hir::ExprYield(..)      |\n-                hir::ExprInlineAsm(..)  |\n-                hir::ExprRepeat(..)     |\n-                hir::ExprTup(..)        |\n-                hir::ExprMethodCall(..) |\n-                hir::ExprPath(..)       |\n-                hir::ExprStruct(..)     |\n-                hir::ExprField(..)      => {\n-                    // For these we only hash the span when debuginfo is on.\n-                    false\n-                }\n-                // For the following, spans might be significant because of\n-                // panic messages indicating the source location.\n-                hir::ExprBinary(op, ..) => {\n-                    hcx.binop_can_panic_at_runtime(op.node)\n-                }\n-                hir::ExprUnary(op, _) => {\n-                    hcx.unop_can_panic_at_runtime(op)\n-                }\n-                hir::ExprAssignOp(op, ..) => {\n-                    hcx.binop_can_panic_at_runtime(op.node)\n-                }\n-                hir::ExprIndex(..) => {\n-                    true\n-                }\n-            };\n-\n-            if spans_always_on {\n-                hcx.while_hashing_spans(true, |hcx| {\n-                    span.hash_stable(hcx, hasher);\n-                    node.hash_stable(hcx, hasher);\n-                    attrs.hash_stable(hcx, hasher);\n-                });\n-            } else {\n-                span.hash_stable(hcx, hasher);\n-                node.hash_stable(hcx, hasher);\n-                attrs.hash_stable(hcx, hasher);\n-            }\n+            span.hash_stable(hcx, hasher);\n+            node.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n         })\n     }\n }\n@@ -712,15 +658,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::TraitItem {\n             span\n         } = *self;\n \n-        let is_const = match *node {\n-            hir::TraitItemKind::Const(..) |\n-            hir::TraitItemKind::Type(..) => true,\n-            hir::TraitItemKind::Method(hir::MethodSig { constness, .. }, _) => {\n-                constness == hir::Constness::Const\n-            }\n-        };\n-\n-        hcx.hash_hir_item_like(attrs, is_const, |hcx| {\n+        hcx.hash_hir_item_like(|hcx| {\n             name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n@@ -757,15 +695,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItem {\n             span\n         } = *self;\n \n-        let is_const = match *node {\n-            hir::ImplItemKind::Const(..) |\n-            hir::ImplItemKind::Type(..) => true,\n-            hir::ImplItemKind::Method(hir::MethodSig { constness, .. }, _) => {\n-                constness == hir::Constness::Const\n-            }\n-        };\n-\n-        hcx.hash_hir_item_like(attrs, is_const, |hcx| {\n+        hcx.hash_hir_item_like(|hcx| {\n             name.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);\n             defaultness.hash_stable(hcx, hasher);\n@@ -884,30 +814,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Item {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        let is_const = match self.node {\n-            hir::ItemStatic(..)      |\n-            hir::ItemConst(..)       => {\n-                true\n-            }\n-            hir::ItemFn(_, _, constness, ..) => {\n-                constness == hir::Constness::Const\n-            }\n-            hir::ItemUse(..)         |\n-            hir::ItemExternCrate(..) |\n-            hir::ItemForeignMod(..)  |\n-            hir::ItemGlobalAsm(..)   |\n-            hir::ItemMod(..)         |\n-            hir::ItemAutoImpl(..) |\n-            hir::ItemTrait(..)       |\n-            hir::ItemImpl(..)        |\n-            hir::ItemTy(..)          |\n-            hir::ItemEnum(..)        |\n-            hir::ItemStruct(..)      |\n-            hir::ItemUnion(..)       => {\n-                false\n-            }\n-        };\n-\n         let hir::Item {\n             name,\n             ref attrs,\n@@ -918,7 +824,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Item {\n             span\n         } = *self;\n \n-        hcx.hash_hir_item_like(attrs, is_const, |hcx| {\n+        hcx.hash_hir_item_like(|hcx| {\n             name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);"}, {"sha": "32577ac46f3b13f071e86390dfdd38ccd45a4b31", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -55,48 +55,11 @@ for mir::UnsafetyViolationKind {\n         }\n     }\n }\n-impl<'gcx> HashStable<StableHashingContext<'gcx>>\n-for mir::Terminator<'gcx> {\n-    #[inline]\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'gcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let mir::Terminator {\n-            ref kind,\n-            ref source_info,\n-        } = *self;\n \n-        let hash_spans_unconditionally = match *kind {\n-            mir::TerminatorKind::Assert { .. } => {\n-                // Assert terminators generate a panic message that contains the\n-                // source location, so we always have to feed its span into the\n-                // ICH.\n-                true\n-            }\n-            mir::TerminatorKind::Goto { .. } |\n-            mir::TerminatorKind::SwitchInt { .. } |\n-            mir::TerminatorKind::Resume |\n-            mir::TerminatorKind::Return |\n-            mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Unreachable |\n-            mir::TerminatorKind::Drop { .. } |\n-            mir::TerminatorKind::DropAndReplace { .. } |\n-            mir::TerminatorKind::Yield { .. } |\n-            mir::TerminatorKind::Call { .. } |\n-            mir::TerminatorKind::FalseEdges { .. } => false,\n-        };\n-\n-        if hash_spans_unconditionally {\n-            hcx.while_hashing_spans(true, |hcx| {\n-                source_info.hash_stable(hcx, hasher);\n-            })\n-        } else {\n-            source_info.hash_stable(hcx, hasher);\n-        }\n-\n-        kind.hash_stable(hcx, hasher);\n-    }\n-}\n+impl_stable_hash_for!(struct mir::Terminator<'tcx> {\n+    kind,\n+    source_info\n+});\n \n impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearCrossCrate<T>\n     where T: HashStable<StableHashingContext<'gcx>>"}, {"sha": "64e601ab1e73402a37b18815eef250091d52a8fb", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -1830,7 +1830,7 @@ pub struct GeneratorLayout<'tcx> {\n /// instance of the closure is created, the corresponding free regions\n /// can be extracted from its type and constrained to have the given\n /// outlives relationship.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ClosureRegionRequirements {\n     /// The number of external regions defined on the closure.  In our\n     /// example above, it would be 3 -- one for `'static`, then `'1`\n@@ -1846,7 +1846,7 @@ pub struct ClosureRegionRequirements {\n \n /// Indicates an outlives constraint between two free-regions declared\n /// on the closure.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ClosureOutlivesRequirement {\n     // This region ...\n     pub free_region: ty::RegionVid,"}, {"sha": "0dcd3e80810801f1228c9c39f56cdbcd2a7e9e32", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -1084,6 +1084,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"dump hash information in textual format to stdout\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances\"),\n+    incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n+        \"ignore spans during ICH computation -- used for testing\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n           \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "2d0a3799178a5c90f1fde58cb17f49364f2fe334", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -27,14 +27,15 @@ pub trait QueryConfig {\n pub(super) trait QueryDescription<'tcx>: QueryConfig {\n     fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n \n+    #[inline]\n     fn cache_on_disk(_: Self::Key) -> bool {\n         false\n     }\n \n     fn try_load_from_disk(_: TyCtxt<'_, 'tcx, 'tcx>,\n                           _: SerializedDepNodeIndex)\n                           -> Option<Self::Value> {\n-        bug!(\"QueryDescription::load_from_disk() called for unsupport query.\")\n+        bug!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n     }\n }\n \n@@ -166,6 +167,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     fn describe(_tcx: TyCtxt, instance: ty::Instance<'tcx>) -> String {\n         format!(\"computing the symbol for `{}`\", instance)\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::describe_def<'tcx> {\n@@ -234,6 +247,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n         format!(\"const checking if rvalue is promotable to static `{}`\",\n             tcx.item_path_str(def_id))\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          id: SerializedDepNodeIndex)\n+                          -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::rvalue_promotable_map<'tcx> {\n@@ -254,6 +279,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::trans_fulfill_obligation<'tcx> {\n     fn describe(tcx: TyCtxt, key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> String {\n         format!(\"checking if `{}` fulfills its obligations\", tcx.item_path_str(key.1.def_id()))\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_impls_of<'tcx> {\n@@ -567,3 +604,42 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n+    #[inline]\n+    fn cache_on_disk(def_id: Self::Key) -> bool {\n+        def_id.is_local()\n+    }\n+\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          id: SerializedDepNodeIndex)\n+                          -> Option<Self::Value> {\n+        let mir: Option<::mir::Mir<'tcx>> = tcx.on_disk_query_result_cache\n+                                               .try_load_query_result(tcx, id);\n+        mir.map(|x| tcx.alloc_mir(x))\n+    }\n+}\n+\n+macro_rules! impl_disk_cacheable_query(\n+    ($query_name:ident, |$key:tt| $cond:expr) => {\n+        impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {\n+            #[inline]\n+            fn cache_on_disk($key: Self::Key) -> bool {\n+                $cond\n+            }\n+\n+            #[inline]\n+            fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                      id: SerializedDepNodeIndex)\n+                                      -> Option<Self::Value> {\n+                tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+            }\n+        }\n+    }\n+);\n+\n+impl_disk_cacheable_query!(unsafety_check_result, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(borrowck, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(mir_borrowck, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(mir_const_qualif, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(contains_extern_indicator, |_| true);\n+impl_disk_cacheable_query!(def_symbol_name, |_| true);"}, {"sha": "079b518efd8981b49dc64c9e487e55529338028f", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -207,6 +207,16 @@ impl<'sess> OnDiskCache<'sess> {\n \n             // Encode TypeckTables\n             encode_query_results::<typeck_tables_of, _>(tcx, enc, qri)?;\n+            encode_query_results::<optimized_mir, _>(tcx, enc, qri)?;\n+            encode_query_results::<unsafety_check_result, _>(tcx, enc, qri)?;\n+            encode_query_results::<borrowck, _>(tcx, enc, qri)?;\n+            encode_query_results::<mir_borrowck, _>(tcx, enc, qri)?;\n+            encode_query_results::<mir_const_qualif, _>(tcx, enc, qri)?;\n+            encode_query_results::<def_symbol_name, _>(tcx, enc, qri)?;\n+            encode_query_results::<const_is_rvalue_promotable_to_static, _>(tcx, enc, qri)?;\n+            encode_query_results::<contains_extern_indicator, _>(tcx, enc, qri)?;\n+            encode_query_results::<symbol_name, _>(tcx, enc, qri)?;\n+            encode_query_results::<trans_fulfill_obligation, _>(tcx, enc, qri)?;\n         }\n \n         // Encode diagnostics"}, {"sha": "ec6d190b8bde9478011fc353bed8a6adf1a1b782", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -974,4 +974,7 @@ impl_load_from_cache!(\n     BorrowCheck => borrowck,\n     MirBorrowCheck => mir_borrowck,\n     MirConstQualif => mir_const_qualif,\n+    SymbolName => def_symbol_name,\n+    ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n+    ContainsExternIndicator => contains_extern_indicator,\n );"}, {"sha": "71b15643cbcef3de45140ad0785ff53f402e7be4", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -47,9 +47,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n             let mut hasher = StableHasher::new();\n \n             hcx.while_hashing_hir_bodies(true, |hcx| {\n-                hcx.while_hashing_spans(false, |hcx| {\n-                    body.hash_stable(hcx, &mut hasher);\n-                });\n+                body.hash_stable(hcx, &mut hasher);\n             });\n \n             hasher.finish()"}, {"sha": "3be99e9722361b213330dfb6cf7d825fc863e597", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -273,25 +273,23 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         let lo = BytePos::decode(self)?;\n         let hi = BytePos::decode(self)?;\n \n+        if lo == BytePos(0) && hi == BytePos(0) {\n+            // Don't try to rebase DUMMY_SP. Otherwise it will look like a valid\n+            // Span again.\n+            return Ok(DUMMY_SP)\n+        }\n+\n+        if hi < lo {\n+            // Consistently map invalid spans to DUMMY_SP.\n+            return Ok(DUMMY_SP)\n+        }\n+\n         let sess = if let Some(sess) = self.sess {\n             sess\n         } else {\n             bug!(\"Cannot decode Span without Session.\")\n         };\n \n-        let (lo, hi) = if lo > hi {\n-            // Currently macro expansion sometimes produces invalid Span values\n-            // where lo > hi. In order not to crash the compiler when trying to\n-            // translate these values, let's transform them into something we\n-            // can handle (and which will produce useful debug locations at\n-            // least some of the time).\n-            // This workaround is only necessary as long as macro expansion is\n-            // not fixed. FIXME(#23480)\n-            (lo, lo)\n-        } else {\n-            (lo, hi)\n-        };\n-\n         let imported_filemaps = self.cdata().imported_filemaps(&sess.codemap());\n         let filemap = {\n             // Optimize for the case that most spans within a translated item\n@@ -321,6 +319,16 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n             }\n         };\n \n+        // Make sure our binary search above is correct.\n+        debug_assert!(lo >= filemap.original_start_pos &&\n+                      lo <= filemap.original_end_pos);\n+\n+        if hi < filemap.original_start_pos || hi > filemap.original_end_pos {\n+            // `hi` points to a different FileMap than `lo` which is invalid.\n+            // Again, map invalid Spans to DUMMY_SP.\n+            return Ok(DUMMY_SP)\n+        }\n+\n         let lo = (lo + filemap.translated_filemap.start_pos) - filemap.original_start_pos;\n         let hi = (hi + filemap.translated_filemap.start_pos) - filemap.original_start_pos;\n "}, {"sha": "da8a62a976508703ad465d08827db178bd91f256", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "d8a87da5918a9bae800b8c969bff1effdfb7f296", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "47f5a2d2bbe85a7c9f855ea3311695714826c839", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "541261f1d80dd59d8c860ea86648b5096013e507", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "02746785856cc6fe5e93abf6b4eddc3863f54151", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -23,7 +23,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "a796c87f19bbf10cc8234c241c570eafc94a89bd", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -10,7 +10,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "bcdd5661e71817ba050336ad2fee672ccf7efe0d", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "105afd30d28ab9a1d6ae6f264a564ac69548c4a7", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "abe0586efcd7fd654eef5205e73d858e5d758875", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "426c58c834defad7a2ec8efe2208f415768471eb", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "e66e239b33c9571fa4f73840da1cea10a9d3a202", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "93aba4a3ee11e5a696660fb720cc714078ce3b00", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "b93a96566031c50f55f8b7948f16f4355de2cac9", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "851b13c705516783e8f564880ce32723dd6451d8", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "dcb937fd867abce00e4b62f5755d196df92d4768", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "263901f402540b46ce63b65df8b0e8efa7e1910d", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "2b6a140be32a90920847b6a8c8bfcfa93c191b0e", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 72, "deletions": 93, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -28,155 +28,134 @@\n \n \n // Indexing expression ---------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn indexing(slice: &[u8]) -> u8 {\n-    slice[100]\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n-    slice[100]\n+    #[cfg(cfail1)]\n+    {\n+        slice[100]\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        slice[100]\n+    }\n }\n \n \n // Arithmetic overflow plus ----------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n-    val + 1\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n-    val + 1\n+    #[cfg(cfail1)]\n+    {\n+        val + 1\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        val + 1\n+    }\n }\n \n \n // Arithmetic overflow minus ----------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n-    val - 1\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n-    val - 1\n+    #[cfg(cfail1)]\n+    {\n+        val - 1\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        val - 1\n+    }\n }\n \n \n // Arithmetic overflow mult ----------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n-    val * 2\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n-    val * 2\n+    #[cfg(cfail1)]\n+    {\n+        val * 2\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        val * 2\n+    }\n }\n \n \n // Arithmetic overflow negation ------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n-    -val\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n-    -val\n+    #[cfg(cfail1)]\n+    {\n+        -val\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        -val\n+    }\n }\n \n \n // Division by zero ------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn division_by_zero(val: i32) -> i32 {\n-    2 / val\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n-    2 / val\n+    #[cfg(cfail1)]\n+    {\n+        2 / val\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        2 / val\n+    }\n }\n \n // Division by zero ------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn mod_by_zero(val: i32) -> i32 {\n-    2 % val\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n-    2 % val\n+    #[cfg(cfail1)]\n+    {\n+        2 % val\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        2 % val\n+    }\n }\n \n \n // shift left ------------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn shift_left(val: i32, shift: usize) -> i32 {\n-    val << shift\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n-    val << shift\n+    #[cfg(cfail1)]\n+    {\n+        val << shift\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        val << shift\n+    }\n }\n \n \n // shift right ------------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn shift_right(val: i32, shift: usize) -> i32 {\n-    val >> shift\n-}\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n-    val >> shift\n-}\n-\n-\n-// THE FOLLOWING ITEMS SHOULD NOT BE INFLUENCED BY THEIR SOURCE LOCATION\n-\n-// bitwise ---------------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn bitwise(val: i32) -> i32 {\n-    !val & 0x101010101 | 0x45689 ^ 0x2372382\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn bitwise(val: i32) -> i32 {\n-    !val & 0x101010101 | 0x45689 ^ 0x2372382\n-}\n-\n-\n-// logical ---------------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n-    val1 && val2 || val3\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n-    val1 && val2 || val3\n+    #[cfg(cfail1)]\n+    {\n+        val >> shift\n+    }\n+    #[cfg(not(cfail1))]\n+    {\n+        val >> shift\n+    }\n }"}, {"sha": "8402da04091ece13929b08973878c89b50346b59", "filename": "src/test/incremental/hashes/panic_exprs_no_overflow_checks.rs", "status": "removed", "additions": 0, "deletions": 225, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,225 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This test case tests the incremental compilation hash (ICH) implementation\n-// for exprs that can panic at runtime (e.g. because of bounds checking). For\n-// these expressions an error message containing their source location is\n-// generated, so their hash must always depend on their location in the source\n-// code, not just when debuginfo is enabled.\n-\n-// As opposed to the panic_exprs.rs test case, this test case checks that things\n-// behave as expected when overflow checks are off:\n-//\n-// - Addition, subtraction, and multiplication do not change the ICH, unless\n-//   the function containing them is marked with rustc_inherit_overflow_checks.\n-// - Division by zero and bounds checks always influence the ICH\n-\n-// The general pattern followed here is: Change one thing between rev1 and rev2\n-// and make sure that the hash has changed, then change nothing between rev2 and\n-// rev3 and make sure that the hash has not changed.\n-\n-// must-compile-successfully\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n-\n-#![allow(warnings)]\n-#![feature(rustc_attrs)]\n-#![crate_type=\"rlib\"]\n-\n-\n-// Indexing expression ---------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn indexing(slice: &[u8]) -> u8 {\n-    slice[100]\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn indexing(slice: &[u8]) -> u8 {\n-    slice[100]\n-}\n-\n-\n-// Arithmetic overflow plus ----------------------------------------------------\n-#[cfg(cfail1)]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n-    val + 1\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n-    val + 1\n-}\n-\n-\n-// Arithmetic overflow minus ----------------------------------------------------\n-#[cfg(cfail1)]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n-    val - 1\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n-    val - 1\n-}\n-\n-\n-// Arithmetic overflow mult ----------------------------------------------------\n-#[cfg(cfail1)]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n-    val * 2\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n-    val * 2\n-}\n-\n-\n-// Arithmetic overflow negation ------------------------------------------------\n-#[cfg(cfail1)]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n-    -val\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_inherit_overflow_checks]\n-pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n-    -val\n-}\n-\n-\n-// Division by zero ------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn division_by_zero(val: i32) -> i32 {\n-    2 / val\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn division_by_zero(val: i32) -> i32 {\n-    2 / val\n-}\n-\n-// Division by zero ------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn mod_by_zero(val: i32) -> i32 {\n-    2 % val\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn mod_by_zero(val: i32) -> i32 {\n-    2 % val\n-}\n-\n-\n-\n-// THE FOLLOWING ITEMS SHOULD NOT BE INFLUENCED BY THEIR SOURCE LOCATION\n-\n-// bitwise ---------------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn bitwise(val: i32) -> i32 {\n-    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn bitwise(val: i32) -> i32 {\n-    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n-}\n-\n-\n-// logical ---------------------------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n-    val1 && val2 || val3\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n-    val1 && val2 || val3\n-}\n-\n-// Arithmetic overflow plus ----------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n-    val + 1\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n-    val + 1\n-}\n-\n-\n-// Arithmetic overflow minus ----------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n-    val - 1\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n-    val - 1\n-}\n-\n-\n-// Arithmetic overflow mult ----------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n-    val * 2\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n-    val * 2\n-}\n-\n-\n-// Arithmetic overflow negation ------------------------------------------------\n-#[cfg(cfail1)]\n-pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n-    -val\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n-    -val\n-}"}, {"sha": "b9616d8c6b53e3af731f3319282f6dc695dda539", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "3cdaf0e468a7a4844dcabfe64b9fd4120ff2dfbe", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "d7b70720418d800a31281ee5f4380609d00a7e31", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -23,7 +23,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "0816d6e5f452cf097d8b9963e5395dde3909f0c9", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -23,7 +23,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "a232883f7a9b4fa4c5131d7f4b50f4f17c92fcc7", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n \n #![allow(warnings)]"}, {"sha": "c5521d2fae2ebea53bddb9af6ada38e5e0d10c5d", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -23,7 +23,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "85f6ef60c5dc0c5d1a891b6dcf53b7e8d193d412", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "d04ed03eb6670048bcf6081e97817c4db51e4922", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "7f2bbebde8047ab587655896c763b5bd90984480", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -18,7 +18,7 @@\n \n // must-compile-successfully\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "996c9ed21cf678ded4b26c32177493bae0b25a8a", "filename": "src/test/incremental/ich_method_call_trait_scope.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -30,21 +30,10 @@ trait Trait2 {\n \n impl Trait2 for () { }\n \n-#[cfg(rpass1)]\n mod mod3 {\n+    #[cfg(rpass1)]\n     use Trait1;\n-\n-    fn bar() {\n-        ().method();\n-    }\n-\n-    fn baz() {\n-        22; // no method call, traits in scope don't matter\n-    }\n-}\n-\n-#[cfg(rpass2)]\n-mod mod3 {\n+    #[cfg(rpass2)]\n     use Trait2;\n \n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]"}, {"sha": "8566a24c84b26a968629ea7c9b0528f9e6f7f0bb", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -17,23 +17,18 @@\n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n \n-#[cfg(cfail1)]\n-pub fn foo() {\n-    pub fn bar() { }\n-    pub fn baz() { }\n-}\n-\n-#[cfg(cfail2)]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n pub fn foo() {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[cfg(cfail1)]\n     pub fn baz() { } // order is different...\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n     pub fn bar() { } // but that doesn't matter.\n \n+    #[cfg(cfail2)]\n+    pub fn baz() { } // order is different...\n+\n     pub fn bap() { } // neither does adding a new item\n }"}, {"sha": "9e5b51f3e7a01dc624b3da6702bbf9fda82c5ee2", "filename": "src/test/incremental/ich_resolve_results.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_resolve_results.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -25,49 +25,29 @@ mod mod2 {\n     pub struct Foo(pub i64);\n }\n \n-#[cfg(rpass1)]\n mod mod3 {\n-    use test;\n+    #[cfg(rpass1)]\n     use mod1::Foo;\n-\n-    fn in_expr() {\n-        Foo(0);\n-    }\n-\n-    fn in_type() {\n-        test::<Foo>();\n-    }\n-}\n-\n-#[cfg(rpass2)]\n-mod mod3 {\n-    use mod1::Foo; // <-- Nothing changed, but reordered!\n     use test;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n-    fn in_expr() {\n-        Foo(0);\n-    }\n+    // In rpass2 we move the use declaration.\n+    #[cfg(rpass2)]\n+    use mod1::Foo;\n+\n+    // In rpass3 we let the declaration point to something else.\n+    #[cfg(rpass3)]\n+    use mod2::Foo;\n \n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n-    fn in_type() {\n-        test::<Foo>();\n-    }\n-}\n-\n-#[cfg(rpass3)]\n-mod mod3 {\n-    use test;\n-    use mod2::Foo; // <-- This changed!\n-\n     #[rustc_clean(label=\"Hir\", cfg=\"rpass3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"rpass3\")]\n     fn in_expr() {\n         Foo(0);\n     }\n \n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"rpass3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"rpass3\")]\n     fn in_type() {"}, {"sha": "3f669ae3fc86018527c60578602478e72ddbd0c1", "filename": "src/test/incremental/source_loc_macros.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -35,28 +35,30 @@ fn file_same() {\n     let _ = file!();\n }\n \n-#[cfg(rpass1)]\n-fn line_different() {\n-    let _ = line!();\n-}\n-\n-#[cfg(rpass2)]\n #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n fn line_different() {\n-    let _ = line!();\n-}\n-\n-#[cfg(rpass1)]\n-fn col_different() {\n-    let _ = column!();\n+    #[cfg(rpass1)]\n+    {\n+        let _ = line!();\n+    }\n+    #[cfg(rpass2)]\n+    {\n+        let _ = line!();\n+    }\n }\n \n-#[cfg(rpass2)]\n #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n fn col_different() {\n-    let _ =        column!();\n+    #[cfg(rpass1)]\n+    {\n+        let _ = column!();\n+    }\n+    #[cfg(rpass2)]\n+    {\n+        let _ =        column!();\n+    }\n }\n \n fn main() {"}, {"sha": "90ec4a9d55831bb9b4ea4cd9dfa4ebc5392c6322", "filename": "src/test/incremental/spans_insignificant_w_o_debuginfo.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Fincremental%2Fspans_insignificant_w_o_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Fincremental%2Fspans_insignificant_w_o_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_insignificant_w_o_debuginfo.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This test makes sure that just changing a definition's location in the\n-// source file does *not* change its incr. comp. hash, if debuginfo is disabled.\n-\n-// revisions:rpass1 rpass2\n-\n-// compile-flags: -Z query-dep-graph\n-\n-#![feature(rustc_attrs)]\n-\n-#[cfg(rpass1)]\n-pub fn main() {}\n-\n-#[cfg(rpass2)]\n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n-pub fn main() {}"}, {"sha": "1fefec7a0a799969722c85c2ed63aa1081fbabfe", "filename": "src/test/incremental/spans_significant_w_panic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -23,8 +23,7 @@ pub fn main() {\n }\n \n #[cfg(rpass2)]\n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"MirOptimized\", cfg=\"rpass2\")]\n pub fn main() {\n     let _ = 0u8 + 1;\n }"}, {"sha": "22e40822eecfc8b52055dbeece2d9b99e58e88e4", "filename": "src/test/run-pass/auxiliary/svh-a-comment.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-comment.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The `svh-a-*.rs` files are all deviations from the base file\n-//! svh-a-base.rs with some difference (usually in `fn foo`) that\n-//! should not affect the strict version hash (SVH) computation\n-//! (#14132).\n-\n-#![crate_name = \"a\"]\n-\n-macro_rules! three {\n-    () => { 3 }\n-}\n-\n-pub trait U {}\n-pub trait V {}\n-impl U for () {}\n-impl V for () {}\n-\n-static A_CONSTANT : isize = 2;\n-\n-pub fn foo<T:U>(_: isize) -> isize {\n-    // a comment does not affect the svh\n-    3\n-}\n-\n-pub fn an_unused_name() -> isize {\n-    4\n-}"}, {"sha": "3d8a728967a4a64bcc274b11818dedc1690d5a2f", "filename": "src/test/run-pass/auxiliary/svh-a-doc.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-doc.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The `svh-a-*.rs` files are all deviations from the base file\n-//! svh-a-base.rs with some difference (usually in `fn foo`) that\n-//! should not affect the strict version hash (SVH) computation\n-//! (#14132).\n-\n-#![crate_name = \"a\"]\n-\n-macro_rules! three {\n-    () => { 3 }\n-}\n-\n-pub trait U {}\n-pub trait V {}\n-impl U for () {}\n-impl V for () {}\n-\n-static A_CONSTANT : isize = 2;\n-\n-// Adding some documentation does not affect the svh.\n-\n-/// foo always returns three.\n-pub fn foo<T:U>(_: isize) -> isize {\n-    3\n-}\n-\n-pub fn an_unused_name() -> isize {\n-    4\n-}"}, {"sha": "41d7eb7b18645f3ee181fee3406ec62aaea899fd", "filename": "src/test/run-pass/auxiliary/svh-a-macro.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-macro.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The `svh-a-*.rs` files are all deviations from the base file\n-//! svh-a-base.rs with some difference (usually in `fn foo`) that\n-//! should not affect the strict version hash (SVH) computation\n-//! (#14132).\n-\n-#![crate_name = \"a\"]\n-\n-macro_rules! three {\n-    () => { 3 }\n-}\n-\n-pub trait U {}\n-pub trait V {}\n-impl U for () {}\n-impl V for () {}\n-\n-static A_CONSTANT : isize = 2;\n-\n-pub fn foo<T:U>(_: isize) -> isize {\n-    // a macro invocation in a function body does not affect the svh,\n-    // as long as it yields the same code.\n-    three!()\n-}\n-\n-pub fn an_unused_name() -> isize {\n-    4\n-}"}, {"sha": "31a97f695f06cdbfcf20cd27edf87cb961020bb0", "filename": "src/test/run-pass/auxiliary/svh-a-no-change.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-no-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-no-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-no-change.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The `svh-a-*.rs` files are all deviations from the base file\n-//! svh-a-base.rs with some difference (usually in `fn foo`) that\n-//! should not affect the strict version hash (SVH) computation\n-//! (#14132).\n-\n-#![crate_name = \"a\"]\n-\n-macro_rules! three {\n-    () => { 3 }\n-}\n-\n-pub trait U {}\n-pub trait V {}\n-impl U for () {}\n-impl V for () {}\n-\n-static A_CONSTANT : isize = 2;\n-\n-pub fn foo<T:U>(_: isize) -> isize {\n-    3\n-}\n-\n-pub fn an_unused_name() -> isize {\n-    4\n-}"}, {"sha": "e405c337abe4aeb7ef7214625a275c5fc4931b75", "filename": "src/test/run-pass/auxiliary/svh-a-redundant-cfg.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-redundant-cfg.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The `svh-a-*.rs` files are all deviations from the base file\n-//! svh-a-base.rs with some difference (usually in `fn foo`) that\n-//! should not affect the strict version hash (SVH) computation\n-//! (#14132).\n-\n-#![crate_name = \"a\"]\n-\n-macro_rules! three {\n-    () => { 3 }\n-}\n-\n-pub trait U {}\n-pub trait V {}\n-impl U for () {}\n-impl V for () {}\n-\n-static A_CONSTANT : isize = 2;\n-\n-// cfg attribute does not affect the svh, as long as it yields the same code.\n-#[cfg(not(an_unused_name))]\n-pub fn foo<T:U>(_: isize) -> isize {\n-    3\n-}\n-\n-pub fn an_unused_name() -> isize {\n-    4\n-}"}, {"sha": "9ef788c98427392bfa95bf1156149d7df9a99232", "filename": "src/test/run-pass/auxiliary/svh-a-whitespace.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsvh-a-whitespace.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The `svh-a-*.rs` files are all deviations from the base file\n-//! svh-a-base.rs with some difference (usually in `fn foo`) that\n-//! should not affect the strict version hash (SVH) computation\n-//! (#14132).\n-\n-#![crate_name = \"a\"]\n-\n-macro_rules! three {\n-    () => { 3 }\n-}\n-\n-pub trait U {}\n-pub trait V {}\n-impl U for () {}\n-impl V for () {}\n-\n-static A_CONSTANT : isize = 2;\n-\n-pub fn foo<T:U>(_: isize) -> isize {\n-\n-    3\n-\n-}\n-\n-pub fn an_unused_name() -> isize {\n-    4\n-}"}, {"sha": "4d7b61e08f51922f47cb6a3a0ccf90afc1781359", "filename": "src/test/run-pass/svh-add-comment.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-comment.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// note that these aux-build directives must be in this order\n-// aux-build:svh-a-base.rs\n-// aux-build:svh-b.rs\n-// aux-build:svh-a-comment.rs\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate a;\n-extern crate b;\n-\n-fn main() {\n-    b::foo()\n-}"}, {"sha": "ea07ebe364661a01fad995170177a26aed84aad8", "filename": "src/test/run-pass/svh-add-doc.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-doc.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// note that these aux-build directives must be in this order\n-// aux-build:svh-a-base.rs\n-// aux-build:svh-b.rs\n-// aux-build:svh-a-doc.rs\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate a;\n-extern crate b;\n-\n-fn main() {\n-    b::foo()\n-}"}, {"sha": "4e0192c40c230af5858937426a264beaa32db283", "filename": "src/test/run-pass/svh-add-macro.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-macro.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// note that these aux-build directives must be in this order\n-// aux-build:svh-a-base.rs\n-// aux-build:svh-b.rs\n-// aux-build:svh-a-macro.rs\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate a;\n-extern crate b;\n-\n-fn main() {\n-    b::foo()\n-}"}, {"sha": "aca50859b6eda9cc7f18ad6bf5080fb8b11a86af", "filename": "src/test/run-pass/svh-add-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Frun-pass%2Fsvh-add-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d/src%2Ftest%2Frun-pass%2Fsvh-add-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-nothing.rs?ref=88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "patch": "@@ -11,7 +11,7 @@\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n-// aux-build:svh-a-no-change.rs\n+// aux-build:svh-a-base.rs\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "2da3004aaf1e527a108a62fc3885a3e83b555cee", "filename": "src/test/run-pass/svh-add-redundant-cfg.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-redundant-cfg.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// note that these aux-build directives must be in this order\n-// aux-build:svh-a-base.rs\n-// aux-build:svh-b.rs\n-// aux-build:svh-a-redundant-cfg.rs\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate a;\n-extern crate b;\n-\n-fn main() {\n-    b::foo()\n-}"}, {"sha": "bfc676bde263adaf28c533e10a4b04307cfd4b74", "filename": "src/test/run-pass/svh-add-whitespace.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a05eed54dc737249a07bc50282d9db831d03b9/src%2Ftest%2Frun-pass%2Fsvh-add-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-whitespace.rs?ref=58a05eed54dc737249a07bc50282d9db831d03b9", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// note that these aux-build directives must be in this order\n-// aux-build:svh-a-base.rs\n-// aux-build:svh-b.rs\n-// aux-build:svh-a-whitespace.rs\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate a;\n-extern crate b;\n-\n-fn main() {\n-    b::foo()\n-}"}]}