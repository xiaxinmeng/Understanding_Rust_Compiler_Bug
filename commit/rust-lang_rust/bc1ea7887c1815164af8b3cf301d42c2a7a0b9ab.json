{"sha": "bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMWVhNzg4N2MxODE1MTY0YWY4YjNjZjMwMWQ0MmMyYTdhMGI5YWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T22:08:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` the write guard map", "tree": {"sha": "53010d9e7854437564a31b59ff8e72760f66960f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53010d9e7854437564a31b59ff8e72760f66960f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "html_url": "https://github.com/rust-lang/rust/commit/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "html_url": "https://github.com/rust-lang/rust/commit/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "7ed7735db455134af6a0737790f679493c2a776d", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "patch": "@@ -419,7 +419,10 @@ impl<'a> CheckLoanCtxt<'a> {\n                         derefs: deref_count\n                     };\n                     debug!(\"Inserting write guard at {:?}\", key);\n-                    this.bccx.write_guard_map.insert(key);\n+                    let mut write_guard_map = this.bccx\n+                                                  .write_guard_map\n+                                                  .borrow_mut();\n+                    write_guard_map.get().insert(key);\n                 }\n \n                 _ => {}"}, {"sha": "431b7b0e2c8c32b0c3c49b5e7c4fa806c481d081", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "patch": "@@ -82,7 +82,7 @@ pub fn check_crate(\n         moved_variables_set: moved_variables_set,\n         capture_map: capture_map,\n         root_map: root_map(),\n-        write_guard_map: @mut HashSet::new(),\n+        write_guard_map: @RefCell::new(HashSet::new()),\n         stats: @mut BorrowStats {\n             loaned_paths_same: 0,\n             loaned_paths_imm: 0,\n@@ -217,7 +217,7 @@ pub struct root_map_key {\n \n // A set containing IDs of expressions of gc'd type that need to have a write\n // guard.\n-pub type write_guard_map = @mut HashSet<root_map_key>;\n+pub type write_guard_map = @RefCell<HashSet<root_map_key>>;\n \n pub type BckResult<T> = Result<T, BckError>;\n "}, {"sha": "1b3a3d91838e870ab685ed59f01259ff747db8d4", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "patch": "@@ -123,7 +123,7 @@ pub fn lookup_variant_by_id(tcx: ty::ctxt,\n             root_map: @RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n             vtable_map: @RefCell::new(HashMap::new()),\n-            write_guard_map: @mut HashSet::new(),\n+            write_guard_map: @RefCell::new(HashSet::new()),\n             capture_map: @RefCell::new(HashMap::new())\n         };\n         let e = match csearch::maybe_get_item_ast(tcx, enum_def,\n@@ -173,7 +173,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n             root_map: @RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n             vtable_map: @RefCell::new(HashMap::new()),\n-            write_guard_map: @mut HashSet::new(),\n+            write_guard_map: @RefCell::new(HashSet::new()),\n             capture_map: @RefCell::new(HashMap::new())\n         };\n         let e = match csearch::maybe_get_item_ast(tcx, def_id,"}, {"sha": "3b60dc3dd378907176972b78da09d02d764e0942", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=bc1ea7887c1815164af8b3cf301d42c2a7a0b9ab", "patch": "@@ -56,7 +56,8 @@ pub fn root_and_write_guard(datum: &Datum,\n     // Perform the write guard, if necessary.\n     //\n     // (Note: write-guarded values are always boxes)\n-    if ccx.maps.write_guard_map.contains(&key) {\n+    let write_guard_map = ccx.maps.write_guard_map.borrow();\n+    if write_guard_map.get().contains(&key) {\n         perform_write_guard(datum, bcx, span)\n     } else {\n         bcx"}]}