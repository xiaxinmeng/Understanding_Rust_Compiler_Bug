{"sha": "5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNmJmODM2ZmUzZDRjZmRhMWI4MjdhNWNkMzk4MmU1YTU4OGMwZmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-20T10:01:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-20T10:01:24Z"}, "message": "Implement #[link_section]\n\nFixes #1047", "tree": {"sha": "02d019499f0cae68d666db04dcb0ac7294b09cc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d019499f0cae68d666db04dcb0ac7294b09cc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "html_url": "https://github.com/rust-lang/rust/commit/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f718378f115f487b5ff6270453a9cbb79d808562", "url": "https://api.github.com/repos/rust-lang/rust/commits/f718378f115f487b5ff6270453a9cbb79d808562", "html_url": "https://github.com/rust-lang/rust/commit/f718378f115f487b5ff6270453a9cbb79d808562"}], "stats": {"total": 50, "additions": 14, "deletions": 36}, "files": [{"sha": "530e5549b43a8caf1006236ffcff29a61dd373da", "filename": "example/std_example.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "patch": "@@ -5,6 +5,8 @@ use std::io::Write;\n use std::ops::Generator;\n \n fn main() {\n+    println!(\"{:?}\", std::env::args().collect::<Vec<_>>());\n+\n     let mutex = std::sync::Mutex::new(());\n     let _guard = mutex.lock().unwrap();\n "}, {"sha": "599da32ee828890d9d10a68c0d6ba7a9b669fedb", "filename": "patches/0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f718378f115f487b5ff6270453a9cbb79d808562/patches%2F0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch", "raw_url": "https://github.com/rust-lang/rust/raw/f718378f115f487b5ff6270453a9cbb79d808562/patches%2F0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch?ref=f718378f115f487b5ff6270453a9cbb79d808562", "patch": "@@ -1,26 +0,0 @@\n-From eaa0c3eac2067c7c08913653ebef10c103c1255f Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Mon, 16 Dec 2019 11:46:10 +0100\n-Subject: [PATCH] [libstd] Revert arg initialization on linux to not require\n- #[link_section]\n-\n----\n- src/libstd/sys/unix/args.rs | 5 +----\n- 1 file changed, 1 insertion(+), 4 deletions(-)\n-\n-diff --git a/src/libstd/sys/unix/args.rs b/src/libstd/sys/unix/args.rs\n-index 2ed1585..b4b021a 100644\n---- a/src/libstd/sys/unix/args.rs\n-+++ b/src/libstd/sys/unix/args.rs\n-@@ -83,7 +83,7 @@ mod imp {\n-         // On Linux-GNU, we rely on `ARGV_INIT_ARRAY` below to initialize\n-         // `ARGC` and `ARGV`. But in Miri that does not actually happen so we\n-         // still initialize here.\n--        #[cfg(any(miri, not(all(target_os = \"linux\", target_env = \"gnu\"))))]\n-+        // `#[link_section]` is not yet supported by cg_clif\n-         really_init(_argc, _argv);\n-     }\n- \n--- \n-2.20.1\n-"}, {"sha": "cb797b3a5fe1587470b82ddf48db6b99c5b5a139", "filename": "src/constant.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "patch": "@@ -264,22 +264,20 @@ fn data_id_for_static(\n \n fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mut ConstantCx) {\n     while let Some(todo_item) = cx.todo.pop() {\n-        let (data_id, alloc) = match todo_item {\n+        let (data_id, alloc, section_name) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n                 //println!(\"alloc_id {}\", alloc_id);\n                 let alloc = match tcx.get_global_alloc(alloc_id).unwrap() {\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n                 let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align);\n-                (data_id, alloc)\n+                (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n                 //println!(\"static {:?}\", def_id);\n \n-                if tcx.is_foreign_item(def_id) {\n-                    continue;\n-                }\n+                let section_name = tcx.codegen_fn_attrs(def_id).link_section.map(|s| s.as_str());\n \n                 let const_ = tcx.const_eval_poly(def_id).unwrap();\n \n@@ -298,7 +296,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                         Linkage::Export // FIXME Set hidden visibility\n                     },\n                 );\n-                (data_id, alloc)\n+                (data_id, alloc, section_name)\n             }\n         };\n \n@@ -309,6 +307,11 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n \n         let mut data_ctx = DataContext::new();\n \n+        if let Some(section_name) = section_name {\n+            // FIXME set correct segment for Mach-O files\n+            data_ctx.set_segment_section(\"\", &*section_name);\n+        }\n+\n         let bytes = alloc.inspect_with_undef_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n "}, {"sha": "15e4947ca46c9ceb432971e26a36b35db111606f", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "patch": "@@ -75,9 +75,8 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         unsafe { ::std::mem::transmute(finalized_main) };\n \n     let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n-    let args = args\n-        .split(\" \")\n-        .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n+    let args = std::iter::once(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string())\n+        .chain(args.split(\" \"))\n         .map(|arg| CString::new(arg).unwrap())\n         .collect::<Vec<_>>();\n     let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();"}, {"sha": "7127ba79fe985f88bd2b440cd68948880ae0d524", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=5c6bf836fe3d4cfda1b827a5cd3982e5a588c0ff", "patch": "@@ -58,7 +58,7 @@ $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n echo \"[AOT] std_example\"\n $RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/std_example arg\n \n echo \"[AOT] subslice-patterns-const-eval\"\n $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE"}]}