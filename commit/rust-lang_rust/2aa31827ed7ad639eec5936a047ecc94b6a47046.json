{"sha": "2aa31827ed7ad639eec5936a047ecc94b6a47046", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYTMxODI3ZWQ3YWQ2MzllZWM1OTM2YTA0N2VjYzk0YjZhNDcwNDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:11:32Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:17Z"}, "message": "Rollup merge of #22296 - steveklabnik:gh21577, r=Gankro\n\nFixes #21577.", "tree": {"sha": "690f6ac8c0a36408c32ee11e8c649b4e8cd6b854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690f6ac8c0a36408c32ee11e8c649b4e8cd6b854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa31827ed7ad639eec5936a047ecc94b6a47046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa31827ed7ad639eec5936a047ecc94b6a47046", "html_url": "https://github.com/rust-lang/rust/commit/2aa31827ed7ad639eec5936a047ecc94b6a47046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa31827ed7ad639eec5936a047ecc94b6a47046/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edac2a07c5012025890eb9e1ed0a8d98dfe55aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/edac2a07c5012025890eb9e1ed0a8d98dfe55aee", "html_url": "https://github.com/rust-lang/rust/commit/edac2a07c5012025890eb9e1ed0a8d98dfe55aee"}, {"sha": "817f3a4d37fdd06ca26821ab4c042e3466ad9716", "url": "https://api.github.com/repos/rust-lang/rust/commits/817f3a4d37fdd06ca26821ab4c042e3466ad9716", "html_url": "https://github.com/rust-lang/rust/commit/817f3a4d37fdd06ca26821ab4c042e3466ad9716"}], "stats": {"total": 84, "additions": 41, "deletions": 43}, "files": [{"sha": "45c08af04f8773c6be6469cf0b2b7031ab27c735", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2aa31827ed7ad639eec5936a047ecc94b6a47046/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/2aa31827ed7ad639eec5936a047ecc94b6a47046/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=2aa31827ed7ad639eec5936a047ecc94b6a47046", "patch": "@@ -4,19 +4,19 @@ Let's talk about loops.\n \n Remember Rust's `for` loop? Here's an example:\n \n-```{rust}\n+```rust\n for x in 0..10 {\n     println!(\"{}\", x);\n }\n ```\n \n-Now that you know more Rust, we can talk in detail about how this works. The\n-`range` function returns an *iterator*. An iterator is something that we can\n+Now that you know more Rust, we can talk in detail about how this works.\n+Ranges (the `0..10`) are 'iterators'. An iterator is something that we can\n call the `.next()` method on repeatedly, and it gives us a sequence of things.\n \n Like this:\n \n-```{rust}\n+```rust\n let mut range = 0..10;\n \n loop {\n@@ -29,12 +29,12 @@ loop {\n }\n ```\n \n-We make a mutable binding to the return value of `range`, which is our iterator.\n-We then `loop`, with an inner `match`. This `match` is used on the result of\n-`range.next()`, which gives us a reference to the next value of the iterator.\n-`next` returns an `Option<i32>`, in this case, which will be `Some(i32)` when\n-we have a value and `None` once we run out. If we get `Some(i32)`, we print it\n-out, and if we get `None`, we `break` out of the loop.\n+We make a mutable binding to the range, which is our iterator. We then `loop`,\n+with an inner `match`. This `match` is used on the result of `range.next()`,\n+which gives us a reference to the next value of the iterator. `next` returns an\n+`Option<i32>`, in this case, which will be `Some(i32)` when we have a value and\n+`None` once we run out. If we get `Some(i32)`, we print it out, and if we get\n+`None`, we `break` out of the loop.\n \n This code sample is basically the same as our `for` loop version. The `for`\n loop is just a handy way to write this `loop`/`match`/`break` construct.\n@@ -43,13 +43,13 @@ loop is just a handy way to write this `loop`/`match`/`break` construct.\n own iterator involves implementing the `Iterator` trait. While doing that is\n outside of the scope of this guide, Rust provides a number of useful iterators\n to accomplish various tasks. Before we talk about those, we should talk about a\n-Rust anti-pattern. And that's `range`.\n+Rust anti-pattern. And that's using ranges like this.\n \n-Yes, we just talked about how `range` is cool. But `range` is also very\n-primitive. For example, if you needed to iterate over the contents of\n-a vector, you may be tempted to write this:\n+Yes, we just talked about how ranges are cool. But ranges are also very\n+primitive. For example, if you needed to iterate over the contents of a vector,\n+you may be tempted to write this:\n \n-```{rust}\n+```rust\n let nums = vec![1, 2, 3];\n \n for i in 0..nums.len() {\n@@ -61,7 +61,7 @@ This is strictly worse than using an actual iterator. The `.iter()` method on\n vectors returns an iterator which iterates through a reference to each element\n of the vector in turn. So write this:\n \n-```{rust}\n+```rust\n let nums = vec![1, 2, 3];\n \n for num in nums.iter() {\n@@ -83,7 +83,7 @@ works. `num` is actually of type `&i32`. That is, it's a reference to an `i32`,\n not an `i32` itself. `println!` handles the dereferencing for us, so we don't\n see it. This code works fine too:\n \n-```{rust}\n+```rust\n let nums = vec![1, 2, 3];\n \n for num in nums.iter() {\n@@ -97,7 +97,7 @@ involve making a copy of the data and giving us the copy. With references,\n we're just borrowing a reference to the data, and so it's just passing\n a reference, without needing to do the copy.\n \n-So, now that we've established that `range` is often not what you want, let's\n+So, now that we've established that ranges are often not what you want, let's\n talk about what you do want instead.\n \n There are three broad classes of things that are relevant here: iterators,\n@@ -108,8 +108,7 @@ There are three broad classes of things that are relevant here: iterators,\n   different output sequence.\n * *consumers* operate on an iterator, producing some final set of values.\n \n-Let's talk about consumers first, since you've already seen an iterator,\n-`range`.\n+Let's talk about consumers first, since you've already seen an iterator, ranges.\n \n ## Consumers\n \n@@ -118,7 +117,7 @@ The most common consumer is `collect()`. This code doesn't quite compile,\n but it shows the intention:\n \n ```{rust,ignore}\n-let one_to_one_hundred = (1..101i32).collect();\n+let one_to_one_hundred = (1..101).collect();\n ```\n \n As you can see, we call `collect()` on our iterator. `collect()` takes\n@@ -127,8 +126,8 @@ of the results. So why won't this compile? Rust can't determine what\n type of things you want to collect, and so you need to let it know.\n Here's the version that does compile:\n \n-```{rust}\n-let one_to_one_hundred = (1..101i32).collect::<Vec<i32>>();\n+```rust\n+let one_to_one_hundred = (1..101).collect::<Vec<i32>>();\n ```\n \n If you remember, the `::<>` syntax allows us to give a type hint,\n@@ -137,7 +136,7 @@ need to use the whole type, though. Using a `_` will let you provide\n a partial hint:\n \n ```rust\n-let one_to_one_hundred = range(1, 101).collect::<Vec<_>>();\n+let one_to_one_hundred = (1..101).collect::<Vec<_>>();\n ```\n \n This says \"Collect into a `Vec<T>`, please, but infer what the `T` is for me.\"\n@@ -146,8 +145,8 @@ This says \"Collect into a `Vec<T>`, please, but infer what the `T` is for me.\"\n `collect()` is the most common consumer, but there are others too. `find()`\n is one:\n \n-```{rust}\n-let greater_than_forty_two = (0..100i32)\n+```rust\n+let greater_than_forty_two = (0..100)\n                              .find(|x| *x > 42);\n \n match greater_than_forty_two {\n@@ -163,9 +162,8 @@ element, `find` returns an `Option` rather than the element itself.\n \n Another important consumer is `fold`. Here's what it looks like:\n \n-```{rust}\n-let sum = (1..4)\n-              .fold(0, |sum, x| sum + x);\n+```rust\n+let sum = (1..4).fold(0, |sum, x| sum + x);\n ```\n \n `fold()` is a consumer that looks like this:\n@@ -187,7 +185,7 @@ in this iterator:\n \n We called `fold()` with these arguments:\n \n-```{rust}\n+```rust\n # (1..4)\n .fold(0, |sum, x| sum + x);\n ```\n@@ -218,25 +216,25 @@ are *lazy* and don't need to generate all of the values upfront.\n This code, for example, does not actually generate the numbers\n `1-100`, and just creates a value that represents the sequence:\n \n-```{rust}\n+```rust\n let nums = 1..100;\n ```\n \n Since we didn't do anything with the range, it didn't generate the sequence.\n Let's add the consumer:\n \n-```{rust}\n+```rust\n let nums = (1..100).collect::<Vec<i32>>();\n ```\n \n Now, `collect()` will require that the range gives it some numbers, and so\n it will do the work of generating the sequence.\n \n-A range is one of two basic iterators that you'll see. The other is `iter()`,\n+Ranges are one of two basic iterators that you'll see. The other is `iter()`,\n which you've used before. `iter()` can turn a vector into a simple iterator\n that gives you each element in turn:\n \n-```{rust}\n+```rust\n let nums = [1, 2, 3];\n \n for num in nums.iter() {\n@@ -247,7 +245,7 @@ for num in nums.iter() {\n These two basic iterators should serve you well. There are some more\n advanced iterators, including ones that are infinite. Like `count`:\n \n-```{rust}\n+```rust\n std::iter::count(1, 5);\n ```\n \n@@ -265,15 +263,15 @@ we need to talk about with regards to iterators. Let's get to it!\n a new iterator. The simplest one is called `map`:\n \n ```{rust,ignore}\n-(1..100i32).map(|x| x + 1);\n+(1..100).map(|x| x + 1);\n ```\n \n `map` is called upon another iterator, and produces a new iterator where each\n element reference has the closure it's been given as an argument called on it.\n So this would give us the numbers from `2-100`. Well, almost! If you\n compile the example, you'll get a warning:\n \n-```{notrust,ignore}\n+```text\n warning: unused result which must be used: iterator adaptors are lazy and\n          do nothing unless consumed, #[warn(unused_must_use)] on by default\n (1..100).map(|x| x + 1);\n@@ -295,15 +293,15 @@ iterator over the next `n` elements of the original iterator, note that this\n has no side effect on the original iterator. Let's try it out with our infinite\n iterator from before, `count()`:\n \n-```{rust}\n+```rust\n for i in std::iter::count(1, 5).take(5) {\n     println!(\"{}\", i);\n }\n ```\n \n This will print\n \n-```{notrust,ignore}\n+```text\n 1\n 6\n 11\n@@ -315,8 +313,8 @@ This will print\n returns `true` or `false`. The new iterator `filter()` produces\n only the elements that that closure returns `true` for:\n \n-```{rust}\n-for i in (1..100i32).filter(|&x| x % 2 == 0) {\n+```rust\n+for i in (1..100).filter(|&x| x % 2 == 0) {\n     println!(\"{}\", i);\n }\n ```\n@@ -330,8 +328,8 @@ itself.)\n You can chain all three things together: start with an iterator, adapt it\n a few times, and then consume the result. Check it out:\n \n-```{rust}\n-(1..1000i32)\n+```rust\n+(1..1000)\n     .filter(|&x| x % 2 == 0)\n     .filter(|&x| x % 3 == 0)\n     .take(5)"}]}