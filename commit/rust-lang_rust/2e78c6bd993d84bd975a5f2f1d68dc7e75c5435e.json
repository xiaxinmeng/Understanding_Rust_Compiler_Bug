{"sha": "2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "node_id": "C_kwDOAAsO6NoAKDJlNzhjNmJkOTkzZDg0YmQ5NzVhNWYyZjFkNjhkYzdlNzVjNTQzNWU", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-08-26T07:55:57Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-25T23:05:50Z"}, "message": "Remove premature shortcutting", "tree": {"sha": "bff90dffc6516b51baac14853899a2c7259e1c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff90dffc6516b51baac14853899a2c7259e1c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "html_url": "https://github.com/rust-lang/rust/commit/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1848d8a58e5ed70b016bc1039ca26e9941b6e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1848d8a58e5ed70b016bc1039ca26e9941b6e8", "html_url": "https://github.com/rust-lang/rust/commit/bf1848d8a58e5ed70b016bc1039ca26e9941b6e8"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "4824794d5819bab5fabb679f8aac6a559e39b9e5", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "patch": "@@ -914,22 +914,6 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n         }\n     }\n \n-    /// When trying several branches and each returns a `Usefulness`, we need to combine the\n-    /// results together.\n-    fn merge(pref: ArmType, usefulnesses: impl Iterator<Item = Self>) -> Self {\n-        let mut ret = Self::new_not_useful(pref);\n-        for u in usefulnesses {\n-            ret.extend(u);\n-            if let NoWitnesses(subpats) = &ret {\n-                if subpats.is_full() {\n-                    // Once we reach the full set, more unions won't change the result.\n-                    return ret;\n-                }\n-            }\n-        }\n-        ret\n-    }\n-\n     /// After calculating the usefulness for a branch of an or-pattern, call this to make this\n     /// usefulness mergeable with those from the other branches.\n     fn unsplit_or_pat(self, alt_id: usize, alt_count: usize, pat: &'p Pat<'tcx>) -> Self {\n@@ -1168,25 +1152,26 @@ fn is_useful<'p, 'tcx>(\n     let pcx = PatCtxt { cx, ty, span: v.head().span, is_top_level, is_non_exhaustive };\n \n     // If the first pattern is an or-pattern, expand it.\n-    let ret = if is_or_pat(v.head()) {\n+    let mut ret = Usefulness::new_not_useful(witness_preference);\n+    if is_or_pat(v.head()) {\n         debug!(\"expanding or-pattern\");\n         let v_head = v.head();\n         let vs: Vec<_> = v.expand_or_pat().collect();\n         let alt_count = vs.len();\n         // We try each or-pattern branch in turn.\n         let mut matrix = matrix.clone();\n-        let usefulnesses = vs.into_iter().enumerate().map(|(i, v)| {\n+        for (i, v) in vs.into_iter().enumerate() {\n             let usefulness =\n                 is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n+            let usefulness = usefulness.unsplit_or_pat(i, alt_count, v_head);\n+            ret.extend(usefulness);\n             // If pattern has a guard don't add it to the matrix.\n             if !is_under_guard {\n                 // We push the already-seen patterns into the matrix in order to detect redundant\n                 // branches like `Some(_) | Some(0)`.\n                 matrix.push(v);\n             }\n-            usefulness.unsplit_or_pat(i, alt_count, v_head)\n-        });\n-        Usefulness::merge(witness_preference, usefulnesses)\n+        }\n     } else {\n         let v_ctor = v.head_ctor(cx);\n         if let Constructor::IntRange(ctor_range) = &v_ctor {\n@@ -1204,7 +1189,7 @@ fn is_useful<'p, 'tcx>(\n         // For each constructor, we compute whether there's a value that starts with it that would\n         // witness the usefulness of `v`.\n         let start_matrix = &matrix;\n-        let usefulnesses = split_ctors.into_iter().map(|ctor| {\n+        for ctor in split_ctors {\n             debug!(\"specialize({:?})\", ctor);\n             // We cache the result of `Fields::wildcards` because it is used a lot.\n             let ctor_wild_subpatterns = Fields::wildcards(pcx, &ctor);\n@@ -1213,6 +1198,8 @@ fn is_useful<'p, 'tcx>(\n             let v = v.pop_head_constructor(&ctor_wild_subpatterns);\n             let usefulness =\n                 is_useful(cx, &spec_matrix, &v, witness_preference, hir_id, is_under_guard, false);\n+            let usefulness =\n+                usefulness.apply_constructor(pcx, start_matrix, &ctor, &ctor_wild_subpatterns);\n \n             // When all the conditions are met we have a match with a `non_exhaustive` enum\n             // that has the potential to trigger the `non_exhaustive_omitted_patterns` lint.\n@@ -1248,10 +1235,9 @@ fn is_useful<'p, 'tcx>(\n                 lint_non_exhaustive_omitted_patterns(pcx.cx, pcx.ty, pcx.span, hir_id, patterns);\n             }\n \n-            usefulness.apply_constructor(pcx, start_matrix, &ctor, &ctor_wild_subpatterns)\n-        });\n-        Usefulness::merge(witness_preference, usefulnesses)\n-    };\n+            ret.extend(usefulness);\n+        }\n+    }\n \n     debug!(?ret);\n     ret"}]}