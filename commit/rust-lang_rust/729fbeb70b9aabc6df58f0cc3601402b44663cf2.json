{"sha": "729fbeb70b9aabc6df58f0cc3601402b44663cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOWZiZWI3MGI5YWFiYzZkZjU4ZjBjYzM2MDE0MDJiNDQ2NjNjZjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T14:42:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:57:05Z"}, "message": "typeck/pat.rs: extract diagnostics from `check_pat_slice`.", "tree": {"sha": "5fb0e4e99ff7444f97c261cc525f7776a953a291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb0e4e99ff7444f97c261cc525f7776a953a291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729fbeb70b9aabc6df58f0cc3601402b44663cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729fbeb70b9aabc6df58f0cc3601402b44663cf2", "html_url": "https://github.com/rust-lang/rust/commit/729fbeb70b9aabc6df58f0cc3601402b44663cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729fbeb70b9aabc6df58f0cc3601402b44663cf2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab69aef03f9744381e4a0cedb397c34d191f4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab69aef03f9744381e4a0cedb397c34d191f4f7", "html_url": "https://github.com/rust-lang/rust/commit/2ab69aef03f9744381e4a0cedb397c34d191f4f7"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "ff1500e6bd87762c55074e31d2e88e02e2c96bf2", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 54, "deletions": 41, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/729fbeb70b9aabc6df58f0cc3601402b44663cf2/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729fbeb70b9aabc6df58f0cc3601402b44663cf2/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=729fbeb70b9aabc6df58f0cc3601402b44663cf2", "patch": "@@ -1012,59 +1012,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expected_ty = self.structurally_resolved_type(span, expected);\n         let (inner_ty, slice_ty) = match expected_ty.sty {\n             ty::Array(inner_ty, size) => {\n-                if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n+                let slice_ty = if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n                     let min_len = before.len() as u64 + after.len() as u64;\n                     if slice.is_none() {\n                         if min_len != size {\n-                            struct_span_err!(\n-                                tcx.sess, span, E0527,\n-                                \"pattern requires {} elements but array has {}\",\n-                                min_len, size\n-                            )\n-                            .span_label(span, format!(\"expected {} elements\", size))\n-                            .emit();\n+                            self.error_scrutinee_inconsistent_length(span, min_len, size)\n                         }\n-                        (inner_ty, tcx.types.err)\n+                        tcx.types.err\n                     } else if let Some(rest) = size.checked_sub(min_len) {\n-                        (inner_ty, tcx.mk_array(inner_ty, rest))\n+                        tcx.mk_array(inner_ty, rest)\n                     } else {\n-                        let msg = format!(\"pattern cannot match array of {} elements\", size);\n-                        struct_span_err!(\n-                            tcx.sess, span, E0528,\n-                            \"pattern requires at least {} elements but array has {}\",\n-                            min_len, size\n-                        )\n-                        .span_label(span, msg)\n-                        .emit();\n-                        (inner_ty, tcx.types.err)\n+                        self.error_scrutinee_with_rest_inconsistent_length(span, min_len, size);\n+                        tcx.types.err\n                     }\n                 } else {\n-                    struct_span_err!(\n-                        tcx.sess, span, E0730,\n-                        \"cannot pattern-match on an array without a fixed length\",\n-                    )\n-                    .emit();\n-                    (inner_ty, tcx.types.err)\n-                }\n+                    self.error_scrutinee_unfixed_length(span);\n+                    tcx.types.err\n+                };\n+                (inner_ty, slice_ty)\n             }\n             ty::Slice(inner_ty) => (inner_ty, expected_ty),\n             _ => {\n                 if !expected_ty.references_error() {\n-                    let mut err = struct_span_err!(\n-                        tcx.sess, span, E0529,\n-                        \"expected an array or slice, found `{}`\",\n-                        expected_ty\n-                    );\n-                    if let ty::Ref(_, ty, _) = expected_ty.sty {\n-                        if let ty::Array(..) | ty::Slice(..) = ty.sty {\n-                            err.help(\"the semantics of slice patterns changed \\\n-                                     recently; see issue #62254\");\n-                        }\n-                    }\n-\n-                    let msg = format!(\"pattern cannot match with input type `{}`\", expected_ty);\n-                    err.span_label(span, msg);\n-                    err.emit();\n+                    self.error_expected_array_or_slice(span, expected_ty);\n                 }\n                 (tcx.types.err, tcx.types.err)\n             }\n@@ -1081,4 +1051,47 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         expected_ty\n     }\n+\n+    fn error_scrutinee_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {\n+        struct_span_err!(\n+            self.tcx.sess, span, E0527,\n+            \"pattern requires {} elements but array has {}\",\n+            min_len, size\n+        )\n+        .span_label(span, format!(\"expected {} elements\", size))\n+        .emit();\n+    }\n+\n+    fn error_scrutinee_with_rest_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {\n+        struct_span_err!(\n+            self.tcx.sess, span, E0528,\n+            \"pattern requires at least {} elements but array has {}\",\n+            min_len, size\n+        )\n+        .span_label(span, format!(\"pattern cannot match array of {} elements\", size))\n+        .emit();\n+    }\n+\n+    fn error_scrutinee_unfixed_length(&self, span: Span) {\n+        struct_span_err!(\n+            self.tcx.sess, span, E0730,\n+            \"cannot pattern-match on an array without a fixed length\",\n+        )\n+        .emit();\n+    }\n+\n+    fn error_expected_array_or_slice(&self, span: Span, expected_ty: Ty<'tcx>) {\n+        let mut err = struct_span_err!(\n+            self.tcx.sess, span, E0529,\n+            \"expected an array or slice, found `{}`\",\n+            expected_ty\n+        );\n+        if let ty::Ref(_, ty, _) = expected_ty.sty {\n+            if let ty::Array(..) | ty::Slice(..) = ty.sty {\n+                err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n+            }\n+        }\n+        err.span_label(span, format!(\"pattern cannot match with input type `{}`\", expected_ty));\n+        err.emit();\n+    }\n }"}]}