{"sha": "f9ed2199ff5a69b88d43949c138042a42ecd98b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZWQyMTk5ZmY1YTY5Yjg4ZDQzOTQ5YzEzODA0MmE0MmVjZDk4YjU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-22T18:58:58Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-22T19:01:31Z"}, "message": "Create promoted MIR fragments in `const` and `static`s\n\nThe previous strategy of removing `Drop` and `StorageDead` for promoted\nlocals only worked for rvalue lifetime extension. We now use the same\nimplementation for promotion across all kinds of items.", "tree": {"sha": "e023a3070fd6d7703b5fe4ff7b6a23da2b4268a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e023a3070fd6d7703b5fe4ff7b6a23da2b4268a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ed2199ff5a69b88d43949c138042a42ecd98b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed2199ff5a69b88d43949c138042a42ecd98b5", "html_url": "https://github.com/rust-lang/rust/commit/f9ed2199ff5a69b88d43949c138042a42ecd98b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed2199ff5a69b88d43949c138042a42ecd98b5/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf4bee7d3d69356a9eb702f9e0a9ddba238d33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf4bee7d3d69356a9eb702f9e0a9ddba238d33f", "html_url": "https://github.com/rust-lang/rust/commit/fcf4bee7d3d69356a9eb702f9e0a9ddba238d33f"}], "stats": {"total": 104, "additions": 4, "deletions": 100}, "files": [{"sha": "4e77f8945dc35ca966f7f96fdb530189c4729490", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 100, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed2199ff5a69b88d43949c138042a42ecd98b5/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed2199ff5a69b88d43949c138042a42ecd98b5/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=f9ed2199ff5a69b88d43949c138042a42ecd98b5", "patch": "@@ -24,7 +24,6 @@ use syntax::symbol::sym;\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_index::vec::{IndexVec, Idx};\n-use rustc_index::bit_set::HybridBitSet;\n use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n@@ -35,10 +34,8 @@ use crate::transform::check_consts::{qualifs, Item, ConstKind, is_lang_panic_fn}\n \n /// A `MirPass` for promotion.\n ///\n-/// In this case, \"promotion\" entails the following:\n-/// - Extract promotable temps in `fn` and `const fn` into their own MIR bodies.\n-/// - Extend lifetimes in `const` and `static` by removing `Drop` and `StorageDead`.\n-/// - Emit errors if the requirements of `#[rustc_args_required_const]` are not met.\n+/// Promotion is the extraction of promotable temps into separate MIR bodies. This pass also emits\n+/// errors when promotion of `#[rustc_args_required_const]` arguments fails.\n ///\n /// After this pass is run, `promoted_fragments` will hold the MIR body corresponding to each\n /// newly created `StaticKind::Promoted`.\n@@ -63,26 +60,13 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n \n         let def_id = src.def_id();\n \n-        let item = Item::new(tcx, def_id, body);\n         let mut rpo = traversal::reverse_postorder(body);\n         let (temps, all_candidates) = collect_temps_and_candidates(tcx, body, &mut rpo);\n \n         let promotable_candidates = validate_candidates(tcx, body, def_id, &temps, &all_candidates);\n \n-        // For now, lifetime extension is done in `const` and `static`s without creating promoted\n-        // MIR fragments by removing `Drop` and `StorageDead` for each referent. However, this will\n-        // not work inside loops when they are allowed in `const`s.\n-        //\n-        // FIXME: use promoted MIR fragments everywhere?\n-        let promoted_fragments = if should_create_promoted_mir_fragments(item.const_kind) {\n-            promote_candidates(def_id, body, tcx, temps, promotable_candidates)\n-        } else {\n-            // FIXME: promote const array initializers in consts.\n-            remove_drop_and_storage_dead_on_promoted_locals(tcx, body, &promotable_candidates);\n-            IndexVec::new()\n-        };\n-\n-        self.promoted_fragments.set(promoted_fragments);\n+        let promoted = promote_candidates(def_id, body, tcx, temps, promotable_candidates);\n+        self.promoted_fragments.set(promoted);\n     }\n }\n \n@@ -1188,83 +1172,3 @@ crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n             should_promote={:?} feature_flag={:?}\", mir_def_id, should_promote, feature_flag);\n     should_promote && !feature_flag\n }\n-\n-fn should_create_promoted_mir_fragments(const_kind: Option<ConstKind>) -> bool {\n-    match const_kind {\n-        Some(ConstKind::ConstFn) | None => true,\n-        Some(ConstKind::Const) | Some(ConstKind::Static) | Some(ConstKind::StaticMut) => false,\n-    }\n-}\n-\n-/// In `const` and `static` everything without `StorageDead`\n-/// is `'static`, we don't have to create promoted MIR fragments,\n-/// just remove `Drop` and `StorageDead` on \"promoted\" locals.\n-fn remove_drop_and_storage_dead_on_promoted_locals(\n-    tcx: TyCtxt<'tcx>,\n-    body: &mut Body<'tcx>,\n-    promotable_candidates: &[Candidate],\n-) {\n-    debug!(\"run_pass: promotable_candidates={:?}\", promotable_candidates);\n-\n-    // Removing `StorageDead` will cause errors for temps declared inside a loop body. For now we\n-    // simply skip promotion if a loop exists, since loops are not yet allowed in a `const`.\n-    //\n-    // FIXME: Just create MIR fragments for `const`s instead of using this hackish approach?\n-    if body.is_cfg_cyclic() {\n-        tcx.sess.delay_span_bug(body.span, \"Control-flow cycle detected in `const`\");\n-        return;\n-    }\n-\n-    // The underlying local for promotion contexts like `&temp` and `&(temp.proj)`.\n-    let mut requires_lifetime_extension = HybridBitSet::new_empty(body.local_decls.len());\n-\n-    promotable_candidates\n-        .iter()\n-        .filter_map(|c| {\n-            match c {\n-                Candidate::Ref(loc) => Some(loc),\n-                Candidate::Repeat(_) | Candidate::Argument { .. } => None,\n-            }\n-        })\n-        .map(|&Location { block, statement_index }| {\n-            // FIXME: store the `Local` for each `Candidate` when it is created.\n-            let place = match &body[block].statements[statement_index].kind {\n-                StatementKind::Assign(box ( _, Rvalue::Ref(_, _, place))) => place,\n-                _ => bug!(\"`Candidate::Ref` without corresponding assignment\"),\n-            };\n-\n-            match place.base {\n-                PlaceBase::Local(local) => local,\n-                PlaceBase::Static(_) => bug!(\"`Candidate::Ref` for a non-local\"),\n-            }\n-        })\n-        .for_each(|local| {\n-            requires_lifetime_extension.insert(local);\n-        });\n-\n-    // Remove `Drop` terminators and `StorageDead` statements for all promotable temps that require\n-    // lifetime extension.\n-    for block in body.basic_blocks_mut() {\n-        block.statements.retain(|statement| {\n-            match statement.kind {\n-                StatementKind::StorageDead(index) => !requires_lifetime_extension.contains(index),\n-                _ => true\n-            }\n-        });\n-        let terminator = block.terminator_mut();\n-        match &terminator.kind {\n-            TerminatorKind::Drop {\n-                location,\n-                target,\n-                ..\n-            } => {\n-                if let Some(index) = location.as_local() {\n-                    if requires_lifetime_extension.contains(index) {\n-                        terminator.kind = TerminatorKind::Goto { target: *target };\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-}"}]}