{"sha": "23e08e223bb527eaef418a9fbc842471d555b3be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZTA4ZTIyM2JiNTI3ZWFlZjQxOGE5ZmJjODQyNDcxZDU1NWIzYmU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-22T19:25:39Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-22T19:28:31Z"}, "message": "Add `#![feature(const_float_classify)]` for `f64::classify` and friends", "tree": {"sha": "b12a53e7f0539cad762dfbb604c5e9c9a999d183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b12a53e7f0539cad762dfbb604c5e9c9a999d183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23e08e223bb527eaef418a9fbc842471d555b3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23e08e223bb527eaef418a9fbc842471d555b3be", "html_url": "https://github.com/rust-lang/rust/commit/23e08e223bb527eaef418a9fbc842471d555b3be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23e08e223bb527eaef418a9fbc842471d555b3be/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "html_url": "https://github.com/rust-lang/rust/commit/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "99f8cc66638f3f7ff084fa4f3815a9491ba02f4d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23e08e223bb527eaef418a9fbc842471d555b3be/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e08e223bb527eaef418a9fbc842471d555b3be/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=23e08e223bb527eaef418a9fbc842471d555b3be", "patch": "@@ -73,6 +73,7 @@\n #![feature(const_discriminant)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n+#![feature(const_float_classify)]\n #![feature(const_float_bits_conv)]\n #![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]"}, {"sha": "043f0b14f249f70ed671340d27d2999b7e336492", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23e08e223bb527eaef418a9fbc842471d555b3be/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e08e223bb527eaef418a9fbc842471d555b3be/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=23e08e223bb527eaef418a9fbc842471d555b3be", "patch": "@@ -381,16 +381,18 @@ impl f32 {\n     /// assert!(!f.is_nan());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_nan(self) -> bool {\n+    pub const fn is_nan(self) -> bool {\n         self != self\n     }\n \n     // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n     // concerns about portability, so this implementation is for\n     // private use internally.\n     #[inline]\n-    fn abs_private(self) -> f32 {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    const fn abs_private(self) -> f32 {\n         f32::from_bits(self.to_bits() & 0x7fff_ffff)\n     }\n \n@@ -410,8 +412,9 @@ impl f32 {\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_infinite(self) -> bool {\n+    pub const fn is_infinite(self) -> bool {\n         self.abs_private() == Self::INFINITY\n     }\n \n@@ -430,8 +433,9 @@ impl f32 {\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_finite(self) -> bool {\n+    pub const fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n         self.abs_private() < Self::INFINITY\n@@ -457,9 +461,10 @@ impl f32 {\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_normal(self) -> bool {\n-        self.classify() == FpCategory::Normal\n+    pub const fn is_normal(self) -> bool {\n+        matches!(self.classify(), FpCategory::Normal)\n     }\n \n     /// Returns the floating point category of the number. If only one property\n@@ -476,7 +481,8 @@ impl f32 {\n     /// assert_eq!(inf.classify(), FpCategory::Infinite);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn classify(self) -> FpCategory {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    pub const fn classify(self) -> FpCategory {\n         const EXP_MASK: u32 = 0x7f800000;\n         const MAN_MASK: u32 = 0x007fffff;\n \n@@ -501,8 +507,9 @@ impl f32 {\n     /// assert!(!g.is_sign_positive());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_positive(self) -> bool {\n+    pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n@@ -517,8 +524,9 @@ impl f32 {\n     /// assert!(g.is_sign_negative());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_negative(self) -> bool {\n+    pub const fn is_sign_negative(self) -> bool {\n         // IEEE754 says: isSignMinus(x) is true if and only if x has negative sign. isSignMinus\n         // applies to zeros and NaNs as well.\n         self.to_bits() & 0x8000_0000 != 0"}, {"sha": "24624b88d59f698e46e890702e225d7c4d7cf5fd", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23e08e223bb527eaef418a9fbc842471d555b3be/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e08e223bb527eaef418a9fbc842471d555b3be/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=23e08e223bb527eaef418a9fbc842471d555b3be", "patch": "@@ -380,16 +380,18 @@ impl f64 {\n     /// assert!(!f.is_nan());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_nan(self) -> bool {\n+    pub const fn is_nan(self) -> bool {\n         self != self\n     }\n \n     // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n     // concerns about portability, so this implementation is for\n     // private use internally.\n     #[inline]\n-    fn abs_private(self) -> f64 {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    const fn abs_private(self) -> f64 {\n         f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n     }\n \n@@ -409,8 +411,9 @@ impl f64 {\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_infinite(self) -> bool {\n+    pub const fn is_infinite(self) -> bool {\n         self.abs_private() == Self::INFINITY\n     }\n \n@@ -429,8 +432,9 @@ impl f64 {\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_finite(self) -> bool {\n+    pub const fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n         self.abs_private() < Self::INFINITY\n@@ -456,9 +460,10 @@ impl f64 {\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_normal(self) -> bool {\n-        self.classify() == FpCategory::Normal\n+    pub const fn is_normal(self) -> bool {\n+        matches!(self.classify(), FpCategory::Normal)\n     }\n \n     /// Returns the floating point category of the number. If only one property\n@@ -475,7 +480,8 @@ impl f64 {\n     /// assert_eq!(inf.classify(), FpCategory::Infinite);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn classify(self) -> FpCategory {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    pub const fn classify(self) -> FpCategory {\n         const EXP_MASK: u64 = 0x7ff0000000000000;\n         const MAN_MASK: u64 = 0x000fffffffffffff;\n \n@@ -500,8 +506,9 @@ impl f64 {\n     /// assert!(!g.is_sign_positive());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_positive(self) -> bool {\n+    pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n@@ -524,8 +531,9 @@ impl f64 {\n     /// assert!(g.is_sign_negative());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_negative(self) -> bool {\n+    pub const fn is_sign_negative(self) -> bool {\n         self.to_bits() & 0x8000_0000_0000_0000 != 0\n     }\n "}]}