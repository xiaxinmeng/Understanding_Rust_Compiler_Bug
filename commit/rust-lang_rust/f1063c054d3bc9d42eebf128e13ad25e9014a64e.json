{"sha": "f1063c054d3bc9d42eebf128e13ad25e9014a64e", "node_id": "C_kwDOAAsO6NoAKGYxMDYzYzA1NGQzYmM5ZDQyZWViZjEyOGUxM2FkMjVlOTAxNGE2NGU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2022-07-24T14:04:13Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2022-07-24T14:20:14Z"}, "message": "remove new allocations from imported_source_files", "tree": {"sha": "70f5081a2090bc83464e886e432ebb45b936d1d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f5081a2090bc83464e886e432ebb45b936d1d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1063c054d3bc9d42eebf128e13ad25e9014a64e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAmLdVSIACgkQPgar6Auq\n8ZzPlRAArovo9G2UhbUyr+k1QeeUNzeVGzS5onsRSlAt608sKZx0Ma5nNQGnaA6Q\nLmO95eFb0/eMekDauevQ8Sj/QpsFedCeDbIH9kiKZTWHarktuffdwd2vP5rfj3dO\n6quVlIyKo5R3jyzMvfRlSl3gMprn3zP2MUuSr6W8UXCWuK5jRKLYX+FwHUSjY17y\na39wbEdIAXurcv0qVByrfEF+tFU4bFfVyQdIojTpyFJmXwuSKZzDH8ssEdHT3332\ndmFZLB6PT5hN3v5wPPscfx5BZMPivmgYyNHvVN8gvRY7/zOXKsljb+lM7ZBnTW7q\nmFyCXoD92HLT+rxqNPFFohUpSSUfFM3zZ3THowVDmMIl+xlkLTXfJnD+d9A2GySh\nUycBDDOHGxgRYzD7WRMrwE5kbCvPMI7e/Z/f+fTMAmQZGw9SB1xbHoyzOnAuHo0j\nbeBjTOqqP6zQHstb07UfJ4lbLPaxiZUaB78H4mtDnGGUKtG3LXNdycVYh9uyYeqm\nM6/3MOMqp7TbDczue7RZf1JrlR35sUubtQSavZyfZcIwxMScS4CW1HwX2fpiNMBw\nPDXLPTcvW53OrL9KW3PWWa6Tll5geHpnOsxOdyMLaQHE0gjR6H+Lg3VOeOstsBwA\ndLs+BzvvJIjLLdDLx7LER+a0s5gCUsuyoIjOBWddGWVTEqbPes0=\n=5Qjz\n-----END PGP SIGNATURE-----", "payload": "tree 70f5081a2090bc83464e886e432ebb45b936d1d1\nparent b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3\nauthor Pietro Albini <pietro@pietroalbini.org> 1658671453 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1658672414 +0200\n\nremove new allocations from imported_source_files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1063c054d3bc9d42eebf128e13ad25e9014a64e", "html_url": "https://github.com/rust-lang/rust/commit/f1063c054d3bc9d42eebf128e13ad25e9014a64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1063c054d3bc9d42eebf128e13ad25e9014a64e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "html_url": "https://github.com/rust-lang/rust/commit/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "8fa703a77607579aaa9b6a51635030cd0d166e2b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f1063c054d3bc9d42eebf128e13ad25e9014a64e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1063c054d3bc9d42eebf128e13ad25e9014a64e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f1063c054d3bc9d42eebf128e13ad25e9014a64e", "patch": "@@ -41,7 +41,7 @@ use std::io;\n use std::iter::TrustedLen;\n use std::mem;\n use std::num::NonZeroUsize;\n-use std::path::PathBuf;\n+use std::path::Path;\n use tracing::debug;\n \n pub(super) use cstore_impl::provide;\n@@ -1474,30 +1474,30 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     /// Proc macro crates don't currently export spans, so this function does not have\n     /// to work for them.\n     fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {\n+        fn filter<'a>(sess: &Session, path: Option<&'a Path>) -> Option<&'a Path> {\n+            path.filter(|_| {\n+                // Only spend time on further checks if we have what to translate *to*.\n+                sess.opts.real_rust_source_base_dir.is_some()\n+                // Some tests need the translation to be always skipped.\n+                && sess.opts.unstable_opts.translate_remapped_path_to_local_path\n+            })\n+            .filter(|virtual_dir| {\n+                // Don't translate away `/rustc/$hash` if we're still remapping to it,\n+                // since that means we're still building `std`/`rustc` that need it,\n+                // and we don't want the real path to leak into codegen/debuginfo.\n+                !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n+            })\n+        }\n+\n         // Translate the virtual `/rustc/$hash` prefix back to a real directory\n         // that should hold actual sources, where possible.\n         //\n         // NOTE: if you update this, you might need to also update bootstrap's code for generating\n         // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.\n         let virtual_rust_source_base_dir = [\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n-            sess.opts.unstable_opts.simulate_remapped_rust_src_base.clone(),\n-        ]\n-        .into_iter()\n-        .filter(|_| {\n-            // Only spend time on further checks if we have what to translate *to*.\n-            sess.opts.real_rust_source_base_dir.is_some()\n-                // Some tests need the translation to be always skipped.\n-                && sess.opts.unstable_opts.translate_remapped_path_to_local_path\n-        })\n-        .flatten()\n-        .filter(|virtual_dir| {\n-            // Don't translate away `/rustc/$hash` if we're still remapping to it,\n-            // since that means we're still building `std`/`rustc` that need it,\n-            // and we don't want the real path to leak into codegen/debuginfo.\n-            !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n-        })\n-        .collect::<Vec<_>>();\n+            filter(sess, option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(Path::new)),\n+            filter(sess, sess.opts.unstable_opts.simulate_remapped_rust_src_base.as_deref()),\n+        ];\n \n         let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {\n             debug!(\n@@ -1506,7 +1506,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,\n             );\n \n-            for virtual_dir in &virtual_rust_source_base_dir {\n+            for virtual_dir in virtual_rust_source_base_dir.iter().flatten() {\n                 if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n                     if let rustc_span::FileName::Real(old_name) = name {\n                         if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } ="}]}