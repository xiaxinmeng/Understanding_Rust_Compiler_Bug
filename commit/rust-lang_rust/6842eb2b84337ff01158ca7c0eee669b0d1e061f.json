{"sha": "6842eb2b84337ff01158ca7c0eee669b0d1e061f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDJlYjJiODQzMzdmZjAxMTU4Y2E3YzBlZWU2NjliMGQxZTA2MWY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-26T22:52:01Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Rename global tls dtor to thread dtor.", "tree": {"sha": "b9f9503cbd691846da327c2d32c309acd9dbed32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f9503cbd691846da327c2d32c309acd9dbed32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6842eb2b84337ff01158ca7c0eee669b0d1e061f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6842eb2b84337ff01158ca7c0eee669b0d1e061f", "html_url": "https://github.com/rust-lang/rust/commit/6842eb2b84337ff01158ca7c0eee669b0d1e061f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6842eb2b84337ff01158ca7c0eee669b0d1e061f/comments", "author": null, "committer": null, "parents": [{"sha": "39efdf31cf4f69ac0e33f79efe83243c6cdb4d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/39efdf31cf4f69ac0e33f79efe83243c6cdb4d35", "html_url": "https://github.com/rust-lang/rust/commit/39efdf31cf4f69ac0e33f79efe83243c6cdb4d35"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "200b88f29c8f81f005cd09bfcb90aa9573c9f0c1", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6842eb2b84337ff01158ca7c0eee669b0d1e061f/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6842eb2b84337ff01158ca7c0eee669b0d1e061f/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=6842eb2b84337ff01158ca7c0eee669b0d1e061f", "patch": "@@ -83,7 +83,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let dtor = this.memory.get_fn(dtor)?.as_instance()?;\n                 let data = this.read_scalar(args[1])?.not_undef()?;\n                 let active_thread = this.get_active_thread()?;\n-                this.machine.tls.set_thread_global_dtor(active_thread, dtor, data)?;\n+                this.machine.tls.set_thread_dtor(active_thread, dtor, data)?;\n             }\n \n             // Querying system information"}, {"sha": "d3d50977320b0742e43ac9d5d041f158c7a22b50", "filename": "src/shims/tls.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6842eb2b84337ff01158ca7c0eee669b0d1e061f/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6842eb2b84337ff01158ca7c0eee669b0d1e061f/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=6842eb2b84337ff01158ca7c0eee669b0d1e061f", "patch": "@@ -33,8 +33,9 @@ pub struct TlsData<'tcx> {\n     /// pthreads-style thread-local storage.\n     keys: BTreeMap<TlsKey, TlsEntry<'tcx>>,\n \n-    /// A single global per thread dtor (that's how things work on macOS) with a data argument.\n-    global_dtors: BTreeMap<ThreadId, (ty::Instance<'tcx>, Scalar<Tag>)>,\n+    /// A single per thread destructor of the thread local storage (that's how\n+    /// things work on macOS) with a data argument.\n+    thread_dtors: BTreeMap<ThreadId, (ty::Instance<'tcx>, Scalar<Tag>)>,\n \n     /// Whether we are in the \"destruct\" phase, during which some operations are UB.\n     dtors_running: HashSet<ThreadId>,\n@@ -48,7 +49,7 @@ impl<'tcx> Default for TlsData<'tcx> {\n         TlsData {\n             next_key: 1, // start with 1 as we must not use 0 on Windows\n             keys: Default::default(),\n-            global_dtors: Default::default(),\n+            thread_dtors: Default::default(),\n             dtors_running: Default::default(),\n             last_dtor_key: Default::default(),\n         }\n@@ -117,27 +118,27 @@ impl<'tcx> TlsData<'tcx> {\n         }\n     }\n \n-    /// Set global dtor for the given thread. This function is used to implement\n-    /// `_tlv_atexit` shim on MacOS.\n+    /// Set the thread wide destructor of the thread local storage for the given\n+    /// thread. This function is used to implement `_tlv_atexit` shim on MacOS.\n     ///\n-    /// Global destructors are available only on MacOS and (potentially\n-    /// confusingly) they seem to be still per thread as can be guessed from the\n-    /// following comment in the [`_tlv_atexit`\n+    /// Thread wide dtors are available only on MacOS. There is one destructor\n+    /// per thread as can be guessed from the following comment in the\n+    /// [`_tlv_atexit`\n     /// implementation](https://github.com/opensource-apple/dyld/blob/195030646877261f0c8c7ad8b001f52d6a26f514/src/threadLocalVariables.c#L389):\n     ///\n     ///     // NOTE: this does not need locks because it only operates on current thread data\n-    pub fn set_thread_global_dtor(\n+    pub fn set_thread_dtor(\n         &mut self,\n         thread: ThreadId,\n         dtor: ty::Instance<'tcx>,\n         data: Scalar<Tag>\n     ) -> InterpResult<'tcx> {\n         if self.dtors_running.contains(&thread) {\n             // UB, according to libstd docs.\n-            throw_ub_format!(\"setting global destructor while destructors are already running\");\n+            throw_ub_format!(\"setting thread's local storage destructor while destructors are already running\");\n         }\n-        if self.global_dtors.insert(thread, (dtor, data)).is_some() {\n-            throw_unsup_format!(\"setting more than one global destructor for the same thread is not supported\");\n+        if self.thread_dtors.insert(thread, (dtor, data)).is_some() {\n+            throw_unsup_format!(\"setting more than one thread local storage destructor for the same thread is not supported\");\n         }\n         Ok(())\n     }\n@@ -223,15 +224,15 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n-    /// Schedule the MacOS global dtor to be executed.\n+    /// Schedule the MacOS thread destructor of the thread local storage to be\n+    /// executed.\n     ///\n     /// Note: It is safe to call this function also on other Unixes.\n-    fn schedule_macos_global_tls_dtors(&mut self) -> InterpResult<'tcx> {\n+    fn schedule_macos_tls_dtor(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let thread_id = this.get_active_thread()?;\n-        // The macOS global dtor runs \"before any TLS slots get freed\", so do that first.\n-        if let Some((instance, data)) = this.machine.tls.global_dtors.remove(&thread_id) {\n-            trace!(\"Running global dtor {:?} on {:?} at {:?}\", instance, data, thread_id);\n+        if let Some((instance, data)) = this.machine.tls.thread_dtors.remove(&thread_id) {\n+            trace!(\"Running macos dtor {:?} on {:?} at {:?}\", instance, data, thread_id);\n \n             let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n@@ -306,7 +307,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         } else {\n             this.machine.tls.dtors_running.insert(active_thread);\n-            this.schedule_macos_global_tls_dtors()?;\n+            // The macOS thread wide destructor runs \"before any TLS slots get\n+            // freed\", so do that first.\n+            this.schedule_macos_tls_dtor()?;\n             this.schedule_pthread_tls_dtors()?;\n         }\n "}]}