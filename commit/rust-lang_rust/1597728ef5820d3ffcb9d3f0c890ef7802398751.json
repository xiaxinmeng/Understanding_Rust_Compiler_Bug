{"sha": "1597728ef5820d3ffcb9d3f0c890ef7802398751", "node_id": "C_kwDOAAsO6NoAKDE1OTc3MjhlZjU4MjBkM2ZmY2I5ZDNmMGM4OTBlZjc4MDIzOTg3NTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-05T12:53:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-05T12:53:01Z"}, "message": "Auto merge of #88611 - m-ou-se:array-into-iter-new-deprecate, r=joshtriplett\n\nDeprecate array::IntoIter::new.", "tree": {"sha": "1a86c2a2cb56d502776e6cc3936ec683efb62ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a86c2a2cb56d502776e6cc3936ec683efb62ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1597728ef5820d3ffcb9d3f0c890ef7802398751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1597728ef5820d3ffcb9d3f0c890ef7802398751", "html_url": "https://github.com/rust-lang/rust/commit/1597728ef5820d3ffcb9d3f0c890ef7802398751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1597728ef5820d3ffcb9d3f0c890ef7802398751/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafc4582e66c478b6b297ae85b225c788106015e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafc4582e66c478b6b297ae85b225c788106015e", "html_url": "https://github.com/rust-lang/rust/commit/cafc4582e66c478b6b297ae85b225c788106015e"}, {"sha": "27d39357b7052d96e1b3903518841d14534c38cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d39357b7052d96e1b3903518841d14534c38cf", "html_url": "https://github.com/rust-lang/rust/commit/27d39357b7052d96e1b3903518841d14534c38cf"}], "stats": {"total": 168, "additions": 69, "deletions": 99}, "files": [{"sha": "d0fbc2d0f11d48db3227db024e3299f2ceb41eee", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -70,10 +70,9 @@ use smallvec::SmallVec;\n use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n-    ($this:expr; $($x:expr),*) => ({\n-        let a = [$($x),*];\n-        $this.arena.alloc_from_iter(std::array::IntoIter::new(a))\n-    });\n+    ($this:expr; $($x:expr),*) => (\n+        $this.arena.alloc_from_iter([$($x),*])\n+    );\n }\n \n mod asm;"}, {"sha": "41d82b581cd8cc07111c7f5b6a6f491a178dc801", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -42,7 +42,7 @@ fn main() {\n                 \"RUSTFLAGS\",\n                 env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n             );\n-            std::array::IntoIter::new([\"rustc\".to_string()])\n+            IntoIterator::into_iter([\"rustc\".to_string()])\n                 .chain(env::args().skip(2))\n                 .chain([\n                     \"--\".to_string(),\n@@ -56,7 +56,7 @@ fn main() {\n                 \"RUSTFLAGS\",\n                 env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n             );\n-            std::array::IntoIter::new([\"rustc\".to_string()])\n+            IntoIterator::into_iter([\"rustc\".to_string()])\n                 .chain(env::args().skip(2))\n                 .chain([\n                     \"--\".to_string(),"}, {"sha": "b7e47e4da6f944b5f1f2fe2e93e09e382dd3337d", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -466,13 +466,12 @@ impl server::TokenStream for Rustc<'_, '_> {\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {\n                 ast::ExprKind::Lit(l) => match l.token {\n                     token::Lit { kind: token::Integer | token::Float, .. } => {\n-                        Ok(std::array::IntoIter::new([\n+                        Ok(Self::TokenStream::from_iter([\n                             // FIXME: The span of the `-` token is lost when\n                             // parsing, so we cannot faithfully recover it here.\n                             tokenstream::TokenTree::token(token::BinOp(token::Minus), e.span),\n                             tokenstream::TokenTree::token(token::Literal(l.token), l.span),\n-                        ])\n-                        .collect())\n+                        ]))\n                     }\n                     _ => Err(()),\n                 },"}, {"sha": "405aaf1f4e5277f6e1acb79b0451fd4d0dbc075e", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -443,11 +443,11 @@ impl<T> PerNS<T> {\n     }\n \n     pub fn into_iter(self) -> IntoIter<T, 3> {\n-        IntoIter::new([self.value_ns, self.type_ns, self.macro_ns])\n+        [self.value_ns, self.type_ns, self.macro_ns].into_iter()\n     }\n \n     pub fn iter(&self) -> IntoIter<&T, 3> {\n-        IntoIter::new([&self.value_ns, &self.type_ns, &self.macro_ns])\n+        [&self.value_ns, &self.type_ns, &self.macro_ns].into_iter()\n     }\n }\n \n@@ -481,7 +481,7 @@ impl<T> PerNS<Option<T>> {\n \n     /// Returns an iterator over the items which are `Some`.\n     pub fn present_items(self) -> impl Iterator<Item = T> {\n-        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).flatten()\n+        [self.type_ns, self.value_ns, self.macro_ns].into_iter().flatten()\n     }\n }\n "}, {"sha": "357190178ce014a01041fcbe685bb5c470c6515e", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -4,6 +4,7 @@ pub use self::FileMatch::*;\n \n use std::env;\n use std::fs;\n+use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n use crate::search_paths::{PathKind, SearchPath, SearchPathFile};\n@@ -91,8 +92,7 @@ impl<'a> FileSearch<'a> {\n \n pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     let rustlib_path = rustc_target::target_rustlib_path(sysroot, target_triple);\n-    std::array::IntoIter::new([sysroot, Path::new(&rustlib_path), Path::new(\"lib\")])\n-        .collect::<PathBuf>()\n+    PathBuf::from_iter([sysroot, Path::new(&rustlib_path), Path::new(\"lib\")])\n }\n \n /// This function checks if sysroot is found using env::args().next(), and if it"}, {"sha": "e37d504135dbff562e003bad51dfd95bcf8cad8b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -792,12 +792,11 @@ impl Session {\n     /// Returns a list of directories where target-specific tool binaries are located.\n     pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n         let rustlib_path = rustc_target::target_rustlib_path(&self.sysroot, &config::host_triple());\n-        let p = std::array::IntoIter::new([\n+        let p = PathBuf::from_iter([\n             Path::new(&self.sysroot),\n             Path::new(&rustlib_path),\n             Path::new(\"bin\"),\n-        ])\n-        .collect::<PathBuf>();\n+        ]);\n         if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n     }\n "}, {"sha": "b18d17c1b7d1ff7a02e81d05c405acba101824c9", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -16,6 +16,7 @@\n #![feature(min_specialization)]\n #![feature(step_trait)]\n \n+use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n #[macro_use]\n@@ -47,12 +48,11 @@ const RUST_LIB_DIR: &str = \"rustlib\";\n /// `\"lib*/rustlib/x86_64-unknown-linux-gnu\"`.\n pub fn target_rustlib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     let libdir = find_libdir(sysroot);\n-    std::array::IntoIter::new([\n+    PathBuf::from_iter([\n         Path::new(libdir.as_ref()),\n         Path::new(RUST_LIB_DIR),\n         Path::new(target_triple),\n     ])\n-    .collect::<PathBuf>()\n }\n \n /// The name of the directory rustc expects libraries to be located."}, {"sha": "72d9b5015451cd3ba14e9d5096e2a97eccce7a7a", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -42,6 +42,7 @@ use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeMap;\n use std::convert::TryFrom;\n+use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n@@ -2173,12 +2174,11 @@ impl Target {\n                 // Additionally look in the sysroot under `lib/rustlib/<triple>/target.json`\n                 // as a fallback.\n                 let rustlib_path = crate::target_rustlib_path(&sysroot, &target_triple);\n-                let p = std::array::IntoIter::new([\n+                let p = PathBuf::from_iter([\n                     Path::new(sysroot),\n                     Path::new(&rustlib_path),\n                     Path::new(\"target.json\"),\n-                ])\n-                .collect::<PathBuf>();\n+                ]);\n                 if p.is_file() {\n                     return load_file(&p);\n                 }"}, {"sha": "2ad8dc82a84dceb5e5cef88b4d621e67ce2c698d", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -25,7 +25,6 @@ use rustc_span::symbol::Symbol;\n use rustc_span::{MultiSpan, Span};\n use smallvec::SmallVec;\n \n-use std::array;\n use std::iter;\n use std::ops::ControlFlow;\n \n@@ -692,11 +691,8 @@ fn receiver_is_dispatchable<'tcx>(\n                 .to_predicate(tcx)\n         };\n \n-        let caller_bounds: Vec<Predicate<'tcx>> = param_env\n-            .caller_bounds()\n-            .iter()\n-            .chain(array::IntoIter::new([unsize_predicate, trait_predicate]))\n-            .collect();\n+        let caller_bounds: Vec<Predicate<'tcx>> =\n+            param_env.caller_bounds().iter().chain([unsize_predicate, trait_predicate]).collect();\n \n         ty::ParamEnv::new(tcx.intern_predicates(&caller_bounds), param_env.reveal())\n     };"}, {"sha": "08261fedd4a254460d4dae2035cbd602e9f1d878", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -35,7 +35,6 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n use smallvec::SmallVec;\n-use std::array;\n use std::collections::BTreeSet;\n use std::slice;\n \n@@ -1635,7 +1634,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n             let is_equality = is_equality();\n-            let bounds = array::IntoIter::new([bound, bound2]).chain(matching_candidates);\n+            let bounds = IntoIterator::into_iter([bound, bound2]).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n                 struct_span_err!("}, {"sha": "1fc88829c779cdba1182cc46c85862c68a27d364", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1822,7 +1822,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Inherent impl: take implied bounds from the `self` type.\n                 let self_ty = self.tcx.type_of(impl_def_id);\n                 let self_ty = self.normalize_associated_types_in(span, self_ty);\n-                std::array::IntoIter::new([self_ty]).collect()\n+                FxHashSet::from_iter([self_ty])\n             }\n         }\n     }"}, {"sha": "76fbfa9fc59f76a1d3764d2f03d86943c0eabffc", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1500,7 +1500,7 @@ impl<T: Ord, const N: usize> From<[T; N]> for BinaryHeap<T> {\n     /// }\n     /// ```\n     fn from(arr: [T; N]) -> Self {\n-        core::array::IntoIter::new(arr).collect()\n+        Self::from_iter(arr)\n     }\n }\n "}, {"sha": "3bd5b8ddf08ca2149def1b0674b7422800369d5f", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1305,11 +1305,11 @@ impl<K, V> BTreeMap<K, V> {\n     pub(crate) fn bulk_build_from_sorted_iter<I>(iter: I) -> Self\n     where\n         K: Ord,\n-        I: Iterator<Item = (K, V)>,\n+        I: IntoIterator<Item = (K, V)>,\n     {\n         let mut root = Root::new();\n         let mut length = 0;\n-        root.bulk_push(DedupSortedIter::new(iter), &mut length);\n+        root.bulk_push(DedupSortedIter::new(iter.into_iter()), &mut length);\n         BTreeMap { root: Some(root), length }\n     }\n }\n@@ -1944,7 +1944,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n \n         // use stable sort to preserve the insertion order.\n         inputs.sort_by(|a, b| a.0.cmp(&b.0));\n-        BTreeMap::bulk_build_from_sorted_iter(inputs.into_iter())\n+        BTreeMap::bulk_build_from_sorted_iter(inputs)\n     }\n }\n \n@@ -2061,7 +2061,7 @@ impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n \n         // use stable sort to preserve the insertion order.\n         arr.sort_by(|a, b| a.0.cmp(&b.0));\n-        BTreeMap::bulk_build_from_sorted_iter(core::array::IntoIter::new(arr))\n+        BTreeMap::bulk_build_from_sorted_iter(arr)\n     }\n }\n "}, {"sha": "4a83cdb917c85c9ac8bc71e6919874b0a07c64bc", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1106,7 +1106,7 @@ impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n \n         // use stable sort to preserve the insertion order.\n         arr.sort();\n-        let iter = core::array::IntoIter::new(arr).map(|k| (k, ()));\n+        let iter = IntoIterator::into_iter(arr).map(|k| (k, ()));\n         let map = BTreeMap::bulk_build_from_sorted_iter(iter);\n         BTreeSet { map }\n     }"}, {"sha": "c8aad4877e9822dfe73d776d3246d58bbead429b", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1961,7 +1961,7 @@ impl<T, const N: usize> From<[T; N]> for LinkedList<T> {\n     /// assert_eq!(list1, list2);\n     /// ```\n     fn from(arr: [T; N]) -> Self {\n-        core::array::IntoIter::new(arr).collect()\n+        Self::from_iter(arr)\n     }\n }\n "}, {"sha": "fe7b3576e2f5fdd2b770e93e53a21df7bd18d167", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -34,30 +34,23 @@ pub struct IntoIter<T, const N: usize> {\n     alive: Range<usize>,\n }\n \n-impl<T, const N: usize> IntoIter<T, N> {\n-    /// Creates a new iterator over the given `array`.\n-    ///\n-    /// *Note*: this method might be deprecated in the future,\n-    /// since [`IntoIterator`] is now implemented for arrays.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::array;\n+// Note: the `#[rustc_skip_array_during_method_dispatch]` on `trait IntoIterator`\n+// hides this implementation from explicit `.into_iter()` calls on editions < 2021,\n+// so those calls will still resolve to the slice implementation, by reference.\n+#[stable(feature = \"array_into_iter_impl\", since = \"1.53.0\")]\n+impl<T, const N: usize> IntoIterator for [T; N] {\n+    type Item = T;\n+    type IntoIter = IntoIter<T, N>;\n+\n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the array (from start to end). The array cannot be used after calling\n+    /// this unless `T` implements `Copy`, so the whole array is copied.\n     ///\n-    /// for value in array::IntoIter::new([1, 2, 3, 4, 5]) {\n-    ///     // The type of `value` is an `i32` here, instead of `&i32`\n-    ///     let _: i32 = value;\n-    /// }\n+    /// Arrays have special behavior when calling `.into_iter()` prior to the\n+    /// 2021 edition -- see the [array] Editions section for more information.\n     ///\n-    /// // Since Rust 1.53, arrays implement IntoIterator directly:\n-    /// for value in [1, 2, 3, 4, 5] {\n-    ///     // The type of `value` is an `i32` here, instead of `&i32`\n-    ///     let _: i32 = value;\n-    /// }\n-    /// ```\n-    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n-    pub fn new(array: [T; N]) -> Self {\n+    /// [array]: prim@array\n+    fn into_iter(self) -> Self::IntoIter {\n         // SAFETY: The transmute here is actually safe. The docs of `MaybeUninit`\n         // promise:\n         //\n@@ -76,11 +69,20 @@ impl<T, const N: usize> IntoIter<T, N> {\n         // Until then, we can use `mem::transmute_copy` to create a bitwise copy\n         // as a different type, then forget `array` so that it is not dropped.\n         unsafe {\n-            let iter = Self { data: mem::transmute_copy(&array), alive: 0..N };\n-            mem::forget(array);\n+            let iter = IntoIter { data: mem::transmute_copy(&self), alive: 0..N };\n+            mem::forget(self);\n             iter\n         }\n     }\n+}\n+\n+impl<T, const N: usize> IntoIter<T, N> {\n+    /// Creates a new iterator over the given `array`.\n+    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n+    #[rustc_deprecated(since = \"1.59.0\", reason = \"use `IntoIterator::into_iter` instead\")]\n+    pub fn new(array: [T; N]) -> Self {\n+        IntoIterator::into_iter(array)\n+    }\n \n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet."}, {"sha": "23fd1453e54d1bedfa3d4907b10975f062da371e", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -243,27 +243,6 @@ impl<T: fmt::Debug, const N: usize> fmt::Debug for [T; N] {\n     }\n }\n \n-// Note: the `#[rustc_skip_array_during_method_dispatch]` on `trait IntoIterator`\n-// hides this implementation from explicit `.into_iter()` calls on editions < 2021,\n-// so those calls will still resolve to the slice implementation, by reference.\n-#[stable(feature = \"array_into_iter_impl\", since = \"1.53.0\")]\n-impl<T, const N: usize> IntoIterator for [T; N] {\n-    type Item = T;\n-    type IntoIter = IntoIter<T, N>;\n-\n-    /// Creates a consuming iterator, that is, one that moves each value out of\n-    /// the array (from start to end). The array cannot be used after calling\n-    /// this unless `T` implements `Copy`, so the whole array is copied.\n-    ///\n-    /// Arrays have special behavior when calling `.into_iter()` prior to the\n-    /// 2021 edition -- see the [array] Editions section for more information.\n-    ///\n-    /// [array]: prim@array\n-    fn into_iter(self) -> Self::IntoIter {\n-        IntoIter::new(self)\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {\n     type Item = &'a T;"}, {"sha": "8fcd8cdeb1042db43170e0d58a80622f05088c57", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -606,8 +606,7 @@ mod prim_pointer {}\n ///     println!(\"array[{}] = {}\", i, x);\n /// }\n ///\n-/// // You can explicitly iterate an array by value using\n-/// // `IntoIterator::into_iter` or `std::array::IntoIter::new`:\n+/// // You can explicitly iterate an array by value using `IntoIterator::into_iter`\n /// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n ///     println!(\"array[{}] = {}\", i, x);"}, {"sha": "f8ab8c9d4447b79d8bd82465ea4e2ce9800b0290", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1,5 +1,4 @@\n use super::*;\n-use core::array;\n use core::iter::*;\n \n #[test]\n@@ -134,7 +133,7 @@ fn test_double_ended_flatten() {\n #[test]\n fn test_trusted_len_flatten() {\n     fn assert_trusted_len<T: TrustedLen>(_: &T) {}\n-    let mut iter = array::IntoIter::new([[0; 3]; 4]).flatten();\n+    let mut iter = IntoIterator::into_iter([[0; 3]; 4]).flatten();\n     assert_trusted_len(&iter);\n \n     assert_eq!(iter.size_hint(), (12, Some(12)));\n@@ -143,21 +142,21 @@ fn test_trusted_len_flatten() {\n     iter.next_back();\n     assert_eq!(iter.size_hint(), (10, Some(10)));\n \n-    let iter = array::IntoIter::new([[(); usize::MAX]; 1]).flatten();\n+    let iter = IntoIterator::into_iter([[(); usize::MAX]; 1]).flatten();\n     assert_eq!(iter.size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let iter = array::IntoIter::new([[(); usize::MAX]; 2]).flatten();\n+    let iter = IntoIterator::into_iter([[(); usize::MAX]; 2]).flatten();\n     assert_eq!(iter.size_hint(), (usize::MAX, None));\n \n     let mut a = [(); 10];\n     let mut b = [(); 10];\n \n-    let iter = array::IntoIter::new([&mut a, &mut b]).flatten();\n+    let iter = IntoIterator::into_iter([&mut a, &mut b]).flatten();\n     assert_trusted_len(&iter);\n     assert_eq!(iter.size_hint(), (20, Some(20)));\n     core::mem::drop(iter);\n \n-    let iter = array::IntoIter::new([&a, &b]).flatten();\n+    let iter = IntoIterator::into_iter([&a, &b]).flatten();\n     assert_trusted_len(&iter);\n     assert_eq!(iter.size_hint(), (20, Some(20)));\n "}, {"sha": "ce34e235f5d6a3ba3ea0cc247c48372c13ce586e", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1186,7 +1186,7 @@ where\n     /// assert_eq!(map1, map2);\n     /// ```\n     fn from(arr: [(K, V); N]) -> Self {\n-        crate::array::IntoIter::new(arr).collect()\n+        Self::from_iter(arr)\n     }\n }\n "}, {"sha": "3f264ee6732f7d1de80dbb9e026c41ff41164646", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1022,7 +1022,7 @@ where\n     /// assert_eq!(set1, set2);\n     /// ```\n     fn from(arr: [T; N]) -> Self {\n-        crate::array::IntoIter::new(arr).collect()\n+        Self::from_iter(arr)\n     }\n }\n "}, {"sha": "8fcd8cdeb1042db43170e0d58a80622f05088c57", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -606,8 +606,7 @@ mod prim_pointer {}\n ///     println!(\"array[{}] = {}\", i, x);\n /// }\n ///\n-/// // You can explicitly iterate an array by value using\n-/// // `IntoIterator::into_iter` or `std::array::IntoIter::new`:\n+/// // You can explicitly iterate an array by value using `IntoIterator::into_iter`\n /// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n ///     println!(\"array[{}] = {}\", i, x);"}, {"sha": "82462f9758e5c08853d2f59aa434888db863089a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -1043,7 +1043,7 @@ impl Build {\n             options[1] = Some(format!(\"-Clink-arg=-Wl,{}\", threads));\n         }\n \n-        std::array::IntoIter::new(options).flatten()\n+        IntoIterator::into_iter(options).flatten()\n     }\n \n     /// Returns if this target should statically link the C runtime, if specified"}, {"sha": "3b7811748edfac37f58939cebc8c78a79a379705", "filename": "src/test/ui/proc-macro/auxiliary/custom-quote.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fcustom-quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fcustom-quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fcustom-quote.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -6,6 +6,7 @@\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;\n+use std::iter::FromIterator;\n use std::str::FromStr;\n use proc_macro::*;\n \n@@ -23,7 +24,7 @@ pub fn custom_quote(input: TokenStream) -> TokenStream {\n             let set_span_method = TokenStream::from_str(\"ident.set_span\").unwrap();\n             let set_span_arg = TokenStream::from(TokenTree::Group(Group::new(Delimiter::Parenthesis, quoted_span)));\n             let suffix = TokenStream::from_str(\";proc_macro::TokenStream::from(proc_macro::TokenTree::Ident(ident))\").unwrap();\n-            let full_stream: TokenStream = std::array::IntoIter::new([prefix, set_span_method, set_span_arg, suffix]).collect();\n+            let full_stream = TokenStream::from_iter([prefix, set_span_method, set_span_arg, suffix]);\n             full_stream\n         }\n         _ => unreachable!()"}, {"sha": "48e459e016592b49b1a467b87f365f7ca4628d95", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1597728ef5820d3ffcb9d3f0c890ef7802398751/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597728ef5820d3ffcb9d3f0c890ef7802398751/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=1597728ef5820d3ffcb9d3f0c890ef7802398751", "patch": "@@ -13,7 +13,6 @@ use clippy_utils::{\n     remove_blocks, strip_pat_refs,\n };\n use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n-use core::array;\n use core::iter::{once, ExactSizeIterator};\n use if_chain::if_chain;\n use rustc_ast::ast::{Attribute, LitKind};\n@@ -1306,7 +1305,7 @@ fn check_match_like_matches<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         return find_matches_sugg(\n             cx,\n             let_expr,\n-            array::IntoIter::new([(&[][..], Some(let_pat), if_then, None), (&[][..], None, if_else, None)]),\n+            IntoIterator::into_iter([(&[][..], Some(let_pat), if_then, None), (&[][..], None, if_else, None)]),\n             expr,\n             true,\n         );"}]}