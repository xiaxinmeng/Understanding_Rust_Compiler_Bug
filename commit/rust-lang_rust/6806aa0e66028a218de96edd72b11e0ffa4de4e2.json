{"sha": "6806aa0e66028a218de96edd72b11e0ffa4de4e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDZhYTBlNjYwMjhhMjE4ZGU5NmVkZDcyYjExZTBmZmE0ZGU0ZTI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T01:01:11Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T17:42:40Z"}, "message": "pingpong protocol parses, although I should probably rewrite this to use Paul's Early parser stuff.", "tree": {"sha": "f66c655c1e4c8906e13ea04bc63b41fdcc540bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f66c655c1e4c8906e13ea04bc63b41fdcc540bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6806aa0e66028a218de96edd72b11e0ffa4de4e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6806aa0e66028a218de96edd72b11e0ffa4de4e2", "html_url": "https://github.com/rust-lang/rust/commit/6806aa0e66028a218de96edd72b11e0ffa4de4e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6806aa0e66028a218de96edd72b11e0ffa4de4e2/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84434bc0844545e9c3fb392126f3e80913028b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/84434bc0844545e9c3fb392126f3e80913028b9e", "html_url": "https://github.com/rust-lang/rust/commit/84434bc0844545e9c3fb392126f3e80913028b9e"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "02c32a1bf0db804b9dfdb051705db7d3a9611694", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=6806aa0e66028a218de96edd72b11e0ffa4de4e2", "patch": "@@ -35,4 +35,11 @@ impl extensions<A:copy> for IMPL_T<A> {\n \n     fn min() -> A { iter::min(self) }\n     fn max() -> A { iter::max(self) }\n+\n+    fn find(p: fn(A) -> bool) -> option<A> {\n+        for self.each |i| {\n+            if p(i) { ret some(i) }\n+        }\n+        ret none;\n+    }\n }"}, {"sha": "ce9b0b0a2cfacc333fb872ede675a71f8e744742", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=6806aa0e66028a218de96edd72b11e0ffa4de4e2", "patch": "@@ -1,17 +1,27 @@\n \n import codemap::span;\n import ext::base::ext_ctxt;\n+import ast::tt_delim;\n+import parse::lexer::{new_tt_reader, reader, tt_reader_as_reader};\n+import parse::parser::{parser, SOURCE_FILE};\n+import parse::common::parser_common;\n+\n+import pipes::parse_proto::proto_parser;\n \n import pipes::pipec::*;\n \n-fn expand_proto(cx: ext_ctxt, span: span, id: ast::ident, tt: ast::token_tree)\n+fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident, tt: ast::token_tree)\n     -> @ast::item\n {\n-    let proto = protocol(id);\n-    let ping = proto.add_state(@\"ping\", send);\n-    let pong = proto.add_state(@\"pong\", recv);\n+    let sess = cx.parse_sess();\n+    let cfg = cx.cfg();\n+    let body_core = alt tt { tt_delim(tts) { tts } _ {fail}};\n+    let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,\n+                               cx.parse_sess().interner, body_core);\n+    let rdr = tt_rdr as reader;\n+    let rust_parser = parser(sess, cfg, rdr.dup(), SOURCE_FILE);\n+\n+    let proto = rust_parser.parse_proto(id);\n \n-    ping.add_message(@\"ping\", []/~, pong, ~[]);\n-    pong.add_message(@\"pong\", []/~, ping, ~[]);\n     proto.compile(cx)\n }\n\\ No newline at end of file"}, {"sha": "e9dfffcd543fa39ace83f09df64b8a9ab2988931", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=6806aa0e66028a218de96edd72b11e0ffa4de4e2", "patch": "@@ -12,7 +12,7 @@ import print::pprust;\n import pprust::{item_to_str, ty_to_str};\n import ext::base::{mk_ctxt, ext_ctxt};\n import parse;\n-import parse::{parse_item_from_source_str};\n+import parse::*;\n \n import ast_builder::ast_builder;\n import ast_builder::methods;\n@@ -42,7 +42,7 @@ impl methods for direction {\n \n enum message {\n     // name, data, current state, next state, next tys\n-    message(ident, ~[@ast::ty], state, state, ~[@ast::ty])\n+    message(ident, ~[@ast::ty], state, ident, ~[@ast::ty])\n }\n \n impl methods for message {\n@@ -89,11 +89,10 @@ impl methods for message {\n     fn gen_send(cx: ext_ctxt) -> @ast::item {\n         alt self {\n           message(id, tys, this, next, next_tys) {\n+            let next = this.proto.get_state(next);\n+            assert next_tys.len() == next.ty_params.len();\n             let arg_names = tys.mapi(|i, _ty| @(\"x_\" + i.to_str()));\n \n-            let args = (arg_names, tys).map(|n, t|\n-                                            *n + \": \" + t.to_source());\n-\n             let args_ast = (arg_names, tys).map(\n                 |n, t| cx.arg_mode(n, t, ast::by_copy)\n             );\n@@ -146,9 +145,8 @@ enum state {\n }\n \n impl methods for state {\n-    fn add_message(name: ident, +data: ~[@ast::ty], next: state,\n+    fn add_message(name: ident, +data: ~[@ast::ty], next: ident,\n                    +next_tys: ~[@ast::ty]) {\n-        assert next_tys.len() == next.ty_params.len();\n         self.messages.push(message(name, data, self, next, next_tys));\n     }\n \n@@ -179,6 +177,7 @@ impl methods for state {\n             let message(_, tys, this, next, next_tys) = m;\n \n             let name = m.name();\n+            let next = this.proto.get_state(next);\n             let next_name = next.data_name();\n \n             let dir = alt this.dir {\n@@ -239,6 +238,11 @@ impl methods for protocol {\n         self.add_state_poly(name, dir, ~[])\n     }\n \n+    /// Get or create a state.\n+    fn get_state(name: ident) -> state {\n+        self.states.find(|i| i.name == name).get()\n+    }\n+\n     fn add_state_poly(name: ident, dir: direction,\n                       +ty_params: ~[ast::ty_param]) -> state {\n         let messages = dvec();\n@@ -291,7 +295,8 @@ impl methods for protocol {\n         let mut client_states = ~[];\n         let mut server_states = ~[];\n \n-        for self.states.each |s| {\n+        // :(\n+        for (copy self.states).each |s| {\n             items += s.to_type_decls(cx);\n \n             client_states += s.to_endpoint_decls(cx, send);"}, {"sha": "7c453cc96e45302772173df148a978aea3f1e5b9", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6806aa0e66028a218de96edd72b11e0ffa4de4e2/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=6806aa0e66028a218de96edd72b11e0ffa4de4e2", "patch": "@@ -80,7 +80,8 @@ mod ext {\n     mod source_util;\n \n     mod pipes {\n-        mod pipec;\n         mod ast_builder;\n+        mod parse_proto;\n+        mod pipec;\n     }\n }"}]}