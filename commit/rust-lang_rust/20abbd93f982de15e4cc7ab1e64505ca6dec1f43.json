{"sha": "20abbd93f982de15e4cc7ab1e64505ca6dec1f43", "node_id": "C_kwDOAAsO6NoAKDIwYWJiZDkzZjk4MmRlMTVlNGNjN2FiMWU2NDUwNWNhNmRlYzFmNDM", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-09-18T04:43:39Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-09-29T03:46:43Z"}, "message": "Add test module for `update_lints`", "tree": {"sha": "e76519ab6580c91863b11e6a6b0f8d4337d06629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76519ab6580c91863b11e6a6b0f8d4337d06629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20abbd93f982de15e4cc7ab1e64505ca6dec1f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20abbd93f982de15e4cc7ab1e64505ca6dec1f43", "html_url": "https://github.com/rust-lang/rust/commit/20abbd93f982de15e4cc7ab1e64505ca6dec1f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20abbd93f982de15e4cc7ab1e64505ca6dec1f43/comments", "author": null, "committer": null, "parents": [{"sha": "3f804ca6d3de8b9c42f55d33c0024f5437ecd6fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f804ca6d3de8b9c42f55d33c0024f5437ecd6fa", "html_url": "https://github.com/rust-lang/rust/commit/3f804ca6d3de8b9c42f55d33c0024f5437ecd6fa"}], "stats": {"total": 316, "additions": 161, "deletions": 155}, "files": [{"sha": "edcdc04b68d51fdb178e443531fb8745e1d31f5c", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 161, "deletions": 155, "changes": 316, "blob_url": "https://github.com/rust-lang/rust/blob/20abbd93f982de15e4cc7ab1e64505ca6dec1f43/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20abbd93f982de15e4cc7ab1e64505ca6dec1f43/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=20abbd93f982de15e4cc7ab1e64505ca6dec1f43", "patch": "@@ -526,170 +526,176 @@ declare_deprecated_lint! {\n     assert_eq!(expected, result);\n }\n \n-#[test]\n-fn test_replace_region() {\n-    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-    let expected = FileChange {\n-        changed: true,\n-        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n-        vec![\"hello world\".to_string()]\n-    });\n-    assert_eq!(expected, result);\n-}\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_replace_region() {\n+        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+        let expected = FileChange {\n+            changed: true,\n+            new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n+            vec![\"hello world\".to_string()]\n+        });\n+        assert_eq!(expected, result);\n+    }\n \n-#[test]\n-fn test_replace_region_with_start() {\n-    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-    let expected = FileChange {\n-        changed: true,\n-        new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n-        vec![\"hello world\".to_string()]\n-    });\n-    assert_eq!(expected, result);\n-}\n+    #[test]\n+    fn test_replace_region_with_start() {\n+        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+        let expected = FileChange {\n+            changed: true,\n+            new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n+            vec![\"hello world\".to_string()]\n+        });\n+        assert_eq!(expected, result);\n+    }\n \n-#[test]\n-fn test_replace_region_no_changes() {\n-    let text = \"123\\n456\\n789\";\n-    let expected = FileChange {\n-        changed: false,\n-        new_lines: \"123\\n456\\n789\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n-    assert_eq!(expected, result);\n-}\n+    #[test]\n+    fn test_replace_region_no_changes() {\n+        let text = \"123\\n456\\n789\";\n+        let expected = FileChange {\n+            changed: false,\n+            new_lines: \"123\\n456\\n789\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n+        assert_eq!(expected, result);\n+    }\n \n-#[test]\n-fn test_usable_lints() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![Lint::new(\n-        \"should_assert_eq2\",\n-        \"Not Deprecated\",\n-        \"abc\",\n-        None,\n-        \"module_name\",\n-    )];\n-    assert_eq!(expected, Lint::usable_lints(&lints));\n-}\n+    #[test]\n+    fn test_usable_lints() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = vec![Lint::new(\n+            \"should_assert_eq2\",\n+            \"Not Deprecated\",\n+            \"abc\",\n+            None,\n+            \"module_name\",\n+        )];\n+        assert_eq!(expected, Lint::usable_lints(&lints));\n+    }\n \n-#[test]\n-fn test_by_lint_group() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-    ];\n-    let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n-    expected.insert(\n-        \"group1\".to_string(),\n-        vec![\n+    #[test]\n+    fn test_by_lint_group() {\n+        let lints = vec![\n             Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n             Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-        ],\n-    );\n-    expected.insert(\n-        \"group2\".to_string(),\n-        vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n-    );\n-    assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n-}\n-\n-#[test]\n-fn test_gen_changelog_lint_list() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n-        format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n-    ];\n-    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n-}\n-\n-#[test]\n-fn test_gen_deprecated() {\n-    let lints = vec![\n-        Lint::new(\n-            \"should_assert_eq\",\n-            \"group1\",\n-            \"abc\",\n-            Some(\"has been superseded by should_assert_eq2\"),\n-            \"module_name\",\n-        ),\n-        Lint::new(\n-            \"another_deprecated\",\n-            \"group2\",\n-            \"abc\",\n-            Some(\"will be removed\"),\n-            \"module_name\",\n-        ),\n-    ];\n+        ];\n+        let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n+        expected.insert(\n+            \"group1\".to_string(),\n+            vec![\n+                Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+                Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+            ],\n+        );\n+        expected.insert(\n+            \"group2\".to_string(),\n+            vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n+        );\n+        assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n+    }\n \n-    let expected = GENERATED_FILE_COMMENT.to_string()\n-        + &[\n-            \"{\",\n-            \"    store.register_removed(\",\n-            \"        \\\"clippy::should_assert_eq\\\",\",\n-            \"        \\\"has been superseded by should_assert_eq2\\\",\",\n-            \"    );\",\n-            \"    store.register_removed(\",\n-            \"        \\\"clippy::another_deprecated\\\",\",\n-            \"        \\\"will be removed\\\",\",\n-            \"    );\",\n-            \"}\",\n-        ]\n-        .join(\"\\n\")\n-        + \"\\n\";\n-\n-    assert_eq!(expected, gen_deprecated(lints.iter()));\n-}\n+    #[test]\n+    fn test_gen_changelog_lint_list() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = vec![\n+            format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n+            format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n+        ];\n+        assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n+    }\n \n-#[test]\n-#[should_panic]\n-fn test_gen_deprecated_fail() {\n-    let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n-    let _deprecated_lints = gen_deprecated(lints.iter());\n-}\n+    #[test]\n+    fn test_gen_deprecated() {\n+        let lints = vec![\n+            Lint::new(\n+                \"should_assert_eq\",\n+                \"group1\",\n+                \"abc\",\n+                Some(\"has been superseded by should_assert_eq2\"),\n+                \"module_name\",\n+            ),\n+            Lint::new(\n+                \"another_deprecated\",\n+                \"group2\",\n+                \"abc\",\n+                Some(\"will be removed\"),\n+                \"module_name\",\n+            ),\n+        ];\n+\n+        let expected = GENERATED_FILE_COMMENT.to_string()\n+            + &[\n+                \"{\",\n+                \"    store.register_removed(\",\n+                \"        \\\"clippy::should_assert_eq\\\",\",\n+                \"        \\\"has been superseded by should_assert_eq2\\\",\",\n+                \"    );\",\n+                \"    store.register_removed(\",\n+                \"        \\\"clippy::another_deprecated\\\",\",\n+                \"        \\\"will be removed\\\",\",\n+                \"    );\",\n+                \"}\",\n+            ]\n+            .join(\"\\n\")\n+            + \"\\n\";\n+\n+        assert_eq!(expected, gen_deprecated(lints.iter()));\n+    }\n \n-#[test]\n-fn test_gen_modules_list() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-    ];\n-    let expected = GENERATED_FILE_COMMENT.to_string() + &[\"mod another_module;\", \"mod module_name;\"].join(\"\\n\") + \"\\n\";\n-    assert_eq!(expected, gen_modules_list(lints.iter()));\n-}\n+    #[test]\n+    #[should_panic]\n+    fn test_gen_deprecated_fail() {\n+        let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n+        let _deprecated_lints = gen_deprecated(lints.iter());\n+    }\n \n-#[test]\n-fn test_gen_lint_group_list() {\n-    let lints = vec![\n-        Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = GENERATED_FILE_COMMENT.to_string()\n-        + &[\n-            \"store.register_group(true, \\\"clippy::group1\\\", Some(\\\"clippy_group1\\\"), vec![\",\n-            \"    LintId::of(module_name::ABC),\",\n-            \"    LintId::of(module_name::INTERNAL),\",\n-            \"    LintId::of(module_name::SHOULD_ASSERT_EQ),\",\n-            \"])\",\n-        ]\n-        .join(\"\\n\")\n-        + \"\\n\";\n-\n-    let result = gen_lint_group_list(\"group1\", lints.iter());\n+    #[test]\n+    fn test_gen_modules_list() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n+        ];\n+        let expected =\n+            GENERATED_FILE_COMMENT.to_string() + &[\"mod another_module;\", \"mod module_name;\"].join(\"\\n\") + \"\\n\";\n+        assert_eq!(expected, gen_modules_list(lints.iter()));\n+    }\n \n-    assert_eq!(expected, result);\n+    #[test]\n+    fn test_gen_lint_group_list() {\n+        let lints = vec![\n+            Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = GENERATED_FILE_COMMENT.to_string()\n+            + &[\n+                \"store.register_group(true, \\\"clippy::group1\\\", Some(\\\"clippy_group1\\\"), vec![\",\n+                \"    LintId::of(module_name::ABC),\",\n+                \"    LintId::of(module_name::INTERNAL),\",\n+                \"    LintId::of(module_name::SHOULD_ASSERT_EQ),\",\n+                \"])\",\n+            ]\n+            .join(\"\\n\")\n+            + \"\\n\";\n+\n+        let result = gen_lint_group_list(\"group1\", lints.iter());\n+\n+        assert_eq!(expected, result);\n+    }\n }"}]}