{"sha": "63573d47aaf841abb803af26dadc95e86f1fe572", "node_id": "C_kwDOAAsO6NoAKDYzNTczZDQ3YWFmODQxYWJiODAzYWYyNmRhZGM5NWU4NmYxZmU1NzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-14T12:36:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-14T12:36:17Z"}, "message": "Auto merge of #11971 - jonas-schievink:on-type-fmt-assignments, r=jonas-schievink\n\nfeat: Add trailing `;` when typing `=` in assignment\n\n![Peek 2022-04-12 19-41](https://user-images.githubusercontent.com/1786438/163022079-1ed114ef-7c75-490f-a8ed-731a13f0b44d.gif)\n\nThis does have a false positive to keep in mind, it will add a trailing `;` in the following snippet too, which is probably not desired:\n\n```rust\nfn is_zero(i: i32) -> bool {\n    i $0 0\n}\n```\n\nHowever, that function is unlikely to be written from the \"inside out\" like that, so it might be acceptable. Typically `=` is only inserted last when the author realizes that an existing expression should be assigned to some variable.", "tree": {"sha": "929da9ada43127d5062977b3313bf061d65f0212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/929da9ada43127d5062977b3313bf061d65f0212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63573d47aaf841abb803af26dadc95e86f1fe572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63573d47aaf841abb803af26dadc95e86f1fe572", "html_url": "https://github.com/rust-lang/rust/commit/63573d47aaf841abb803af26dadc95e86f1fe572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63573d47aaf841abb803af26dadc95e86f1fe572/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b15638b4dc0f3ef9c528e2087109ead8af431b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b15638b4dc0f3ef9c528e2087109ead8af431b1", "html_url": "https://github.com/rust-lang/rust/commit/1b15638b4dc0f3ef9c528e2087109ead8af431b1"}, {"sha": "f96fd401049f11842b8e934092024566fcabbb8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96fd401049f11842b8e934092024566fcabbb8e", "html_url": "https://github.com/rust-lang/rust/commit/f96fd401049f11842b8e934092024566fcabbb8e"}], "stats": {"total": 192, "additions": 183, "deletions": 9}, "files": [{"sha": "a75e6be8b8abf117fcc3a9da95a548177a847efd", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 183, "deletions": 9, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/63573d47aaf841abb803af26dadc95e86f1fe572/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63573d47aaf841abb803af26dadc95e86f1fe572/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=63573d47aaf841abb803af26dadc95e86f1fe572", "patch": "@@ -39,8 +39,11 @@ pub(crate) const TRIGGER_CHARS: &str = \".=>{\";\n // Some features trigger on typing certain characters:\n //\n // - typing `let =` tries to smartly add `;` if `=` is followed by an existing expression\n+// - typing `=` between two expressions adds `;` when in statement position\n+// - typing `=` to turn an assignment into an equality comparison removes `;` when in expression position\n // - typing `.` in a chain method call auto-indents\n // - typing `{` in front of an expression inserts a closing `}` after the expression\n+// - typing `{` in a use item adds a closing `}` in the right place\n //\n // VS Code::\n //\n@@ -166,23 +169,83 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     if !stdx::always!(file.syntax().text().char_at(offset) == Some('=')) {\n         return None;\n     }\n-    let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n-    if let_stmt.semicolon_token().is_some() {\n-        return None;\n+\n+    if let Some(edit) = let_stmt(file, offset) {\n+        return Some(edit);\n+    }\n+    if let Some(edit) = assign_expr(file, offset) {\n+        return Some(edit);\n+    }\n+    if let Some(edit) = assign_to_eq(file, offset) {\n+        return Some(edit);\n     }\n-    if let Some(expr) = let_stmt.initializer() {\n+\n+    return None;\n+\n+    fn assign_expr(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let binop: ast::BinExpr = find_node_at_offset(file.syntax(), offset)?;\n+        if !matches!(binop.op_kind(), Some(ast::BinaryOp::Assignment { op: None })) {\n+            return None;\n+        }\n+\n+        // Parent must be `ExprStmt` or `StmtList` for `;` to be valid.\n+        if let Some(expr_stmt) = ast::ExprStmt::cast(binop.syntax().parent()?) {\n+            if expr_stmt.semicolon_token().is_some() {\n+                return None;\n+            }\n+        } else {\n+            if !ast::StmtList::can_cast(binop.syntax().parent()?.kind()) {\n+                return None;\n+            }\n+        }\n+\n+        let expr = binop.rhs()?;\n         let expr_range = expr.syntax().text_range();\n         if expr_range.contains(offset) && offset != expr_range.start() {\n             return None;\n         }\n         if file.syntax().text().slice(offset..expr_range.start()).contains_char('\\n') {\n             return None;\n         }\n-    } else {\n-        return None;\n+        let offset = expr.syntax().text_range().end();\n+        Some(TextEdit::insert(offset, \";\".to_string()))\n+    }\n+\n+    /// `a =$0 b;` removes the semicolon if an expression is valid in this context.\n+    fn assign_to_eq(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let binop: ast::BinExpr = find_node_at_offset(file.syntax(), offset)?;\n+        if !matches!(binop.op_kind(), Some(ast::BinaryOp::CmpOp(ast::CmpOp::Eq { negated: false })))\n+        {\n+            return None;\n+        }\n+\n+        let expr_stmt = ast::ExprStmt::cast(binop.syntax().parent()?)?;\n+        let semi = expr_stmt.semicolon_token()?;\n+\n+        if expr_stmt.syntax().next_sibling().is_some() {\n+            // Not the last statement in the list.\n+            return None;\n+        }\n+\n+        Some(TextEdit::delete(semi.text_range()))\n+    }\n+\n+    fn let_stmt(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n+        if let_stmt.semicolon_token().is_some() {\n+            return None;\n+        }\n+        let expr = let_stmt.initializer()?;\n+        let expr_range = expr.syntax().text_range();\n+        if expr_range.contains(offset) && offset != expr_range.start() {\n+            return None;\n+        }\n+        if file.syntax().text().slice(offset..expr_range.start()).contains_char('\\n') {\n+            return None;\n+        }\n+        let offset = let_stmt.syntax().text_range().end();\n+        Some(TextEdit::insert(offset, \";\".to_string()))\n     }\n-    let offset = let_stmt.syntax().text_range().end();\n-    Some(TextEdit::insert(offset, \";\".to_string()))\n }\n \n /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n@@ -286,7 +349,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_on_eq_typed() {\n+    fn test_semi_after_let() {\n         //     do_check(r\"\n         // fn foo() {\n         //     let foo =$0\n@@ -322,6 +385,117 @@ fn foo() {\n         // \");\n     }\n \n+    #[test]\n+    fn test_semi_after_assign() {\n+        type_char(\n+            '=',\n+            r#\"\n+fn f() {\n+    i $0 0\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    i = 0;\n+}\n+\"#,\n+        );\n+        type_char(\n+            '=',\n+            r#\"\n+fn f() {\n+    i $0 0\n+    i\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    i = 0;\n+    i\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f(x: u8) {\n+    if x $0\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f(x: u8) {\n+    if x $0 {}\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f(x: u8) {\n+    if x $0 0 {}\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f() {\n+    g(i $0 0);\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn assign_to_eq() {\n+        type_char(\n+            '=',\n+            r#\"\n+fn f(a: u8) {\n+    a =$0 0;\n+}\n+\"#,\n+            r#\"\n+fn f(a: u8) {\n+    a == 0\n+}\n+\"#,\n+        );\n+        type_char(\n+            '=',\n+            r#\"\n+fn f(a: u8) {\n+    a $0= 0;\n+}\n+\"#,\n+            r#\"\n+fn f(a: u8) {\n+    a == 0\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f(a: u8) {\n+    let e = a =$0 0;\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f(a: u8) {\n+    let e = a =$0 0;\n+    e\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn indents_new_chain_call() {\n         type_char("}]}