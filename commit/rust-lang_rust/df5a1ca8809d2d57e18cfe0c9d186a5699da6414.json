{"sha": "df5a1ca8809d2d57e18cfe0c9d186a5699da6414", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNWExY2E4ODA5ZDJkNTdlMThjZmUwYzlkMTg2YTU2OTlkYTY0MTQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-08T08:54:45Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-09T00:24:39Z"}, "message": "save-analysis: factor out helper method", "tree": {"sha": "3052c5e886e67aef4a10448b12973b42de3b93b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3052c5e886e67aef4a10448b12973b42de3b93b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5a1ca8809d2d57e18cfe0c9d186a5699da6414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5a1ca8809d2d57e18cfe0c9d186a5699da6414", "html_url": "https://github.com/rust-lang/rust/commit/df5a1ca8809d2d57e18cfe0c9d186a5699da6414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5a1ca8809d2d57e18cfe0c9d186a5699da6414/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28f79b79615fc77e65ec42c4e2a3960659150c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f79b79615fc77e65ec42c4e2a3960659150c9", "html_url": "https://github.com/rust-lang/rust/commit/f28f79b79615fc77e65ec42c4e2a3960659150c9"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "01990f4be6c9181656755dd8811ed282a0e9a209", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df5a1ca8809d2d57e18cfe0c9d186a5699da6414/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5a1ca8809d2d57e18cfe0c9d186a5699da6414/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=df5a1ca8809d2d57e18cfe0c9d186a5699da6414", "patch": "@@ -822,6 +822,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                              struct_lit_data.ref_id,\n                              struct_lit_data.scope);\n             let struct_def = struct_lit_data.ref_id;\n+            let scope = self.save_ctxt.enclosing_scope(ex.id);\n \n             for field in fields {\n                 if generated_code(field.ident.span) {\n@@ -830,7 +831,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n                 let field_data = self.save_ctxt.get_field_ref_data(field,\n                                                                    struct_def,\n-                                                                   self.cur_scope);\n+                                                                   scope);\n                 self.fmt.ref_str(recorder::VarRef,\n                                  field.ident.span,\n                                  Some(field_data.span),"}, {"sha": "75de46b5b7cf5ba0f1af0bbf58e9d7d335c4c0b3", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/df5a1ca8809d2d57e18cfe0c9d186a5699da6414/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5a1ca8809d2d57e18cfe0c9d186a5699da6414/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=df5a1ca8809d2d57e18cfe0c9d186a5699da6414", "patch": "@@ -194,7 +194,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     qualname: qualname,\n                     declaration: None,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n+                    scope: self.enclosing_scope(item.id),\n                 })\n             }\n             ast::ItemStatic(ref typ, mt, ref expr) => {\n@@ -213,7 +213,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n+                    scope: self.enclosing_scope(item.id),\n                     value: value,\n                     type_value: ty_to_string(&typ),\n                 })\n@@ -227,7 +227,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n+                    scope: selfenclosing_scope(item.id),\n                     value: self.span_utils.snippet(expr.span),\n                     type_value: ty_to_string(&typ),\n                 })\n@@ -245,7 +245,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n+                    scope: self.enclosing_scope(item.id),\n                     filename: filename,\n                 })\n             },\n@@ -259,14 +259,14 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     value: val,\n                     span: sub_span.unwrap(),\n                     qualname: enum_name,\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n+                    scope: self.enclosing_scope(item.id),\n                 })\n             },\n             ast::ItemImpl(_, _, _, ref trait_ref, ref typ, _) => {\n                 let mut type_data = None;\n                 let sub_span;\n \n-                let parent = self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0);\n+                let parent = self.enclosing_scope(item.id);\n \n                 match typ.node {\n                     // Common case impl for a struct or something basic.\n@@ -303,14 +303,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    // FIXME: we ought to be able to get the parent id ourselves, but we can't\n-    // for now.\n-    pub fn get_field_data(&self, field: &ast::StructField, parent: NodeId) -> Option<Data> {\n+    pub fn get_field_data(&self, field: &ast::StructField, scope: NodeId) -> Option<Data> {\n         match field.node.kind {\n             ast::NamedField(ident, _) => {\n                 let name = get_ident(ident);\n                 let qualname = format!(\"::{}::{}\",\n-                                       self.tcx.map.path_to_string(parent),\n+                                       self.tcx.map.path_to_string(scope),\n                                        name);\n                 let typ = self.tcx.node_types().get(&field.node.id).unwrap()\n                                                .to_string();\n@@ -320,7 +318,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: parent,\n+                    scope: scope,\n                     value: \"\".to_owned(),\n                     type_value: typ,\n                 }))\n@@ -329,8 +327,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    // FIXME: we ought to be able to get the parent id ourselves, but we can't\n-    // for now.\n     pub fn get_trait_ref_data(&self,\n                               trait_ref: &ast::TraitRef,\n                               parent: NodeId)\n@@ -359,7 +355,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                 return Some(Data::VariableRefData(VariableRefData {\n                                     name: get_ident(ident.node).to_string(),\n                                     span: sub_span.unwrap(),\n-                                    scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0),\n+                                    scope: self.enclosing_scope(expr.id),\n                                     ref_id: f.id,\n                                 }));\n                             }\n@@ -382,7 +378,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n                         Some(Data::TypeRefData(TypeRefData {\n                             span: sub_span.unwrap(),\n-                            scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0),\n+                            scope: self.enclosing_scope(expr.id),\n                             ref_id: def_id,\n                         }))\n                     }\n@@ -402,7 +398,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ty::TraitContainer(_) => (None, Some(method_id))\n                 };\n                 let sub_span = self.span_utils.sub_span_for_meth_name(expr.span);\n-                let parent = self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0);\n+                let parent = self.enclosing_scope(expr.id);\n                 Some(Data::MethodCallData(MethodCallData {\n                     span: sub_span.unwrap(),\n                     scope: parent,\n@@ -441,15 +437,15 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 Data::VariableRefData(VariableRefData {\n                     name: self.span_utils.snippet(sub_span.unwrap()),\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                    scope: self.enclosing_scope(id),\n                     ref_id: def.def_id(),\n                 })\n             }\n             def::DefStruct(def_id) | def::DefTy(def_id, _) => {\n                 Data::TypeRefData(TypeRefData {\n                     span: sub_span.unwrap(),\n                     ref_id: def_id,\n-                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                    scope: self.enclosing_scope(id),\n                 })\n             }\n             def::DefMethod(decl_id, provenence) => {\n@@ -484,7 +480,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 };\n                 Data::MethodCallData(MethodCallData {\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                    scope: self.enclosing_scope(id),\n                     ref_id: def_id,\n                     decl_id: Some(decl_id),\n                 })\n@@ -493,7 +489,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 Data::FunctionCallData(FunctionCallData {\n                     ref_id: def_id,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                    scope: self.enclosing_scope(id),\n                 })\n             }\n             _ => self.tcx.sess.span_bug(path.span,\n@@ -545,6 +541,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    #[inline]\n+    fn enclosing_scope(&self, id: NodeId) -> NodeId {\n+        self.tcx.map.get_enclosing_scope(id).unwrap_or(0)\n+    }\n }\n \n // An AST visitor for collecting paths from patterns."}]}