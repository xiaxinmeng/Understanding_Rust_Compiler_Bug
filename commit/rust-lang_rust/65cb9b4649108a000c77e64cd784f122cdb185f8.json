{"sha": "65cb9b4649108a000c77e64cd784f122cdb185f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1Y2I5YjQ2NDkxMDhhMDAwYzc3ZTY0Y2Q3ODRmMTIyY2RiMTg1Zjg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-30T13:13:28Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-30T13:13:28Z"}, "message": "Generalize rewrite_array() to types other than ast::Expr", "tree": {"sha": "c98bc022b9d62997893d8902a8a0dd11a9cd792c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98bc022b9d62997893d8902a8a0dd11a9cd792c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65cb9b4649108a000c77e64cd784f122cdb185f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65cb9b4649108a000c77e64cd784f122cdb185f8", "html_url": "https://github.com/rust-lang/rust/commit/65cb9b4649108a000c77e64cd784f122cdb185f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65cb9b4649108a000c77e64cd784f122cdb185f8/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aaa00a92963f484b591a1d28b49e5decf7bb150", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aaa00a92963f484b591a1d28b49e5decf7bb150", "html_url": "https://github.com/rust-lang/rust/commit/5aaa00a92963f484b591a1d28b49e5decf7bb150"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "e7418562770c49d86e46611b2e63a0f1b3ff403a", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65cb9b4649108a000c77e64cd784f122cdb185f8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65cb9b4649108a000c77e64cd784f122cdb185f8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=65cb9b4649108a000c77e64cd784f122cdb185f8", "patch": "@@ -63,7 +63,7 @@ pub fn format_expr(\n \n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array(\n-            expr_vec.iter().map(|e| &**e),\n+            &ptr_vec_to_ref_vec(expr_vec),\n             mk_sp(context.codemap.span_after(expr.span, \"[\"), expr.span.hi()),\n             context,\n             shape,\n@@ -397,16 +397,13 @@ where\n     ))\n }\n \n-pub fn rewrite_array<'a, I>(\n-    expr_iter: I,\n+pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n+    exprs: &[&T],\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n     trailing_comma: bool,\n-) -> Option<String>\n-where\n-    I: Iterator<Item = &'a ast::Expr>,\n-{\n+) -> Option<String> {\n     let bracket_size = if context.config.spaces_within_parens_and_brackets() {\n         2 // \"[ \"\n     } else {\n@@ -426,11 +423,11 @@ where\n \n     let items = itemize_list(\n         context.codemap,\n-        expr_iter,\n+        exprs.iter(),\n         \"]\",\n         \",\",\n-        |item| item.span.lo(),\n-        |item| item.span.hi(),\n+        |item| item.span().lo(),\n+        |item| item.span().hi(),\n         |item| item.rewrite(context, nested_shape),\n         span.lo(),\n         span.hi(),"}, {"sha": "6d115e155d072e28b86831255605f21c22c91ffd", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65cb9b4649108a000c77e64cd784f122cdb185f8/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65cb9b4649108a000c77e64cd784f122cdb185f8/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=65cb9b4649108a000c77e64cd784f122cdb185f8", "patch": "@@ -255,24 +255,14 @@ pub fn rewrite_macro(\n                     trailing_comma = false;\n                 }\n                 // Convert `MacroArg` into `ast::Expr`, as `rewrite_array` only accepts the latter.\n-                let expr_vec: Vec<_> = arg_vec\n-                    .iter()\n-                    .filter_map(|e| match *e {\n-                        MacroArg::Expr(ref e) => Some(e.clone()),\n-                        _ => None,\n-                    })\n-                    .collect();\n-                if expr_vec.len() != arg_vec.len() {\n-                    return Some(context.snippet(mac.span));\n-                }\n                 let sp = mk_sp(\n                     context\n                         .codemap\n                         .span_after(mac.span, original_style.opener()),\n                     mac.span.hi() - BytePos(1),\n                 );\n-                let rewrite =\n-                    rewrite_array(expr_vec.iter(), sp, context, mac_shape, trailing_comma)?;\n+                let arg_vec = &arg_vec.iter().map(|e| &*e).collect::<Vec<_>>()[..];\n+                let rewrite = rewrite_array(arg_vec, sp, context, mac_shape, trailing_comma)?;\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))\n             }"}]}