{"sha": "30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZGRiNWE4YzFlODU5MTZkYTBhY2RjNjY1ZDZhMTY1MzVhMTJkZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T09:07:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T09:07:05Z"}, "message": "Auto merge of #67828 - JohnTitor:rollup-qmswkkl, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #67450 (Allow for setting a ThinLTO import limit during bootstrap)\n - #67595 (Suggest adding a lifetime constraint for opaque type)\n - #67636 (allow rustfmt key in [build] section)\n - #67736 (Less-than is asymmetric, not antisymmetric)\n - #67762 (Add missing links for insecure_time)\n - #67783 (Warn for bindings named same as variants when matching against a borrow)\n - #67796 (Ensure that we process projections during MIR inlining)\n - #67807 (Use drop instead of the toilet closure `|_| ()`)\n - #67816 (Clean up err codes)\n - #67825 (Minor: change take() docs grammar to match other docs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "bbcaeb2a5d6f7a7a13285c0fbea97ab3369d0811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbcaeb2a5d6f7a7a13285c0fbea97ab3369d0811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "html_url": "https://github.com/rust-lang/rust/commit/30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4877e164a1789555c643d68218de15f2574d01ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4877e164a1789555c643d68218de15f2574d01ea", "html_url": "https://github.com/rust-lang/rust/commit/4877e164a1789555c643d68218de15f2574d01ea"}, {"sha": "14c96ce48c44bfe4911bb9e29b7b93aae06477e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c96ce48c44bfe4911bb9e29b7b93aae06477e2", "html_url": "https://github.com/rust-lang/rust/commit/14c96ce48c44bfe4911bb9e29b7b93aae06477e2"}], "stats": {"total": 337, "additions": 269, "deletions": 68}, "files": [{"sha": "bfd9e18cdd41a749723adf53fe63ce435284a2b4", "filename": "config.toml.example", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -138,6 +138,10 @@\n # specified, use this rustc binary instead as the stage0 snapshot compiler.\n #rustc = \"/path/to/bin/rustc\"\n \n+# Instead of download the src/stage0.txt version of rustfmt specified,\n+# use this rustfmt binary instead as the stage0 snapshot rustfmt.\n+#rustfmt = \"/path/to/bin/rustfmt\"\n+\n # Flag to specify whether any documentation is built. If false, rustdoc and\n # friends will still be compiled but they will not be used to generate any\n # documentation.\n@@ -406,6 +410,13 @@\n # Whether to verify generated LLVM IR\n #verify-llvm-ir = false\n \n+# Compile the compiler with a non-default ThinLTO import limit. This import\n+# limit controls the maximum size of functions imported by ThinLTO. Decreasing\n+# will make code compile faster at the expense of lower runtime performance.\n+# If `incremental` is set to true above, the import limit will default to 10\n+# instead of LLVM's default of 100.\n+#thin-lto-import-instr-limit = 100\n+\n # Map all debuginfo paths for libstd and crates to `/rust/$sha/$crate/...`,\n # generally only set for releases\n #remap-debuginfo = false"}, {"sha": "f7d8daa75ecb5fb95fb5bdb5ff382075cb096674", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -1183,6 +1183,21 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Cprefer-dynamic\");\n         }\n \n+        // When building incrementally we default to a lower ThinLTO import limit\n+        // (unless explicitly specified otherwise). This will produce a somewhat\n+        // slower code but give way better compile times.\n+        {\n+            let limit = match self.config.rust_thin_lto_import_instr_limit {\n+                Some(limit) => Some(limit),\n+                None if self.config.incremental => Some(10),\n+                _ => None,\n+            };\n+\n+            if let Some(limit) = limit {\n+                rustflags.arg(&format!(\"-Cllvm-args=-import-instr-limit={}\", limit));\n+            }\n+        }\n+\n         Cargo { command: cargo, rustflags }\n     }\n "}, {"sha": "944df66431fe8f39c00a0571d31a8446ed1617f1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -108,6 +108,7 @@ pub struct Config {\n     pub rust_dist_src: bool,\n     pub rust_codegen_backends: Vec<Interned<String>>,\n     pub rust_verify_llvm_ir: bool,\n+    pub rust_thin_lto_import_instr_limit: Option<u32>,\n     pub rust_remap_debuginfo: bool,\n \n     pub build: Interned<String>,\n@@ -202,6 +203,7 @@ struct Build {\n     target: Vec<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n+    rustfmt: Option<String>, /* allow bootstrap.py to use rustfmt key */\n     docs: Option<bool>,\n     compiler_docs: Option<bool>,\n     submodules: Option<bool>,\n@@ -325,6 +327,7 @@ struct Rust {\n     deny_warnings: Option<bool>,\n     backtrace_on_ice: Option<bool>,\n     verify_llvm_ir: Option<bool>,\n+    thin_lto_import_instr_limit: Option<u32>,\n     remap_debuginfo: Option<bool>,\n     jemalloc: Option<bool>,\n     test_compare_mode: Option<bool>,\n@@ -569,6 +572,7 @@ impl Config {\n             set(&mut config.deny_warnings, flags.deny_warnings.or(rust.deny_warnings));\n             set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);\n             set(&mut config.rust_verify_llvm_ir, rust.verify_llvm_ir);\n+            config.rust_thin_lto_import_instr_limit = rust.thin_lto_import_instr_limit;\n             set(&mut config.rust_remap_debuginfo, rust.remap_debuginfo);\n \n             if let Some(ref backends) = rust.codegen_backends {"}, {"sha": "dc90c286f5cd166aec3f0879883768ed6e48d261", "filename": "src/ci/docker/x86_64-gnu-llvm-7/Dockerfile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -25,7 +25,9 @@ RUN sh /scripts/sccache.sh\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --llvm-root=/usr/lib/llvm-7 \\\n-      --enable-llvm-link-shared\n+      --enable-llvm-link-shared \\\n+      --set rust.thin-lto-import-instr-limit=10\n+\n ENV SCRIPT python2.7 ../x.py test src/tools/tidy && python2.7 ../x.py test\n \n # The purpose of this container isn't to test with debug assertions and"}, {"sha": "34384cfcba96b81a95036700e080e81c5c1626cd", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -142,7 +142,7 @@ fn shared_from_iter_trustedlen_normal() {\n \n     // Try a ZST to make sure it is handled well.\n     {\n-        let iter = (0..SHARED_ITER_MAX).map(|_| ());\n+        let iter = (0..SHARED_ITER_MAX).map(drop);\n         let vec = iter.clone().collect::<Vec<_>>();\n         let rc = iter.collect::<Rc<[_]>>();\n         assert_eq!(&*vec, &*rc);"}, {"sha": "884856cd1b4d224aa2884e5ca8649a4feef0ae5c", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -138,7 +138,7 @@ fn shared_from_iter_trustedlen_normal() {\n \n     // Try a ZST to make sure it is handled well.\n     {\n-        let iter = (0..SHARED_ITER_MAX).map(|_| ());\n+        let iter = (0..SHARED_ITER_MAX).map(drop);\n         let vec = iter.clone().collect::<Vec<_>>();\n         let rc = iter.collect::<Rc<[_]>>();\n         assert_eq!(&*vec, &*rc);"}, {"sha": "06e7e45c7014e796b125174d0a8d302b74f07b2f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -495,7 +495,7 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// An order is a total order if it is (for all `a`, `b` and `c`):\n ///\n-/// - total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true; and\n+/// - total and asymmetric: exactly one of `a < b`, `a == b` or `a > b` is true; and\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n /// ## Derivable\n@@ -674,7 +674,7 @@ impl PartialOrd for Ordering {\n ///\n /// The comparison must satisfy, for all `a`, `b` and `c`:\n ///\n-/// - antisymmetry: if `a < b` then `!(a > b)`, as well as `a > b` implying `!(a < b)`; and\n+/// - asymmetry: if `a < b` then `!(a > b)`, as well as `a > b` implying `!(a < b)`; and\n /// - transitivity: `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n /// Note that these requirements mean that the trait itself must be implemented symmetrically and"}, {"sha": "9eb151cf528a5c3cfea721e5a80ee18fa97fea9b", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -557,7 +557,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/// Replace `dest` with the default value of `T`, and return the previous `dest` value.\n+/// Replaces `dest` with the default value of `T`, returning the previous `dest` value.\n ///\n /// # Examples\n ///"}, {"sha": "69ebbe1fd367977b5ce6c05bda047c0109ea3b95", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             err.span_suggestion(\n                                 fn_return_span,\n                                 &format!(\n-                                    \"you can add a constraint to the return type to make it last \\\n+                                    \"you can add a bound to the return type to make it last \\\n                                  less than `'static` and match {}\",\n                                     lifetime,\n                                 ),"}, {"sha": "539049edb33b784a75e261bfd0964f63d968b800", "filename": "src/librustc_error_codes/error_codes/E0130.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0130.md", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0130.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0130.md?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -1,4 +1,4 @@\n-You declared a pattern as an argument in a foreign function declaration.\n+A pattern was declared as an argument in a foreign function declaration.\n \n Erroneous code example:\n \n@@ -9,7 +9,7 @@ extern {\n }\n ```\n \n-Please replace the pattern argument with a regular one. Example:\n+To fix this error, replace the pattern argument with a regular one. Example:\n \n ```\n struct SomeStruct {"}, {"sha": "ed798d4f881a3ea7a057ccea3866dc206415b871", "filename": "src/librustc_error_codes/error_codes/E0131.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0131.md", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0131.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0131.md?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -1,8 +1,11 @@\n-It is not possible to define `main` with generic parameters.\n-When `main` is present, it must take no arguments and return `()`.\n+The `main` function was defined with generic parameters.\n+\n Erroneous code example:\n \n ```compile_fail,E0131\n fn main<T>() { // error: main function is not allowed to have generic parameters\n }\n ```\n+\n+It is not possible to define the `main` function with generic parameters.\n+It must not take any arguments."}, {"sha": "9a0c99b07e6f1806fb5eb824e04b0548a99f83ec", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -9,7 +9,7 @@ use rustc::mir::{\n use rustc::ty::adjustment::PointerCast;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -206,6 +206,47 @@ impl BorrowExplanation {\n                         ),\n                     );\n                 };\n+\n+                self.add_lifetime_bound_suggestion_to_diagnostic(\n+                    tcx,\n+                    err,\n+                    &category,\n+                    span,\n+                    region_name,\n+                );\n+            }\n+            _ => {}\n+        }\n+    }\n+    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+        category: &ConstraintCategory,\n+        span: Span,\n+        region_name: &RegionName,\n+    ) {\n+        match category {\n+            ConstraintCategory::OpaqueType => {\n+                if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+                    let suggestable_name = if region_name.was_named() {\n+                        region_name.to_string()\n+                    } else {\n+                        \"'_\".to_string()\n+                    };\n+\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"you can add a bound to the {}to make it last less than \\\n+                             `'static` and match `{}`\",\n+                            category.description(),\n+                            region_name,\n+                        ),\n+                        format!(\"{} + {}\", snippet, suggestable_name),\n+                        Applicability::Unspecified,\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "09b487ba1da3f873e0ebe31aa3b901952d093d6e", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -815,7 +815,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             span,\n                             &format!(\n                                 \"to allow this `impl Trait` to capture borrowed data with lifetime \\\n-                                 `{}`, add `{}` as a constraint\",\n+                                 `{}`, add `{}` as a bound\",\n                                 fr_name, suggestable_fr_name,\n                             ),\n                             format!(\"{} + {}\", snippet, suggestable_fr_name),"}, {"sha": "bbbad36e4851db71204b327b83d0e8a9cfa55db4", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -284,7 +284,7 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pa\n             if let Some(ty::BindByValue(hir::Mutability::Not)) =\n                 cx.tables.extract_binding_mode(cx.tcx.sess, p.hir_id, p.span)\n             {\n-                let pat_ty = cx.tables.pat_ty(p);\n+                let pat_ty = cx.tables.pat_ty(p).peel_refs();\n                 if let ty::Adt(edef, _) = pat_ty.kind {\n                     if edef.is_enum()\n                         && edef.variants.iter().any(|variant| {"}, {"sha": "3c9f8542e51d02a727d4aea997ce67b8b8b9b5e3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -671,12 +671,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         *local = self.make_integrate_local(local);\n     }\n \n-    fn visit_place(\n-        &mut self,\n-        place: &mut Place<'tcx>,\n-        _context: PlaceContext,\n-        _location: Location,\n-    ) {\n+    fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n         match &mut place.base {\n             PlaceBase::Static(_) => {}\n             PlaceBase::Local(l) => {\n@@ -689,10 +684,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n \n                     place.projection = self.tcx.intern_place_elems(&*projs);\n                 }\n-\n-                *l = self.make_integrate_local(l);\n             }\n         }\n+        // Handles integrating any locals that occur in the base\n+        // or projections\n+        self.super_place(place, context, location)\n     }\n \n     fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {"}, {"sha": "94785e9eff3a59300e16e13ca144e3e673dad617", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -848,7 +848,7 @@ impl<'a> Parser<'a> {\n         let appl = Applicability::MachineApplicable;\n         if self.token.span == DUMMY_SP || self.prev_span == DUMMY_SP {\n             // Likely inside a macro, can't provide meaninful suggestions.\n-            return self.expect(&token::Semi).map(|_| ());\n+            return self.expect(&token::Semi).map(drop);\n         } else if !sm.is_multiline(self.prev_span.until(self.token.span)) {\n             // The current token is in the same line as the prior token, not recoverable.\n         } else if self.look_ahead(1, |t| {\n@@ -887,7 +887,7 @@ impl<'a> Parser<'a> {\n                 .emit();\n             return Ok(());\n         }\n-        self.expect(&token::Semi).map(|_| ()) // Error unconditionally\n+        self.expect(&token::Semi).map(drop) // Error unconditionally\n     }\n \n     pub(super) fn parse_semi_or_incorrect_foreign_fn_body("}, {"sha": "9e6849ba5bc39d36035b9f67ff784cdad00c6442", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -232,7 +232,7 @@ impl<R: Seek> BufReader<R> {\n                 }\n             }\n         }\n-        self.seek(SeekFrom::Current(offset)).map(|_| ())\n+        self.seek(SeekFrom::Current(offset)).map(drop)\n     }\n }\n "}, {"sha": "8fc2599f0d7625fc7c6e13f561b02658381f57c1", "filename": "src/libstd/sys/unix/android.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -93,12 +93,12 @@ pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n \n     unsafe {\n         match ftruncate64.get() {\n-            Some(f) => cvt_r(|| f(fd, size as i64)).map(|_| ()),\n+            Some(f) => cvt_r(|| f(fd, size as i64)).map(drop),\n             None => {\n                 if size > i32::max_value() as u64 {\n                     Err(io::Error::new(io::ErrorKind::InvalidInput, \"cannot truncate >2GB\"))\n                 } else {\n-                    cvt_r(|| ftruncate(fd, size as i32)).map(|_| ())\n+                    cvt_r(|| ftruncate(fd, size as i32)).map(drop)\n                 }\n             }\n         }\n@@ -107,7 +107,7 @@ pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n \n #[cfg(target_pointer_width = \"64\")]\n pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n-    unsafe { cvt_r(|| ftruncate(fd, size as i64)).map(|_| ()) }\n+    unsafe { cvt_r(|| ftruncate(fd, size as i64)).map(drop) }\n }\n \n #[cfg(target_pointer_width = \"32\")]"}, {"sha": "2a0519487c7a7363c5870ab1836649a939e36c08", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -814,7 +814,7 @@ impl File {\n             use crate::convert::TryInto;\n             let size: off64_t =\n                 size.try_into().map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))?;\n-            cvt_r(|| unsafe { ftruncate64(self.0.raw(), size) }).map(|_| ())\n+            cvt_r(|| unsafe { ftruncate64(self.0.raw(), size) }).map(drop)\n         }\n     }\n "}, {"sha": "79b0dc02978f37c5f521898ed0c7c9280ee921f3", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -324,7 +324,7 @@ impl Socket {\n \n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;\n-        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())\n+        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(drop)\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {"}, {"sha": "b277b3d5899b80663f6e023bab1b8927ef20abc0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -529,7 +529,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n \n@@ -538,7 +538,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }\n "}, {"sha": "2a861c878015e254098339a8802dad3e1dc73473", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -99,11 +99,11 @@ pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) ->\n \n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking(false)?;\n-            return p2.read_to_end(v2).map(|_| ());\n+            return p2.read_to_end(v2).map(drop);\n         }\n         if fds[1].revents != 0 && read(&p2, v2)? {\n             p1.set_nonblocking(false)?;\n-            return p1.read_to_end(v1).map(|_| ());\n+            return p1.read_to_end(v1).map(drop);\n         }\n     }\n "}, {"sha": "07d0fbf61fe2274e9e8b58d20450dcef17de05d1", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -425,7 +425,7 @@ impl Process {\n                 \"invalid argument: can't kill an exited process\",\n             ))\n         } else {\n-            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(|_| ())\n+            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(drop)\n         }\n     }\n "}, {"sha": "68f2c133170244431a6ed4368f425073d4ff98d7", "filename": "src/libstd/sys/vxworks/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -340,7 +340,7 @@ impl File {\n     }\n \n     pub fn truncate(&self, size: u64) -> io::Result<()> {\n-        return cvt_r(|| unsafe { ftruncate(self.0.raw(), size as off_t) }).map(|_| ());\n+        return cvt_r(|| unsafe { ftruncate(self.0.raw(), size as off_t) }).map(drop);\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "7d4e5624f7e395bc5a8e22d737c7d3b13510928b", "filename": "src/libstd/sys/vxworks/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -261,7 +261,7 @@ impl Socket {\n \n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;\n-        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())\n+        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(drop)\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {"}, {"sha": "d42191544994487e42ddbe5058d9ca2264ec7fe1", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -279,7 +279,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n \n@@ -288,7 +288,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }\n "}, {"sha": "0990cb8e83cf8c9798fe9dc2d035583b3670d377", "filename": "src/libstd/sys/vxworks/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -66,11 +66,11 @@ pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) ->\n \n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking_pipe(false)?;\n-            return p2.read_to_end(v2).map(|_| ());\n+            return p2.read_to_end(v2).map(drop);\n         }\n         if fds[1].revents != 0 && read(&p2, v2)? {\n             p1.set_nonblocking_pipe(false)?;\n-            return p1.read_to_end(v1).map(|_| ());\n+            return p1.read_to_end(v1).map(drop);\n         }\n     }\n "}, {"sha": "ced70dea27f9952921bd74d8911abb0f8f91c6fc", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -138,7 +138,7 @@ impl Process {\n                 \"invalid argument: can't kill an exited process\",\n             ))\n         } else {\n-            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(|_| ())\n+            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(drop)\n         }\n     }\n "}, {"sha": "3baec6bf09924c25967fbf87c2455169a382ce58", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -151,7 +151,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n \n@@ -160,7 +160,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }\n "}, {"sha": "427f4b684e14ae9ca4630c50f2261ae694bfd98b", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -923,6 +923,6 @@ fn symlink_junction_inner(target: &Path, junction: &Path) -> io::Result<()> {\n             &mut ret,\n             ptr::null_mut(),\n         ))\n-        .map(|_| ())\n+        .map(drop)\n     }\n }"}, {"sha": "f2ad057b6b624e12af232e3181844902f3f3ea3a", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -156,7 +156,7 @@ impl RawHandle {\n     }\n \n     pub fn cancel_io(&self) -> io::Result<()> {\n-        unsafe { cvt(c::CancelIo(self.raw())).map(|_| ()) }\n+        unsafe { cvt(c::CancelIo(self.raw())).map(drop) }\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "d8d4fdfce2fe4c9a7a49367e8024d304ba2e41a8", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -355,7 +355,7 @@ impl Socket {\n     #[cfg(not(target_vendor = \"uwp\"))]\n     fn set_no_inherit(&self) -> io::Result<()> {\n         sys::cvt(unsafe { c::SetHandleInformation(self.0 as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0) })\n-            .map(|_| ())\n+            .map(drop)\n     }\n \n     #[cfg(target_vendor = \"uwp\")]"}, {"sha": "c5354671c9843db6d418e8513d95642145269001", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -247,7 +247,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     let mut p = p.encode_wide().collect::<Vec<_>>();\n     p.push(0);\n \n-    cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(|_| ())\n+    cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(drop)\n }\n \n pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n@@ -272,12 +272,12 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let k = to_u16s(k)?;\n     let v = to_u16s(v)?;\n \n-    cvt(unsafe { c::SetEnvironmentVariableW(k.as_ptr(), v.as_ptr()) }).map(|_| ())\n+    cvt(unsafe { c::SetEnvironmentVariableW(k.as_ptr(), v.as_ptr()) }).map(drop)\n }\n \n pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let v = to_u16s(n)?;\n-    cvt(unsafe { c::SetEnvironmentVariableW(v.as_ptr(), ptr::null()) }).map(|_| ())\n+    cvt(unsafe { c::SetEnvironmentVariableW(v.as_ptr(), ptr::null()) }).map(drop)\n }\n \n pub fn temp_dir() -> PathBuf {"}, {"sha": "e03e0fc83454be6e39e2bf642a18f48c63c0e09c", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -36,7 +36,7 @@ macro_rules! rtunwrap {\n         match $e {\n             $ok(v) => v,\n             ref err => {\n-                let err = err.as_ref().map(|_| ()); // map Ok/Some which might not be Debug\n+                let err = err.as_ref().map(drop); // map Ok/Some which might not be Debug\n                 rtabort!(concat!(\"unwrap failed: \", stringify!($e), \" = {:?}\"), err)\n             }\n         }"}, {"sha": "c7d4828892c046066de3c27e09d7c76fad321dc3", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -659,7 +659,7 @@ impl UdpSocket {\n \n     pub fn connect(&self, addr: io::Result<&SocketAddr>) -> io::Result<()> {\n         let (addrp, len) = addr?.into_inner();\n-        cvt_r(|| unsafe { c::connect(*self.inner.as_inner(), addrp, len) }).map(|_| ())\n+        cvt_r(|| unsafe { c::connect(*self.inner.as_inner(), addrp, len) }).map(drop)\n     }\n }\n "}, {"sha": "0dce8f810eb137d520ec6b0876230774fecc9e03", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -153,6 +153,8 @@ pub struct Instant(time::Instant);\n /// | Windows   | [GetSystemTimeAsFileTime]                                            |\n ///\n /// [clock_time_get (Realtime Clock)]: https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt\n+/// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n+/// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: http://man7.org/linux/man-pages/man2/gettimeofday.2.html\n /// [clock_gettime (Realtime Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-api.md#clock_time_get"}, {"sha": "d900f8ed9ba121dbb4e5347459a068bdd75fcf2c", "filename": "src/test/ui/async-await/issues/issue-64433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -23,7 +23,7 @@ impl B {\n async fn can_error(some_string: &str) -> Result<(), String> {\n     let a = A { inner: vec![some_string, \"foo\"] };\n     let mut b = B {};\n-    Ok(b.something_with_a(a).await.map(|_| ())?)\n+    Ok(b.something_with_a(a).await.map(drop)?)\n }\n \n fn main() {"}, {"sha": "6179132b3f6080e0decb74aebfe80b4a49eb702e", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -0,0 +1,11 @@\n+struct List {\n+    data: Vec<String>,\n+}\n+impl List {\n+    fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+        self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n+        //~^ ERROR does not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "83d0f87015bf9478756573f4f34ba33a5b1870dd", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -0,0 +1,21 @@\n+error[E0597]: `prefix` does not live long enough\n+  --> $DIR/does-not-live-long-enough.rs:6:51\n+   |\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+   |                     -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n+LL |         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n+   |                                 ---               ^^^^^^ borrowed value does not live long enough\n+   |                                 |\n+   |                                 value captured here\n+LL |\n+LL |     }\n+   |     - `prefix` dropped here while still borrowed\n+   |\n+help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n+   |\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "4c38f0a8a914d507a2496f91b7d422f3fa103e43", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | type E<'a, 'b> = impl Sized; + 'a\n    |"}, {"sha": "1806d2607a3ac8c288ffd7874318b91e57897c55", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             lifetime `'a` defined here\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^"}, {"sha": "7f92e709af5563931ff5e32afa48b381e1aaa178", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -11,7 +11,7 @@ note: ...can't outlive the anonymous lifetime #1 defined on the function body at\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n@@ -47,7 +47,7 @@ note: ...can't outlive the lifetime `'a` as defined on the function body at 12:1\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "123ea6af6b019f6e5f171cf54fe57f575a805bac", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -6,7 +6,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    lifetime `'a` defined here\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e550be19174741f2d918b1e27d05ae712afef225", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -15,7 +15,7 @@ LL | /     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n LL | |         self.x.iter().map(|a| a.0)\n LL | |     }\n    | |_____^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ note: ...can't outlive the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "37d8f2eac9be1d718a51e956f3e904102fc72133", "filename": "src/test/ui/mir/issue-67710-inline-projection.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fmir%2Fissue-67710-inline-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fmir%2Fissue-67710-inline-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-67710-inline-projection.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Z mir-opt-level=2\n+// build-pass\n+\n+// This used to ICE due to the inling pass not examining projections\n+// for references to locals\n+\n+pub fn parse(version: ()) {\n+    p(&b'.', b\"0\");\n+}\n+#[inline(always)]\n+fn p(byte: &u8, s: &[u8]) {\n+    !(s[0] == *byte);\n+}\n+\n+fn main() {\n+    parse(());\n+}"}, {"sha": "dd0afbbdfc6fa6db5c0b2a18a95af750a0fc64bb", "filename": "src/test/ui/nll/issue-50343.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fnll%2Fissue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fnll%2Fissue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50343.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -3,6 +3,6 @@\n #![deny(unused_mut)]\n \n fn main() {\n-    vec![42].iter().map(|_| ()).count();\n+    vec![42].iter().map(drop).count();\n     vec![(42, 22)].iter().map(|(_x, _y)| ()).count();\n }"}, {"sha": "e9510b53feab8686322262366a7b67ed9721f8ef", "filename": "src/test/ui/paths-containing-nul.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fpaths-containing-nul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fpaths-containing-nul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpaths-containing-nul.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -17,7 +17,7 @@ fn assert_invalid_input<T>(on: &str, result: io::Result<T>) {\n                               \"{} returned a strange {:?} on a path with NUL\", on, e.kind()),\n         }\n     }\n-    inner(on, result.map(|_| ()))\n+    inner(on, result.map(drop))\n }\n \n fn main() {"}, {"sha": "6fd5768a5a26dd2e032ed6726fc13160155ef256", "filename": "src/test/ui/pattern/issue-67776-match-same-name-enum-variant-refs.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.rs?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -0,0 +1,42 @@\n+// Test for issue #67776: binding named the same as enum variant\n+// should report a warning even when matching against a reference type\n+\n+// check-pass\n+\n+#![allow(unused_variables)]\n+#![allow(non_snake_case)]\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+\n+fn fn1(e: Foo) {\n+    match e {\n+        Bar => {},\n+        //~^ WARNING named the same as one of the variants of the type `Foo`\n+        Baz => {},\n+        //~^ WARNING named the same as one of the variants of the type `Foo`\n+    }\n+}\n+\n+fn fn2(e: &Foo) {\n+    match e {\n+        Bar => {},\n+        //~^ WARNING named the same as one of the variants of the type `Foo`\n+        Baz => {},\n+        //~^ WARNING named the same as one of the variants of the type `Foo`\n+    }\n+}\n+\n+fn fn3(e: &mut &&mut Foo) {\n+    match e {\n+        Bar => {},\n+        //~^ WARNING named the same as one of the variants of the type `Foo`\n+        Baz => {},\n+        //~^ WARNING named the same as one of the variants of the type `Foo`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "abb8d6907e76d85c957689f993387d7612293213", "filename": "src/test/ui/pattern/issue-67776-match-same-name-enum-variant-refs.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-67776-match-same-name-enum-variant-refs.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -0,0 +1,36 @@\n+warning[E0170]: pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:17:9\n+   |\n+LL |         Bar => {},\n+   |         ^^^ help: to match on the variant, qualify the path: `Foo::Bar`\n+\n+warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:19:9\n+   |\n+LL |         Baz => {},\n+   |         ^^^ help: to match on the variant, qualify the path: `Foo::Baz`\n+\n+warning[E0170]: pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:26:9\n+   |\n+LL |         Bar => {},\n+   |         ^^^ help: to match on the variant, qualify the path: `Foo::Bar`\n+\n+warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:28:9\n+   |\n+LL |         Baz => {},\n+   |         ^^^ help: to match on the variant, qualify the path: `Foo::Baz`\n+\n+warning[E0170]: pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:35:9\n+   |\n+LL |         Bar => {},\n+   |         ^^^ help: to match on the variant, qualify the path: `Foo::Bar`\n+\n+warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-67776-match-same-name-enum-variant-refs.rs:37:9\n+   |\n+LL |         Baz => {},\n+   |         ^^^ help: to match on the variant, qualify the path: `Foo::Baz`\n+"}, {"sha": "f2e556c63cbf3774bcfed5881f6b4114a0e844dd", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -6,7 +6,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          |\n    |                          let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "b76966e8693f2097fd7757a6ee2f76267e9cbc91", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -6,7 +6,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    |\n    |                    let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "9f5414995151b703556727d9ba78df7c05fae8f6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ddb5a8c1e85916da0acdc665d6a16535a12dd6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "patch": "@@ -11,7 +11,7 @@ note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}]}