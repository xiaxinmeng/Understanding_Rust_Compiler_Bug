{"sha": "a3263bafe0543cb72749cb03de61f26ba1ea4f19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjYzYmFmZTA1NDNjYjcyNzQ5Y2IwM2RlNjFmMjZiYTFlYTRmMTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-13T16:58:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-13T16:58:42Z"}, "message": "Change some unimplemented! to unimpl!", "tree": {"sha": "2765e45d628f8fa9c126a8455f21f09e334fdfda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2765e45d628f8fa9c126a8455f21f09e334fdfda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3263bafe0543cb72749cb03de61f26ba1ea4f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3263bafe0543cb72749cb03de61f26ba1ea4f19", "html_url": "https://github.com/rust-lang/rust/commit/a3263bafe0543cb72749cb03de61f26ba1ea4f19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3263bafe0543cb72749cb03de61f26ba1ea4f19/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ba0d6b27eb006ccc3f7b46684cd439e4c3e55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ba0d6b27eb006ccc3f7b46684cd439e4c3e55c", "html_url": "https://github.com/rust-lang/rust/commit/25ba0d6b27eb006ccc3f7b46684cd439e4c3e55c"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "e50aa9ff63d48dd1db30e1bd716de611ba86e539", "filename": "src/abi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3263bafe0543cb72749cb03de61f26ba1ea4f19/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3263bafe0543cb72749cb03de61f26ba1ea4f19/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=a3263bafe0543cb72749cb03de61f26ba1ea4f19", "patch": "@@ -75,7 +75,9 @@ pub fn clif_sig_from_fn_ty<'a, 'tcx: 'a>(\n     fn_ty: Ty<'tcx>,\n ) -> Signature {\n     let sig = ty_fn_sig(tcx, fn_ty);\n-    assert!(!sig.variadic, \"Variadic function are not yet supported\");\n+    if sig.variadic {\n+        unimpl!(\"Variadic function are not yet supported\");\n+    }\n     let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n         Abi::Rust => (CallConv::Fast, sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),"}, {"sha": "3f0222ca6ae31361afc19546ff945613a39fbc9f", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3263bafe0543cb72749cb03de61f26ba1ea4f19/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3263bafe0543cb72749cb03de61f26ba1ea4f19/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a3263bafe0543cb72749cb03de61f26ba1ea4f19", "patch": "@@ -264,7 +264,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                     drop_place.write_place_ref(fx, arg_place);\n                     match ty.sty {\n                         ty::Dynamic(..) => {\n-                            unimplemented!(\"Drop for trait object\");\n+                            unimpl!(\"Drop for trait object\");\n                         }\n                         _ => {\n                             let drop_fn_ty = drop_fn.ty(fx.tcx);\n@@ -1061,7 +1061,7 @@ pub fn trans_place<'a, 'tcx: 'a>(\n                     offset,\n                     min_length: _,\n                     from_end: false,\n-                } => unimplemented!(\n+                } => unimpl!(\n                     \"projection const index {:?} offset {:?} not from end\",\n                     projection.base,\n                     offset\n@@ -1070,12 +1070,12 @@ pub fn trans_place<'a, 'tcx: 'a>(\n                     offset,\n                     min_length: _,\n                     from_end: true,\n-                } => unimplemented!(\n+                } => unimpl!(\n                     \"projection const index {:?} offset {:?} from end\",\n                     projection.base,\n                     offset\n                 ),\n-                ProjectionElem::Subslice { from, to } => unimplemented!(\n+                ProjectionElem::Subslice { from, to } => unimpl!(\n                     \"projection subslice {:?} from {} to {}\",\n                     projection.base,\n                     from,"}]}